
shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005170  08005170  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005178  08005178  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000904  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000096c  2000096c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fb07  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022b8  00000000  00000000  0002fbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cb8  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009ca  00000000  00000000  00032b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024fb1  00000000  00000000  00033522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e9d3  00000000  00000000  000584d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc222  00000000  00000000  00066ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003cc4  00000000  00000000  001430c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00146d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050f0 	.word	0x080050f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080050f0 	.word	0x080050f0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <_write>:
void DisplayFND(uint8_t fnd, uint8_t location);
uint8_t ttl7447(uint8_t num);
void counter0to9999(uint8_t num[4], uint32_t tick);
void count_time(uint8_t num[4], uint32_t tick);

int _write(int file, char *ptr, int len) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <_write+0x28>)
 80005a4:	f002 fba3 	bl	8002cee <HAL_UART_Transmit>
	return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200002ac 	.word	0x200002ac

080005b8 <HAL_GPIO_EXTI_Callback>:
uint32_t current_tick_1;
uint32_t current_tick_2;
uint32_t old_tick_1;
uint32_t old_tick_2;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d104      	bne.n	80005d2 <HAL_GPIO_EXTI_Callback+0x1a>
		current_tick_1 = HAL_GetTick();
 80005c8:	f000 feb4 	bl	8001334 <HAL_GetTick>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a26      	ldr	r2, [pc, #152]	; (8000668 <HAL_GPIO_EXTI_Callback+0xb0>)
 80005d0:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == GPIO_PIN_3) {
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	2b08      	cmp	r3, #8
 80005d6:	d104      	bne.n	80005e2 <HAL_GPIO_EXTI_Callback+0x2a>
		current_tick_2 = HAL_GetTick();
 80005d8:	f000 feac 	bl	8001334 <HAL_GetTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <HAL_GPIO_EXTI_Callback+0xb4>)
 80005e0:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == GPIO_PIN_0 && (current_tick_1 - old_tick_1 > 300)) {
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d11b      	bne.n	8000620 <HAL_GPIO_EXTI_Callback+0x68>
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <HAL_GPIO_EXTI_Callback+0xb0>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <HAL_GPIO_EXTI_Callback+0xb8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80005f6:	d913      	bls.n	8000620 <HAL_GPIO_EXTI_Callback+0x68>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2101      	movs	r1, #1
 80005fc:	481d      	ldr	r0, [pc, #116]	; (8000674 <HAL_GPIO_EXTI_Callback+0xbc>)
 80005fe:	f001 fd41 	bl	8002084 <HAL_GPIO_WritePin>
		cnt++;
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <HAL_GPIO_EXTI_Callback+0xc0>)
 800060a:	6013      	str	r3, [r2, #0]
		printf("USART print test count=%d\r\n", cnt);
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <HAL_GPIO_EXTI_Callback+0xc0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	481a      	ldr	r0, [pc, #104]	; (800067c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000614:	f003 fef6 	bl	8004404 <iprintf>
		old_tick_1 = current_tick_1;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <HAL_GPIO_EXTI_Callback+0xb0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <HAL_GPIO_EXTI_Callback+0xb8>)
 800061e:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == GPIO_PIN_3 && (current_tick_2 - old_tick_2 > 300)) {
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	2b08      	cmp	r3, #8
 8000624:	d11b      	bne.n	800065e <HAL_GPIO_EXTI_Callback+0xa6>
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_GPIO_EXTI_Callback+0xc8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000634:	d913      	bls.n	800065e <HAL_GPIO_EXTI_Callback+0xa6>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <HAL_GPIO_EXTI_Callback+0xbc>)
 800063c:	f001 fd22 	bl	8002084 <HAL_GPIO_WritePin>
		cnt--;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3b01      	subs	r3, #1
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000648:	6013      	str	r3, [r2, #0]
		printf("USART print test count=%d\r\n", cnt);
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <HAL_GPIO_EXTI_Callback+0xc0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4619      	mov	r1, r3
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000652:	f003 fed7 	bl	8004404 <iprintf>
		old_tick_2 = current_tick_2;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <HAL_GPIO_EXTI_Callback+0xc8>)
 800065c:	6013      	str	r3, [r2, #0]
	}
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000800 	.word	0x20000800
 800066c:	20000804 	.word	0x20000804
 8000670:	20000808 	.word	0x20000808
 8000674:	40020400 	.word	0x40020400
 8000678:	200007fc 	.word	0x200007fc
 800067c:	08005108 	.word	0x08005108
 8000680:	2000080c 	.word	0x2000080c

08000684 <ttl7447.0>:

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */

	uint8_t ttl7447(uint8_t num) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	f8c7 c000 	str.w	ip, [r7]
		// for anode type
		switch (num) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b09      	cmp	r3, #9
 8000696:	d82b      	bhi.n	80006f0 <ttl7447.0+0x6c>
 8000698:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <ttl7447.0+0x1c>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	080006c9 	.word	0x080006c9
 80006a4:	080006cd 	.word	0x080006cd
 80006a8:	080006d1 	.word	0x080006d1
 80006ac:	080006d5 	.word	0x080006d5
 80006b0:	080006d9 	.word	0x080006d9
 80006b4:	080006dd 	.word	0x080006dd
 80006b8:	080006e1 	.word	0x080006e1
 80006bc:	080006e5 	.word	0x080006e5
 80006c0:	080006e9 	.word	0x080006e9
 80006c4:	080006ed 	.word	0x080006ed
		case 0:
			return 0xc0;
 80006c8:	23c0      	movs	r3, #192	; 0xc0
 80006ca:	e012      	b.n	80006f2 <ttl7447.0+0x6e>
		case 1:
			return 0xf9;
 80006cc:	23f9      	movs	r3, #249	; 0xf9
 80006ce:	e010      	b.n	80006f2 <ttl7447.0+0x6e>
		case 2:
			return 0xa4;
 80006d0:	23a4      	movs	r3, #164	; 0xa4
 80006d2:	e00e      	b.n	80006f2 <ttl7447.0+0x6e>
		case 3:
			return 0xb0;
 80006d4:	23b0      	movs	r3, #176	; 0xb0
 80006d6:	e00c      	b.n	80006f2 <ttl7447.0+0x6e>
		case 4:
			return 0x99;
 80006d8:	2399      	movs	r3, #153	; 0x99
 80006da:	e00a      	b.n	80006f2 <ttl7447.0+0x6e>
		case 5:
			return 0x92;
 80006dc:	2392      	movs	r3, #146	; 0x92
 80006de:	e008      	b.n	80006f2 <ttl7447.0+0x6e>
		case 6:
			return 0x82;
 80006e0:	2382      	movs	r3, #130	; 0x82
 80006e2:	e006      	b.n	80006f2 <ttl7447.0+0x6e>
		case 7:
			return 0xd8;
 80006e4:	23d8      	movs	r3, #216	; 0xd8
 80006e6:	e004      	b.n	80006f2 <ttl7447.0+0x6e>
		case 8:
			return 0x80;
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	e002      	b.n	80006f2 <ttl7447.0+0x6e>
		case 9:
			return 0x90;
 80006ec:	2390      	movs	r3, #144	; 0x90
 80006ee:	e000      	b.n	80006f2 <ttl7447.0+0x6e>
		default:
			return 0xff;
 80006f0:	23ff      	movs	r3, #255	; 0xff
		}
	}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop

08000700 <main>:
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
int main(void)
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	607b      	str	r3, [r7, #4]
  HAL_Init();
 800070c:	f000 fdac 	bl	8001268 <HAL_Init>
  SystemClock_Config();
 8000710:	f000 f8f2 	bl	80008f8 <SystemClock_Config>
  MX_GPIO_Init();
 8000714:	f000 fa24 	bl	8000b60 <MX_GPIO_Init>
  MX_ETH_Init();
 8000718:	f000 f97c 	bl	8000a14 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800071c:	f000 f9c8 	bl	8000ab0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000720:	f000 f9f0 	bl	8000b04 <MX_USB_OTG_FS_PCD_Init>
  MX_NVIC_Init();
 8000724:	f000 f952 	bl	80009cc <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (cnt > 9999)
 8000728:	4b42      	ldr	r3, [pc, #264]	; (8000834 <main+0x134>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000730:	4293      	cmp	r3, r2
 8000732:	dd02      	ble.n	800073a <main+0x3a>
			cnt = 0;
 8000734:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <main+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
		if (cnt < 0)
 800073a:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <main+0x134>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	da03      	bge.n	800074a <main+0x4a>
			cnt = 9999;
 8000742:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <main+0x134>)
 8000744:	f242 720f 	movw	r2, #9999	; 0x270f
 8000748:	601a      	str	r2, [r3, #0]

		//	  counter0to9999(count, tick);

		DisplayFND(ttl7447(cnt/1000), 1);	// thousands
 800074a:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <main+0x134>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a3a      	ldr	r2, [pc, #232]	; (8000838 <main+0x138>)
 8000750:	fb82 1203 	smull	r1, r2, r2, r3
 8000754:	1192      	asrs	r2, r2, #6
 8000756:	17db      	asrs	r3, r3, #31
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	1d3a      	adds	r2, r7, #4
 800075e:	4694      	mov	ip, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff8f 	bl	8000684 <ttl7447.0>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	469c      	mov	ip, r3
 800076e:	2101      	movs	r1, #1
 8000770:	4610      	mov	r0, r2
 8000772:	f000 f867 	bl	8000844 <DisplayFND.1>
		DisplayFND(ttl7447(cnt/100%10), 2);	// hundreds
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <main+0x134>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a30      	ldr	r2, [pc, #192]	; (800083c <main+0x13c>)
 800077c:	fb82 1203 	smull	r1, r2, r2, r3
 8000780:	1152      	asrs	r2, r2, #5
 8000782:	17db      	asrs	r3, r3, #31
 8000784:	1ad2      	subs	r2, r2, r3
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <main+0x140>)
 8000788:	fb83 1302 	smull	r1, r3, r3, r2
 800078c:	1099      	asrs	r1, r3, #2
 800078e:	17d3      	asrs	r3, r2, #31
 8000790:	1ac9      	subs	r1, r1, r3
 8000792:	460b      	mov	r3, r1
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	1ad1      	subs	r1, r2, r3
 800079c:	b2cb      	uxtb	r3, r1
 800079e:	1d3a      	adds	r2, r7, #4
 80007a0:	4694      	mov	ip, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff6e 	bl	8000684 <ttl7447.0>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	469c      	mov	ip, r3
 80007b0:	2102      	movs	r1, #2
 80007b2:	4610      	mov	r0, r2
 80007b4:	f000 f846 	bl	8000844 <DisplayFND.1>
		DisplayFND(ttl7447(cnt/10%10), 3);	// tens
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <main+0x134>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a20      	ldr	r2, [pc, #128]	; (8000840 <main+0x140>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1092      	asrs	r2, r2, #2
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad2      	subs	r2, r2, r3
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <main+0x140>)
 80007ca:	fb83 1302 	smull	r1, r3, r3, r2
 80007ce:	1099      	asrs	r1, r3, #2
 80007d0:	17d3      	asrs	r3, r2, #31
 80007d2:	1ac9      	subs	r1, r1, r3
 80007d4:	460b      	mov	r3, r1
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	440b      	add	r3, r1
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	1ad1      	subs	r1, r2, r3
 80007de:	b2cb      	uxtb	r3, r1
 80007e0:	1d3a      	adds	r2, r7, #4
 80007e2:	4694      	mov	ip, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff4d 	bl	8000684 <ttl7447.0>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	469c      	mov	ip, r3
 80007f2:	2103      	movs	r1, #3
 80007f4:	4610      	mov	r0, r2
 80007f6:	f000 f825 	bl	8000844 <DisplayFND.1>
		DisplayFND(ttl7447(cnt%10), 4);	// ones
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <main+0x134>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <main+0x140>)
 8000800:	fb83 1302 	smull	r1, r3, r3, r2
 8000804:	1099      	asrs	r1, r3, #2
 8000806:	17d3      	asrs	r3, r2, #31
 8000808:	1ac9      	subs	r1, r1, r3
 800080a:	460b      	mov	r3, r1
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	1ad1      	subs	r1, r2, r3
 8000814:	b2cb      	uxtb	r3, r1
 8000816:	1d3a      	adds	r2, r7, #4
 8000818:	4694      	mov	ip, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff32 	bl	8000684 <ttl7447.0>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	469c      	mov	ip, r3
 8000828:	2104      	movs	r1, #4
 800082a:	4610      	mov	r0, r2
 800082c:	f000 f80a 	bl	8000844 <DisplayFND.1>
		if (cnt > 9999)
 8000830:	e77a      	b.n	8000728 <main+0x28>
 8000832:	bf00      	nop
 8000834:	200007fc 	.word	0x200007fc
 8000838:	10624dd3 	.word	0x10624dd3
 800083c:	51eb851f 	.word	0x51eb851f
 8000840:	66666667 	.word	0x66666667

08000844 <DisplayFND.1>:
	void DisplayFND(uint8_t fnd, uint8_t location) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	71bb      	strb	r3, [r7, #6]
 8000854:	f8c7 c000 	str.w	ip, [r7]
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);	// latch clock pin off
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085e:	4825      	ldr	r0, [pc, #148]	; (80008f4 <DisplayFND.1+0xb0>)
 8000860:	f001 fc10 	bl	8002084 <HAL_GPIO_WritePin>
		uint16_t data = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	817b      	strh	r3, [r7, #10]
		data = fnd << 8;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	b29b      	uxth	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	817b      	strh	r3, [r7, #10]
		data |= 1 << (location - 1);
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	3b01      	subs	r3, #1
 8000874:	2201      	movs	r2, #1
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	b21a      	sxth	r2, r3
 800087c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000880:	4313      	orrs	r3, r2
 8000882:	b21b      	sxth	r3, r3
 8000884:	817b      	strh	r3, [r7, #10]
		for (int i = 0; i < 16; i++) {
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e025      	b.n	80008d8 <DisplayFND.1+0x94>
			if (data >> (15 - i) & 1) {	// MSB first in
 800088c:	897a      	ldrh	r2, [r7, #10]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f1c3 030f 	rsb	r3, r3, #15
 8000894:	fa42 f303 	asr.w	r3, r2, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	d006      	beq.n	80008ae <DisplayFND.1+0x6a>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, 1);	// Data line
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a6:	4813      	ldr	r0, [pc, #76]	; (80008f4 <DisplayFND.1+0xb0>)
 80008a8:	f001 fbec 	bl	8002084 <HAL_GPIO_WritePin>
 80008ac:	e005      	b.n	80008ba <DisplayFND.1+0x76>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, 0);	// Data line
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b4:	480f      	ldr	r0, [pc, #60]	; (80008f4 <DisplayFND.1+0xb0>)
 80008b6:	f001 fbe5 	bl	8002084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);	// shift clock pin on
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <DisplayFND.1+0xb0>)
 80008c2:	f001 fbdf 	bl	8002084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);	// shift clock pin off
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <DisplayFND.1+0xb0>)
 80008ce:	f001 fbd9 	bl	8002084 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	ddd6      	ble.n	800088c <DisplayFND.1+0x48>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);	// latch clock pin on
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <DisplayFND.1+0xb0>)
 80008e6:	f001 fbcd 	bl	8002084 <HAL_GPIO_WritePin>
	}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021400 	.word	0x40021400

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2230      	movs	r2, #48	; 0x30
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 fdd1 	bl	80044ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <SystemClock_Config+0xcc>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a27      	ldr	r2, [pc, #156]	; (80009c4 <SystemClock_Config+0xcc>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <SystemClock_Config+0xcc>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <SystemClock_Config+0xd0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SystemClock_Config+0xd0>)
 8000942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <SystemClock_Config+0xd0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000958:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000968:	2304      	movs	r3, #4
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800096c:	23a8      	movs	r3, #168	; 0xa8
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000974:	2307      	movs	r3, #7
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fcd1 	bl	8002324 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000988:	f000 f9ca 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000998:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2105      	movs	r1, #5
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 ff32 	bl	8002814 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009b6:	f000 f9b3 	bl	8000d20 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3750      	adds	r7, #80	; 0x50
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40007000 	.word	0x40007000

080009cc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	2006      	movs	r0, #6
 80009d6:	f000 fdb8 	bl	800154a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009da:	2006      	movs	r0, #6
 80009dc:	f000 fdd1 	bl	8001582 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2009      	movs	r0, #9
 80009e6:	f000 fdb0 	bl	800154a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009ea:	2009      	movs	r0, #9
 80009ec:	f000 fdc9 	bl	8001582 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2028      	movs	r0, #40	; 0x28
 80009f6:	f000 fda8 	bl	800154a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009fa:	2028      	movs	r0, #40	; 0x28
 80009fc:	f000 fdc1 	bl	8001582 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2027      	movs	r0, #39	; 0x27
 8000a06:	f000 fda0 	bl	800154a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a0a:	2027      	movs	r0, #39	; 0x27
 8000a0c:	f000 fdb9 	bl	8001582 <HAL_NVIC_EnableIRQ>
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_ETH_Init+0x84>)
 8000a1a:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <MX_ETH_Init+0x88>)
 8000a1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_ETH_Init+0x8c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_ETH_Init+0x8c>)
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_ETH_Init+0x8c>)
 8000a2c:	22e1      	movs	r2, #225	; 0xe1
 8000a2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_ETH_Init+0x8c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_ETH_Init+0x8c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_ETH_Init+0x8c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_ETH_Init+0x84>)
 8000a44:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <MX_ETH_Init+0x8c>)
 8000a46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_ETH_Init+0x84>)
 8000a4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a4e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_ETH_Init+0x84>)
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <MX_ETH_Init+0x90>)
 8000a54:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_ETH_Init+0x84>)
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <MX_ETH_Init+0x94>)
 8000a5a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_ETH_Init+0x84>)
 8000a5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a62:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_ETH_Init+0x84>)
 8000a66:	f000 fe39 	bl	80016dc <HAL_ETH_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a70:	f000 f956 	bl	8000d20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a74:	2238      	movs	r2, #56	; 0x38
 8000a76:	2100      	movs	r1, #0
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_ETH_Init+0x98>)
 8000a7a:	f003 fd18 	bl	80044ae <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_ETH_Init+0x98>)
 8000a80:	2221      	movs	r2, #33	; 0x21
 8000a82:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_ETH_Init+0x98>)
 8000a86:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a8a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_ETH_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200001fc 	.word	0x200001fc
 8000a9c:	40028000 	.word	0x40028000
 8000aa0:	20000810 	.word	0x20000810
 8000aa4:	2000015c 	.word	0x2000015c
 8000aa8:	200000bc 	.word	0x200000bc
 8000aac:	20000084 	.word	0x20000084

08000ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART3_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae8:	f002 f8b4 	bl	8002c54 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f915 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200002ac 	.word	0x200002ac
 8000b00:	40004800 	.word	0x40004800

08000b04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b48:	f001 face 	bl	80020e8 <HAL_PCD_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b52:	f000 f8e5 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200002f0 	.word	0x200002f0

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	4b64      	ldr	r3, [pc, #400]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a63      	ldr	r2, [pc, #396]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b61      	ldr	r3, [pc, #388]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	4b5d      	ldr	r3, [pc, #372]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a5c      	ldr	r2, [pc, #368]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b5a      	ldr	r3, [pc, #360]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b56      	ldr	r3, [pc, #344]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a55      	ldr	r2, [pc, #340]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b53      	ldr	r3, [pc, #332]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b4f      	ldr	r3, [pc, #316]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a4e      	ldr	r2, [pc, #312]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b4c      	ldr	r3, [pc, #304]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b48      	ldr	r3, [pc, #288]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a47      	ldr	r2, [pc, #284]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000bf0:	f043 0320 	orr.w	r3, r3, #32
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0320 	and.w	r3, r3, #32
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a40      	ldr	r2, [pc, #256]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a39      	ldr	r2, [pc, #228]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <MX_GPIO_Init+0x1ac>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c40:	4833      	ldr	r0, [pc, #204]	; (8000d10 <MX_GPIO_Init+0x1b0>)
 8000c42:	f001 fa1f 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000c4c:	4831      	ldr	r0, [pc, #196]	; (8000d14 <MX_GPIO_Init+0x1b4>)
 8000c4e:	f001 fa19 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2140      	movs	r1, #64	; 0x40
 8000c56:	4830      	ldr	r0, [pc, #192]	; (8000d18 <MX_GPIO_Init+0x1b8>)
 8000c58:	f001 fa14 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	482a      	ldr	r0, [pc, #168]	; (8000d1c <MX_GPIO_Init+0x1bc>)
 8000c74:	f001 f85a 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c78:	2309      	movs	r3, #9
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4823      	ldr	r0, [pc, #140]	; (8000d1c <MX_GPIO_Init+0x1bc>)
 8000c8e:	f001 f84d 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c92:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4819      	ldr	r0, [pc, #100]	; (8000d10 <MX_GPIO_Init+0x1b0>)
 8000cac:	f001 f83e 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000cb0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4812      	ldr	r0, [pc, #72]	; (8000d14 <MX_GPIO_Init+0x1b4>)
 8000cca:	f001 f82f 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cce:	2340      	movs	r3, #64	; 0x40
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_GPIO_Init+0x1b8>)
 8000ce6:	f001 f821 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <MX_GPIO_Init+0x1b8>)
 8000cfe:	f001 f815 	bl	8001d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d02:	bf00      	nop
 8000d04:	3730      	adds	r7, #48	; 0x30
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40021400 	.word	0x40021400
 8000d18:	40021800 	.word	0x40021800
 8000d1c:	40020800 	.word	0x40020800

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a55      	ldr	r2, [pc, #340]	; (8000ef0 <HAL_ETH_MspInit+0x174>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	f040 80a4 	bne.w	8000ee8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
 8000da4:	4b53      	ldr	r3, [pc, #332]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a52      	ldr	r2, [pc, #328]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db8:	623b      	str	r3, [r7, #32]
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
 8000dc0:	4b4c      	ldr	r3, [pc, #304]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a4b      	ldr	r2, [pc, #300]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	4b45      	ldr	r3, [pc, #276]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a44      	ldr	r2, [pc, #272]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000de2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b42      	ldr	r3, [pc, #264]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	4a3d      	ldr	r2, [pc, #244]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a36      	ldr	r2, [pc, #216]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e64:	2332      	movs	r3, #50	; 0x32
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e74:	230b      	movs	r3, #11
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <HAL_ETH_MspInit+0x17c>)
 8000e80:	f000 ff54 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e84:	2386      	movs	r3, #134	; 0x86
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e94:	230b      	movs	r3, #11
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4817      	ldr	r0, [pc, #92]	; (8000efc <HAL_ETH_MspInit+0x180>)
 8000ea0:	f000 ff44 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480f      	ldr	r0, [pc, #60]	; (8000f00 <HAL_ETH_MspInit+0x184>)
 8000ec2:	f000 ff33 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ec6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed8:	230b      	movs	r3, #11
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000ee4:	f000 ff22 	bl	8001d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3738      	adds	r7, #56	; 0x38
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40028000 	.word	0x40028000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40021800 	.word	0x40021800

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0x84>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12c      	bne.n	8000f84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f74:	2307      	movs	r3, #7
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f80:	f000 fed4 	bl	8001d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020c00 	.word	0x40020c00

08000f98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fb8:	d13f      	bne.n	800103a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <HAL_PCD_MspInit+0xac>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <HAL_PCD_MspInit+0xac>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <HAL_PCD_MspInit+0xac>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fd6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fe8:	230a      	movs	r3, #10
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4815      	ldr	r0, [pc, #84]	; (8001048 <HAL_PCD_MspInit+0xb0>)
 8000ff4:	f000 fe9a 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480e      	ldr	r0, [pc, #56]	; (8001048 <HAL_PCD_MspInit+0xb0>)
 800100e:	f000 fe8d 	bl	8001d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_PCD_MspInit+0xac>)
 8001014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_PCD_MspInit+0xac>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6353      	str	r3, [r2, #52]	; 0x34
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_PCD_MspInit+0xac>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_PCD_MspInit+0xac>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_PCD_MspInit+0xac>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001098:	f000 f938 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f001 f807 	bl	80020b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}

080010ae <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80010b2:	2008      	movs	r0, #8
 80010b4:	f001 f800 	bl	80020b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <USART3_IRQHandler+0x10>)
 80010c2:	f001 fea7 	bl	8002e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002ac 	.word	0x200002ac

080010d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80010d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010d8:	f000 ffee 	bl	80020b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e00a      	b.n	8001108 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010f2:	f3af 8000 	nop.w
 80010f6:	4601      	mov	r1, r0
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	b2ca      	uxtb	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf0      	blt.n	80010f2 <_read+0x12>
  }

  return len;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_close>:
  }
  return len;
}

int _close(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001142:	605a      	str	r2, [r3, #4]
  return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_isatty>:

int _isatty(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f003 f9ca 	bl	800454c <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	220c      	movs	r2, #12
 80011bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_sbrk+0x64>)
 80011d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20030000 	.word	0x20030000
 80011e4:	00000400 	.word	0x00000400
 80011e8:	20000818 	.word	0x20000818
 80011ec:	20000970 	.word	0x20000970

080011f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <SystemInit+0x20>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <SystemInit+0x20>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800124c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800121a:	490e      	ldr	r1, [pc, #56]	; (8001254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800121c:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001230:	4c0b      	ldr	r4, [pc, #44]	; (8001260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800123e:	f7ff ffd7 	bl	80011f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001242:	f003 f989 	bl	8004558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f7ff fa5b 	bl	8000700 <main>
  bx  lr    
 800124a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800124c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001258:	08005180 	.word	0x08005180
  ldr r2, =_sbss
 800125c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001260:	2000096c 	.word	0x2000096c

08001264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <HAL_Init+0x40>)
 8001272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_Init+0x40>)
 800127e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_Init+0x40>)
 800128a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 f94f 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f808 	bl	80012ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800129c:	f7ff fd46 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023c00 	.word	0x40023c00

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x54>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x58>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f967 	bl	800159e <HAL_SYSTICK_Config>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00e      	b.n	80012f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d80a      	bhi.n	80012f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f000 f92f 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <HAL_InitTick+0x5c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000000 	.word	0x20000000
 8001304:	20000008 	.word	0x20000008
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008
 8001330:	2000081c 	.word	0x2000081c

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2000081c 	.word	0x2000081c

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff29 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff3e 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff31 	bl	80013f8 <__NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffa2 	bl	80014f0 <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff feb6 	bl	8001334 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d008      	beq.n	80015e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e052      	b.n	800168e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0216 	bic.w	r2, r2, #22
 80015f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001606:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	2b00      	cmp	r3, #0
 800160e:	d103      	bne.n	8001618 <HAL_DMA_Abort+0x62>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0208 	bic.w	r2, r2, #8
 8001626:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001638:	e013      	b.n	8001662 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800163a:	f7ff fe7b 	bl	8001334 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b05      	cmp	r3, #5
 8001646:	d90c      	bls.n	8001662 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2203      	movs	r2, #3
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e015      	b.n	800168e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e4      	bne.n	800163a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	223f      	movs	r2, #63	; 0x3f
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d004      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e00c      	b.n	80016ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2205      	movs	r2, #5
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e06c      	b.n	80017c8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d106      	bne.n	8001706 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2223      	movs	r2, #35	; 0x23
 80016fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fb3b 	bl	8000d7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_ETH_Init+0xf4>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a30      	ldr	r2, [pc, #192]	; (80017d0 <HAL_ETH_Init+0xf4>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_ETH_Init+0xf4>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <HAL_ETH_Init+0xf8>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4a2b      	ldr	r2, [pc, #172]	; (80017d4 <HAL_ETH_Init+0xf8>)
 8001728:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800172c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_ETH_Init+0xf8>)
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	4927      	ldr	r1, [pc, #156]	; (80017d4 <HAL_ETH_Init+0xf8>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_ETH_Init+0xf8>)
 800173e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001756:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001758:	f7ff fdec 	bl	8001334 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800175e:	e011      	b.n	8001784 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001760:	f7ff fde8 	bl	8001334 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800176e:	d909      	bls.n	8001784 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2204      	movs	r2, #4
 8001774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	22e0      	movs	r2, #224	; 0xe0
 800177c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e021      	b.n	80017c8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1e4      	bne.n	8001760 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f958 	bl	8001a4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f9ff 	bl	8001ba0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fa55 	bl	8001c52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	461a      	mov	r2, r3
 80017ae:	2100      	movs	r1, #0
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f9bd 	bl	8001b30 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2210      	movs	r2, #16
 80017c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40013800 	.word	0x40013800

080017d8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4b51      	ldr	r3, [pc, #324]	; (8001934 <ETH_SetMACConfig+0x15c>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	7c1b      	ldrb	r3, [r3, #16]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <ETH_SetMACConfig+0x28>
 80017fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017fe:	e000      	b.n	8001802 <ETH_SetMACConfig+0x2a>
 8001800:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	7c5b      	ldrb	r3, [r3, #17]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <ETH_SetMACConfig+0x38>
 800180a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800180e:	e000      	b.n	8001812 <ETH_SetMACConfig+0x3a>
 8001810:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001812:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001818:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	7fdb      	ldrb	r3, [r3, #31]
 800181e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001820:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001826:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	7f92      	ldrb	r2, [r2, #30]
 800182c:	2a00      	cmp	r2, #0
 800182e:	d102      	bne.n	8001836 <ETH_SetMACConfig+0x5e>
 8001830:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001834:	e000      	b.n	8001838 <ETH_SetMACConfig+0x60>
 8001836:	2200      	movs	r2, #0
                        macconf->Speed |
 8001838:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	7f1b      	ldrb	r3, [r3, #28]
 800183e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001840:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001846:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800184e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001856:	2a00      	cmp	r2, #0
 8001858:	d102      	bne.n	8001860 <ETH_SetMACConfig+0x88>
 800185a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185e:	e000      	b.n	8001862 <ETH_SetMACConfig+0x8a>
 8001860:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001862:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7bdb      	ldrb	r3, [r3, #15]
 8001868:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800186a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001870:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001878:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800187a:	4313      	orrs	r3, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001892:	2001      	movs	r0, #1
 8001894:	f7ff fd5a 	bl	800134c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80018be:	2a00      	cmp	r2, #0
 80018c0:	d101      	bne.n	80018c6 <ETH_SetMACConfig+0xee>
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	e000      	b.n	80018c8 <ETH_SetMACConfig+0xf0>
 80018c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80018d6:	2a01      	cmp	r2, #1
 80018d8:	d101      	bne.n	80018de <ETH_SetMACConfig+0x106>
 80018da:	2208      	movs	r2, #8
 80018dc:	e000      	b.n	80018e0 <ETH_SetMACConfig+0x108>
 80018de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80018e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80018e8:	2a01      	cmp	r2, #1
 80018ea:	d101      	bne.n	80018f0 <ETH_SetMACConfig+0x118>
 80018ec:	2204      	movs	r2, #4
 80018ee:	e000      	b.n	80018f2 <ETH_SetMACConfig+0x11a>
 80018f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80018fa:	2a01      	cmp	r2, #1
 80018fc:	d101      	bne.n	8001902 <ETH_SetMACConfig+0x12a>
 80018fe:	2202      	movs	r2, #2
 8001900:	e000      	b.n	8001904 <ETH_SetMACConfig+0x12c>
 8001902:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001904:	4313      	orrs	r3, r2
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800191c:	2001      	movs	r0, #1
 800191e:	f7ff fd15 	bl	800134c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	ff20810f 	.word	0xff20810f

08001938 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <ETH_SetDMAConfig+0x110>)
 8001952:	4013      	ands	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	7b1b      	ldrb	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <ETH_SetDMAConfig+0x2c>
 800195e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001962:	e000      	b.n	8001966 <ETH_SetDMAConfig+0x2e>
 8001964:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	7b5b      	ldrb	r3, [r3, #13]
 800196a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800196c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	7f52      	ldrb	r2, [r2, #29]
 8001972:	2a00      	cmp	r2, #0
 8001974:	d102      	bne.n	800197c <ETH_SetDMAConfig+0x44>
 8001976:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800197a:	e000      	b.n	800197e <ETH_SetDMAConfig+0x46>
 800197c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800197e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	7b9b      	ldrb	r3, [r3, #14]
 8001984:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001986:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800198c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	7f1b      	ldrb	r3, [r3, #28]
 8001992:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001994:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	7f9b      	ldrb	r3, [r3, #30]
 800199a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800199c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019ac:	4313      	orrs	r3, r2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff fcbc 	bl	800134c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019dc:	461a      	mov	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	791b      	ldrb	r3, [r3, #4]
 80019e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80019f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff fc8d 	bl	800134c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	f8de3f23 	.word	0xf8de3f23

08001a4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0a6      	sub	sp, #152	; 0x98
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001aae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ac0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fe86 	bl	80017d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001af8:	2301      	movs	r3, #1
 8001afa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b00:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff08 	bl	8001938 <ETH_SetDMAConfig>
}
 8001b28:	bf00      	nop
 8001b2a:	3798      	adds	r7, #152	; 0x98
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3305      	adds	r3, #5
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	3204      	adds	r2, #4
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <ETH_MACAddressConfig+0x68>)
 8001b52:	4413      	add	r3, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3303      	adds	r3, #3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	061a      	lsls	r2, r3, #24
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3302      	adds	r3, #2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	4313      	orrs	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <ETH_MACAddressConfig+0x6c>)
 8001b82:	4413      	add	r3, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40028040 	.word	0x40028040
 8001b9c:	40028044 	.word	0x40028044

08001ba0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e03e      	b.n	8001c2c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68d9      	ldr	r1, [r3, #12]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	3206      	adds	r2, #6
 8001be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d80c      	bhi.n	8001c10 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68d9      	ldr	r1, [r3, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	e004      	b.n	8001c1a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d9bd      	bls.n	8001bae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	611a      	str	r2, [r3, #16]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e046      	b.n	8001cee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6919      	ldr	r1, [r3, #16]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001ca4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	3212      	adds	r2, #18
 8001cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d80c      	bhi.n	8001cde <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6919      	ldr	r1, [r3, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	e004      	b.n	8001ce8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d9b5      	bls.n	8001c60 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1e:	60da      	str	r2, [r3, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e177      	b.n	8002038 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 8166 	bne.w	8002032 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d005      	beq.n	8001d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d130      	bne.n	8001de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 0201 	and.w	r2, r3, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d017      	beq.n	8001e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d123      	bne.n	8001e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	69b9      	ldr	r1, [r7, #24]
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80c0 	beq.w	8002032 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b66      	ldr	r3, [pc, #408]	; (8002050 <HAL_GPIO_Init+0x324>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a65      	ldr	r2, [pc, #404]	; (8002050 <HAL_GPIO_Init+0x324>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b63      	ldr	r3, [pc, #396]	; (8002050 <HAL_GPIO_Init+0x324>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ece:	4a61      	ldr	r2, [pc, #388]	; (8002054 <HAL_GPIO_Init+0x328>)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a58      	ldr	r2, [pc, #352]	; (8002058 <HAL_GPIO_Init+0x32c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d037      	beq.n	8001f6a <HAL_GPIO_Init+0x23e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a57      	ldr	r2, [pc, #348]	; (800205c <HAL_GPIO_Init+0x330>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d031      	beq.n	8001f66 <HAL_GPIO_Init+0x23a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a56      	ldr	r2, [pc, #344]	; (8002060 <HAL_GPIO_Init+0x334>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d02b      	beq.n	8001f62 <HAL_GPIO_Init+0x236>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a55      	ldr	r2, [pc, #340]	; (8002064 <HAL_GPIO_Init+0x338>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d025      	beq.n	8001f5e <HAL_GPIO_Init+0x232>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a54      	ldr	r2, [pc, #336]	; (8002068 <HAL_GPIO_Init+0x33c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01f      	beq.n	8001f5a <HAL_GPIO_Init+0x22e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a53      	ldr	r2, [pc, #332]	; (800206c <HAL_GPIO_Init+0x340>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d019      	beq.n	8001f56 <HAL_GPIO_Init+0x22a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_GPIO_Init+0x344>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x226>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a51      	ldr	r2, [pc, #324]	; (8002074 <HAL_GPIO_Init+0x348>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x222>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a50      	ldr	r2, [pc, #320]	; (8002078 <HAL_GPIO_Init+0x34c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x21e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4f      	ldr	r2, [pc, #316]	; (800207c <HAL_GPIO_Init+0x350>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x21a>
 8001f42:	2309      	movs	r3, #9
 8001f44:	e012      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f46:	230a      	movs	r3, #10
 8001f48:	e010      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f4a:	2308      	movs	r3, #8
 8001f4c:	e00e      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f4e:	2307      	movs	r3, #7
 8001f50:	e00c      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f52:	2306      	movs	r3, #6
 8001f54:	e00a      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f56:	2305      	movs	r3, #5
 8001f58:	e008      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x240>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	f002 0203 	and.w	r2, r2, #3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f7c:	4935      	ldr	r1, [pc, #212]	; (8002054 <HAL_GPIO_Init+0x328>)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_GPIO_Init+0x354>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fae:	4a34      	ldr	r2, [pc, #208]	; (8002080 <HAL_GPIO_Init+0x354>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b32      	ldr	r3, [pc, #200]	; (8002080 <HAL_GPIO_Init+0x354>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd8:	4a29      	ldr	r2, [pc, #164]	; (8002080 <HAL_GPIO_Init+0x354>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_GPIO_Init+0x354>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002002:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <HAL_GPIO_Init+0x354>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_GPIO_Init+0x354>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_GPIO_Init+0x354>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3301      	adds	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b0f      	cmp	r3, #15
 800203c:	f67f ae84 	bls.w	8001d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40013800 	.word	0x40013800
 8002058:	40020000 	.word	0x40020000
 800205c:	40020400 	.word	0x40020400
 8002060:	40020800 	.word	0x40020800
 8002064:	40020c00 	.word	0x40020c00
 8002068:	40021000 	.word	0x40021000
 800206c:	40021400 	.word	0x40021400
 8002070:	40021800 	.word	0x40021800
 8002074:	40021c00 	.word	0x40021c00
 8002078:	40022000 	.word	0x40022000
 800207c:	40022400 	.word	0x40022400
 8002080:	40013c00 	.word	0x40013c00

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa6e 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40013c00 	.word	0x40013c00

080020e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	b08f      	sub	sp, #60	; 0x3c
 80020ec:	af0a      	add	r7, sp, #40	; 0x28
 80020ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e10f      	b.n	800231a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d106      	bne.n	800211a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7fe ff3f 	bl	8000f98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2203      	movs	r2, #3
 800211e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f001 fe00 	bl	8003d3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	687e      	ldr	r6, [r7, #4]
 8002146:	466d      	mov	r5, sp
 8002148:	f106 0410 	add.w	r4, r6, #16
 800214c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002154:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002158:	e885 0003 	stmia.w	r5, {r0, r1}
 800215c:	1d33      	adds	r3, r6, #4
 800215e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f001 fd8b 	bl	8003c7c <USB_CoreInit>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0d0      	b.n	800231a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f001 fdee 	bl	8003d60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e04a      	b.n	8002220 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	333d      	adds	r3, #61	; 0x3d
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	333c      	adds	r3, #60	; 0x3c
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	b298      	uxth	r0, r3
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3344      	adds	r3, #68	; 0x44
 80021c6:	4602      	mov	r2, r0
 80021c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3340      	adds	r3, #64	; 0x40
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	3348      	adds	r3, #72	; 0x48
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	334c      	adds	r3, #76	; 0x4c
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3354      	adds	r3, #84	; 0x54
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3301      	adds	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	d3af      	bcc.n	800218a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	e044      	b.n	80022ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	3301      	adds	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3b5      	bcc.n	8002230 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	687e      	ldr	r6, [r7, #4]
 80022cc:	466d      	mov	r5, sp
 80022ce:	f106 0410 	add.w	r4, r6, #16
 80022d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022de:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e2:	1d33      	adds	r3, r6, #4
 80022e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e6:	6838      	ldr	r0, [r7, #0]
 80022e8:	f001 fd86 	bl	8003df8 <USB_DevInit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00d      	b.n	800231a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f001 ff51 	bl	80041ba <USB_DevDisconnect>

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e267      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d075      	beq.n	800242e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002342:	4b88      	ldr	r3, [pc, #544]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d00c      	beq.n	8002368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234e:	4b85      	ldr	r3, [pc, #532]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	2b08      	cmp	r3, #8
 8002358:	d112      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235a:	4b82      	ldr	r3, [pc, #520]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002366:	d10b      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b7e      	ldr	r3, [pc, #504]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05b      	beq.n	800242c <HAL_RCC_OscConfig+0x108>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d157      	bne.n	800242c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e242      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x74>
 800238a:	4b76      	ldr	r3, [pc, #472]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a75      	ldr	r2, [pc, #468]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x98>
 80023a2:	4b70      	ldr	r3, [pc, #448]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6f      	ldr	r2, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6c      	ldr	r2, [pc, #432]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 80023bc:	4b69      	ldr	r3, [pc, #420]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a68      	ldr	r2, [pc, #416]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b66      	ldr	r3, [pc, #408]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a65      	ldr	r2, [pc, #404]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe ffaa 	bl	8001334 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe ffa6 	bl	8001334 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e207      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xc0>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe ff96 	bl	8001334 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe ff92 	bl	8001334 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1f3      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	4b51      	ldr	r3, [pc, #324]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0xe8>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d063      	beq.n	8002502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243a:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d11c      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002452:	4b44      	ldr	r3, [pc, #272]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1c7      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4937      	ldr	r1, [pc, #220]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	e03a      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002494:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_RCC_OscConfig+0x244>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe ff4b 	bl	8001334 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a2:	f7fe ff47 	bl	8001334 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1a8      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b28      	ldr	r3, [pc, #160]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4925      	ldr	r1, [pc, #148]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_OscConfig+0x244>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe ff2a 	bl	8001334 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e4:	f7fe ff26 	bl	8001334 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e187      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d036      	beq.n	800257c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_RCC_OscConfig+0x248>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7fe ff0a 	bl	8001334 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002524:	f7fe ff06 	bl	8001334 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e167      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x200>
 8002542:	e01b      	b.n	800257c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_OscConfig+0x248>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7fe fef3 	bl	8001334 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	e00e      	b.n	8002570 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002552:	f7fe feef 	bl	8001334 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d907      	bls.n	8002570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e150      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
 8002564:	40023800 	.word	0x40023800
 8002568:	42470000 	.word	0x42470000
 800256c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ea      	bne.n	8002552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8097 	beq.w	80026b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258e:	4b81      	ldr	r3, [pc, #516]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b7d      	ldr	r3, [pc, #500]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a7c      	ldr	r2, [pc, #496]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b7a      	ldr	r3, [pc, #488]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b77      	ldr	r3, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x474>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d118      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c6:	4b74      	ldr	r3, [pc, #464]	; (8002798 <HAL_RCC_OscConfig+0x474>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a73      	ldr	r2, [pc, #460]	; (8002798 <HAL_RCC_OscConfig+0x474>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d2:	f7fe feaf 	bl	8001334 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025da:	f7fe feab 	bl	8001334 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e10c      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x474>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x2ea>
 8002600:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a63      	ldr	r2, [pc, #396]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x324>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b05      	cmp	r3, #5
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x30c>
 8002616:	4b5f      	ldr	r3, [pc, #380]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	4a5e      	ldr	r2, [pc, #376]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	6713      	str	r3, [r2, #112]	; 0x70
 8002622:	4b5c      	ldr	r3, [pc, #368]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	4a5b      	ldr	r2, [pc, #364]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6713      	str	r3, [r2, #112]	; 0x70
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0x324>
 8002630:	4b58      	ldr	r3, [pc, #352]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a57      	ldr	r2, [pc, #348]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b55      	ldr	r3, [pc, #340]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a54      	ldr	r2, [pc, #336]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002642:	f023 0304 	bic.w	r3, r3, #4
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe fe70 	bl	8001334 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	e00a      	b.n	800266e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7fe fe6c 	bl	8001334 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0cb      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	4b49      	ldr	r3, [pc, #292]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0ee      	beq.n	8002658 <HAL_RCC_OscConfig+0x334>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267c:	f7fe fe5a 	bl	8001334 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002682:	e00a      	b.n	800269a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7fe fe56 	bl	8001334 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e0b5      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269a:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ee      	bne.n	8002684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	4a38      	ldr	r2, [pc, #224]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a1 	beq.w	8002804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c2:	4b34      	ldr	r3, [pc, #208]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d05c      	beq.n	8002788 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d141      	bne.n	800275a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCC_OscConfig+0x478>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fe2a 	bl	8001334 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e4:	f7fe fe26 	bl	8001334 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e087      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	019b      	lsls	r3, r3, #6
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	3b01      	subs	r3, #1
 800271c:	041b      	lsls	r3, r3, #16
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	491b      	ldr	r1, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_RCC_OscConfig+0x478>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7fe fdff 	bl	8001334 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe fdfb 	bl	8001334 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e05c      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x416>
 8002758:	e054      	b.n	8002804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_RCC_OscConfig+0x478>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe fde8 	bl	8001334 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fde4 	bl	8001334 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e045      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x444>
 8002786:	e03d      	b.n	8002804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e038      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
 8002794:	40023800 	.word	0x40023800
 8002798:	40007000 	.word	0x40007000
 800279c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x4ec>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d028      	beq.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d121      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d11a      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d8:	4293      	cmp	r3, r2
 80027da:	d111      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0cc      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b68      	ldr	r3, [pc, #416]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d90c      	bls.n	8002850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b65      	ldr	r3, [pc, #404]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002868:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800288a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	494d      	ldr	r1, [pc, #308]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d044      	beq.n	8002934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d119      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e067      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4934      	ldr	r1, [pc, #208]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002904:	f7fe fd16 	bl	8001334 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7fe fd12 	bl	8001334 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e04f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d1eb      	bne.n	800290c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d20c      	bcs.n	800295c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e032      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4916      	ldr	r1, [pc, #88]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	490e      	ldr	r1, [pc, #56]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800299a:	f000 f821 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	490a      	ldr	r1, [pc, #40]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	5ccb      	ldrb	r3, [r1, r3]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fc76 	bl	80012ac <HAL_InitTick>

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023c00 	.word	0x40023c00
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08005124 	.word	0x08005124
 80029d8:	20000000 	.word	0x20000000
 80029dc:	20000004 	.word	0x20000004

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e4:	b094      	sub	sp, #80	; 0x50
 80029e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	647b      	str	r3, [r7, #68]	; 0x44
 80029ec:	2300      	movs	r3, #0
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f0:	2300      	movs	r3, #0
 80029f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f8:	4b79      	ldr	r3, [pc, #484]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d00d      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x40>
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	f200 80e1 	bhi.w	8002bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a12:	e0db      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a18:	e0db      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a1e:	e0d8      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a20:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2a:	4b6d      	ldr	r3, [pc, #436]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d063      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a52:	4622      	mov	r2, r4
 8002a54:	462b      	mov	r3, r5
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	0159      	lsls	r1, r3, #5
 8002a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a64:	0150      	lsls	r0, r2, #5
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	1a51      	subs	r1, r2, r1
 8002a6e:	6139      	str	r1, [r7, #16]
 8002a70:	4629      	mov	r1, r5
 8002a72:	eb63 0301 	sbc.w	r3, r3, r1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a84:	4659      	mov	r1, fp
 8002a86:	018b      	lsls	r3, r1, #6
 8002a88:	4651      	mov	r1, sl
 8002a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a8e:	4651      	mov	r1, sl
 8002a90:	018a      	lsls	r2, r1, #6
 8002a92:	4651      	mov	r1, sl
 8002a94:	ebb2 0801 	subs.w	r8, r2, r1
 8002a98:	4659      	mov	r1, fp
 8002a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab2:	4690      	mov	r8, r2
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	4623      	mov	r3, r4
 8002ab8:	eb18 0303 	adds.w	r3, r8, r3
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	462b      	mov	r3, r5
 8002ac0:	eb49 0303 	adc.w	r3, r9, r3
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	024b      	lsls	r3, r1, #9
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002adc:	4621      	mov	r1, r4
 8002ade:	024a      	lsls	r2, r1, #9
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002af0:	f7fd fbce 	bl	8000290 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002afc:	e058      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	2200      	movs	r2, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	4611      	mov	r1, r2
 8002b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	f04f 0000 	mov.w	r0, #0
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	0159      	lsls	r1, r3, #5
 8002b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2a:	0150      	lsls	r0, r2, #5
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4641      	mov	r1, r8
 8002b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b36:	4649      	mov	r1, r9
 8002b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b50:	ebb2 040a 	subs.w	r4, r2, sl
 8002b54:	eb63 050b 	sbc.w	r5, r3, fp
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	00eb      	lsls	r3, r5, #3
 8002b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	18e3      	adds	r3, r4, r3
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	464b      	mov	r3, r9
 8002b74:	eb45 0303 	adc.w	r3, r5, r3
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b86:	4629      	mov	r1, r5
 8002b88:	028b      	lsls	r3, r1, #10
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b90:	4621      	mov	r1, r4
 8002b92:	028a      	lsls	r2, r1, #10
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	61fa      	str	r2, [r7, #28]
 8002ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba4:	f7fd fb74 	bl	8000290 <__aeabi_uldivmod>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4613      	mov	r3, r2
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3750      	adds	r7, #80	; 0x50
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	007a1200 	.word	0x007a1200

08002bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000000 	.word	0x20000000

08002c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c08:	f7ff fff0 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	0a9b      	lsrs	r3, r3, #10
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	4903      	ldr	r1, [pc, #12]	; (8002c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	08005134 	.word	0x08005134

08002c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c30:	f7ff ffdc 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	0b5b      	lsrs	r3, r3, #13
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4903      	ldr	r1, [pc, #12]	; (8002c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	08005134 	.word	0x08005134

08002c54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e03f      	b.n	8002ce6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe f944 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	; 0x24
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fd7b 	bl	8003794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ccc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b08a      	sub	sp, #40	; 0x28
 8002cf2:	af02      	add	r7, sp, #8
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	603b      	str	r3, [r7, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d17c      	bne.n	8002e08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_UART_Transmit+0x2c>
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e075      	b.n	8002e0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_UART_Transmit+0x3e>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e06e      	b.n	8002e0a <HAL_UART_Transmit+0x11c>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2221      	movs	r2, #33	; 0x21
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d42:	f7fe faf7 	bl	8001334 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5c:	d108      	bne.n	8002d70 <HAL_UART_Transmit+0x82>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e003      	b.n	8002d78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d80:	e02a      	b.n	8002dd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 faf9 	bl	8003384 <UART_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e036      	b.n	8002e0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10b      	bne.n	8002dba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	3302      	adds	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	e007      	b.n	8002dca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1cf      	bne.n	8002d82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2140      	movs	r1, #64	; 0x40
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fac9 	bl	8003384 <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e006      	b.n	8002e0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b0ba      	sub	sp, #232	; 0xe8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10f      	bne.n	8002e7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_UART_IRQHandler+0x66>
 8002e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fbd3 	bl	800361e <UART_Receive_IT>
      return;
 8002e78:	e256      	b.n	8003328 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80de 	beq.w	8003040 <HAL_UART_IRQHandler+0x22c>
 8002e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80d1 	beq.w	8003040 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_UART_IRQHandler+0xae>
 8002eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_UART_IRQHandler+0xd2>
 8002ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f043 0202 	orr.w	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_UART_IRQHandler+0xf6>
 8002ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f043 0204 	orr.w	r2, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d011      	beq.n	8002f3a <HAL_UART_IRQHandler+0x126>
 8002f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d105      	bne.n	8002f2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f043 0208 	orr.w	r2, r3, #8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 81ed 	beq.w	800331e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_UART_IRQHandler+0x14e>
 8002f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fb5e 	bl	800361e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_UART_IRQHandler+0x17a>
 8002f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d04f      	beq.n	800302e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fa66 	bl	8003460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d141      	bne.n	8003026 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3314      	adds	r3, #20
 8002fca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1d9      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d013      	beq.n	800301e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	4a7d      	ldr	r2, [pc, #500]	; (80031f0 <HAL_UART_IRQHandler+0x3dc>)
 8002ffc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fb47 	bl	8001696 <HAL_DMA_Abort_IT>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003018:	4610      	mov	r0, r2
 800301a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	e00e      	b.n	800303c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f99a 	bl	8003358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	e00a      	b.n	800303c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f996 	bl	8003358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	e006      	b.n	800303c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f992 	bl	8003358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800303a:	e170      	b.n	800331e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	bf00      	nop
    return;
 800303e:	e16e      	b.n	800331e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	2b01      	cmp	r3, #1
 8003046:	f040 814a 	bne.w	80032de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8143 	beq.w	80032de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 813c 	beq.w	80032de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	f040 80b4 	bne.w	80031f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003098:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8140 	beq.w	8003322 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030aa:	429a      	cmp	r2, r3
 80030ac:	f080 8139 	bcs.w	8003322 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c2:	f000 8088 	beq.w	80031d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800310a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1d9      	bne.n	80030c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3314      	adds	r3, #20
 8003118:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003136:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800313a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800313e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e1      	bne.n	8003112 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3314      	adds	r3, #20
 8003154:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800315e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003172:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003174:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003178:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e3      	bne.n	800314e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a6:	f023 0310 	bic.w	r3, r3, #16
 80031aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80031ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031c0:	e841 2300 	strex	r3, r2, [r1]
 80031c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e3      	bne.n	8003194 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe f9f0 	bl	80015b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031de:	b29b      	uxth	r3, r3
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f8c0 	bl	800336c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031ec:	e099      	b.n	8003322 <HAL_UART_IRQHandler+0x50e>
 80031ee:	bf00      	nop
 80031f0:	08003527 	.word	0x08003527
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 808b 	beq.w	8003326 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8086 	beq.w	8003326 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800323e:	647a      	str	r2, [r7, #68]	; 0x44
 8003240:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800324c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e3      	bne.n	800321a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3314      	adds	r3, #20
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	623b      	str	r3, [r7, #32]
   return(result);
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3314      	adds	r3, #20
 8003272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003276:	633a      	str	r2, [r7, #48]	; 0x30
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800327c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e3      	bne.n	8003252 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0310 	bic.w	r3, r3, #16
 80032ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032bc:	61fa      	str	r2, [r7, #28]
 80032be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	69b9      	ldr	r1, [r7, #24]
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	617b      	str	r3, [r7, #20]
   return(result);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e3      	bne.n	8003298 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f848 	bl	800336c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032dc:	e023      	b.n	8003326 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_UART_IRQHandler+0x4ea>
 80032ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f929 	bl	800354e <UART_Transmit_IT>
    return;
 80032fc:	e014      	b.n	8003328 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00e      	beq.n	8003328 <HAL_UART_IRQHandler+0x514>
 800330a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f969 	bl	80035ee <UART_EndTransmit_IT>
    return;
 800331c:	e004      	b.n	8003328 <HAL_UART_IRQHandler+0x514>
    return;
 800331e:	bf00      	nop
 8003320:	e002      	b.n	8003328 <HAL_UART_IRQHandler+0x514>
      return;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <HAL_UART_IRQHandler+0x514>
      return;
 8003326:	bf00      	nop
  }
}
 8003328:	37e8      	adds	r7, #232	; 0xe8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop

08003330 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b090      	sub	sp, #64	; 0x40
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003394:	e050      	b.n	8003438 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d04c      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800339e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80033a4:	f7fd ffc6 	bl	8001334 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d241      	bcs.n	8003438 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033d4:	637a      	str	r2, [r7, #52]	; 0x34
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	613b      	str	r3, [r7, #16]
   return(result);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3314      	adds	r3, #20
 8003406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003408:	623a      	str	r2, [r7, #32]
 800340a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	69f9      	ldr	r1, [r7, #28]
 800340e:	6a3a      	ldr	r2, [r7, #32]
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	61bb      	str	r3, [r7, #24]
   return(result);
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e5      	bne.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e00f      	b.n	8003458 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	429a      	cmp	r2, r3
 8003454:	d09f      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3740      	adds	r7, #64	; 0x40
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b095      	sub	sp, #84	; 0x54
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003488:	643a      	str	r2, [r7, #64]	; 0x40
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800348e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3314      	adds	r3, #20
 80034a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e5      	bne.n	800349c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d119      	bne.n	800350c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f023 0310 	bic.w	r3, r3, #16
 80034ee:	647b      	str	r3, [r7, #68]	; 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f8:	61ba      	str	r2, [r7, #24]
 80034fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6979      	ldr	r1, [r7, #20]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	613b      	str	r3, [r7, #16]
   return(result);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e5      	bne.n	80034d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
}
 800351a:	bf00      	nop
 800351c:	3754      	adds	r7, #84	; 0x54
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff ff09 	bl	8003358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b21      	cmp	r3, #33	; 0x21
 8003560:	d13e      	bne.n	80035e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	d114      	bne.n	8003596 <UART_Transmit_IT+0x48>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d110      	bne.n	8003596 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003588:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	621a      	str	r2, [r3, #32]
 8003594:	e008      	b.n	80035a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6211      	str	r1, [r2, #32]
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4619      	mov	r1, r3
 80035b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10f      	bne.n	80035dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	e000      	b.n	80035e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
  }
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003604:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fe8e 	bl	8003330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b08c      	sub	sp, #48	; 0x30
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b22      	cmp	r3, #34	; 0x22
 8003630:	f040 80ab 	bne.w	800378a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d117      	bne.n	800366e <UART_Receive_IT+0x50>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365c:	b29a      	uxth	r2, r3
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
 800366c:	e026      	b.n	80036bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003674:	2300      	movs	r3, #0
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003680:	d007      	beq.n	8003692 <UART_Receive_IT+0x74>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <UART_Receive_IT+0x82>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e008      	b.n	80036b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4619      	mov	r1, r3
 80036ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d15a      	bne.n	8003786 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0220 	bic.w	r2, r2, #32
 80036de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	2b01      	cmp	r3, #1
 800370e:	d135      	bne.n	800377c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	330c      	adds	r3, #12
 800371c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	613b      	str	r3, [r7, #16]
   return(result);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f023 0310 	bic.w	r3, r3, #16
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	623a      	str	r2, [r7, #32]
 8003738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	69f9      	ldr	r1, [r7, #28]
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	61bb      	str	r3, [r7, #24]
   return(result);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e5      	bne.n	8003716 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b10      	cmp	r3, #16
 8003756:	d10a      	bne.n	800376e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff fdf9 	bl	800336c <HAL_UARTEx_RxEventCallback>
 800377a:	e002      	b.n	8003782 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fde1 	bl	8003344 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e002      	b.n	800378c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e000      	b.n	800378c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800378a:	2302      	movs	r3, #2
  }
}
 800378c:	4618      	mov	r0, r3
 800378e:	3730      	adds	r7, #48	; 0x30
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b0c0      	sub	sp, #256	; 0x100
 800379a:	af00      	add	r7, sp, #0
 800379c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b0:	68d9      	ldr	r1, [r3, #12]
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	ea40 0301 	orr.w	r3, r0, r1
 80037bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037ec:	f021 010c 	bic.w	r1, r1, #12
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037fa:	430b      	orrs	r3, r1
 80037fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	6999      	ldr	r1, [r3, #24]
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	ea40 0301 	orr.w	r3, r0, r1
 800381a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b8f      	ldr	r3, [pc, #572]	; (8003a60 <UART_SetConfig+0x2cc>)
 8003824:	429a      	cmp	r2, r3
 8003826:	d005      	beq.n	8003834 <UART_SetConfig+0xa0>
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b8d      	ldr	r3, [pc, #564]	; (8003a64 <UART_SetConfig+0x2d0>)
 8003830:	429a      	cmp	r2, r3
 8003832:	d104      	bne.n	800383e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003834:	f7ff f9fa 	bl	8002c2c <HAL_RCC_GetPCLK2Freq>
 8003838:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800383c:	e003      	b.n	8003846 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383e:	f7ff f9e1 	bl	8002c04 <HAL_RCC_GetPCLK1Freq>
 8003842:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003850:	f040 810c 	bne.w	8003a6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800385e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003862:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003866:	4622      	mov	r2, r4
 8003868:	462b      	mov	r3, r5
 800386a:	1891      	adds	r1, r2, r2
 800386c:	65b9      	str	r1, [r7, #88]	; 0x58
 800386e:	415b      	adcs	r3, r3
 8003870:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003872:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003876:	4621      	mov	r1, r4
 8003878:	eb12 0801 	adds.w	r8, r2, r1
 800387c:	4629      	mov	r1, r5
 800387e:	eb43 0901 	adc.w	r9, r3, r1
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003896:	4690      	mov	r8, r2
 8003898:	4699      	mov	r9, r3
 800389a:	4623      	mov	r3, r4
 800389c:	eb18 0303 	adds.w	r3, r8, r3
 80038a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038a4:	462b      	mov	r3, r5
 80038a6:	eb49 0303 	adc.w	r3, r9, r3
 80038aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038c2:	460b      	mov	r3, r1
 80038c4:	18db      	adds	r3, r3, r3
 80038c6:	653b      	str	r3, [r7, #80]	; 0x50
 80038c8:	4613      	mov	r3, r2
 80038ca:	eb42 0303 	adc.w	r3, r2, r3
 80038ce:	657b      	str	r3, [r7, #84]	; 0x54
 80038d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038d8:	f7fc fcda 	bl	8000290 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <UART_SetConfig+0x2d4>)
 80038e2:	fba3 2302 	umull	r2, r3, r3, r2
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	011c      	lsls	r4, r3, #4
 80038ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038fc:	4642      	mov	r2, r8
 80038fe:	464b      	mov	r3, r9
 8003900:	1891      	adds	r1, r2, r2
 8003902:	64b9      	str	r1, [r7, #72]	; 0x48
 8003904:	415b      	adcs	r3, r3
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003908:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800390c:	4641      	mov	r1, r8
 800390e:	eb12 0a01 	adds.w	sl, r2, r1
 8003912:	4649      	mov	r1, r9
 8003914:	eb43 0b01 	adc.w	fp, r3, r1
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003924:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800392c:	4692      	mov	sl, r2
 800392e:	469b      	mov	fp, r3
 8003930:	4643      	mov	r3, r8
 8003932:	eb1a 0303 	adds.w	r3, sl, r3
 8003936:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800393a:	464b      	mov	r3, r9
 800393c:	eb4b 0303 	adc.w	r3, fp, r3
 8003940:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003950:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003954:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003958:	460b      	mov	r3, r1
 800395a:	18db      	adds	r3, r3, r3
 800395c:	643b      	str	r3, [r7, #64]	; 0x40
 800395e:	4613      	mov	r3, r2
 8003960:	eb42 0303 	adc.w	r3, r2, r3
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
 8003966:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800396a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800396e:	f7fc fc8f 	bl	8000290 <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4611      	mov	r1, r2
 8003978:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <UART_SetConfig+0x2d4>)
 800397a:	fba3 2301 	umull	r2, r3, r3, r1
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2264      	movs	r2, #100	; 0x64
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	1acb      	subs	r3, r1, r3
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800398e:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <UART_SetConfig+0x2d4>)
 8003990:	fba3 2302 	umull	r2, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800399c:	441c      	add	r4, r3
 800399e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	1891      	adds	r1, r2, r2
 80039b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80039b8:	415b      	adcs	r3, r3
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039c0:	4641      	mov	r1, r8
 80039c2:	1851      	adds	r1, r2, r1
 80039c4:	6339      	str	r1, [r7, #48]	; 0x30
 80039c6:	4649      	mov	r1, r9
 80039c8:	414b      	adcs	r3, r1
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039d8:	4659      	mov	r1, fp
 80039da:	00cb      	lsls	r3, r1, #3
 80039dc:	4651      	mov	r1, sl
 80039de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e2:	4651      	mov	r1, sl
 80039e4:	00ca      	lsls	r2, r1, #3
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	4642      	mov	r2, r8
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039f4:	464b      	mov	r3, r9
 80039f6:	460a      	mov	r2, r1
 80039f8:	eb42 0303 	adc.w	r3, r2, r3
 80039fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a14:	460b      	mov	r3, r1
 8003a16:	18db      	adds	r3, r3, r3
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	eb42 0303 	adc.w	r3, r2, r3
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a2a:	f7fc fc31 	bl	8000290 <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <UART_SetConfig+0x2d4>)
 8003a34:	fba3 1302 	umull	r1, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2164      	movs	r1, #100	; 0x64
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	3332      	adds	r3, #50	; 0x32
 8003a46:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <UART_SetConfig+0x2d4>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 0207 	and.w	r2, r3, #7
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4422      	add	r2, r4
 8003a5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a5c:	e106      	b.n	8003c6c <UART_SetConfig+0x4d8>
 8003a5e:	bf00      	nop
 8003a60:	40011000 	.word	0x40011000
 8003a64:	40011400 	.word	0x40011400
 8003a68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a7e:	4642      	mov	r2, r8
 8003a80:	464b      	mov	r3, r9
 8003a82:	1891      	adds	r1, r2, r2
 8003a84:	6239      	str	r1, [r7, #32]
 8003a86:	415b      	adcs	r3, r3
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a8e:	4641      	mov	r1, r8
 8003a90:	1854      	adds	r4, r2, r1
 8003a92:	4649      	mov	r1, r9
 8003a94:	eb43 0501 	adc.w	r5, r3, r1
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	00eb      	lsls	r3, r5, #3
 8003aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa6:	00e2      	lsls	r2, r4, #3
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	461d      	mov	r5, r3
 8003aac:	4643      	mov	r3, r8
 8003aae:	18e3      	adds	r3, r4, r3
 8003ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	eb45 0303 	adc.w	r3, r5, r3
 8003aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003aca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ada:	4629      	mov	r1, r5
 8003adc:	008b      	lsls	r3, r1, #2
 8003ade:	4621      	mov	r1, r4
 8003ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	008a      	lsls	r2, r1, #2
 8003ae8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003aec:	f7fc fbd0 	bl	8000290 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4b60      	ldr	r3, [pc, #384]	; (8003c78 <UART_SetConfig+0x4e4>)
 8003af6:	fba3 2302 	umull	r2, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	011c      	lsls	r4, r3, #4
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	61b9      	str	r1, [r7, #24]
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b20:	4641      	mov	r1, r8
 8003b22:	1851      	adds	r1, r2, r1
 8003b24:	6139      	str	r1, [r7, #16]
 8003b26:	4649      	mov	r1, r9
 8003b28:	414b      	adcs	r3, r1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b38:	4659      	mov	r1, fp
 8003b3a:	00cb      	lsls	r3, r1, #3
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b42:	4651      	mov	r1, sl
 8003b44:	00ca      	lsls	r2, r1, #3
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b54:	464b      	mov	r3, r9
 8003b56:	460a      	mov	r2, r1
 8003b58:	eb42 0303 	adc.w	r3, r2, r3
 8003b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b78:	4649      	mov	r1, r9
 8003b7a:	008b      	lsls	r3, r1, #2
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b82:	4641      	mov	r1, r8
 8003b84:	008a      	lsls	r2, r1, #2
 8003b86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b8a:	f7fc fb81 	bl	8000290 <__aeabi_uldivmod>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	4b38      	ldr	r3, [pc, #224]	; (8003c78 <UART_SetConfig+0x4e4>)
 8003b96:	fba3 2301 	umull	r2, r3, r3, r1
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2264      	movs	r2, #100	; 0x64
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	1acb      	subs	r3, r1, r3
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	3332      	adds	r3, #50	; 0x32
 8003ba8:	4a33      	ldr	r2, [pc, #204]	; (8003c78 <UART_SetConfig+0x4e4>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb4:	441c      	add	r4, r3
 8003bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bba:	2200      	movs	r2, #0
 8003bbc:	673b      	str	r3, [r7, #112]	; 0x70
 8003bbe:	677a      	str	r2, [r7, #116]	; 0x74
 8003bc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	1851      	adds	r1, r2, r1
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	4649      	mov	r1, r9
 8003bdc:	414b      	adcs	r3, r1
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bec:	4659      	mov	r1, fp
 8003bee:	00cb      	lsls	r3, r1, #3
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	00ca      	lsls	r2, r1, #3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4642      	mov	r2, r8
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c06:	464b      	mov	r3, r9
 8003c08:	460a      	mov	r2, r1
 8003c0a:	eb42 0303 	adc.w	r3, r2, r3
 8003c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	663b      	str	r3, [r7, #96]	; 0x60
 8003c1a:	667a      	str	r2, [r7, #100]	; 0x64
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c28:	4649      	mov	r1, r9
 8003c2a:	008b      	lsls	r3, r1, #2
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c32:	4641      	mov	r1, r8
 8003c34:	008a      	lsls	r2, r1, #2
 8003c36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c3a:	f7fc fb29 	bl	8000290 <__aeabi_uldivmod>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <UART_SetConfig+0x4e4>)
 8003c44:	fba3 1302 	umull	r1, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2164      	movs	r1, #100	; 0x64
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	3332      	adds	r3, #50	; 0x32
 8003c56:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <UART_SetConfig+0x4e4>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4422      	add	r2, r4
 8003c6a:	609a      	str	r2, [r3, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c72:	46bd      	mov	sp, r7
 8003c74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c78:	51eb851f 	.word	0x51eb851f

08003c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	f107 001c 	add.w	r0, r7, #28
 8003c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d122      	bne.n	8003cda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 faa2 	bl	8004218 <USB_CoreReset>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	73fb      	strb	r3, [r7, #15]
 8003cd8:	e01a      	b.n	8003d10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa96 	bl	8004218 <USB_CoreReset>
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
 8003d02:	e005      	b.n	8003d10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d10b      	bne.n	8003d2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f043 0206 	orr.w	r2, r3, #6
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f043 0220 	orr.w	r2, r3, #32
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d3a:	b004      	add	sp, #16
 8003d3c:	4770      	bx	lr

08003d3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0201 	bic.w	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d115      	bne.n	8003dae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d8e:	2001      	movs	r0, #1
 8003d90:	f7fd fadc 	bl	800134c <HAL_Delay>
      ms++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa2e 	bl	80041fc <USB_GetMode>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d01e      	beq.n	8003de4 <USB_SetCurrentMode+0x84>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b31      	cmp	r3, #49	; 0x31
 8003daa:	d9f0      	bls.n	8003d8e <USB_SetCurrentMode+0x2e>
 8003dac:	e01a      	b.n	8003de4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d115      	bne.n	8003de0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f7fd fac3 	bl	800134c <HAL_Delay>
      ms++;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fa15 	bl	80041fc <USB_GetMode>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <USB_SetCurrentMode+0x84>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b31      	cmp	r3, #49	; 0x31
 8003ddc:	d9f0      	bls.n	8003dc0 <USB_SetCurrentMode+0x60>
 8003dde:	e001      	b.n	8003de4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e005      	b.n	8003df0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b32      	cmp	r3, #50	; 0x32
 8003de8:	d101      	bne.n	8003dee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df8:	b084      	sub	sp, #16
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b086      	sub	sp, #24
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	e009      	b.n	8003e2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	3340      	adds	r3, #64	; 0x40
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	2200      	movs	r2, #0
 8003e24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b0e      	cmp	r3, #14
 8003e30:	d9f2      	bls.n	8003e18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11c      	bne.n	8003e72 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e46:	f043 0302 	orr.w	r3, r3, #2
 8003e4a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e70:	e00b      	b.n	8003e8a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e90:	461a      	mov	r2, r3
 8003e92:	2300      	movs	r3, #0
 8003e94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	680b      	ldr	r3, [r1, #0]
 8003ea8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d10c      	bne.n	8003eca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f965 	bl	8004188 <USB_SetDevSpeed>
 8003ebe:	e008      	b.n	8003ed2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f960 	bl	8004188 <USB_SetDevSpeed>
 8003ec8:	e003      	b.n	8003ed2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eca:	2103      	movs	r1, #3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f95b 	bl	8004188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ed2:	2110      	movs	r1, #16
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f8f3 	bl	80040c0 <USB_FlushTxFifo>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f91f 	bl	8004128 <USB_FlushRxFifo>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efa:	461a      	mov	r2, r3
 8003efc:	2300      	movs	r3, #0
 8003efe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	461a      	mov	r2, r3
 8003f08:	2300      	movs	r3, #0
 8003f0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	461a      	mov	r2, r3
 8003f14:	2300      	movs	r3, #0
 8003f16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	e043      	b.n	8003fa6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f34:	d118      	bne.n	8003f68 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	e013      	b.n	8003f7a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e008      	b.n	8003f7a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f74:	461a      	mov	r2, r3
 8003f76:	2300      	movs	r3, #0
 8003f78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f86:	461a      	mov	r2, r3
 8003f88:	2300      	movs	r3, #0
 8003f8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d3b7      	bcc.n	8003f1e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	e043      	b.n	800403c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fca:	d118      	bne.n	8003ffe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e013      	b.n	8004010 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e008      	b.n	8004010 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	461a      	mov	r2, r3
 800400c:	2300      	movs	r3, #0
 800400e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	461a      	mov	r2, r3
 800401e:	2300      	movs	r3, #0
 8004020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402e:	461a      	mov	r2, r3
 8004030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004034:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3301      	adds	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	429a      	cmp	r2, r3
 8004042:	d3b7      	bcc.n	8003fb4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004056:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f043 0210 	orr.w	r2, r3, #16
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <USB_DevInit+0x2c4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f043 0208 	orr.w	r2, r3, #8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040a4:	f043 0304 	orr.w	r3, r3, #4
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040b8:	b004      	add	sp, #16
 80040ba:	4770      	bx	lr
 80040bc:	803c3800 	.word	0x803c3800

080040c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3301      	adds	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4a13      	ldr	r2, [pc, #76]	; (8004124 <USB_FlushTxFifo+0x64>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e01b      	b.n	8004118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	daf2      	bge.n	80040ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	019b      	lsls	r3, r3, #6
 80040f0:	f043 0220 	orr.w	r2, r3, #32
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3301      	adds	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4a08      	ldr	r2, [pc, #32]	; (8004124 <USB_FlushTxFifo+0x64>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e006      	b.n	8004118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b20      	cmp	r3, #32
 8004114:	d0f0      	beq.n	80040f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	00030d40 	.word	0x00030d40

08004128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3301      	adds	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a11      	ldr	r2, [pc, #68]	; (8004184 <USB_FlushRxFifo+0x5c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e018      	b.n	8004178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	daf2      	bge.n	8004134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2210      	movs	r2, #16
 8004156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4a08      	ldr	r2, [pc, #32]	; (8004184 <USB_FlushRxFifo+0x5c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e006      	b.n	8004178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b10      	cmp	r3, #16
 8004174:	d0f0      	beq.n	8004158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	00030d40 	.word	0x00030d40

08004188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041d4:	f023 0303 	bic.w	r3, r3, #3
 80041d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0301 	and.w	r3, r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a13      	ldr	r2, [pc, #76]	; (800427c <USB_CoreReset+0x64>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e01b      	b.n	800426e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	daf2      	bge.n	8004224 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3301      	adds	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a09      	ldr	r2, [pc, #36]	; (800427c <USB_CoreReset+0x64>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e006      	b.n	800426e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d0f0      	beq.n	800424e <USB_CoreReset+0x36>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	00030d40 	.word	0x00030d40

08004280 <std>:
 8004280:	2300      	movs	r3, #0
 8004282:	b510      	push	{r4, lr}
 8004284:	4604      	mov	r4, r0
 8004286:	e9c0 3300 	strd	r3, r3, [r0]
 800428a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800428e:	6083      	str	r3, [r0, #8]
 8004290:	8181      	strh	r1, [r0, #12]
 8004292:	6643      	str	r3, [r0, #100]	; 0x64
 8004294:	81c2      	strh	r2, [r0, #14]
 8004296:	6183      	str	r3, [r0, #24]
 8004298:	4619      	mov	r1, r3
 800429a:	2208      	movs	r2, #8
 800429c:	305c      	adds	r0, #92	; 0x5c
 800429e:	f000 f906 	bl	80044ae <memset>
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <std+0x58>)
 80042a4:	6263      	str	r3, [r4, #36]	; 0x24
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <std+0x5c>)
 80042a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <std+0x60>)
 80042ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <std+0x64>)
 80042b0:	6323      	str	r3, [r4, #48]	; 0x30
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <std+0x68>)
 80042b4:	6224      	str	r4, [r4, #32]
 80042b6:	429c      	cmp	r4, r3
 80042b8:	d006      	beq.n	80042c8 <std+0x48>
 80042ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80042be:	4294      	cmp	r4, r2
 80042c0:	d002      	beq.n	80042c8 <std+0x48>
 80042c2:	33d0      	adds	r3, #208	; 0xd0
 80042c4:	429c      	cmp	r4, r3
 80042c6:	d105      	bne.n	80042d4 <std+0x54>
 80042c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d0:	f000 b966 	b.w	80045a0 <__retarget_lock_init_recursive>
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	bf00      	nop
 80042d8:	08004429 	.word	0x08004429
 80042dc:	0800444b 	.word	0x0800444b
 80042e0:	08004483 	.word	0x08004483
 80042e4:	080044a7 	.word	0x080044a7
 80042e8:	20000820 	.word	0x20000820

080042ec <stdio_exit_handler>:
 80042ec:	4a02      	ldr	r2, [pc, #8]	; (80042f8 <stdio_exit_handler+0xc>)
 80042ee:	4903      	ldr	r1, [pc, #12]	; (80042fc <stdio_exit_handler+0x10>)
 80042f0:	4803      	ldr	r0, [pc, #12]	; (8004300 <stdio_exit_handler+0x14>)
 80042f2:	f000 b869 	b.w	80043c8 <_fwalk_sglue>
 80042f6:	bf00      	nop
 80042f8:	2000000c 	.word	0x2000000c
 80042fc:	08004e4d 	.word	0x08004e4d
 8004300:	20000018 	.word	0x20000018

08004304 <cleanup_stdio>:
 8004304:	6841      	ldr	r1, [r0, #4]
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <cleanup_stdio+0x34>)
 8004308:	4299      	cmp	r1, r3
 800430a:	b510      	push	{r4, lr}
 800430c:	4604      	mov	r4, r0
 800430e:	d001      	beq.n	8004314 <cleanup_stdio+0x10>
 8004310:	f000 fd9c 	bl	8004e4c <_fflush_r>
 8004314:	68a1      	ldr	r1, [r4, #8]
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <cleanup_stdio+0x38>)
 8004318:	4299      	cmp	r1, r3
 800431a:	d002      	beq.n	8004322 <cleanup_stdio+0x1e>
 800431c:	4620      	mov	r0, r4
 800431e:	f000 fd95 	bl	8004e4c <_fflush_r>
 8004322:	68e1      	ldr	r1, [r4, #12]
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <cleanup_stdio+0x3c>)
 8004326:	4299      	cmp	r1, r3
 8004328:	d004      	beq.n	8004334 <cleanup_stdio+0x30>
 800432a:	4620      	mov	r0, r4
 800432c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004330:	f000 bd8c 	b.w	8004e4c <_fflush_r>
 8004334:	bd10      	pop	{r4, pc}
 8004336:	bf00      	nop
 8004338:	20000820 	.word	0x20000820
 800433c:	20000888 	.word	0x20000888
 8004340:	200008f0 	.word	0x200008f0

08004344 <global_stdio_init.part.0>:
 8004344:	b510      	push	{r4, lr}
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <global_stdio_init.part.0+0x30>)
 8004348:	4c0b      	ldr	r4, [pc, #44]	; (8004378 <global_stdio_init.part.0+0x34>)
 800434a:	4a0c      	ldr	r2, [pc, #48]	; (800437c <global_stdio_init.part.0+0x38>)
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	4620      	mov	r0, r4
 8004350:	2200      	movs	r2, #0
 8004352:	2104      	movs	r1, #4
 8004354:	f7ff ff94 	bl	8004280 <std>
 8004358:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800435c:	2201      	movs	r2, #1
 800435e:	2109      	movs	r1, #9
 8004360:	f7ff ff8e 	bl	8004280 <std>
 8004364:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004368:	2202      	movs	r2, #2
 800436a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436e:	2112      	movs	r1, #18
 8004370:	f7ff bf86 	b.w	8004280 <std>
 8004374:	20000958 	.word	0x20000958
 8004378:	20000820 	.word	0x20000820
 800437c:	080042ed 	.word	0x080042ed

08004380 <__sfp_lock_acquire>:
 8004380:	4801      	ldr	r0, [pc, #4]	; (8004388 <__sfp_lock_acquire+0x8>)
 8004382:	f000 b90e 	b.w	80045a2 <__retarget_lock_acquire_recursive>
 8004386:	bf00      	nop
 8004388:	20000961 	.word	0x20000961

0800438c <__sfp_lock_release>:
 800438c:	4801      	ldr	r0, [pc, #4]	; (8004394 <__sfp_lock_release+0x8>)
 800438e:	f000 b909 	b.w	80045a4 <__retarget_lock_release_recursive>
 8004392:	bf00      	nop
 8004394:	20000961 	.word	0x20000961

08004398 <__sinit>:
 8004398:	b510      	push	{r4, lr}
 800439a:	4604      	mov	r4, r0
 800439c:	f7ff fff0 	bl	8004380 <__sfp_lock_acquire>
 80043a0:	6a23      	ldr	r3, [r4, #32]
 80043a2:	b11b      	cbz	r3, 80043ac <__sinit+0x14>
 80043a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a8:	f7ff bff0 	b.w	800438c <__sfp_lock_release>
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <__sinit+0x28>)
 80043ae:	6223      	str	r3, [r4, #32]
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <__sinit+0x2c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f5      	bne.n	80043a4 <__sinit+0xc>
 80043b8:	f7ff ffc4 	bl	8004344 <global_stdio_init.part.0>
 80043bc:	e7f2      	b.n	80043a4 <__sinit+0xc>
 80043be:	bf00      	nop
 80043c0:	08004305 	.word	0x08004305
 80043c4:	20000958 	.word	0x20000958

080043c8 <_fwalk_sglue>:
 80043c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043cc:	4607      	mov	r7, r0
 80043ce:	4688      	mov	r8, r1
 80043d0:	4614      	mov	r4, r2
 80043d2:	2600      	movs	r6, #0
 80043d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043d8:	f1b9 0901 	subs.w	r9, r9, #1
 80043dc:	d505      	bpl.n	80043ea <_fwalk_sglue+0x22>
 80043de:	6824      	ldr	r4, [r4, #0]
 80043e0:	2c00      	cmp	r4, #0
 80043e2:	d1f7      	bne.n	80043d4 <_fwalk_sglue+0xc>
 80043e4:	4630      	mov	r0, r6
 80043e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ea:	89ab      	ldrh	r3, [r5, #12]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d907      	bls.n	8004400 <_fwalk_sglue+0x38>
 80043f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043f4:	3301      	adds	r3, #1
 80043f6:	d003      	beq.n	8004400 <_fwalk_sglue+0x38>
 80043f8:	4629      	mov	r1, r5
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c0      	blx	r8
 80043fe:	4306      	orrs	r6, r0
 8004400:	3568      	adds	r5, #104	; 0x68
 8004402:	e7e9      	b.n	80043d8 <_fwalk_sglue+0x10>

08004404 <iprintf>:
 8004404:	b40f      	push	{r0, r1, r2, r3}
 8004406:	b507      	push	{r0, r1, r2, lr}
 8004408:	4906      	ldr	r1, [pc, #24]	; (8004424 <iprintf+0x20>)
 800440a:	ab04      	add	r3, sp, #16
 800440c:	6808      	ldr	r0, [r1, #0]
 800440e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004412:	6881      	ldr	r1, [r0, #8]
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	f000 f9e9 	bl	80047ec <_vfiprintf_r>
 800441a:	b003      	add	sp, #12
 800441c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004420:	b004      	add	sp, #16
 8004422:	4770      	bx	lr
 8004424:	20000064 	.word	0x20000064

08004428 <__sread>:
 8004428:	b510      	push	{r4, lr}
 800442a:	460c      	mov	r4, r1
 800442c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004430:	f000 f868 	bl	8004504 <_read_r>
 8004434:	2800      	cmp	r0, #0
 8004436:	bfab      	itete	ge
 8004438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800443a:	89a3      	ldrhlt	r3, [r4, #12]
 800443c:	181b      	addge	r3, r3, r0
 800443e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004442:	bfac      	ite	ge
 8004444:	6563      	strge	r3, [r4, #84]	; 0x54
 8004446:	81a3      	strhlt	r3, [r4, #12]
 8004448:	bd10      	pop	{r4, pc}

0800444a <__swrite>:
 800444a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444e:	461f      	mov	r7, r3
 8004450:	898b      	ldrh	r3, [r1, #12]
 8004452:	05db      	lsls	r3, r3, #23
 8004454:	4605      	mov	r5, r0
 8004456:	460c      	mov	r4, r1
 8004458:	4616      	mov	r6, r2
 800445a:	d505      	bpl.n	8004468 <__swrite+0x1e>
 800445c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004460:	2302      	movs	r3, #2
 8004462:	2200      	movs	r2, #0
 8004464:	f000 f83c 	bl	80044e0 <_lseek_r>
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800446e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004472:	81a3      	strh	r3, [r4, #12]
 8004474:	4632      	mov	r2, r6
 8004476:	463b      	mov	r3, r7
 8004478:	4628      	mov	r0, r5
 800447a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800447e:	f000 b853 	b.w	8004528 <_write_r>

08004482 <__sseek>:
 8004482:	b510      	push	{r4, lr}
 8004484:	460c      	mov	r4, r1
 8004486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800448a:	f000 f829 	bl	80044e0 <_lseek_r>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	89a3      	ldrh	r3, [r4, #12]
 8004492:	bf15      	itete	ne
 8004494:	6560      	strne	r0, [r4, #84]	; 0x54
 8004496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800449a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800449e:	81a3      	strheq	r3, [r4, #12]
 80044a0:	bf18      	it	ne
 80044a2:	81a3      	strhne	r3, [r4, #12]
 80044a4:	bd10      	pop	{r4, pc}

080044a6 <__sclose>:
 80044a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044aa:	f000 b809 	b.w	80044c0 <_close_r>

080044ae <memset>:
 80044ae:	4402      	add	r2, r0
 80044b0:	4603      	mov	r3, r0
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d100      	bne.n	80044b8 <memset+0xa>
 80044b6:	4770      	bx	lr
 80044b8:	f803 1b01 	strb.w	r1, [r3], #1
 80044bc:	e7f9      	b.n	80044b2 <memset+0x4>
	...

080044c0 <_close_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d06      	ldr	r5, [pc, #24]	; (80044dc <_close_r+0x1c>)
 80044c4:	2300      	movs	r3, #0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	f7fc fe25 	bl	800111a <_close>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_close_r+0x1a>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_close_r+0x1a>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	2000095c 	.word	0x2000095c

080044e0 <_lseek_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4d07      	ldr	r5, [pc, #28]	; (8004500 <_lseek_r+0x20>)
 80044e4:	4604      	mov	r4, r0
 80044e6:	4608      	mov	r0, r1
 80044e8:	4611      	mov	r1, r2
 80044ea:	2200      	movs	r2, #0
 80044ec:	602a      	str	r2, [r5, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7fc fe3a 	bl	8001168 <_lseek>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d102      	bne.n	80044fe <_lseek_r+0x1e>
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	b103      	cbz	r3, 80044fe <_lseek_r+0x1e>
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	2000095c 	.word	0x2000095c

08004504 <_read_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4d07      	ldr	r5, [pc, #28]	; (8004524 <_read_r+0x20>)
 8004508:	4604      	mov	r4, r0
 800450a:	4608      	mov	r0, r1
 800450c:	4611      	mov	r1, r2
 800450e:	2200      	movs	r2, #0
 8004510:	602a      	str	r2, [r5, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	f7fc fde4 	bl	80010e0 <_read>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_read_r+0x1e>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_read_r+0x1e>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	2000095c 	.word	0x2000095c

08004528 <_write_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4d07      	ldr	r5, [pc, #28]	; (8004548 <_write_r+0x20>)
 800452c:	4604      	mov	r4, r0
 800452e:	4608      	mov	r0, r1
 8004530:	4611      	mov	r1, r2
 8004532:	2200      	movs	r2, #0
 8004534:	602a      	str	r2, [r5, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	f7fc f828 	bl	800058c <_write>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_write_r+0x1e>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_write_r+0x1e>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	2000095c 	.word	0x2000095c

0800454c <__errno>:
 800454c:	4b01      	ldr	r3, [pc, #4]	; (8004554 <__errno+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000064 	.word	0x20000064

08004558 <__libc_init_array>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4d0d      	ldr	r5, [pc, #52]	; (8004590 <__libc_init_array+0x38>)
 800455c:	4c0d      	ldr	r4, [pc, #52]	; (8004594 <__libc_init_array+0x3c>)
 800455e:	1b64      	subs	r4, r4, r5
 8004560:	10a4      	asrs	r4, r4, #2
 8004562:	2600      	movs	r6, #0
 8004564:	42a6      	cmp	r6, r4
 8004566:	d109      	bne.n	800457c <__libc_init_array+0x24>
 8004568:	4d0b      	ldr	r5, [pc, #44]	; (8004598 <__libc_init_array+0x40>)
 800456a:	4c0c      	ldr	r4, [pc, #48]	; (800459c <__libc_init_array+0x44>)
 800456c:	f000 fdc0 	bl	80050f0 <_init>
 8004570:	1b64      	subs	r4, r4, r5
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	2600      	movs	r6, #0
 8004576:	42a6      	cmp	r6, r4
 8004578:	d105      	bne.n	8004586 <__libc_init_array+0x2e>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004580:	4798      	blx	r3
 8004582:	3601      	adds	r6, #1
 8004584:	e7ee      	b.n	8004564 <__libc_init_array+0xc>
 8004586:	f855 3b04 	ldr.w	r3, [r5], #4
 800458a:	4798      	blx	r3
 800458c:	3601      	adds	r6, #1
 800458e:	e7f2      	b.n	8004576 <__libc_init_array+0x1e>
 8004590:	08005178 	.word	0x08005178
 8004594:	08005178 	.word	0x08005178
 8004598:	08005178 	.word	0x08005178
 800459c:	0800517c 	.word	0x0800517c

080045a0 <__retarget_lock_init_recursive>:
 80045a0:	4770      	bx	lr

080045a2 <__retarget_lock_acquire_recursive>:
 80045a2:	4770      	bx	lr

080045a4 <__retarget_lock_release_recursive>:
 80045a4:	4770      	bx	lr
	...

080045a8 <_free_r>:
 80045a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045aa:	2900      	cmp	r1, #0
 80045ac:	d044      	beq.n	8004638 <_free_r+0x90>
 80045ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b2:	9001      	str	r0, [sp, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f1a1 0404 	sub.w	r4, r1, #4
 80045ba:	bfb8      	it	lt
 80045bc:	18e4      	addlt	r4, r4, r3
 80045be:	f000 f8df 	bl	8004780 <__malloc_lock>
 80045c2:	4a1e      	ldr	r2, [pc, #120]	; (800463c <_free_r+0x94>)
 80045c4:	9801      	ldr	r0, [sp, #4]
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	b933      	cbnz	r3, 80045d8 <_free_r+0x30>
 80045ca:	6063      	str	r3, [r4, #4]
 80045cc:	6014      	str	r4, [r2, #0]
 80045ce:	b003      	add	sp, #12
 80045d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045d4:	f000 b8da 	b.w	800478c <__malloc_unlock>
 80045d8:	42a3      	cmp	r3, r4
 80045da:	d908      	bls.n	80045ee <_free_r+0x46>
 80045dc:	6825      	ldr	r5, [r4, #0]
 80045de:	1961      	adds	r1, r4, r5
 80045e0:	428b      	cmp	r3, r1
 80045e2:	bf01      	itttt	eq
 80045e4:	6819      	ldreq	r1, [r3, #0]
 80045e6:	685b      	ldreq	r3, [r3, #4]
 80045e8:	1949      	addeq	r1, r1, r5
 80045ea:	6021      	streq	r1, [r4, #0]
 80045ec:	e7ed      	b.n	80045ca <_free_r+0x22>
 80045ee:	461a      	mov	r2, r3
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	b10b      	cbz	r3, 80045f8 <_free_r+0x50>
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d9fa      	bls.n	80045ee <_free_r+0x46>
 80045f8:	6811      	ldr	r1, [r2, #0]
 80045fa:	1855      	adds	r5, r2, r1
 80045fc:	42a5      	cmp	r5, r4
 80045fe:	d10b      	bne.n	8004618 <_free_r+0x70>
 8004600:	6824      	ldr	r4, [r4, #0]
 8004602:	4421      	add	r1, r4
 8004604:	1854      	adds	r4, r2, r1
 8004606:	42a3      	cmp	r3, r4
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	d1e0      	bne.n	80045ce <_free_r+0x26>
 800460c:	681c      	ldr	r4, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	6053      	str	r3, [r2, #4]
 8004612:	440c      	add	r4, r1
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	e7da      	b.n	80045ce <_free_r+0x26>
 8004618:	d902      	bls.n	8004620 <_free_r+0x78>
 800461a:	230c      	movs	r3, #12
 800461c:	6003      	str	r3, [r0, #0]
 800461e:	e7d6      	b.n	80045ce <_free_r+0x26>
 8004620:	6825      	ldr	r5, [r4, #0]
 8004622:	1961      	adds	r1, r4, r5
 8004624:	428b      	cmp	r3, r1
 8004626:	bf04      	itt	eq
 8004628:	6819      	ldreq	r1, [r3, #0]
 800462a:	685b      	ldreq	r3, [r3, #4]
 800462c:	6063      	str	r3, [r4, #4]
 800462e:	bf04      	itt	eq
 8004630:	1949      	addeq	r1, r1, r5
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	6054      	str	r4, [r2, #4]
 8004636:	e7ca      	b.n	80045ce <_free_r+0x26>
 8004638:	b003      	add	sp, #12
 800463a:	bd30      	pop	{r4, r5, pc}
 800463c:	20000964 	.word	0x20000964

08004640 <sbrk_aligned>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4e0e      	ldr	r6, [pc, #56]	; (800467c <sbrk_aligned+0x3c>)
 8004644:	460c      	mov	r4, r1
 8004646:	6831      	ldr	r1, [r6, #0]
 8004648:	4605      	mov	r5, r0
 800464a:	b911      	cbnz	r1, 8004652 <sbrk_aligned+0x12>
 800464c:	f000 fcbc 	bl	8004fc8 <_sbrk_r>
 8004650:	6030      	str	r0, [r6, #0]
 8004652:	4621      	mov	r1, r4
 8004654:	4628      	mov	r0, r5
 8004656:	f000 fcb7 	bl	8004fc8 <_sbrk_r>
 800465a:	1c43      	adds	r3, r0, #1
 800465c:	d00a      	beq.n	8004674 <sbrk_aligned+0x34>
 800465e:	1cc4      	adds	r4, r0, #3
 8004660:	f024 0403 	bic.w	r4, r4, #3
 8004664:	42a0      	cmp	r0, r4
 8004666:	d007      	beq.n	8004678 <sbrk_aligned+0x38>
 8004668:	1a21      	subs	r1, r4, r0
 800466a:	4628      	mov	r0, r5
 800466c:	f000 fcac 	bl	8004fc8 <_sbrk_r>
 8004670:	3001      	adds	r0, #1
 8004672:	d101      	bne.n	8004678 <sbrk_aligned+0x38>
 8004674:	f04f 34ff 	mov.w	r4, #4294967295
 8004678:	4620      	mov	r0, r4
 800467a:	bd70      	pop	{r4, r5, r6, pc}
 800467c:	20000968 	.word	0x20000968

08004680 <_malloc_r>:
 8004680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004684:	1ccd      	adds	r5, r1, #3
 8004686:	f025 0503 	bic.w	r5, r5, #3
 800468a:	3508      	adds	r5, #8
 800468c:	2d0c      	cmp	r5, #12
 800468e:	bf38      	it	cc
 8004690:	250c      	movcc	r5, #12
 8004692:	2d00      	cmp	r5, #0
 8004694:	4607      	mov	r7, r0
 8004696:	db01      	blt.n	800469c <_malloc_r+0x1c>
 8004698:	42a9      	cmp	r1, r5
 800469a:	d905      	bls.n	80046a8 <_malloc_r+0x28>
 800469c:	230c      	movs	r3, #12
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	2600      	movs	r6, #0
 80046a2:	4630      	mov	r0, r6
 80046a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800477c <_malloc_r+0xfc>
 80046ac:	f000 f868 	bl	8004780 <__malloc_lock>
 80046b0:	f8d8 3000 	ldr.w	r3, [r8]
 80046b4:	461c      	mov	r4, r3
 80046b6:	bb5c      	cbnz	r4, 8004710 <_malloc_r+0x90>
 80046b8:	4629      	mov	r1, r5
 80046ba:	4638      	mov	r0, r7
 80046bc:	f7ff ffc0 	bl	8004640 <sbrk_aligned>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	4604      	mov	r4, r0
 80046c4:	d155      	bne.n	8004772 <_malloc_r+0xf2>
 80046c6:	f8d8 4000 	ldr.w	r4, [r8]
 80046ca:	4626      	mov	r6, r4
 80046cc:	2e00      	cmp	r6, #0
 80046ce:	d145      	bne.n	800475c <_malloc_r+0xdc>
 80046d0:	2c00      	cmp	r4, #0
 80046d2:	d048      	beq.n	8004766 <_malloc_r+0xe6>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	4631      	mov	r1, r6
 80046d8:	4638      	mov	r0, r7
 80046da:	eb04 0903 	add.w	r9, r4, r3
 80046de:	f000 fc73 	bl	8004fc8 <_sbrk_r>
 80046e2:	4581      	cmp	r9, r0
 80046e4:	d13f      	bne.n	8004766 <_malloc_r+0xe6>
 80046e6:	6821      	ldr	r1, [r4, #0]
 80046e8:	1a6d      	subs	r5, r5, r1
 80046ea:	4629      	mov	r1, r5
 80046ec:	4638      	mov	r0, r7
 80046ee:	f7ff ffa7 	bl	8004640 <sbrk_aligned>
 80046f2:	3001      	adds	r0, #1
 80046f4:	d037      	beq.n	8004766 <_malloc_r+0xe6>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	442b      	add	r3, r5
 80046fa:	6023      	str	r3, [r4, #0]
 80046fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d038      	beq.n	8004776 <_malloc_r+0xf6>
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	42a2      	cmp	r2, r4
 8004708:	d12b      	bne.n	8004762 <_malloc_r+0xe2>
 800470a:	2200      	movs	r2, #0
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	e00f      	b.n	8004730 <_malloc_r+0xb0>
 8004710:	6822      	ldr	r2, [r4, #0]
 8004712:	1b52      	subs	r2, r2, r5
 8004714:	d41f      	bmi.n	8004756 <_malloc_r+0xd6>
 8004716:	2a0b      	cmp	r2, #11
 8004718:	d917      	bls.n	800474a <_malloc_r+0xca>
 800471a:	1961      	adds	r1, r4, r5
 800471c:	42a3      	cmp	r3, r4
 800471e:	6025      	str	r5, [r4, #0]
 8004720:	bf18      	it	ne
 8004722:	6059      	strne	r1, [r3, #4]
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	bf08      	it	eq
 8004728:	f8c8 1000 	streq.w	r1, [r8]
 800472c:	5162      	str	r2, [r4, r5]
 800472e:	604b      	str	r3, [r1, #4]
 8004730:	4638      	mov	r0, r7
 8004732:	f104 060b 	add.w	r6, r4, #11
 8004736:	f000 f829 	bl	800478c <__malloc_unlock>
 800473a:	f026 0607 	bic.w	r6, r6, #7
 800473e:	1d23      	adds	r3, r4, #4
 8004740:	1af2      	subs	r2, r6, r3
 8004742:	d0ae      	beq.n	80046a2 <_malloc_r+0x22>
 8004744:	1b9b      	subs	r3, r3, r6
 8004746:	50a3      	str	r3, [r4, r2]
 8004748:	e7ab      	b.n	80046a2 <_malloc_r+0x22>
 800474a:	42a3      	cmp	r3, r4
 800474c:	6862      	ldr	r2, [r4, #4]
 800474e:	d1dd      	bne.n	800470c <_malloc_r+0x8c>
 8004750:	f8c8 2000 	str.w	r2, [r8]
 8004754:	e7ec      	b.n	8004730 <_malloc_r+0xb0>
 8004756:	4623      	mov	r3, r4
 8004758:	6864      	ldr	r4, [r4, #4]
 800475a:	e7ac      	b.n	80046b6 <_malloc_r+0x36>
 800475c:	4634      	mov	r4, r6
 800475e:	6876      	ldr	r6, [r6, #4]
 8004760:	e7b4      	b.n	80046cc <_malloc_r+0x4c>
 8004762:	4613      	mov	r3, r2
 8004764:	e7cc      	b.n	8004700 <_malloc_r+0x80>
 8004766:	230c      	movs	r3, #12
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4638      	mov	r0, r7
 800476c:	f000 f80e 	bl	800478c <__malloc_unlock>
 8004770:	e797      	b.n	80046a2 <_malloc_r+0x22>
 8004772:	6025      	str	r5, [r4, #0]
 8004774:	e7dc      	b.n	8004730 <_malloc_r+0xb0>
 8004776:	605b      	str	r3, [r3, #4]
 8004778:	deff      	udf	#255	; 0xff
 800477a:	bf00      	nop
 800477c:	20000964 	.word	0x20000964

08004780 <__malloc_lock>:
 8004780:	4801      	ldr	r0, [pc, #4]	; (8004788 <__malloc_lock+0x8>)
 8004782:	f7ff bf0e 	b.w	80045a2 <__retarget_lock_acquire_recursive>
 8004786:	bf00      	nop
 8004788:	20000960 	.word	0x20000960

0800478c <__malloc_unlock>:
 800478c:	4801      	ldr	r0, [pc, #4]	; (8004794 <__malloc_unlock+0x8>)
 800478e:	f7ff bf09 	b.w	80045a4 <__retarget_lock_release_recursive>
 8004792:	bf00      	nop
 8004794:	20000960 	.word	0x20000960

08004798 <__sfputc_r>:
 8004798:	6893      	ldr	r3, [r2, #8]
 800479a:	3b01      	subs	r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	b410      	push	{r4}
 80047a0:	6093      	str	r3, [r2, #8]
 80047a2:	da08      	bge.n	80047b6 <__sfputc_r+0x1e>
 80047a4:	6994      	ldr	r4, [r2, #24]
 80047a6:	42a3      	cmp	r3, r4
 80047a8:	db01      	blt.n	80047ae <__sfputc_r+0x16>
 80047aa:	290a      	cmp	r1, #10
 80047ac:	d103      	bne.n	80047b6 <__sfputc_r+0x1e>
 80047ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047b2:	f000 bb73 	b.w	8004e9c <__swbuf_r>
 80047b6:	6813      	ldr	r3, [r2, #0]
 80047b8:	1c58      	adds	r0, r3, #1
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	7019      	strb	r1, [r3, #0]
 80047be:	4608      	mov	r0, r1
 80047c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <__sfputs_r>:
 80047c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c8:	4606      	mov	r6, r0
 80047ca:	460f      	mov	r7, r1
 80047cc:	4614      	mov	r4, r2
 80047ce:	18d5      	adds	r5, r2, r3
 80047d0:	42ac      	cmp	r4, r5
 80047d2:	d101      	bne.n	80047d8 <__sfputs_r+0x12>
 80047d4:	2000      	movs	r0, #0
 80047d6:	e007      	b.n	80047e8 <__sfputs_r+0x22>
 80047d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047dc:	463a      	mov	r2, r7
 80047de:	4630      	mov	r0, r6
 80047e0:	f7ff ffda 	bl	8004798 <__sfputc_r>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d1f3      	bne.n	80047d0 <__sfputs_r+0xa>
 80047e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047ec <_vfiprintf_r>:
 80047ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f0:	460d      	mov	r5, r1
 80047f2:	b09d      	sub	sp, #116	; 0x74
 80047f4:	4614      	mov	r4, r2
 80047f6:	4698      	mov	r8, r3
 80047f8:	4606      	mov	r6, r0
 80047fa:	b118      	cbz	r0, 8004804 <_vfiprintf_r+0x18>
 80047fc:	6a03      	ldr	r3, [r0, #32]
 80047fe:	b90b      	cbnz	r3, 8004804 <_vfiprintf_r+0x18>
 8004800:	f7ff fdca 	bl	8004398 <__sinit>
 8004804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004806:	07d9      	lsls	r1, r3, #31
 8004808:	d405      	bmi.n	8004816 <_vfiprintf_r+0x2a>
 800480a:	89ab      	ldrh	r3, [r5, #12]
 800480c:	059a      	lsls	r2, r3, #22
 800480e:	d402      	bmi.n	8004816 <_vfiprintf_r+0x2a>
 8004810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004812:	f7ff fec6 	bl	80045a2 <__retarget_lock_acquire_recursive>
 8004816:	89ab      	ldrh	r3, [r5, #12]
 8004818:	071b      	lsls	r3, r3, #28
 800481a:	d501      	bpl.n	8004820 <_vfiprintf_r+0x34>
 800481c:	692b      	ldr	r3, [r5, #16]
 800481e:	b99b      	cbnz	r3, 8004848 <_vfiprintf_r+0x5c>
 8004820:	4629      	mov	r1, r5
 8004822:	4630      	mov	r0, r6
 8004824:	f000 fb78 	bl	8004f18 <__swsetup_r>
 8004828:	b170      	cbz	r0, 8004848 <_vfiprintf_r+0x5c>
 800482a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800482c:	07dc      	lsls	r4, r3, #31
 800482e:	d504      	bpl.n	800483a <_vfiprintf_r+0x4e>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	b01d      	add	sp, #116	; 0x74
 8004836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483a:	89ab      	ldrh	r3, [r5, #12]
 800483c:	0598      	lsls	r0, r3, #22
 800483e:	d4f7      	bmi.n	8004830 <_vfiprintf_r+0x44>
 8004840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004842:	f7ff feaf 	bl	80045a4 <__retarget_lock_release_recursive>
 8004846:	e7f3      	b.n	8004830 <_vfiprintf_r+0x44>
 8004848:	2300      	movs	r3, #0
 800484a:	9309      	str	r3, [sp, #36]	; 0x24
 800484c:	2320      	movs	r3, #32
 800484e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004852:	f8cd 800c 	str.w	r8, [sp, #12]
 8004856:	2330      	movs	r3, #48	; 0x30
 8004858:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004a0c <_vfiprintf_r+0x220>
 800485c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004860:	f04f 0901 	mov.w	r9, #1
 8004864:	4623      	mov	r3, r4
 8004866:	469a      	mov	sl, r3
 8004868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800486c:	b10a      	cbz	r2, 8004872 <_vfiprintf_r+0x86>
 800486e:	2a25      	cmp	r2, #37	; 0x25
 8004870:	d1f9      	bne.n	8004866 <_vfiprintf_r+0x7a>
 8004872:	ebba 0b04 	subs.w	fp, sl, r4
 8004876:	d00b      	beq.n	8004890 <_vfiprintf_r+0xa4>
 8004878:	465b      	mov	r3, fp
 800487a:	4622      	mov	r2, r4
 800487c:	4629      	mov	r1, r5
 800487e:	4630      	mov	r0, r6
 8004880:	f7ff ffa1 	bl	80047c6 <__sfputs_r>
 8004884:	3001      	adds	r0, #1
 8004886:	f000 80a9 	beq.w	80049dc <_vfiprintf_r+0x1f0>
 800488a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800488c:	445a      	add	r2, fp
 800488e:	9209      	str	r2, [sp, #36]	; 0x24
 8004890:	f89a 3000 	ldrb.w	r3, [sl]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80a1 	beq.w	80049dc <_vfiprintf_r+0x1f0>
 800489a:	2300      	movs	r3, #0
 800489c:	f04f 32ff 	mov.w	r2, #4294967295
 80048a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a4:	f10a 0a01 	add.w	sl, sl, #1
 80048a8:	9304      	str	r3, [sp, #16]
 80048aa:	9307      	str	r3, [sp, #28]
 80048ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048b0:	931a      	str	r3, [sp, #104]	; 0x68
 80048b2:	4654      	mov	r4, sl
 80048b4:	2205      	movs	r2, #5
 80048b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ba:	4854      	ldr	r0, [pc, #336]	; (8004a0c <_vfiprintf_r+0x220>)
 80048bc:	f7fb fc98 	bl	80001f0 <memchr>
 80048c0:	9a04      	ldr	r2, [sp, #16]
 80048c2:	b9d8      	cbnz	r0, 80048fc <_vfiprintf_r+0x110>
 80048c4:	06d1      	lsls	r1, r2, #27
 80048c6:	bf44      	itt	mi
 80048c8:	2320      	movmi	r3, #32
 80048ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ce:	0713      	lsls	r3, r2, #28
 80048d0:	bf44      	itt	mi
 80048d2:	232b      	movmi	r3, #43	; 0x2b
 80048d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048d8:	f89a 3000 	ldrb.w	r3, [sl]
 80048dc:	2b2a      	cmp	r3, #42	; 0x2a
 80048de:	d015      	beq.n	800490c <_vfiprintf_r+0x120>
 80048e0:	9a07      	ldr	r2, [sp, #28]
 80048e2:	4654      	mov	r4, sl
 80048e4:	2000      	movs	r0, #0
 80048e6:	f04f 0c0a 	mov.w	ip, #10
 80048ea:	4621      	mov	r1, r4
 80048ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048f0:	3b30      	subs	r3, #48	; 0x30
 80048f2:	2b09      	cmp	r3, #9
 80048f4:	d94d      	bls.n	8004992 <_vfiprintf_r+0x1a6>
 80048f6:	b1b0      	cbz	r0, 8004926 <_vfiprintf_r+0x13a>
 80048f8:	9207      	str	r2, [sp, #28]
 80048fa:	e014      	b.n	8004926 <_vfiprintf_r+0x13a>
 80048fc:	eba0 0308 	sub.w	r3, r0, r8
 8004900:	fa09 f303 	lsl.w	r3, r9, r3
 8004904:	4313      	orrs	r3, r2
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	46a2      	mov	sl, r4
 800490a:	e7d2      	b.n	80048b2 <_vfiprintf_r+0xc6>
 800490c:	9b03      	ldr	r3, [sp, #12]
 800490e:	1d19      	adds	r1, r3, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	9103      	str	r1, [sp, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	bfbb      	ittet	lt
 8004918:	425b      	neglt	r3, r3
 800491a:	f042 0202 	orrlt.w	r2, r2, #2
 800491e:	9307      	strge	r3, [sp, #28]
 8004920:	9307      	strlt	r3, [sp, #28]
 8004922:	bfb8      	it	lt
 8004924:	9204      	strlt	r2, [sp, #16]
 8004926:	7823      	ldrb	r3, [r4, #0]
 8004928:	2b2e      	cmp	r3, #46	; 0x2e
 800492a:	d10c      	bne.n	8004946 <_vfiprintf_r+0x15a>
 800492c:	7863      	ldrb	r3, [r4, #1]
 800492e:	2b2a      	cmp	r3, #42	; 0x2a
 8004930:	d134      	bne.n	800499c <_vfiprintf_r+0x1b0>
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	1d1a      	adds	r2, r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	9203      	str	r2, [sp, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	bfb8      	it	lt
 800493e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004942:	3402      	adds	r4, #2
 8004944:	9305      	str	r3, [sp, #20]
 8004946:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a1c <_vfiprintf_r+0x230>
 800494a:	7821      	ldrb	r1, [r4, #0]
 800494c:	2203      	movs	r2, #3
 800494e:	4650      	mov	r0, sl
 8004950:	f7fb fc4e 	bl	80001f0 <memchr>
 8004954:	b138      	cbz	r0, 8004966 <_vfiprintf_r+0x17a>
 8004956:	9b04      	ldr	r3, [sp, #16]
 8004958:	eba0 000a 	sub.w	r0, r0, sl
 800495c:	2240      	movs	r2, #64	; 0x40
 800495e:	4082      	lsls	r2, r0
 8004960:	4313      	orrs	r3, r2
 8004962:	3401      	adds	r4, #1
 8004964:	9304      	str	r3, [sp, #16]
 8004966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800496a:	4829      	ldr	r0, [pc, #164]	; (8004a10 <_vfiprintf_r+0x224>)
 800496c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004970:	2206      	movs	r2, #6
 8004972:	f7fb fc3d 	bl	80001f0 <memchr>
 8004976:	2800      	cmp	r0, #0
 8004978:	d03f      	beq.n	80049fa <_vfiprintf_r+0x20e>
 800497a:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <_vfiprintf_r+0x228>)
 800497c:	bb1b      	cbnz	r3, 80049c6 <_vfiprintf_r+0x1da>
 800497e:	9b03      	ldr	r3, [sp, #12]
 8004980:	3307      	adds	r3, #7
 8004982:	f023 0307 	bic.w	r3, r3, #7
 8004986:	3308      	adds	r3, #8
 8004988:	9303      	str	r3, [sp, #12]
 800498a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800498c:	443b      	add	r3, r7
 800498e:	9309      	str	r3, [sp, #36]	; 0x24
 8004990:	e768      	b.n	8004864 <_vfiprintf_r+0x78>
 8004992:	fb0c 3202 	mla	r2, ip, r2, r3
 8004996:	460c      	mov	r4, r1
 8004998:	2001      	movs	r0, #1
 800499a:	e7a6      	b.n	80048ea <_vfiprintf_r+0xfe>
 800499c:	2300      	movs	r3, #0
 800499e:	3401      	adds	r4, #1
 80049a0:	9305      	str	r3, [sp, #20]
 80049a2:	4619      	mov	r1, r3
 80049a4:	f04f 0c0a 	mov.w	ip, #10
 80049a8:	4620      	mov	r0, r4
 80049aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ae:	3a30      	subs	r2, #48	; 0x30
 80049b0:	2a09      	cmp	r2, #9
 80049b2:	d903      	bls.n	80049bc <_vfiprintf_r+0x1d0>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0c6      	beq.n	8004946 <_vfiprintf_r+0x15a>
 80049b8:	9105      	str	r1, [sp, #20]
 80049ba:	e7c4      	b.n	8004946 <_vfiprintf_r+0x15a>
 80049bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80049c0:	4604      	mov	r4, r0
 80049c2:	2301      	movs	r3, #1
 80049c4:	e7f0      	b.n	80049a8 <_vfiprintf_r+0x1bc>
 80049c6:	ab03      	add	r3, sp, #12
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	462a      	mov	r2, r5
 80049cc:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <_vfiprintf_r+0x22c>)
 80049ce:	a904      	add	r1, sp, #16
 80049d0:	4630      	mov	r0, r6
 80049d2:	f3af 8000 	nop.w
 80049d6:	4607      	mov	r7, r0
 80049d8:	1c78      	adds	r0, r7, #1
 80049da:	d1d6      	bne.n	800498a <_vfiprintf_r+0x19e>
 80049dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049de:	07d9      	lsls	r1, r3, #31
 80049e0:	d405      	bmi.n	80049ee <_vfiprintf_r+0x202>
 80049e2:	89ab      	ldrh	r3, [r5, #12]
 80049e4:	059a      	lsls	r2, r3, #22
 80049e6:	d402      	bmi.n	80049ee <_vfiprintf_r+0x202>
 80049e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049ea:	f7ff fddb 	bl	80045a4 <__retarget_lock_release_recursive>
 80049ee:	89ab      	ldrh	r3, [r5, #12]
 80049f0:	065b      	lsls	r3, r3, #25
 80049f2:	f53f af1d 	bmi.w	8004830 <_vfiprintf_r+0x44>
 80049f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049f8:	e71c      	b.n	8004834 <_vfiprintf_r+0x48>
 80049fa:	ab03      	add	r3, sp, #12
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	462a      	mov	r2, r5
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <_vfiprintf_r+0x22c>)
 8004a02:	a904      	add	r1, sp, #16
 8004a04:	4630      	mov	r0, r6
 8004a06:	f000 f879 	bl	8004afc <_printf_i>
 8004a0a:	e7e4      	b.n	80049d6 <_vfiprintf_r+0x1ea>
 8004a0c:	0800513c 	.word	0x0800513c
 8004a10:	08005146 	.word	0x08005146
 8004a14:	00000000 	.word	0x00000000
 8004a18:	080047c7 	.word	0x080047c7
 8004a1c:	08005142 	.word	0x08005142

08004a20 <_printf_common>:
 8004a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a24:	4616      	mov	r6, r2
 8004a26:	4699      	mov	r9, r3
 8004a28:	688a      	ldr	r2, [r1, #8]
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	bfb8      	it	lt
 8004a34:	4613      	movlt	r3, r2
 8004a36:	6033      	str	r3, [r6, #0]
 8004a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a3c:	4607      	mov	r7, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	b10a      	cbz	r2, 8004a46 <_printf_common+0x26>
 8004a42:	3301      	adds	r3, #1
 8004a44:	6033      	str	r3, [r6, #0]
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	0699      	lsls	r1, r3, #26
 8004a4a:	bf42      	ittt	mi
 8004a4c:	6833      	ldrmi	r3, [r6, #0]
 8004a4e:	3302      	addmi	r3, #2
 8004a50:	6033      	strmi	r3, [r6, #0]
 8004a52:	6825      	ldr	r5, [r4, #0]
 8004a54:	f015 0506 	ands.w	r5, r5, #6
 8004a58:	d106      	bne.n	8004a68 <_printf_common+0x48>
 8004a5a:	f104 0a19 	add.w	sl, r4, #25
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	6832      	ldr	r2, [r6, #0]
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	dc26      	bgt.n	8004ab6 <_printf_common+0x96>
 8004a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a6c:	1e13      	subs	r3, r2, #0
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	bf18      	it	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	0692      	lsls	r2, r2, #26
 8004a76:	d42b      	bmi.n	8004ad0 <_printf_common+0xb0>
 8004a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c0      	blx	r8
 8004a82:	3001      	adds	r0, #1
 8004a84:	d01e      	beq.n	8004ac4 <_printf_common+0xa4>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	6922      	ldr	r2, [r4, #16]
 8004a8a:	f003 0306 	and.w	r3, r3, #6
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	bf02      	ittt	eq
 8004a92:	68e5      	ldreq	r5, [r4, #12]
 8004a94:	6833      	ldreq	r3, [r6, #0]
 8004a96:	1aed      	subeq	r5, r5, r3
 8004a98:	68a3      	ldr	r3, [r4, #8]
 8004a9a:	bf0c      	ite	eq
 8004a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aa0:	2500      	movne	r5, #0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bfc4      	itt	gt
 8004aa6:	1a9b      	subgt	r3, r3, r2
 8004aa8:	18ed      	addgt	r5, r5, r3
 8004aaa:	2600      	movs	r6, #0
 8004aac:	341a      	adds	r4, #26
 8004aae:	42b5      	cmp	r5, r6
 8004ab0:	d11a      	bne.n	8004ae8 <_printf_common+0xc8>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e008      	b.n	8004ac8 <_printf_common+0xa8>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4652      	mov	r2, sl
 8004aba:	4649      	mov	r1, r9
 8004abc:	4638      	mov	r0, r7
 8004abe:	47c0      	blx	r8
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d103      	bne.n	8004acc <_printf_common+0xac>
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004acc:	3501      	adds	r5, #1
 8004ace:	e7c6      	b.n	8004a5e <_printf_common+0x3e>
 8004ad0:	18e1      	adds	r1, r4, r3
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	2030      	movs	r0, #48	; 0x30
 8004ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ada:	4422      	add	r2, r4
 8004adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	e7c7      	b.n	8004a78 <_printf_common+0x58>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4622      	mov	r2, r4
 8004aec:	4649      	mov	r1, r9
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c0      	blx	r8
 8004af2:	3001      	adds	r0, #1
 8004af4:	d0e6      	beq.n	8004ac4 <_printf_common+0xa4>
 8004af6:	3601      	adds	r6, #1
 8004af8:	e7d9      	b.n	8004aae <_printf_common+0x8e>
	...

08004afc <_printf_i>:
 8004afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b00:	7e0f      	ldrb	r7, [r1, #24]
 8004b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b04:	2f78      	cmp	r7, #120	; 0x78
 8004b06:	4691      	mov	r9, r2
 8004b08:	4680      	mov	r8, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	469a      	mov	sl, r3
 8004b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b12:	d807      	bhi.n	8004b24 <_printf_i+0x28>
 8004b14:	2f62      	cmp	r7, #98	; 0x62
 8004b16:	d80a      	bhi.n	8004b2e <_printf_i+0x32>
 8004b18:	2f00      	cmp	r7, #0
 8004b1a:	f000 80d4 	beq.w	8004cc6 <_printf_i+0x1ca>
 8004b1e:	2f58      	cmp	r7, #88	; 0x58
 8004b20:	f000 80c0 	beq.w	8004ca4 <_printf_i+0x1a8>
 8004b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b2c:	e03a      	b.n	8004ba4 <_printf_i+0xa8>
 8004b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b32:	2b15      	cmp	r3, #21
 8004b34:	d8f6      	bhi.n	8004b24 <_printf_i+0x28>
 8004b36:	a101      	add	r1, pc, #4	; (adr r1, 8004b3c <_printf_i+0x40>)
 8004b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b3c:	08004b95 	.word	0x08004b95
 8004b40:	08004ba9 	.word	0x08004ba9
 8004b44:	08004b25 	.word	0x08004b25
 8004b48:	08004b25 	.word	0x08004b25
 8004b4c:	08004b25 	.word	0x08004b25
 8004b50:	08004b25 	.word	0x08004b25
 8004b54:	08004ba9 	.word	0x08004ba9
 8004b58:	08004b25 	.word	0x08004b25
 8004b5c:	08004b25 	.word	0x08004b25
 8004b60:	08004b25 	.word	0x08004b25
 8004b64:	08004b25 	.word	0x08004b25
 8004b68:	08004cad 	.word	0x08004cad
 8004b6c:	08004bd5 	.word	0x08004bd5
 8004b70:	08004c67 	.word	0x08004c67
 8004b74:	08004b25 	.word	0x08004b25
 8004b78:	08004b25 	.word	0x08004b25
 8004b7c:	08004ccf 	.word	0x08004ccf
 8004b80:	08004b25 	.word	0x08004b25
 8004b84:	08004bd5 	.word	0x08004bd5
 8004b88:	08004b25 	.word	0x08004b25
 8004b8c:	08004b25 	.word	0x08004b25
 8004b90:	08004c6f 	.word	0x08004c6f
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	1d1a      	adds	r2, r3, #4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	602a      	str	r2, [r5, #0]
 8004b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e09f      	b.n	8004ce8 <_printf_i+0x1ec>
 8004ba8:	6820      	ldr	r0, [r4, #0]
 8004baa:	682b      	ldr	r3, [r5, #0]
 8004bac:	0607      	lsls	r7, r0, #24
 8004bae:	f103 0104 	add.w	r1, r3, #4
 8004bb2:	6029      	str	r1, [r5, #0]
 8004bb4:	d501      	bpl.n	8004bba <_printf_i+0xbe>
 8004bb6:	681e      	ldr	r6, [r3, #0]
 8004bb8:	e003      	b.n	8004bc2 <_printf_i+0xc6>
 8004bba:	0646      	lsls	r6, r0, #25
 8004bbc:	d5fb      	bpl.n	8004bb6 <_printf_i+0xba>
 8004bbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bc2:	2e00      	cmp	r6, #0
 8004bc4:	da03      	bge.n	8004bce <_printf_i+0xd2>
 8004bc6:	232d      	movs	r3, #45	; 0x2d
 8004bc8:	4276      	negs	r6, r6
 8004bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bce:	485a      	ldr	r0, [pc, #360]	; (8004d38 <_printf_i+0x23c>)
 8004bd0:	230a      	movs	r3, #10
 8004bd2:	e012      	b.n	8004bfa <_printf_i+0xfe>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	6820      	ldr	r0, [r4, #0]
 8004bd8:	1d19      	adds	r1, r3, #4
 8004bda:	6029      	str	r1, [r5, #0]
 8004bdc:	0605      	lsls	r5, r0, #24
 8004bde:	d501      	bpl.n	8004be4 <_printf_i+0xe8>
 8004be0:	681e      	ldr	r6, [r3, #0]
 8004be2:	e002      	b.n	8004bea <_printf_i+0xee>
 8004be4:	0641      	lsls	r1, r0, #25
 8004be6:	d5fb      	bpl.n	8004be0 <_printf_i+0xe4>
 8004be8:	881e      	ldrh	r6, [r3, #0]
 8004bea:	4853      	ldr	r0, [pc, #332]	; (8004d38 <_printf_i+0x23c>)
 8004bec:	2f6f      	cmp	r7, #111	; 0x6f
 8004bee:	bf0c      	ite	eq
 8004bf0:	2308      	moveq	r3, #8
 8004bf2:	230a      	movne	r3, #10
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bfa:	6865      	ldr	r5, [r4, #4]
 8004bfc:	60a5      	str	r5, [r4, #8]
 8004bfe:	2d00      	cmp	r5, #0
 8004c00:	bfa2      	ittt	ge
 8004c02:	6821      	ldrge	r1, [r4, #0]
 8004c04:	f021 0104 	bicge.w	r1, r1, #4
 8004c08:	6021      	strge	r1, [r4, #0]
 8004c0a:	b90e      	cbnz	r6, 8004c10 <_printf_i+0x114>
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	d04b      	beq.n	8004ca8 <_printf_i+0x1ac>
 8004c10:	4615      	mov	r5, r2
 8004c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c16:	fb03 6711 	mls	r7, r3, r1, r6
 8004c1a:	5dc7      	ldrb	r7, [r0, r7]
 8004c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c20:	4637      	mov	r7, r6
 8004c22:	42bb      	cmp	r3, r7
 8004c24:	460e      	mov	r6, r1
 8004c26:	d9f4      	bls.n	8004c12 <_printf_i+0x116>
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d10b      	bne.n	8004c44 <_printf_i+0x148>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	07de      	lsls	r6, r3, #31
 8004c30:	d508      	bpl.n	8004c44 <_printf_i+0x148>
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	6861      	ldr	r1, [r4, #4]
 8004c36:	4299      	cmp	r1, r3
 8004c38:	bfde      	ittt	le
 8004c3a:	2330      	movle	r3, #48	; 0x30
 8004c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c44:	1b52      	subs	r2, r2, r5
 8004c46:	6122      	str	r2, [r4, #16]
 8004c48:	f8cd a000 	str.w	sl, [sp]
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	aa03      	add	r2, sp, #12
 8004c50:	4621      	mov	r1, r4
 8004c52:	4640      	mov	r0, r8
 8004c54:	f7ff fee4 	bl	8004a20 <_printf_common>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d14a      	bne.n	8004cf2 <_printf_i+0x1f6>
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	b004      	add	sp, #16
 8004c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	f043 0320 	orr.w	r3, r3, #32
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	4833      	ldr	r0, [pc, #204]	; (8004d3c <_printf_i+0x240>)
 8004c70:	2778      	movs	r7, #120	; 0x78
 8004c72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	6829      	ldr	r1, [r5, #0]
 8004c7a:	061f      	lsls	r7, r3, #24
 8004c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c80:	d402      	bmi.n	8004c88 <_printf_i+0x18c>
 8004c82:	065f      	lsls	r7, r3, #25
 8004c84:	bf48      	it	mi
 8004c86:	b2b6      	uxthmi	r6, r6
 8004c88:	07df      	lsls	r7, r3, #31
 8004c8a:	bf48      	it	mi
 8004c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c90:	6029      	str	r1, [r5, #0]
 8004c92:	bf48      	it	mi
 8004c94:	6023      	strmi	r3, [r4, #0]
 8004c96:	b91e      	cbnz	r6, 8004ca0 <_printf_i+0x1a4>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f023 0320 	bic.w	r3, r3, #32
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	e7a7      	b.n	8004bf4 <_printf_i+0xf8>
 8004ca4:	4824      	ldr	r0, [pc, #144]	; (8004d38 <_printf_i+0x23c>)
 8004ca6:	e7e4      	b.n	8004c72 <_printf_i+0x176>
 8004ca8:	4615      	mov	r5, r2
 8004caa:	e7bd      	b.n	8004c28 <_printf_i+0x12c>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	6826      	ldr	r6, [r4, #0]
 8004cb0:	6961      	ldr	r1, [r4, #20]
 8004cb2:	1d18      	adds	r0, r3, #4
 8004cb4:	6028      	str	r0, [r5, #0]
 8004cb6:	0635      	lsls	r5, r6, #24
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	d501      	bpl.n	8004cc0 <_printf_i+0x1c4>
 8004cbc:	6019      	str	r1, [r3, #0]
 8004cbe:	e002      	b.n	8004cc6 <_printf_i+0x1ca>
 8004cc0:	0670      	lsls	r0, r6, #25
 8004cc2:	d5fb      	bpl.n	8004cbc <_printf_i+0x1c0>
 8004cc4:	8019      	strh	r1, [r3, #0]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6123      	str	r3, [r4, #16]
 8004cca:	4615      	mov	r5, r2
 8004ccc:	e7bc      	b.n	8004c48 <_printf_i+0x14c>
 8004cce:	682b      	ldr	r3, [r5, #0]
 8004cd0:	1d1a      	adds	r2, r3, #4
 8004cd2:	602a      	str	r2, [r5, #0]
 8004cd4:	681d      	ldr	r5, [r3, #0]
 8004cd6:	6862      	ldr	r2, [r4, #4]
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f7fb fa88 	bl	80001f0 <memchr>
 8004ce0:	b108      	cbz	r0, 8004ce6 <_printf_i+0x1ea>
 8004ce2:	1b40      	subs	r0, r0, r5
 8004ce4:	6060      	str	r0, [r4, #4]
 8004ce6:	6863      	ldr	r3, [r4, #4]
 8004ce8:	6123      	str	r3, [r4, #16]
 8004cea:	2300      	movs	r3, #0
 8004cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf0:	e7aa      	b.n	8004c48 <_printf_i+0x14c>
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	462a      	mov	r2, r5
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	47d0      	blx	sl
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d0ad      	beq.n	8004c5c <_printf_i+0x160>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	079b      	lsls	r3, r3, #30
 8004d04:	d413      	bmi.n	8004d2e <_printf_i+0x232>
 8004d06:	68e0      	ldr	r0, [r4, #12]
 8004d08:	9b03      	ldr	r3, [sp, #12]
 8004d0a:	4298      	cmp	r0, r3
 8004d0c:	bfb8      	it	lt
 8004d0e:	4618      	movlt	r0, r3
 8004d10:	e7a6      	b.n	8004c60 <_printf_i+0x164>
 8004d12:	2301      	movs	r3, #1
 8004d14:	4632      	mov	r2, r6
 8004d16:	4649      	mov	r1, r9
 8004d18:	4640      	mov	r0, r8
 8004d1a:	47d0      	blx	sl
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d09d      	beq.n	8004c5c <_printf_i+0x160>
 8004d20:	3501      	adds	r5, #1
 8004d22:	68e3      	ldr	r3, [r4, #12]
 8004d24:	9903      	ldr	r1, [sp, #12]
 8004d26:	1a5b      	subs	r3, r3, r1
 8004d28:	42ab      	cmp	r3, r5
 8004d2a:	dcf2      	bgt.n	8004d12 <_printf_i+0x216>
 8004d2c:	e7eb      	b.n	8004d06 <_printf_i+0x20a>
 8004d2e:	2500      	movs	r5, #0
 8004d30:	f104 0619 	add.w	r6, r4, #25
 8004d34:	e7f5      	b.n	8004d22 <_printf_i+0x226>
 8004d36:	bf00      	nop
 8004d38:	0800514d 	.word	0x0800514d
 8004d3c:	0800515e 	.word	0x0800515e

08004d40 <__sflush_r>:
 8004d40:	898a      	ldrh	r2, [r1, #12]
 8004d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d46:	4605      	mov	r5, r0
 8004d48:	0710      	lsls	r0, r2, #28
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	d458      	bmi.n	8004e00 <__sflush_r+0xc0>
 8004d4e:	684b      	ldr	r3, [r1, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	dc05      	bgt.n	8004d60 <__sflush_r+0x20>
 8004d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	dc02      	bgt.n	8004d60 <__sflush_r+0x20>
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d62:	2e00      	cmp	r6, #0
 8004d64:	d0f9      	beq.n	8004d5a <__sflush_r+0x1a>
 8004d66:	2300      	movs	r3, #0
 8004d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d6c:	682f      	ldr	r7, [r5, #0]
 8004d6e:	6a21      	ldr	r1, [r4, #32]
 8004d70:	602b      	str	r3, [r5, #0]
 8004d72:	d032      	beq.n	8004dda <__sflush_r+0x9a>
 8004d74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	075a      	lsls	r2, r3, #29
 8004d7a:	d505      	bpl.n	8004d88 <__sflush_r+0x48>
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	1ac0      	subs	r0, r0, r3
 8004d80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d82:	b10b      	cbz	r3, 8004d88 <__sflush_r+0x48>
 8004d84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d86:	1ac0      	subs	r0, r0, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d8e:	6a21      	ldr	r1, [r4, #32]
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b0      	blx	r6
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	d106      	bne.n	8004da8 <__sflush_r+0x68>
 8004d9a:	6829      	ldr	r1, [r5, #0]
 8004d9c:	291d      	cmp	r1, #29
 8004d9e:	d82b      	bhi.n	8004df8 <__sflush_r+0xb8>
 8004da0:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <__sflush_r+0x108>)
 8004da2:	410a      	asrs	r2, r1
 8004da4:	07d6      	lsls	r6, r2, #31
 8004da6:	d427      	bmi.n	8004df8 <__sflush_r+0xb8>
 8004da8:	2200      	movs	r2, #0
 8004daa:	6062      	str	r2, [r4, #4]
 8004dac:	04d9      	lsls	r1, r3, #19
 8004dae:	6922      	ldr	r2, [r4, #16]
 8004db0:	6022      	str	r2, [r4, #0]
 8004db2:	d504      	bpl.n	8004dbe <__sflush_r+0x7e>
 8004db4:	1c42      	adds	r2, r0, #1
 8004db6:	d101      	bne.n	8004dbc <__sflush_r+0x7c>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b903      	cbnz	r3, 8004dbe <__sflush_r+0x7e>
 8004dbc:	6560      	str	r0, [r4, #84]	; 0x54
 8004dbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dc0:	602f      	str	r7, [r5, #0]
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	d0c9      	beq.n	8004d5a <__sflush_r+0x1a>
 8004dc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dca:	4299      	cmp	r1, r3
 8004dcc:	d002      	beq.n	8004dd4 <__sflush_r+0x94>
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f7ff fbea 	bl	80045a8 <_free_r>
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	6360      	str	r0, [r4, #52]	; 0x34
 8004dd8:	e7c0      	b.n	8004d5c <__sflush_r+0x1c>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b0      	blx	r6
 8004de0:	1c41      	adds	r1, r0, #1
 8004de2:	d1c8      	bne.n	8004d76 <__sflush_r+0x36>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0c5      	beq.n	8004d76 <__sflush_r+0x36>
 8004dea:	2b1d      	cmp	r3, #29
 8004dec:	d001      	beq.n	8004df2 <__sflush_r+0xb2>
 8004dee:	2b16      	cmp	r3, #22
 8004df0:	d101      	bne.n	8004df6 <__sflush_r+0xb6>
 8004df2:	602f      	str	r7, [r5, #0]
 8004df4:	e7b1      	b.n	8004d5a <__sflush_r+0x1a>
 8004df6:	89a3      	ldrh	r3, [r4, #12]
 8004df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dfc:	81a3      	strh	r3, [r4, #12]
 8004dfe:	e7ad      	b.n	8004d5c <__sflush_r+0x1c>
 8004e00:	690f      	ldr	r7, [r1, #16]
 8004e02:	2f00      	cmp	r7, #0
 8004e04:	d0a9      	beq.n	8004d5a <__sflush_r+0x1a>
 8004e06:	0793      	lsls	r3, r2, #30
 8004e08:	680e      	ldr	r6, [r1, #0]
 8004e0a:	bf08      	it	eq
 8004e0c:	694b      	ldreq	r3, [r1, #20]
 8004e0e:	600f      	str	r7, [r1, #0]
 8004e10:	bf18      	it	ne
 8004e12:	2300      	movne	r3, #0
 8004e14:	eba6 0807 	sub.w	r8, r6, r7
 8004e18:	608b      	str	r3, [r1, #8]
 8004e1a:	f1b8 0f00 	cmp.w	r8, #0
 8004e1e:	dd9c      	ble.n	8004d5a <__sflush_r+0x1a>
 8004e20:	6a21      	ldr	r1, [r4, #32]
 8004e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e24:	4643      	mov	r3, r8
 8004e26:	463a      	mov	r2, r7
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b0      	blx	r6
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	dc06      	bgt.n	8004e3e <__sflush_r+0xfe>
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	e78e      	b.n	8004d5c <__sflush_r+0x1c>
 8004e3e:	4407      	add	r7, r0
 8004e40:	eba8 0800 	sub.w	r8, r8, r0
 8004e44:	e7e9      	b.n	8004e1a <__sflush_r+0xda>
 8004e46:	bf00      	nop
 8004e48:	dfbffffe 	.word	0xdfbffffe

08004e4c <_fflush_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	690b      	ldr	r3, [r1, #16]
 8004e50:	4605      	mov	r5, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	b913      	cbnz	r3, 8004e5c <_fflush_r+0x10>
 8004e56:	2500      	movs	r5, #0
 8004e58:	4628      	mov	r0, r5
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	b118      	cbz	r0, 8004e66 <_fflush_r+0x1a>
 8004e5e:	6a03      	ldr	r3, [r0, #32]
 8004e60:	b90b      	cbnz	r3, 8004e66 <_fflush_r+0x1a>
 8004e62:	f7ff fa99 	bl	8004398 <__sinit>
 8004e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f3      	beq.n	8004e56 <_fflush_r+0xa>
 8004e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e70:	07d0      	lsls	r0, r2, #31
 8004e72:	d404      	bmi.n	8004e7e <_fflush_r+0x32>
 8004e74:	0599      	lsls	r1, r3, #22
 8004e76:	d402      	bmi.n	8004e7e <_fflush_r+0x32>
 8004e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e7a:	f7ff fb92 	bl	80045a2 <__retarget_lock_acquire_recursive>
 8004e7e:	4628      	mov	r0, r5
 8004e80:	4621      	mov	r1, r4
 8004e82:	f7ff ff5d 	bl	8004d40 <__sflush_r>
 8004e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e88:	07da      	lsls	r2, r3, #31
 8004e8a:	4605      	mov	r5, r0
 8004e8c:	d4e4      	bmi.n	8004e58 <_fflush_r+0xc>
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	059b      	lsls	r3, r3, #22
 8004e92:	d4e1      	bmi.n	8004e58 <_fflush_r+0xc>
 8004e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e96:	f7ff fb85 	bl	80045a4 <__retarget_lock_release_recursive>
 8004e9a:	e7dd      	b.n	8004e58 <_fflush_r+0xc>

08004e9c <__swbuf_r>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	460e      	mov	r6, r1
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	b118      	cbz	r0, 8004eae <__swbuf_r+0x12>
 8004ea6:	6a03      	ldr	r3, [r0, #32]
 8004ea8:	b90b      	cbnz	r3, 8004eae <__swbuf_r+0x12>
 8004eaa:	f7ff fa75 	bl	8004398 <__sinit>
 8004eae:	69a3      	ldr	r3, [r4, #24]
 8004eb0:	60a3      	str	r3, [r4, #8]
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	071a      	lsls	r2, r3, #28
 8004eb6:	d525      	bpl.n	8004f04 <__swbuf_r+0x68>
 8004eb8:	6923      	ldr	r3, [r4, #16]
 8004eba:	b31b      	cbz	r3, 8004f04 <__swbuf_r+0x68>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	6922      	ldr	r2, [r4, #16]
 8004ec0:	1a98      	subs	r0, r3, r2
 8004ec2:	6963      	ldr	r3, [r4, #20]
 8004ec4:	b2f6      	uxtb	r6, r6
 8004ec6:	4283      	cmp	r3, r0
 8004ec8:	4637      	mov	r7, r6
 8004eca:	dc04      	bgt.n	8004ed6 <__swbuf_r+0x3a>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f7ff ffbc 	bl	8004e4c <_fflush_r>
 8004ed4:	b9e0      	cbnz	r0, 8004f10 <__swbuf_r+0x74>
 8004ed6:	68a3      	ldr	r3, [r4, #8]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	60a3      	str	r3, [r4, #8]
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	6022      	str	r2, [r4, #0]
 8004ee2:	701e      	strb	r6, [r3, #0]
 8004ee4:	6962      	ldr	r2, [r4, #20]
 8004ee6:	1c43      	adds	r3, r0, #1
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d004      	beq.n	8004ef6 <__swbuf_r+0x5a>
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	07db      	lsls	r3, r3, #31
 8004ef0:	d506      	bpl.n	8004f00 <__swbuf_r+0x64>
 8004ef2:	2e0a      	cmp	r6, #10
 8004ef4:	d104      	bne.n	8004f00 <__swbuf_r+0x64>
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f7ff ffa7 	bl	8004e4c <_fflush_r>
 8004efe:	b938      	cbnz	r0, 8004f10 <__swbuf_r+0x74>
 8004f00:	4638      	mov	r0, r7
 8004f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f04:	4621      	mov	r1, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 f806 	bl	8004f18 <__swsetup_r>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0d5      	beq.n	8004ebc <__swbuf_r+0x20>
 8004f10:	f04f 37ff 	mov.w	r7, #4294967295
 8004f14:	e7f4      	b.n	8004f00 <__swbuf_r+0x64>
	...

08004f18 <__swsetup_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <__swsetup_r+0xac>)
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	460c      	mov	r4, r1
 8004f22:	b118      	cbz	r0, 8004f2c <__swsetup_r+0x14>
 8004f24:	6a03      	ldr	r3, [r0, #32]
 8004f26:	b90b      	cbnz	r3, 8004f2c <__swsetup_r+0x14>
 8004f28:	f7ff fa36 	bl	8004398 <__sinit>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f32:	0718      	lsls	r0, r3, #28
 8004f34:	d422      	bmi.n	8004f7c <__swsetup_r+0x64>
 8004f36:	06d9      	lsls	r1, r3, #27
 8004f38:	d407      	bmi.n	8004f4a <__swsetup_r+0x32>
 8004f3a:	2309      	movs	r3, #9
 8004f3c:	602b      	str	r3, [r5, #0]
 8004f3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	e034      	b.n	8004fb4 <__swsetup_r+0x9c>
 8004f4a:	0758      	lsls	r0, r3, #29
 8004f4c:	d512      	bpl.n	8004f74 <__swsetup_r+0x5c>
 8004f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f50:	b141      	cbz	r1, 8004f64 <__swsetup_r+0x4c>
 8004f52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f56:	4299      	cmp	r1, r3
 8004f58:	d002      	beq.n	8004f60 <__swsetup_r+0x48>
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f7ff fb24 	bl	80045a8 <_free_r>
 8004f60:	2300      	movs	r3, #0
 8004f62:	6363      	str	r3, [r4, #52]	; 0x34
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	f043 0308 	orr.w	r3, r3, #8
 8004f7a:	81a3      	strh	r3, [r4, #12]
 8004f7c:	6923      	ldr	r3, [r4, #16]
 8004f7e:	b94b      	cbnz	r3, 8004f94 <__swsetup_r+0x7c>
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8a:	d003      	beq.n	8004f94 <__swsetup_r+0x7c>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f000 f850 	bl	8005034 <__smakebuf_r>
 8004f94:	89a0      	ldrh	r0, [r4, #12]
 8004f96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f9a:	f010 0301 	ands.w	r3, r0, #1
 8004f9e:	d00a      	beq.n	8004fb6 <__swsetup_r+0x9e>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60a3      	str	r3, [r4, #8]
 8004fa4:	6963      	ldr	r3, [r4, #20]
 8004fa6:	425b      	negs	r3, r3
 8004fa8:	61a3      	str	r3, [r4, #24]
 8004faa:	6923      	ldr	r3, [r4, #16]
 8004fac:	b943      	cbnz	r3, 8004fc0 <__swsetup_r+0xa8>
 8004fae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fb2:	d1c4      	bne.n	8004f3e <__swsetup_r+0x26>
 8004fb4:	bd38      	pop	{r3, r4, r5, pc}
 8004fb6:	0781      	lsls	r1, r0, #30
 8004fb8:	bf58      	it	pl
 8004fba:	6963      	ldrpl	r3, [r4, #20]
 8004fbc:	60a3      	str	r3, [r4, #8]
 8004fbe:	e7f4      	b.n	8004faa <__swsetup_r+0x92>
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	e7f7      	b.n	8004fb4 <__swsetup_r+0x9c>
 8004fc4:	20000064 	.word	0x20000064

08004fc8 <_sbrk_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d06      	ldr	r5, [pc, #24]	; (8004fe4 <_sbrk_r+0x1c>)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	f7fc f8d6 	bl	8001184 <_sbrk>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_sbrk_r+0x1a>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_sbrk_r+0x1a>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	2000095c 	.word	0x2000095c

08004fe8 <__swhatbuf_r>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	460c      	mov	r4, r1
 8004fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	b096      	sub	sp, #88	; 0x58
 8004ff4:	4615      	mov	r5, r2
 8004ff6:	461e      	mov	r6, r3
 8004ff8:	da0d      	bge.n	8005016 <__swhatbuf_r+0x2e>
 8004ffa:	89a3      	ldrh	r3, [r4, #12]
 8004ffc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	bf0c      	ite	eq
 8005006:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800500a:	2340      	movne	r3, #64	; 0x40
 800500c:	2000      	movs	r0, #0
 800500e:	6031      	str	r1, [r6, #0]
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	b016      	add	sp, #88	; 0x58
 8005014:	bd70      	pop	{r4, r5, r6, pc}
 8005016:	466a      	mov	r2, sp
 8005018:	f000 f848 	bl	80050ac <_fstat_r>
 800501c:	2800      	cmp	r0, #0
 800501e:	dbec      	blt.n	8004ffa <__swhatbuf_r+0x12>
 8005020:	9901      	ldr	r1, [sp, #4]
 8005022:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005026:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800502a:	4259      	negs	r1, r3
 800502c:	4159      	adcs	r1, r3
 800502e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005032:	e7eb      	b.n	800500c <__swhatbuf_r+0x24>

08005034 <__smakebuf_r>:
 8005034:	898b      	ldrh	r3, [r1, #12]
 8005036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005038:	079d      	lsls	r5, r3, #30
 800503a:	4606      	mov	r6, r0
 800503c:	460c      	mov	r4, r1
 800503e:	d507      	bpl.n	8005050 <__smakebuf_r+0x1c>
 8005040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	6123      	str	r3, [r4, #16]
 8005048:	2301      	movs	r3, #1
 800504a:	6163      	str	r3, [r4, #20]
 800504c:	b002      	add	sp, #8
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	ab01      	add	r3, sp, #4
 8005052:	466a      	mov	r2, sp
 8005054:	f7ff ffc8 	bl	8004fe8 <__swhatbuf_r>
 8005058:	9900      	ldr	r1, [sp, #0]
 800505a:	4605      	mov	r5, r0
 800505c:	4630      	mov	r0, r6
 800505e:	f7ff fb0f 	bl	8004680 <_malloc_r>
 8005062:	b948      	cbnz	r0, 8005078 <__smakebuf_r+0x44>
 8005064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005068:	059a      	lsls	r2, r3, #22
 800506a:	d4ef      	bmi.n	800504c <__smakebuf_r+0x18>
 800506c:	f023 0303 	bic.w	r3, r3, #3
 8005070:	f043 0302 	orr.w	r3, r3, #2
 8005074:	81a3      	strh	r3, [r4, #12]
 8005076:	e7e3      	b.n	8005040 <__smakebuf_r+0xc>
 8005078:	89a3      	ldrh	r3, [r4, #12]
 800507a:	6020      	str	r0, [r4, #0]
 800507c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	9b00      	ldr	r3, [sp, #0]
 8005084:	6163      	str	r3, [r4, #20]
 8005086:	9b01      	ldr	r3, [sp, #4]
 8005088:	6120      	str	r0, [r4, #16]
 800508a:	b15b      	cbz	r3, 80050a4 <__smakebuf_r+0x70>
 800508c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005090:	4630      	mov	r0, r6
 8005092:	f000 f81d 	bl	80050d0 <_isatty_r>
 8005096:	b128      	cbz	r0, 80050a4 <__smakebuf_r+0x70>
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	81a3      	strh	r3, [r4, #12]
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	431d      	orrs	r5, r3
 80050a8:	81a5      	strh	r5, [r4, #12]
 80050aa:	e7cf      	b.n	800504c <__smakebuf_r+0x18>

080050ac <_fstat_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d07      	ldr	r5, [pc, #28]	; (80050cc <_fstat_r+0x20>)
 80050b0:	2300      	movs	r3, #0
 80050b2:	4604      	mov	r4, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	f7fc f83a 	bl	8001132 <_fstat>
 80050be:	1c43      	adds	r3, r0, #1
 80050c0:	d102      	bne.n	80050c8 <_fstat_r+0x1c>
 80050c2:	682b      	ldr	r3, [r5, #0]
 80050c4:	b103      	cbz	r3, 80050c8 <_fstat_r+0x1c>
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	bd38      	pop	{r3, r4, r5, pc}
 80050ca:	bf00      	nop
 80050cc:	2000095c 	.word	0x2000095c

080050d0 <_isatty_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4d06      	ldr	r5, [pc, #24]	; (80050ec <_isatty_r+0x1c>)
 80050d4:	2300      	movs	r3, #0
 80050d6:	4604      	mov	r4, r0
 80050d8:	4608      	mov	r0, r1
 80050da:	602b      	str	r3, [r5, #0]
 80050dc:	f7fc f839 	bl	8001152 <_isatty>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d102      	bne.n	80050ea <_isatty_r+0x1a>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	b103      	cbz	r3, 80050ea <_isatty_r+0x1a>
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	2000095c 	.word	0x2000095c

080050f0 <_init>:
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	bf00      	nop
 80050f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f6:	bc08      	pop	{r3}
 80050f8:	469e      	mov	lr, r3
 80050fa:	4770      	bx	lr

080050fc <_fini>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	bf00      	nop
 8005100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005102:	bc08      	pop	{r3}
 8005104:	469e      	mov	lr, r3
 8005106:	4770      	bx	lr
