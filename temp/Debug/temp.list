
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08008038  08008038  00018038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083dc  080083dc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e4  080083e4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080083ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000009cc  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ba0  20000ba0  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   000169a7  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c73  00000000  00000000  00036bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001498  00000000  00000000  00039868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001013  00000000  00000000  0003ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000284e7  00000000  00000000  0003bd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017910  00000000  00000000  000641fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f85e0  00000000  00000000  0007bb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006994  00000000  00000000  001740ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0017aa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008020 	.word	0x08008020

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08008020 	.word	0x08008020

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <_write>:
static void MX_RTC_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <_write+0x28>)
 8000edc:	f003 fcfd 	bl	80048da <HAL_UART_Transmit>

	return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200004dc 	.word	0x200004dc

08000ef0 <delay_us>:

float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void delay_us(uint16_t time) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);              // ???��머�?? 0?���????? 초기?��
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <delay_us+0x30>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<time);   // ?��?��?�� ?��간까�????? ??�?????
 8000f02:	bf00      	nop
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <delay_us+0x30>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d3f9      	bcc.n	8000f04 <delay_us+0x14>
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000494 	.word	0x20000494

08000f24 <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f001 fef2 	bl	8002d3c <HAL_GPIO_Init>
}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f001 fed4 	bl	8002d3c <HAL_GPIO_Init>
}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <DHT11_Start>:
void DHT11_Start (void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_GPIO_Port, DHT11_Pin);  // set the pin as output
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <DHT11_Start+0x2c>)
 8000fa4:	f7ff ffbe 	bl	8000f24 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2108      	movs	r1, #8
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <DHT11_Start+0x2c>)
 8000fae:	f002 f889 	bl	80030c4 <HAL_GPIO_WritePin>
	delay_us(18000);   // wait for 18ms
 8000fb2:	f244 6050 	movw	r0, #18000	; 0x4650
 8000fb6:	f7ff ff9b 	bl	8000ef0 <delay_us>
	Set_Pin_Input(DHT11_GPIO_Port, DHT11_Pin);    // set as input
 8000fba:	2108      	movs	r1, #8
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <DHT11_Start+0x2c>)
 8000fbe:	f7ff ffcf 	bl	8000f60 <Set_Pin_Input>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020000 	.word	0x40020000

08000fcc <DHT11_Check_Response>:
uint8_t DHT11_Check_Response (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 8000fd6:	2028      	movs	r0, #40	; 0x28
 8000fd8:	f7ff ff8a 	bl	8000ef0 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))
 8000fdc:	2108      	movs	r1, #8
 8000fde:	4811      	ldr	r0, [pc, #68]	; (8001024 <DHT11_Check_Response+0x58>)
 8000fe0:	f002 f858 	bl	8003094 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10e      	bne.n	8001008 <DHT11_Check_Response+0x3c>
	{
		delay_us (80);
 8000fea:	2050      	movs	r0, #80	; 0x50
 8000fec:	f7ff ff80 	bl	8000ef0 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin))) Response = 1;
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	480c      	ldr	r0, [pc, #48]	; (8001024 <DHT11_Check_Response+0x58>)
 8000ff4:	f002 f84e 	bl	8003094 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <DHT11_Check_Response+0x38>
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <DHT11_Check_Response+0x3c>
		else Response = -1;
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go low
 8001008:	bf00      	nop
 800100a:	2108      	movs	r1, #8
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <DHT11_Check_Response+0x58>)
 800100e:	f002 f841 	bl	8003094 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f8      	bne.n	800100a <DHT11_Check_Response+0x3e>

	return Response;
 8001018:	79fb      	ldrb	r3, [r7, #7]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020000 	.word	0x40020000

08001028 <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800102e:	2300      	movs	r3, #0
 8001030:	71bb      	strb	r3, [r7, #6]
 8001032:	e037      	b.n	80010a4 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go high
 8001034:	bf00      	nop
 8001036:	2108      	movs	r1, #8
 8001038:	481e      	ldr	r0, [pc, #120]	; (80010b4 <DHT11_Read+0x8c>)
 800103a:	f002 f82b 	bl	8003094 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f8      	beq.n	8001036 <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 8001044:	2028      	movs	r0, #40	; 0x28
 8001046:	f7ff ff53 	bl	8000ef0 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))   // if the pin is low
 800104a:	2108      	movs	r1, #8
 800104c:	4819      	ldr	r0, [pc, #100]	; (80010b4 <DHT11_Read+0x8c>)
 800104e:	f002 f821 	bl	8003094 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10e      	bne.n	8001076 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2201      	movs	r2, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	b25b      	sxtb	r3, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	b25a      	sxtb	r2, r3
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	4013      	ands	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	e00b      	b.n	800108e <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	f1c3 0307 	rsb	r3, r3, #7
 800107c:	2201      	movs	r2, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	b25a      	sxtb	r2, r3
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4313      	orrs	r3, r2
 800108a:	b25b      	sxtb	r3, r3
 800108c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));  // wait for the pin to go low
 800108e:	bf00      	nop
 8001090:	2108      	movs	r1, #8
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <DHT11_Read+0x8c>)
 8001094:	f001 fffe 	bl	8003094 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f8      	bne.n	8001090 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	3301      	adds	r3, #1
 80010a2:	71bb      	strb	r3, [r7, #6]
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	d9c4      	bls.n	8001034 <DHT11_Read+0xc>
	}
	return i;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40020000 	.word	0x40020000

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f000 feb7 	bl	8001e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f895 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f000 fa99 	bl	80015fc <MX_GPIO_Init>
  MX_ETH_Init();
 80010ca:	f000 f97b 	bl	80013c4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80010ce:	f000 fa3d 	bl	800154c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010d2:	f000 fa65 	bl	80015a0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80010d6:	f000 f8f7 	bl	80012c8 <MX_ADC1_Init>
  MX_DAC_Init();
 80010da:	f000 f949 	bl	8001370 <MX_DAC_Init>
  MX_RTC_Init();
 80010de:	f000 f9bf 	bl	8001460 <MX_RTC_Init>
  MX_TIM1_Init();
 80010e2:	f000 f9e3 	bl	80014ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80010e6:	4835      	ldr	r0, [pc, #212]	; (80011bc <main+0x104>)
 80010e8:	f003 f8c4 	bl	8004274 <HAL_TIM_Base_Start>
  int count = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
//
//
//
//  }

  double temperature = 0;
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	e9c7 2300 	strd	r2, r3, [r7]

  //HAL_ADC_Start(&hadc1);

  printf("Hello World !!\r\n");
 80010fc:	4830      	ldr	r0, [pc, #192]	; (80011c0 <main+0x108>)
 80010fe:	f004 fff1 	bl	80060e4 <puts>
//      temperature = adc_value * 3.3/ 0xfff;
//      temperature = (temperature-0.76)/0.0025 + 25.0;
//      //printf("Temperature : %f\r\n", temperature);
//    }

    	DHT11_Start();
 8001102:	f7ff ff4b 	bl	8000f9c <DHT11_Start>
	  Presence = DHT11_Check_Response();
 8001106:	f7ff ff61 	bl	8000fcc <DHT11_Check_Response>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <main+0x10c>)
 8001110:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 8001112:	f7ff ff89 	bl	8001028 <DHT11_Read>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <main+0x110>)
 800111c:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read ();
 800111e:	f7ff ff83 	bl	8001028 <DHT11_Read>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <main+0x114>)
 8001128:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 800112a:	f7ff ff7d 	bl	8001028 <DHT11_Read>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <main+0x118>)
 8001134:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 8001136:	f7ff ff77 	bl	8001028 <DHT11_Read>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <main+0x11c>)
 8001140:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 8001142:	f7ff ff71 	bl	8001028 <DHT11_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <main+0x120>)
 800114c:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <main+0x118>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <main+0x124>)
 8001156:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <main+0x110>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <main+0x128>)
 8001160:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <main+0x124>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <main+0x12c>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <main+0x128>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <main+0x130>)
 8001182:	edc3 7a00 	vstr	s15, [r3]

	  printf("%f, %f \r\n", Temperature, Humidity);
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <main+0x12c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9ec 	bl	8000568 <__aeabi_f2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <main+0x130>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9e5 	bl	8000568 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9cd 2300 	strd	r2, r3, [sp]
 80011a6:	4622      	mov	r2, r4
 80011a8:	462b      	mov	r3, r5
 80011aa:	4810      	ldr	r0, [pc, #64]	; (80011ec <main+0x134>)
 80011ac:	f004 ff34 	bl	8006018 <iprintf>
	  HAL_Delay(500);
 80011b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b4:	f000 feae 	bl	8001f14 <HAL_Delay>
    	DHT11_Start();
 80011b8:	e7a3      	b.n	8001102 <main+0x4a>
 80011ba:	bf00      	nop
 80011bc:	20000494 	.word	0x20000494
 80011c0:	08008038 	.word	0x08008038
 80011c4:	20000a40 	.word	0x20000a40
 80011c8:	20000a2c 	.word	0x20000a2c
 80011cc:	20000a2d 	.word	0x20000a2d
 80011d0:	20000a2e 	.word	0x20000a2e
 80011d4:	20000a2f 	.word	0x20000a2f
 80011d8:	20000a30 	.word	0x20000a30
 80011dc:	20000a34 	.word	0x20000a34
 80011e0:	20000a32 	.word	0x20000a32
 80011e4:	20000a38 	.word	0x20000a38
 80011e8:	20000a3c 	.word	0x20000a3c
 80011ec:	08008048 	.word	0x08008048

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 f850 	bl	80062a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <SystemClock_Config+0xd0>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <SystemClock_Config+0xd0>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <SystemClock_Config+0xd0>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <SystemClock_Config+0xd4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <SystemClock_Config+0xd4>)
 800123a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <SystemClock_Config+0xd4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800124c:	2305      	movs	r3, #5
 800124e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001250:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001256:	2301      	movs	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001268:	23a8      	movs	r3, #168	; 0xa8
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001270:	2307      	movs	r3, #7
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f002 f859 	bl	8003330 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001284:	f000 fa7c 	bl	8001780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2105      	movs	r1, #5
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 faba 	bl	8003820 <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012b2:	f000 fa65 	bl	8001780 <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3750      	adds	r7, #80	; 0x50
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_ADC1_Init+0x98>)
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <MX_ADC1_Init+0x9c>)
 80012de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_ADC1_Init+0x98>)
 80012e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_ADC1_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_ADC1_Init+0x98>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_ADC1_Init+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_ADC1_Init+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_ADC1_Init+0x98>)
 8001304:	2200      	movs	r2, #0
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_ADC1_Init+0x98>)
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <MX_ADC1_Init+0xa0>)
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_ADC1_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_ADC1_Init+0x98>)
 8001316:	2201      	movs	r2, #1
 8001318:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_ADC1_Init+0x98>)
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_ADC1_Init+0x98>)
 8001324:	2201      	movs	r2, #1
 8001326:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_ADC1_Init+0x98>)
 800132a:	f000 fe17 	bl	8001f5c <HAL_ADC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001334:	f000 fa24 	bl	8001780 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_ADC1_Init+0xa4>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_ADC1_Init+0x98>)
 800134a:	f000 fe4b 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001354:	f000 fa14 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000368 	.word	0x20000368
 8001364:	40012000 	.word	0x40012000
 8001368:	0f000001 	.word	0x0f000001
 800136c:	10000012 	.word	0x10000012

08001370 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_DAC_Init+0x4c>)
 8001380:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <MX_DAC_Init+0x50>)
 8001382:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <MX_DAC_Init+0x4c>)
 8001386:	f001 f940 	bl	800260a <HAL_DAC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001390:	f000 f9f6 	bl	8001780 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001394:	2300      	movs	r3, #0
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_DAC_Init+0x4c>)
 80013a4:	f001 f953 	bl	800264e <HAL_DAC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80013ae:	f000 f9e7 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200003b0 	.word	0x200003b0
 80013c0:	40007400 	.word	0x40007400

080013c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_ETH_Init+0x84>)
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <MX_ETH_Init+0x88>)
 80013cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <MX_ETH_Init+0x8c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <MX_ETH_Init+0x8c>)
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_ETH_Init+0x8c>)
 80013dc:	22e1      	movs	r2, #225	; 0xe1
 80013de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_ETH_Init+0x8c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_ETH_Init+0x8c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_ETH_Init+0x8c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_ETH_Init+0x84>)
 80013f4:	4a16      	ldr	r2, [pc, #88]	; (8001450 <MX_ETH_Init+0x8c>)
 80013f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_ETH_Init+0x84>)
 80013fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013fe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_ETH_Init+0x84>)
 8001402:	4a14      	ldr	r2, [pc, #80]	; (8001454 <MX_ETH_Init+0x90>)
 8001404:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_ETH_Init+0x84>)
 8001408:	4a13      	ldr	r2, [pc, #76]	; (8001458 <MX_ETH_Init+0x94>)
 800140a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_ETH_Init+0x84>)
 800140e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001412:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MX_ETH_Init+0x84>)
 8001416:	f001 f969 	bl	80026ec <HAL_ETH_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001420:	f000 f9ae 	bl	8001780 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001424:	2238      	movs	r2, #56	; 0x38
 8001426:	2100      	movs	r1, #0
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_ETH_Init+0x98>)
 800142a:	f004 ff3b 	bl	80062a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_ETH_Init+0x98>)
 8001430:	2221      	movs	r2, #33	; 0x21
 8001432:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_ETH_Init+0x98>)
 8001436:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800143a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <MX_ETH_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200003c4 	.word	0x200003c4
 800144c:	40028000 	.word	0x40028000
 8001450:	20000a44 	.word	0x20000a44
 8001454:	200002c8 	.word	0x200002c8
 8001458:	20000228 	.word	0x20000228
 800145c:	200001f0 	.word	0x200001f0

08001460 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_RTC_Init+0x44>)
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <MX_RTC_Init+0x48>)
 8001468:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_RTC_Init+0x44>)
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_RTC_Init+0x44>)
 8001472:	227f      	movs	r2, #127	; 0x7f
 8001474:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_RTC_Init+0x44>)
 8001478:	22ff      	movs	r2, #255	; 0xff
 800147a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_RTC_Init+0x44>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_RTC_Init+0x44>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_RTC_Init+0x44>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_RTC_Init+0x44>)
 8001490:	f002 fda6 	bl	8003fe0 <HAL_RTC_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800149a:	f000 f971 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000474 	.word	0x20000474
 80014a8:	40002800 	.word	0x40002800

080014ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_TIM1_Init+0x98>)
 80014ca:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <MX_TIM1_Init+0x9c>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_TIM1_Init+0x98>)
 80014d0:	22a7      	movs	r2, #167	; 0xa7
 80014d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_TIM1_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_TIM1_Init+0x98>)
 80014dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_TIM1_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_TIM1_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_TIM1_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <MX_TIM1_Init+0x98>)
 80014f6:	f002 fe6d 	bl	80041d4 <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001500:	f000 f93e 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_TIM1_Init+0x98>)
 8001512:	f002 ff17 	bl	8004344 <HAL_TIM_ConfigClockSource>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800151c:	f000 f930 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_TIM1_Init+0x98>)
 800152e:	f003 f90b 	bl	8004748 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001538:	f000 f922 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000494 	.word	0x20000494
 8001548:	40010000 	.word	0x40010000

0800154c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <MX_USART3_UART_Init+0x50>)
 8001554:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001584:	f003 f95c 	bl	8004840 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800158e:	f000 f8f7 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200004dc 	.word	0x200004dc
 800159c:	40004800 	.word	0x40004800

080015a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ae:	2204      	movs	r2, #4
 80015b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d8:	2201      	movs	r2, #1
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e4:	f001 fd87 	bl	80030f6 <HAL_PCD_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015ee:	f000 f8c7 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000520 	.word	0x20000520

080015fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	4b55      	ldr	r3, [pc, #340]	; (800176c <MX_GPIO_Init+0x170>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a54      	ldr	r2, [pc, #336]	; (800176c <MX_GPIO_Init+0x170>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b52      	ldr	r3, [pc, #328]	; (800176c <MX_GPIO_Init+0x170>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <MX_GPIO_Init+0x170>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a4d      	ldr	r2, [pc, #308]	; (800176c <MX_GPIO_Init+0x170>)
 8001638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b4b      	ldr	r3, [pc, #300]	; (800176c <MX_GPIO_Init+0x170>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <MX_GPIO_Init+0x170>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a46      	ldr	r2, [pc, #280]	; (800176c <MX_GPIO_Init+0x170>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b44      	ldr	r3, [pc, #272]	; (800176c <MX_GPIO_Init+0x170>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b40      	ldr	r3, [pc, #256]	; (800176c <MX_GPIO_Init+0x170>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a3f      	ldr	r2, [pc, #252]	; (800176c <MX_GPIO_Init+0x170>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <MX_GPIO_Init+0x170>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <MX_GPIO_Init+0x170>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a38      	ldr	r2, [pc, #224]	; (800176c <MX_GPIO_Init+0x170>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <MX_GPIO_Init+0x170>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <MX_GPIO_Init+0x170>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a31      	ldr	r2, [pc, #196]	; (800176c <MX_GPIO_Init+0x170>)
 80016a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <MX_GPIO_Init+0x170>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2108      	movs	r1, #8
 80016be:	482c      	ldr	r0, [pc, #176]	; (8001770 <MX_GPIO_Init+0x174>)
 80016c0:	f001 fd00 	bl	80030c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f244 0181 	movw	r1, #16513	; 0x4081
 80016ca:	482a      	ldr	r0, [pc, #168]	; (8001774 <MX_GPIO_Init+0x178>)
 80016cc:	f001 fcfa 	bl	80030c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	4828      	ldr	r0, [pc, #160]	; (8001778 <MX_GPIO_Init+0x17c>)
 80016d6:	f001 fcf5 	bl	80030c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4822      	ldr	r0, [pc, #136]	; (800177c <MX_GPIO_Init+0x180>)
 80016f2:	f001 fb23 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80016f6:	2308      	movs	r3, #8
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4818      	ldr	r0, [pc, #96]	; (8001770 <MX_GPIO_Init+0x174>)
 800170e:	f001 fb15 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001712:	f244 0381 	movw	r3, #16513	; 0x4081
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	4812      	ldr	r0, [pc, #72]	; (8001774 <MX_GPIO_Init+0x178>)
 800172c:	f001 fb06 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001730:	2340      	movs	r3, #64	; 0x40
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	480c      	ldr	r0, [pc, #48]	; (8001778 <MX_GPIO_Init+0x17c>)
 8001748:	f001 faf8 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_GPIO_Init+0x17c>)
 8001760:	f001 faec 	bl	8002d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001764:	bf00      	nop
 8001766:	3730      	adds	r7, #48	; 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	40020000 	.word	0x40020000
 8001774:	40020400 	.word	0x40020400
 8001778:	40021800 	.word	0x40021800
 800177c:	40020800 	.word	0x40020800

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_MspInit+0x4c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <HAL_MspInit+0x4c>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_MspInit+0x4c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_MspInit+0x4c>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_MspInit+0x4c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_ADC_MspInit+0x3c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10d      	bne.n	800180a <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_ADC_MspInit+0x40>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_ADC_MspInit+0x40>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_ADC_MspInit+0x40>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40012000 	.word	0x40012000
 800181c:	40023800 	.word	0x40023800

08001820 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_DAC_MspInit+0x7c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d127      	bne.n	8001892 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_DAC_MspInit+0x80>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <HAL_DAC_MspInit+0x80>)
 800184c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_DAC_MspInit+0x80>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_DAC_MspInit+0x80>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_DAC_MspInit+0x80>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_DAC_MspInit+0x80>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800187a:	2310      	movs	r3, #16
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_DAC_MspInit+0x84>)
 800188e:	f001 fa55 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40007400 	.word	0x40007400
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000

080018a8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a55      	ldr	r2, [pc, #340]	; (8001a1c <HAL_ETH_MspInit+0x174>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	f040 80a4 	bne.w	8001a14 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 80018d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018da:	6313      	str	r3, [r2, #48]	; 0x30
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	623b      	str	r3, [r7, #32]
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	4a4b      	ldr	r2, [pc, #300]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 80018f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018f6:	6313      	str	r3, [r2, #48]	; 0x30
 80018f8:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	4b45      	ldr	r3, [pc, #276]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	4a44      	ldr	r2, [pc, #272]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 800190e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001912:	6313      	str	r3, [r2, #48]	; 0x30
 8001914:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4a3d      	ldr	r2, [pc, #244]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6313      	str	r3, [r2, #48]	; 0x30
 8001930:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6313      	str	r3, [r2, #48]	; 0x30
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	6313      	str	r3, [r2, #48]	; 0x30
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 800197e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001982:	6313      	str	r3, [r2, #48]	; 0x30
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_ETH_MspInit+0x178>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001990:	2332      	movs	r3, #50	; 0x32
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a0:	230b      	movs	r3, #11
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	481e      	ldr	r0, [pc, #120]	; (8001a24 <HAL_ETH_MspInit+0x17c>)
 80019ac:	f001 f9c6 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019b0:	2386      	movs	r3, #134	; 0x86
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c0:	230b      	movs	r3, #11
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	4817      	ldr	r0, [pc, #92]	; (8001a28 <HAL_ETH_MspInit+0x180>)
 80019cc:	f001 f9b6 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019e2:	230b      	movs	r3, #11
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ea:	4619      	mov	r1, r3
 80019ec:	480f      	ldr	r0, [pc, #60]	; (8001a2c <HAL_ETH_MspInit+0x184>)
 80019ee:	f001 f9a5 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a04:	230b      	movs	r3, #11
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4808      	ldr	r0, [pc, #32]	; (8001a30 <HAL_ETH_MspInit+0x188>)
 8001a10:	f001 f994 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001a14:	bf00      	nop
 8001a16:	3738      	adds	r7, #56	; 0x38
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40028000 	.word	0x40028000
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40021800 	.word	0x40021800

08001a34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	; 0x38
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	2230      	movs	r2, #48	; 0x30
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fc2d 	bl	80062a4 <memset>
  if(hrtc->Instance==RTC)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <HAL_RTC_MspInit+0x4c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d111      	bne.n	8001a78 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a54:	2320      	movs	r3, #32
 8001a56:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 f8fc 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a6e:	f7ff fe87 	bl	8001780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <HAL_RTC_MspInit+0x50>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a78:	bf00      	nop
 8001a7a:	3738      	adds	r7, #56	; 0x38
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40002800 	.word	0x40002800
 8001a84:	42470e3c 	.word	0x42470e3c

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10d      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_TIM_Base_MspInit+0x40>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_TIM_Base_MspInit+0x40>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_TIM_Base_MspInit+0x40>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_UART_MspInit+0x84>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12c      	bne.n	8001b48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_UART_MspInit+0x8c>)
 8001b44:	f001 f8fa 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40004800 	.word	0x40004800
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020c00 	.word	0x40020c00

08001b5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b7c:	d13f      	bne.n	8001bfe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <HAL_PCD_MspInit+0xac>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <HAL_PCD_MspInit+0xac>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <HAL_PCD_MspInit+0xac>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b9a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bac:	230a      	movs	r3, #10
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4815      	ldr	r0, [pc, #84]	; (8001c0c <HAL_PCD_MspInit+0xb0>)
 8001bb8:	f001 f8c0 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480e      	ldr	r0, [pc, #56]	; (8001c0c <HAL_PCD_MspInit+0xb0>)
 8001bd2:	f001 f8b3 	bl	8002d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_PCD_MspInit+0xac>)
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_PCD_MspInit+0xac>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	6353      	str	r3, [r2, #52]	; 0x34
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_PCD_MspInit+0xac>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_PCD_MspInit+0xac>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_PCD_MspInit+0xac>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020000 	.word	0x40020000

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <NMI_Handler+0x4>

08001c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <MemManage_Handler+0x4>

08001c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5c:	f000 f93a 	bl	8001ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_kill>:

int _kill(int pid, int sig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c7e:	f004 fb63 	bl	8006348 <__errno>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2216      	movs	r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
  return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_exit>:

void _exit (int status)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffe7 	bl	8001c74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca6:	e7fe      	b.n	8001ca6 <_exit+0x12>

08001ca8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e00a      	b.n	8001cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cba:	f3af 8000 	nop.w
 8001cbe:	4601      	mov	r1, r0
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	60ba      	str	r2, [r7, #8]
 8001cc6:	b2ca      	uxtb	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbf0      	blt.n	8001cba <_read+0x12>
  }

  return len;
 8001cd8:	687b      	ldr	r3, [r7, #4]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <_isatty>:

int _isatty(int file)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f004 fae4 	bl	8006348 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20030000 	.word	0x20030000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	20000a4c 	.word	0x20000a4c
 8001db4:	20000ba0 	.word	0x20000ba0

08001db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e14 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001de2:	490e      	ldr	r1, [pc, #56]	; (8001e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001df8:	4c0b      	ldr	r4, [pc, #44]	; (8001e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e06:	f7ff ffd7 	bl	8001db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f004 faa3 	bl	8006354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0e:	f7ff f953 	bl	80010b8 <main>
  bx  lr    
 8001e12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e20:	080083ec 	.word	0x080083ec
  ldr r2, =_sbss
 8001e24:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e28:	20000ba0 	.word	0x20000ba0

08001e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_Init+0x40>)
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_Init+0x40>)
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <HAL_Init+0x40>)
 8001e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 fba3 	bl	80025a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f808 	bl	8001e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e64:	f7ff fc92 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023c00 	.word	0x40023c00

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_InitTick+0x54>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x58>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fbad 	bl	80025f2 <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00e      	b.n	8001ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d80a      	bhi.n	8001ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f000 fb83 	bl	80025ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <HAL_InitTick+0x5c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x20>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000a50 	.word	0x20000a50

08001efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_GetTick+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000a50 	.word	0x20000a50

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff ffee 	bl	8001efc <HAL_GetTick>
 8001f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d005      	beq.n	8001f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_Delay+0x44>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3a:	bf00      	nop
 8001f3c:	f7ff ffde 	bl	8001efc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8f7      	bhi.n	8001f3c <HAL_Delay+0x28>
  {
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008

08001f5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e033      	b.n	8001fda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fc2e 	bl	80017dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fa2:	f023 0302 	bic.w	r3, r3, #2
 8001fa6:	f043 0202 	orr.w	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f94a 	bl	8002248 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001fca:	e001      	b.n	8001fd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1c>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e113      	b.n	8002228 <HAL_ADC_ConfigChannel+0x244>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b09      	cmp	r3, #9
 800200e:	d925      	bls.n	800205c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68d9      	ldr	r1, [r3, #12]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	3b1e      	subs	r3, #30
 8002026:	2207      	movs	r2, #7
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43da      	mvns	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	400a      	ands	r2, r1
 8002034:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68d9      	ldr	r1, [r3, #12]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4618      	mov	r0, r3
 8002048:	4603      	mov	r3, r0
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4403      	add	r3, r0
 800204e:	3b1e      	subs	r3, #30
 8002050:	409a      	lsls	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	e022      	b.n	80020a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	2207      	movs	r2, #7
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	400a      	ands	r2, r1
 800207e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	4603      	mov	r3, r0
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4403      	add	r3, r0
 8002098:	409a      	lsls	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d824      	bhi.n	80020f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	3b05      	subs	r3, #5
 80020bc:	221f      	movs	r2, #31
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	400a      	ands	r2, r1
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	4618      	mov	r0, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b05      	subs	r3, #5
 80020e6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
 80020f2:	e04c      	b.n	800218e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d824      	bhi.n	8002146 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	3b23      	subs	r3, #35	; 0x23
 800210e:	221f      	movs	r2, #31
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43da      	mvns	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	400a      	ands	r2, r1
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	4618      	mov	r0, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3b23      	subs	r3, #35	; 0x23
 8002138:	fa00 f203 	lsl.w	r2, r0, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
 8002144:	e023      	b.n	800218e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b41      	subs	r3, #65	; 0x41
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b41      	subs	r3, #65	; 0x41
 8002182:	fa00 f203 	lsl.w	r2, r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_ADC_ConfigChannel+0x250>)
 8002190:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a28      	ldr	r2, [pc, #160]	; (8002238 <HAL_ADC_ConfigChannel+0x254>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d10f      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1d8>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b12      	cmp	r3, #18
 80021a2:	d10b      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_ADC_ConfigChannel+0x254>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d12b      	bne.n	800221e <HAL_ADC_ConfigChannel+0x23a>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <HAL_ADC_ConfigChannel+0x258>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <HAL_ADC_ConfigChannel+0x1f4>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b11      	cmp	r3, #17
 80021d6:	d122      	bne.n	800221e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_ADC_ConfigChannel+0x258>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d111      	bne.n	800221e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_ADC_ConfigChannel+0x25c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_ADC_ConfigChannel+0x260>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	0c9a      	lsrs	r2, r3, #18
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002210:	e002      	b.n	8002218 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3b01      	subs	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f9      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40012300 	.word	0x40012300
 8002238:	40012000 	.word	0x40012000
 800223c:	10000012 	.word	0x10000012
 8002240:	20000000 	.word	0x20000000
 8002244:	431bde83 	.word	0x431bde83

08002248 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002250:	4b79      	ldr	r3, [pc, #484]	; (8002438 <ADC_Init+0x1f0>)
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800227c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	021a      	lsls	r2, r3, #8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	4a58      	ldr	r2, [pc, #352]	; (800243c <ADC_Init+0x1f4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	e00f      	b.n	8002346 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002344:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0202 	bic.w	r2, r2, #2
 8002354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7e1b      	ldrb	r3, [r3, #24]
 8002360:	005a      	lsls	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01b      	beq.n	80023ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002382:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	3b01      	subs	r3, #1
 80023a0:	035a      	lsls	r2, r3, #13
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	e007      	b.n	80023bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	051a      	lsls	r2, r3, #20
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fe:	025a      	lsls	r2, r3, #9
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	029a      	lsls	r2, r3, #10
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40012300 	.word	0x40012300
 800243c:	0f000001 	.word	0x0f000001

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	; (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002570:	d301      	bcc.n	8002576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002572:	2301      	movs	r3, #1
 8002574:	e00f      	b.n	8002596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <SysTick_Config+0x40>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257e:	210f      	movs	r1, #15
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f7ff ff8e 	bl	80024a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <SysTick_Config+0x40>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <SysTick_Config+0x40>)
 8002590:	2207      	movs	r2, #7
 8002592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	e000e010 	.word	0xe000e010

080025a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff47 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025cc:	f7ff ff5c 	bl	8002488 <__NVIC_GetPriorityGrouping>
 80025d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	6978      	ldr	r0, [r7, #20]
 80025d8:	f7ff ff8e 	bl	80024f8 <NVIC_EncodePriority>
 80025dc:	4602      	mov	r2, r0
 80025de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff5d 	bl	80024a4 <__NVIC_SetPriority>
}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffb0 	bl	8002560 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e014      	b.n	8002646 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	791b      	ldrb	r3, [r3, #4]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff f8f7 	bl	8001820 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800264e:	b480      	push	{r7}
 8002650:	b087      	sub	sp, #28
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	795b      	ldrb	r3, [r3, #5]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_DAC_ConfigChannel+0x18>
 8002662:	2302      	movs	r3, #2
 8002664:	e03c      	b.n	80026e0 <HAL_DAC_ConfigChannel+0x92>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2202      	movs	r2, #2
 8002670:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6819      	ldr	r1, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	22c0      	movs	r2, #192	; 0xc0
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43da      	mvns	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06c      	b.n	80027d8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2223      	movs	r2, #35	; 0x23
 800270c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff f8c9 	bl	80018a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_ETH_Init+0xf4>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <HAL_ETH_Init+0xf4>)
 8002720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002724:	6453      	str	r3, [r2, #68]	; 0x44
 8002726:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <HAL_ETH_Init+0xf4>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002732:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <HAL_ETH_Init+0xf8>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <HAL_ETH_Init+0xf8>)
 8002738:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800273c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800273e:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_ETH_Init+0xf8>)
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4927      	ldr	r1, [pc, #156]	; (80027e4 <HAL_ETH_Init+0xf8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800274c:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <HAL_ETH_Init+0xf8>)
 800274e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002766:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002768:	f7ff fbc8 	bl	8001efc <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800276e:	e011      	b.n	8002794 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002770:	f7ff fbc4 	bl	8001efc <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800277e:	d909      	bls.n	8002794 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2204      	movs	r2, #4
 8002784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	22e0      	movs	r2, #224	; 0xe0
 800278c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e021      	b.n	80027d8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e4      	bne.n	8002770 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f958 	bl	8002a5c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f9ff 	bl	8002bb0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fa55 	bl	8002c62 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	461a      	mov	r2, r3
 80027be:	2100      	movs	r1, #0
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f9bd 	bl	8002b40 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2210      	movs	r2, #16
 80027d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40013800 	.word	0x40013800

080027e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4b51      	ldr	r3, [pc, #324]	; (8002944 <ETH_SetMACConfig+0x15c>)
 80027fe:	4013      	ands	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	7c1b      	ldrb	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <ETH_SetMACConfig+0x28>
 800280a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800280e:	e000      	b.n	8002812 <ETH_SetMACConfig+0x2a>
 8002810:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	7c5b      	ldrb	r3, [r3, #17]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <ETH_SetMACConfig+0x38>
 800281a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800281e:	e000      	b.n	8002822 <ETH_SetMACConfig+0x3a>
 8002820:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002822:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002828:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	7fdb      	ldrb	r3, [r3, #31]
 800282e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002830:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	7f92      	ldrb	r2, [r2, #30]
 800283c:	2a00      	cmp	r2, #0
 800283e:	d102      	bne.n	8002846 <ETH_SetMACConfig+0x5e>
 8002840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002844:	e000      	b.n	8002848 <ETH_SetMACConfig+0x60>
 8002846:	2200      	movs	r2, #0
                        macconf->Speed |
 8002848:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	7f1b      	ldrb	r3, [r3, #28]
 800284e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002850:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002856:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	791b      	ldrb	r3, [r3, #4]
 800285c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800285e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002866:	2a00      	cmp	r2, #0
 8002868:	d102      	bne.n	8002870 <ETH_SetMACConfig+0x88>
 800286a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286e:	e000      	b.n	8002872 <ETH_SetMACConfig+0x8a>
 8002870:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002872:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	7bdb      	ldrb	r3, [r3, #15]
 8002878:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800287a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002880:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002888:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800288a:	4313      	orrs	r3, r2
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7ff fb36 	bl	8001f14 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028be:	4013      	ands	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80028ce:	2a00      	cmp	r2, #0
 80028d0:	d101      	bne.n	80028d6 <ETH_SetMACConfig+0xee>
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	e000      	b.n	80028d8 <ETH_SetMACConfig+0xf0>
 80028d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028e6:	2a01      	cmp	r2, #1
 80028e8:	d101      	bne.n	80028ee <ETH_SetMACConfig+0x106>
 80028ea:	2208      	movs	r2, #8
 80028ec:	e000      	b.n	80028f0 <ETH_SetMACConfig+0x108>
 80028ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028f8:	2a01      	cmp	r2, #1
 80028fa:	d101      	bne.n	8002900 <ETH_SetMACConfig+0x118>
 80028fc:	2204      	movs	r2, #4
 80028fe:	e000      	b.n	8002902 <ETH_SetMACConfig+0x11a>
 8002900:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002902:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800290a:	2a01      	cmp	r2, #1
 800290c:	d101      	bne.n	8002912 <ETH_SetMACConfig+0x12a>
 800290e:	2202      	movs	r2, #2
 8002910:	e000      	b.n	8002914 <ETH_SetMACConfig+0x12c>
 8002912:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002914:	4313      	orrs	r3, r2
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800292c:	2001      	movs	r0, #1
 800292e:	f7ff faf1 	bl	8001f14 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	ff20810f 	.word	0xff20810f

08002948 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <ETH_SetDMAConfig+0x110>)
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	7b1b      	ldrb	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <ETH_SetDMAConfig+0x2c>
 800296e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002972:	e000      	b.n	8002976 <ETH_SetDMAConfig+0x2e>
 8002974:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	7b5b      	ldrb	r3, [r3, #13]
 800297a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800297c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	7f52      	ldrb	r2, [r2, #29]
 8002982:	2a00      	cmp	r2, #0
 8002984:	d102      	bne.n	800298c <ETH_SetDMAConfig+0x44>
 8002986:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800298a:	e000      	b.n	800298e <ETH_SetDMAConfig+0x46>
 800298c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800298e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	7b9b      	ldrb	r3, [r3, #14]
 8002994:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002996:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800299c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	7f1b      	ldrb	r3, [r3, #28]
 80029a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	7f9b      	ldrb	r3, [r3, #30]
 80029aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029bc:	4313      	orrs	r3, r2
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029cc:	461a      	mov	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029de:	2001      	movs	r0, #1
 80029e0:	f7ff fa98 	bl	8001f14 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ec:	461a      	mov	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	791b      	ldrb	r3, [r3, #4]
 80029f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a02:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a08:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a10:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a12:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a1a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a20:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a2e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f7ff fa69 	bl	8001f14 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	f8de3f23 	.word	0xf8de3f23

08002a5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0a6      	sub	sp, #152	; 0x98
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a70:	2300      	movs	r3, #0
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002abe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ad0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fe86 	bl	80027e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002afe:	2300      	movs	r3, #0
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b10:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b16:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b2c:	f107 0308 	add.w	r3, r7, #8
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff08 	bl	8002948 <ETH_SetDMAConfig>
}
 8002b38:	bf00      	nop
 8002b3a:	3798      	adds	r7, #152	; 0x98
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3305      	adds	r3, #5
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	3204      	adds	r2, #4
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <ETH_MACAddressConfig+0x68>)
 8002b62:	4413      	add	r3, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3303      	adds	r3, #3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	061a      	lsls	r2, r3, #24
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3302      	adds	r3, #2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	4313      	orrs	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <ETH_MACAddressConfig+0x6c>)
 8002b92:	4413      	add	r3, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	6013      	str	r3, [r2, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40028040 	.word	0x40028040
 8002bac:	40028044 	.word	0x40028044

08002bb0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e03e      	b.n	8002c3c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	3206      	adds	r2, #6
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d80c      	bhi.n	8002c20 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68d9      	ldr	r1, [r3, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	e004      	b.n	8002c2a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d9bd      	bls.n	8002bbe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c54:	611a      	str	r2, [r3, #16]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e046      	b.n	8002cfe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6919      	ldr	r1, [r3, #16]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002cb4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	3212      	adds	r2, #18
 8002cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d80c      	bhi.n	8002cee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6919      	ldr	r1, [r3, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	e004      	b.n	8002cf8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d9b5      	bls.n	8002c70 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2e:	60da      	str	r2, [r3, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e177      	b.n	8003048 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f040 8166 	bne.w	8003042 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d005      	beq.n	8002d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d130      	bne.n	8002df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 0201 	and.w	r2, r3, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d017      	beq.n	8002e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d123      	bne.n	8002e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	08da      	lsrs	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3208      	adds	r2, #8
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80c0 	beq.w	8003042 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b66      	ldr	r3, [pc, #408]	; (8003060 <HAL_GPIO_Init+0x324>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	4a65      	ldr	r2, [pc, #404]	; (8003060 <HAL_GPIO_Init+0x324>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed2:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_GPIO_Init+0x324>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ede:	4a61      	ldr	r2, [pc, #388]	; (8003064 <HAL_GPIO_Init+0x328>)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_GPIO_Init+0x32c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d037      	beq.n	8002f7a <HAL_GPIO_Init+0x23e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a57      	ldr	r2, [pc, #348]	; (800306c <HAL_GPIO_Init+0x330>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d031      	beq.n	8002f76 <HAL_GPIO_Init+0x23a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a56      	ldr	r2, [pc, #344]	; (8003070 <HAL_GPIO_Init+0x334>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02b      	beq.n	8002f72 <HAL_GPIO_Init+0x236>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a55      	ldr	r2, [pc, #340]	; (8003074 <HAL_GPIO_Init+0x338>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d025      	beq.n	8002f6e <HAL_GPIO_Init+0x232>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a54      	ldr	r2, [pc, #336]	; (8003078 <HAL_GPIO_Init+0x33c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01f      	beq.n	8002f6a <HAL_GPIO_Init+0x22e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a53      	ldr	r2, [pc, #332]	; (800307c <HAL_GPIO_Init+0x340>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d019      	beq.n	8002f66 <HAL_GPIO_Init+0x22a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_GPIO_Init+0x344>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0x226>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a51      	ldr	r2, [pc, #324]	; (8003084 <HAL_GPIO_Init+0x348>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_Init+0x222>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a50      	ldr	r2, [pc, #320]	; (8003088 <HAL_GPIO_Init+0x34c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x21e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4f      	ldr	r2, [pc, #316]	; (800308c <HAL_GPIO_Init+0x350>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_Init+0x21a>
 8002f52:	2309      	movs	r3, #9
 8002f54:	e012      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f56:	230a      	movs	r3, #10
 8002f58:	e010      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	e00e      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f5e:	2307      	movs	r3, #7
 8002f60:	e00c      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f62:	2306      	movs	r3, #6
 8002f64:	e00a      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f66:	2305      	movs	r3, #5
 8002f68:	e008      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e004      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f002 0203 	and.w	r2, r2, #3
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	4093      	lsls	r3, r2
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f8c:	4935      	ldr	r1, [pc, #212]	; (8003064 <HAL_GPIO_Init+0x328>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fbe:	4a34      	ldr	r2, [pc, #208]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc4:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe8:	4a29      	ldr	r2, [pc, #164]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fee:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_GPIO_Init+0x354>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003012:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_GPIO_Init+0x354>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_GPIO_Init+0x354>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303c:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_GPIO_Init+0x354>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	f67f ae84 	bls.w	8002d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40013800 	.word	0x40013800
 8003068:	40020000 	.word	0x40020000
 800306c:	40020400 	.word	0x40020400
 8003070:	40020800 	.word	0x40020800
 8003074:	40020c00 	.word	0x40020c00
 8003078:	40021000 	.word	0x40021000
 800307c:	40021400 	.word	0x40021400
 8003080:	40021800 	.word	0x40021800
 8003084:	40021c00 	.word	0x40021c00
 8003088:	40022000 	.word	0x40022000
 800308c:	40022400 	.word	0x40022400
 8003090:	40013c00 	.word	0x40013c00

08003094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e001      	b.n	80030b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030b2:	2300      	movs	r3, #0
 80030b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	807b      	strh	r3, [r7, #2]
 80030d0:	4613      	mov	r3, r2
 80030d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d4:	787b      	ldrb	r3, [r7, #1]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030e0:	e003      	b.n	80030ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030e2:	887b      	ldrh	r3, [r7, #2]
 80030e4:	041a      	lsls	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	619a      	str	r2, [r3, #24]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f8:	b08f      	sub	sp, #60	; 0x3c
 80030fa:	af0a      	add	r7, sp, #40	; 0x28
 80030fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e10f      	b.n	8003328 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe fd1a 	bl	8001b5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f001 ff9d 	bl	8005086 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	687e      	ldr	r6, [r7, #4]
 8003154:	466d      	mov	r5, sp
 8003156:	f106 0410 	add.w	r4, r6, #16
 800315a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003162:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003166:	e885 0003 	stmia.w	r5, {r0, r1}
 800316a:	1d33      	adds	r3, r6, #4
 800316c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800316e:	6838      	ldr	r0, [r7, #0]
 8003170:	f001 ff28 	bl	8004fc4 <USB_CoreInit>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0d0      	b.n	8003328 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f001 ff8b 	bl	80050a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	e04a      	b.n	800322e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	333d      	adds	r3, #61	; 0x3d
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	333c      	adds	r3, #60	; 0x3c
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	b298      	uxth	r0, r3
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3344      	adds	r3, #68	; 0x44
 80031d4:	4602      	mov	r2, r0
 80031d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3340      	adds	r3, #64	; 0x40
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3348      	adds	r3, #72	; 0x48
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334c      	adds	r3, #76	; 0x4c
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3354      	adds	r3, #84	; 0x54
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	3301      	adds	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d3af      	bcc.n	8003198 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	e044      	b.n	80032c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	3301      	adds	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d3b5      	bcc.n	800323e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	687e      	ldr	r6, [r7, #4]
 80032da:	466d      	mov	r5, sp
 80032dc:	f106 0410 	add.w	r4, r6, #16
 80032e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80032f0:	1d33      	adds	r3, r6, #4
 80032f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f4:	6838      	ldr	r0, [r7, #0]
 80032f6:	f001 ff23 	bl	8005140 <USB_DevInit>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e00d      	b.n	8003328 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f002 f8ee 	bl	8005502 <USB_DevDisconnect>

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e267      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d075      	beq.n	800343a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334e:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b04      	cmp	r3, #4
 8003358:	d00c      	beq.n	8003374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335a:	4b85      	ldr	r3, [pc, #532]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003362:	2b08      	cmp	r3, #8
 8003364:	d112      	bne.n	800338c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003366:	4b82      	ldr	r3, [pc, #520]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003372:	d10b      	bne.n	800338c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003374:	4b7e      	ldr	r3, [pc, #504]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d05b      	beq.n	8003438 <HAL_RCC_OscConfig+0x108>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d157      	bne.n	8003438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e242      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d106      	bne.n	80033a4 <HAL_RCC_OscConfig+0x74>
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a75      	ldr	r2, [pc, #468]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e01d      	b.n	80033e0 <HAL_RCC_OscConfig+0xb0>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x98>
 80033ae:	4b70      	ldr	r3, [pc, #448]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6f      	ldr	r2, [pc, #444]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6c      	ldr	r2, [pc, #432]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0xb0>
 80033c8:	4b69      	ldr	r3, [pc, #420]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a68      	ldr	r2, [pc, #416]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80033ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a65      	ldr	r2, [pc, #404]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80033da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe fd88 	bl	8001efc <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe fd84 	bl	8001efc <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e207      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0xc0>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fd74 	bl	8001efc <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe fd70 	bl	8001efc <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1f3      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0xe8>
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d063      	beq.n	800350e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003446:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345a:	2b08      	cmp	r3, #8
 800345c:	d11c      	bne.n	8003498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345e:	4b44      	ldr	r3, [pc, #272]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d116      	bne.n	8003498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_RCC_OscConfig+0x152>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e1c7      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4937      	ldr	r1, [pc, #220]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	e03a      	b.n	800350e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d020      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a0:	4b34      	ldr	r3, [pc, #208]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fe fd29 	bl	8001efc <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fe fd25 	bl	8001efc <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e1a8      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034cc:	4b28      	ldr	r3, [pc, #160]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4925      	ldr	r1, [pc, #148]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]
 80034e0:	e015      	b.n	800350e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e2:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fd08 	bl	8001efc <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f0:	f7fe fd04 	bl	8001efc <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e187      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d036      	beq.n	8003588 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <HAL_RCC_OscConfig+0x248>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe fce8 	bl	8001efc <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003530:	f7fe fce4 	bl	8001efc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e167      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x240>)
 8003544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x200>
 800354e:	e01b      	b.n	8003588 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_OscConfig+0x248>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003556:	f7fe fcd1 	bl	8001efc <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	e00e      	b.n	800357c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800355e:	f7fe fccd 	bl	8001efc <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d907      	bls.n	800357c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e150      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
 8003570:	40023800 	.word	0x40023800
 8003574:	42470000 	.word	0x42470000
 8003578:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 800357e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ea      	bne.n	800355e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8097 	beq.w	80036c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003596:	2300      	movs	r3, #0
 8003598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359a:	4b81      	ldr	r3, [pc, #516]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	4b7d      	ldr	r3, [pc, #500]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	4a7c      	ldr	r2, [pc, #496]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 80035b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b4:	6413      	str	r3, [r2, #64]	; 0x40
 80035b6:	4b7a      	ldr	r3, [pc, #488]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c6:	4b77      	ldr	r3, [pc, #476]	; (80037a4 <HAL_RCC_OscConfig+0x474>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d118      	bne.n	8003604 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d2:	4b74      	ldr	r3, [pc, #464]	; (80037a4 <HAL_RCC_OscConfig+0x474>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a73      	ldr	r2, [pc, #460]	; (80037a4 <HAL_RCC_OscConfig+0x474>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035de:	f7fe fc8d 	bl	8001efc <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7fe fc89 	bl	8001efc <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e10c      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <HAL_RCC_OscConfig+0x474>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x2ea>
 800360c:	4b64      	ldr	r3, [pc, #400]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a63      	ldr	r2, [pc, #396]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	e01c      	b.n	8003654 <HAL_RCC_OscConfig+0x324>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b05      	cmp	r3, #5
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x30c>
 8003622:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a5e      	ldr	r2, [pc, #376]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 0304 	orr.w	r3, r3, #4
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
 800362e:	4b5c      	ldr	r3, [pc, #368]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a5b      	ldr	r2, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	e00b      	b.n	8003654 <HAL_RCC_OscConfig+0x324>
 800363c:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a57      	ldr	r2, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 8003642:	f023 0301 	bic.w	r3, r3, #1
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
 8003648:	4b55      	ldr	r3, [pc, #340]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a54      	ldr	r2, [pc, #336]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 800364e:	f023 0304 	bic.w	r3, r3, #4
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d015      	beq.n	8003688 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fe fc4e 	bl	8001efc <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003662:	e00a      	b.n	800367a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003664:	f7fe fc4a 	bl	8001efc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e0cb      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0ee      	beq.n	8003664 <HAL_RCC_OscConfig+0x334>
 8003686:	e014      	b.n	80036b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003688:	f7fe fc38 	bl	8001efc <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fe fc34 	bl	8001efc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e0b5      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a6:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1ee      	bne.n	8003690 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d105      	bne.n	80036c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	4a38      	ldr	r2, [pc, #224]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 80036be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80a1 	beq.w	8003810 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ce:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d05c      	beq.n	8003794 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d141      	bne.n	8003766 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCC_OscConfig+0x478>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fe fc08 	bl	8001efc <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe fc04 	bl	8001efc <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e087      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69da      	ldr	r2, [r3, #28]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	019b      	lsls	r3, r3, #6
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	3b01      	subs	r3, #1
 8003728:	041b      	lsls	r3, r3, #16
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	491b      	ldr	r1, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x478>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fe fbdd 	bl	8001efc <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003746:	f7fe fbd9 	bl	8001efc <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e05c      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x416>
 8003764:	e054      	b.n	8003810 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_OscConfig+0x478>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fe fbc6 	bl	8001efc <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe fbc2 	bl	8001efc <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e045      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_OscConfig+0x470>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x444>
 8003792:	e03d      	b.n	8003810 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d107      	bne.n	80037ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e038      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40007000 	.word	0x40007000
 80037a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ac:	4b1b      	ldr	r3, [pc, #108]	; (800381c <HAL_RCC_OscConfig+0x4ec>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d028      	beq.n	800380c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d121      	bne.n	800380c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d11a      	bne.n	800380c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d111      	bne.n	800380c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	3b01      	subs	r3, #1
 80037f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d107      	bne.n	800380c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800

08003820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0cc      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b68      	ldr	r3, [pc, #416]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d90c      	bls.n	800385c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0b8      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d020      	beq.n	80038aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003874:	4b59      	ldr	r3, [pc, #356]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a58      	ldr	r2, [pc, #352]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800387e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800388c:	4b53      	ldr	r3, [pc, #332]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a52      	ldr	r2, [pc, #328]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003898:	4b50      	ldr	r3, [pc, #320]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	494d      	ldr	r1, [pc, #308]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d044      	beq.n	8003940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d119      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e07f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d003      	beq.n	80038de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e06f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	4b3b      	ldr	r3, [pc, #236]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e067      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b37      	ldr	r3, [pc, #220]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4934      	ldr	r1, [pc, #208]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003910:	f7fe faf4 	bl	8001efc <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fe faf0 	bl	8001efc <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e04f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003940:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d20c      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e032      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4916      	ldr	r1, [pc, #88]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	490e      	ldr	r1, [pc, #56]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039a6:	f000 f821 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 80039aa:	4602      	mov	r2, r0
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	490a      	ldr	r1, [pc, #40]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	5ccb      	ldrb	r3, [r1, r3]
 80039ba:	fa22 f303 	lsr.w	r3, r2, r3
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fa54 	bl	8001e74 <HAL_InitTick>

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023c00 	.word	0x40023c00
 80039dc:	40023800 	.word	0x40023800
 80039e0:	08008054 	.word	0x08008054
 80039e4:	20000000 	.word	0x20000000
 80039e8:	20000004 	.word	0x20000004

080039ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f0:	b094      	sub	sp, #80	; 0x50
 80039f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	647b      	str	r3, [r7, #68]	; 0x44
 80039f8:	2300      	movs	r3, #0
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039fc:	2300      	movs	r3, #0
 80039fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a04:	4b79      	ldr	r3, [pc, #484]	; (8003bec <HAL_RCC_GetSysClockFreq+0x200>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 030c 	and.w	r3, r3, #12
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d00d      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x40>
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	f200 80e1 	bhi.w	8003bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x34>
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a1e:	e0db      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a24:	e0db      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a26:	4b73      	ldr	r3, [pc, #460]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a2a:	e0d8      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a2c:	4b6f      	ldr	r3, [pc, #444]	; (8003bec <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a36:	4b6d      	ldr	r3, [pc, #436]	; (8003bec <HAL_RCC_GetSysClockFreq+0x200>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d063      	beq.n	8003b0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a42:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <HAL_RCC_GetSysClockFreq+0x200>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	2200      	movs	r2, #0
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a54:	633b      	str	r3, [r7, #48]	; 0x30
 8003a56:	2300      	movs	r3, #0
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a5e:	4622      	mov	r2, r4
 8003a60:	462b      	mov	r3, r5
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	0159      	lsls	r1, r3, #5
 8003a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a70:	0150      	lsls	r0, r2, #5
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4621      	mov	r1, r4
 8003a78:	1a51      	subs	r1, r2, r1
 8003a7a:	6139      	str	r1, [r7, #16]
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a90:	4659      	mov	r1, fp
 8003a92:	018b      	lsls	r3, r1, #6
 8003a94:	4651      	mov	r1, sl
 8003a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	018a      	lsls	r2, r1, #6
 8003a9e:	4651      	mov	r1, sl
 8003aa0:	ebb2 0801 	subs.w	r8, r2, r1
 8003aa4:	4659      	mov	r1, fp
 8003aa6:	eb63 0901 	sbc.w	r9, r3, r1
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003abe:	4690      	mov	r8, r2
 8003ac0:	4699      	mov	r9, r3
 8003ac2:	4623      	mov	r3, r4
 8003ac4:	eb18 0303 	adds.w	r3, r8, r3
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	462b      	mov	r3, r5
 8003acc:	eb49 0303 	adc.w	r3, r9, r3
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ade:	4629      	mov	r1, r5
 8003ae0:	024b      	lsls	r3, r1, #9
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ae8:	4621      	mov	r1, r4
 8003aea:	024a      	lsls	r2, r1, #9
 8003aec:	4610      	mov	r0, r2
 8003aee:	4619      	mov	r1, r3
 8003af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af2:	2200      	movs	r2, #0
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003afc:	f7fd f864 	bl	8000bc8 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4613      	mov	r3, r2
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b08:	e058      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0a:	4b38      	ldr	r3, [pc, #224]	; (8003bec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	099b      	lsrs	r3, r3, #6
 8003b10:	2200      	movs	r2, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	4611      	mov	r1, r2
 8003b16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b24:	4642      	mov	r2, r8
 8003b26:	464b      	mov	r3, r9
 8003b28:	f04f 0000 	mov.w	r0, #0
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	0159      	lsls	r1, r3, #5
 8003b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b36:	0150      	lsls	r0, r2, #5
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b42:	4649      	mov	r1, r9
 8003b44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b60:	eb63 050b 	sbc.w	r5, r3, fp
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	00eb      	lsls	r3, r5, #3
 8003b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b72:	00e2      	lsls	r2, r4, #3
 8003b74:	4614      	mov	r4, r2
 8003b76:	461d      	mov	r5, r3
 8003b78:	4643      	mov	r3, r8
 8003b7a:	18e3      	adds	r3, r4, r3
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	464b      	mov	r3, r9
 8003b80:	eb45 0303 	adc.w	r3, r5, r3
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b92:	4629      	mov	r1, r5
 8003b94:	028b      	lsls	r3, r1, #10
 8003b96:	4621      	mov	r1, r4
 8003b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	028a      	lsls	r2, r1, #10
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	61fa      	str	r2, [r7, #28]
 8003bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb0:	f7fd f80a 	bl	8000bc8 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4613      	mov	r3, r2
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_GetSysClockFreq+0x200>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3750      	adds	r7, #80	; 0x50
 8003be4:	46bd      	mov	sp, r7
 8003be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bea:	bf00      	nop
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	00f42400 	.word	0x00f42400
 8003bf4:	007a1200 	.word	0x007a1200

08003bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000000 	.word	0x20000000

08003c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c14:	f7ff fff0 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0a9b      	lsrs	r3, r3, #10
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08008064 	.word	0x08008064

08003c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c3c:	f7ff ffdc 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0b5b      	lsrs	r3, r3, #13
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4903      	ldr	r1, [pc, #12]	; (8003c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	08008064 	.word	0x08008064

08003c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d075      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c94:	4b91      	ldr	r3, [pc, #580]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9a:	f7fe f92f 	bl	8001efc <HAL_GetTick>
 8003c9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ca2:	f7fe f92b 	bl	8001efc <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e189      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb4:	4b8a      	ldr	r3, [pc, #552]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d009      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	019a      	lsls	r2, r3, #6
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	071b      	lsls	r3, r3, #28
 8003cd8:	4981      	ldr	r1, [pc, #516]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01f      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cec:	4b7c      	ldr	r3, [pc, #496]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf2:	0f1b      	lsrs	r3, r3, #28
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	019a      	lsls	r2, r3, #6
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	431a      	orrs	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	071b      	lsls	r3, r3, #28
 8003d0c:	4974      	ldr	r1, [pc, #464]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d14:	4b72      	ldr	r3, [pc, #456]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1a:	f023 021f 	bic.w	r2, r3, #31
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	496e      	ldr	r1, [pc, #440]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	019a      	lsls	r2, r3, #6
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	061b      	lsls	r3, r3, #24
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	071b      	lsls	r3, r3, #28
 8003d4c:	4964      	ldr	r1, [pc, #400]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d54:	4b61      	ldr	r3, [pc, #388]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5a:	f7fe f8cf 	bl	8001efc <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d62:	f7fe f8cb 	bl	8001efc <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e129      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d74:	4b5a      	ldr	r3, [pc, #360]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d079      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d98:	4b52      	ldr	r3, [pc, #328]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d9e:	f7fe f8ad 	bl	8001efc <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003da6:	f7fe f8a9 	bl	8001efc <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e107      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db8:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc4:	d0ef      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d020      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dd2:	4b43      	ldr	r3, [pc, #268]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	0f1b      	lsrs	r3, r3, #28
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	019a      	lsls	r2, r3, #6
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	431a      	orrs	r2, r3
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	071b      	lsls	r3, r3, #28
 8003df2:	493b      	ldr	r1, [pc, #236]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dfa:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	4934      	ldr	r1, [pc, #208]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e20:	4b2f      	ldr	r3, [pc, #188]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	0e1b      	lsrs	r3, r3, #24
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	019a      	lsls	r2, r3, #6
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	071b      	lsls	r3, r3, #28
 8003e40:	4927      	ldr	r1, [pc, #156]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	4922      	ldr	r1, [pc, #136]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e64:	f7fe f84a 	bl	8001efc <HAL_GetTick>
 8003e68:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e6c:	f7fe f846 	bl	8001efc <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e0a4      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e7e:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8a:	d1ef      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 808b 	beq.w	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	4a0f      	ldr	r2, [pc, #60]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ec2:	f7fe f81b 	bl	8001efc <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ec8:	e010      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eca:	f7fe f817 	bl	8001efc <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d909      	bls.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e075      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003edc:	42470068 	.word	0x42470068
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	42470070 	.word	0x42470070
 8003ee8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003eec:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0e8      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ef8:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f00:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d02f      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d028      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f16:	4b2f      	ldr	r3, [pc, #188]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f20:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f26:	4b2c      	ldr	r3, [pc, #176]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f2c:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f32:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d114      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f3e:	f7fd ffdd 	bl	8001efc <HAL_GetTick>
 8003f42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fd ffd9 	bl	8001efc <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e035      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ee      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f74:	d10d      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8a:	4912      	ldr	r1, [pc, #72]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]
 8003f90:	e005      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f9c:	6093      	str	r3, [r2, #8]
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003faa:	490a      	ldr	r1, [pc, #40]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d004      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003fc4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40007000 	.word	0x40007000
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	42470e40 	.word	0x42470e40
 8003fdc:	424711e0 	.word	0x424711e0

08003fe0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e066      	b.n	80040c4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7f5b      	ldrb	r3, [r3, #29]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd fd14 	bl	8001a34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	22ca      	movs	r2, #202	; 0xca
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2253      	movs	r2, #83	; 0x53
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f87a 	bl	800411c <RTC_EnterInitMode>
 8004028:	4603      	mov	r3, r0
 800402a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d12c      	bne.n	800408c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004044:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6899      	ldr	r1, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68d2      	ldr	r2, [r2, #12]
 800406c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6919      	ldr	r1, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	041a      	lsls	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f881 	bl	800418a <RTC_ExitInitMode>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d113      	bne.n	80040ba <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	22ff      	movs	r2, #255	; 0xff
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e8:	f7fd ff08 	bl	8001efc <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040ee:	e009      	b.n	8004104 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040f0:	f7fd ff04 	bl	8001efc <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040fe:	d901      	bls.n	8004104 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e007      	b.n	8004114 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0ee      	beq.n	80040f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d122      	bne.n	8004180 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004148:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800414a:	f7fd fed7 	bl	8001efc <HAL_GetTick>
 800414e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004150:	e00c      	b.n	800416c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004152:	f7fd fed3 	bl	8001efc <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004160:	d904      	bls.n	800416c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2204      	movs	r2, #4
 8004166:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <RTC_EnterInitMode+0x64>
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d1e8      	bne.n	8004152 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004180:	7bfb      	ldrb	r3, [r7, #15]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ff89 	bl	80040cc <HAL_RTC_WaitForSynchro>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2204      	movs	r2, #4
 80041c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e041      	b.n	800426a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fc44 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 f95e 	bl	80044d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e046      	b.n	800431a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a23      	ldr	r2, [pc, #140]	; (8004328 <HAL_TIM_Base_Start+0xb4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <HAL_TIM_Base_Start+0x70>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a6:	d01d      	beq.n	80042e4 <HAL_TIM_Base_Start+0x70>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_TIM_Base_Start+0xb8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <HAL_TIM_Base_Start+0x70>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <HAL_TIM_Base_Start+0xbc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_TIM_Base_Start+0x70>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_TIM_Base_Start+0xc0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_TIM_Base_Start+0x70>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_TIM_Base_Start+0xc4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_TIM_Base_Start+0x70>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <HAL_TIM_Base_Start+0xc8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIM_Base_Start+0x70>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a18      	ldr	r2, [pc, #96]	; (8004340 <HAL_TIM_Base_Start+0xcc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d111      	bne.n	8004308 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b06      	cmp	r3, #6
 80042f4:	d010      	beq.n	8004318 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004306:	e007      	b.n	8004318 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800
 8004334:	40000c00 	.word	0x40000c00
 8004338:	40010400 	.word	0x40010400
 800433c:	40014000 	.word	0x40014000
 8004340:	40001800 	.word	0x40001800

08004344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIM_ConfigClockSource+0x1c>
 800435c:	2302      	movs	r3, #2
 800435e:	e0b4      	b.n	80044ca <HAL_TIM_ConfigClockSource+0x186>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800437e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004398:	d03e      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0xd4>
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439e:	f200 8087 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a6:	f000 8086 	beq.w	80044b6 <HAL_TIM_ConfigClockSource+0x172>
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ae:	d87f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b70      	cmp	r3, #112	; 0x70
 80043b2:	d01a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xa6>
 80043b4:	2b70      	cmp	r3, #112	; 0x70
 80043b6:	d87b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b60      	cmp	r3, #96	; 0x60
 80043ba:	d050      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x11a>
 80043bc:	2b60      	cmp	r3, #96	; 0x60
 80043be:	d877      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b50      	cmp	r3, #80	; 0x50
 80043c2:	d03c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0xfa>
 80043c4:	2b50      	cmp	r3, #80	; 0x50
 80043c6:	d873      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d058      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x13a>
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d86f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d064      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043d4:	2b30      	cmp	r3, #48	; 0x30
 80043d6:	d86b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d060      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d867      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05c      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d05a      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043e8:	e062      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f000 f985 	bl	8004708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800440c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	609a      	str	r2, [r3, #8]
      break;
 8004416:	e04f      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f000 f96e 	bl	8004708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800443a:	609a      	str	r2, [r3, #8]
      break;
 800443c:	e03c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6859      	ldr	r1, [r3, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	461a      	mov	r2, r3
 800444c:	f000 f8e2 	bl	8004614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2150      	movs	r1, #80	; 0x50
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f93b 	bl	80046d2 <TIM_ITRx_SetConfig>
      break;
 800445c:	e02c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	461a      	mov	r2, r3
 800446c:	f000 f901 	bl	8004672 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2160      	movs	r1, #96	; 0x60
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f92b 	bl	80046d2 <TIM_ITRx_SetConfig>
      break;
 800447c:	e01c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	f000 f8c2 	bl	8004614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2140      	movs	r1, #64	; 0x40
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f91b 	bl	80046d2 <TIM_ITRx_SetConfig>
      break;
 800449c:	e00c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f000 f912 	bl	80046d2 <TIM_ITRx_SetConfig>
      break;
 80044ae:	e003      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      break;
 80044b4:	e000      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a40      	ldr	r2, [pc, #256]	; (80045e8 <TIM_Base_SetConfig+0x114>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d013      	beq.n	8004514 <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f2:	d00f      	beq.n	8004514 <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3d      	ldr	r2, [pc, #244]	; (80045ec <TIM_Base_SetConfig+0x118>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00b      	beq.n	8004514 <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3c      	ldr	r2, [pc, #240]	; (80045f0 <TIM_Base_SetConfig+0x11c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d007      	beq.n	8004514 <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3b      	ldr	r2, [pc, #236]	; (80045f4 <TIM_Base_SetConfig+0x120>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_Base_SetConfig+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a3a      	ldr	r2, [pc, #232]	; (80045f8 <TIM_Base_SetConfig+0x124>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d108      	bne.n	8004526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2f      	ldr	r2, [pc, #188]	; (80045e8 <TIM_Base_SetConfig+0x114>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d02b      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004534:	d027      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <TIM_Base_SetConfig+0x118>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d023      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2b      	ldr	r2, [pc, #172]	; (80045f0 <TIM_Base_SetConfig+0x11c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01f      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <TIM_Base_SetConfig+0x120>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01b      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a29      	ldr	r2, [pc, #164]	; (80045f8 <TIM_Base_SetConfig+0x124>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d017      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a28      	ldr	r2, [pc, #160]	; (80045fc <TIM_Base_SetConfig+0x128>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <TIM_Base_SetConfig+0x12c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00f      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a26      	ldr	r2, [pc, #152]	; (8004604 <TIM_Base_SetConfig+0x130>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00b      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a25      	ldr	r2, [pc, #148]	; (8004608 <TIM_Base_SetConfig+0x134>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d007      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a24      	ldr	r2, [pc, #144]	; (800460c <TIM_Base_SetConfig+0x138>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a23      	ldr	r2, [pc, #140]	; (8004610 <TIM_Base_SetConfig+0x13c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d108      	bne.n	8004598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <TIM_Base_SetConfig+0x114>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_Base_SetConfig+0xf8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a0c      	ldr	r2, [pc, #48]	; (80045f8 <TIM_Base_SetConfig+0x124>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d103      	bne.n	80045d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	615a      	str	r2, [r3, #20]
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40010400 	.word	0x40010400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400
 8004604:	40014800 	.word	0x40014800
 8004608:	40001800 	.word	0x40001800
 800460c:	40001c00 	.word	0x40001c00
 8004610:	40002000 	.word	0x40002000

08004614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0201 	bic.w	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 030a 	bic.w	r3, r3, #10
 8004650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004672:	b480      	push	{r7}
 8004674:	b087      	sub	sp, #28
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f023 0210 	bic.w	r2, r3, #16
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800469c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	031b      	lsls	r3, r3, #12
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f043 0307 	orr.w	r3, r3, #7
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	609a      	str	r2, [r3, #8]
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	021a      	lsls	r2, r3, #8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	431a      	orrs	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4313      	orrs	r3, r2
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	609a      	str	r2, [r3, #8]
}
 800473c:	bf00      	nop
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800475c:	2302      	movs	r3, #2
 800475e:	e05a      	b.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a21      	ldr	r2, [pc, #132]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d022      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ac:	d01d      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d018      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1a      	ldr	r2, [pc, #104]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a18      	ldr	r2, [pc, #96]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a17      	ldr	r2, [pc, #92]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a15      	ldr	r2, [pc, #84]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10c      	bne.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40010400 	.word	0x40010400
 8004838:	40014000 	.word	0x40014000
 800483c:	40001800 	.word	0x40001800

08004840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e03f      	b.n	80048d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd f930 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f929 	bl	8004adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b08a      	sub	sp, #40	; 0x28
 80048de:	af02      	add	r7, sp, #8
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d17c      	bne.n	80049f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_UART_Transmit+0x2c>
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e075      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_UART_Transmit+0x3e>
 8004914:	2302      	movs	r3, #2
 8004916:	e06e      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2221      	movs	r2, #33	; 0x21
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492e:	f7fd fae5 	bl	8001efc <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004948:	d108      	bne.n	800495c <HAL_UART_Transmit+0x82>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	e003      	b.n	8004964 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004960:	2300      	movs	r3, #0
 8004962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800496c:	e02a      	b.n	80049c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	2180      	movs	r1, #128	; 0x80
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f840 	bl	80049fe <UART_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e036      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	3302      	adds	r3, #2
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	e007      	b.n	80049b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1cf      	bne.n	800496e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2140      	movs	r1, #64	; 0x40
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f810 	bl	80049fe <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e006      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b090      	sub	sp, #64	; 0x40
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0e:	e050      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d04c      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a1e:	f7fd fa6d 	bl	8001efc <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d241      	bcs.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a4e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	613b      	str	r3, [r7, #16]
   return(result);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a82:	623a      	str	r2, [r7, #32]
 8004a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	69f9      	ldr	r1, [r7, #28]
 8004a88:	6a3a      	ldr	r2, [r7, #32]
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e5      	bne.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e00f      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d09f      	beq.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3740      	adds	r7, #64	; 0x40
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae0:	b0c0      	sub	sp, #256	; 0x100
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	ea40 0301 	orr.w	r3, r0, r1
 8004b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b34:	f021 010c 	bic.w	r1, r1, #12
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b42:	430b      	orrs	r3, r1
 8004b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	6999      	ldr	r1, [r3, #24]
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	ea40 0301 	orr.w	r3, r0, r1
 8004b62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b8f      	ldr	r3, [pc, #572]	; (8004da8 <UART_SetConfig+0x2cc>)
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d005      	beq.n	8004b7c <UART_SetConfig+0xa0>
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b8d      	ldr	r3, [pc, #564]	; (8004dac <UART_SetConfig+0x2d0>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d104      	bne.n	8004b86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b7c:	f7ff f85c 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
 8004b80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b84:	e003      	b.n	8004b8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7ff f843 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 8004b8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	f040 810c 	bne.w	8004db4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004baa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	1891      	adds	r1, r2, r2
 8004bb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb6:	415b      	adcs	r3, r3
 8004bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	eb12 0801 	adds.w	r8, r2, r1
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	eb43 0901 	adc.w	r9, r3, r1
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bde:	4690      	mov	r8, r2
 8004be0:	4699      	mov	r9, r3
 8004be2:	4623      	mov	r3, r4
 8004be4:	eb18 0303 	adds.w	r3, r8, r3
 8004be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bec:	462b      	mov	r3, r5
 8004bee:	eb49 0303 	adc.w	r3, r9, r3
 8004bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	18db      	adds	r3, r3, r3
 8004c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c10:	4613      	mov	r3, r2
 8004c12:	eb42 0303 	adc.w	r3, r2, r3
 8004c16:	657b      	str	r3, [r7, #84]	; 0x54
 8004c18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c20:	f7fb ffd2 	bl	8000bc8 <__aeabi_uldivmod>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	011c      	lsls	r4, r3, #4
 8004c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c44:	4642      	mov	r2, r8
 8004c46:	464b      	mov	r3, r9
 8004c48:	1891      	adds	r1, r2, r2
 8004c4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c4c:	415b      	adcs	r3, r3
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c54:	4641      	mov	r1, r8
 8004c56:	eb12 0a01 	adds.w	sl, r2, r1
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c74:	4692      	mov	sl, r2
 8004c76:	469b      	mov	fp, r3
 8004c78:	4643      	mov	r3, r8
 8004c7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c82:	464b      	mov	r3, r9
 8004c84:	eb4b 0303 	adc.w	r3, fp, r3
 8004c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	18db      	adds	r3, r3, r3
 8004ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	eb42 0303 	adc.w	r3, r2, r3
 8004cac:	647b      	str	r3, [r7, #68]	; 0x44
 8004cae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cb6:	f7fb ff87 	bl	8000bc8 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	2264      	movs	r2, #100	; 0x64
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	1acb      	subs	r3, r1, r3
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce4:	441c      	add	r4, r3
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d00:	415b      	adcs	r3, r3
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d08:	4641      	mov	r1, r8
 8004d0a:	1851      	adds	r1, r2, r1
 8004d0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d0e:	4649      	mov	r1, r9
 8004d10:	414b      	adcs	r3, r1
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d20:	4659      	mov	r1, fp
 8004d22:	00cb      	lsls	r3, r1, #3
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	00ca      	lsls	r2, r1, #3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	4642      	mov	r2, r8
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	460a      	mov	r2, r1
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	18db      	adds	r3, r3, r3
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d62:	4613      	mov	r3, r2
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d72:	f7fb ff29 	bl	8000bc8 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 0207 	and.w	r2, r3, #7
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4422      	add	r2, r4
 8004da2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da4:	e106      	b.n	8004fb4 <UART_SetConfig+0x4d8>
 8004da6:	bf00      	nop
 8004da8:	40011000 	.word	0x40011000
 8004dac:	40011400 	.word	0x40011400
 8004db0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	464b      	mov	r3, r9
 8004dca:	1891      	adds	r1, r2, r2
 8004dcc:	6239      	str	r1, [r7, #32]
 8004dce:	415b      	adcs	r3, r3
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	1854      	adds	r4, r2, r1
 8004dda:	4649      	mov	r1, r9
 8004ddc:	eb43 0501 	adc.w	r5, r3, r1
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	00eb      	lsls	r3, r5, #3
 8004dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dee:	00e2      	lsls	r2, r4, #3
 8004df0:	4614      	mov	r4, r2
 8004df2:	461d      	mov	r5, r3
 8004df4:	4643      	mov	r3, r8
 8004df6:	18e3      	adds	r3, r4, r3
 8004df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	eb45 0303 	adc.w	r3, r5, r3
 8004e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e22:	4629      	mov	r1, r5
 8004e24:	008b      	lsls	r3, r1, #2
 8004e26:	4621      	mov	r1, r4
 8004e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	008a      	lsls	r2, r1, #2
 8004e30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e34:	f7fb fec8 	bl	8000bc8 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4b60      	ldr	r3, [pc, #384]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	011c      	lsls	r4, r3, #4
 8004e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	1891      	adds	r1, r2, r2
 8004e5e:	61b9      	str	r1, [r7, #24]
 8004e60:	415b      	adcs	r3, r3
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e68:	4641      	mov	r1, r8
 8004e6a:	1851      	adds	r1, r2, r1
 8004e6c:	6139      	str	r1, [r7, #16]
 8004e6e:	4649      	mov	r1, r9
 8004e70:	414b      	adcs	r3, r1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e80:	4659      	mov	r1, fp
 8004e82:	00cb      	lsls	r3, r1, #3
 8004e84:	4651      	mov	r1, sl
 8004e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	00ca      	lsls	r2, r1, #3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	4642      	mov	r2, r8
 8004e96:	189b      	adds	r3, r3, r2
 8004e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	460a      	mov	r2, r1
 8004ea0:	eb42 0303 	adc.w	r3, r2, r3
 8004ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	008b      	lsls	r3, r1, #2
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eca:	4641      	mov	r1, r8
 8004ecc:	008a      	lsls	r2, r1, #2
 8004ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ed2:	f7fb fe79 	bl	8000bc8 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	4b38      	ldr	r3, [pc, #224]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004ede:	fba3 2301 	umull	r2, r3, r3, r1
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2264      	movs	r2, #100	; 0x64
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	1acb      	subs	r3, r1, r3
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	3332      	adds	r3, #50	; 0x32
 8004ef0:	4a33      	ldr	r2, [pc, #204]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efc:	441c      	add	r4, r3
 8004efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f02:	2200      	movs	r2, #0
 8004f04:	673b      	str	r3, [r7, #112]	; 0x70
 8004f06:	677a      	str	r2, [r7, #116]	; 0x74
 8004f08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	1891      	adds	r1, r2, r2
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	415b      	adcs	r3, r3
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	1851      	adds	r1, r2, r1
 8004f20:	6039      	str	r1, [r7, #0]
 8004f22:	4649      	mov	r1, r9
 8004f24:	414b      	adcs	r3, r1
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f34:	4659      	mov	r1, fp
 8004f36:	00cb      	lsls	r3, r1, #3
 8004f38:	4651      	mov	r1, sl
 8004f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3e:	4651      	mov	r1, sl
 8004f40:	00ca      	lsls	r2, r1, #3
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	4642      	mov	r2, r8
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4e:	464b      	mov	r3, r9
 8004f50:	460a      	mov	r2, r1
 8004f52:	eb42 0303 	adc.w	r3, r2, r3
 8004f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	663b      	str	r3, [r7, #96]	; 0x60
 8004f62:	667a      	str	r2, [r7, #100]	; 0x64
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f70:	4649      	mov	r1, r9
 8004f72:	008b      	lsls	r3, r1, #2
 8004f74:	4641      	mov	r1, r8
 8004f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	008a      	lsls	r2, r1, #2
 8004f7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f82:	f7fb fe21 	bl	8000bc8 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	3332      	adds	r3, #50	; 0x32
 8004f9e:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 020f 	and.w	r2, r3, #15
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4422      	add	r2, r4
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc0:	51eb851f 	.word	0x51eb851f

08004fc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	f107 001c 	add.w	r0, r7, #28
 8004fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d122      	bne.n	8005022 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 faa2 	bl	8005560 <USB_CoreReset>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	e01a      	b.n	8005058 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa96 	bl	8005560 <USB_CoreReset>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
 800504a:	e005      	b.n	8005058 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10b      	bne.n	8005076 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f043 0206 	orr.w	r2, r3, #6
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005082:	b004      	add	sp, #16
 8005084:	4770      	bx	lr

08005086 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f023 0201 	bic.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d115      	bne.n	80050f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050d6:	2001      	movs	r0, #1
 80050d8:	f7fc ff1c 	bl	8001f14 <HAL_Delay>
      ms++;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa2e 	bl	8005544 <USB_GetMode>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d01e      	beq.n	800512c <USB_SetCurrentMode+0x84>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b31      	cmp	r3, #49	; 0x31
 80050f2:	d9f0      	bls.n	80050d6 <USB_SetCurrentMode+0x2e>
 80050f4:	e01a      	b.n	800512c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d115      	bne.n	8005128 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005108:	2001      	movs	r0, #1
 800510a:	f7fc ff03 	bl	8001f14 <HAL_Delay>
      ms++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fa15 	bl	8005544 <USB_GetMode>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <USB_SetCurrentMode+0x84>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b31      	cmp	r3, #49	; 0x31
 8005124:	d9f0      	bls.n	8005108 <USB_SetCurrentMode+0x60>
 8005126:	e001      	b.n	800512c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e005      	b.n	8005138 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b32      	cmp	r3, #50	; 0x32
 8005130:	d101      	bne.n	8005136 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005140:	b084      	sub	sp, #16
 8005142:	b580      	push	{r7, lr}
 8005144:	b086      	sub	sp, #24
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800514e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800515a:	2300      	movs	r3, #0
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	e009      	b.n	8005174 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	3340      	adds	r3, #64	; 0x40
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	2200      	movs	r2, #0
 800516c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	3301      	adds	r3, #1
 8005172:	613b      	str	r3, [r7, #16]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b0e      	cmp	r3, #14
 8005178:	d9f2      	bls.n	8005160 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800517a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d11c      	bne.n	80051ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518e:	f043 0302 	orr.w	r3, r3, #2
 8005192:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38
 80051b8:	e00b      	b.n	80051d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051d8:	461a      	mov	r2, r3
 80051da:	2300      	movs	r3, #0
 80051dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e4:	4619      	mov	r1, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ec:	461a      	mov	r2, r3
 80051ee:	680b      	ldr	r3, [r1, #0]
 80051f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d10c      	bne.n	8005212 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051fe:	2100      	movs	r1, #0
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f965 	bl	80054d0 <USB_SetDevSpeed>
 8005206:	e008      	b.n	800521a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005208:	2101      	movs	r1, #1
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f960 	bl	80054d0 <USB_SetDevSpeed>
 8005210:	e003      	b.n	800521a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005212:	2103      	movs	r1, #3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f95b 	bl	80054d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800521a:	2110      	movs	r1, #16
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8f3 	bl	8005408 <USB_FlushTxFifo>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f91f 	bl	8005470 <USB_FlushRxFifo>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	461a      	mov	r2, r3
 8005244:	2300      	movs	r3, #0
 8005246:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	461a      	mov	r2, r3
 8005250:	2300      	movs	r3, #0
 8005252:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	461a      	mov	r2, r3
 800525c:	2300      	movs	r3, #0
 800525e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	e043      	b.n	80052ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800527c:	d118      	bne.n	80052b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	461a      	mov	r2, r3
 8005292:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e013      	b.n	80052c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	461a      	mov	r2, r3
 80052a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e008      	b.n	80052c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	461a      	mov	r2, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	461a      	mov	r2, r3
 80052e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	3301      	adds	r3, #1
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d3b7      	bcc.n	8005266 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e043      	b.n	8005384 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800530e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005312:	d118      	bne.n	8005346 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	461a      	mov	r2, r3
 8005328:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e013      	b.n	8005358 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	461a      	mov	r2, r3
 800533e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e008      	b.n	8005358 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005352:	461a      	mov	r2, r3
 8005354:	2300      	movs	r3, #0
 8005356:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	461a      	mov	r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	461a      	mov	r2, r3
 8005378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800537c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	3301      	adds	r3, #1
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	429a      	cmp	r2, r3
 800538a:	d3b7      	bcc.n	80052fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f043 0210 	orr.w	r2, r3, #16
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <USB_DevInit+0x2c4>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f043 0208 	orr.w	r2, r3, #8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d107      	bne.n	80053f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ec:	f043 0304 	orr.w	r3, r3, #4
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005400:	b004      	add	sp, #16
 8005402:	4770      	bx	lr
 8005404:	803c3800 	.word	0x803c3800

08005408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3301      	adds	r3, #1
 800541a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a13      	ldr	r2, [pc, #76]	; (800546c <USB_FlushTxFifo+0x64>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d901      	bls.n	8005428 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e01b      	b.n	8005460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	daf2      	bge.n	8005416 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	019b      	lsls	r3, r3, #6
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <USB_FlushTxFifo+0x64>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e006      	b.n	8005460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b20      	cmp	r3, #32
 800545c:	d0f0      	beq.n	8005440 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	00030d40 	.word	0x00030d40

08005470 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a11      	ldr	r2, [pc, #68]	; (80054cc <USB_FlushRxFifo+0x5c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e018      	b.n	80054c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	daf2      	bge.n	800547c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2210      	movs	r2, #16
 800549e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4a08      	ldr	r2, [pc, #32]	; (80054cc <USB_FlushRxFifo+0x5c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e006      	b.n	80054c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d0f0      	beq.n	80054a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	00030d40 	.word	0x00030d40

080054d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800551c:	f023 0303 	bic.w	r3, r3, #3
 8005520:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f003 0301 	and.w	r3, r3, #1
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <USB_CoreReset+0x64>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e01b      	b.n	80055b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	daf2      	bge.n	800556c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f043 0201 	orr.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3301      	adds	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <USB_CoreReset+0x64>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e006      	b.n	80055b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d0f0      	beq.n	8005596 <USB_CoreReset+0x36>

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	00030d40 	.word	0x00030d40

080055c8 <__cvt>:
 80055c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	ec55 4b10 	vmov	r4, r5, d0
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	460e      	mov	r6, r1
 80055d4:	4619      	mov	r1, r3
 80055d6:	462b      	mov	r3, r5
 80055d8:	bfbb      	ittet	lt
 80055da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055de:	461d      	movlt	r5, r3
 80055e0:	2300      	movge	r3, #0
 80055e2:	232d      	movlt	r3, #45	; 0x2d
 80055e4:	700b      	strb	r3, [r1, #0]
 80055e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055ec:	4691      	mov	r9, r2
 80055ee:	f023 0820 	bic.w	r8, r3, #32
 80055f2:	bfbc      	itt	lt
 80055f4:	4622      	movlt	r2, r4
 80055f6:	4614      	movlt	r4, r2
 80055f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055fc:	d005      	beq.n	800560a <__cvt+0x42>
 80055fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005602:	d100      	bne.n	8005606 <__cvt+0x3e>
 8005604:	3601      	adds	r6, #1
 8005606:	2102      	movs	r1, #2
 8005608:	e000      	b.n	800560c <__cvt+0x44>
 800560a:	2103      	movs	r1, #3
 800560c:	ab03      	add	r3, sp, #12
 800560e:	9301      	str	r3, [sp, #4]
 8005610:	ab02      	add	r3, sp, #8
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	ec45 4b10 	vmov	d0, r4, r5
 8005618:	4653      	mov	r3, sl
 800561a:	4632      	mov	r2, r6
 800561c:	f000 ff4c 	bl	80064b8 <_dtoa_r>
 8005620:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005624:	4607      	mov	r7, r0
 8005626:	d102      	bne.n	800562e <__cvt+0x66>
 8005628:	f019 0f01 	tst.w	r9, #1
 800562c:	d022      	beq.n	8005674 <__cvt+0xac>
 800562e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005632:	eb07 0906 	add.w	r9, r7, r6
 8005636:	d110      	bne.n	800565a <__cvt+0x92>
 8005638:	783b      	ldrb	r3, [r7, #0]
 800563a:	2b30      	cmp	r3, #48	; 0x30
 800563c:	d10a      	bne.n	8005654 <__cvt+0x8c>
 800563e:	2200      	movs	r2, #0
 8005640:	2300      	movs	r3, #0
 8005642:	4620      	mov	r0, r4
 8005644:	4629      	mov	r1, r5
 8005646:	f7fb fa4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800564a:	b918      	cbnz	r0, 8005654 <__cvt+0x8c>
 800564c:	f1c6 0601 	rsb	r6, r6, #1
 8005650:	f8ca 6000 	str.w	r6, [sl]
 8005654:	f8da 3000 	ldr.w	r3, [sl]
 8005658:	4499      	add	r9, r3
 800565a:	2200      	movs	r2, #0
 800565c:	2300      	movs	r3, #0
 800565e:	4620      	mov	r0, r4
 8005660:	4629      	mov	r1, r5
 8005662:	f7fb fa41 	bl	8000ae8 <__aeabi_dcmpeq>
 8005666:	b108      	cbz	r0, 800566c <__cvt+0xa4>
 8005668:	f8cd 900c 	str.w	r9, [sp, #12]
 800566c:	2230      	movs	r2, #48	; 0x30
 800566e:	9b03      	ldr	r3, [sp, #12]
 8005670:	454b      	cmp	r3, r9
 8005672:	d307      	bcc.n	8005684 <__cvt+0xbc>
 8005674:	9b03      	ldr	r3, [sp, #12]
 8005676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005678:	1bdb      	subs	r3, r3, r7
 800567a:	4638      	mov	r0, r7
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	b004      	add	sp, #16
 8005680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005684:	1c59      	adds	r1, r3, #1
 8005686:	9103      	str	r1, [sp, #12]
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	e7f0      	b.n	800566e <__cvt+0xa6>

0800568c <__exponent>:
 800568c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800568e:	4603      	mov	r3, r0
 8005690:	2900      	cmp	r1, #0
 8005692:	bfb8      	it	lt
 8005694:	4249      	neglt	r1, r1
 8005696:	f803 2b02 	strb.w	r2, [r3], #2
 800569a:	bfb4      	ite	lt
 800569c:	222d      	movlt	r2, #45	; 0x2d
 800569e:	222b      	movge	r2, #43	; 0x2b
 80056a0:	2909      	cmp	r1, #9
 80056a2:	7042      	strb	r2, [r0, #1]
 80056a4:	dd2a      	ble.n	80056fc <__exponent+0x70>
 80056a6:	f10d 0207 	add.w	r2, sp, #7
 80056aa:	4617      	mov	r7, r2
 80056ac:	260a      	movs	r6, #10
 80056ae:	4694      	mov	ip, r2
 80056b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80056b4:	fb06 1415 	mls	r4, r6, r5, r1
 80056b8:	3430      	adds	r4, #48	; 0x30
 80056ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80056be:	460c      	mov	r4, r1
 80056c0:	2c63      	cmp	r4, #99	; 0x63
 80056c2:	f102 32ff 	add.w	r2, r2, #4294967295
 80056c6:	4629      	mov	r1, r5
 80056c8:	dcf1      	bgt.n	80056ae <__exponent+0x22>
 80056ca:	3130      	adds	r1, #48	; 0x30
 80056cc:	f1ac 0402 	sub.w	r4, ip, #2
 80056d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056d4:	1c41      	adds	r1, r0, #1
 80056d6:	4622      	mov	r2, r4
 80056d8:	42ba      	cmp	r2, r7
 80056da:	d30a      	bcc.n	80056f2 <__exponent+0x66>
 80056dc:	f10d 0209 	add.w	r2, sp, #9
 80056e0:	eba2 020c 	sub.w	r2, r2, ip
 80056e4:	42bc      	cmp	r4, r7
 80056e6:	bf88      	it	hi
 80056e8:	2200      	movhi	r2, #0
 80056ea:	4413      	add	r3, r2
 80056ec:	1a18      	subs	r0, r3, r0
 80056ee:	b003      	add	sp, #12
 80056f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056fa:	e7ed      	b.n	80056d8 <__exponent+0x4c>
 80056fc:	2330      	movs	r3, #48	; 0x30
 80056fe:	3130      	adds	r1, #48	; 0x30
 8005700:	7083      	strb	r3, [r0, #2]
 8005702:	70c1      	strb	r1, [r0, #3]
 8005704:	1d03      	adds	r3, r0, #4
 8005706:	e7f1      	b.n	80056ec <__exponent+0x60>

08005708 <_printf_float>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	ed2d 8b02 	vpush	{d8}
 8005710:	b08d      	sub	sp, #52	; 0x34
 8005712:	460c      	mov	r4, r1
 8005714:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005718:	4616      	mov	r6, r2
 800571a:	461f      	mov	r7, r3
 800571c:	4605      	mov	r5, r0
 800571e:	f000 fdc9 	bl	80062b4 <_localeconv_r>
 8005722:	f8d0 a000 	ldr.w	sl, [r0]
 8005726:	4650      	mov	r0, sl
 8005728:	f7fa fdb2 	bl	8000290 <strlen>
 800572c:	2300      	movs	r3, #0
 800572e:	930a      	str	r3, [sp, #40]	; 0x28
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	9305      	str	r3, [sp, #20]
 8005734:	f8d8 3000 	ldr.w	r3, [r8]
 8005738:	f894 b018 	ldrb.w	fp, [r4, #24]
 800573c:	3307      	adds	r3, #7
 800573e:	f023 0307 	bic.w	r3, r3, #7
 8005742:	f103 0208 	add.w	r2, r3, #8
 8005746:	f8c8 2000 	str.w	r2, [r8]
 800574a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800574e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005752:	9307      	str	r3, [sp, #28]
 8005754:	f8cd 8018 	str.w	r8, [sp, #24]
 8005758:	ee08 0a10 	vmov	s16, r0
 800575c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005764:	4b9e      	ldr	r3, [pc, #632]	; (80059e0 <_printf_float+0x2d8>)
 8005766:	f04f 32ff 	mov.w	r2, #4294967295
 800576a:	f7fb f9ef 	bl	8000b4c <__aeabi_dcmpun>
 800576e:	bb88      	cbnz	r0, 80057d4 <_printf_float+0xcc>
 8005770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005774:	4b9a      	ldr	r3, [pc, #616]	; (80059e0 <_printf_float+0x2d8>)
 8005776:	f04f 32ff 	mov.w	r2, #4294967295
 800577a:	f7fb f9c9 	bl	8000b10 <__aeabi_dcmple>
 800577e:	bb48      	cbnz	r0, 80057d4 <_printf_float+0xcc>
 8005780:	2200      	movs	r2, #0
 8005782:	2300      	movs	r3, #0
 8005784:	4640      	mov	r0, r8
 8005786:	4649      	mov	r1, r9
 8005788:	f7fb f9b8 	bl	8000afc <__aeabi_dcmplt>
 800578c:	b110      	cbz	r0, 8005794 <_printf_float+0x8c>
 800578e:	232d      	movs	r3, #45	; 0x2d
 8005790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005794:	4a93      	ldr	r2, [pc, #588]	; (80059e4 <_printf_float+0x2dc>)
 8005796:	4b94      	ldr	r3, [pc, #592]	; (80059e8 <_printf_float+0x2e0>)
 8005798:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800579c:	bf94      	ite	ls
 800579e:	4690      	movls	r8, r2
 80057a0:	4698      	movhi	r8, r3
 80057a2:	2303      	movs	r3, #3
 80057a4:	6123      	str	r3, [r4, #16]
 80057a6:	9b05      	ldr	r3, [sp, #20]
 80057a8:	f023 0304 	bic.w	r3, r3, #4
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	f04f 0900 	mov.w	r9, #0
 80057b2:	9700      	str	r7, [sp, #0]
 80057b4:	4633      	mov	r3, r6
 80057b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80057b8:	4621      	mov	r1, r4
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 f9da 	bl	8005b74 <_printf_common>
 80057c0:	3001      	adds	r0, #1
 80057c2:	f040 8090 	bne.w	80058e6 <_printf_float+0x1de>
 80057c6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ca:	b00d      	add	sp, #52	; 0x34
 80057cc:	ecbd 8b02 	vpop	{d8}
 80057d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f7fb f9b6 	bl	8000b4c <__aeabi_dcmpun>
 80057e0:	b140      	cbz	r0, 80057f4 <_printf_float+0xec>
 80057e2:	464b      	mov	r3, r9
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bfbc      	itt	lt
 80057e8:	232d      	movlt	r3, #45	; 0x2d
 80057ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057ee:	4a7f      	ldr	r2, [pc, #508]	; (80059ec <_printf_float+0x2e4>)
 80057f0:	4b7f      	ldr	r3, [pc, #508]	; (80059f0 <_printf_float+0x2e8>)
 80057f2:	e7d1      	b.n	8005798 <_printf_float+0x90>
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057fa:	9206      	str	r2, [sp, #24]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	d13f      	bne.n	8005880 <_printf_float+0x178>
 8005800:	2306      	movs	r3, #6
 8005802:	6063      	str	r3, [r4, #4]
 8005804:	9b05      	ldr	r3, [sp, #20]
 8005806:	6861      	ldr	r1, [r4, #4]
 8005808:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800580c:	2300      	movs	r3, #0
 800580e:	9303      	str	r3, [sp, #12]
 8005810:	ab0a      	add	r3, sp, #40	; 0x28
 8005812:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005816:	ab09      	add	r3, sp, #36	; 0x24
 8005818:	ec49 8b10 	vmov	d0, r8, r9
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	6022      	str	r2, [r4, #0]
 8005820:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005824:	4628      	mov	r0, r5
 8005826:	f7ff fecf 	bl	80055c8 <__cvt>
 800582a:	9b06      	ldr	r3, [sp, #24]
 800582c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800582e:	2b47      	cmp	r3, #71	; 0x47
 8005830:	4680      	mov	r8, r0
 8005832:	d108      	bne.n	8005846 <_printf_float+0x13e>
 8005834:	1cc8      	adds	r0, r1, #3
 8005836:	db02      	blt.n	800583e <_printf_float+0x136>
 8005838:	6863      	ldr	r3, [r4, #4]
 800583a:	4299      	cmp	r1, r3
 800583c:	dd41      	ble.n	80058c2 <_printf_float+0x1ba>
 800583e:	f1ab 0302 	sub.w	r3, fp, #2
 8005842:	fa5f fb83 	uxtb.w	fp, r3
 8005846:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800584a:	d820      	bhi.n	800588e <_printf_float+0x186>
 800584c:	3901      	subs	r1, #1
 800584e:	465a      	mov	r2, fp
 8005850:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005854:	9109      	str	r1, [sp, #36]	; 0x24
 8005856:	f7ff ff19 	bl	800568c <__exponent>
 800585a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800585c:	1813      	adds	r3, r2, r0
 800585e:	2a01      	cmp	r2, #1
 8005860:	4681      	mov	r9, r0
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	dc02      	bgt.n	800586c <_printf_float+0x164>
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	07d2      	lsls	r2, r2, #31
 800586a:	d501      	bpl.n	8005870 <_printf_float+0x168>
 800586c:	3301      	adds	r3, #1
 800586e:	6123      	str	r3, [r4, #16]
 8005870:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005874:	2b00      	cmp	r3, #0
 8005876:	d09c      	beq.n	80057b2 <_printf_float+0xaa>
 8005878:	232d      	movs	r3, #45	; 0x2d
 800587a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800587e:	e798      	b.n	80057b2 <_printf_float+0xaa>
 8005880:	9a06      	ldr	r2, [sp, #24]
 8005882:	2a47      	cmp	r2, #71	; 0x47
 8005884:	d1be      	bne.n	8005804 <_printf_float+0xfc>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1bc      	bne.n	8005804 <_printf_float+0xfc>
 800588a:	2301      	movs	r3, #1
 800588c:	e7b9      	b.n	8005802 <_printf_float+0xfa>
 800588e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005892:	d118      	bne.n	80058c6 <_printf_float+0x1be>
 8005894:	2900      	cmp	r1, #0
 8005896:	6863      	ldr	r3, [r4, #4]
 8005898:	dd0b      	ble.n	80058b2 <_printf_float+0x1aa>
 800589a:	6121      	str	r1, [r4, #16]
 800589c:	b913      	cbnz	r3, 80058a4 <_printf_float+0x19c>
 800589e:	6822      	ldr	r2, [r4, #0]
 80058a0:	07d0      	lsls	r0, r2, #31
 80058a2:	d502      	bpl.n	80058aa <_printf_float+0x1a2>
 80058a4:	3301      	adds	r3, #1
 80058a6:	440b      	add	r3, r1
 80058a8:	6123      	str	r3, [r4, #16]
 80058aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80058ac:	f04f 0900 	mov.w	r9, #0
 80058b0:	e7de      	b.n	8005870 <_printf_float+0x168>
 80058b2:	b913      	cbnz	r3, 80058ba <_printf_float+0x1b2>
 80058b4:	6822      	ldr	r2, [r4, #0]
 80058b6:	07d2      	lsls	r2, r2, #31
 80058b8:	d501      	bpl.n	80058be <_printf_float+0x1b6>
 80058ba:	3302      	adds	r3, #2
 80058bc:	e7f4      	b.n	80058a8 <_printf_float+0x1a0>
 80058be:	2301      	movs	r3, #1
 80058c0:	e7f2      	b.n	80058a8 <_printf_float+0x1a0>
 80058c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c8:	4299      	cmp	r1, r3
 80058ca:	db05      	blt.n	80058d8 <_printf_float+0x1d0>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	6121      	str	r1, [r4, #16]
 80058d0:	07d8      	lsls	r0, r3, #31
 80058d2:	d5ea      	bpl.n	80058aa <_printf_float+0x1a2>
 80058d4:	1c4b      	adds	r3, r1, #1
 80058d6:	e7e7      	b.n	80058a8 <_printf_float+0x1a0>
 80058d8:	2900      	cmp	r1, #0
 80058da:	bfd4      	ite	le
 80058dc:	f1c1 0202 	rsble	r2, r1, #2
 80058e0:	2201      	movgt	r2, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	e7e0      	b.n	80058a8 <_printf_float+0x1a0>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	055a      	lsls	r2, r3, #21
 80058ea:	d407      	bmi.n	80058fc <_printf_float+0x1f4>
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	4642      	mov	r2, r8
 80058f0:	4631      	mov	r1, r6
 80058f2:	4628      	mov	r0, r5
 80058f4:	47b8      	blx	r7
 80058f6:	3001      	adds	r0, #1
 80058f8:	d12c      	bne.n	8005954 <_printf_float+0x24c>
 80058fa:	e764      	b.n	80057c6 <_printf_float+0xbe>
 80058fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005900:	f240 80e0 	bls.w	8005ac4 <_printf_float+0x3bc>
 8005904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005908:	2200      	movs	r2, #0
 800590a:	2300      	movs	r3, #0
 800590c:	f7fb f8ec 	bl	8000ae8 <__aeabi_dcmpeq>
 8005910:	2800      	cmp	r0, #0
 8005912:	d034      	beq.n	800597e <_printf_float+0x276>
 8005914:	4a37      	ldr	r2, [pc, #220]	; (80059f4 <_printf_float+0x2ec>)
 8005916:	2301      	movs	r3, #1
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	47b8      	blx	r7
 800591e:	3001      	adds	r0, #1
 8005920:	f43f af51 	beq.w	80057c6 <_printf_float+0xbe>
 8005924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005928:	429a      	cmp	r2, r3
 800592a:	db02      	blt.n	8005932 <_printf_float+0x22a>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	07d8      	lsls	r0, r3, #31
 8005930:	d510      	bpl.n	8005954 <_printf_float+0x24c>
 8005932:	ee18 3a10 	vmov	r3, s16
 8005936:	4652      	mov	r2, sl
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f af41 	beq.w	80057c6 <_printf_float+0xbe>
 8005944:	f04f 0800 	mov.w	r8, #0
 8005948:	f104 091a 	add.w	r9, r4, #26
 800594c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594e:	3b01      	subs	r3, #1
 8005950:	4543      	cmp	r3, r8
 8005952:	dc09      	bgt.n	8005968 <_printf_float+0x260>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	079b      	lsls	r3, r3, #30
 8005958:	f100 8107 	bmi.w	8005b6a <_printf_float+0x462>
 800595c:	68e0      	ldr	r0, [r4, #12]
 800595e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005960:	4298      	cmp	r0, r3
 8005962:	bfb8      	it	lt
 8005964:	4618      	movlt	r0, r3
 8005966:	e730      	b.n	80057ca <_printf_float+0xc2>
 8005968:	2301      	movs	r3, #1
 800596a:	464a      	mov	r2, r9
 800596c:	4631      	mov	r1, r6
 800596e:	4628      	mov	r0, r5
 8005970:	47b8      	blx	r7
 8005972:	3001      	adds	r0, #1
 8005974:	f43f af27 	beq.w	80057c6 <_printf_float+0xbe>
 8005978:	f108 0801 	add.w	r8, r8, #1
 800597c:	e7e6      	b.n	800594c <_printf_float+0x244>
 800597e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	dc39      	bgt.n	80059f8 <_printf_float+0x2f0>
 8005984:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <_printf_float+0x2ec>)
 8005986:	2301      	movs	r3, #1
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	f43f af19 	beq.w	80057c6 <_printf_float+0xbe>
 8005994:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005998:	4313      	orrs	r3, r2
 800599a:	d102      	bne.n	80059a2 <_printf_float+0x29a>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	07d9      	lsls	r1, r3, #31
 80059a0:	d5d8      	bpl.n	8005954 <_printf_float+0x24c>
 80059a2:	ee18 3a10 	vmov	r3, s16
 80059a6:	4652      	mov	r2, sl
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	47b8      	blx	r7
 80059ae:	3001      	adds	r0, #1
 80059b0:	f43f af09 	beq.w	80057c6 <_printf_float+0xbe>
 80059b4:	f04f 0900 	mov.w	r9, #0
 80059b8:	f104 0a1a 	add.w	sl, r4, #26
 80059bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059be:	425b      	negs	r3, r3
 80059c0:	454b      	cmp	r3, r9
 80059c2:	dc01      	bgt.n	80059c8 <_printf_float+0x2c0>
 80059c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c6:	e792      	b.n	80058ee <_printf_float+0x1e6>
 80059c8:	2301      	movs	r3, #1
 80059ca:	4652      	mov	r2, sl
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f aef7 	beq.w	80057c6 <_printf_float+0xbe>
 80059d8:	f109 0901 	add.w	r9, r9, #1
 80059dc:	e7ee      	b.n	80059bc <_printf_float+0x2b4>
 80059de:	bf00      	nop
 80059e0:	7fefffff 	.word	0x7fefffff
 80059e4:	0800806c 	.word	0x0800806c
 80059e8:	08008070 	.word	0x08008070
 80059ec:	08008074 	.word	0x08008074
 80059f0:	08008078 	.word	0x08008078
 80059f4:	0800807c 	.word	0x0800807c
 80059f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059fc:	429a      	cmp	r2, r3
 80059fe:	bfa8      	it	ge
 8005a00:	461a      	movge	r2, r3
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	4691      	mov	r9, r2
 8005a06:	dc37      	bgt.n	8005a78 <_printf_float+0x370>
 8005a08:	f04f 0b00 	mov.w	fp, #0
 8005a0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a10:	f104 021a 	add.w	r2, r4, #26
 8005a14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a16:	9305      	str	r3, [sp, #20]
 8005a18:	eba3 0309 	sub.w	r3, r3, r9
 8005a1c:	455b      	cmp	r3, fp
 8005a1e:	dc33      	bgt.n	8005a88 <_printf_float+0x380>
 8005a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a24:	429a      	cmp	r2, r3
 8005a26:	db3b      	blt.n	8005aa0 <_printf_float+0x398>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	07da      	lsls	r2, r3, #31
 8005a2c:	d438      	bmi.n	8005aa0 <_printf_float+0x398>
 8005a2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a32:	eba2 0903 	sub.w	r9, r2, r3
 8005a36:	9b05      	ldr	r3, [sp, #20]
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	4591      	cmp	r9, r2
 8005a3c:	bfa8      	it	ge
 8005a3e:	4691      	movge	r9, r2
 8005a40:	f1b9 0f00 	cmp.w	r9, #0
 8005a44:	dc35      	bgt.n	8005ab2 <_printf_float+0x3aa>
 8005a46:	f04f 0800 	mov.w	r8, #0
 8005a4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a4e:	f104 0a1a 	add.w	sl, r4, #26
 8005a52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	eba3 0309 	sub.w	r3, r3, r9
 8005a5c:	4543      	cmp	r3, r8
 8005a5e:	f77f af79 	ble.w	8005954 <_printf_float+0x24c>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4652      	mov	r2, sl
 8005a66:	4631      	mov	r1, r6
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b8      	blx	r7
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	f43f aeaa 	beq.w	80057c6 <_printf_float+0xbe>
 8005a72:	f108 0801 	add.w	r8, r8, #1
 8005a76:	e7ec      	b.n	8005a52 <_printf_float+0x34a>
 8005a78:	4613      	mov	r3, r2
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	4628      	mov	r0, r5
 8005a80:	47b8      	blx	r7
 8005a82:	3001      	adds	r0, #1
 8005a84:	d1c0      	bne.n	8005a08 <_printf_float+0x300>
 8005a86:	e69e      	b.n	80057c6 <_printf_float+0xbe>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	9205      	str	r2, [sp, #20]
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	f43f ae97 	beq.w	80057c6 <_printf_float+0xbe>
 8005a98:	9a05      	ldr	r2, [sp, #20]
 8005a9a:	f10b 0b01 	add.w	fp, fp, #1
 8005a9e:	e7b9      	b.n	8005a14 <_printf_float+0x30c>
 8005aa0:	ee18 3a10 	vmov	r3, s16
 8005aa4:	4652      	mov	r2, sl
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b8      	blx	r7
 8005aac:	3001      	adds	r0, #1
 8005aae:	d1be      	bne.n	8005a2e <_printf_float+0x326>
 8005ab0:	e689      	b.n	80057c6 <_printf_float+0xbe>
 8005ab2:	9a05      	ldr	r2, [sp, #20]
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	4442      	add	r2, r8
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b8      	blx	r7
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d1c1      	bne.n	8005a46 <_printf_float+0x33e>
 8005ac2:	e680      	b.n	80057c6 <_printf_float+0xbe>
 8005ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ac6:	2a01      	cmp	r2, #1
 8005ac8:	dc01      	bgt.n	8005ace <_printf_float+0x3c6>
 8005aca:	07db      	lsls	r3, r3, #31
 8005acc:	d53a      	bpl.n	8005b44 <_printf_float+0x43c>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b8      	blx	r7
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f43f ae74 	beq.w	80057c6 <_printf_float+0xbe>
 8005ade:	ee18 3a10 	vmov	r3, s16
 8005ae2:	4652      	mov	r2, sl
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b8      	blx	r7
 8005aea:	3001      	adds	r0, #1
 8005aec:	f43f ae6b 	beq.w	80057c6 <_printf_float+0xbe>
 8005af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005af4:	2200      	movs	r2, #0
 8005af6:	2300      	movs	r3, #0
 8005af8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005afc:	f7fa fff4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b00:	b9d8      	cbnz	r0, 8005b3a <_printf_float+0x432>
 8005b02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b06:	f108 0201 	add.w	r2, r8, #1
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	d10e      	bne.n	8005b32 <_printf_float+0x42a>
 8005b14:	e657      	b.n	80057c6 <_printf_float+0xbe>
 8005b16:	2301      	movs	r3, #1
 8005b18:	4652      	mov	r2, sl
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b8      	blx	r7
 8005b20:	3001      	adds	r0, #1
 8005b22:	f43f ae50 	beq.w	80057c6 <_printf_float+0xbe>
 8005b26:	f108 0801 	add.w	r8, r8, #1
 8005b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	4543      	cmp	r3, r8
 8005b30:	dcf1      	bgt.n	8005b16 <_printf_float+0x40e>
 8005b32:	464b      	mov	r3, r9
 8005b34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b38:	e6da      	b.n	80058f0 <_printf_float+0x1e8>
 8005b3a:	f04f 0800 	mov.w	r8, #0
 8005b3e:	f104 0a1a 	add.w	sl, r4, #26
 8005b42:	e7f2      	b.n	8005b2a <_printf_float+0x422>
 8005b44:	2301      	movs	r3, #1
 8005b46:	4642      	mov	r2, r8
 8005b48:	e7df      	b.n	8005b0a <_printf_float+0x402>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	464a      	mov	r2, r9
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4628      	mov	r0, r5
 8005b52:	47b8      	blx	r7
 8005b54:	3001      	adds	r0, #1
 8005b56:	f43f ae36 	beq.w	80057c6 <_printf_float+0xbe>
 8005b5a:	f108 0801 	add.w	r8, r8, #1
 8005b5e:	68e3      	ldr	r3, [r4, #12]
 8005b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b62:	1a5b      	subs	r3, r3, r1
 8005b64:	4543      	cmp	r3, r8
 8005b66:	dcf0      	bgt.n	8005b4a <_printf_float+0x442>
 8005b68:	e6f8      	b.n	800595c <_printf_float+0x254>
 8005b6a:	f04f 0800 	mov.w	r8, #0
 8005b6e:	f104 0919 	add.w	r9, r4, #25
 8005b72:	e7f4      	b.n	8005b5e <_printf_float+0x456>

08005b74 <_printf_common>:
 8005b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	4616      	mov	r6, r2
 8005b7a:	4699      	mov	r9, r3
 8005b7c:	688a      	ldr	r2, [r1, #8]
 8005b7e:	690b      	ldr	r3, [r1, #16]
 8005b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	bfb8      	it	lt
 8005b88:	4613      	movlt	r3, r2
 8005b8a:	6033      	str	r3, [r6, #0]
 8005b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b90:	4607      	mov	r7, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	b10a      	cbz	r2, 8005b9a <_printf_common+0x26>
 8005b96:	3301      	adds	r3, #1
 8005b98:	6033      	str	r3, [r6, #0]
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	0699      	lsls	r1, r3, #26
 8005b9e:	bf42      	ittt	mi
 8005ba0:	6833      	ldrmi	r3, [r6, #0]
 8005ba2:	3302      	addmi	r3, #2
 8005ba4:	6033      	strmi	r3, [r6, #0]
 8005ba6:	6825      	ldr	r5, [r4, #0]
 8005ba8:	f015 0506 	ands.w	r5, r5, #6
 8005bac:	d106      	bne.n	8005bbc <_printf_common+0x48>
 8005bae:	f104 0a19 	add.w	sl, r4, #25
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	6832      	ldr	r2, [r6, #0]
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dc26      	bgt.n	8005c0a <_printf_common+0x96>
 8005bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bc0:	1e13      	subs	r3, r2, #0
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	bf18      	it	ne
 8005bc6:	2301      	movne	r3, #1
 8005bc8:	0692      	lsls	r2, r2, #26
 8005bca:	d42b      	bmi.n	8005c24 <_printf_common+0xb0>
 8005bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	47c0      	blx	r8
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d01e      	beq.n	8005c18 <_printf_common+0xa4>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	6922      	ldr	r2, [r4, #16]
 8005bde:	f003 0306 	and.w	r3, r3, #6
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	bf02      	ittt	eq
 8005be6:	68e5      	ldreq	r5, [r4, #12]
 8005be8:	6833      	ldreq	r3, [r6, #0]
 8005bea:	1aed      	subeq	r5, r5, r3
 8005bec:	68a3      	ldr	r3, [r4, #8]
 8005bee:	bf0c      	ite	eq
 8005bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bf4:	2500      	movne	r5, #0
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	bfc4      	itt	gt
 8005bfa:	1a9b      	subgt	r3, r3, r2
 8005bfc:	18ed      	addgt	r5, r5, r3
 8005bfe:	2600      	movs	r6, #0
 8005c00:	341a      	adds	r4, #26
 8005c02:	42b5      	cmp	r5, r6
 8005c04:	d11a      	bne.n	8005c3c <_printf_common+0xc8>
 8005c06:	2000      	movs	r0, #0
 8005c08:	e008      	b.n	8005c1c <_printf_common+0xa8>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	4649      	mov	r1, r9
 8005c10:	4638      	mov	r0, r7
 8005c12:	47c0      	blx	r8
 8005c14:	3001      	adds	r0, #1
 8005c16:	d103      	bne.n	8005c20 <_printf_common+0xac>
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	3501      	adds	r5, #1
 8005c22:	e7c6      	b.n	8005bb2 <_printf_common+0x3e>
 8005c24:	18e1      	adds	r1, r4, r3
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	2030      	movs	r0, #48	; 0x30
 8005c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c2e:	4422      	add	r2, r4
 8005c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c38:	3302      	adds	r3, #2
 8005c3a:	e7c7      	b.n	8005bcc <_printf_common+0x58>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4622      	mov	r2, r4
 8005c40:	4649      	mov	r1, r9
 8005c42:	4638      	mov	r0, r7
 8005c44:	47c0      	blx	r8
 8005c46:	3001      	adds	r0, #1
 8005c48:	d0e6      	beq.n	8005c18 <_printf_common+0xa4>
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7d9      	b.n	8005c02 <_printf_common+0x8e>
	...

08005c50 <_printf_i>:
 8005c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	7e0f      	ldrb	r7, [r1, #24]
 8005c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c58:	2f78      	cmp	r7, #120	; 0x78
 8005c5a:	4691      	mov	r9, r2
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	469a      	mov	sl, r3
 8005c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c66:	d807      	bhi.n	8005c78 <_printf_i+0x28>
 8005c68:	2f62      	cmp	r7, #98	; 0x62
 8005c6a:	d80a      	bhi.n	8005c82 <_printf_i+0x32>
 8005c6c:	2f00      	cmp	r7, #0
 8005c6e:	f000 80d4 	beq.w	8005e1a <_printf_i+0x1ca>
 8005c72:	2f58      	cmp	r7, #88	; 0x58
 8005c74:	f000 80c0 	beq.w	8005df8 <_printf_i+0x1a8>
 8005c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c80:	e03a      	b.n	8005cf8 <_printf_i+0xa8>
 8005c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c86:	2b15      	cmp	r3, #21
 8005c88:	d8f6      	bhi.n	8005c78 <_printf_i+0x28>
 8005c8a:	a101      	add	r1, pc, #4	; (adr r1, 8005c90 <_printf_i+0x40>)
 8005c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c90:	08005ce9 	.word	0x08005ce9
 8005c94:	08005cfd 	.word	0x08005cfd
 8005c98:	08005c79 	.word	0x08005c79
 8005c9c:	08005c79 	.word	0x08005c79
 8005ca0:	08005c79 	.word	0x08005c79
 8005ca4:	08005c79 	.word	0x08005c79
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005c79 	.word	0x08005c79
 8005cb0:	08005c79 	.word	0x08005c79
 8005cb4:	08005c79 	.word	0x08005c79
 8005cb8:	08005c79 	.word	0x08005c79
 8005cbc:	08005e01 	.word	0x08005e01
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005dbb 	.word	0x08005dbb
 8005cc8:	08005c79 	.word	0x08005c79
 8005ccc:	08005c79 	.word	0x08005c79
 8005cd0:	08005e23 	.word	0x08005e23
 8005cd4:	08005c79 	.word	0x08005c79
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005c79 	.word	0x08005c79
 8005ce0:	08005c79 	.word	0x08005c79
 8005ce4:	08005dc3 	.word	0x08005dc3
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	1d1a      	adds	r2, r3, #4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	602a      	str	r2, [r5, #0]
 8005cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e09f      	b.n	8005e3c <_printf_i+0x1ec>
 8005cfc:	6820      	ldr	r0, [r4, #0]
 8005cfe:	682b      	ldr	r3, [r5, #0]
 8005d00:	0607      	lsls	r7, r0, #24
 8005d02:	f103 0104 	add.w	r1, r3, #4
 8005d06:	6029      	str	r1, [r5, #0]
 8005d08:	d501      	bpl.n	8005d0e <_printf_i+0xbe>
 8005d0a:	681e      	ldr	r6, [r3, #0]
 8005d0c:	e003      	b.n	8005d16 <_printf_i+0xc6>
 8005d0e:	0646      	lsls	r6, r0, #25
 8005d10:	d5fb      	bpl.n	8005d0a <_printf_i+0xba>
 8005d12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d16:	2e00      	cmp	r6, #0
 8005d18:	da03      	bge.n	8005d22 <_printf_i+0xd2>
 8005d1a:	232d      	movs	r3, #45	; 0x2d
 8005d1c:	4276      	negs	r6, r6
 8005d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d22:	485a      	ldr	r0, [pc, #360]	; (8005e8c <_printf_i+0x23c>)
 8005d24:	230a      	movs	r3, #10
 8005d26:	e012      	b.n	8005d4e <_printf_i+0xfe>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	6820      	ldr	r0, [r4, #0]
 8005d2c:	1d19      	adds	r1, r3, #4
 8005d2e:	6029      	str	r1, [r5, #0]
 8005d30:	0605      	lsls	r5, r0, #24
 8005d32:	d501      	bpl.n	8005d38 <_printf_i+0xe8>
 8005d34:	681e      	ldr	r6, [r3, #0]
 8005d36:	e002      	b.n	8005d3e <_printf_i+0xee>
 8005d38:	0641      	lsls	r1, r0, #25
 8005d3a:	d5fb      	bpl.n	8005d34 <_printf_i+0xe4>
 8005d3c:	881e      	ldrh	r6, [r3, #0]
 8005d3e:	4853      	ldr	r0, [pc, #332]	; (8005e8c <_printf_i+0x23c>)
 8005d40:	2f6f      	cmp	r7, #111	; 0x6f
 8005d42:	bf0c      	ite	eq
 8005d44:	2308      	moveq	r3, #8
 8005d46:	230a      	movne	r3, #10
 8005d48:	2100      	movs	r1, #0
 8005d4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d4e:	6865      	ldr	r5, [r4, #4]
 8005d50:	60a5      	str	r5, [r4, #8]
 8005d52:	2d00      	cmp	r5, #0
 8005d54:	bfa2      	ittt	ge
 8005d56:	6821      	ldrge	r1, [r4, #0]
 8005d58:	f021 0104 	bicge.w	r1, r1, #4
 8005d5c:	6021      	strge	r1, [r4, #0]
 8005d5e:	b90e      	cbnz	r6, 8005d64 <_printf_i+0x114>
 8005d60:	2d00      	cmp	r5, #0
 8005d62:	d04b      	beq.n	8005dfc <_printf_i+0x1ac>
 8005d64:	4615      	mov	r5, r2
 8005d66:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d6a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d6e:	5dc7      	ldrb	r7, [r0, r7]
 8005d70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d74:	4637      	mov	r7, r6
 8005d76:	42bb      	cmp	r3, r7
 8005d78:	460e      	mov	r6, r1
 8005d7a:	d9f4      	bls.n	8005d66 <_printf_i+0x116>
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d10b      	bne.n	8005d98 <_printf_i+0x148>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	07de      	lsls	r6, r3, #31
 8005d84:	d508      	bpl.n	8005d98 <_printf_i+0x148>
 8005d86:	6923      	ldr	r3, [r4, #16]
 8005d88:	6861      	ldr	r1, [r4, #4]
 8005d8a:	4299      	cmp	r1, r3
 8005d8c:	bfde      	ittt	le
 8005d8e:	2330      	movle	r3, #48	; 0x30
 8005d90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d98:	1b52      	subs	r2, r2, r5
 8005d9a:	6122      	str	r2, [r4, #16]
 8005d9c:	f8cd a000 	str.w	sl, [sp]
 8005da0:	464b      	mov	r3, r9
 8005da2:	aa03      	add	r2, sp, #12
 8005da4:	4621      	mov	r1, r4
 8005da6:	4640      	mov	r0, r8
 8005da8:	f7ff fee4 	bl	8005b74 <_printf_common>
 8005dac:	3001      	adds	r0, #1
 8005dae:	d14a      	bne.n	8005e46 <_printf_i+0x1f6>
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	b004      	add	sp, #16
 8005db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	f043 0320 	orr.w	r3, r3, #32
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	4833      	ldr	r0, [pc, #204]	; (8005e90 <_printf_i+0x240>)
 8005dc4:	2778      	movs	r7, #120	; 0x78
 8005dc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	6829      	ldr	r1, [r5, #0]
 8005dce:	061f      	lsls	r7, r3, #24
 8005dd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dd4:	d402      	bmi.n	8005ddc <_printf_i+0x18c>
 8005dd6:	065f      	lsls	r7, r3, #25
 8005dd8:	bf48      	it	mi
 8005dda:	b2b6      	uxthmi	r6, r6
 8005ddc:	07df      	lsls	r7, r3, #31
 8005dde:	bf48      	it	mi
 8005de0:	f043 0320 	orrmi.w	r3, r3, #32
 8005de4:	6029      	str	r1, [r5, #0]
 8005de6:	bf48      	it	mi
 8005de8:	6023      	strmi	r3, [r4, #0]
 8005dea:	b91e      	cbnz	r6, 8005df4 <_printf_i+0x1a4>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	f023 0320 	bic.w	r3, r3, #32
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	2310      	movs	r3, #16
 8005df6:	e7a7      	b.n	8005d48 <_printf_i+0xf8>
 8005df8:	4824      	ldr	r0, [pc, #144]	; (8005e8c <_printf_i+0x23c>)
 8005dfa:	e7e4      	b.n	8005dc6 <_printf_i+0x176>
 8005dfc:	4615      	mov	r5, r2
 8005dfe:	e7bd      	b.n	8005d7c <_printf_i+0x12c>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	6826      	ldr	r6, [r4, #0]
 8005e04:	6961      	ldr	r1, [r4, #20]
 8005e06:	1d18      	adds	r0, r3, #4
 8005e08:	6028      	str	r0, [r5, #0]
 8005e0a:	0635      	lsls	r5, r6, #24
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	d501      	bpl.n	8005e14 <_printf_i+0x1c4>
 8005e10:	6019      	str	r1, [r3, #0]
 8005e12:	e002      	b.n	8005e1a <_printf_i+0x1ca>
 8005e14:	0670      	lsls	r0, r6, #25
 8005e16:	d5fb      	bpl.n	8005e10 <_printf_i+0x1c0>
 8005e18:	8019      	strh	r1, [r3, #0]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6123      	str	r3, [r4, #16]
 8005e1e:	4615      	mov	r5, r2
 8005e20:	e7bc      	b.n	8005d9c <_printf_i+0x14c>
 8005e22:	682b      	ldr	r3, [r5, #0]
 8005e24:	1d1a      	adds	r2, r3, #4
 8005e26:	602a      	str	r2, [r5, #0]
 8005e28:	681d      	ldr	r5, [r3, #0]
 8005e2a:	6862      	ldr	r2, [r4, #4]
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f7fa f9de 	bl	80001f0 <memchr>
 8005e34:	b108      	cbz	r0, 8005e3a <_printf_i+0x1ea>
 8005e36:	1b40      	subs	r0, r0, r5
 8005e38:	6060      	str	r0, [r4, #4]
 8005e3a:	6863      	ldr	r3, [r4, #4]
 8005e3c:	6123      	str	r3, [r4, #16]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e44:	e7aa      	b.n	8005d9c <_printf_i+0x14c>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	462a      	mov	r2, r5
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	47d0      	blx	sl
 8005e50:	3001      	adds	r0, #1
 8005e52:	d0ad      	beq.n	8005db0 <_printf_i+0x160>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	079b      	lsls	r3, r3, #30
 8005e58:	d413      	bmi.n	8005e82 <_printf_i+0x232>
 8005e5a:	68e0      	ldr	r0, [r4, #12]
 8005e5c:	9b03      	ldr	r3, [sp, #12]
 8005e5e:	4298      	cmp	r0, r3
 8005e60:	bfb8      	it	lt
 8005e62:	4618      	movlt	r0, r3
 8005e64:	e7a6      	b.n	8005db4 <_printf_i+0x164>
 8005e66:	2301      	movs	r3, #1
 8005e68:	4632      	mov	r2, r6
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	47d0      	blx	sl
 8005e70:	3001      	adds	r0, #1
 8005e72:	d09d      	beq.n	8005db0 <_printf_i+0x160>
 8005e74:	3501      	adds	r5, #1
 8005e76:	68e3      	ldr	r3, [r4, #12]
 8005e78:	9903      	ldr	r1, [sp, #12]
 8005e7a:	1a5b      	subs	r3, r3, r1
 8005e7c:	42ab      	cmp	r3, r5
 8005e7e:	dcf2      	bgt.n	8005e66 <_printf_i+0x216>
 8005e80:	e7eb      	b.n	8005e5a <_printf_i+0x20a>
 8005e82:	2500      	movs	r5, #0
 8005e84:	f104 0619 	add.w	r6, r4, #25
 8005e88:	e7f5      	b.n	8005e76 <_printf_i+0x226>
 8005e8a:	bf00      	nop
 8005e8c:	0800807e 	.word	0x0800807e
 8005e90:	0800808f 	.word	0x0800808f

08005e94 <std>:
 8005e94:	2300      	movs	r3, #0
 8005e96:	b510      	push	{r4, lr}
 8005e98:	4604      	mov	r4, r0
 8005e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ea2:	6083      	str	r3, [r0, #8]
 8005ea4:	8181      	strh	r1, [r0, #12]
 8005ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ea8:	81c2      	strh	r2, [r0, #14]
 8005eaa:	6183      	str	r3, [r0, #24]
 8005eac:	4619      	mov	r1, r3
 8005eae:	2208      	movs	r2, #8
 8005eb0:	305c      	adds	r0, #92	; 0x5c
 8005eb2:	f000 f9f7 	bl	80062a4 <memset>
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <std+0x58>)
 8005eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <std+0x5c>)
 8005ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <std+0x60>)
 8005ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <std+0x64>)
 8005ec4:	6323      	str	r3, [r4, #48]	; 0x30
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <std+0x68>)
 8005ec8:	6224      	str	r4, [r4, #32]
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d006      	beq.n	8005edc <std+0x48>
 8005ece:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ed2:	4294      	cmp	r4, r2
 8005ed4:	d002      	beq.n	8005edc <std+0x48>
 8005ed6:	33d0      	adds	r3, #208	; 0xd0
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d105      	bne.n	8005ee8 <std+0x54>
 8005edc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee4:	f000 ba5a 	b.w	800639c <__retarget_lock_init_recursive>
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	bf00      	nop
 8005eec:	080060f5 	.word	0x080060f5
 8005ef0:	08006117 	.word	0x08006117
 8005ef4:	0800614f 	.word	0x0800614f
 8005ef8:	08006173 	.word	0x08006173
 8005efc:	20000a54 	.word	0x20000a54

08005f00 <stdio_exit_handler>:
 8005f00:	4a02      	ldr	r2, [pc, #8]	; (8005f0c <stdio_exit_handler+0xc>)
 8005f02:	4903      	ldr	r1, [pc, #12]	; (8005f10 <stdio_exit_handler+0x10>)
 8005f04:	4803      	ldr	r0, [pc, #12]	; (8005f14 <stdio_exit_handler+0x14>)
 8005f06:	f000 b869 	b.w	8005fdc <_fwalk_sglue>
 8005f0a:	bf00      	nop
 8005f0c:	2000000c 	.word	0x2000000c
 8005f10:	08007d29 	.word	0x08007d29
 8005f14:	20000018 	.word	0x20000018

08005f18 <cleanup_stdio>:
 8005f18:	6841      	ldr	r1, [r0, #4]
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <cleanup_stdio+0x34>)
 8005f1c:	4299      	cmp	r1, r3
 8005f1e:	b510      	push	{r4, lr}
 8005f20:	4604      	mov	r4, r0
 8005f22:	d001      	beq.n	8005f28 <cleanup_stdio+0x10>
 8005f24:	f001 ff00 	bl	8007d28 <_fflush_r>
 8005f28:	68a1      	ldr	r1, [r4, #8]
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <cleanup_stdio+0x38>)
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d002      	beq.n	8005f36 <cleanup_stdio+0x1e>
 8005f30:	4620      	mov	r0, r4
 8005f32:	f001 fef9 	bl	8007d28 <_fflush_r>
 8005f36:	68e1      	ldr	r1, [r4, #12]
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <cleanup_stdio+0x3c>)
 8005f3a:	4299      	cmp	r1, r3
 8005f3c:	d004      	beq.n	8005f48 <cleanup_stdio+0x30>
 8005f3e:	4620      	mov	r0, r4
 8005f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f44:	f001 bef0 	b.w	8007d28 <_fflush_r>
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000a54 	.word	0x20000a54
 8005f50:	20000abc 	.word	0x20000abc
 8005f54:	20000b24 	.word	0x20000b24

08005f58 <global_stdio_init.part.0>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <global_stdio_init.part.0+0x30>)
 8005f5c:	4c0b      	ldr	r4, [pc, #44]	; (8005f8c <global_stdio_init.part.0+0x34>)
 8005f5e:	4a0c      	ldr	r2, [pc, #48]	; (8005f90 <global_stdio_init.part.0+0x38>)
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	4620      	mov	r0, r4
 8005f64:	2200      	movs	r2, #0
 8005f66:	2104      	movs	r1, #4
 8005f68:	f7ff ff94 	bl	8005e94 <std>
 8005f6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f70:	2201      	movs	r2, #1
 8005f72:	2109      	movs	r1, #9
 8005f74:	f7ff ff8e 	bl	8005e94 <std>
 8005f78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f82:	2112      	movs	r1, #18
 8005f84:	f7ff bf86 	b.w	8005e94 <std>
 8005f88:	20000b8c 	.word	0x20000b8c
 8005f8c:	20000a54 	.word	0x20000a54
 8005f90:	08005f01 	.word	0x08005f01

08005f94 <__sfp_lock_acquire>:
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <__sfp_lock_acquire+0x8>)
 8005f96:	f000 ba02 	b.w	800639e <__retarget_lock_acquire_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	20000b95 	.word	0x20000b95

08005fa0 <__sfp_lock_release>:
 8005fa0:	4801      	ldr	r0, [pc, #4]	; (8005fa8 <__sfp_lock_release+0x8>)
 8005fa2:	f000 b9fd 	b.w	80063a0 <__retarget_lock_release_recursive>
 8005fa6:	bf00      	nop
 8005fa8:	20000b95 	.word	0x20000b95

08005fac <__sinit>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4604      	mov	r4, r0
 8005fb0:	f7ff fff0 	bl	8005f94 <__sfp_lock_acquire>
 8005fb4:	6a23      	ldr	r3, [r4, #32]
 8005fb6:	b11b      	cbz	r3, 8005fc0 <__sinit+0x14>
 8005fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fbc:	f7ff bff0 	b.w	8005fa0 <__sfp_lock_release>
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <__sinit+0x28>)
 8005fc2:	6223      	str	r3, [r4, #32]
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <__sinit+0x2c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f5      	bne.n	8005fb8 <__sinit+0xc>
 8005fcc:	f7ff ffc4 	bl	8005f58 <global_stdio_init.part.0>
 8005fd0:	e7f2      	b.n	8005fb8 <__sinit+0xc>
 8005fd2:	bf00      	nop
 8005fd4:	08005f19 	.word	0x08005f19
 8005fd8:	20000b8c 	.word	0x20000b8c

08005fdc <_fwalk_sglue>:
 8005fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	4688      	mov	r8, r1
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fec:	f1b9 0901 	subs.w	r9, r9, #1
 8005ff0:	d505      	bpl.n	8005ffe <_fwalk_sglue+0x22>
 8005ff2:	6824      	ldr	r4, [r4, #0]
 8005ff4:	2c00      	cmp	r4, #0
 8005ff6:	d1f7      	bne.n	8005fe8 <_fwalk_sglue+0xc>
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	89ab      	ldrh	r3, [r5, #12]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d907      	bls.n	8006014 <_fwalk_sglue+0x38>
 8006004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006008:	3301      	adds	r3, #1
 800600a:	d003      	beq.n	8006014 <_fwalk_sglue+0x38>
 800600c:	4629      	mov	r1, r5
 800600e:	4638      	mov	r0, r7
 8006010:	47c0      	blx	r8
 8006012:	4306      	orrs	r6, r0
 8006014:	3568      	adds	r5, #104	; 0x68
 8006016:	e7e9      	b.n	8005fec <_fwalk_sglue+0x10>

08006018 <iprintf>:
 8006018:	b40f      	push	{r0, r1, r2, r3}
 800601a:	b507      	push	{r0, r1, r2, lr}
 800601c:	4906      	ldr	r1, [pc, #24]	; (8006038 <iprintf+0x20>)
 800601e:	ab04      	add	r3, sp, #16
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	f853 2b04 	ldr.w	r2, [r3], #4
 8006026:	6881      	ldr	r1, [r0, #8]
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	f001 fcdd 	bl	80079e8 <_vfiprintf_r>
 800602e:	b003      	add	sp, #12
 8006030:	f85d eb04 	ldr.w	lr, [sp], #4
 8006034:	b004      	add	sp, #16
 8006036:	4770      	bx	lr
 8006038:	20000064 	.word	0x20000064

0800603c <_puts_r>:
 800603c:	6a03      	ldr	r3, [r0, #32]
 800603e:	b570      	push	{r4, r5, r6, lr}
 8006040:	6884      	ldr	r4, [r0, #8]
 8006042:	4605      	mov	r5, r0
 8006044:	460e      	mov	r6, r1
 8006046:	b90b      	cbnz	r3, 800604c <_puts_r+0x10>
 8006048:	f7ff ffb0 	bl	8005fac <__sinit>
 800604c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800604e:	07db      	lsls	r3, r3, #31
 8006050:	d405      	bmi.n	800605e <_puts_r+0x22>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	0598      	lsls	r0, r3, #22
 8006056:	d402      	bmi.n	800605e <_puts_r+0x22>
 8006058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800605a:	f000 f9a0 	bl	800639e <__retarget_lock_acquire_recursive>
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	0719      	lsls	r1, r3, #28
 8006062:	d513      	bpl.n	800608c <_puts_r+0x50>
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	b18b      	cbz	r3, 800608c <_puts_r+0x50>
 8006068:	3e01      	subs	r6, #1
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006070:	3b01      	subs	r3, #1
 8006072:	60a3      	str	r3, [r4, #8]
 8006074:	b9e9      	cbnz	r1, 80060b2 <_puts_r+0x76>
 8006076:	2b00      	cmp	r3, #0
 8006078:	da2e      	bge.n	80060d8 <_puts_r+0x9c>
 800607a:	4622      	mov	r2, r4
 800607c:	210a      	movs	r1, #10
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f87b 	bl	800617a <__swbuf_r>
 8006084:	3001      	adds	r0, #1
 8006086:	d007      	beq.n	8006098 <_puts_r+0x5c>
 8006088:	250a      	movs	r5, #10
 800608a:	e007      	b.n	800609c <_puts_r+0x60>
 800608c:	4621      	mov	r1, r4
 800608e:	4628      	mov	r0, r5
 8006090:	f000 f8b0 	bl	80061f4 <__swsetup_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	d0e7      	beq.n	8006068 <_puts_r+0x2c>
 8006098:	f04f 35ff 	mov.w	r5, #4294967295
 800609c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800609e:	07da      	lsls	r2, r3, #31
 80060a0:	d405      	bmi.n	80060ae <_puts_r+0x72>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	059b      	lsls	r3, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_puts_r+0x72>
 80060a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060aa:	f000 f979 	bl	80063a0 <__retarget_lock_release_recursive>
 80060ae:	4628      	mov	r0, r5
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da04      	bge.n	80060c0 <_puts_r+0x84>
 80060b6:	69a2      	ldr	r2, [r4, #24]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	dc06      	bgt.n	80060ca <_puts_r+0x8e>
 80060bc:	290a      	cmp	r1, #10
 80060be:	d004      	beq.n	80060ca <_puts_r+0x8e>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	7019      	strb	r1, [r3, #0]
 80060c8:	e7cf      	b.n	800606a <_puts_r+0x2e>
 80060ca:	4622      	mov	r2, r4
 80060cc:	4628      	mov	r0, r5
 80060ce:	f000 f854 	bl	800617a <__swbuf_r>
 80060d2:	3001      	adds	r0, #1
 80060d4:	d1c9      	bne.n	800606a <_puts_r+0x2e>
 80060d6:	e7df      	b.n	8006098 <_puts_r+0x5c>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	250a      	movs	r5, #10
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	6022      	str	r2, [r4, #0]
 80060e0:	701d      	strb	r5, [r3, #0]
 80060e2:	e7db      	b.n	800609c <_puts_r+0x60>

080060e4 <puts>:
 80060e4:	4b02      	ldr	r3, [pc, #8]	; (80060f0 <puts+0xc>)
 80060e6:	4601      	mov	r1, r0
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	f7ff bfa7 	b.w	800603c <_puts_r>
 80060ee:	bf00      	nop
 80060f0:	20000064 	.word	0x20000064

080060f4 <__sread>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	460c      	mov	r4, r1
 80060f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fc:	f000 f900 	bl	8006300 <_read_r>
 8006100:	2800      	cmp	r0, #0
 8006102:	bfab      	itete	ge
 8006104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006106:	89a3      	ldrhlt	r3, [r4, #12]
 8006108:	181b      	addge	r3, r3, r0
 800610a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800610e:	bfac      	ite	ge
 8006110:	6563      	strge	r3, [r4, #84]	; 0x54
 8006112:	81a3      	strhlt	r3, [r4, #12]
 8006114:	bd10      	pop	{r4, pc}

08006116 <__swrite>:
 8006116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611a:	461f      	mov	r7, r3
 800611c:	898b      	ldrh	r3, [r1, #12]
 800611e:	05db      	lsls	r3, r3, #23
 8006120:	4605      	mov	r5, r0
 8006122:	460c      	mov	r4, r1
 8006124:	4616      	mov	r6, r2
 8006126:	d505      	bpl.n	8006134 <__swrite+0x1e>
 8006128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612c:	2302      	movs	r3, #2
 800612e:	2200      	movs	r2, #0
 8006130:	f000 f8d4 	bl	80062dc <_lseek_r>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800613a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	4632      	mov	r2, r6
 8006142:	463b      	mov	r3, r7
 8006144:	4628      	mov	r0, r5
 8006146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800614a:	f000 b8eb 	b.w	8006324 <_write_r>

0800614e <__sseek>:
 800614e:	b510      	push	{r4, lr}
 8006150:	460c      	mov	r4, r1
 8006152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006156:	f000 f8c1 	bl	80062dc <_lseek_r>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	bf15      	itete	ne
 8006160:	6560      	strne	r0, [r4, #84]	; 0x54
 8006162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800616a:	81a3      	strheq	r3, [r4, #12]
 800616c:	bf18      	it	ne
 800616e:	81a3      	strhne	r3, [r4, #12]
 8006170:	bd10      	pop	{r4, pc}

08006172 <__sclose>:
 8006172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006176:	f000 b8a1 	b.w	80062bc <_close_r>

0800617a <__swbuf_r>:
 800617a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617c:	460e      	mov	r6, r1
 800617e:	4614      	mov	r4, r2
 8006180:	4605      	mov	r5, r0
 8006182:	b118      	cbz	r0, 800618c <__swbuf_r+0x12>
 8006184:	6a03      	ldr	r3, [r0, #32]
 8006186:	b90b      	cbnz	r3, 800618c <__swbuf_r+0x12>
 8006188:	f7ff ff10 	bl	8005fac <__sinit>
 800618c:	69a3      	ldr	r3, [r4, #24]
 800618e:	60a3      	str	r3, [r4, #8]
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	071a      	lsls	r2, r3, #28
 8006194:	d525      	bpl.n	80061e2 <__swbuf_r+0x68>
 8006196:	6923      	ldr	r3, [r4, #16]
 8006198:	b31b      	cbz	r3, 80061e2 <__swbuf_r+0x68>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	6922      	ldr	r2, [r4, #16]
 800619e:	1a98      	subs	r0, r3, r2
 80061a0:	6963      	ldr	r3, [r4, #20]
 80061a2:	b2f6      	uxtb	r6, r6
 80061a4:	4283      	cmp	r3, r0
 80061a6:	4637      	mov	r7, r6
 80061a8:	dc04      	bgt.n	80061b4 <__swbuf_r+0x3a>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4628      	mov	r0, r5
 80061ae:	f001 fdbb 	bl	8007d28 <_fflush_r>
 80061b2:	b9e0      	cbnz	r0, 80061ee <__swbuf_r+0x74>
 80061b4:	68a3      	ldr	r3, [r4, #8]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	60a3      	str	r3, [r4, #8]
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	6022      	str	r2, [r4, #0]
 80061c0:	701e      	strb	r6, [r3, #0]
 80061c2:	6962      	ldr	r2, [r4, #20]
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d004      	beq.n	80061d4 <__swbuf_r+0x5a>
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	07db      	lsls	r3, r3, #31
 80061ce:	d506      	bpl.n	80061de <__swbuf_r+0x64>
 80061d0:	2e0a      	cmp	r6, #10
 80061d2:	d104      	bne.n	80061de <__swbuf_r+0x64>
 80061d4:	4621      	mov	r1, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	f001 fda6 	bl	8007d28 <_fflush_r>
 80061dc:	b938      	cbnz	r0, 80061ee <__swbuf_r+0x74>
 80061de:	4638      	mov	r0, r7
 80061e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e2:	4621      	mov	r1, r4
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 f805 	bl	80061f4 <__swsetup_r>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d0d5      	beq.n	800619a <__swbuf_r+0x20>
 80061ee:	f04f 37ff 	mov.w	r7, #4294967295
 80061f2:	e7f4      	b.n	80061de <__swbuf_r+0x64>

080061f4 <__swsetup_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4b2a      	ldr	r3, [pc, #168]	; (80062a0 <__swsetup_r+0xac>)
 80061f8:	4605      	mov	r5, r0
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	460c      	mov	r4, r1
 80061fe:	b118      	cbz	r0, 8006208 <__swsetup_r+0x14>
 8006200:	6a03      	ldr	r3, [r0, #32]
 8006202:	b90b      	cbnz	r3, 8006208 <__swsetup_r+0x14>
 8006204:	f7ff fed2 	bl	8005fac <__sinit>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800620e:	0718      	lsls	r0, r3, #28
 8006210:	d422      	bmi.n	8006258 <__swsetup_r+0x64>
 8006212:	06d9      	lsls	r1, r3, #27
 8006214:	d407      	bmi.n	8006226 <__swsetup_r+0x32>
 8006216:	2309      	movs	r3, #9
 8006218:	602b      	str	r3, [r5, #0]
 800621a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	e034      	b.n	8006290 <__swsetup_r+0x9c>
 8006226:	0758      	lsls	r0, r3, #29
 8006228:	d512      	bpl.n	8006250 <__swsetup_r+0x5c>
 800622a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800622c:	b141      	cbz	r1, 8006240 <__swsetup_r+0x4c>
 800622e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006232:	4299      	cmp	r1, r3
 8006234:	d002      	beq.n	800623c <__swsetup_r+0x48>
 8006236:	4628      	mov	r0, r5
 8006238:	f000 ff30 	bl	800709c <_free_r>
 800623c:	2300      	movs	r3, #0
 800623e:	6363      	str	r3, [r4, #52]	; 0x34
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	2300      	movs	r3, #0
 800624a:	6063      	str	r3, [r4, #4]
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f043 0308 	orr.w	r3, r3, #8
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	b94b      	cbnz	r3, 8006270 <__swsetup_r+0x7c>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006266:	d003      	beq.n	8006270 <__swsetup_r+0x7c>
 8006268:	4621      	mov	r1, r4
 800626a:	4628      	mov	r0, r5
 800626c:	f001 fdaa 	bl	8007dc4 <__smakebuf_r>
 8006270:	89a0      	ldrh	r0, [r4, #12]
 8006272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006276:	f010 0301 	ands.w	r3, r0, #1
 800627a:	d00a      	beq.n	8006292 <__swsetup_r+0x9e>
 800627c:	2300      	movs	r3, #0
 800627e:	60a3      	str	r3, [r4, #8]
 8006280:	6963      	ldr	r3, [r4, #20]
 8006282:	425b      	negs	r3, r3
 8006284:	61a3      	str	r3, [r4, #24]
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	b943      	cbnz	r3, 800629c <__swsetup_r+0xa8>
 800628a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800628e:	d1c4      	bne.n	800621a <__swsetup_r+0x26>
 8006290:	bd38      	pop	{r3, r4, r5, pc}
 8006292:	0781      	lsls	r1, r0, #30
 8006294:	bf58      	it	pl
 8006296:	6963      	ldrpl	r3, [r4, #20]
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	e7f4      	b.n	8006286 <__swsetup_r+0x92>
 800629c:	2000      	movs	r0, #0
 800629e:	e7f7      	b.n	8006290 <__swsetup_r+0x9c>
 80062a0:	20000064 	.word	0x20000064

080062a4 <memset>:
 80062a4:	4402      	add	r2, r0
 80062a6:	4603      	mov	r3, r0
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d100      	bne.n	80062ae <memset+0xa>
 80062ac:	4770      	bx	lr
 80062ae:	f803 1b01 	strb.w	r1, [r3], #1
 80062b2:	e7f9      	b.n	80062a8 <memset+0x4>

080062b4 <_localeconv_r>:
 80062b4:	4800      	ldr	r0, [pc, #0]	; (80062b8 <_localeconv_r+0x4>)
 80062b6:	4770      	bx	lr
 80062b8:	20000158 	.word	0x20000158

080062bc <_close_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d06      	ldr	r5, [pc, #24]	; (80062d8 <_close_r+0x1c>)
 80062c0:	2300      	movs	r3, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	f7fb fd0b 	bl	8001ce2 <_close>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_close_r+0x1a>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_close_r+0x1a>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20000b90 	.word	0x20000b90

080062dc <_lseek_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d07      	ldr	r5, [pc, #28]	; (80062fc <_lseek_r+0x20>)
 80062e0:	4604      	mov	r4, r0
 80062e2:	4608      	mov	r0, r1
 80062e4:	4611      	mov	r1, r2
 80062e6:	2200      	movs	r2, #0
 80062e8:	602a      	str	r2, [r5, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	f7fb fd20 	bl	8001d30 <_lseek>
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d102      	bne.n	80062fa <_lseek_r+0x1e>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	b103      	cbz	r3, 80062fa <_lseek_r+0x1e>
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	20000b90 	.word	0x20000b90

08006300 <_read_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4d07      	ldr	r5, [pc, #28]	; (8006320 <_read_r+0x20>)
 8006304:	4604      	mov	r4, r0
 8006306:	4608      	mov	r0, r1
 8006308:	4611      	mov	r1, r2
 800630a:	2200      	movs	r2, #0
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	f7fb fcca 	bl	8001ca8 <_read>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_read_r+0x1e>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_read_r+0x1e>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20000b90 	.word	0x20000b90

08006324 <_write_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4d07      	ldr	r5, [pc, #28]	; (8006344 <_write_r+0x20>)
 8006328:	4604      	mov	r4, r0
 800632a:	4608      	mov	r0, r1
 800632c:	4611      	mov	r1, r2
 800632e:	2200      	movs	r2, #0
 8006330:	602a      	str	r2, [r5, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	f7fa fdc6 	bl	8000ec4 <_write>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_write_r+0x1e>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	b103      	cbz	r3, 8006342 <_write_r+0x1e>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	20000b90 	.word	0x20000b90

08006348 <__errno>:
 8006348:	4b01      	ldr	r3, [pc, #4]	; (8006350 <__errno+0x8>)
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20000064 	.word	0x20000064

08006354 <__libc_init_array>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	4d0d      	ldr	r5, [pc, #52]	; (800638c <__libc_init_array+0x38>)
 8006358:	4c0d      	ldr	r4, [pc, #52]	; (8006390 <__libc_init_array+0x3c>)
 800635a:	1b64      	subs	r4, r4, r5
 800635c:	10a4      	asrs	r4, r4, #2
 800635e:	2600      	movs	r6, #0
 8006360:	42a6      	cmp	r6, r4
 8006362:	d109      	bne.n	8006378 <__libc_init_array+0x24>
 8006364:	4d0b      	ldr	r5, [pc, #44]	; (8006394 <__libc_init_array+0x40>)
 8006366:	4c0c      	ldr	r4, [pc, #48]	; (8006398 <__libc_init_array+0x44>)
 8006368:	f001 fe5a 	bl	8008020 <_init>
 800636c:	1b64      	subs	r4, r4, r5
 800636e:	10a4      	asrs	r4, r4, #2
 8006370:	2600      	movs	r6, #0
 8006372:	42a6      	cmp	r6, r4
 8006374:	d105      	bne.n	8006382 <__libc_init_array+0x2e>
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	f855 3b04 	ldr.w	r3, [r5], #4
 800637c:	4798      	blx	r3
 800637e:	3601      	adds	r6, #1
 8006380:	e7ee      	b.n	8006360 <__libc_init_array+0xc>
 8006382:	f855 3b04 	ldr.w	r3, [r5], #4
 8006386:	4798      	blx	r3
 8006388:	3601      	adds	r6, #1
 800638a:	e7f2      	b.n	8006372 <__libc_init_array+0x1e>
 800638c:	080083e4 	.word	0x080083e4
 8006390:	080083e4 	.word	0x080083e4
 8006394:	080083e4 	.word	0x080083e4
 8006398:	080083e8 	.word	0x080083e8

0800639c <__retarget_lock_init_recursive>:
 800639c:	4770      	bx	lr

0800639e <__retarget_lock_acquire_recursive>:
 800639e:	4770      	bx	lr

080063a0 <__retarget_lock_release_recursive>:
 80063a0:	4770      	bx	lr

080063a2 <quorem>:
 80063a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a6:	6903      	ldr	r3, [r0, #16]
 80063a8:	690c      	ldr	r4, [r1, #16]
 80063aa:	42a3      	cmp	r3, r4
 80063ac:	4607      	mov	r7, r0
 80063ae:	db7e      	blt.n	80064ae <quorem+0x10c>
 80063b0:	3c01      	subs	r4, #1
 80063b2:	f101 0814 	add.w	r8, r1, #20
 80063b6:	f100 0514 	add.w	r5, r0, #20
 80063ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063c8:	3301      	adds	r3, #1
 80063ca:	429a      	cmp	r2, r3
 80063cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80063d8:	d331      	bcc.n	800643e <quorem+0x9c>
 80063da:	f04f 0e00 	mov.w	lr, #0
 80063de:	4640      	mov	r0, r8
 80063e0:	46ac      	mov	ip, r5
 80063e2:	46f2      	mov	sl, lr
 80063e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80063e8:	b293      	uxth	r3, r2
 80063ea:	fb06 e303 	mla	r3, r6, r3, lr
 80063ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063f2:	0c1a      	lsrs	r2, r3, #16
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	ebaa 0303 	sub.w	r3, sl, r3
 80063fa:	f8dc a000 	ldr.w	sl, [ip]
 80063fe:	fa13 f38a 	uxtah	r3, r3, sl
 8006402:	fb06 220e 	mla	r2, r6, lr, r2
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	9b00      	ldr	r3, [sp, #0]
 800640a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800640e:	b292      	uxth	r2, r2
 8006410:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006418:	f8bd 3000 	ldrh.w	r3, [sp]
 800641c:	4581      	cmp	r9, r0
 800641e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006422:	f84c 3b04 	str.w	r3, [ip], #4
 8006426:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800642a:	d2db      	bcs.n	80063e4 <quorem+0x42>
 800642c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006430:	b92b      	cbnz	r3, 800643e <quorem+0x9c>
 8006432:	9b01      	ldr	r3, [sp, #4]
 8006434:	3b04      	subs	r3, #4
 8006436:	429d      	cmp	r5, r3
 8006438:	461a      	mov	r2, r3
 800643a:	d32c      	bcc.n	8006496 <quorem+0xf4>
 800643c:	613c      	str	r4, [r7, #16]
 800643e:	4638      	mov	r0, r7
 8006440:	f001 f9a8 	bl	8007794 <__mcmp>
 8006444:	2800      	cmp	r0, #0
 8006446:	db22      	blt.n	800648e <quorem+0xec>
 8006448:	3601      	adds	r6, #1
 800644a:	4629      	mov	r1, r5
 800644c:	2000      	movs	r0, #0
 800644e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006452:	f8d1 c000 	ldr.w	ip, [r1]
 8006456:	b293      	uxth	r3, r2
 8006458:	1ac3      	subs	r3, r0, r3
 800645a:	0c12      	lsrs	r2, r2, #16
 800645c:	fa13 f38c 	uxtah	r3, r3, ip
 8006460:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006468:	b29b      	uxth	r3, r3
 800646a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800646e:	45c1      	cmp	r9, r8
 8006470:	f841 3b04 	str.w	r3, [r1], #4
 8006474:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006478:	d2e9      	bcs.n	800644e <quorem+0xac>
 800647a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800647e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006482:	b922      	cbnz	r2, 800648e <quorem+0xec>
 8006484:	3b04      	subs	r3, #4
 8006486:	429d      	cmp	r5, r3
 8006488:	461a      	mov	r2, r3
 800648a:	d30a      	bcc.n	80064a2 <quorem+0x100>
 800648c:	613c      	str	r4, [r7, #16]
 800648e:	4630      	mov	r0, r6
 8006490:	b003      	add	sp, #12
 8006492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	3b04      	subs	r3, #4
 800649a:	2a00      	cmp	r2, #0
 800649c:	d1ce      	bne.n	800643c <quorem+0x9a>
 800649e:	3c01      	subs	r4, #1
 80064a0:	e7c9      	b.n	8006436 <quorem+0x94>
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	3b04      	subs	r3, #4
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	d1f0      	bne.n	800648c <quorem+0xea>
 80064aa:	3c01      	subs	r4, #1
 80064ac:	e7eb      	b.n	8006486 <quorem+0xe4>
 80064ae:	2000      	movs	r0, #0
 80064b0:	e7ee      	b.n	8006490 <quorem+0xee>
 80064b2:	0000      	movs	r0, r0
 80064b4:	0000      	movs	r0, r0
	...

080064b8 <_dtoa_r>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	ed2d 8b04 	vpush	{d8-d9}
 80064c0:	69c5      	ldr	r5, [r0, #28]
 80064c2:	b093      	sub	sp, #76	; 0x4c
 80064c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80064c8:	ec57 6b10 	vmov	r6, r7, d0
 80064cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064d0:	9107      	str	r1, [sp, #28]
 80064d2:	4604      	mov	r4, r0
 80064d4:	920a      	str	r2, [sp, #40]	; 0x28
 80064d6:	930d      	str	r3, [sp, #52]	; 0x34
 80064d8:	b975      	cbnz	r5, 80064f8 <_dtoa_r+0x40>
 80064da:	2010      	movs	r0, #16
 80064dc:	f000 fe2a 	bl	8007134 <malloc>
 80064e0:	4602      	mov	r2, r0
 80064e2:	61e0      	str	r0, [r4, #28]
 80064e4:	b920      	cbnz	r0, 80064f0 <_dtoa_r+0x38>
 80064e6:	4bae      	ldr	r3, [pc, #696]	; (80067a0 <_dtoa_r+0x2e8>)
 80064e8:	21ef      	movs	r1, #239	; 0xef
 80064ea:	48ae      	ldr	r0, [pc, #696]	; (80067a4 <_dtoa_r+0x2ec>)
 80064ec:	f001 fce6 	bl	8007ebc <__assert_func>
 80064f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064f4:	6005      	str	r5, [r0, #0]
 80064f6:	60c5      	str	r5, [r0, #12]
 80064f8:	69e3      	ldr	r3, [r4, #28]
 80064fa:	6819      	ldr	r1, [r3, #0]
 80064fc:	b151      	cbz	r1, 8006514 <_dtoa_r+0x5c>
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	604a      	str	r2, [r1, #4]
 8006502:	2301      	movs	r3, #1
 8006504:	4093      	lsls	r3, r2
 8006506:	608b      	str	r3, [r1, #8]
 8006508:	4620      	mov	r0, r4
 800650a:	f000 ff07 	bl	800731c <_Bfree>
 800650e:	69e3      	ldr	r3, [r4, #28]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	1e3b      	subs	r3, r7, #0
 8006516:	bfbb      	ittet	lt
 8006518:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800651c:	9303      	strlt	r3, [sp, #12]
 800651e:	2300      	movge	r3, #0
 8006520:	2201      	movlt	r2, #1
 8006522:	bfac      	ite	ge
 8006524:	f8c8 3000 	strge.w	r3, [r8]
 8006528:	f8c8 2000 	strlt.w	r2, [r8]
 800652c:	4b9e      	ldr	r3, [pc, #632]	; (80067a8 <_dtoa_r+0x2f0>)
 800652e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006532:	ea33 0308 	bics.w	r3, r3, r8
 8006536:	d11b      	bne.n	8006570 <_dtoa_r+0xb8>
 8006538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800653a:	f242 730f 	movw	r3, #9999	; 0x270f
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006544:	4333      	orrs	r3, r6
 8006546:	f000 8593 	beq.w	8007070 <_dtoa_r+0xbb8>
 800654a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800654c:	b963      	cbnz	r3, 8006568 <_dtoa_r+0xb0>
 800654e:	4b97      	ldr	r3, [pc, #604]	; (80067ac <_dtoa_r+0x2f4>)
 8006550:	e027      	b.n	80065a2 <_dtoa_r+0xea>
 8006552:	4b97      	ldr	r3, [pc, #604]	; (80067b0 <_dtoa_r+0x2f8>)
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	9800      	ldr	r0, [sp, #0]
 800655e:	b013      	add	sp, #76	; 0x4c
 8006560:	ecbd 8b04 	vpop	{d8-d9}
 8006564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006568:	4b90      	ldr	r3, [pc, #576]	; (80067ac <_dtoa_r+0x2f4>)
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	3303      	adds	r3, #3
 800656e:	e7f3      	b.n	8006558 <_dtoa_r+0xa0>
 8006570:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006574:	2200      	movs	r2, #0
 8006576:	ec51 0b17 	vmov	r0, r1, d7
 800657a:	eeb0 8a47 	vmov.f32	s16, s14
 800657e:	eef0 8a67 	vmov.f32	s17, s15
 8006582:	2300      	movs	r3, #0
 8006584:	f7fa fab0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006588:	4681      	mov	r9, r0
 800658a:	b160      	cbz	r0, 80065a6 <_dtoa_r+0xee>
 800658c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800658e:	2301      	movs	r3, #1
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8568 	beq.w	800706a <_dtoa_r+0xbb2>
 800659a:	4b86      	ldr	r3, [pc, #536]	; (80067b4 <_dtoa_r+0x2fc>)
 800659c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	e7da      	b.n	800655c <_dtoa_r+0xa4>
 80065a6:	aa10      	add	r2, sp, #64	; 0x40
 80065a8:	a911      	add	r1, sp, #68	; 0x44
 80065aa:	4620      	mov	r0, r4
 80065ac:	eeb0 0a48 	vmov.f32	s0, s16
 80065b0:	eef0 0a68 	vmov.f32	s1, s17
 80065b4:	f001 f994 	bl	80078e0 <__d2b>
 80065b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80065bc:	4682      	mov	sl, r0
 80065be:	2d00      	cmp	r5, #0
 80065c0:	d07f      	beq.n	80066c2 <_dtoa_r+0x20a>
 80065c2:	ee18 3a90 	vmov	r3, s17
 80065c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80065ce:	ec51 0b18 	vmov	r0, r1, d8
 80065d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80065d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80065de:	4619      	mov	r1, r3
 80065e0:	2200      	movs	r2, #0
 80065e2:	4b75      	ldr	r3, [pc, #468]	; (80067b8 <_dtoa_r+0x300>)
 80065e4:	f7f9 fe60 	bl	80002a8 <__aeabi_dsub>
 80065e8:	a367      	add	r3, pc, #412	; (adr r3, 8006788 <_dtoa_r+0x2d0>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7fa f813 	bl	8000618 <__aeabi_dmul>
 80065f2:	a367      	add	r3, pc, #412	; (adr r3, 8006790 <_dtoa_r+0x2d8>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f7f9 fe58 	bl	80002ac <__adddf3>
 80065fc:	4606      	mov	r6, r0
 80065fe:	4628      	mov	r0, r5
 8006600:	460f      	mov	r7, r1
 8006602:	f7f9 ff9f 	bl	8000544 <__aeabi_i2d>
 8006606:	a364      	add	r3, pc, #400	; (adr r3, 8006798 <_dtoa_r+0x2e0>)
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f7fa f804 	bl	8000618 <__aeabi_dmul>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4630      	mov	r0, r6
 8006616:	4639      	mov	r1, r7
 8006618:	f7f9 fe48 	bl	80002ac <__adddf3>
 800661c:	4606      	mov	r6, r0
 800661e:	460f      	mov	r7, r1
 8006620:	f7fa faaa 	bl	8000b78 <__aeabi_d2iz>
 8006624:	2200      	movs	r2, #0
 8006626:	4683      	mov	fp, r0
 8006628:	2300      	movs	r3, #0
 800662a:	4630      	mov	r0, r6
 800662c:	4639      	mov	r1, r7
 800662e:	f7fa fa65 	bl	8000afc <__aeabi_dcmplt>
 8006632:	b148      	cbz	r0, 8006648 <_dtoa_r+0x190>
 8006634:	4658      	mov	r0, fp
 8006636:	f7f9 ff85 	bl	8000544 <__aeabi_i2d>
 800663a:	4632      	mov	r2, r6
 800663c:	463b      	mov	r3, r7
 800663e:	f7fa fa53 	bl	8000ae8 <__aeabi_dcmpeq>
 8006642:	b908      	cbnz	r0, 8006648 <_dtoa_r+0x190>
 8006644:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006648:	f1bb 0f16 	cmp.w	fp, #22
 800664c:	d857      	bhi.n	80066fe <_dtoa_r+0x246>
 800664e:	4b5b      	ldr	r3, [pc, #364]	; (80067bc <_dtoa_r+0x304>)
 8006650:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	ec51 0b18 	vmov	r0, r1, d8
 800665c:	f7fa fa4e 	bl	8000afc <__aeabi_dcmplt>
 8006660:	2800      	cmp	r0, #0
 8006662:	d04e      	beq.n	8006702 <_dtoa_r+0x24a>
 8006664:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006668:	2300      	movs	r3, #0
 800666a:	930c      	str	r3, [sp, #48]	; 0x30
 800666c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800666e:	1b5b      	subs	r3, r3, r5
 8006670:	1e5a      	subs	r2, r3, #1
 8006672:	bf45      	ittet	mi
 8006674:	f1c3 0301 	rsbmi	r3, r3, #1
 8006678:	9305      	strmi	r3, [sp, #20]
 800667a:	2300      	movpl	r3, #0
 800667c:	2300      	movmi	r3, #0
 800667e:	9206      	str	r2, [sp, #24]
 8006680:	bf54      	ite	pl
 8006682:	9305      	strpl	r3, [sp, #20]
 8006684:	9306      	strmi	r3, [sp, #24]
 8006686:	f1bb 0f00 	cmp.w	fp, #0
 800668a:	db3c      	blt.n	8006706 <_dtoa_r+0x24e>
 800668c:	9b06      	ldr	r3, [sp, #24]
 800668e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006692:	445b      	add	r3, fp
 8006694:	9306      	str	r3, [sp, #24]
 8006696:	2300      	movs	r3, #0
 8006698:	9308      	str	r3, [sp, #32]
 800669a:	9b07      	ldr	r3, [sp, #28]
 800669c:	2b09      	cmp	r3, #9
 800669e:	d868      	bhi.n	8006772 <_dtoa_r+0x2ba>
 80066a0:	2b05      	cmp	r3, #5
 80066a2:	bfc4      	itt	gt
 80066a4:	3b04      	subgt	r3, #4
 80066a6:	9307      	strgt	r3, [sp, #28]
 80066a8:	9b07      	ldr	r3, [sp, #28]
 80066aa:	f1a3 0302 	sub.w	r3, r3, #2
 80066ae:	bfcc      	ite	gt
 80066b0:	2500      	movgt	r5, #0
 80066b2:	2501      	movle	r5, #1
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	f200 8085 	bhi.w	80067c4 <_dtoa_r+0x30c>
 80066ba:	e8df f003 	tbb	[pc, r3]
 80066be:	3b2e      	.short	0x3b2e
 80066c0:	5839      	.short	0x5839
 80066c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066c6:	441d      	add	r5, r3
 80066c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	bfc1      	itttt	gt
 80066d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80066d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80066dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80066e0:	bfd6      	itet	le
 80066e2:	f1c3 0320 	rsble	r3, r3, #32
 80066e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80066ea:	fa06 f003 	lslle.w	r0, r6, r3
 80066ee:	f7f9 ff19 	bl	8000524 <__aeabi_ui2d>
 80066f2:	2201      	movs	r2, #1
 80066f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80066f8:	3d01      	subs	r5, #1
 80066fa:	920e      	str	r2, [sp, #56]	; 0x38
 80066fc:	e76f      	b.n	80065de <_dtoa_r+0x126>
 80066fe:	2301      	movs	r3, #1
 8006700:	e7b3      	b.n	800666a <_dtoa_r+0x1b2>
 8006702:	900c      	str	r0, [sp, #48]	; 0x30
 8006704:	e7b2      	b.n	800666c <_dtoa_r+0x1b4>
 8006706:	9b05      	ldr	r3, [sp, #20]
 8006708:	eba3 030b 	sub.w	r3, r3, fp
 800670c:	9305      	str	r3, [sp, #20]
 800670e:	f1cb 0300 	rsb	r3, fp, #0
 8006712:	9308      	str	r3, [sp, #32]
 8006714:	2300      	movs	r3, #0
 8006716:	930b      	str	r3, [sp, #44]	; 0x2c
 8006718:	e7bf      	b.n	800669a <_dtoa_r+0x1e2>
 800671a:	2300      	movs	r3, #0
 800671c:	9309      	str	r3, [sp, #36]	; 0x24
 800671e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006720:	2b00      	cmp	r3, #0
 8006722:	dc52      	bgt.n	80067ca <_dtoa_r+0x312>
 8006724:	2301      	movs	r3, #1
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	9304      	str	r3, [sp, #16]
 800672a:	461a      	mov	r2, r3
 800672c:	920a      	str	r2, [sp, #40]	; 0x28
 800672e:	e00b      	b.n	8006748 <_dtoa_r+0x290>
 8006730:	2301      	movs	r3, #1
 8006732:	e7f3      	b.n	800671c <_dtoa_r+0x264>
 8006734:	2300      	movs	r3, #0
 8006736:	9309      	str	r3, [sp, #36]	; 0x24
 8006738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673a:	445b      	add	r3, fp
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	3301      	adds	r3, #1
 8006740:	2b01      	cmp	r3, #1
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	bfb8      	it	lt
 8006746:	2301      	movlt	r3, #1
 8006748:	69e0      	ldr	r0, [r4, #28]
 800674a:	2100      	movs	r1, #0
 800674c:	2204      	movs	r2, #4
 800674e:	f102 0614 	add.w	r6, r2, #20
 8006752:	429e      	cmp	r6, r3
 8006754:	d93d      	bls.n	80067d2 <_dtoa_r+0x31a>
 8006756:	6041      	str	r1, [r0, #4]
 8006758:	4620      	mov	r0, r4
 800675a:	f000 fd9f 	bl	800729c <_Balloc>
 800675e:	9000      	str	r0, [sp, #0]
 8006760:	2800      	cmp	r0, #0
 8006762:	d139      	bne.n	80067d8 <_dtoa_r+0x320>
 8006764:	4b16      	ldr	r3, [pc, #88]	; (80067c0 <_dtoa_r+0x308>)
 8006766:	4602      	mov	r2, r0
 8006768:	f240 11af 	movw	r1, #431	; 0x1af
 800676c:	e6bd      	b.n	80064ea <_dtoa_r+0x32>
 800676e:	2301      	movs	r3, #1
 8006770:	e7e1      	b.n	8006736 <_dtoa_r+0x27e>
 8006772:	2501      	movs	r5, #1
 8006774:	2300      	movs	r3, #0
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	9509      	str	r5, [sp, #36]	; 0x24
 800677a:	f04f 33ff 	mov.w	r3, #4294967295
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	9304      	str	r3, [sp, #16]
 8006782:	2200      	movs	r2, #0
 8006784:	2312      	movs	r3, #18
 8006786:	e7d1      	b.n	800672c <_dtoa_r+0x274>
 8006788:	636f4361 	.word	0x636f4361
 800678c:	3fd287a7 	.word	0x3fd287a7
 8006790:	8b60c8b3 	.word	0x8b60c8b3
 8006794:	3fc68a28 	.word	0x3fc68a28
 8006798:	509f79fb 	.word	0x509f79fb
 800679c:	3fd34413 	.word	0x3fd34413
 80067a0:	080080ad 	.word	0x080080ad
 80067a4:	080080c4 	.word	0x080080c4
 80067a8:	7ff00000 	.word	0x7ff00000
 80067ac:	080080a9 	.word	0x080080a9
 80067b0:	080080a0 	.word	0x080080a0
 80067b4:	0800807d 	.word	0x0800807d
 80067b8:	3ff80000 	.word	0x3ff80000
 80067bc:	080081b0 	.word	0x080081b0
 80067c0:	0800811c 	.word	0x0800811c
 80067c4:	2301      	movs	r3, #1
 80067c6:	9309      	str	r3, [sp, #36]	; 0x24
 80067c8:	e7d7      	b.n	800677a <_dtoa_r+0x2c2>
 80067ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	9304      	str	r3, [sp, #16]
 80067d0:	e7ba      	b.n	8006748 <_dtoa_r+0x290>
 80067d2:	3101      	adds	r1, #1
 80067d4:	0052      	lsls	r2, r2, #1
 80067d6:	e7ba      	b.n	800674e <_dtoa_r+0x296>
 80067d8:	69e3      	ldr	r3, [r4, #28]
 80067da:	9a00      	ldr	r2, [sp, #0]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	9b04      	ldr	r3, [sp, #16]
 80067e0:	2b0e      	cmp	r3, #14
 80067e2:	f200 80a8 	bhi.w	8006936 <_dtoa_r+0x47e>
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	f000 80a5 	beq.w	8006936 <_dtoa_r+0x47e>
 80067ec:	f1bb 0f00 	cmp.w	fp, #0
 80067f0:	dd38      	ble.n	8006864 <_dtoa_r+0x3ac>
 80067f2:	4bc0      	ldr	r3, [pc, #768]	; (8006af4 <_dtoa_r+0x63c>)
 80067f4:	f00b 020f 	and.w	r2, fp, #15
 80067f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006800:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006804:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006808:	d019      	beq.n	800683e <_dtoa_r+0x386>
 800680a:	4bbb      	ldr	r3, [pc, #748]	; (8006af8 <_dtoa_r+0x640>)
 800680c:	ec51 0b18 	vmov	r0, r1, d8
 8006810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006814:	f7fa f82a 	bl	800086c <__aeabi_ddiv>
 8006818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800681c:	f008 080f 	and.w	r8, r8, #15
 8006820:	2503      	movs	r5, #3
 8006822:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006af8 <_dtoa_r+0x640>
 8006826:	f1b8 0f00 	cmp.w	r8, #0
 800682a:	d10a      	bne.n	8006842 <_dtoa_r+0x38a>
 800682c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006830:	4632      	mov	r2, r6
 8006832:	463b      	mov	r3, r7
 8006834:	f7fa f81a 	bl	800086c <__aeabi_ddiv>
 8006838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800683c:	e02b      	b.n	8006896 <_dtoa_r+0x3de>
 800683e:	2502      	movs	r5, #2
 8006840:	e7ef      	b.n	8006822 <_dtoa_r+0x36a>
 8006842:	f018 0f01 	tst.w	r8, #1
 8006846:	d008      	beq.n	800685a <_dtoa_r+0x3a2>
 8006848:	4630      	mov	r0, r6
 800684a:	4639      	mov	r1, r7
 800684c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006850:	f7f9 fee2 	bl	8000618 <__aeabi_dmul>
 8006854:	3501      	adds	r5, #1
 8006856:	4606      	mov	r6, r0
 8006858:	460f      	mov	r7, r1
 800685a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800685e:	f109 0908 	add.w	r9, r9, #8
 8006862:	e7e0      	b.n	8006826 <_dtoa_r+0x36e>
 8006864:	f000 809f 	beq.w	80069a6 <_dtoa_r+0x4ee>
 8006868:	f1cb 0600 	rsb	r6, fp, #0
 800686c:	4ba1      	ldr	r3, [pc, #644]	; (8006af4 <_dtoa_r+0x63c>)
 800686e:	4fa2      	ldr	r7, [pc, #648]	; (8006af8 <_dtoa_r+0x640>)
 8006870:	f006 020f 	and.w	r2, r6, #15
 8006874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	ec51 0b18 	vmov	r0, r1, d8
 8006880:	f7f9 feca 	bl	8000618 <__aeabi_dmul>
 8006884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006888:	1136      	asrs	r6, r6, #4
 800688a:	2300      	movs	r3, #0
 800688c:	2502      	movs	r5, #2
 800688e:	2e00      	cmp	r6, #0
 8006890:	d17e      	bne.n	8006990 <_dtoa_r+0x4d8>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1d0      	bne.n	8006838 <_dtoa_r+0x380>
 8006896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006898:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8084 	beq.w	80069aa <_dtoa_r+0x4f2>
 80068a2:	4b96      	ldr	r3, [pc, #600]	; (8006afc <_dtoa_r+0x644>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7fa f927 	bl	8000afc <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d07b      	beq.n	80069aa <_dtoa_r+0x4f2>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d078      	beq.n	80069aa <_dtoa_r+0x4f2>
 80068b8:	9b01      	ldr	r3, [sp, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dd39      	ble.n	8006932 <_dtoa_r+0x47a>
 80068be:	4b90      	ldr	r3, [pc, #576]	; (8006b00 <_dtoa_r+0x648>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	4640      	mov	r0, r8
 80068c4:	4649      	mov	r1, r9
 80068c6:	f7f9 fea7 	bl	8000618 <__aeabi_dmul>
 80068ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ce:	9e01      	ldr	r6, [sp, #4]
 80068d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80068d4:	3501      	adds	r5, #1
 80068d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80068da:	4628      	mov	r0, r5
 80068dc:	f7f9 fe32 	bl	8000544 <__aeabi_i2d>
 80068e0:	4642      	mov	r2, r8
 80068e2:	464b      	mov	r3, r9
 80068e4:	f7f9 fe98 	bl	8000618 <__aeabi_dmul>
 80068e8:	4b86      	ldr	r3, [pc, #536]	; (8006b04 <_dtoa_r+0x64c>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	f7f9 fcde 	bl	80002ac <__adddf3>
 80068f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80068f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f8:	9303      	str	r3, [sp, #12]
 80068fa:	2e00      	cmp	r6, #0
 80068fc:	d158      	bne.n	80069b0 <_dtoa_r+0x4f8>
 80068fe:	4b82      	ldr	r3, [pc, #520]	; (8006b08 <_dtoa_r+0x650>)
 8006900:	2200      	movs	r2, #0
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7f9 fccf 	bl	80002a8 <__aeabi_dsub>
 800690a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800690e:	4680      	mov	r8, r0
 8006910:	4689      	mov	r9, r1
 8006912:	f7fa f911 	bl	8000b38 <__aeabi_dcmpgt>
 8006916:	2800      	cmp	r0, #0
 8006918:	f040 8296 	bne.w	8006e48 <_dtoa_r+0x990>
 800691c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006920:	4640      	mov	r0, r8
 8006922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006926:	4649      	mov	r1, r9
 8006928:	f7fa f8e8 	bl	8000afc <__aeabi_dcmplt>
 800692c:	2800      	cmp	r0, #0
 800692e:	f040 8289 	bne.w	8006e44 <_dtoa_r+0x98c>
 8006932:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006938:	2b00      	cmp	r3, #0
 800693a:	f2c0 814e 	blt.w	8006bda <_dtoa_r+0x722>
 800693e:	f1bb 0f0e 	cmp.w	fp, #14
 8006942:	f300 814a 	bgt.w	8006bda <_dtoa_r+0x722>
 8006946:	4b6b      	ldr	r3, [pc, #428]	; (8006af4 <_dtoa_r+0x63c>)
 8006948:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800694c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	f280 80dc 	bge.w	8006b10 <_dtoa_r+0x658>
 8006958:	9b04      	ldr	r3, [sp, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f300 80d8 	bgt.w	8006b10 <_dtoa_r+0x658>
 8006960:	f040 826f 	bne.w	8006e42 <_dtoa_r+0x98a>
 8006964:	4b68      	ldr	r3, [pc, #416]	; (8006b08 <_dtoa_r+0x650>)
 8006966:	2200      	movs	r2, #0
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7f9 fe54 	bl	8000618 <__aeabi_dmul>
 8006970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006974:	f7fa f8d6 	bl	8000b24 <__aeabi_dcmpge>
 8006978:	9e04      	ldr	r6, [sp, #16]
 800697a:	4637      	mov	r7, r6
 800697c:	2800      	cmp	r0, #0
 800697e:	f040 8245 	bne.w	8006e0c <_dtoa_r+0x954>
 8006982:	9d00      	ldr	r5, [sp, #0]
 8006984:	2331      	movs	r3, #49	; 0x31
 8006986:	f805 3b01 	strb.w	r3, [r5], #1
 800698a:	f10b 0b01 	add.w	fp, fp, #1
 800698e:	e241      	b.n	8006e14 <_dtoa_r+0x95c>
 8006990:	07f2      	lsls	r2, r6, #31
 8006992:	d505      	bpl.n	80069a0 <_dtoa_r+0x4e8>
 8006994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006998:	f7f9 fe3e 	bl	8000618 <__aeabi_dmul>
 800699c:	3501      	adds	r5, #1
 800699e:	2301      	movs	r3, #1
 80069a0:	1076      	asrs	r6, r6, #1
 80069a2:	3708      	adds	r7, #8
 80069a4:	e773      	b.n	800688e <_dtoa_r+0x3d6>
 80069a6:	2502      	movs	r5, #2
 80069a8:	e775      	b.n	8006896 <_dtoa_r+0x3de>
 80069aa:	9e04      	ldr	r6, [sp, #16]
 80069ac:	465f      	mov	r7, fp
 80069ae:	e792      	b.n	80068d6 <_dtoa_r+0x41e>
 80069b0:	9900      	ldr	r1, [sp, #0]
 80069b2:	4b50      	ldr	r3, [pc, #320]	; (8006af4 <_dtoa_r+0x63c>)
 80069b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069b8:	4431      	add	r1, r6
 80069ba:	9102      	str	r1, [sp, #8]
 80069bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069be:	eeb0 9a47 	vmov.f32	s18, s14
 80069c2:	eef0 9a67 	vmov.f32	s19, s15
 80069c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069ce:	2900      	cmp	r1, #0
 80069d0:	d044      	beq.n	8006a5c <_dtoa_r+0x5a4>
 80069d2:	494e      	ldr	r1, [pc, #312]	; (8006b0c <_dtoa_r+0x654>)
 80069d4:	2000      	movs	r0, #0
 80069d6:	f7f9 ff49 	bl	800086c <__aeabi_ddiv>
 80069da:	ec53 2b19 	vmov	r2, r3, d9
 80069de:	f7f9 fc63 	bl	80002a8 <__aeabi_dsub>
 80069e2:	9d00      	ldr	r5, [sp, #0]
 80069e4:	ec41 0b19 	vmov	d9, r0, r1
 80069e8:	4649      	mov	r1, r9
 80069ea:	4640      	mov	r0, r8
 80069ec:	f7fa f8c4 	bl	8000b78 <__aeabi_d2iz>
 80069f0:	4606      	mov	r6, r0
 80069f2:	f7f9 fda7 	bl	8000544 <__aeabi_i2d>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4640      	mov	r0, r8
 80069fc:	4649      	mov	r1, r9
 80069fe:	f7f9 fc53 	bl	80002a8 <__aeabi_dsub>
 8006a02:	3630      	adds	r6, #48	; 0x30
 8006a04:	f805 6b01 	strb.w	r6, [r5], #1
 8006a08:	ec53 2b19 	vmov	r2, r3, d9
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	4689      	mov	r9, r1
 8006a10:	f7fa f874 	bl	8000afc <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d164      	bne.n	8006ae2 <_dtoa_r+0x62a>
 8006a18:	4642      	mov	r2, r8
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	4937      	ldr	r1, [pc, #220]	; (8006afc <_dtoa_r+0x644>)
 8006a1e:	2000      	movs	r0, #0
 8006a20:	f7f9 fc42 	bl	80002a8 <__aeabi_dsub>
 8006a24:	ec53 2b19 	vmov	r2, r3, d9
 8006a28:	f7fa f868 	bl	8000afc <__aeabi_dcmplt>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f040 80b6 	bne.w	8006b9e <_dtoa_r+0x6e6>
 8006a32:	9b02      	ldr	r3, [sp, #8]
 8006a34:	429d      	cmp	r5, r3
 8006a36:	f43f af7c 	beq.w	8006932 <_dtoa_r+0x47a>
 8006a3a:	4b31      	ldr	r3, [pc, #196]	; (8006b00 <_dtoa_r+0x648>)
 8006a3c:	ec51 0b19 	vmov	r0, r1, d9
 8006a40:	2200      	movs	r2, #0
 8006a42:	f7f9 fde9 	bl	8000618 <__aeabi_dmul>
 8006a46:	4b2e      	ldr	r3, [pc, #184]	; (8006b00 <_dtoa_r+0x648>)
 8006a48:	ec41 0b19 	vmov	d9, r0, r1
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4640      	mov	r0, r8
 8006a50:	4649      	mov	r1, r9
 8006a52:	f7f9 fde1 	bl	8000618 <__aeabi_dmul>
 8006a56:	4680      	mov	r8, r0
 8006a58:	4689      	mov	r9, r1
 8006a5a:	e7c5      	b.n	80069e8 <_dtoa_r+0x530>
 8006a5c:	ec51 0b17 	vmov	r0, r1, d7
 8006a60:	f7f9 fdda 	bl	8000618 <__aeabi_dmul>
 8006a64:	9b02      	ldr	r3, [sp, #8]
 8006a66:	9d00      	ldr	r5, [sp, #0]
 8006a68:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a6a:	ec41 0b19 	vmov	d9, r0, r1
 8006a6e:	4649      	mov	r1, r9
 8006a70:	4640      	mov	r0, r8
 8006a72:	f7fa f881 	bl	8000b78 <__aeabi_d2iz>
 8006a76:	4606      	mov	r6, r0
 8006a78:	f7f9 fd64 	bl	8000544 <__aeabi_i2d>
 8006a7c:	3630      	adds	r6, #48	; 0x30
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4640      	mov	r0, r8
 8006a84:	4649      	mov	r1, r9
 8006a86:	f7f9 fc0f 	bl	80002a8 <__aeabi_dsub>
 8006a8a:	f805 6b01 	strb.w	r6, [r5], #1
 8006a8e:	9b02      	ldr	r3, [sp, #8]
 8006a90:	429d      	cmp	r5, r3
 8006a92:	4680      	mov	r8, r0
 8006a94:	4689      	mov	r9, r1
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	d124      	bne.n	8006ae6 <_dtoa_r+0x62e>
 8006a9c:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <_dtoa_r+0x654>)
 8006a9e:	ec51 0b19 	vmov	r0, r1, d9
 8006aa2:	f7f9 fc03 	bl	80002ac <__adddf3>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4640      	mov	r0, r8
 8006aac:	4649      	mov	r1, r9
 8006aae:	f7fa f843 	bl	8000b38 <__aeabi_dcmpgt>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d173      	bne.n	8006b9e <_dtoa_r+0x6e6>
 8006ab6:	ec53 2b19 	vmov	r2, r3, d9
 8006aba:	4914      	ldr	r1, [pc, #80]	; (8006b0c <_dtoa_r+0x654>)
 8006abc:	2000      	movs	r0, #0
 8006abe:	f7f9 fbf3 	bl	80002a8 <__aeabi_dsub>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4649      	mov	r1, r9
 8006aca:	f7fa f817 	bl	8000afc <__aeabi_dcmplt>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	f43f af2f 	beq.w	8006932 <_dtoa_r+0x47a>
 8006ad4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ad6:	1e6b      	subs	r3, r5, #1
 8006ad8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ada:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ade:	2b30      	cmp	r3, #48	; 0x30
 8006ae0:	d0f8      	beq.n	8006ad4 <_dtoa_r+0x61c>
 8006ae2:	46bb      	mov	fp, r7
 8006ae4:	e04a      	b.n	8006b7c <_dtoa_r+0x6c4>
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <_dtoa_r+0x648>)
 8006ae8:	f7f9 fd96 	bl	8000618 <__aeabi_dmul>
 8006aec:	4680      	mov	r8, r0
 8006aee:	4689      	mov	r9, r1
 8006af0:	e7bd      	b.n	8006a6e <_dtoa_r+0x5b6>
 8006af2:	bf00      	nop
 8006af4:	080081b0 	.word	0x080081b0
 8006af8:	08008188 	.word	0x08008188
 8006afc:	3ff00000 	.word	0x3ff00000
 8006b00:	40240000 	.word	0x40240000
 8006b04:	401c0000 	.word	0x401c0000
 8006b08:	40140000 	.word	0x40140000
 8006b0c:	3fe00000 	.word	0x3fe00000
 8006b10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b14:	9d00      	ldr	r5, [sp, #0]
 8006b16:	4642      	mov	r2, r8
 8006b18:	464b      	mov	r3, r9
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	f7f9 fea5 	bl	800086c <__aeabi_ddiv>
 8006b22:	f7fa f829 	bl	8000b78 <__aeabi_d2iz>
 8006b26:	9001      	str	r0, [sp, #4]
 8006b28:	f7f9 fd0c 	bl	8000544 <__aeabi_i2d>
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	464b      	mov	r3, r9
 8006b30:	f7f9 fd72 	bl	8000618 <__aeabi_dmul>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4630      	mov	r0, r6
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	f7f9 fbb4 	bl	80002a8 <__aeabi_dsub>
 8006b40:	9e01      	ldr	r6, [sp, #4]
 8006b42:	9f04      	ldr	r7, [sp, #16]
 8006b44:	3630      	adds	r6, #48	; 0x30
 8006b46:	f805 6b01 	strb.w	r6, [r5], #1
 8006b4a:	9e00      	ldr	r6, [sp, #0]
 8006b4c:	1bae      	subs	r6, r5, r6
 8006b4e:	42b7      	cmp	r7, r6
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	d134      	bne.n	8006bc0 <_dtoa_r+0x708>
 8006b56:	f7f9 fba9 	bl	80002ac <__adddf3>
 8006b5a:	4642      	mov	r2, r8
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460f      	mov	r7, r1
 8006b62:	f7f9 ffe9 	bl	8000b38 <__aeabi_dcmpgt>
 8006b66:	b9c8      	cbnz	r0, 8006b9c <_dtoa_r+0x6e4>
 8006b68:	4642      	mov	r2, r8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 ffba 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b74:	b110      	cbz	r0, 8006b7c <_dtoa_r+0x6c4>
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	07db      	lsls	r3, r3, #31
 8006b7a:	d40f      	bmi.n	8006b9c <_dtoa_r+0x6e4>
 8006b7c:	4651      	mov	r1, sl
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 fbcc 	bl	800731c <_Bfree>
 8006b84:	2300      	movs	r3, #0
 8006b86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b88:	702b      	strb	r3, [r5, #0]
 8006b8a:	f10b 0301 	add.w	r3, fp, #1
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f43f ace2 	beq.w	800655c <_dtoa_r+0xa4>
 8006b98:	601d      	str	r5, [r3, #0]
 8006b9a:	e4df      	b.n	800655c <_dtoa_r+0xa4>
 8006b9c:	465f      	mov	r7, fp
 8006b9e:	462b      	mov	r3, r5
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ba6:	2a39      	cmp	r2, #57	; 0x39
 8006ba8:	d106      	bne.n	8006bb8 <_dtoa_r+0x700>
 8006baa:	9a00      	ldr	r2, [sp, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d1f7      	bne.n	8006ba0 <_dtoa_r+0x6e8>
 8006bb0:	9900      	ldr	r1, [sp, #0]
 8006bb2:	2230      	movs	r2, #48	; 0x30
 8006bb4:	3701      	adds	r7, #1
 8006bb6:	700a      	strb	r2, [r1, #0]
 8006bb8:	781a      	ldrb	r2, [r3, #0]
 8006bba:	3201      	adds	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e790      	b.n	8006ae2 <_dtoa_r+0x62a>
 8006bc0:	4ba3      	ldr	r3, [pc, #652]	; (8006e50 <_dtoa_r+0x998>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f7f9 fd28 	bl	8000618 <__aeabi_dmul>
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2300      	movs	r3, #0
 8006bcc:	4606      	mov	r6, r0
 8006bce:	460f      	mov	r7, r1
 8006bd0:	f7f9 ff8a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d09e      	beq.n	8006b16 <_dtoa_r+0x65e>
 8006bd8:	e7d0      	b.n	8006b7c <_dtoa_r+0x6c4>
 8006bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bdc:	2a00      	cmp	r2, #0
 8006bde:	f000 80ca 	beq.w	8006d76 <_dtoa_r+0x8be>
 8006be2:	9a07      	ldr	r2, [sp, #28]
 8006be4:	2a01      	cmp	r2, #1
 8006be6:	f300 80ad 	bgt.w	8006d44 <_dtoa_r+0x88c>
 8006bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	f000 80a5 	beq.w	8006d3c <_dtoa_r+0x884>
 8006bf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bf6:	9e08      	ldr	r6, [sp, #32]
 8006bf8:	9d05      	ldr	r5, [sp, #20]
 8006bfa:	9a05      	ldr	r2, [sp, #20]
 8006bfc:	441a      	add	r2, r3
 8006bfe:	9205      	str	r2, [sp, #20]
 8006c00:	9a06      	ldr	r2, [sp, #24]
 8006c02:	2101      	movs	r1, #1
 8006c04:	441a      	add	r2, r3
 8006c06:	4620      	mov	r0, r4
 8006c08:	9206      	str	r2, [sp, #24]
 8006c0a:	f000 fc3d 	bl	8007488 <__i2b>
 8006c0e:	4607      	mov	r7, r0
 8006c10:	b165      	cbz	r5, 8006c2c <_dtoa_r+0x774>
 8006c12:	9b06      	ldr	r3, [sp, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dd09      	ble.n	8006c2c <_dtoa_r+0x774>
 8006c18:	42ab      	cmp	r3, r5
 8006c1a:	9a05      	ldr	r2, [sp, #20]
 8006c1c:	bfa8      	it	ge
 8006c1e:	462b      	movge	r3, r5
 8006c20:	1ad2      	subs	r2, r2, r3
 8006c22:	9205      	str	r2, [sp, #20]
 8006c24:	9a06      	ldr	r2, [sp, #24]
 8006c26:	1aed      	subs	r5, r5, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	9306      	str	r3, [sp, #24]
 8006c2c:	9b08      	ldr	r3, [sp, #32]
 8006c2e:	b1f3      	cbz	r3, 8006c6e <_dtoa_r+0x7b6>
 8006c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80a3 	beq.w	8006d7e <_dtoa_r+0x8c6>
 8006c38:	2e00      	cmp	r6, #0
 8006c3a:	dd10      	ble.n	8006c5e <_dtoa_r+0x7a6>
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	4632      	mov	r2, r6
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 fce1 	bl	8007608 <__pow5mult>
 8006c46:	4652      	mov	r2, sl
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f000 fc31 	bl	80074b4 <__multiply>
 8006c52:	4651      	mov	r1, sl
 8006c54:	4680      	mov	r8, r0
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fb60 	bl	800731c <_Bfree>
 8006c5c:	46c2      	mov	sl, r8
 8006c5e:	9b08      	ldr	r3, [sp, #32]
 8006c60:	1b9a      	subs	r2, r3, r6
 8006c62:	d004      	beq.n	8006c6e <_dtoa_r+0x7b6>
 8006c64:	4651      	mov	r1, sl
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 fcce 	bl	8007608 <__pow5mult>
 8006c6c:	4682      	mov	sl, r0
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fc09 	bl	8007488 <__i2b>
 8006c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	f340 8081 	ble.w	8006d82 <_dtoa_r+0x8ca>
 8006c80:	461a      	mov	r2, r3
 8006c82:	4601      	mov	r1, r0
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 fcbf 	bl	8007608 <__pow5mult>
 8006c8a:	9b07      	ldr	r3, [sp, #28]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	4606      	mov	r6, r0
 8006c90:	dd7a      	ble.n	8006d88 <_dtoa_r+0x8d0>
 8006c92:	f04f 0800 	mov.w	r8, #0
 8006c96:	6933      	ldr	r3, [r6, #16]
 8006c98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c9c:	6918      	ldr	r0, [r3, #16]
 8006c9e:	f000 fba5 	bl	80073ec <__hi0bits>
 8006ca2:	f1c0 0020 	rsb	r0, r0, #32
 8006ca6:	9b06      	ldr	r3, [sp, #24]
 8006ca8:	4418      	add	r0, r3
 8006caa:	f010 001f 	ands.w	r0, r0, #31
 8006cae:	f000 8094 	beq.w	8006dda <_dtoa_r+0x922>
 8006cb2:	f1c0 0320 	rsb	r3, r0, #32
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	f340 8085 	ble.w	8006dc6 <_dtoa_r+0x90e>
 8006cbc:	9b05      	ldr	r3, [sp, #20]
 8006cbe:	f1c0 001c 	rsb	r0, r0, #28
 8006cc2:	4403      	add	r3, r0
 8006cc4:	9305      	str	r3, [sp, #20]
 8006cc6:	9b06      	ldr	r3, [sp, #24]
 8006cc8:	4403      	add	r3, r0
 8006cca:	4405      	add	r5, r0
 8006ccc:	9306      	str	r3, [sp, #24]
 8006cce:	9b05      	ldr	r3, [sp, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dd05      	ble.n	8006ce0 <_dtoa_r+0x828>
 8006cd4:	4651      	mov	r1, sl
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fcef 	bl	80076bc <__lshift>
 8006cde:	4682      	mov	sl, r0
 8006ce0:	9b06      	ldr	r3, [sp, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd05      	ble.n	8006cf2 <_dtoa_r+0x83a>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 fce6 	bl	80076bc <__lshift>
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d072      	beq.n	8006dde <_dtoa_r+0x926>
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f000 fd4a 	bl	8007794 <__mcmp>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	da6c      	bge.n	8006dde <_dtoa_r+0x926>
 8006d04:	2300      	movs	r3, #0
 8006d06:	4651      	mov	r1, sl
 8006d08:	220a      	movs	r2, #10
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 fb28 	bl	8007360 <__multadd>
 8006d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d16:	4682      	mov	sl, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 81b0 	beq.w	800707e <_dtoa_r+0xbc6>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4639      	mov	r1, r7
 8006d22:	220a      	movs	r2, #10
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fb1b 	bl	8007360 <__multadd>
 8006d2a:	9b01      	ldr	r3, [sp, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	4607      	mov	r7, r0
 8006d30:	f300 8096 	bgt.w	8006e60 <_dtoa_r+0x9a8>
 8006d34:	9b07      	ldr	r3, [sp, #28]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	dc59      	bgt.n	8006dee <_dtoa_r+0x936>
 8006d3a:	e091      	b.n	8006e60 <_dtoa_r+0x9a8>
 8006d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d42:	e758      	b.n	8006bf6 <_dtoa_r+0x73e>
 8006d44:	9b04      	ldr	r3, [sp, #16]
 8006d46:	1e5e      	subs	r6, r3, #1
 8006d48:	9b08      	ldr	r3, [sp, #32]
 8006d4a:	42b3      	cmp	r3, r6
 8006d4c:	bfbf      	itttt	lt
 8006d4e:	9b08      	ldrlt	r3, [sp, #32]
 8006d50:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006d52:	9608      	strlt	r6, [sp, #32]
 8006d54:	1af3      	sublt	r3, r6, r3
 8006d56:	bfb4      	ite	lt
 8006d58:	18d2      	addlt	r2, r2, r3
 8006d5a:	1b9e      	subge	r6, r3, r6
 8006d5c:	9b04      	ldr	r3, [sp, #16]
 8006d5e:	bfbc      	itt	lt
 8006d60:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006d62:	2600      	movlt	r6, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bfb7      	itett	lt
 8006d68:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006d6c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006d70:	1a9d      	sublt	r5, r3, r2
 8006d72:	2300      	movlt	r3, #0
 8006d74:	e741      	b.n	8006bfa <_dtoa_r+0x742>
 8006d76:	9e08      	ldr	r6, [sp, #32]
 8006d78:	9d05      	ldr	r5, [sp, #20]
 8006d7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006d7c:	e748      	b.n	8006c10 <_dtoa_r+0x758>
 8006d7e:	9a08      	ldr	r2, [sp, #32]
 8006d80:	e770      	b.n	8006c64 <_dtoa_r+0x7ac>
 8006d82:	9b07      	ldr	r3, [sp, #28]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	dc19      	bgt.n	8006dbc <_dtoa_r+0x904>
 8006d88:	9b02      	ldr	r3, [sp, #8]
 8006d8a:	b9bb      	cbnz	r3, 8006dbc <_dtoa_r+0x904>
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d92:	b99b      	cbnz	r3, 8006dbc <_dtoa_r+0x904>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d9a:	0d1b      	lsrs	r3, r3, #20
 8006d9c:	051b      	lsls	r3, r3, #20
 8006d9e:	b183      	cbz	r3, 8006dc2 <_dtoa_r+0x90a>
 8006da0:	9b05      	ldr	r3, [sp, #20]
 8006da2:	3301      	adds	r3, #1
 8006da4:	9305      	str	r3, [sp, #20]
 8006da6:	9b06      	ldr	r3, [sp, #24]
 8006da8:	3301      	adds	r3, #1
 8006daa:	9306      	str	r3, [sp, #24]
 8006dac:	f04f 0801 	mov.w	r8, #1
 8006db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f47f af6f 	bne.w	8006c96 <_dtoa_r+0x7de>
 8006db8:	2001      	movs	r0, #1
 8006dba:	e774      	b.n	8006ca6 <_dtoa_r+0x7ee>
 8006dbc:	f04f 0800 	mov.w	r8, #0
 8006dc0:	e7f6      	b.n	8006db0 <_dtoa_r+0x8f8>
 8006dc2:	4698      	mov	r8, r3
 8006dc4:	e7f4      	b.n	8006db0 <_dtoa_r+0x8f8>
 8006dc6:	d082      	beq.n	8006cce <_dtoa_r+0x816>
 8006dc8:	9a05      	ldr	r2, [sp, #20]
 8006dca:	331c      	adds	r3, #28
 8006dcc:	441a      	add	r2, r3
 8006dce:	9205      	str	r2, [sp, #20]
 8006dd0:	9a06      	ldr	r2, [sp, #24]
 8006dd2:	441a      	add	r2, r3
 8006dd4:	441d      	add	r5, r3
 8006dd6:	9206      	str	r2, [sp, #24]
 8006dd8:	e779      	b.n	8006cce <_dtoa_r+0x816>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	e7f4      	b.n	8006dc8 <_dtoa_r+0x910>
 8006dde:	9b04      	ldr	r3, [sp, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dc37      	bgt.n	8006e54 <_dtoa_r+0x99c>
 8006de4:	9b07      	ldr	r3, [sp, #28]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	dd34      	ble.n	8006e54 <_dtoa_r+0x99c>
 8006dea:	9b04      	ldr	r3, [sp, #16]
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	9b01      	ldr	r3, [sp, #4]
 8006df0:	b963      	cbnz	r3, 8006e0c <_dtoa_r+0x954>
 8006df2:	4631      	mov	r1, r6
 8006df4:	2205      	movs	r2, #5
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fab2 	bl	8007360 <__multadd>
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	4606      	mov	r6, r0
 8006e00:	4650      	mov	r0, sl
 8006e02:	f000 fcc7 	bl	8007794 <__mcmp>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f73f adbb 	bgt.w	8006982 <_dtoa_r+0x4ca>
 8006e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0e:	9d00      	ldr	r5, [sp, #0]
 8006e10:	ea6f 0b03 	mvn.w	fp, r3
 8006e14:	f04f 0800 	mov.w	r8, #0
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 fa7e 	bl	800731c <_Bfree>
 8006e20:	2f00      	cmp	r7, #0
 8006e22:	f43f aeab 	beq.w	8006b7c <_dtoa_r+0x6c4>
 8006e26:	f1b8 0f00 	cmp.w	r8, #0
 8006e2a:	d005      	beq.n	8006e38 <_dtoa_r+0x980>
 8006e2c:	45b8      	cmp	r8, r7
 8006e2e:	d003      	beq.n	8006e38 <_dtoa_r+0x980>
 8006e30:	4641      	mov	r1, r8
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 fa72 	bl	800731c <_Bfree>
 8006e38:	4639      	mov	r1, r7
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 fa6e 	bl	800731c <_Bfree>
 8006e40:	e69c      	b.n	8006b7c <_dtoa_r+0x6c4>
 8006e42:	2600      	movs	r6, #0
 8006e44:	4637      	mov	r7, r6
 8006e46:	e7e1      	b.n	8006e0c <_dtoa_r+0x954>
 8006e48:	46bb      	mov	fp, r7
 8006e4a:	4637      	mov	r7, r6
 8006e4c:	e599      	b.n	8006982 <_dtoa_r+0x4ca>
 8006e4e:	bf00      	nop
 8006e50:	40240000 	.word	0x40240000
 8006e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80c8 	beq.w	8006fec <_dtoa_r+0xb34>
 8006e5c:	9b04      	ldr	r3, [sp, #16]
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	dd05      	ble.n	8006e70 <_dtoa_r+0x9b8>
 8006e64:	4639      	mov	r1, r7
 8006e66:	462a      	mov	r2, r5
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f000 fc27 	bl	80076bc <__lshift>
 8006e6e:	4607      	mov	r7, r0
 8006e70:	f1b8 0f00 	cmp.w	r8, #0
 8006e74:	d05b      	beq.n	8006f2e <_dtoa_r+0xa76>
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fa0f 	bl	800729c <_Balloc>
 8006e7e:	4605      	mov	r5, r0
 8006e80:	b928      	cbnz	r0, 8006e8e <_dtoa_r+0x9d6>
 8006e82:	4b83      	ldr	r3, [pc, #524]	; (8007090 <_dtoa_r+0xbd8>)
 8006e84:	4602      	mov	r2, r0
 8006e86:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e8a:	f7ff bb2e 	b.w	80064ea <_dtoa_r+0x32>
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	3202      	adds	r2, #2
 8006e92:	0092      	lsls	r2, r2, #2
 8006e94:	f107 010c 	add.w	r1, r7, #12
 8006e98:	300c      	adds	r0, #12
 8006e9a:	f001 f801 	bl	8007ea0 <memcpy>
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 fc0a 	bl	80076bc <__lshift>
 8006ea8:	9b00      	ldr	r3, [sp, #0]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	9304      	str	r3, [sp, #16]
 8006eae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	9308      	str	r3, [sp, #32]
 8006eb6:	9b02      	ldr	r3, [sp, #8]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	46b8      	mov	r8, r7
 8006ebe:	9306      	str	r3, [sp, #24]
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	9b04      	ldr	r3, [sp, #16]
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	4650      	mov	r0, sl
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	f7ff fa69 	bl	80063a2 <quorem>
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	9002      	str	r0, [sp, #8]
 8006ed4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ed8:	4650      	mov	r0, sl
 8006eda:	f000 fc5b 	bl	8007794 <__mcmp>
 8006ede:	463a      	mov	r2, r7
 8006ee0:	9005      	str	r0, [sp, #20]
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 fc71 	bl	80077cc <__mdiff>
 8006eea:	68c2      	ldr	r2, [r0, #12]
 8006eec:	4605      	mov	r5, r0
 8006eee:	bb02      	cbnz	r2, 8006f32 <_dtoa_r+0xa7a>
 8006ef0:	4601      	mov	r1, r0
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	f000 fc4e 	bl	8007794 <__mcmp>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	4629      	mov	r1, r5
 8006efc:	4620      	mov	r0, r4
 8006efe:	9209      	str	r2, [sp, #36]	; 0x24
 8006f00:	f000 fa0c 	bl	800731c <_Bfree>
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f08:	9d04      	ldr	r5, [sp, #16]
 8006f0a:	ea43 0102 	orr.w	r1, r3, r2
 8006f0e:	9b06      	ldr	r3, [sp, #24]
 8006f10:	4319      	orrs	r1, r3
 8006f12:	d110      	bne.n	8006f36 <_dtoa_r+0xa7e>
 8006f14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f18:	d029      	beq.n	8006f6e <_dtoa_r+0xab6>
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dd02      	ble.n	8006f26 <_dtoa_r+0xa6e>
 8006f20:	9b02      	ldr	r3, [sp, #8]
 8006f22:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	f883 9000 	strb.w	r9, [r3]
 8006f2c:	e774      	b.n	8006e18 <_dtoa_r+0x960>
 8006f2e:	4638      	mov	r0, r7
 8006f30:	e7ba      	b.n	8006ea8 <_dtoa_r+0x9f0>
 8006f32:	2201      	movs	r2, #1
 8006f34:	e7e1      	b.n	8006efa <_dtoa_r+0xa42>
 8006f36:	9b05      	ldr	r3, [sp, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	db04      	blt.n	8006f46 <_dtoa_r+0xa8e>
 8006f3c:	9907      	ldr	r1, [sp, #28]
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	9906      	ldr	r1, [sp, #24]
 8006f42:	430b      	orrs	r3, r1
 8006f44:	d120      	bne.n	8006f88 <_dtoa_r+0xad0>
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	dded      	ble.n	8006f26 <_dtoa_r+0xa6e>
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 fbb4 	bl	80076bc <__lshift>
 8006f54:	4631      	mov	r1, r6
 8006f56:	4682      	mov	sl, r0
 8006f58:	f000 fc1c 	bl	8007794 <__mcmp>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	dc03      	bgt.n	8006f68 <_dtoa_r+0xab0>
 8006f60:	d1e1      	bne.n	8006f26 <_dtoa_r+0xa6e>
 8006f62:	f019 0f01 	tst.w	r9, #1
 8006f66:	d0de      	beq.n	8006f26 <_dtoa_r+0xa6e>
 8006f68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f6c:	d1d8      	bne.n	8006f20 <_dtoa_r+0xa68>
 8006f6e:	9a01      	ldr	r2, [sp, #4]
 8006f70:	2339      	movs	r3, #57	; 0x39
 8006f72:	7013      	strb	r3, [r2, #0]
 8006f74:	462b      	mov	r3, r5
 8006f76:	461d      	mov	r5, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f7e:	2a39      	cmp	r2, #57	; 0x39
 8006f80:	d06c      	beq.n	800705c <_dtoa_r+0xba4>
 8006f82:	3201      	adds	r2, #1
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	e747      	b.n	8006e18 <_dtoa_r+0x960>
 8006f88:	2a00      	cmp	r2, #0
 8006f8a:	dd07      	ble.n	8006f9c <_dtoa_r+0xae4>
 8006f8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f90:	d0ed      	beq.n	8006f6e <_dtoa_r+0xab6>
 8006f92:	9a01      	ldr	r2, [sp, #4]
 8006f94:	f109 0301 	add.w	r3, r9, #1
 8006f98:	7013      	strb	r3, [r2, #0]
 8006f9a:	e73d      	b.n	8006e18 <_dtoa_r+0x960>
 8006f9c:	9b04      	ldr	r3, [sp, #16]
 8006f9e:	9a08      	ldr	r2, [sp, #32]
 8006fa0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d043      	beq.n	8007030 <_dtoa_r+0xb78>
 8006fa8:	4651      	mov	r1, sl
 8006faa:	2300      	movs	r3, #0
 8006fac:	220a      	movs	r2, #10
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 f9d6 	bl	8007360 <__multadd>
 8006fb4:	45b8      	cmp	r8, r7
 8006fb6:	4682      	mov	sl, r0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	f04f 020a 	mov.w	r2, #10
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	d107      	bne.n	8006fd6 <_dtoa_r+0xb1e>
 8006fc6:	f000 f9cb 	bl	8007360 <__multadd>
 8006fca:	4680      	mov	r8, r0
 8006fcc:	4607      	mov	r7, r0
 8006fce:	9b04      	ldr	r3, [sp, #16]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	9304      	str	r3, [sp, #16]
 8006fd4:	e775      	b.n	8006ec2 <_dtoa_r+0xa0a>
 8006fd6:	f000 f9c3 	bl	8007360 <__multadd>
 8006fda:	4639      	mov	r1, r7
 8006fdc:	4680      	mov	r8, r0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	220a      	movs	r2, #10
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 f9bc 	bl	8007360 <__multadd>
 8006fe8:	4607      	mov	r7, r0
 8006fea:	e7f0      	b.n	8006fce <_dtoa_r+0xb16>
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	9d00      	ldr	r5, [sp, #0]
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4650      	mov	r0, sl
 8006ff6:	f7ff f9d4 	bl	80063a2 <quorem>
 8006ffa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ffe:	9b00      	ldr	r3, [sp, #0]
 8007000:	f805 9b01 	strb.w	r9, [r5], #1
 8007004:	1aea      	subs	r2, r5, r3
 8007006:	9b01      	ldr	r3, [sp, #4]
 8007008:	4293      	cmp	r3, r2
 800700a:	dd07      	ble.n	800701c <_dtoa_r+0xb64>
 800700c:	4651      	mov	r1, sl
 800700e:	2300      	movs	r3, #0
 8007010:	220a      	movs	r2, #10
 8007012:	4620      	mov	r0, r4
 8007014:	f000 f9a4 	bl	8007360 <__multadd>
 8007018:	4682      	mov	sl, r0
 800701a:	e7ea      	b.n	8006ff2 <_dtoa_r+0xb3a>
 800701c:	9b01      	ldr	r3, [sp, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	bfc8      	it	gt
 8007022:	461d      	movgt	r5, r3
 8007024:	9b00      	ldr	r3, [sp, #0]
 8007026:	bfd8      	it	le
 8007028:	2501      	movle	r5, #1
 800702a:	441d      	add	r5, r3
 800702c:	f04f 0800 	mov.w	r8, #0
 8007030:	4651      	mov	r1, sl
 8007032:	2201      	movs	r2, #1
 8007034:	4620      	mov	r0, r4
 8007036:	f000 fb41 	bl	80076bc <__lshift>
 800703a:	4631      	mov	r1, r6
 800703c:	4682      	mov	sl, r0
 800703e:	f000 fba9 	bl	8007794 <__mcmp>
 8007042:	2800      	cmp	r0, #0
 8007044:	dc96      	bgt.n	8006f74 <_dtoa_r+0xabc>
 8007046:	d102      	bne.n	800704e <_dtoa_r+0xb96>
 8007048:	f019 0f01 	tst.w	r9, #1
 800704c:	d192      	bne.n	8006f74 <_dtoa_r+0xabc>
 800704e:	462b      	mov	r3, r5
 8007050:	461d      	mov	r5, r3
 8007052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007056:	2a30      	cmp	r2, #48	; 0x30
 8007058:	d0fa      	beq.n	8007050 <_dtoa_r+0xb98>
 800705a:	e6dd      	b.n	8006e18 <_dtoa_r+0x960>
 800705c:	9a00      	ldr	r2, [sp, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d189      	bne.n	8006f76 <_dtoa_r+0xabe>
 8007062:	f10b 0b01 	add.w	fp, fp, #1
 8007066:	2331      	movs	r3, #49	; 0x31
 8007068:	e796      	b.n	8006f98 <_dtoa_r+0xae0>
 800706a:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <_dtoa_r+0xbdc>)
 800706c:	f7ff ba99 	b.w	80065a2 <_dtoa_r+0xea>
 8007070:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007072:	2b00      	cmp	r3, #0
 8007074:	f47f aa6d 	bne.w	8006552 <_dtoa_r+0x9a>
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <_dtoa_r+0xbe0>)
 800707a:	f7ff ba92 	b.w	80065a2 <_dtoa_r+0xea>
 800707e:	9b01      	ldr	r3, [sp, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	dcb5      	bgt.n	8006ff0 <_dtoa_r+0xb38>
 8007084:	9b07      	ldr	r3, [sp, #28]
 8007086:	2b02      	cmp	r3, #2
 8007088:	f73f aeb1 	bgt.w	8006dee <_dtoa_r+0x936>
 800708c:	e7b0      	b.n	8006ff0 <_dtoa_r+0xb38>
 800708e:	bf00      	nop
 8007090:	0800811c 	.word	0x0800811c
 8007094:	0800807c 	.word	0x0800807c
 8007098:	080080a0 	.word	0x080080a0

0800709c <_free_r>:
 800709c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800709e:	2900      	cmp	r1, #0
 80070a0:	d044      	beq.n	800712c <_free_r+0x90>
 80070a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a6:	9001      	str	r0, [sp, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f1a1 0404 	sub.w	r4, r1, #4
 80070ae:	bfb8      	it	lt
 80070b0:	18e4      	addlt	r4, r4, r3
 80070b2:	f000 f8e7 	bl	8007284 <__malloc_lock>
 80070b6:	4a1e      	ldr	r2, [pc, #120]	; (8007130 <_free_r+0x94>)
 80070b8:	9801      	ldr	r0, [sp, #4]
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	b933      	cbnz	r3, 80070cc <_free_r+0x30>
 80070be:	6063      	str	r3, [r4, #4]
 80070c0:	6014      	str	r4, [r2, #0]
 80070c2:	b003      	add	sp, #12
 80070c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070c8:	f000 b8e2 	b.w	8007290 <__malloc_unlock>
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	d908      	bls.n	80070e2 <_free_r+0x46>
 80070d0:	6825      	ldr	r5, [r4, #0]
 80070d2:	1961      	adds	r1, r4, r5
 80070d4:	428b      	cmp	r3, r1
 80070d6:	bf01      	itttt	eq
 80070d8:	6819      	ldreq	r1, [r3, #0]
 80070da:	685b      	ldreq	r3, [r3, #4]
 80070dc:	1949      	addeq	r1, r1, r5
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	e7ed      	b.n	80070be <_free_r+0x22>
 80070e2:	461a      	mov	r2, r3
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b10b      	cbz	r3, 80070ec <_free_r+0x50>
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	d9fa      	bls.n	80070e2 <_free_r+0x46>
 80070ec:	6811      	ldr	r1, [r2, #0]
 80070ee:	1855      	adds	r5, r2, r1
 80070f0:	42a5      	cmp	r5, r4
 80070f2:	d10b      	bne.n	800710c <_free_r+0x70>
 80070f4:	6824      	ldr	r4, [r4, #0]
 80070f6:	4421      	add	r1, r4
 80070f8:	1854      	adds	r4, r2, r1
 80070fa:	42a3      	cmp	r3, r4
 80070fc:	6011      	str	r1, [r2, #0]
 80070fe:	d1e0      	bne.n	80070c2 <_free_r+0x26>
 8007100:	681c      	ldr	r4, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	6053      	str	r3, [r2, #4]
 8007106:	440c      	add	r4, r1
 8007108:	6014      	str	r4, [r2, #0]
 800710a:	e7da      	b.n	80070c2 <_free_r+0x26>
 800710c:	d902      	bls.n	8007114 <_free_r+0x78>
 800710e:	230c      	movs	r3, #12
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	e7d6      	b.n	80070c2 <_free_r+0x26>
 8007114:	6825      	ldr	r5, [r4, #0]
 8007116:	1961      	adds	r1, r4, r5
 8007118:	428b      	cmp	r3, r1
 800711a:	bf04      	itt	eq
 800711c:	6819      	ldreq	r1, [r3, #0]
 800711e:	685b      	ldreq	r3, [r3, #4]
 8007120:	6063      	str	r3, [r4, #4]
 8007122:	bf04      	itt	eq
 8007124:	1949      	addeq	r1, r1, r5
 8007126:	6021      	streq	r1, [r4, #0]
 8007128:	6054      	str	r4, [r2, #4]
 800712a:	e7ca      	b.n	80070c2 <_free_r+0x26>
 800712c:	b003      	add	sp, #12
 800712e:	bd30      	pop	{r4, r5, pc}
 8007130:	20000b98 	.word	0x20000b98

08007134 <malloc>:
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <malloc+0xc>)
 8007136:	4601      	mov	r1, r0
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	f000 b823 	b.w	8007184 <_malloc_r>
 800713e:	bf00      	nop
 8007140:	20000064 	.word	0x20000064

08007144 <sbrk_aligned>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	4e0e      	ldr	r6, [pc, #56]	; (8007180 <sbrk_aligned+0x3c>)
 8007148:	460c      	mov	r4, r1
 800714a:	6831      	ldr	r1, [r6, #0]
 800714c:	4605      	mov	r5, r0
 800714e:	b911      	cbnz	r1, 8007156 <sbrk_aligned+0x12>
 8007150:	f000 fe96 	bl	8007e80 <_sbrk_r>
 8007154:	6030      	str	r0, [r6, #0]
 8007156:	4621      	mov	r1, r4
 8007158:	4628      	mov	r0, r5
 800715a:	f000 fe91 	bl	8007e80 <_sbrk_r>
 800715e:	1c43      	adds	r3, r0, #1
 8007160:	d00a      	beq.n	8007178 <sbrk_aligned+0x34>
 8007162:	1cc4      	adds	r4, r0, #3
 8007164:	f024 0403 	bic.w	r4, r4, #3
 8007168:	42a0      	cmp	r0, r4
 800716a:	d007      	beq.n	800717c <sbrk_aligned+0x38>
 800716c:	1a21      	subs	r1, r4, r0
 800716e:	4628      	mov	r0, r5
 8007170:	f000 fe86 	bl	8007e80 <_sbrk_r>
 8007174:	3001      	adds	r0, #1
 8007176:	d101      	bne.n	800717c <sbrk_aligned+0x38>
 8007178:	f04f 34ff 	mov.w	r4, #4294967295
 800717c:	4620      	mov	r0, r4
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	20000b9c 	.word	0x20000b9c

08007184 <_malloc_r>:
 8007184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007188:	1ccd      	adds	r5, r1, #3
 800718a:	f025 0503 	bic.w	r5, r5, #3
 800718e:	3508      	adds	r5, #8
 8007190:	2d0c      	cmp	r5, #12
 8007192:	bf38      	it	cc
 8007194:	250c      	movcc	r5, #12
 8007196:	2d00      	cmp	r5, #0
 8007198:	4607      	mov	r7, r0
 800719a:	db01      	blt.n	80071a0 <_malloc_r+0x1c>
 800719c:	42a9      	cmp	r1, r5
 800719e:	d905      	bls.n	80071ac <_malloc_r+0x28>
 80071a0:	230c      	movs	r3, #12
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	2600      	movs	r6, #0
 80071a6:	4630      	mov	r0, r6
 80071a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007280 <_malloc_r+0xfc>
 80071b0:	f000 f868 	bl	8007284 <__malloc_lock>
 80071b4:	f8d8 3000 	ldr.w	r3, [r8]
 80071b8:	461c      	mov	r4, r3
 80071ba:	bb5c      	cbnz	r4, 8007214 <_malloc_r+0x90>
 80071bc:	4629      	mov	r1, r5
 80071be:	4638      	mov	r0, r7
 80071c0:	f7ff ffc0 	bl	8007144 <sbrk_aligned>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	4604      	mov	r4, r0
 80071c8:	d155      	bne.n	8007276 <_malloc_r+0xf2>
 80071ca:	f8d8 4000 	ldr.w	r4, [r8]
 80071ce:	4626      	mov	r6, r4
 80071d0:	2e00      	cmp	r6, #0
 80071d2:	d145      	bne.n	8007260 <_malloc_r+0xdc>
 80071d4:	2c00      	cmp	r4, #0
 80071d6:	d048      	beq.n	800726a <_malloc_r+0xe6>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	4631      	mov	r1, r6
 80071dc:	4638      	mov	r0, r7
 80071de:	eb04 0903 	add.w	r9, r4, r3
 80071e2:	f000 fe4d 	bl	8007e80 <_sbrk_r>
 80071e6:	4581      	cmp	r9, r0
 80071e8:	d13f      	bne.n	800726a <_malloc_r+0xe6>
 80071ea:	6821      	ldr	r1, [r4, #0]
 80071ec:	1a6d      	subs	r5, r5, r1
 80071ee:	4629      	mov	r1, r5
 80071f0:	4638      	mov	r0, r7
 80071f2:	f7ff ffa7 	bl	8007144 <sbrk_aligned>
 80071f6:	3001      	adds	r0, #1
 80071f8:	d037      	beq.n	800726a <_malloc_r+0xe6>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	442b      	add	r3, r5
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	f8d8 3000 	ldr.w	r3, [r8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d038      	beq.n	800727a <_malloc_r+0xf6>
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	42a2      	cmp	r2, r4
 800720c:	d12b      	bne.n	8007266 <_malloc_r+0xe2>
 800720e:	2200      	movs	r2, #0
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	e00f      	b.n	8007234 <_malloc_r+0xb0>
 8007214:	6822      	ldr	r2, [r4, #0]
 8007216:	1b52      	subs	r2, r2, r5
 8007218:	d41f      	bmi.n	800725a <_malloc_r+0xd6>
 800721a:	2a0b      	cmp	r2, #11
 800721c:	d917      	bls.n	800724e <_malloc_r+0xca>
 800721e:	1961      	adds	r1, r4, r5
 8007220:	42a3      	cmp	r3, r4
 8007222:	6025      	str	r5, [r4, #0]
 8007224:	bf18      	it	ne
 8007226:	6059      	strne	r1, [r3, #4]
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	bf08      	it	eq
 800722c:	f8c8 1000 	streq.w	r1, [r8]
 8007230:	5162      	str	r2, [r4, r5]
 8007232:	604b      	str	r3, [r1, #4]
 8007234:	4638      	mov	r0, r7
 8007236:	f104 060b 	add.w	r6, r4, #11
 800723a:	f000 f829 	bl	8007290 <__malloc_unlock>
 800723e:	f026 0607 	bic.w	r6, r6, #7
 8007242:	1d23      	adds	r3, r4, #4
 8007244:	1af2      	subs	r2, r6, r3
 8007246:	d0ae      	beq.n	80071a6 <_malloc_r+0x22>
 8007248:	1b9b      	subs	r3, r3, r6
 800724a:	50a3      	str	r3, [r4, r2]
 800724c:	e7ab      	b.n	80071a6 <_malloc_r+0x22>
 800724e:	42a3      	cmp	r3, r4
 8007250:	6862      	ldr	r2, [r4, #4]
 8007252:	d1dd      	bne.n	8007210 <_malloc_r+0x8c>
 8007254:	f8c8 2000 	str.w	r2, [r8]
 8007258:	e7ec      	b.n	8007234 <_malloc_r+0xb0>
 800725a:	4623      	mov	r3, r4
 800725c:	6864      	ldr	r4, [r4, #4]
 800725e:	e7ac      	b.n	80071ba <_malloc_r+0x36>
 8007260:	4634      	mov	r4, r6
 8007262:	6876      	ldr	r6, [r6, #4]
 8007264:	e7b4      	b.n	80071d0 <_malloc_r+0x4c>
 8007266:	4613      	mov	r3, r2
 8007268:	e7cc      	b.n	8007204 <_malloc_r+0x80>
 800726a:	230c      	movs	r3, #12
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	4638      	mov	r0, r7
 8007270:	f000 f80e 	bl	8007290 <__malloc_unlock>
 8007274:	e797      	b.n	80071a6 <_malloc_r+0x22>
 8007276:	6025      	str	r5, [r4, #0]
 8007278:	e7dc      	b.n	8007234 <_malloc_r+0xb0>
 800727a:	605b      	str	r3, [r3, #4]
 800727c:	deff      	udf	#255	; 0xff
 800727e:	bf00      	nop
 8007280:	20000b98 	.word	0x20000b98

08007284 <__malloc_lock>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__malloc_lock+0x8>)
 8007286:	f7ff b88a 	b.w	800639e <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	20000b94 	.word	0x20000b94

08007290 <__malloc_unlock>:
 8007290:	4801      	ldr	r0, [pc, #4]	; (8007298 <__malloc_unlock+0x8>)
 8007292:	f7ff b885 	b.w	80063a0 <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	20000b94 	.word	0x20000b94

0800729c <_Balloc>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	69c6      	ldr	r6, [r0, #28]
 80072a0:	4604      	mov	r4, r0
 80072a2:	460d      	mov	r5, r1
 80072a4:	b976      	cbnz	r6, 80072c4 <_Balloc+0x28>
 80072a6:	2010      	movs	r0, #16
 80072a8:	f7ff ff44 	bl	8007134 <malloc>
 80072ac:	4602      	mov	r2, r0
 80072ae:	61e0      	str	r0, [r4, #28]
 80072b0:	b920      	cbnz	r0, 80072bc <_Balloc+0x20>
 80072b2:	4b18      	ldr	r3, [pc, #96]	; (8007314 <_Balloc+0x78>)
 80072b4:	4818      	ldr	r0, [pc, #96]	; (8007318 <_Balloc+0x7c>)
 80072b6:	216b      	movs	r1, #107	; 0x6b
 80072b8:	f000 fe00 	bl	8007ebc <__assert_func>
 80072bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072c0:	6006      	str	r6, [r0, #0]
 80072c2:	60c6      	str	r6, [r0, #12]
 80072c4:	69e6      	ldr	r6, [r4, #28]
 80072c6:	68f3      	ldr	r3, [r6, #12]
 80072c8:	b183      	cbz	r3, 80072ec <_Balloc+0x50>
 80072ca:	69e3      	ldr	r3, [r4, #28]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072d2:	b9b8      	cbnz	r0, 8007304 <_Balloc+0x68>
 80072d4:	2101      	movs	r1, #1
 80072d6:	fa01 f605 	lsl.w	r6, r1, r5
 80072da:	1d72      	adds	r2, r6, #5
 80072dc:	0092      	lsls	r2, r2, #2
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fe0a 	bl	8007ef8 <_calloc_r>
 80072e4:	b160      	cbz	r0, 8007300 <_Balloc+0x64>
 80072e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ea:	e00e      	b.n	800730a <_Balloc+0x6e>
 80072ec:	2221      	movs	r2, #33	; 0x21
 80072ee:	2104      	movs	r1, #4
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fe01 	bl	8007ef8 <_calloc_r>
 80072f6:	69e3      	ldr	r3, [r4, #28]
 80072f8:	60f0      	str	r0, [r6, #12]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e4      	bne.n	80072ca <_Balloc+0x2e>
 8007300:	2000      	movs	r0, #0
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	6802      	ldr	r2, [r0, #0]
 8007306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800730a:	2300      	movs	r3, #0
 800730c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007310:	e7f7      	b.n	8007302 <_Balloc+0x66>
 8007312:	bf00      	nop
 8007314:	080080ad 	.word	0x080080ad
 8007318:	0800812d 	.word	0x0800812d

0800731c <_Bfree>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	69c6      	ldr	r6, [r0, #28]
 8007320:	4605      	mov	r5, r0
 8007322:	460c      	mov	r4, r1
 8007324:	b976      	cbnz	r6, 8007344 <_Bfree+0x28>
 8007326:	2010      	movs	r0, #16
 8007328:	f7ff ff04 	bl	8007134 <malloc>
 800732c:	4602      	mov	r2, r0
 800732e:	61e8      	str	r0, [r5, #28]
 8007330:	b920      	cbnz	r0, 800733c <_Bfree+0x20>
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <_Bfree+0x3c>)
 8007334:	4809      	ldr	r0, [pc, #36]	; (800735c <_Bfree+0x40>)
 8007336:	218f      	movs	r1, #143	; 0x8f
 8007338:	f000 fdc0 	bl	8007ebc <__assert_func>
 800733c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007340:	6006      	str	r6, [r0, #0]
 8007342:	60c6      	str	r6, [r0, #12]
 8007344:	b13c      	cbz	r4, 8007356 <_Bfree+0x3a>
 8007346:	69eb      	ldr	r3, [r5, #28]
 8007348:	6862      	ldr	r2, [r4, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007350:	6021      	str	r1, [r4, #0]
 8007352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	080080ad 	.word	0x080080ad
 800735c:	0800812d 	.word	0x0800812d

08007360 <__multadd>:
 8007360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007364:	690d      	ldr	r5, [r1, #16]
 8007366:	4607      	mov	r7, r0
 8007368:	460c      	mov	r4, r1
 800736a:	461e      	mov	r6, r3
 800736c:	f101 0c14 	add.w	ip, r1, #20
 8007370:	2000      	movs	r0, #0
 8007372:	f8dc 3000 	ldr.w	r3, [ip]
 8007376:	b299      	uxth	r1, r3
 8007378:	fb02 6101 	mla	r1, r2, r1, r6
 800737c:	0c1e      	lsrs	r6, r3, #16
 800737e:	0c0b      	lsrs	r3, r1, #16
 8007380:	fb02 3306 	mla	r3, r2, r6, r3
 8007384:	b289      	uxth	r1, r1
 8007386:	3001      	adds	r0, #1
 8007388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800738c:	4285      	cmp	r5, r0
 800738e:	f84c 1b04 	str.w	r1, [ip], #4
 8007392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007396:	dcec      	bgt.n	8007372 <__multadd+0x12>
 8007398:	b30e      	cbz	r6, 80073de <__multadd+0x7e>
 800739a:	68a3      	ldr	r3, [r4, #8]
 800739c:	42ab      	cmp	r3, r5
 800739e:	dc19      	bgt.n	80073d4 <__multadd+0x74>
 80073a0:	6861      	ldr	r1, [r4, #4]
 80073a2:	4638      	mov	r0, r7
 80073a4:	3101      	adds	r1, #1
 80073a6:	f7ff ff79 	bl	800729c <_Balloc>
 80073aa:	4680      	mov	r8, r0
 80073ac:	b928      	cbnz	r0, 80073ba <__multadd+0x5a>
 80073ae:	4602      	mov	r2, r0
 80073b0:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <__multadd+0x84>)
 80073b2:	480d      	ldr	r0, [pc, #52]	; (80073e8 <__multadd+0x88>)
 80073b4:	21ba      	movs	r1, #186	; 0xba
 80073b6:	f000 fd81 	bl	8007ebc <__assert_func>
 80073ba:	6922      	ldr	r2, [r4, #16]
 80073bc:	3202      	adds	r2, #2
 80073be:	f104 010c 	add.w	r1, r4, #12
 80073c2:	0092      	lsls	r2, r2, #2
 80073c4:	300c      	adds	r0, #12
 80073c6:	f000 fd6b 	bl	8007ea0 <memcpy>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7ff ffa5 	bl	800731c <_Bfree>
 80073d2:	4644      	mov	r4, r8
 80073d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073d8:	3501      	adds	r5, #1
 80073da:	615e      	str	r6, [r3, #20]
 80073dc:	6125      	str	r5, [r4, #16]
 80073de:	4620      	mov	r0, r4
 80073e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e4:	0800811c 	.word	0x0800811c
 80073e8:	0800812d 	.word	0x0800812d

080073ec <__hi0bits>:
 80073ec:	0c03      	lsrs	r3, r0, #16
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	b9d3      	cbnz	r3, 8007428 <__hi0bits+0x3c>
 80073f2:	0400      	lsls	r0, r0, #16
 80073f4:	2310      	movs	r3, #16
 80073f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80073fa:	bf04      	itt	eq
 80073fc:	0200      	lsleq	r0, r0, #8
 80073fe:	3308      	addeq	r3, #8
 8007400:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007404:	bf04      	itt	eq
 8007406:	0100      	lsleq	r0, r0, #4
 8007408:	3304      	addeq	r3, #4
 800740a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800740e:	bf04      	itt	eq
 8007410:	0080      	lsleq	r0, r0, #2
 8007412:	3302      	addeq	r3, #2
 8007414:	2800      	cmp	r0, #0
 8007416:	db05      	blt.n	8007424 <__hi0bits+0x38>
 8007418:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800741c:	f103 0301 	add.w	r3, r3, #1
 8007420:	bf08      	it	eq
 8007422:	2320      	moveq	r3, #32
 8007424:	4618      	mov	r0, r3
 8007426:	4770      	bx	lr
 8007428:	2300      	movs	r3, #0
 800742a:	e7e4      	b.n	80073f6 <__hi0bits+0xa>

0800742c <__lo0bits>:
 800742c:	6803      	ldr	r3, [r0, #0]
 800742e:	f013 0207 	ands.w	r2, r3, #7
 8007432:	d00c      	beq.n	800744e <__lo0bits+0x22>
 8007434:	07d9      	lsls	r1, r3, #31
 8007436:	d422      	bmi.n	800747e <__lo0bits+0x52>
 8007438:	079a      	lsls	r2, r3, #30
 800743a:	bf49      	itett	mi
 800743c:	085b      	lsrmi	r3, r3, #1
 800743e:	089b      	lsrpl	r3, r3, #2
 8007440:	6003      	strmi	r3, [r0, #0]
 8007442:	2201      	movmi	r2, #1
 8007444:	bf5c      	itt	pl
 8007446:	6003      	strpl	r3, [r0, #0]
 8007448:	2202      	movpl	r2, #2
 800744a:	4610      	mov	r0, r2
 800744c:	4770      	bx	lr
 800744e:	b299      	uxth	r1, r3
 8007450:	b909      	cbnz	r1, 8007456 <__lo0bits+0x2a>
 8007452:	0c1b      	lsrs	r3, r3, #16
 8007454:	2210      	movs	r2, #16
 8007456:	b2d9      	uxtb	r1, r3
 8007458:	b909      	cbnz	r1, 800745e <__lo0bits+0x32>
 800745a:	3208      	adds	r2, #8
 800745c:	0a1b      	lsrs	r3, r3, #8
 800745e:	0719      	lsls	r1, r3, #28
 8007460:	bf04      	itt	eq
 8007462:	091b      	lsreq	r3, r3, #4
 8007464:	3204      	addeq	r2, #4
 8007466:	0799      	lsls	r1, r3, #30
 8007468:	bf04      	itt	eq
 800746a:	089b      	lsreq	r3, r3, #2
 800746c:	3202      	addeq	r2, #2
 800746e:	07d9      	lsls	r1, r3, #31
 8007470:	d403      	bmi.n	800747a <__lo0bits+0x4e>
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	f102 0201 	add.w	r2, r2, #1
 8007478:	d003      	beq.n	8007482 <__lo0bits+0x56>
 800747a:	6003      	str	r3, [r0, #0]
 800747c:	e7e5      	b.n	800744a <__lo0bits+0x1e>
 800747e:	2200      	movs	r2, #0
 8007480:	e7e3      	b.n	800744a <__lo0bits+0x1e>
 8007482:	2220      	movs	r2, #32
 8007484:	e7e1      	b.n	800744a <__lo0bits+0x1e>
	...

08007488 <__i2b>:
 8007488:	b510      	push	{r4, lr}
 800748a:	460c      	mov	r4, r1
 800748c:	2101      	movs	r1, #1
 800748e:	f7ff ff05 	bl	800729c <_Balloc>
 8007492:	4602      	mov	r2, r0
 8007494:	b928      	cbnz	r0, 80074a2 <__i2b+0x1a>
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <__i2b+0x24>)
 8007498:	4805      	ldr	r0, [pc, #20]	; (80074b0 <__i2b+0x28>)
 800749a:	f240 1145 	movw	r1, #325	; 0x145
 800749e:	f000 fd0d 	bl	8007ebc <__assert_func>
 80074a2:	2301      	movs	r3, #1
 80074a4:	6144      	str	r4, [r0, #20]
 80074a6:	6103      	str	r3, [r0, #16]
 80074a8:	bd10      	pop	{r4, pc}
 80074aa:	bf00      	nop
 80074ac:	0800811c 	.word	0x0800811c
 80074b0:	0800812d 	.word	0x0800812d

080074b4 <__multiply>:
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b8:	4691      	mov	r9, r2
 80074ba:	690a      	ldr	r2, [r1, #16]
 80074bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	bfb8      	it	lt
 80074c4:	460b      	movlt	r3, r1
 80074c6:	460c      	mov	r4, r1
 80074c8:	bfbc      	itt	lt
 80074ca:	464c      	movlt	r4, r9
 80074cc:	4699      	movlt	r9, r3
 80074ce:	6927      	ldr	r7, [r4, #16]
 80074d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074d4:	68a3      	ldr	r3, [r4, #8]
 80074d6:	6861      	ldr	r1, [r4, #4]
 80074d8:	eb07 060a 	add.w	r6, r7, sl
 80074dc:	42b3      	cmp	r3, r6
 80074de:	b085      	sub	sp, #20
 80074e0:	bfb8      	it	lt
 80074e2:	3101      	addlt	r1, #1
 80074e4:	f7ff feda 	bl	800729c <_Balloc>
 80074e8:	b930      	cbnz	r0, 80074f8 <__multiply+0x44>
 80074ea:	4602      	mov	r2, r0
 80074ec:	4b44      	ldr	r3, [pc, #272]	; (8007600 <__multiply+0x14c>)
 80074ee:	4845      	ldr	r0, [pc, #276]	; (8007604 <__multiply+0x150>)
 80074f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80074f4:	f000 fce2 	bl	8007ebc <__assert_func>
 80074f8:	f100 0514 	add.w	r5, r0, #20
 80074fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007500:	462b      	mov	r3, r5
 8007502:	2200      	movs	r2, #0
 8007504:	4543      	cmp	r3, r8
 8007506:	d321      	bcc.n	800754c <__multiply+0x98>
 8007508:	f104 0314 	add.w	r3, r4, #20
 800750c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007510:	f109 0314 	add.w	r3, r9, #20
 8007514:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007518:	9202      	str	r2, [sp, #8]
 800751a:	1b3a      	subs	r2, r7, r4
 800751c:	3a15      	subs	r2, #21
 800751e:	f022 0203 	bic.w	r2, r2, #3
 8007522:	3204      	adds	r2, #4
 8007524:	f104 0115 	add.w	r1, r4, #21
 8007528:	428f      	cmp	r7, r1
 800752a:	bf38      	it	cc
 800752c:	2204      	movcc	r2, #4
 800752e:	9201      	str	r2, [sp, #4]
 8007530:	9a02      	ldr	r2, [sp, #8]
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	429a      	cmp	r2, r3
 8007536:	d80c      	bhi.n	8007552 <__multiply+0x9e>
 8007538:	2e00      	cmp	r6, #0
 800753a:	dd03      	ble.n	8007544 <__multiply+0x90>
 800753c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007540:	2b00      	cmp	r3, #0
 8007542:	d05b      	beq.n	80075fc <__multiply+0x148>
 8007544:	6106      	str	r6, [r0, #16]
 8007546:	b005      	add	sp, #20
 8007548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754c:	f843 2b04 	str.w	r2, [r3], #4
 8007550:	e7d8      	b.n	8007504 <__multiply+0x50>
 8007552:	f8b3 a000 	ldrh.w	sl, [r3]
 8007556:	f1ba 0f00 	cmp.w	sl, #0
 800755a:	d024      	beq.n	80075a6 <__multiply+0xf2>
 800755c:	f104 0e14 	add.w	lr, r4, #20
 8007560:	46a9      	mov	r9, r5
 8007562:	f04f 0c00 	mov.w	ip, #0
 8007566:	f85e 2b04 	ldr.w	r2, [lr], #4
 800756a:	f8d9 1000 	ldr.w	r1, [r9]
 800756e:	fa1f fb82 	uxth.w	fp, r2
 8007572:	b289      	uxth	r1, r1
 8007574:	fb0a 110b 	mla	r1, sl, fp, r1
 8007578:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800757c:	f8d9 2000 	ldr.w	r2, [r9]
 8007580:	4461      	add	r1, ip
 8007582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007586:	fb0a c20b 	mla	r2, sl, fp, ip
 800758a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800758e:	b289      	uxth	r1, r1
 8007590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007594:	4577      	cmp	r7, lr
 8007596:	f849 1b04 	str.w	r1, [r9], #4
 800759a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800759e:	d8e2      	bhi.n	8007566 <__multiply+0xb2>
 80075a0:	9a01      	ldr	r2, [sp, #4]
 80075a2:	f845 c002 	str.w	ip, [r5, r2]
 80075a6:	9a03      	ldr	r2, [sp, #12]
 80075a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075ac:	3304      	adds	r3, #4
 80075ae:	f1b9 0f00 	cmp.w	r9, #0
 80075b2:	d021      	beq.n	80075f8 <__multiply+0x144>
 80075b4:	6829      	ldr	r1, [r5, #0]
 80075b6:	f104 0c14 	add.w	ip, r4, #20
 80075ba:	46ae      	mov	lr, r5
 80075bc:	f04f 0a00 	mov.w	sl, #0
 80075c0:	f8bc b000 	ldrh.w	fp, [ip]
 80075c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075c8:	fb09 220b 	mla	r2, r9, fp, r2
 80075cc:	4452      	add	r2, sl
 80075ce:	b289      	uxth	r1, r1
 80075d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075d4:	f84e 1b04 	str.w	r1, [lr], #4
 80075d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80075dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075e0:	f8be 1000 	ldrh.w	r1, [lr]
 80075e4:	fb09 110a 	mla	r1, r9, sl, r1
 80075e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80075ec:	4567      	cmp	r7, ip
 80075ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075f2:	d8e5      	bhi.n	80075c0 <__multiply+0x10c>
 80075f4:	9a01      	ldr	r2, [sp, #4]
 80075f6:	50a9      	str	r1, [r5, r2]
 80075f8:	3504      	adds	r5, #4
 80075fa:	e799      	b.n	8007530 <__multiply+0x7c>
 80075fc:	3e01      	subs	r6, #1
 80075fe:	e79b      	b.n	8007538 <__multiply+0x84>
 8007600:	0800811c 	.word	0x0800811c
 8007604:	0800812d 	.word	0x0800812d

08007608 <__pow5mult>:
 8007608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800760c:	4615      	mov	r5, r2
 800760e:	f012 0203 	ands.w	r2, r2, #3
 8007612:	4606      	mov	r6, r0
 8007614:	460f      	mov	r7, r1
 8007616:	d007      	beq.n	8007628 <__pow5mult+0x20>
 8007618:	4c25      	ldr	r4, [pc, #148]	; (80076b0 <__pow5mult+0xa8>)
 800761a:	3a01      	subs	r2, #1
 800761c:	2300      	movs	r3, #0
 800761e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007622:	f7ff fe9d 	bl	8007360 <__multadd>
 8007626:	4607      	mov	r7, r0
 8007628:	10ad      	asrs	r5, r5, #2
 800762a:	d03d      	beq.n	80076a8 <__pow5mult+0xa0>
 800762c:	69f4      	ldr	r4, [r6, #28]
 800762e:	b97c      	cbnz	r4, 8007650 <__pow5mult+0x48>
 8007630:	2010      	movs	r0, #16
 8007632:	f7ff fd7f 	bl	8007134 <malloc>
 8007636:	4602      	mov	r2, r0
 8007638:	61f0      	str	r0, [r6, #28]
 800763a:	b928      	cbnz	r0, 8007648 <__pow5mult+0x40>
 800763c:	4b1d      	ldr	r3, [pc, #116]	; (80076b4 <__pow5mult+0xac>)
 800763e:	481e      	ldr	r0, [pc, #120]	; (80076b8 <__pow5mult+0xb0>)
 8007640:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007644:	f000 fc3a 	bl	8007ebc <__assert_func>
 8007648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800764c:	6004      	str	r4, [r0, #0]
 800764e:	60c4      	str	r4, [r0, #12]
 8007650:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007658:	b94c      	cbnz	r4, 800766e <__pow5mult+0x66>
 800765a:	f240 2171 	movw	r1, #625	; 0x271
 800765e:	4630      	mov	r0, r6
 8007660:	f7ff ff12 	bl	8007488 <__i2b>
 8007664:	2300      	movs	r3, #0
 8007666:	f8c8 0008 	str.w	r0, [r8, #8]
 800766a:	4604      	mov	r4, r0
 800766c:	6003      	str	r3, [r0, #0]
 800766e:	f04f 0900 	mov.w	r9, #0
 8007672:	07eb      	lsls	r3, r5, #31
 8007674:	d50a      	bpl.n	800768c <__pow5mult+0x84>
 8007676:	4639      	mov	r1, r7
 8007678:	4622      	mov	r2, r4
 800767a:	4630      	mov	r0, r6
 800767c:	f7ff ff1a 	bl	80074b4 <__multiply>
 8007680:	4639      	mov	r1, r7
 8007682:	4680      	mov	r8, r0
 8007684:	4630      	mov	r0, r6
 8007686:	f7ff fe49 	bl	800731c <_Bfree>
 800768a:	4647      	mov	r7, r8
 800768c:	106d      	asrs	r5, r5, #1
 800768e:	d00b      	beq.n	80076a8 <__pow5mult+0xa0>
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	b938      	cbnz	r0, 80076a4 <__pow5mult+0x9c>
 8007694:	4622      	mov	r2, r4
 8007696:	4621      	mov	r1, r4
 8007698:	4630      	mov	r0, r6
 800769a:	f7ff ff0b 	bl	80074b4 <__multiply>
 800769e:	6020      	str	r0, [r4, #0]
 80076a0:	f8c0 9000 	str.w	r9, [r0]
 80076a4:	4604      	mov	r4, r0
 80076a6:	e7e4      	b.n	8007672 <__pow5mult+0x6a>
 80076a8:	4638      	mov	r0, r7
 80076aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ae:	bf00      	nop
 80076b0:	08008278 	.word	0x08008278
 80076b4:	080080ad 	.word	0x080080ad
 80076b8:	0800812d 	.word	0x0800812d

080076bc <__lshift>:
 80076bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	460c      	mov	r4, r1
 80076c2:	6849      	ldr	r1, [r1, #4]
 80076c4:	6923      	ldr	r3, [r4, #16]
 80076c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076ca:	68a3      	ldr	r3, [r4, #8]
 80076cc:	4607      	mov	r7, r0
 80076ce:	4691      	mov	r9, r2
 80076d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076d4:	f108 0601 	add.w	r6, r8, #1
 80076d8:	42b3      	cmp	r3, r6
 80076da:	db0b      	blt.n	80076f4 <__lshift+0x38>
 80076dc:	4638      	mov	r0, r7
 80076de:	f7ff fddd 	bl	800729c <_Balloc>
 80076e2:	4605      	mov	r5, r0
 80076e4:	b948      	cbnz	r0, 80076fa <__lshift+0x3e>
 80076e6:	4602      	mov	r2, r0
 80076e8:	4b28      	ldr	r3, [pc, #160]	; (800778c <__lshift+0xd0>)
 80076ea:	4829      	ldr	r0, [pc, #164]	; (8007790 <__lshift+0xd4>)
 80076ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80076f0:	f000 fbe4 	bl	8007ebc <__assert_func>
 80076f4:	3101      	adds	r1, #1
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	e7ee      	b.n	80076d8 <__lshift+0x1c>
 80076fa:	2300      	movs	r3, #0
 80076fc:	f100 0114 	add.w	r1, r0, #20
 8007700:	f100 0210 	add.w	r2, r0, #16
 8007704:	4618      	mov	r0, r3
 8007706:	4553      	cmp	r3, sl
 8007708:	db33      	blt.n	8007772 <__lshift+0xb6>
 800770a:	6920      	ldr	r0, [r4, #16]
 800770c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007710:	f104 0314 	add.w	r3, r4, #20
 8007714:	f019 091f 	ands.w	r9, r9, #31
 8007718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800771c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007720:	d02b      	beq.n	800777a <__lshift+0xbe>
 8007722:	f1c9 0e20 	rsb	lr, r9, #32
 8007726:	468a      	mov	sl, r1
 8007728:	2200      	movs	r2, #0
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	fa00 f009 	lsl.w	r0, r0, r9
 8007730:	4310      	orrs	r0, r2
 8007732:	f84a 0b04 	str.w	r0, [sl], #4
 8007736:	f853 2b04 	ldr.w	r2, [r3], #4
 800773a:	459c      	cmp	ip, r3
 800773c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007740:	d8f3      	bhi.n	800772a <__lshift+0x6e>
 8007742:	ebac 0304 	sub.w	r3, ip, r4
 8007746:	3b15      	subs	r3, #21
 8007748:	f023 0303 	bic.w	r3, r3, #3
 800774c:	3304      	adds	r3, #4
 800774e:	f104 0015 	add.w	r0, r4, #21
 8007752:	4584      	cmp	ip, r0
 8007754:	bf38      	it	cc
 8007756:	2304      	movcc	r3, #4
 8007758:	50ca      	str	r2, [r1, r3]
 800775a:	b10a      	cbz	r2, 8007760 <__lshift+0xa4>
 800775c:	f108 0602 	add.w	r6, r8, #2
 8007760:	3e01      	subs	r6, #1
 8007762:	4638      	mov	r0, r7
 8007764:	612e      	str	r6, [r5, #16]
 8007766:	4621      	mov	r1, r4
 8007768:	f7ff fdd8 	bl	800731c <_Bfree>
 800776c:	4628      	mov	r0, r5
 800776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007772:	f842 0f04 	str.w	r0, [r2, #4]!
 8007776:	3301      	adds	r3, #1
 8007778:	e7c5      	b.n	8007706 <__lshift+0x4a>
 800777a:	3904      	subs	r1, #4
 800777c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007780:	f841 2f04 	str.w	r2, [r1, #4]!
 8007784:	459c      	cmp	ip, r3
 8007786:	d8f9      	bhi.n	800777c <__lshift+0xc0>
 8007788:	e7ea      	b.n	8007760 <__lshift+0xa4>
 800778a:	bf00      	nop
 800778c:	0800811c 	.word	0x0800811c
 8007790:	0800812d 	.word	0x0800812d

08007794 <__mcmp>:
 8007794:	b530      	push	{r4, r5, lr}
 8007796:	6902      	ldr	r2, [r0, #16]
 8007798:	690c      	ldr	r4, [r1, #16]
 800779a:	1b12      	subs	r2, r2, r4
 800779c:	d10e      	bne.n	80077bc <__mcmp+0x28>
 800779e:	f100 0314 	add.w	r3, r0, #20
 80077a2:	3114      	adds	r1, #20
 80077a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077b4:	42a5      	cmp	r5, r4
 80077b6:	d003      	beq.n	80077c0 <__mcmp+0x2c>
 80077b8:	d305      	bcc.n	80077c6 <__mcmp+0x32>
 80077ba:	2201      	movs	r2, #1
 80077bc:	4610      	mov	r0, r2
 80077be:	bd30      	pop	{r4, r5, pc}
 80077c0:	4283      	cmp	r3, r0
 80077c2:	d3f3      	bcc.n	80077ac <__mcmp+0x18>
 80077c4:	e7fa      	b.n	80077bc <__mcmp+0x28>
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ca:	e7f7      	b.n	80077bc <__mcmp+0x28>

080077cc <__mdiff>:
 80077cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	460c      	mov	r4, r1
 80077d2:	4606      	mov	r6, r0
 80077d4:	4611      	mov	r1, r2
 80077d6:	4620      	mov	r0, r4
 80077d8:	4690      	mov	r8, r2
 80077da:	f7ff ffdb 	bl	8007794 <__mcmp>
 80077de:	1e05      	subs	r5, r0, #0
 80077e0:	d110      	bne.n	8007804 <__mdiff+0x38>
 80077e2:	4629      	mov	r1, r5
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7ff fd59 	bl	800729c <_Balloc>
 80077ea:	b930      	cbnz	r0, 80077fa <__mdiff+0x2e>
 80077ec:	4b3a      	ldr	r3, [pc, #232]	; (80078d8 <__mdiff+0x10c>)
 80077ee:	4602      	mov	r2, r0
 80077f0:	f240 2137 	movw	r1, #567	; 0x237
 80077f4:	4839      	ldr	r0, [pc, #228]	; (80078dc <__mdiff+0x110>)
 80077f6:	f000 fb61 	bl	8007ebc <__assert_func>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	bfa4      	itt	ge
 8007806:	4643      	movge	r3, r8
 8007808:	46a0      	movge	r8, r4
 800780a:	4630      	mov	r0, r6
 800780c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007810:	bfa6      	itte	ge
 8007812:	461c      	movge	r4, r3
 8007814:	2500      	movge	r5, #0
 8007816:	2501      	movlt	r5, #1
 8007818:	f7ff fd40 	bl	800729c <_Balloc>
 800781c:	b920      	cbnz	r0, 8007828 <__mdiff+0x5c>
 800781e:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <__mdiff+0x10c>)
 8007820:	4602      	mov	r2, r0
 8007822:	f240 2145 	movw	r1, #581	; 0x245
 8007826:	e7e5      	b.n	80077f4 <__mdiff+0x28>
 8007828:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800782c:	6926      	ldr	r6, [r4, #16]
 800782e:	60c5      	str	r5, [r0, #12]
 8007830:	f104 0914 	add.w	r9, r4, #20
 8007834:	f108 0514 	add.w	r5, r8, #20
 8007838:	f100 0e14 	add.w	lr, r0, #20
 800783c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007840:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007844:	f108 0210 	add.w	r2, r8, #16
 8007848:	46f2      	mov	sl, lr
 800784a:	2100      	movs	r1, #0
 800784c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007850:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007854:	fa11 f88b 	uxtah	r8, r1, fp
 8007858:	b299      	uxth	r1, r3
 800785a:	0c1b      	lsrs	r3, r3, #16
 800785c:	eba8 0801 	sub.w	r8, r8, r1
 8007860:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007864:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007868:	fa1f f888 	uxth.w	r8, r8
 800786c:	1419      	asrs	r1, r3, #16
 800786e:	454e      	cmp	r6, r9
 8007870:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007874:	f84a 3b04 	str.w	r3, [sl], #4
 8007878:	d8e8      	bhi.n	800784c <__mdiff+0x80>
 800787a:	1b33      	subs	r3, r6, r4
 800787c:	3b15      	subs	r3, #21
 800787e:	f023 0303 	bic.w	r3, r3, #3
 8007882:	3304      	adds	r3, #4
 8007884:	3415      	adds	r4, #21
 8007886:	42a6      	cmp	r6, r4
 8007888:	bf38      	it	cc
 800788a:	2304      	movcc	r3, #4
 800788c:	441d      	add	r5, r3
 800788e:	4473      	add	r3, lr
 8007890:	469e      	mov	lr, r3
 8007892:	462e      	mov	r6, r5
 8007894:	4566      	cmp	r6, ip
 8007896:	d30e      	bcc.n	80078b6 <__mdiff+0xea>
 8007898:	f10c 0203 	add.w	r2, ip, #3
 800789c:	1b52      	subs	r2, r2, r5
 800789e:	f022 0203 	bic.w	r2, r2, #3
 80078a2:	3d03      	subs	r5, #3
 80078a4:	45ac      	cmp	ip, r5
 80078a6:	bf38      	it	cc
 80078a8:	2200      	movcc	r2, #0
 80078aa:	4413      	add	r3, r2
 80078ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80078b0:	b17a      	cbz	r2, 80078d2 <__mdiff+0x106>
 80078b2:	6107      	str	r7, [r0, #16]
 80078b4:	e7a4      	b.n	8007800 <__mdiff+0x34>
 80078b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80078ba:	fa11 f288 	uxtah	r2, r1, r8
 80078be:	1414      	asrs	r4, r2, #16
 80078c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078c4:	b292      	uxth	r2, r2
 80078c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078ca:	f84e 2b04 	str.w	r2, [lr], #4
 80078ce:	1421      	asrs	r1, r4, #16
 80078d0:	e7e0      	b.n	8007894 <__mdiff+0xc8>
 80078d2:	3f01      	subs	r7, #1
 80078d4:	e7ea      	b.n	80078ac <__mdiff+0xe0>
 80078d6:	bf00      	nop
 80078d8:	0800811c 	.word	0x0800811c
 80078dc:	0800812d 	.word	0x0800812d

080078e0 <__d2b>:
 80078e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078e4:	460f      	mov	r7, r1
 80078e6:	2101      	movs	r1, #1
 80078e8:	ec59 8b10 	vmov	r8, r9, d0
 80078ec:	4616      	mov	r6, r2
 80078ee:	f7ff fcd5 	bl	800729c <_Balloc>
 80078f2:	4604      	mov	r4, r0
 80078f4:	b930      	cbnz	r0, 8007904 <__d2b+0x24>
 80078f6:	4602      	mov	r2, r0
 80078f8:	4b24      	ldr	r3, [pc, #144]	; (800798c <__d2b+0xac>)
 80078fa:	4825      	ldr	r0, [pc, #148]	; (8007990 <__d2b+0xb0>)
 80078fc:	f240 310f 	movw	r1, #783	; 0x30f
 8007900:	f000 fadc 	bl	8007ebc <__assert_func>
 8007904:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800790c:	bb2d      	cbnz	r5, 800795a <__d2b+0x7a>
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	f1b8 0300 	subs.w	r3, r8, #0
 8007914:	d026      	beq.n	8007964 <__d2b+0x84>
 8007916:	4668      	mov	r0, sp
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	f7ff fd87 	bl	800742c <__lo0bits>
 800791e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007922:	b1e8      	cbz	r0, 8007960 <__d2b+0x80>
 8007924:	f1c0 0320 	rsb	r3, r0, #32
 8007928:	fa02 f303 	lsl.w	r3, r2, r3
 800792c:	430b      	orrs	r3, r1
 800792e:	40c2      	lsrs	r2, r0
 8007930:	6163      	str	r3, [r4, #20]
 8007932:	9201      	str	r2, [sp, #4]
 8007934:	9b01      	ldr	r3, [sp, #4]
 8007936:	61a3      	str	r3, [r4, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	bf14      	ite	ne
 800793c:	2202      	movne	r2, #2
 800793e:	2201      	moveq	r2, #1
 8007940:	6122      	str	r2, [r4, #16]
 8007942:	b1bd      	cbz	r5, 8007974 <__d2b+0x94>
 8007944:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007948:	4405      	add	r5, r0
 800794a:	603d      	str	r5, [r7, #0]
 800794c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007950:	6030      	str	r0, [r6, #0]
 8007952:	4620      	mov	r0, r4
 8007954:	b003      	add	sp, #12
 8007956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800795a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800795e:	e7d6      	b.n	800790e <__d2b+0x2e>
 8007960:	6161      	str	r1, [r4, #20]
 8007962:	e7e7      	b.n	8007934 <__d2b+0x54>
 8007964:	a801      	add	r0, sp, #4
 8007966:	f7ff fd61 	bl	800742c <__lo0bits>
 800796a:	9b01      	ldr	r3, [sp, #4]
 800796c:	6163      	str	r3, [r4, #20]
 800796e:	3020      	adds	r0, #32
 8007970:	2201      	movs	r2, #1
 8007972:	e7e5      	b.n	8007940 <__d2b+0x60>
 8007974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800797c:	6038      	str	r0, [r7, #0]
 800797e:	6918      	ldr	r0, [r3, #16]
 8007980:	f7ff fd34 	bl	80073ec <__hi0bits>
 8007984:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007988:	e7e2      	b.n	8007950 <__d2b+0x70>
 800798a:	bf00      	nop
 800798c:	0800811c 	.word	0x0800811c
 8007990:	0800812d 	.word	0x0800812d

08007994 <__sfputc_r>:
 8007994:	6893      	ldr	r3, [r2, #8]
 8007996:	3b01      	subs	r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	b410      	push	{r4}
 800799c:	6093      	str	r3, [r2, #8]
 800799e:	da08      	bge.n	80079b2 <__sfputc_r+0x1e>
 80079a0:	6994      	ldr	r4, [r2, #24]
 80079a2:	42a3      	cmp	r3, r4
 80079a4:	db01      	blt.n	80079aa <__sfputc_r+0x16>
 80079a6:	290a      	cmp	r1, #10
 80079a8:	d103      	bne.n	80079b2 <__sfputc_r+0x1e>
 80079aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ae:	f7fe bbe4 	b.w	800617a <__swbuf_r>
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	1c58      	adds	r0, r3, #1
 80079b6:	6010      	str	r0, [r2, #0]
 80079b8:	7019      	strb	r1, [r3, #0]
 80079ba:	4608      	mov	r0, r1
 80079bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <__sfputs_r>:
 80079c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	4614      	mov	r4, r2
 80079ca:	18d5      	adds	r5, r2, r3
 80079cc:	42ac      	cmp	r4, r5
 80079ce:	d101      	bne.n	80079d4 <__sfputs_r+0x12>
 80079d0:	2000      	movs	r0, #0
 80079d2:	e007      	b.n	80079e4 <__sfputs_r+0x22>
 80079d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d8:	463a      	mov	r2, r7
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ffda 	bl	8007994 <__sfputc_r>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d1f3      	bne.n	80079cc <__sfputs_r+0xa>
 80079e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079e8 <_vfiprintf_r>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	460d      	mov	r5, r1
 80079ee:	b09d      	sub	sp, #116	; 0x74
 80079f0:	4614      	mov	r4, r2
 80079f2:	4698      	mov	r8, r3
 80079f4:	4606      	mov	r6, r0
 80079f6:	b118      	cbz	r0, 8007a00 <_vfiprintf_r+0x18>
 80079f8:	6a03      	ldr	r3, [r0, #32]
 80079fa:	b90b      	cbnz	r3, 8007a00 <_vfiprintf_r+0x18>
 80079fc:	f7fe fad6 	bl	8005fac <__sinit>
 8007a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a02:	07d9      	lsls	r1, r3, #31
 8007a04:	d405      	bmi.n	8007a12 <_vfiprintf_r+0x2a>
 8007a06:	89ab      	ldrh	r3, [r5, #12]
 8007a08:	059a      	lsls	r2, r3, #22
 8007a0a:	d402      	bmi.n	8007a12 <_vfiprintf_r+0x2a>
 8007a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a0e:	f7fe fcc6 	bl	800639e <__retarget_lock_acquire_recursive>
 8007a12:	89ab      	ldrh	r3, [r5, #12]
 8007a14:	071b      	lsls	r3, r3, #28
 8007a16:	d501      	bpl.n	8007a1c <_vfiprintf_r+0x34>
 8007a18:	692b      	ldr	r3, [r5, #16]
 8007a1a:	b99b      	cbnz	r3, 8007a44 <_vfiprintf_r+0x5c>
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7fe fbe8 	bl	80061f4 <__swsetup_r>
 8007a24:	b170      	cbz	r0, 8007a44 <_vfiprintf_r+0x5c>
 8007a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a28:	07dc      	lsls	r4, r3, #31
 8007a2a:	d504      	bpl.n	8007a36 <_vfiprintf_r+0x4e>
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	b01d      	add	sp, #116	; 0x74
 8007a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a36:	89ab      	ldrh	r3, [r5, #12]
 8007a38:	0598      	lsls	r0, r3, #22
 8007a3a:	d4f7      	bmi.n	8007a2c <_vfiprintf_r+0x44>
 8007a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a3e:	f7fe fcaf 	bl	80063a0 <__retarget_lock_release_recursive>
 8007a42:	e7f3      	b.n	8007a2c <_vfiprintf_r+0x44>
 8007a44:	2300      	movs	r3, #0
 8007a46:	9309      	str	r3, [sp, #36]	; 0x24
 8007a48:	2320      	movs	r3, #32
 8007a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a52:	2330      	movs	r3, #48	; 0x30
 8007a54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c08 <_vfiprintf_r+0x220>
 8007a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a5c:	f04f 0901 	mov.w	r9, #1
 8007a60:	4623      	mov	r3, r4
 8007a62:	469a      	mov	sl, r3
 8007a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a68:	b10a      	cbz	r2, 8007a6e <_vfiprintf_r+0x86>
 8007a6a:	2a25      	cmp	r2, #37	; 0x25
 8007a6c:	d1f9      	bne.n	8007a62 <_vfiprintf_r+0x7a>
 8007a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a72:	d00b      	beq.n	8007a8c <_vfiprintf_r+0xa4>
 8007a74:	465b      	mov	r3, fp
 8007a76:	4622      	mov	r2, r4
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7ff ffa1 	bl	80079c2 <__sfputs_r>
 8007a80:	3001      	adds	r0, #1
 8007a82:	f000 80a9 	beq.w	8007bd8 <_vfiprintf_r+0x1f0>
 8007a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a88:	445a      	add	r2, fp
 8007a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 80a1 	beq.w	8007bd8 <_vfiprintf_r+0x1f0>
 8007a96:	2300      	movs	r3, #0
 8007a98:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa0:	f10a 0a01 	add.w	sl, sl, #1
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	9307      	str	r3, [sp, #28]
 8007aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aac:	931a      	str	r3, [sp, #104]	; 0x68
 8007aae:	4654      	mov	r4, sl
 8007ab0:	2205      	movs	r2, #5
 8007ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab6:	4854      	ldr	r0, [pc, #336]	; (8007c08 <_vfiprintf_r+0x220>)
 8007ab8:	f7f8 fb9a 	bl	80001f0 <memchr>
 8007abc:	9a04      	ldr	r2, [sp, #16]
 8007abe:	b9d8      	cbnz	r0, 8007af8 <_vfiprintf_r+0x110>
 8007ac0:	06d1      	lsls	r1, r2, #27
 8007ac2:	bf44      	itt	mi
 8007ac4:	2320      	movmi	r3, #32
 8007ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aca:	0713      	lsls	r3, r2, #28
 8007acc:	bf44      	itt	mi
 8007ace:	232b      	movmi	r3, #43	; 0x2b
 8007ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8007ada:	d015      	beq.n	8007b08 <_vfiprintf_r+0x120>
 8007adc:	9a07      	ldr	r2, [sp, #28]
 8007ade:	4654      	mov	r4, sl
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	f04f 0c0a 	mov.w	ip, #10
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aec:	3b30      	subs	r3, #48	; 0x30
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d94d      	bls.n	8007b8e <_vfiprintf_r+0x1a6>
 8007af2:	b1b0      	cbz	r0, 8007b22 <_vfiprintf_r+0x13a>
 8007af4:	9207      	str	r2, [sp, #28]
 8007af6:	e014      	b.n	8007b22 <_vfiprintf_r+0x13a>
 8007af8:	eba0 0308 	sub.w	r3, r0, r8
 8007afc:	fa09 f303 	lsl.w	r3, r9, r3
 8007b00:	4313      	orrs	r3, r2
 8007b02:	9304      	str	r3, [sp, #16]
 8007b04:	46a2      	mov	sl, r4
 8007b06:	e7d2      	b.n	8007aae <_vfiprintf_r+0xc6>
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	1d19      	adds	r1, r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	9103      	str	r1, [sp, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	bfbb      	ittet	lt
 8007b14:	425b      	neglt	r3, r3
 8007b16:	f042 0202 	orrlt.w	r2, r2, #2
 8007b1a:	9307      	strge	r3, [sp, #28]
 8007b1c:	9307      	strlt	r3, [sp, #28]
 8007b1e:	bfb8      	it	lt
 8007b20:	9204      	strlt	r2, [sp, #16]
 8007b22:	7823      	ldrb	r3, [r4, #0]
 8007b24:	2b2e      	cmp	r3, #46	; 0x2e
 8007b26:	d10c      	bne.n	8007b42 <_vfiprintf_r+0x15a>
 8007b28:	7863      	ldrb	r3, [r4, #1]
 8007b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2c:	d134      	bne.n	8007b98 <_vfiprintf_r+0x1b0>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	1d1a      	adds	r2, r3, #4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	9203      	str	r2, [sp, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfb8      	it	lt
 8007b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b3e:	3402      	adds	r4, #2
 8007b40:	9305      	str	r3, [sp, #20]
 8007b42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c18 <_vfiprintf_r+0x230>
 8007b46:	7821      	ldrb	r1, [r4, #0]
 8007b48:	2203      	movs	r2, #3
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	f7f8 fb50 	bl	80001f0 <memchr>
 8007b50:	b138      	cbz	r0, 8007b62 <_vfiprintf_r+0x17a>
 8007b52:	9b04      	ldr	r3, [sp, #16]
 8007b54:	eba0 000a 	sub.w	r0, r0, sl
 8007b58:	2240      	movs	r2, #64	; 0x40
 8007b5a:	4082      	lsls	r2, r0
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	3401      	adds	r4, #1
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b66:	4829      	ldr	r0, [pc, #164]	; (8007c0c <_vfiprintf_r+0x224>)
 8007b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b6c:	2206      	movs	r2, #6
 8007b6e:	f7f8 fb3f 	bl	80001f0 <memchr>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d03f      	beq.n	8007bf6 <_vfiprintf_r+0x20e>
 8007b76:	4b26      	ldr	r3, [pc, #152]	; (8007c10 <_vfiprintf_r+0x228>)
 8007b78:	bb1b      	cbnz	r3, 8007bc2 <_vfiprintf_r+0x1da>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	f023 0307 	bic.w	r3, r3, #7
 8007b82:	3308      	adds	r3, #8
 8007b84:	9303      	str	r3, [sp, #12]
 8007b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b88:	443b      	add	r3, r7
 8007b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8c:	e768      	b.n	8007a60 <_vfiprintf_r+0x78>
 8007b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b92:	460c      	mov	r4, r1
 8007b94:	2001      	movs	r0, #1
 8007b96:	e7a6      	b.n	8007ae6 <_vfiprintf_r+0xfe>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	3401      	adds	r4, #1
 8007b9c:	9305      	str	r3, [sp, #20]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	f04f 0c0a 	mov.w	ip, #10
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007baa:	3a30      	subs	r2, #48	; 0x30
 8007bac:	2a09      	cmp	r2, #9
 8007bae:	d903      	bls.n	8007bb8 <_vfiprintf_r+0x1d0>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0c6      	beq.n	8007b42 <_vfiprintf_r+0x15a>
 8007bb4:	9105      	str	r1, [sp, #20]
 8007bb6:	e7c4      	b.n	8007b42 <_vfiprintf_r+0x15a>
 8007bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e7f0      	b.n	8007ba4 <_vfiprintf_r+0x1bc>
 8007bc2:	ab03      	add	r3, sp, #12
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	462a      	mov	r2, r5
 8007bc8:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <_vfiprintf_r+0x22c>)
 8007bca:	a904      	add	r1, sp, #16
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7fd fd9b 	bl	8005708 <_printf_float>
 8007bd2:	4607      	mov	r7, r0
 8007bd4:	1c78      	adds	r0, r7, #1
 8007bd6:	d1d6      	bne.n	8007b86 <_vfiprintf_r+0x19e>
 8007bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bda:	07d9      	lsls	r1, r3, #31
 8007bdc:	d405      	bmi.n	8007bea <_vfiprintf_r+0x202>
 8007bde:	89ab      	ldrh	r3, [r5, #12]
 8007be0:	059a      	lsls	r2, r3, #22
 8007be2:	d402      	bmi.n	8007bea <_vfiprintf_r+0x202>
 8007be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007be6:	f7fe fbdb 	bl	80063a0 <__retarget_lock_release_recursive>
 8007bea:	89ab      	ldrh	r3, [r5, #12]
 8007bec:	065b      	lsls	r3, r3, #25
 8007bee:	f53f af1d 	bmi.w	8007a2c <_vfiprintf_r+0x44>
 8007bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bf4:	e71c      	b.n	8007a30 <_vfiprintf_r+0x48>
 8007bf6:	ab03      	add	r3, sp, #12
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	462a      	mov	r2, r5
 8007bfc:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <_vfiprintf_r+0x22c>)
 8007bfe:	a904      	add	r1, sp, #16
 8007c00:	4630      	mov	r0, r6
 8007c02:	f7fe f825 	bl	8005c50 <_printf_i>
 8007c06:	e7e4      	b.n	8007bd2 <_vfiprintf_r+0x1ea>
 8007c08:	08008284 	.word	0x08008284
 8007c0c:	0800828e 	.word	0x0800828e
 8007c10:	08005709 	.word	0x08005709
 8007c14:	080079c3 	.word	0x080079c3
 8007c18:	0800828a 	.word	0x0800828a

08007c1c <__sflush_r>:
 8007c1c:	898a      	ldrh	r2, [r1, #12]
 8007c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c22:	4605      	mov	r5, r0
 8007c24:	0710      	lsls	r0, r2, #28
 8007c26:	460c      	mov	r4, r1
 8007c28:	d458      	bmi.n	8007cdc <__sflush_r+0xc0>
 8007c2a:	684b      	ldr	r3, [r1, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	dc05      	bgt.n	8007c3c <__sflush_r+0x20>
 8007c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dc02      	bgt.n	8007c3c <__sflush_r+0x20>
 8007c36:	2000      	movs	r0, #0
 8007c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	d0f9      	beq.n	8007c36 <__sflush_r+0x1a>
 8007c42:	2300      	movs	r3, #0
 8007c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c48:	682f      	ldr	r7, [r5, #0]
 8007c4a:	6a21      	ldr	r1, [r4, #32]
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	d032      	beq.n	8007cb6 <__sflush_r+0x9a>
 8007c50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	075a      	lsls	r2, r3, #29
 8007c56:	d505      	bpl.n	8007c64 <__sflush_r+0x48>
 8007c58:	6863      	ldr	r3, [r4, #4]
 8007c5a:	1ac0      	subs	r0, r0, r3
 8007c5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c5e:	b10b      	cbz	r3, 8007c64 <__sflush_r+0x48>
 8007c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c62:	1ac0      	subs	r0, r0, r3
 8007c64:	2300      	movs	r3, #0
 8007c66:	4602      	mov	r2, r0
 8007c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c6a:	6a21      	ldr	r1, [r4, #32]
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b0      	blx	r6
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	d106      	bne.n	8007c84 <__sflush_r+0x68>
 8007c76:	6829      	ldr	r1, [r5, #0]
 8007c78:	291d      	cmp	r1, #29
 8007c7a:	d82b      	bhi.n	8007cd4 <__sflush_r+0xb8>
 8007c7c:	4a29      	ldr	r2, [pc, #164]	; (8007d24 <__sflush_r+0x108>)
 8007c7e:	410a      	asrs	r2, r1
 8007c80:	07d6      	lsls	r6, r2, #31
 8007c82:	d427      	bmi.n	8007cd4 <__sflush_r+0xb8>
 8007c84:	2200      	movs	r2, #0
 8007c86:	6062      	str	r2, [r4, #4]
 8007c88:	04d9      	lsls	r1, r3, #19
 8007c8a:	6922      	ldr	r2, [r4, #16]
 8007c8c:	6022      	str	r2, [r4, #0]
 8007c8e:	d504      	bpl.n	8007c9a <__sflush_r+0x7e>
 8007c90:	1c42      	adds	r2, r0, #1
 8007c92:	d101      	bne.n	8007c98 <__sflush_r+0x7c>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b903      	cbnz	r3, 8007c9a <__sflush_r+0x7e>
 8007c98:	6560      	str	r0, [r4, #84]	; 0x54
 8007c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c9c:	602f      	str	r7, [r5, #0]
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	d0c9      	beq.n	8007c36 <__sflush_r+0x1a>
 8007ca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	d002      	beq.n	8007cb0 <__sflush_r+0x94>
 8007caa:	4628      	mov	r0, r5
 8007cac:	f7ff f9f6 	bl	800709c <_free_r>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	6360      	str	r0, [r4, #52]	; 0x34
 8007cb4:	e7c0      	b.n	8007c38 <__sflush_r+0x1c>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b0      	blx	r6
 8007cbc:	1c41      	adds	r1, r0, #1
 8007cbe:	d1c8      	bne.n	8007c52 <__sflush_r+0x36>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0c5      	beq.n	8007c52 <__sflush_r+0x36>
 8007cc6:	2b1d      	cmp	r3, #29
 8007cc8:	d001      	beq.n	8007cce <__sflush_r+0xb2>
 8007cca:	2b16      	cmp	r3, #22
 8007ccc:	d101      	bne.n	8007cd2 <__sflush_r+0xb6>
 8007cce:	602f      	str	r7, [r5, #0]
 8007cd0:	e7b1      	b.n	8007c36 <__sflush_r+0x1a>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	e7ad      	b.n	8007c38 <__sflush_r+0x1c>
 8007cdc:	690f      	ldr	r7, [r1, #16]
 8007cde:	2f00      	cmp	r7, #0
 8007ce0:	d0a9      	beq.n	8007c36 <__sflush_r+0x1a>
 8007ce2:	0793      	lsls	r3, r2, #30
 8007ce4:	680e      	ldr	r6, [r1, #0]
 8007ce6:	bf08      	it	eq
 8007ce8:	694b      	ldreq	r3, [r1, #20]
 8007cea:	600f      	str	r7, [r1, #0]
 8007cec:	bf18      	it	ne
 8007cee:	2300      	movne	r3, #0
 8007cf0:	eba6 0807 	sub.w	r8, r6, r7
 8007cf4:	608b      	str	r3, [r1, #8]
 8007cf6:	f1b8 0f00 	cmp.w	r8, #0
 8007cfa:	dd9c      	ble.n	8007c36 <__sflush_r+0x1a>
 8007cfc:	6a21      	ldr	r1, [r4, #32]
 8007cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d00:	4643      	mov	r3, r8
 8007d02:	463a      	mov	r2, r7
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b0      	blx	r6
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	dc06      	bgt.n	8007d1a <__sflush_r+0xfe>
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d12:	81a3      	strh	r3, [r4, #12]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	e78e      	b.n	8007c38 <__sflush_r+0x1c>
 8007d1a:	4407      	add	r7, r0
 8007d1c:	eba8 0800 	sub.w	r8, r8, r0
 8007d20:	e7e9      	b.n	8007cf6 <__sflush_r+0xda>
 8007d22:	bf00      	nop
 8007d24:	dfbffffe 	.word	0xdfbffffe

08007d28 <_fflush_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	690b      	ldr	r3, [r1, #16]
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	b913      	cbnz	r3, 8007d38 <_fflush_r+0x10>
 8007d32:	2500      	movs	r5, #0
 8007d34:	4628      	mov	r0, r5
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	b118      	cbz	r0, 8007d42 <_fflush_r+0x1a>
 8007d3a:	6a03      	ldr	r3, [r0, #32]
 8007d3c:	b90b      	cbnz	r3, 8007d42 <_fflush_r+0x1a>
 8007d3e:	f7fe f935 	bl	8005fac <__sinit>
 8007d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0f3      	beq.n	8007d32 <_fflush_r+0xa>
 8007d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d4c:	07d0      	lsls	r0, r2, #31
 8007d4e:	d404      	bmi.n	8007d5a <_fflush_r+0x32>
 8007d50:	0599      	lsls	r1, r3, #22
 8007d52:	d402      	bmi.n	8007d5a <_fflush_r+0x32>
 8007d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d56:	f7fe fb22 	bl	800639e <__retarget_lock_acquire_recursive>
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	f7ff ff5d 	bl	8007c1c <__sflush_r>
 8007d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d64:	07da      	lsls	r2, r3, #31
 8007d66:	4605      	mov	r5, r0
 8007d68:	d4e4      	bmi.n	8007d34 <_fflush_r+0xc>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	059b      	lsls	r3, r3, #22
 8007d6e:	d4e1      	bmi.n	8007d34 <_fflush_r+0xc>
 8007d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d72:	f7fe fb15 	bl	80063a0 <__retarget_lock_release_recursive>
 8007d76:	e7dd      	b.n	8007d34 <_fflush_r+0xc>

08007d78 <__swhatbuf_r>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d80:	2900      	cmp	r1, #0
 8007d82:	b096      	sub	sp, #88	; 0x58
 8007d84:	4615      	mov	r5, r2
 8007d86:	461e      	mov	r6, r3
 8007d88:	da0d      	bge.n	8007da6 <__swhatbuf_r+0x2e>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d90:	f04f 0100 	mov.w	r1, #0
 8007d94:	bf0c      	ite	eq
 8007d96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d9a:	2340      	movne	r3, #64	; 0x40
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	6031      	str	r1, [r6, #0]
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	b016      	add	sp, #88	; 0x58
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
 8007da6:	466a      	mov	r2, sp
 8007da8:	f000 f848 	bl	8007e3c <_fstat_r>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	dbec      	blt.n	8007d8a <__swhatbuf_r+0x12>
 8007db0:	9901      	ldr	r1, [sp, #4]
 8007db2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007db6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007dba:	4259      	negs	r1, r3
 8007dbc:	4159      	adcs	r1, r3
 8007dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dc2:	e7eb      	b.n	8007d9c <__swhatbuf_r+0x24>

08007dc4 <__smakebuf_r>:
 8007dc4:	898b      	ldrh	r3, [r1, #12]
 8007dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dc8:	079d      	lsls	r5, r3, #30
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	d507      	bpl.n	8007de0 <__smakebuf_r+0x1c>
 8007dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	6163      	str	r3, [r4, #20]
 8007ddc:	b002      	add	sp, #8
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
 8007de0:	ab01      	add	r3, sp, #4
 8007de2:	466a      	mov	r2, sp
 8007de4:	f7ff ffc8 	bl	8007d78 <__swhatbuf_r>
 8007de8:	9900      	ldr	r1, [sp, #0]
 8007dea:	4605      	mov	r5, r0
 8007dec:	4630      	mov	r0, r6
 8007dee:	f7ff f9c9 	bl	8007184 <_malloc_r>
 8007df2:	b948      	cbnz	r0, 8007e08 <__smakebuf_r+0x44>
 8007df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df8:	059a      	lsls	r2, r3, #22
 8007dfa:	d4ef      	bmi.n	8007ddc <__smakebuf_r+0x18>
 8007dfc:	f023 0303 	bic.w	r3, r3, #3
 8007e00:	f043 0302 	orr.w	r3, r3, #2
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	e7e3      	b.n	8007dd0 <__smakebuf_r+0xc>
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	6020      	str	r0, [r4, #0]
 8007e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	9b00      	ldr	r3, [sp, #0]
 8007e14:	6163      	str	r3, [r4, #20]
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	6120      	str	r0, [r4, #16]
 8007e1a:	b15b      	cbz	r3, 8007e34 <__smakebuf_r+0x70>
 8007e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 f81d 	bl	8007e60 <_isatty_r>
 8007e26:	b128      	cbz	r0, 8007e34 <__smakebuf_r+0x70>
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	f043 0301 	orr.w	r3, r3, #1
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	431d      	orrs	r5, r3
 8007e38:	81a5      	strh	r5, [r4, #12]
 8007e3a:	e7cf      	b.n	8007ddc <__smakebuf_r+0x18>

08007e3c <_fstat_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4d07      	ldr	r5, [pc, #28]	; (8007e5c <_fstat_r+0x20>)
 8007e40:	2300      	movs	r3, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	4608      	mov	r0, r1
 8007e46:	4611      	mov	r1, r2
 8007e48:	602b      	str	r3, [r5, #0]
 8007e4a:	f7f9 ff56 	bl	8001cfa <_fstat>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	d102      	bne.n	8007e58 <_fstat_r+0x1c>
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	b103      	cbz	r3, 8007e58 <_fstat_r+0x1c>
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	bd38      	pop	{r3, r4, r5, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000b90 	.word	0x20000b90

08007e60 <_isatty_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4d06      	ldr	r5, [pc, #24]	; (8007e7c <_isatty_r+0x1c>)
 8007e64:	2300      	movs	r3, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	f7f9 ff55 	bl	8001d1a <_isatty>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	d102      	bne.n	8007e7a <_isatty_r+0x1a>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	b103      	cbz	r3, 8007e7a <_isatty_r+0x1a>
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	20000b90 	.word	0x20000b90

08007e80 <_sbrk_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4d06      	ldr	r5, [pc, #24]	; (8007e9c <_sbrk_r+0x1c>)
 8007e84:	2300      	movs	r3, #0
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	f7f9 ff5e 	bl	8001d4c <_sbrk>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_sbrk_r+0x1a>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_sbrk_r+0x1a>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	20000b90 	.word	0x20000b90

08007ea0 <memcpy>:
 8007ea0:	440a      	add	r2, r1
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ea8:	d100      	bne.n	8007eac <memcpy+0xc>
 8007eaa:	4770      	bx	lr
 8007eac:	b510      	push	{r4, lr}
 8007eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eb6:	4291      	cmp	r1, r2
 8007eb8:	d1f9      	bne.n	8007eae <memcpy+0xe>
 8007eba:	bd10      	pop	{r4, pc}

08007ebc <__assert_func>:
 8007ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <__assert_func+0x2c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	68d8      	ldr	r0, [r3, #12]
 8007eca:	b14c      	cbz	r4, 8007ee0 <__assert_func+0x24>
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <__assert_func+0x30>)
 8007ece:	9100      	str	r1, [sp, #0]
 8007ed0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ed4:	4906      	ldr	r1, [pc, #24]	; (8007ef0 <__assert_func+0x34>)
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	f000 f844 	bl	8007f64 <fiprintf>
 8007edc:	f000 f854 	bl	8007f88 <abort>
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <__assert_func+0x38>)
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	e7f3      	b.n	8007ece <__assert_func+0x12>
 8007ee6:	bf00      	nop
 8007ee8:	20000064 	.word	0x20000064
 8007eec:	0800829f 	.word	0x0800829f
 8007ef0:	080082ac 	.word	0x080082ac
 8007ef4:	080082da 	.word	0x080082da

08007ef8 <_calloc_r>:
 8007ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007efa:	fba1 2402 	umull	r2, r4, r1, r2
 8007efe:	b94c      	cbnz	r4, 8007f14 <_calloc_r+0x1c>
 8007f00:	4611      	mov	r1, r2
 8007f02:	9201      	str	r2, [sp, #4]
 8007f04:	f7ff f93e 	bl	8007184 <_malloc_r>
 8007f08:	9a01      	ldr	r2, [sp, #4]
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	b930      	cbnz	r0, 8007f1c <_calloc_r+0x24>
 8007f0e:	4628      	mov	r0, r5
 8007f10:	b003      	add	sp, #12
 8007f12:	bd30      	pop	{r4, r5, pc}
 8007f14:	220c      	movs	r2, #12
 8007f16:	6002      	str	r2, [r0, #0]
 8007f18:	2500      	movs	r5, #0
 8007f1a:	e7f8      	b.n	8007f0e <_calloc_r+0x16>
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	f7fe f9c1 	bl	80062a4 <memset>
 8007f22:	e7f4      	b.n	8007f0e <_calloc_r+0x16>

08007f24 <__ascii_mbtowc>:
 8007f24:	b082      	sub	sp, #8
 8007f26:	b901      	cbnz	r1, 8007f2a <__ascii_mbtowc+0x6>
 8007f28:	a901      	add	r1, sp, #4
 8007f2a:	b142      	cbz	r2, 8007f3e <__ascii_mbtowc+0x1a>
 8007f2c:	b14b      	cbz	r3, 8007f42 <__ascii_mbtowc+0x1e>
 8007f2e:	7813      	ldrb	r3, [r2, #0]
 8007f30:	600b      	str	r3, [r1, #0]
 8007f32:	7812      	ldrb	r2, [r2, #0]
 8007f34:	1e10      	subs	r0, r2, #0
 8007f36:	bf18      	it	ne
 8007f38:	2001      	movne	r0, #1
 8007f3a:	b002      	add	sp, #8
 8007f3c:	4770      	bx	lr
 8007f3e:	4610      	mov	r0, r2
 8007f40:	e7fb      	b.n	8007f3a <__ascii_mbtowc+0x16>
 8007f42:	f06f 0001 	mvn.w	r0, #1
 8007f46:	e7f8      	b.n	8007f3a <__ascii_mbtowc+0x16>

08007f48 <__ascii_wctomb>:
 8007f48:	b149      	cbz	r1, 8007f5e <__ascii_wctomb+0x16>
 8007f4a:	2aff      	cmp	r2, #255	; 0xff
 8007f4c:	bf85      	ittet	hi
 8007f4e:	238a      	movhi	r3, #138	; 0x8a
 8007f50:	6003      	strhi	r3, [r0, #0]
 8007f52:	700a      	strbls	r2, [r1, #0]
 8007f54:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f58:	bf98      	it	ls
 8007f5a:	2001      	movls	r0, #1
 8007f5c:	4770      	bx	lr
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4770      	bx	lr
	...

08007f64 <fiprintf>:
 8007f64:	b40e      	push	{r1, r2, r3}
 8007f66:	b503      	push	{r0, r1, lr}
 8007f68:	4601      	mov	r1, r0
 8007f6a:	ab03      	add	r3, sp, #12
 8007f6c:	4805      	ldr	r0, [pc, #20]	; (8007f84 <fiprintf+0x20>)
 8007f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f72:	6800      	ldr	r0, [r0, #0]
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	f7ff fd37 	bl	80079e8 <_vfiprintf_r>
 8007f7a:	b002      	add	sp, #8
 8007f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f80:	b003      	add	sp, #12
 8007f82:	4770      	bx	lr
 8007f84:	20000064 	.word	0x20000064

08007f88 <abort>:
 8007f88:	b508      	push	{r3, lr}
 8007f8a:	2006      	movs	r0, #6
 8007f8c:	f000 f82c 	bl	8007fe8 <raise>
 8007f90:	2001      	movs	r0, #1
 8007f92:	f7f9 fe7f 	bl	8001c94 <_exit>

08007f96 <_raise_r>:
 8007f96:	291f      	cmp	r1, #31
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	d904      	bls.n	8007faa <_raise_r+0x14>
 8007fa0:	2316      	movs	r3, #22
 8007fa2:	6003      	str	r3, [r0, #0]
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007fac:	b112      	cbz	r2, 8007fb4 <_raise_r+0x1e>
 8007fae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fb2:	b94b      	cbnz	r3, 8007fc8 <_raise_r+0x32>
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 f831 	bl	800801c <_getpid_r>
 8007fba:	462a      	mov	r2, r5
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fc4:	f000 b818 	b.w	8007ff8 <_kill_r>
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d00a      	beq.n	8007fe2 <_raise_r+0x4c>
 8007fcc:	1c59      	adds	r1, r3, #1
 8007fce:	d103      	bne.n	8007fd8 <_raise_r+0x42>
 8007fd0:	2316      	movs	r3, #22
 8007fd2:	6003      	str	r3, [r0, #0]
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	e7e7      	b.n	8007fa8 <_raise_r+0x12>
 8007fd8:	2400      	movs	r4, #0
 8007fda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fde:	4628      	mov	r0, r5
 8007fe0:	4798      	blx	r3
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	e7e0      	b.n	8007fa8 <_raise_r+0x12>
	...

08007fe8 <raise>:
 8007fe8:	4b02      	ldr	r3, [pc, #8]	; (8007ff4 <raise+0xc>)
 8007fea:	4601      	mov	r1, r0
 8007fec:	6818      	ldr	r0, [r3, #0]
 8007fee:	f7ff bfd2 	b.w	8007f96 <_raise_r>
 8007ff2:	bf00      	nop
 8007ff4:	20000064 	.word	0x20000064

08007ff8 <_kill_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4d07      	ldr	r5, [pc, #28]	; (8008018 <_kill_r+0x20>)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4604      	mov	r4, r0
 8008000:	4608      	mov	r0, r1
 8008002:	4611      	mov	r1, r2
 8008004:	602b      	str	r3, [r5, #0]
 8008006:	f7f9 fe35 	bl	8001c74 <_kill>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	d102      	bne.n	8008014 <_kill_r+0x1c>
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	b103      	cbz	r3, 8008014 <_kill_r+0x1c>
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	bd38      	pop	{r3, r4, r5, pc}
 8008016:	bf00      	nop
 8008018:	20000b90 	.word	0x20000b90

0800801c <_getpid_r>:
 800801c:	f7f9 be22 	b.w	8001c64 <_getpid>

08008020 <_init>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	bf00      	nop
 8008024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008026:	bc08      	pop	{r3}
 8008028:	469e      	mov	lr, r3
 800802a:	4770      	bx	lr

0800802c <_fini>:
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	bf00      	nop
 8008030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008032:	bc08      	pop	{r3}
 8008034:	469e      	mov	lr, r3
 8008036:	4770      	bx	lr
