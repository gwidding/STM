
clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08008c3c  08008c3c  00018c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ddc  08008ddc  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de4  08008de4  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08008dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202a0  2**0
                  CONTENTS
 10 .bss          00000648  200002a0  200002a0  000202a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  000202a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019021  00000000  00000000  00020313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003169  00000000  00000000  00039334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001620  00000000  00000000  0003c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000116d  00000000  00000000  0003dac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028a0f  00000000  00000000  0003ec2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001af15  00000000  00000000  0006763c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f869b  00000000  00000000  00082551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000068d0  00000000  00000000  0017abec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001814bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002a0 	.word	0x200002a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008c24 	.word	0x08008c24

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002a4 	.word	0x200002a4
 80001ec:	08008c24 	.word	0x08008c24

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f006 fe15 	bl	80071fe <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f003 fdc1 	bl	8004170 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f007 fa9f 	bl	8007b48 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f006 fdee 	bl	80071fe <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f006 fde6 	bl	80071fe <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f006 fdd6 	bl	80071fe <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	08008c4c 	.word	0x08008c4c
 8000660:	200006a0 	.word	0x200006a0
 8000664:	2000059c 	.word	0x2000059c
 8000668:	08008c3c 	.word	0x08008c3c
 800066c:	08008c44 	.word	0x08008c44
 8000670:	08008c48 	.word	0x08008c48

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f003 fd6d 	bl	8004170 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f003 fc36 	bl	8003f74 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fced 	bl	80020ec <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000059c 	.word	0x2000059c

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <_write>:
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <_write+0x28>)
 80007f0:	f006 fd05 	bl	80071fe <HAL_UART_Transmit>
	return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200006a0 	.word	0x200006a0

08000804 <get_time>:
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
RTC_AlarmTypeDef aTime;

void get_time(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800080a:	2200      	movs	r2, #0
 800080c:	4911      	ldr	r1, [pc, #68]	; (8000854 <get_time+0x50>)
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <get_time+0x54>)
 8000810:	f004 ffc8 	bl	80057a4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000814:	2200      	movs	r2, #0
 8000816:	4911      	ldr	r1, [pc, #68]	; (800085c <get_time+0x58>)
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <get_time+0x54>)
 800081a:	f005 f8a5 	bl	8005968 <HAL_RTC_GetDate>
	sprintf((char*)showTime, "%s %02d : %02d : %02d      ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <get_time+0x50>)
 8000820:	78db      	ldrb	r3, [r3, #3]
 8000822:	461a      	mov	r2, r3
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <get_time+0x5c>)
 800082c:	441a      	add	r2, r3
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <get_time+0x50>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <get_time+0x50>)
 8000836:	785b      	ldrb	r3, [r3, #1]
 8000838:	4619      	mov	r1, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <get_time+0x50>)
 800083c:	789b      	ldrb	r3, [r3, #2]
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	9100      	str	r1, [sp, #0]
 8000842:	4603      	mov	r3, r0
 8000844:	4907      	ldr	r1, [pc, #28]	; (8000864 <get_time+0x60>)
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <get_time+0x64>)
 8000848:	f007 f9b2 	bl	8007bb0 <siprintf>
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000730 	.word	0x20000730
 8000858:	200005f0 	.word	0x200005f0
 800085c:	20000744 	.word	0x20000744
 8000860:	20000230 	.word	0x20000230
 8000864:	08008c84 	.word	0x08008c84
 8000868:	200006e8 	.word	0x200006e8

0800086c <get_alarm>:
void get_alarm(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af02      	add	r7, sp, #8
	HAL_RTC_GetAlarm(&hrtc, &aTime, RTC_CR_ALRAE, RTC_FORMAT_BIN);
 8000872:	2300      	movs	r3, #0
 8000874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000878:	490e      	ldr	r1, [pc, #56]	; (80008b4 <get_alarm+0x48>)
 800087a:	480f      	ldr	r0, [pc, #60]	; (80008b8 <get_alarm+0x4c>)
 800087c:	f005 fa06 	bl	8005c8c <HAL_RTC_GetAlarm>
	sprintf((char*)alarmTime, "%s %02d : %02d : %02d      ", ampm[aTime.AlarmTime.TimeFormat], aTime.AlarmTime.Hours, aTime.AlarmTime.Minutes, aTime.AlarmTime.Seconds);
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <get_alarm+0x48>)
 8000882:	78db      	ldrb	r3, [r3, #3]
 8000884:	461a      	mov	r2, r3
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <get_alarm+0x50>)
 800088e:	441a      	add	r2, r3
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <get_alarm+0x48>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <get_alarm+0x48>)
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	4619      	mov	r1, r3
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <get_alarm+0x48>)
 800089e:	789b      	ldrb	r3, [r3, #2]
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	9100      	str	r1, [sp, #0]
 80008a4:	4603      	mov	r3, r0
 80008a6:	4906      	ldr	r1, [pc, #24]	; (80008c0 <get_alarm+0x54>)
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <get_alarm+0x58>)
 80008aa:	f007 f981 	bl	8007bb0 <siprintf>
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000748 	.word	0x20000748
 80008b8:	200005f0 	.word	0x200005f0
 80008bc:	20000230 	.word	0x20000230
 80008c0:	08008c84 	.word	0x08008c84
 80008c4:	20000708 	.word	0x20000708

080008c8 <time_display>:

void time_display(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  if (current_state.mode == NORMAL_STATE) {
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <time_display+0xac>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d112      	bne.n	80008fa <time_display+0x32>
	  get_time();
 80008d4:	f7ff ff96 	bl	8000804 <get_time>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	204e      	movs	r0, #78	; 0x4e
 80008dc:	f7ff ff20 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "CLOCK              ");
 80008e0:	4925      	ldr	r1, [pc, #148]	; (8000978 <time_display+0xb0>)
 80008e2:	204e      	movs	r0, #78	; 0x4e
 80008e4:	f7ff ff5d 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80008e8:	21c0      	movs	r1, #192	; 0xc0
 80008ea:	204e      	movs	r0, #78	; 0x4e
 80008ec:	f7ff ff18 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 80008f0:	4922      	ldr	r1, [pc, #136]	; (800097c <time_display+0xb4>)
 80008f2:	204e      	movs	r0, #78	; 0x4e
 80008f4:	f7ff ff55 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
	  LCD_SendString(LCD_ADDR, "Music Select       ");
//	  LCD_SendCommand(LCD_ADDR, 0b11000000);
//	  LCD_SendString(LCD_ADDR, alarmTime);
  }
}
 80008f8:	e039      	b.n	800096e <time_display+0xa6>
  else if (current_state.mode == TIME_SETTING){
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <time_display+0xac>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d110      	bne.n	8000924 <time_display+0x5c>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	204e      	movs	r0, #78	; 0x4e
 8000906:	f7ff ff0b 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Time Setting      ");
 800090a:	491d      	ldr	r1, [pc, #116]	; (8000980 <time_display+0xb8>)
 800090c:	204e      	movs	r0, #78	; 0x4e
 800090e:	f7ff ff48 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000912:	21c0      	movs	r1, #192	; 0xc0
 8000914:	204e      	movs	r0, #78	; 0x4e
 8000916:	f7ff ff03 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 800091a:	4918      	ldr	r1, [pc, #96]	; (800097c <time_display+0xb4>)
 800091c:	204e      	movs	r0, #78	; 0x4e
 800091e:	f7ff ff40 	bl	80007a2 <LCD_SendString>
}
 8000922:	e024      	b.n	800096e <time_display+0xa6>
  else if (current_state.mode == ALARM_TIME_SETTING) {
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <time_display+0xac>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d112      	bne.n	8000952 <time_display+0x8a>
	  get_alarm();
 800092c:	f7ff ff9e 	bl	800086c <get_alarm>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	204e      	movs	r0, #78	; 0x4e
 8000934:	f7ff fef4 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Alarm Time       ");
 8000938:	4912      	ldr	r1, [pc, #72]	; (8000984 <time_display+0xbc>)
 800093a:	204e      	movs	r0, #78	; 0x4e
 800093c:	f7ff ff31 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000940:	21c0      	movs	r1, #192	; 0xc0
 8000942:	204e      	movs	r0, #78	; 0x4e
 8000944:	f7ff feec 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, alarmTime);
 8000948:	490f      	ldr	r1, [pc, #60]	; (8000988 <time_display+0xc0>)
 800094a:	204e      	movs	r0, #78	; 0x4e
 800094c:	f7ff ff29 	bl	80007a2 <LCD_SendString>
}
 8000950:	e00d      	b.n	800096e <time_display+0xa6>
  else if (current_state.mode == MUSIC_SELECT) {
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <time_display+0xac>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d109      	bne.n	800096e <time_display+0xa6>
	  music_select();
 800095a:	f000 fa21 	bl	8000da0 <music_select>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	204e      	movs	r0, #78	; 0x4e
 8000962:	f7ff fedd 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Music Select       ");
 8000966:	4909      	ldr	r1, [pc, #36]	; (800098c <time_display+0xc4>)
 8000968:	204e      	movs	r0, #78	; 0x4e
 800096a:	f7ff ff1a 	bl	80007a2 <LCD_SendString>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200002c4 	.word	0x200002c4
 8000978:	08008ca0 	.word	0x08008ca0
 800097c:	200006e8 	.word	0x200006e8
 8000980:	08008cb4 	.word	0x08008cb4
 8000984:	08008cc8 	.word	0x08008cc8
 8000988:	20000708 	.word	0x20000708
 800098c:	08008cdc 	.word	0x08008cdc

08000990 <HAL_GPIO_EXTI_Callback>:
	SECOND_PULL
} click_state;
enum CLICK_STATE click_state = NO_CLICK;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) {
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	2b80      	cmp	r3, #128	; 0x80
 800099e:	f040 8092 	bne.w	8000ac6 <HAL_GPIO_EXTI_Callback+0x136>
        level = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	4849      	ldr	r0, [pc, #292]	; (8000acc <HAL_GPIO_EXTI_Callback+0x13c>)
 80009a6:	f003 f93d 	bl	8003c24 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x140>)
 80009b0:	601a      	str	r2, [r3, #0]
    	if (seq > 0) {
 80009b2:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x144>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d010      	beq.n	80009dc <HAL_GPIO_EXTI_Callback+0x4c>
    		seq = alarm_music[current_state.music_num].music_length;
 80009ba:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x148>)
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	4947      	ldr	r1, [pc, #284]	; (8000adc <HAL_GPIO_EXTI_Callback+0x14c>)
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	440b      	add	r3, r1
 80009ca:	3314      	adds	r3, #20
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x144>)
 80009d2:	701a      	strb	r2, [r3, #0]
    		if (level == 1) return;
 80009d4:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x140>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	e074      	b.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x136>
    	}
    	else {
			currentTime = HAL_GetTick();
 80009dc:	f001 fb7a 	bl	80020d4 <HAL_GetTick>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a3f      	ldr	r2, [pc, #252]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x150>)
 80009e4:	6013      	str	r3, [r2, #0]
			interval = currentTime - lastTime;
 80009e6:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x150>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x154>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	4a3d      	ldr	r2, [pc, #244]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x158>)
 80009f2:	6013      	str	r3, [r2, #0]
			lastTime = currentTime;
 80009f4:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x150>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a3a      	ldr	r2, [pc, #232]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x154>)
 80009fa:	6013      	str	r3, [r2, #0]

			if (interval > 50) {
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x158>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b32      	cmp	r3, #50	; 0x32
 8000a02:	d960      	bls.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x136>
	//                }
	//                if (double_key_cnt > 2) {
	//                	double_key_cnt = 0;
	//                }
	//            }
				if (level == 0 && (click_state == NO_CLICK || click_state == SECOND_PULL)) {
 8000a04:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d110      	bne.n	8000a2e <HAL_GPIO_EXTI_Callback+0x9e>
 8000a0c:	4b37      	ldr	r3, [pc, #220]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_EXTI_Callback+0x8c>
 8000a14:	4b35      	ldr	r3, [pc, #212]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d108      	bne.n	8000a2e <HAL_GPIO_EXTI_Callback+0x9e>
					click_state = FIRST_PUSH;
 8000a1c:	4b33      	ldr	r3, [pc, #204]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
					ctime = HAL_GetTick();
 8000a22:	f001 fb57 	bl	80020d4 <HAL_GetTick>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	e04b      	b.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x136>
				}
				else if (level == 1 && click_state == FIRST_PUSH) {
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d121      	bne.n	8000a7a <HAL_GPIO_EXTI_Callback+0xea>
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d11d      	bne.n	8000a7a <HAL_GPIO_EXTI_Callback+0xea>
					click_state = FIRST_PULL;
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	701a      	strb	r2, [r3, #0]
					ltime = HAL_GetTick();
 8000a44:	f001 fb46 	bl	80020d4 <HAL_GetTick>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x164>)
 8000a4c:	6013      	str	r3, [r2, #0]
					if (ltime - ctime > 1000 && current_state.mode == NORMAL_STATE) {
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x164>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a5c:	d932      	bls.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x134>
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d12e      	bne.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x134>
						printf("Long click~~~~~~~~\r\n");
 8000a66:	4824      	ldr	r0, [pc, #144]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x168>)
 8000a68:	f007 f866 	bl	8007b38 <puts>
						click_state = NO_CLICK;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
						current_state.mode = ALARM_TIME_SETTING;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	701a      	strb	r2, [r3, #0]
					if (ltime - ctime > 1000 && current_state.mode == NORMAL_STATE) {
 8000a78:	e024      	b.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x134>
					}
					else {
		//				printf("first pull \r\n");
					}
				}
				else if (level == 0 && click_state == FIRST_PULL) {
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d107      	bne.n	8000a92 <HAL_GPIO_EXTI_Callback+0x102>
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d103      	bne.n	8000a92 <HAL_GPIO_EXTI_Callback+0x102>
					click_state = SECOND_PUSH;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e019      	b.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x136>
		//			printf("second_push \r\n");
				}
				else if (level == 1 && click_state == SECOND_PUSH) {
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d115      	bne.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x136>
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d111      	bne.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x136>
					click_state = SECOND_PULL;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	701a      	strb	r2, [r3, #0]
		//			printf("second_pull \r\n");
					printf("doubleeeeeeee \r\n");
 8000aa8:	4814      	ldr	r0, [pc, #80]	; (8000afc <HAL_GPIO_EXTI_Callback+0x16c>)
 8000aaa:	f007 f845 	bl	8007b38 <puts>
					if (current_state.mode == NORMAL_STATE) {
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <HAL_GPIO_EXTI_Callback+0x12c>
						current_state.mode = MUSIC_SELECT;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000ab8:	2203      	movs	r2, #3
 8000aba:	701a      	strb	r2, [r3, #0]
					}
					click_state = NO_CLICK;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_GPIO_EXTI_Callback+0x15c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	e000      	b.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x136>
					if (ltime - ctime > 1000 && current_state.mode == NORMAL_STATE) {
 8000ac4:	bf00      	nop
				}
			}

    	}
    }
}
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021400 	.word	0x40021400
 8000ad0:	2000077c 	.word	0x2000077c
 8000ad4:	200002c0 	.word	0x200002c0
 8000ad8:	200002c4 	.word	0x200002c4
 8000adc:	20000200 	.word	0x20000200
 8000ae0:	20000780 	.word	0x20000780
 8000ae4:	20000784 	.word	0x20000784
 8000ae8:	20000778 	.word	0x20000778
 8000aec:	20000788 	.word	0x20000788
 8000af0:	20000770 	.word	0x20000770
 8000af4:	20000774 	.word	0x20000774
 8000af8:	08008cf0 	.word	0x08008cf0
 8000afc:	08008d04 	.word	0x08008d04

08000b00 <setTime_Position>:

void setTime_Position() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
	char blink[30] = {0};
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	831a      	strh	r2, [r3, #24]
		RTC_TimeTypeDef* selectedTime;
	if (current_state.mode == TIME_SETTING) {
 8000b1e:	4b95      	ldr	r3, [pc, #596]	; (8000d74 <setTime_Position+0x274>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d102      	bne.n	8000b2c <setTime_Position+0x2c>
		selectedTime = &sTime;
 8000b26:	4b94      	ldr	r3, [pc, #592]	; (8000d78 <setTime_Position+0x278>)
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
 8000b2a:	e001      	b.n	8000b30 <setTime_Position+0x30>
	} else {
		selectedTime = &(aTime.AlarmTime);
 8000b2c:	4b93      	ldr	r3, [pc, #588]	; (8000d7c <setTime_Position+0x27c>)
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (XY[0] < 1500) hourMinSec--;
 8000b30:	4b93      	ldr	r3, [pc, #588]	; (8000d80 <setTime_Position+0x280>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d804      	bhi.n	8000b46 <setTime_Position+0x46>
 8000b3c:	4b91      	ldr	r3, [pc, #580]	; (8000d84 <setTime_Position+0x284>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	4a90      	ldr	r2, [pc, #576]	; (8000d84 <setTime_Position+0x284>)
 8000b44:	6013      	str	r3, [r2, #0]
	if (XY[0] > 4000) hourMinSec++;
 8000b46:	4b8e      	ldr	r3, [pc, #568]	; (8000d80 <setTime_Position+0x280>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000b4e:	d904      	bls.n	8000b5a <setTime_Position+0x5a>
 8000b50:	4b8c      	ldr	r3, [pc, #560]	; (8000d84 <setTime_Position+0x284>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a8b      	ldr	r2, [pc, #556]	; (8000d84 <setTime_Position+0x284>)
 8000b58:	6013      	str	r3, [r2, #0]

	if (hourMinSec > 3) hourMinSec = 0;
 8000b5a:	4b8a      	ldr	r3, [pc, #552]	; (8000d84 <setTime_Position+0x284>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	dd02      	ble.n	8000b68 <setTime_Position+0x68>
 8000b62:	4b88      	ldr	r3, [pc, #544]	; (8000d84 <setTime_Position+0x284>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
	if (hourMinSec < 0) hourMinSec = 3;
 8000b68:	4b86      	ldr	r3, [pc, #536]	; (8000d84 <setTime_Position+0x284>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da02      	bge.n	8000b76 <setTime_Position+0x76>
 8000b70:	4b84      	ldr	r3, [pc, #528]	; (8000d84 <setTime_Position+0x284>)
 8000b72:	2203      	movs	r2, #3
 8000b74:	601a      	str	r2, [r3, #0]

	printf("time_position : %d \r\n", hourMinSec);
 8000b76:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <setTime_Position+0x284>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4882      	ldr	r0, [pc, #520]	; (8000d88 <setTime_Position+0x288>)
 8000b7e:	f006 ff75 	bl	8007a6c <iprintf>

	switch(hourMinSec) {
 8000b82:	4b80      	ldr	r3, [pc, #512]	; (8000d84 <setTime_Position+0x284>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	f200 80d6 	bhi.w	8000d38 <setTime_Position+0x238>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <setTime_Position+0x94>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08000ba5 	.word	0x08000ba5
 8000b98:	08000bf9 	.word	0x08000bf9
 8000b9c:	08000c5f 	.word	0x08000c5f
 8000ba0:	08000cc5 	.word	0x08000cc5
	case 0:
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000ba4:	21c0      	movs	r1, #192	; 0xc0
 8000ba6:	204e      	movs	r0, #78	; 0x4e
 8000ba8:	f7ff fdba 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%s", ampm[selectedTime->TimeFormat]);
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	78db      	ldrb	r3, [r3, #3]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a74      	ldr	r2, [pc, #464]	; (8000d8c <setTime_Position+0x28c>)
 8000bba:	441a      	add	r2, r3
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4974      	ldr	r1, [pc, #464]	; (8000d90 <setTime_Position+0x290>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f006 fff5 	bl	8007bb0 <siprintf>
		if (XY[1] < 1500 ) selectedTime->TimeFormat++;
 8000bc6:	4b6e      	ldr	r3, [pc, #440]	; (8000d80 <setTime_Position+0x280>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f240 52db 	movw	r2, #1499	; 0x5db
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d805      	bhi.n	8000bde <setTime_Position+0xde>
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	78db      	ldrb	r3, [r3, #3]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	70da      	strb	r2, [r3, #3]
		if (XY[1] > 4000)  selectedTime->TimeFormat--;
 8000bde:	4b68      	ldr	r3, [pc, #416]	; (8000d80 <setTime_Position+0x280>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000be6:	f240 80a0 	bls.w	8000d2a <setTime_Position+0x22a>
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	78db      	ldrb	r3, [r3, #3]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	70da      	strb	r2, [r3, #3]
		break;
 8000bf6:	e098      	b.n	8000d2a <setTime_Position+0x22a>
	case 1:
		LCD_SendCommand(LCD_ADDR, 0b11000011);
 8000bf8:	21c3      	movs	r1, #195	; 0xc3
 8000bfa:	204e      	movs	r0, #78	; 0x4e
 8000bfc:	f7ff fd90 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%02d", selectedTime->Hours);
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4962      	ldr	r1, [pc, #392]	; (8000d94 <setTime_Position+0x294>)
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f006 ffd0 	bl	8007bb0 <siprintf>
		if (XY[1] < 1500) selectedTime->Hours++;
 8000c10:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <setTime_Position+0x280>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f240 52db 	movw	r2, #1499	; 0x5db
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d805      	bhi.n	8000c28 <setTime_Position+0x128>
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	701a      	strb	r2, [r3, #0]
		if (XY[1] > 4000) selectedTime->Hours--;
 8000c28:	4b55      	ldr	r3, [pc, #340]	; (8000d80 <setTime_Position+0x280>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c30:	d905      	bls.n	8000c3e <setTime_Position+0x13e>
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	701a      	strb	r2, [r3, #0]
		if (selectedTime -> Hours > 250)     selectedTime->Hours = 12;
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2bfa      	cmp	r3, #250	; 0xfa
 8000c44:	d903      	bls.n	8000c4e <setTime_Position+0x14e>
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	220c      	movs	r2, #12
 8000c4a:	701a      	strb	r2, [r3, #0]
		else if (selectedTime-> Hours > 12 ) selectedTime->Hours = 1;
		break;
 8000c4c:	e06f      	b.n	8000d2e <setTime_Position+0x22e>
		else if (selectedTime-> Hours > 12 ) selectedTime->Hours = 1;
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b0c      	cmp	r3, #12
 8000c54:	d96b      	bls.n	8000d2e <setTime_Position+0x22e>
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
		break;
 8000c5c:	e067      	b.n	8000d2e <setTime_Position+0x22e>
	case 2:
		LCD_SendCommand(LCD_ADDR, 0b11001000);
 8000c5e:	21c8      	movs	r1, #200	; 0xc8
 8000c60:	204e      	movs	r0, #78	; 0x4e
 8000c62:	f7ff fd5d 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%02d", selectedTime->Minutes);
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	785b      	ldrb	r3, [r3, #1]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4949      	ldr	r1, [pc, #292]	; (8000d94 <setTime_Position+0x294>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f006 ff9d 	bl	8007bb0 <siprintf>
		if (XY[1] < 1500) selectedTime->Minutes++;
 8000c76:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <setTime_Position+0x280>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f240 52db 	movw	r2, #1499	; 0x5db
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d805      	bhi.n	8000c8e <setTime_Position+0x18e>
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	785b      	ldrb	r3, [r3, #1]
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	705a      	strb	r2, [r3, #1]
		if (XY[1] > 4000) selectedTime->Minutes--;
 8000c8e:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <setTime_Position+0x280>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c96:	d905      	bls.n	8000ca4 <setTime_Position+0x1a4>
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	785b      	ldrb	r3, [r3, #1]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	705a      	strb	r2, [r3, #1]
		if (selectedTime->Minutes > 250)     selectedTime->Minutes = 59;
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca6:	785b      	ldrb	r3, [r3, #1]
 8000ca8:	2bfa      	cmp	r3, #250	; 0xfa
 8000caa:	d903      	bls.n	8000cb4 <setTime_Position+0x1b4>
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	223b      	movs	r2, #59	; 0x3b
 8000cb0:	705a      	strb	r2, [r3, #1]
		else if (selectedTime->Minutes > 59) selectedTime->Minutes = 0;
		break;
 8000cb2:	e03e      	b.n	8000d32 <setTime_Position+0x232>
		else if (selectedTime->Minutes > 59) selectedTime->Minutes = 0;
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	2b3b      	cmp	r3, #59	; 0x3b
 8000cba:	d93a      	bls.n	8000d32 <setTime_Position+0x232>
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	705a      	strb	r2, [r3, #1]
		break;
 8000cc2:	e036      	b.n	8000d32 <setTime_Position+0x232>
	case 3:
		LCD_SendCommand(LCD_ADDR, 0b11001101);
 8000cc4:	21cd      	movs	r1, #205	; 0xcd
 8000cc6:	204e      	movs	r0, #78	; 0x4e
 8000cc8:	f7ff fd2a 	bl	8000720 <LCD_SendCommand>
		 sprintf(blink, "%02d", selectedTime->Seconds);
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	789b      	ldrb	r3, [r3, #2]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	492f      	ldr	r1, [pc, #188]	; (8000d94 <setTime_Position+0x294>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f006 ff6a 	bl	8007bb0 <siprintf>
		if (XY[1] < 1500) selectedTime->Seconds++;
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <setTime_Position+0x280>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f240 52db 	movw	r2, #1499	; 0x5db
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d805      	bhi.n	8000cf4 <setTime_Position+0x1f4>
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	3301      	adds	r3, #1
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	709a      	strb	r2, [r3, #2]
		if (XY[1] > 4000) selectedTime->Seconds--;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <setTime_Position+0x280>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000cfc:	d905      	bls.n	8000d0a <setTime_Position+0x20a>
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	789b      	ldrb	r3, [r3, #2]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	709a      	strb	r2, [r3, #2]
		if (selectedTime->Seconds > 250)     selectedTime->Seconds = 59;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	789b      	ldrb	r3, [r3, #2]
 8000d0e:	2bfa      	cmp	r3, #250	; 0xfa
 8000d10:	d903      	bls.n	8000d1a <setTime_Position+0x21a>
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	223b      	movs	r2, #59	; 0x3b
 8000d16:	709a      	strb	r2, [r3, #2]
		else if (selectedTime->Seconds > 59) selectedTime->Seconds = 0;
		break;
 8000d18:	e00d      	b.n	8000d36 <setTime_Position+0x236>
		else if (selectedTime->Seconds > 59) selectedTime->Seconds = 0;
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	789b      	ldrb	r3, [r3, #2]
 8000d1e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d20:	d909      	bls.n	8000d36 <setTime_Position+0x236>
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	709a      	strb	r2, [r3, #2]
		break;
 8000d28:	e005      	b.n	8000d36 <setTime_Position+0x236>
		break;
 8000d2a:	bf00      	nop
 8000d2c:	e004      	b.n	8000d38 <setTime_Position+0x238>
		break;
 8000d2e:	bf00      	nop
 8000d30:	e002      	b.n	8000d38 <setTime_Position+0x238>
		break;
 8000d32:	bf00      	nop
 8000d34:	e000      	b.n	8000d38 <setTime_Position+0x238>
		break;
 8000d36:	bf00      	nop
	}
//	timeRange_check();
	HAL_Delay(400);
 8000d38:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d3c:	f001 f9d6 	bl	80020ec <HAL_Delay>
	LCD_SendString(LCD_ADDR, "  ");
 8000d40:	4915      	ldr	r1, [pc, #84]	; (8000d98 <setTime_Position+0x298>)
 8000d42:	204e      	movs	r0, #78	; 0x4e
 8000d44:	f7ff fd2d 	bl	80007a2 <LCD_SendString>
	if (current_state.mode == TIME_SETTING) {
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <setTime_Position+0x274>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d105      	bne.n	8000d5c <setTime_Position+0x25c>
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d50:	2200      	movs	r2, #0
 8000d52:	4909      	ldr	r1, [pc, #36]	; (8000d78 <setTime_Position+0x278>)
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <setTime_Position+0x29c>)
 8000d56:	f004 fc8b 	bl	8005670 <HAL_RTC_SetTime>
	}
	else {
		HAL_RTC_SetAlarm_IT(&hrtc, &aTime, RTC_FORMAT_BIN);
		get_alarm();
	}
}
 8000d5a:	e006      	b.n	8000d6a <setTime_Position+0x26a>
		HAL_RTC_SetAlarm_IT(&hrtc, &aTime, RTC_FORMAT_BIN);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4907      	ldr	r1, [pc, #28]	; (8000d7c <setTime_Position+0x27c>)
 8000d60:	480e      	ldr	r0, [pc, #56]	; (8000d9c <setTime_Position+0x29c>)
 8000d62:	f004 fe51 	bl	8005a08 <HAL_RTC_SetAlarm_IT>
		get_alarm();
 8000d66:	f7ff fd81 	bl	800086c <get_alarm>
}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200002c4 	.word	0x200002c4
 8000d78:	20000730 	.word	0x20000730
 8000d7c:	20000748 	.word	0x20000748
 8000d80:	20000728 	.word	0x20000728
 8000d84:	200006e4 	.word	0x200006e4
 8000d88:	08008d14 	.word	0x08008d14
 8000d8c:	20000230 	.word	0x20000230
 8000d90:	08008d2c 	.word	0x08008d2c
 8000d94:	08008d30 	.word	0x08008d30
 8000d98:	08008d38 	.word	0x08008d38
 8000d9c:	200005f0 	.word	0x200005f0

08000da0 <music_select>:

void music_select(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	unsigned int music_cnt = sizeof(alarm_music)/sizeof(alarm_music[0]); // total music cnt
 8000da6:	2302      	movs	r3, #2
 8000da8:	607b      	str	r3, [r7, #4]

	if (XY[1] < 1500 ) current_state.music_num++;
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <music_select+0x78>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f240 52db 	movw	r2, #1499	; 0x5db
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d804      	bhi.n	8000dc0 <music_select+0x20>
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <music_select+0x7c>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <music_select+0x7c>)
 8000dbe:	6053      	str	r3, [r2, #4]
	if (XY[1] > 4000 ) current_state.music_num--;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <music_select+0x78>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000dc8:	d904      	bls.n	8000dd4 <music_select+0x34>
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <music_select+0x7c>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <music_select+0x7c>)
 8000dd2:	6053      	str	r3, [r2, #4]
	current_state.music_num %= music_cnt;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <music_select+0x7c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	fbb3 f2f2 	udiv	r2, r3, r2
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	fb01 f202 	mul.w	r2, r1, r2
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <music_select+0x7c>)
 8000dea:	605a      	str	r2, [r3, #4]

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000dec:	21c0      	movs	r1, #192	; 0xc0
 8000dee:	204e      	movs	r0, #78	; 0x4e
 8000df0:	f7ff fc96 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, alarm_music[current_state.music_num].music_title);
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <music_select+0x7c>)
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <music_select+0x80>)
 8000e02:	4413      	add	r3, r2
 8000e04:	3301      	adds	r3, #1
 8000e06:	4619      	mov	r1, r3
 8000e08:	204e      	movs	r0, #78	; 0x4e
 8000e0a:	f7ff fcca 	bl	80007a2 <LCD_SendString>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000728 	.word	0x20000728
 8000e1c:	200002c4 	.word	0x200002c4
 8000e20:	20000200 	.word	0x20000200

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f001 f8ee 	bl	8002008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f87e 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 fb72 	bl	8001518 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e34:	f000 fb50 	bl	80014d8 <MX_DMA_Init>
  MX_ETH_Init();
 8000e38:	f000 f960 	bl	80010fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e3c:	f000 fb22 	bl	8001484 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000e40:	f000 f9aa 	bl	8001198 <MX_I2C1_Init>
  MX_RTC_Init();
 8000e44:	f000 f9e8 	bl	8001218 <MX_RTC_Init>
  MX_ADC1_Init();
 8000e48:	f000 f8f8 	bl	800103c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e4c:	f000 fac2 	bl	80013d4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e50:	f000 fa74 	bl	800133c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e54:	f000 f8d6 	bl	8001004 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 8000e58:	f7ff fba0 	bl	800059c <I2C_Scan>
  LCD_Init(LCD_ADDR);
 8000e5c:	204e      	movs	r0, #78	; 0x4e
 8000e5e:	f7ff fc83 	bl	8000768 <LCD_Init>

  current_state.mode = NORMAL_STATE;
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <main+0xe0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000e68:	2202      	movs	r2, #2
 8000e6a:	4927      	ldr	r1, [pc, #156]	; (8000f08 <main+0xe4>)
 8000e6c:	4827      	ldr	r0, [pc, #156]	; (8000f0c <main+0xe8>)
 8000e6e:	f001 f9a5 	bl	80021bc <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 8000e72:	f7ff fcc7 	bl	8000804 <get_time>
	  time_display();
 8000e76:	f7ff fd27 	bl	80008c8 <time_display>
	  if (current_state.mode == TIME_SETTING || current_state.mode == ALARM_TIME_SETTING) {
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <main+0xe0>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d003      	beq.n	8000e8a <main+0x66>
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <main+0xe0>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d10c      	bne.n	8000ea4 <main+0x80>
		  setTime_Position();
 8000e8a:	f7ff fe39 	bl	8000b00 <setTime_Position>
		  printf("%d, %d \r\n", XY[0], XY[1]);
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <main+0xe4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <main+0xe4>)
 8000e94:	6852      	ldr	r2, [r2, #4]
 8000e96:	4619      	mov	r1, r3
 8000e98:	481d      	ldr	r0, [pc, #116]	; (8000f10 <main+0xec>)
 8000e9a:	f006 fde7 	bl	8007a6c <iprintf>
		  printf("\r\n");
 8000e9e:	481d      	ldr	r0, [pc, #116]	; (8000f14 <main+0xf0>)
 8000ea0:	f006 fe4a 	bl	8007b38 <puts>
	  }

	  if (click_state == FIRST_PULL && (HAL_GetTick()-ltime) > 100) {
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <main+0xf4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d1e2      	bne.n	8000e72 <main+0x4e>
 8000eac:	f001 f912 	bl	80020d4 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <main+0xf8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b64      	cmp	r3, #100	; 0x64
 8000eba:	d9da      	bls.n	8000e72 <main+0x4e>
		printf("one click \r\n");
 8000ebc:	4818      	ldr	r0, [pc, #96]	; (8000f20 <main+0xfc>)
 8000ebe:	f006 fe3b 	bl	8007b38 <puts>
		if (seq > 0 ) {
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <main+0x100>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00d      	beq.n	8000ee6 <main+0xc2>
			seq = alarm_music[current_state.music_num].music_length;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <main+0xe0>)
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	4916      	ldr	r1, [pc, #88]	; (8000f28 <main+0x104>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	3314      	adds	r3, #20
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <main+0x100>)
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e00a      	b.n	8000efc <main+0xd8>

		}
		else {
			if (current_state.mode == NORMAL_STATE) {
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <main+0xe0>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d103      	bne.n	8000ef6 <main+0xd2>
				current_state.mode = TIME_SETTING;
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <main+0xe0>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e002      	b.n	8000efc <main+0xd8>
			}
			else {
				current_state.mode = NORMAL_STATE;
 8000ef6:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <main+0xe0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
			}
		}

		click_state = NO_CLICK;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <main+0xf4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
	  get_time();
 8000f02:	e7b6      	b.n	8000e72 <main+0x4e>
 8000f04:	200002c4 	.word	0x200002c4
 8000f08:	20000728 	.word	0x20000728
 8000f0c:	20000444 	.word	0x20000444
 8000f10:	08008d3c 	.word	0x08008d3c
 8000f14:	08008d48 	.word	0x08008d48
 8000f18:	20000788 	.word	0x20000788
 8000f1c:	20000774 	.word	0x20000774
 8000f20:	08008d4c 	.word	0x08008d4c
 8000f24:	200002c0 	.word	0x200002c0
 8000f28:	20000200 	.word	0x20000200

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2230      	movs	r2, #48	; 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 ff30 	bl	8007da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <SystemClock_Config+0xd4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <SystemClock_Config+0xd4>)
 8000f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <SystemClock_Config+0xd4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000f88:	2305      	movs	r3, #5
 8000f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f8c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fa4:	23a8      	movs	r3, #168	; 0xa8
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fac:	2307      	movs	r3, #7
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fc8d 	bl	80048d4 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fc0:	f000 fc5e 	bl	8001880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 feee 	bl	8004dc4 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fee:	f000 fc47 	bl	8001880 <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3750      	adds	r7, #80	; 0x50
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2017      	movs	r0, #23
 800100e:	f001 fd8e 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001012:	2017      	movs	r0, #23
 8001014:	f001 fda7 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2009      	movs	r0, #9
 800101e:	f001 fd86 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001022:	2009      	movs	r0, #9
 8001024:	f001 fd9f 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	201c      	movs	r0, #28
 800102e:	f001 fd7e 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001032:	201c      	movs	r0, #28
 8001034:	f001 fd97 	bl	8002b66 <HAL_NVIC_EnableIRQ>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001050:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <MX_ADC1_Init+0xb8>)
 8001052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001056:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800105a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001064:	2201      	movs	r2, #1
 8001066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800106a:	2201      	movs	r2, #1
 800106c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001078:	2200      	movs	r2, #0
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800107e:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800108a:	2202      	movs	r2, #2
 800108c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001098:	2201      	movs	r2, #1
 800109a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800109e:	f001 f849 	bl	8002134 <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a8:	f000 fbea 	bl	8001880 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010ac:	230d      	movs	r3, #13
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80010b4:	2304      	movs	r3, #4
 80010b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_ADC1_Init+0xb4>)
 80010be:	f001 f9ab 	bl	8002418 <HAL_ADC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c8:	f000 fbda 	bl	8001880 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010cc:	230a      	movs	r3, #10
 80010ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_ADC1_Init+0xb4>)
 80010da:	f001 f99d 	bl	8002418 <HAL_ADC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010e4:	f000 fbcc 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000444 	.word	0x20000444
 80010f4:	40012000 	.word	0x40012000
 80010f8:	0f000001 	.word	0x0f000001

080010fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_ETH_Init+0x84>)
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <MX_ETH_Init+0x88>)
 8001104:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <MX_ETH_Init+0x8c>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_ETH_Init+0x8c>)
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_ETH_Init+0x8c>)
 8001114:	22e1      	movs	r2, #225	; 0xe1
 8001116:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_ETH_Init+0x8c>)
 800111a:	2200      	movs	r2, #0
 800111c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_ETH_Init+0x8c>)
 8001120:	2200      	movs	r2, #0
 8001122:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_ETH_Init+0x8c>)
 8001126:	2200      	movs	r2, #0
 8001128:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_ETH_Init+0x84>)
 800112c:	4a16      	ldr	r2, [pc, #88]	; (8001188 <MX_ETH_Init+0x8c>)
 800112e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_ETH_Init+0x84>)
 8001132:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001136:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_ETH_Init+0x84>)
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <MX_ETH_Init+0x90>)
 800113c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_ETH_Init+0x84>)
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <MX_ETH_Init+0x94>)
 8001142:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_ETH_Init+0x84>)
 8001146:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800114a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <MX_ETH_Init+0x84>)
 800114e:	f002 f895 	bl	800327c <HAL_ETH_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001158:	f000 fb92 	bl	8001880 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800115c:	2238      	movs	r2, #56	; 0x38
 800115e:	2100      	movs	r1, #0
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_ETH_Init+0x98>)
 8001162:	f006 fe1d 	bl	8007da0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_ETH_Init+0x98>)
 8001168:	2221      	movs	r2, #33	; 0x21
 800116a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_ETH_Init+0x98>)
 800116e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001172:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_ETH_Init+0x98>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200004ec 	.word	0x200004ec
 8001184:	40028000 	.word	0x40028000
 8001188:	2000078c 	.word	0x2000078c
 800118c:	200003a4 	.word	0x200003a4
 8001190:	20000304 	.word	0x20000304
 8001194:	200002cc 	.word	0x200002cc

08001198 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_I2C1_Init+0x74>)
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <MX_I2C1_Init+0x78>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_I2C1_Init+0x74>)
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <MX_I2C1_Init+0x7c>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_I2C1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_I2C1_Init+0x74>)
 80011b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_I2C1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_I2C1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_I2C1_Init+0x74>)
 80011d6:	f002 fd89 	bl	8003cec <HAL_I2C_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e0:	f000 fb4e 	bl	8001880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e4:	2100      	movs	r1, #0
 80011e6:	4809      	ldr	r0, [pc, #36]	; (800120c <MX_I2C1_Init+0x74>)
 80011e8:	f003 faf9 	bl	80047de <HAL_I2CEx_ConfigAnalogFilter>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011f2:	f000 fb45 	bl	8001880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_I2C1_Init+0x74>)
 80011fa:	f003 fb2c 	bl	8004856 <HAL_I2CEx_ConfigDigitalFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001204:	f000 fb3c 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000059c 	.word	0x2000059c
 8001210:	40005400 	.word	0x40005400
 8001214:	000186a0 	.word	0x000186a0

08001218 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b090      	sub	sp, #64	; 0x40
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800121e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800122e:	2300      	movs	r3, #0
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2228      	movs	r2, #40	; 0x28
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f006 fdb1 	bl	8007da0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <MX_RTC_Init+0x11c>)
 8001240:	4a3d      	ldr	r2, [pc, #244]	; (8001338 <MX_RTC_Init+0x120>)
 8001242:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001244:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <MX_RTC_Init+0x11c>)
 8001246:	2240      	movs	r2, #64	; 0x40
 8001248:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800124a:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <MX_RTC_Init+0x11c>)
 800124c:	227f      	movs	r2, #127	; 0x7f
 800124e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001250:	4b38      	ldr	r3, [pc, #224]	; (8001334 <MX_RTC_Init+0x11c>)
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001256:	4b37      	ldr	r3, [pc, #220]	; (8001334 <MX_RTC_Init+0x11c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800125c:	4b35      	ldr	r3, [pc, #212]	; (8001334 <MX_RTC_Init+0x11c>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001262:	4b34      	ldr	r3, [pc, #208]	; (8001334 <MX_RTC_Init+0x11c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001268:	4832      	ldr	r0, [pc, #200]	; (8001334 <MX_RTC_Init+0x11c>)
 800126a:	f004 f98b 	bl	8005584 <HAL_RTC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001274:	f000 fb04 	bl	8001880 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8001278:	2311      	movs	r3, #17
 800127a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 800127e:	2359      	movs	r3, #89	; 0x59
 8001280:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x36;
 8001284:	2336      	movs	r3, #54	; 0x36
 8001286:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129c:	2201      	movs	r2, #1
 800129e:	4619      	mov	r1, r3
 80012a0:	4824      	ldr	r0, [pc, #144]	; (8001334 <MX_RTC_Init+0x11c>)
 80012a2:	f004 f9e5 	bl	8005670 <HAL_RTC_SetTime>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80012ac:	f000 fae8 	bl	8001880 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80012bc:	2301      	movs	r3, #1
 80012be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012cc:	2201      	movs	r2, #1
 80012ce:	4619      	mov	r1, r3
 80012d0:	4818      	ldr	r0, [pc, #96]	; (8001334 <MX_RTC_Init+0x11c>)
 80012d2:	f004 fac5 	bl	8005860 <HAL_RTC_SetDate>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80012dc:	f000 fad0 	bl	8001880 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x45;
 80012e8:	2345      	movs	r3, #69	; 0x45
 80012ea:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012f0:	2300      	movs	r3, #0
 80012f2:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80012fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001300:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800130a:	2301      	movs	r3, #1
 800130c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	2201      	movs	r2, #1
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_RTC_Init+0x11c>)
 800131e:	f004 fb73 	bl	8005a08 <HAL_RTC_SetAlarm_IT>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001328:	f000 faaa 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3740      	adds	r7, #64	; 0x40
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200005f0 	.word	0x200005f0
 8001338:	40002800 	.word	0x40002800

0800133c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM2_Init+0x94>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001362:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001366:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_TIM2_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001370:	2263      	movs	r2, #99	; 0x63
 8001372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_TIM2_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001380:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001382:	f004 fe20 	bl	8005fc6 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800138c:	f000 fa78 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_TIM2_Init+0x94>)
 800139e:	f005 fa51 	bl	8006844 <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013a8:	f000 fa6a 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM2_Init+0x94>)
 80013ba:	f005 fe43 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 fa5c 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000610 	.word	0x20000610

080013d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <MX_TIM3_Init+0xa8>)
 80013f8:	4a21      	ldr	r2, [pc, #132]	; (8001480 <MX_TIM3_Init+0xac>)
 80013fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_TIM3_Init+0xa8>)
 80013fe:	2253      	movs	r2, #83	; 0x53
 8001400:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM3_Init+0xa8>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <MX_TIM3_Init+0xa8>)
 800140a:	22c7      	movs	r2, #199	; 0xc7
 800140c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_TIM3_Init+0xa8>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_TIM3_Init+0xa8>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800141a:	4818      	ldr	r0, [pc, #96]	; (800147c <MX_TIM3_Init+0xa8>)
 800141c:	f004 fec1 	bl	80061a2 <HAL_TIM_PWM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001426:	f000 fa2b 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	4619      	mov	r1, r3
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <MX_TIM3_Init+0xa8>)
 800143a:	f005 fe03 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001444:	f000 fa1c 	bl	8001880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001448:	2360      	movs	r3, #96	; 0x60
 800144a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 800144c:	2331      	movs	r3, #49	; 0x31
 800144e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2204      	movs	r2, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_TIM3_Init+0xa8>)
 8001460:	f005 f92e 	bl	80066c0 <HAL_TIM_PWM_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800146a:	f000 fa09 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800146e:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_TIM3_Init+0xa8>)
 8001470:	f000 fc2e 	bl	8001cd0 <HAL_TIM_MspPostInit>

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000658 	.word	0x20000658
 8001480:	40000400 	.word	0x40000400

08001484 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <MX_USART3_UART_Init+0x50>)
 800148c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014bc:	f005 fe52 	bl	8007164 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014c6:	f000 f9db 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200006a0 	.word	0x200006a0
 80014d4:	40004800 	.word	0x40004800

080014d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_DMA_Init+0x3c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <MX_DMA_Init+0x3c>)
 80014e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_DMA_Init+0x3c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2038      	movs	r0, #56	; 0x38
 8001500:	f001 fb15 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001504:	2038      	movs	r0, #56	; 0x38
 8001506:	f001 fb2e 	bl	8002b66 <HAL_NVIC_EnableIRQ>

}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	; 0x30
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a67      	ldr	r2, [pc, #412]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a60      	ldr	r2, [pc, #384]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 8001554:	f043 0320 	orr.w	r3, r3, #32
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a59      	ldr	r2, [pc, #356]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a52      	ldr	r2, [pc, #328]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a4b      	ldr	r2, [pc, #300]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b45      	ldr	r3, [pc, #276]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a44      	ldr	r2, [pc, #272]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a3d      	ldr	r2, [pc, #244]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 80015e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <MX_GPIO_Init+0x1bc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80015f8:	4837      	ldr	r0, [pc, #220]	; (80016d8 <MX_GPIO_Init+0x1c0>)
 80015fa:	f002 fb2b 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	4836      	ldr	r0, [pc, #216]	; (80016dc <MX_GPIO_Init+0x1c4>)
 8001604:	f002 fb26 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800160e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4830      	ldr	r0, [pc, #192]	; (80016e0 <MX_GPIO_Init+0x1c8>)
 8001620:	f002 f954 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 setBtn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|setBtn_Pin;
 8001624:	2388      	movs	r3, #136	; 0x88
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001628:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162e:	2301      	movs	r3, #1
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	482a      	ldr	r0, [pc, #168]	; (80016e4 <MX_GPIO_Init+0x1cc>)
 800163a:	f002 f947 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800163e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4820      	ldr	r0, [pc, #128]	; (80016d8 <MX_GPIO_Init+0x1c0>)
 8001658:	f002 f938 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800165c:	2340      	movs	r3, #64	; 0x40
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	481a      	ldr	r0, [pc, #104]	; (80016dc <MX_GPIO_Init+0x1c4>)
 8001674:	f002 f92a 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4814      	ldr	r0, [pc, #80]	; (80016dc <MX_GPIO_Init+0x1c4>)
 800168c:	f002 f91e 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001690:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016a2:	230a      	movs	r3, #10
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	480e      	ldr	r0, [pc, #56]	; (80016e8 <MX_GPIO_Init+0x1d0>)
 80016ae:	f002 f90d 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_GPIO_Init+0x1d0>)
 80016c8:	f002 f900 	bl	80038cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	; 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40021800 	.word	0x40021800
 80016e0:	40020800 	.word	0x40020800
 80016e4:	40021400 	.word	0x40021400
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&showTime, strlen(showTime), 1000);
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <HAL_RTC_AlarmAEventCallback+0x40>)
 80016f6:	f7fe fd7b 	bl	80001f0 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	490a      	ldr	r1, [pc, #40]	; (800172c <HAL_RTC_AlarmAEventCallback+0x40>)
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <HAL_RTC_AlarmAEventCallback+0x44>)
 8001706:	f005 fd7a 	bl	80071fe <HAL_UART_Transmit>
	printf("Alarm Callback Occurred!! \r\n");
 800170a:	480a      	ldr	r0, [pc, #40]	; (8001734 <HAL_RTC_AlarmAEventCallback+0x48>)
 800170c:	f006 fa14 	bl	8007b38 <puts>
	seq = 0;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_RTC_AlarmAEventCallback+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8001716:	4809      	ldr	r0, [pc, #36]	; (800173c <HAL_RTC_AlarmAEventCallback+0x50>)
 8001718:	f004 fca4 	bl	8006064 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800171c:	2101      	movs	r1, #1
 800171e:	4808      	ldr	r0, [pc, #32]	; (8001740 <HAL_RTC_AlarmAEventCallback+0x54>)
 8001720:	f002 fab1 	bl	8003c86 <HAL_GPIO_TogglePin>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200006e8 	.word	0x200006e8
 8001730:	200006a0 	.word	0x200006a0
 8001734:	08008d58 	.word	0x08008d58
 8001738:	200002c0 	.word	0x200002c0
 800173c:	20000610 	.word	0x20000610
 8001740:	40020400 	.word	0x40020400

08001744 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	int selected_music_num = current_state.music_num;
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
	switch(selected_music_num) {
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_TIM_PeriodElapsedCallback+0x1c>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d004      	beq.n	8001768 <HAL_TIM_PeriodElapsedCallback+0x24>
 800175e:	e007      	b.n	8001770 <HAL_TIM_PeriodElapsedCallback+0x2c>
	case 0 :
		buzzer = harry;
 8001760:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001762:	4a3c      	ldr	r2, [pc, #240]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001764:	601a      	str	r2, [r3, #0]
		break;
 8001766:	e003      	b.n	8001770 <HAL_TIM_PeriodElapsedCallback+0x2c>
	case 1 :
		buzzer = bell;
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800176a:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800176c:	601a      	str	r2, [r3, #0]
		break;
 800176e:	bf00      	nop
	}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001770:	2104      	movs	r1, #4
 8001772:	483a      	ldr	r0, [pc, #232]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001774:	f004 fd64 	bl	8006240 <HAL_TIM_PWM_Start>
	uint16_t melody = (uint16_t)(1000000 / buzzer[seq].freq);
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800178a:	fb93 f3f2 	sdiv	r3, r3, r2
 800178e:	817b      	strh	r3, [r7, #10]
	printf("music num : %d \r\n", current_state.music_num);
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4619      	mov	r1, r3
 8001796:	4834      	ldr	r0, [pc, #208]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001798:	f006 f968 	bl	8007a6c <iprintf>
	if(stop == 1){
 800179c:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10c      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x7a>
		TIM2->ARR = 500;
 80017a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80017ae:	2104      	movs	r1, #4
 80017b0:	482a      	ldr	r0, [pc, #168]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80017b2:	f004 fe0d 	bl	80063d0 <HAL_TIM_PWM_Stop>
		stop = 0;
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e03d      	b.n	800183a <HAL_TIM_PeriodElapsedCallback+0xf6>
	}
	else{
		if(seq == alarm_music[current_state.music_num].music_length){
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4929      	ldr	r1, [pc, #164]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	3314      	adds	r3, #20
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4298      	cmp	r0, r3
 80017da:	d10a      	bne.n	80017f2 <HAL_TIM_PeriodElapsedCallback+0xae>
			HAL_TIM_Base_Stop_IT(&htim2);
 80017dc:	4825      	ldr	r0, [pc, #148]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80017de:	f004 fcb1 	bl	8006144 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80017e2:	2104      	movs	r1, #4
 80017e4:	481d      	ldr	r0, [pc, #116]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80017e6:	f004 fdf3 	bl	80063d0 <HAL_TIM_PWM_Stop>
			seq = 0;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e023      	b.n	800183a <HAL_TIM_PeriodElapsedCallback+0xf6>
		}
		else{
			TIM3->ARR = melody;
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80017f4:	897b      	ldrh	r3, [r7, #10]
 80017f6:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR2 = melody / 2;
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->ARR = buzzer[seq].delay * 1500;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	885b      	ldrh	r3, [r3, #2]
 8001810:	461a      	mov	r2, r3
 8001812:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001816:	fb03 f202 	mul.w	r2, r3, r2
 800181a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001820:	2104      	movs	r1, #4
 8001822:	480e      	ldr	r0, [pc, #56]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001824:	f004 fd0c 	bl	8006240 <HAL_TIM_PWM_Start>
			stop = 1;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
			seq++;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001838:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800183a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183e:	480f      	ldr	r0, [pc, #60]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001840:	f002 fa21 	bl	8003c86 <HAL_GPIO_TogglePin>
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200002c4 	.word	0x200002c4
 8001850:	200002bc 	.word	0x200002bc
 8001854:	20000100 	.word	0x20000100
 8001858:	20000000 	.word	0x20000000
 800185c:	20000658 	.word	0x20000658
 8001860:	200002c0 	.word	0x200002c0
 8001864:	000f4240 	.word	0x000f4240
 8001868:	08008d74 	.word	0x08008d74
 800186c:	200002c1 	.word	0x200002c1
 8001870:	20000200 	.word	0x20000200
 8001874:	20000610 	.word	0x20000610
 8001878:	40000400 	.word	0x40000400
 800187c:	40020400 	.word	0x40020400

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	e7fe      	b.n	8001888 <Error_Handler+0x8>
	...

0800188c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_MspInit+0x4c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <HAL_ADC_MspInit+0xdc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d157      	bne.n	80019ae <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <HAL_ADC_MspInit+0xe0>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <HAL_ADC_MspInit+0xe0>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_ADC_MspInit+0xe0>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_ADC_MspInit+0xe0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a26      	ldr	r2, [pc, #152]	; (80019bc <HAL_ADC_MspInit+0xe0>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_ADC_MspInit+0xe0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001936:	2309      	movs	r3, #9
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	481d      	ldr	r0, [pc, #116]	; (80019c0 <HAL_ADC_MspInit+0xe4>)
 800194a:	f001 ffbf 	bl	80038cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001952:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001970:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001974:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001978:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800197c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001984:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001992:	480c      	ldr	r0, [pc, #48]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001994:	f001 f902 	bl	8002b9c <HAL_DMA_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800199e:	f7ff ff6f 	bl	8001880 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 80019a6:	639a      	str	r2, [r3, #56]	; 0x38
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	; 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40012000 	.word	0x40012000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020800 	.word	0x40020800
 80019c4:	2000048c 	.word	0x2000048c
 80019c8:	40026410 	.word	0x40026410

080019cc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08e      	sub	sp, #56	; 0x38
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a55      	ldr	r2, [pc, #340]	; (8001b40 <HAL_ETH_MspInit+0x174>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	f040 80a4 	bne.w	8001b38 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 80019fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	4a4b      	ldr	r2, [pc, #300]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1c:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4a44      	ldr	r2, [pc, #272]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a36:	6313      	str	r3, [r2, #48]	; 0x30
 8001a38:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a3d      	ldr	r2, [pc, #244]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	4a36      	ldr	r2, [pc, #216]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a70:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	4a2f      	ldr	r2, [pc, #188]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_ETH_MspInit+0x178>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ab4:	2332      	movs	r3, #50	; 0x32
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ac4:	230b      	movs	r3, #11
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	4619      	mov	r1, r3
 8001ace:	481e      	ldr	r0, [pc, #120]	; (8001b48 <HAL_ETH_MspInit+0x17c>)
 8001ad0:	f001 fefc 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ad4:	2386      	movs	r3, #134	; 0x86
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae4:	230b      	movs	r3, #11
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	4619      	mov	r1, r3
 8001aee:	4817      	ldr	r0, [pc, #92]	; (8001b4c <HAL_ETH_MspInit+0x180>)
 8001af0:	f001 feec 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b06:	230b      	movs	r3, #11
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480f      	ldr	r0, [pc, #60]	; (8001b50 <HAL_ETH_MspInit+0x184>)
 8001b12:	f001 fedb 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b28:	230b      	movs	r3, #11
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	4619      	mov	r1, r3
 8001b32:	4808      	ldr	r0, [pc, #32]	; (8001b54 <HAL_ETH_MspInit+0x188>)
 8001b34:	f001 feca 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3738      	adds	r7, #56	; 0x38
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40028000 	.word	0x40028000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40021800 	.word	0x40021800

08001b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <HAL_I2C_MspInit+0x84>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12c      	bne.n	8001bd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480c      	ldr	r0, [pc, #48]	; (8001be4 <HAL_I2C_MspInit+0x8c>)
 8001bb4:	f001 fe8a 	bl	80038cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40005400 	.word	0x40005400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020400 	.word	0x40020400

08001be8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08e      	sub	sp, #56	; 0x38
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	2230      	movs	r2, #48	; 0x30
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f006 f8d1 	bl	8007da0 <memset>
  if(hrtc->Instance==RTC)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_RTC_MspInit+0x5c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d119      	bne.n	8001c3c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 faf4 	bl	8005204 <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c22:	f7ff fe2d 	bl	8001880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_RTC_MspInit+0x60>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2029      	movs	r0, #41	; 0x29
 8001c32:	f000 ff7c 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c36:	2029      	movs	r0, #41	; 0x29
 8001c38:	f000 ff95 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3738      	adds	r7, #56	; 0x38
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40002800 	.word	0x40002800
 8001c48:	42470e3c 	.word	0x42470e3c

08001c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5c:	d10d      	bne.n	8001c7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_TIM_Base_MspInit+0x3c>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_TIM_Base_MspInit+0x3c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_TIM_Base_MspInit+0x3c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10d      	bne.n	8001cba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_TIM_PWM_MspInit+0x40>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_TIM_PWM_MspInit+0x40>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_TIM_PWM_MspInit+0x40>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_TIM_MspPostInit+0x68>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d11d      	bne.n	8001d2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <HAL_TIM_MspPostInit+0x70>)
 8001d2a:	f001 fdcf 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020800 	.word	0x40020800

08001d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_UART_MspInit+0x84>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d12c      	bne.n	8001dc0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db0:	2307      	movs	r3, #7
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_UART_MspInit+0x8c>)
 8001dbc:	f001 fd86 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	; 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40004800 	.word	0x40004800
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020c00 	.word	0x40020c00

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <NMI_Handler+0x4>

08001dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <HardFault_Handler+0x4>

08001de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <MemManage_Handler+0x4>

08001de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e20:	f000 f944 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001e2c:	2008      	movs	r0, #8
 8001e2e:	f001 ff45 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(setBtn_Pin);
 8001e3a:	2080      	movs	r0, #128	; 0x80
 8001e3c:	f001 ff3e 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <TIM2_IRQHandler+0x10>)
 8001e4a:	f004 fb31 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000610 	.word	0x20000610

08001e58 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <RTC_Alarm_IRQHandler+0x10>)
 8001e5e:	f003 ffa5 	bl	8005dac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200005f0 	.word	0x200005f0

08001e6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <DMA2_Stream0_IRQHandler+0x10>)
 8001e72:	f000 ff99 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000048c 	.word	0x2000048c

08001e80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e00a      	b.n	8001ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e92:	f3af 8000 	nop.w
 8001e96:	4601      	mov	r1, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf0      	blt.n	8001e92 <_read+0x12>
  }

  return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_close>:
  }
  return len;
}

int _close(int file)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_isatty>:

int _isatty(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f005 ff72 	bl	8007e3c <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20030000 	.word	0x20030000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	20000794 	.word	0x20000794
 8001f8c:	200008e8 	.word	0x200008e8

08001f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <SystemInit+0x20>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <SystemInit+0x20>)
 8001f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fba:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd0:	4c0b      	ldr	r4, [pc, #44]	; (8002000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fde:	f7ff ffd7 	bl	8001f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f005 ff31 	bl	8007e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe6:	f7fe ff1d 	bl	8000e24 <main>
  bx  lr    
 8001fea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff4:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8001ff8:	08008dec 	.word	0x08008dec
  ldr r2, =_sbss
 8001ffc:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8002000:	200008e8 	.word	0x200008e8

08002004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC_IRQHandler>
	...

08002008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_Init+0x40>)
 8002012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_Init+0x40>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_Init+0x40>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 fd71 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002036:	2000      	movs	r0, #0
 8002038:	f000 f808 	bl	800204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800203c:	f7ff fc26 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_InitTick+0x54>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x58>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fd89 	bl	8002b82 <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f000 fd51 	bl	8002b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <HAL_InitTick+0x5c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000238 	.word	0x20000238
 80020a4:	20000240 	.word	0x20000240
 80020a8:	2000023c 	.word	0x2000023c

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000240 	.word	0x20000240
 80020d0:	20000798 	.word	0x20000798

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000798 	.word	0x20000798

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000240 	.word	0x20000240

08002134 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e033      	b.n	80021b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fbc2 	bl	80018dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800217a:	f023 0302 	bic.w	r3, r3, #2
 800217e:	f043 0202 	orr.w	r2, r3, #2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fa78 	bl	800267c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
 80021a2:	e001      	b.n	80021a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Start_DMA+0x1e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e0e9      	b.n	80023ae <HAL_ADC_Start_DMA+0x1f2>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d018      	beq.n	8002222 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002200:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_ADC_Start_DMA+0x1fc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6d      	ldr	r2, [pc, #436]	; (80023bc <HAL_ADC_Start_DMA+0x200>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0c9a      	lsrs	r2, r3, #18
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002214:	e002      	b.n	800221c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3b01      	subs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002230:	d107      	bne.n	8002242 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002240:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	f040 80a1 	bne.w	8002394 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800227c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002290:	d106      	bne.n	80022a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f023 0206 	bic.w	r2, r3, #6
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
 800229e:	e002      	b.n	80022a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ae:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <HAL_ADC_Start_DMA+0x204>)
 80022b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	4a43      	ldr	r2, [pc, #268]	; (80023c4 <HAL_ADC_Start_DMA+0x208>)
 80022b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	4a42      	ldr	r2, [pc, #264]	; (80023c8 <HAL_ADC_Start_DMA+0x20c>)
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	4a41      	ldr	r2, [pc, #260]	; (80023cc <HAL_ADC_Start_DMA+0x210>)
 80022c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	334c      	adds	r3, #76	; 0x4c
 80022fe:	4619      	mov	r1, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f000 fcf8 	bl	8002cf8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2b00      	cmp	r3, #0
 8002312:	d12a      	bne.n	800236a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2d      	ldr	r2, [pc, #180]	; (80023d0 <HAL_ADC_Start_DMA+0x214>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d015      	beq.n	800234a <HAL_ADC_Start_DMA+0x18e>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2c      	ldr	r2, [pc, #176]	; (80023d4 <HAL_ADC_Start_DMA+0x218>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d105      	bne.n	8002334 <HAL_ADC_Start_DMA+0x178>
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_ADC_Start_DMA+0x204>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <HAL_ADC_Start_DMA+0x21c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d136      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_ADC_Start_DMA+0x204>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d130      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d129      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	e020      	b.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_ADC_Start_DMA+0x214>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d11b      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d114      	bne.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	e00b      	b.n	80023ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f043 0210 	orr.w	r2, r3, #16
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000238 	.word	0x20000238
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	40012300 	.word	0x40012300
 80023c4:	08002875 	.word	0x08002875
 80023c8:	0800292f 	.word	0x0800292f
 80023cc:	0800294b 	.word	0x0800294b
 80023d0:	40012000 	.word	0x40012000
 80023d4:	40012100 	.word	0x40012100
 80023d8:	40012200 	.word	0x40012200

080023dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1c>
 8002430:	2302      	movs	r3, #2
 8002432:	e113      	b.n	800265c <HAL_ADC_ConfigChannel+0x244>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b09      	cmp	r3, #9
 8002442:	d925      	bls.n	8002490 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68d9      	ldr	r1, [r3, #12]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	3b1e      	subs	r3, #30
 800245a:	2207      	movs	r2, #7
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43da      	mvns	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	400a      	ands	r2, r1
 8002468:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68d9      	ldr	r1, [r3, #12]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	4603      	mov	r3, r0
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4403      	add	r3, r0
 8002482:	3b1e      	subs	r3, #30
 8002484:	409a      	lsls	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	e022      	b.n	80024d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6919      	ldr	r1, [r3, #16]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	2207      	movs	r2, #7
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	400a      	ands	r2, r1
 80024b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6919      	ldr	r1, [r3, #16]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4618      	mov	r0, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4403      	add	r3, r0
 80024cc:	409a      	lsls	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d824      	bhi.n	8002528 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	3b05      	subs	r3, #5
 80024f0:	221f      	movs	r2, #31
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	400a      	ands	r2, r1
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	4618      	mov	r0, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	3b05      	subs	r3, #5
 800251a:	fa00 f203 	lsl.w	r2, r0, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	635a      	str	r2, [r3, #52]	; 0x34
 8002526:	e04c      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d824      	bhi.n	800257a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	3b23      	subs	r3, #35	; 0x23
 8002542:	221f      	movs	r2, #31
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43da      	mvns	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	400a      	ands	r2, r1
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	4618      	mov	r0, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	3b23      	subs	r3, #35	; 0x23
 800256c:	fa00 f203 	lsl.w	r2, r0, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
 8002578:	e023      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	3b41      	subs	r3, #65	; 0x41
 800258c:	221f      	movs	r2, #31
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	400a      	ands	r2, r1
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	3b41      	subs	r3, #65	; 0x41
 80025b6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c2:	4b29      	ldr	r3, [pc, #164]	; (8002668 <HAL_ADC_ConfigChannel+0x250>)
 80025c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a28      	ldr	r2, [pc, #160]	; (800266c <HAL_ADC_ConfigChannel+0x254>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d10f      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1d8>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b12      	cmp	r3, #18
 80025d6:	d10b      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_ADC_ConfigChannel+0x254>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d12b      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x23a>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1c      	ldr	r2, [pc, #112]	; (8002670 <HAL_ADC_ConfigChannel+0x258>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <HAL_ADC_ConfigChannel+0x1f4>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b11      	cmp	r3, #17
 800260a:	d122      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a11      	ldr	r2, [pc, #68]	; (8002670 <HAL_ADC_ConfigChannel+0x258>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d111      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_ADC_ConfigChannel+0x25c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a11      	ldr	r2, [pc, #68]	; (8002678 <HAL_ADC_ConfigChannel+0x260>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	0c9a      	lsrs	r2, r3, #18
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002644:	e002      	b.n	800264c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3b01      	subs	r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f9      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40012300 	.word	0x40012300
 800266c:	40012000 	.word	0x40012000
 8002670:	10000012 	.word	0x10000012
 8002674:	20000238 	.word	0x20000238
 8002678:	431bde83 	.word	0x431bde83

0800267c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002684:	4b79      	ldr	r3, [pc, #484]	; (800286c <ADC_Init+0x1f0>)
 8002686:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	431a      	orrs	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	021a      	lsls	r2, r3, #8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	4a58      	ldr	r2, [pc, #352]	; (8002870 <ADC_Init+0x1f4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d022      	beq.n	800275a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002722:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6899      	ldr	r1, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	e00f      	b.n	800277a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002778:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0202 	bic.w	r2, r2, #2
 8002788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7e1b      	ldrb	r3, [r3, #24]
 8002794:	005a      	lsls	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01b      	beq.n	80027e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	3b01      	subs	r3, #1
 80027d4:	035a      	lsls	r2, r3, #13
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	e007      	b.n	80027f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	3b01      	subs	r3, #1
 800280c:	051a      	lsls	r2, r3, #20
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6899      	ldr	r1, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002832:	025a      	lsls	r2, r3, #9
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	029a      	lsls	r2, r3, #10
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40012300 	.word	0x40012300
 8002870:	0f000001 	.word	0x0f000001

08002874 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800288a:	2b00      	cmp	r3, #0
 800288c:	d13c      	bne.n	8002908 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d12b      	bne.n	8002900 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d127      	bne.n	8002900 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d119      	bne.n	8002900 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0220 	bic.w	r2, r2, #32
 80028da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fd6b 	bl	80023dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002906:	e00e      	b.n	8002926 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7ff fd75 	bl	8002404 <HAL_ADC_ErrorCallback>
}
 800291a:	e004      	b.n	8002926 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff fd57 	bl	80023f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2240      	movs	r2, #64	; 0x40
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f043 0204 	orr.w	r2, r3, #4
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff fd4a 	bl	8002404 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae4:	d301      	bcc.n	8002aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00f      	b.n	8002b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <SysTick_Config+0x40>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af2:	210f      	movs	r1, #15
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f7ff ff8e 	bl	8002a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SysTick_Config+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <SysTick_Config+0x40>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff29 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b40:	f7ff ff3e 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff8e 	bl	8002a6c <NVIC_EncodePriority>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff5d 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff31 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffa2 	bl	8002ad4 <SysTick_Config>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff fa94 	bl	80020d4 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e099      	b.n	8002cec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd8:	e00f      	b.n	8002bfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bda:	f7ff fa7b 	bl	80020d4 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d908      	bls.n	8002bfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e078      	b.n	8002cec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e8      	bne.n	8002bda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <HAL_DMA_Init+0x158>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d107      	bne.n	8002c64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f023 0307 	bic.w	r3, r3, #7
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d117      	bne.n	8002cbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00e      	beq.n	8002cbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fa6f 	bl	8003184 <DMA_CheckFifoParam>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2240      	movs	r2, #64	; 0x40
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e016      	b.n	8002cec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa26 	bl	8003118 <DMA_CalcBaseAndBitshift>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	223f      	movs	r2, #63	; 0x3f
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	f010803f 	.word	0xf010803f

08002cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_DMA_Start_IT+0x26>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e040      	b.n	8002da0 <HAL_DMA_Start_IT+0xa8>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d12f      	bne.n	8002d92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f9b8 	bl	80030bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	223f      	movs	r2, #63	; 0x3f
 8002d52:	409a      	lsls	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0216 	orr.w	r2, r2, #22
 8002d66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0208 	orr.w	r2, r2, #8
 8002d7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e005      	b.n	8002d9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002db4:	4b8e      	ldr	r3, [pc, #568]	; (8002ff0 <HAL_DMA_IRQHandler+0x248>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a8e      	ldr	r2, [pc, #568]	; (8002ff4 <HAL_DMA_IRQHandler+0x24c>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0a9b      	lsrs	r3, r3, #10
 8002dc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01a      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0204 	bic.w	r2, r2, #4
 8002dfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	2208      	movs	r2, #8
 8002e02:	409a      	lsls	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	2201      	movs	r2, #1
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	2201      	movs	r2, #1
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	f043 0202 	orr.w	r2, r3, #2
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	2204      	movs	r2, #4
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d012      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	2210      	movs	r2, #16
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d043      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03c      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2210      	movs	r2, #16
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d018      	beq.n	8002eea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d108      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d024      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
 8002ed6:	e01f      	b.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01b      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
 8002ee8:	e016      	b.n	8002f18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0208 	bic.w	r2, r2, #8
 8002f06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 808f 	beq.w	8003048 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8087 	beq.w	8003048 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2220      	movs	r2, #32
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d136      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0216 	bic.w	r2, r2, #22
 8002f60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_DMA_IRQHandler+0x1da>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0208 	bic.w	r2, r2, #8
 8002f90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	223f      	movs	r2, #63	; 0x3f
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d07e      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
        }
        return;
 8002fbe:	e079      	b.n	80030b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01d      	beq.n	800300a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10d      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d031      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
 8002fec:	e02c      	b.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
 8002fee:	bf00      	nop
 8002ff0:	20000238 	.word	0x20000238
 8002ff4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
 8003008:	e01e      	b.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10f      	bne.n	8003038 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0210 	bic.w	r2, r2, #16
 8003026:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d032      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d022      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2205      	movs	r2, #5
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3301      	adds	r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	d307      	bcc.n	8003090 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f2      	bne.n	8003074 <HAL_DMA_IRQHandler+0x2cc>
 800308e:	e000      	b.n	8003092 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003090:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
 80030b2:	e000      	b.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030b4:	bf00      	nop
    }
  }
}
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d108      	bne.n	80030fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030fa:	e007      	b.n	800310c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	60da      	str	r2, [r3, #12]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3b10      	subs	r3, #16
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <DMA_CalcBaseAndBitshift+0x64>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003132:	4a13      	ldr	r2, [pc, #76]	; (8003180 <DMA_CalcBaseAndBitshift+0x68>)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d909      	bls.n	800315a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800314e:	f023 0303 	bic.w	r3, r3, #3
 8003152:	1d1a      	adds	r2, r3, #4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	659a      	str	r2, [r3, #88]	; 0x58
 8003158:	e007      	b.n	800316a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003162:	f023 0303 	bic.w	r3, r3, #3
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	aaaaaaab 	.word	0xaaaaaaab
 8003180:	08008da0 	.word	0x08008da0

08003184 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11f      	bne.n	80031de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d856      	bhi.n	8003252 <DMA_CheckFifoParam+0xce>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <DMA_CheckFifoParam+0x28>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031bd 	.word	0x080031bd
 80031b0:	080031cf 	.word	0x080031cf
 80031b4:	080031bd 	.word	0x080031bd
 80031b8:	08003253 	.word	0x08003253
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d046      	beq.n	8003256 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031cc:	e043      	b.n	8003256 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031d6:	d140      	bne.n	800325a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031dc:	e03d      	b.n	800325a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e6:	d121      	bne.n	800322c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d837      	bhi.n	800325e <DMA_CheckFifoParam+0xda>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <DMA_CheckFifoParam+0x70>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003205 	.word	0x08003205
 80031f8:	0800320b 	.word	0x0800320b
 80031fc:	08003205 	.word	0x08003205
 8003200:	0800321d 	.word	0x0800321d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      break;
 8003208:	e030      	b.n	800326c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d025      	beq.n	8003262 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321a:	e022      	b.n	8003262 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003224:	d11f      	bne.n	8003266 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800322a:	e01c      	b.n	8003266 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d903      	bls.n	800323a <DMA_CheckFifoParam+0xb6>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d003      	beq.n	8003240 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003238:	e018      	b.n	800326c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
      break;
 800323e:	e015      	b.n	800326c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00e      	beq.n	800326a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      break;
 8003250:	e00b      	b.n	800326a <DMA_CheckFifoParam+0xe6>
      break;
 8003252:	bf00      	nop
 8003254:	e00a      	b.n	800326c <DMA_CheckFifoParam+0xe8>
      break;
 8003256:	bf00      	nop
 8003258:	e008      	b.n	800326c <DMA_CheckFifoParam+0xe8>
      break;
 800325a:	bf00      	nop
 800325c:	e006      	b.n	800326c <DMA_CheckFifoParam+0xe8>
      break;
 800325e:	bf00      	nop
 8003260:	e004      	b.n	800326c <DMA_CheckFifoParam+0xe8>
      break;
 8003262:	bf00      	nop
 8003264:	e002      	b.n	800326c <DMA_CheckFifoParam+0xe8>
      break;   
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <DMA_CheckFifoParam+0xe8>
      break;
 800326a:	bf00      	nop
    }
  } 
  
  return status; 
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop

0800327c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06c      	b.n	8003368 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2223      	movs	r2, #35	; 0x23
 800329c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fe fb93 	bl	80019cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_ETH_Init+0xf4>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	4a30      	ldr	r2, [pc, #192]	; (8003370 <HAL_ETH_Init+0xf4>)
 80032b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b4:	6453      	str	r3, [r2, #68]	; 0x44
 80032b6:	4b2e      	ldr	r3, [pc, #184]	; (8003370 <HAL_ETH_Init+0xf4>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <HAL_ETH_Init+0xf8>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <HAL_ETH_Init+0xf8>)
 80032c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_ETH_Init+0xf8>)
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	4927      	ldr	r1, [pc, #156]	; (8003374 <HAL_ETH_Init+0xf8>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80032dc:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_ETH_Init+0xf8>)
 80032de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032f8:	f7fe feec 	bl	80020d4 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032fe:	e011      	b.n	8003324 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003300:	f7fe fee8 	bl	80020d4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800330e:	d909      	bls.n	8003324 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2204      	movs	r2, #4
 8003314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	22e0      	movs	r2, #224	; 0xe0
 800331c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e021      	b.n	8003368 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e4      	bne.n	8003300 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f958 	bl	80035ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f9ff 	bl	8003740 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fa55 	bl	80037f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	461a      	mov	r2, r3
 800334e:	2100      	movs	r1, #0
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f9bd 	bl	80036d0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2210      	movs	r2, #16
 8003362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	40013800 	.word	0x40013800

08003378 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <ETH_SetMACConfig+0x15c>)
 800338e:	4013      	ands	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	7c1b      	ldrb	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <ETH_SetMACConfig+0x28>
 800339a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800339e:	e000      	b.n	80033a2 <ETH_SetMACConfig+0x2a>
 80033a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	7c5b      	ldrb	r3, [r3, #17]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <ETH_SetMACConfig+0x38>
 80033aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ae:	e000      	b.n	80033b2 <ETH_SetMACConfig+0x3a>
 80033b0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	7fdb      	ldrb	r3, [r3, #31]
 80033be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80033c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	7f92      	ldrb	r2, [r2, #30]
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	d102      	bne.n	80033d6 <ETH_SetMACConfig+0x5e>
 80033d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033d4:	e000      	b.n	80033d8 <ETH_SetMACConfig+0x60>
 80033d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80033d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	7f1b      	ldrb	r3, [r3, #28]
 80033de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	791b      	ldrb	r3, [r3, #4]
 80033ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80033ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80033f6:	2a00      	cmp	r2, #0
 80033f8:	d102      	bne.n	8003400 <ETH_SetMACConfig+0x88>
 80033fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fe:	e000      	b.n	8003402 <ETH_SetMACConfig+0x8a>
 8003400:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003402:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	7bdb      	ldrb	r3, [r3, #15]
 8003408:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800340a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003410:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003418:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800341a:	4313      	orrs	r3, r2
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003432:	2001      	movs	r0, #1
 8003434:	f7fe fe5a 	bl	80020ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800344e:	4013      	ands	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003456:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800345e:	2a00      	cmp	r2, #0
 8003460:	d101      	bne.n	8003466 <ETH_SetMACConfig+0xee>
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	e000      	b.n	8003468 <ETH_SetMACConfig+0xf0>
 8003466:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003468:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800346e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003476:	2a01      	cmp	r2, #1
 8003478:	d101      	bne.n	800347e <ETH_SetMACConfig+0x106>
 800347a:	2208      	movs	r2, #8
 800347c:	e000      	b.n	8003480 <ETH_SetMACConfig+0x108>
 800347e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003480:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003488:	2a01      	cmp	r2, #1
 800348a:	d101      	bne.n	8003490 <ETH_SetMACConfig+0x118>
 800348c:	2204      	movs	r2, #4
 800348e:	e000      	b.n	8003492 <ETH_SetMACConfig+0x11a>
 8003490:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003492:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800349a:	2a01      	cmp	r2, #1
 800349c:	d101      	bne.n	80034a2 <ETH_SetMACConfig+0x12a>
 800349e:	2202      	movs	r2, #2
 80034a0:	e000      	b.n	80034a4 <ETH_SetMACConfig+0x12c>
 80034a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034a4:	4313      	orrs	r3, r2
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034bc:	2001      	movs	r0, #1
 80034be:	f7fe fe15 	bl	80020ec <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	619a      	str	r2, [r3, #24]
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	ff20810f 	.word	0xff20810f

080034d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <ETH_SetDMAConfig+0x110>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	7b1b      	ldrb	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <ETH_SetDMAConfig+0x2c>
 80034fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003502:	e000      	b.n	8003506 <ETH_SetDMAConfig+0x2e>
 8003504:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	7b5b      	ldrb	r3, [r3, #13]
 800350a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800350c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	7f52      	ldrb	r2, [r2, #29]
 8003512:	2a00      	cmp	r2, #0
 8003514:	d102      	bne.n	800351c <ETH_SetDMAConfig+0x44>
 8003516:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800351a:	e000      	b.n	800351e <ETH_SetDMAConfig+0x46>
 800351c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800351e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	7b9b      	ldrb	r3, [r3, #14]
 8003524:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003526:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800352c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	7f1b      	ldrb	r3, [r3, #28]
 8003532:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003534:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	7f9b      	ldrb	r3, [r3, #30]
 800353a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800353c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003542:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800354a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800354c:	4313      	orrs	r3, r2
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355c:	461a      	mov	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800356e:	2001      	movs	r0, #1
 8003570:	f7fe fdbc 	bl	80020ec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357c:	461a      	mov	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	791b      	ldrb	r3, [r3, #4]
 8003586:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800358c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003592:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003598:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80035a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7fe fd8d 	bl	80020ec <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	f8de3f23 	.word	0xf8de3f23

080035ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b0a6      	sub	sp, #152	; 0x98
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003600:	2300      	movs	r3, #0
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800361c:	2300      	movs	r3, #0
 800361e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003628:	2300      	movs	r3, #0
 800362a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800362c:	2300      	movs	r3, #0
 800362e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003632:	2300      	movs	r3, #0
 8003634:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800364e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003652:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003658:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fe86 	bl	8003378 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800366c:	2301      	movs	r3, #1
 800366e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003670:	2301      	movs	r3, #1
 8003672:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800367a:	2301      	movs	r3, #1
 800367c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800368e:	2300      	movs	r3, #0
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003698:	2301      	movs	r3, #1
 800369a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800369c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036a0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80036bc:	f107 0308 	add.w	r3, r7, #8
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff08 	bl	80034d8 <ETH_SetDMAConfig>
}
 80036c8:	bf00      	nop
 80036ca:	3798      	adds	r7, #152	; 0x98
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3305      	adds	r3, #5
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	3204      	adds	r2, #4
 80036e8:	7812      	ldrb	r2, [r2, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <ETH_MACAddressConfig+0x68>)
 80036f2:	4413      	add	r3, r2
 80036f4:	461a      	mov	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3303      	adds	r3, #3
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	061a      	lsls	r2, r3, #24
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3302      	adds	r3, #2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3301      	adds	r3, #1
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	4313      	orrs	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <ETH_MACAddressConfig+0x6c>)
 8003722:	4413      	add	r3, r2
 8003724:	461a      	mov	r2, r3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	6013      	str	r3, [r2, #0]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40028040 	.word	0x40028040
 800373c:	40028044 	.word	0x40028044

08003740 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e03e      	b.n	80037cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68d9      	ldr	r1, [r3, #12]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2200      	movs	r2, #0
 800376a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2200      	movs	r2, #0
 8003776:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	3206      	adds	r2, #6
 8003780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d80c      	bhi.n	80037b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68d9      	ldr	r1, [r3, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	e004      	b.n	80037ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	461a      	mov	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3301      	adds	r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d9bd      	bls.n	800374e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e4:	611a      	str	r2, [r3, #16]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	e046      	b.n	800388e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6919      	ldr	r1, [r3, #16]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	440b      	add	r3, r1
 8003810:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2200      	movs	r2, #0
 800382e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2200      	movs	r2, #0
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800383c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003844:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	3212      	adds	r2, #18
 800385a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d80c      	bhi.n	800387e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6919      	ldr	r1, [r3, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	440b      	add	r3, r1
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	60da      	str	r2, [r3, #12]
 800387c:	e004      	b.n	8003888 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3301      	adds	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d9b5      	bls.n	8003800 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038be:	60da      	str	r2, [r3, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	e177      	b.n	8003bd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038e8:	2201      	movs	r2, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	f040 8166 	bne.w	8003bd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d005      	beq.n	800391e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800391a:	2b02      	cmp	r3, #2
 800391c:	d130      	bne.n	8003980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	2203      	movs	r2, #3
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003954:	2201      	movs	r2, #1
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 0201 	and.w	r2, r3, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b03      	cmp	r3, #3
 800398a:	d017      	beq.n	80039bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	2203      	movs	r2, #3
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d123      	bne.n	8003a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	08da      	lsrs	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3208      	adds	r2, #8
 80039d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	220f      	movs	r2, #15
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	08da      	lsrs	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3208      	adds	r2, #8
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80c0 	beq.w	8003bd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4a65      	ldr	r2, [pc, #404]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44
 8003a62:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6e:	4a61      	ldr	r2, [pc, #388]	; (8003bf4 <HAL_GPIO_Init+0x328>)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3302      	adds	r3, #2
 8003a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_GPIO_Init+0x32c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d037      	beq.n	8003b0a <HAL_GPIO_Init+0x23e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a57      	ldr	r2, [pc, #348]	; (8003bfc <HAL_GPIO_Init+0x330>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d031      	beq.n	8003b06 <HAL_GPIO_Init+0x23a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a56      	ldr	r2, [pc, #344]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02b      	beq.n	8003b02 <HAL_GPIO_Init+0x236>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a55      	ldr	r2, [pc, #340]	; (8003c04 <HAL_GPIO_Init+0x338>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d025      	beq.n	8003afe <HAL_GPIO_Init+0x232>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a54      	ldr	r2, [pc, #336]	; (8003c08 <HAL_GPIO_Init+0x33c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <HAL_GPIO_Init+0x22e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a53      	ldr	r2, [pc, #332]	; (8003c0c <HAL_GPIO_Init+0x340>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d019      	beq.n	8003af6 <HAL_GPIO_Init+0x22a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_GPIO_Init+0x344>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0x226>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a51      	ldr	r2, [pc, #324]	; (8003c14 <HAL_GPIO_Init+0x348>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00d      	beq.n	8003aee <HAL_GPIO_Init+0x222>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a50      	ldr	r2, [pc, #320]	; (8003c18 <HAL_GPIO_Init+0x34c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <HAL_GPIO_Init+0x21e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4f      	ldr	r2, [pc, #316]	; (8003c1c <HAL_GPIO_Init+0x350>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_GPIO_Init+0x21a>
 8003ae2:	2309      	movs	r3, #9
 8003ae4:	e012      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003ae6:	230a      	movs	r3, #10
 8003ae8:	e010      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003aea:	2308      	movs	r3, #8
 8003aec:	e00e      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003aee:	2307      	movs	r3, #7
 8003af0:	e00c      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003af2:	2306      	movs	r3, #6
 8003af4:	e00a      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003af6:	2305      	movs	r3, #5
 8003af8:	e008      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e006      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003afe:	2303      	movs	r3, #3
 8003b00:	e004      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e002      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	f002 0203 	and.w	r2, r2, #3
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	4093      	lsls	r3, r2
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b1c:	4935      	ldr	r1, [pc, #212]	; (8003bf4 <HAL_GPIO_Init+0x328>)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	3302      	adds	r3, #2
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <HAL_GPIO_Init+0x354>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b4e:	4a34      	ldr	r2, [pc, #208]	; (8003c20 <HAL_GPIO_Init+0x354>)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b54:	4b32      	ldr	r3, [pc, #200]	; (8003c20 <HAL_GPIO_Init+0x354>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b78:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <HAL_GPIO_Init+0x354>)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b7e:	4b28      	ldr	r3, [pc, #160]	; (8003c20 <HAL_GPIO_Init+0x354>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <HAL_GPIO_Init+0x354>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_GPIO_Init+0x354>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bcc:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <HAL_GPIO_Init+0x354>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	f67f ae84 	bls.w	80038e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40013800 	.word	0x40013800
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	40020400 	.word	0x40020400
 8003c00:	40020800 	.word	0x40020800
 8003c04:	40020c00 	.word	0x40020c00
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40021400 	.word	0x40021400
 8003c10:	40021800 	.word	0x40021800
 8003c14:	40021c00 	.word	0x40021c00
 8003c18:	40022000 	.word	0x40022000
 8003c1c:	40022400 	.word	0x40022400
 8003c20:	40013c00 	.word	0x40013c00

08003c24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e001      	b.n	8003c46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	807b      	strh	r3, [r7, #2]
 8003c60:	4613      	mov	r3, r2
 8003c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c64:	787b      	ldrb	r3, [r7, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c70:	e003      	b.n	8003c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c72:	887b      	ldrh	r3, [r7, #2]
 8003c74:	041a      	lsls	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	619a      	str	r2, [r3, #24]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c98:	887a      	ldrh	r2, [r7, #2]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	041a      	lsls	r2, r3, #16
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	43d9      	mvns	r1, r3
 8003ca4:	887b      	ldrh	r3, [r7, #2]
 8003ca6:	400b      	ands	r3, r1
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	619a      	str	r2, [r3, #24]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fe58 	bl	8000990 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40013c00 	.word	0x40013c00

08003cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e12b      	b.n	8003f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd ff20 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	; 0x24
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d50:	f001 fa30 	bl	80051b4 <HAL_RCC_GetPCLK1Freq>
 8003d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4a81      	ldr	r2, [pc, #516]	; (8003f60 <HAL_I2C_Init+0x274>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d807      	bhi.n	8003d70 <HAL_I2C_Init+0x84>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a80      	ldr	r2, [pc, #512]	; (8003f64 <HAL_I2C_Init+0x278>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	bf94      	ite	ls
 8003d68:	2301      	movls	r3, #1
 8003d6a:	2300      	movhi	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e006      	b.n	8003d7e <HAL_I2C_Init+0x92>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a7d      	ldr	r2, [pc, #500]	; (8003f68 <HAL_I2C_Init+0x27c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bf94      	ite	ls
 8003d78:	2301      	movls	r3, #1
 8003d7a:	2300      	movhi	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0e7      	b.n	8003f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a78      	ldr	r2, [pc, #480]	; (8003f6c <HAL_I2C_Init+0x280>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	0c9b      	lsrs	r3, r3, #18
 8003d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4a6a      	ldr	r2, [pc, #424]	; (8003f60 <HAL_I2C_Init+0x274>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d802      	bhi.n	8003dc0 <HAL_I2C_Init+0xd4>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	e009      	b.n	8003dd4 <HAL_I2C_Init+0xe8>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	4a69      	ldr	r2, [pc, #420]	; (8003f70 <HAL_I2C_Init+0x284>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	099b      	lsrs	r3, r3, #6
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003de6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	495c      	ldr	r1, [pc, #368]	; (8003f60 <HAL_I2C_Init+0x274>)
 8003df0:	428b      	cmp	r3, r1
 8003df2:	d819      	bhi.n	8003e28 <HAL_I2C_Init+0x13c>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e59      	subs	r1, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e08:	400b      	ands	r3, r1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_I2C_Init+0x138>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1e59      	subs	r1, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e22:	e051      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003e24:	2304      	movs	r3, #4
 8003e26:	e04f      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d111      	bne.n	8003e54 <HAL_I2C_Init+0x168>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e58      	subs	r0, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	440b      	add	r3, r1
 8003e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e012      	b.n	8003e7a <HAL_I2C_Init+0x18e>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1e58      	subs	r0, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	0099      	lsls	r1, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Init+0x196>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e022      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10e      	bne.n	8003ea8 <HAL_I2C_Init+0x1bc>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1e58      	subs	r0, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6859      	ldr	r1, [r3, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	440b      	add	r3, r1
 8003e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea6:	e00f      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	0099      	lsls	r1, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	6809      	ldr	r1, [r1, #0]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6911      	ldr	r1, [r2, #16]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68d2      	ldr	r2, [r2, #12]
 8003f02:	4311      	orrs	r1, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	000186a0 	.word	0x000186a0
 8003f64:	001e847f 	.word	0x001e847f
 8003f68:	003d08ff 	.word	0x003d08ff
 8003f6c:	431bde83 	.word	0x431bde83
 8003f70:	10624dd3 	.word	0x10624dd3

08003f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	460b      	mov	r3, r1
 8003f82:	817b      	strh	r3, [r7, #10]
 8003f84:	4613      	mov	r3, r2
 8003f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f88:	f7fe f8a4 	bl	80020d4 <HAL_GetTick>
 8003f8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	f040 80e0 	bne.w	800415c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2319      	movs	r3, #25
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4970      	ldr	r1, [pc, #448]	; (8004168 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fa92 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e0d3      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2C_Master_Transmit+0x50>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e0cc      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d007      	beq.n	8003fea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2221      	movs	r2, #33	; 0x21
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2210      	movs	r2, #16
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	893a      	ldrh	r2, [r7, #8]
 800401a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a50      	ldr	r2, [pc, #320]	; (800416c <HAL_I2C_Master_Transmit+0x1f8>)
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800402c:	8979      	ldrh	r1, [r7, #10]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f9ca 	bl	80043cc <I2C_MasterRequestWrite>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e08d      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004058:	e066      	b.n	8004128 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	6a39      	ldr	r1, [r7, #32]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fb0c 	bl	800467c <I2C_WaitOnTXEFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	2b04      	cmp	r3, #4
 8004070:	d107      	bne.n	8004082 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06b      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	781a      	ldrb	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d11b      	bne.n	80040fc <HAL_I2C_Master_Transmit+0x188>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d017      	beq.n	80040fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	6a39      	ldr	r1, [r7, #32]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fafc 	bl	80046fe <I2C_WaitOnBTFFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	2b04      	cmp	r3, #4
 8004112:	d107      	bne.n	8004124 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004122:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e01a      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d194      	bne.n	800405a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	00100002 	.word	0x00100002
 800416c:	ffff0000 	.word	0xffff0000

08004170 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	460b      	mov	r3, r1
 800417e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004180:	f7fd ffa8 	bl	80020d4 <HAL_GetTick>
 8004184:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	f040 8111 	bne.w	80043ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2319      	movs	r3, #25
 800419e:	2201      	movs	r2, #1
 80041a0:	4988      	ldr	r1, [pc, #544]	; (80043c4 <HAL_I2C_IsDeviceReady+0x254>)
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f994 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
 80041b0:	e104      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_I2C_IsDeviceReady+0x50>
 80041bc:	2302      	movs	r3, #2
 80041be:	e0fd      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x24c>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d007      	beq.n	80041e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0201 	orr.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2224      	movs	r2, #36	; 0x24
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a70      	ldr	r2, [pc, #448]	; (80043c8 <HAL_I2C_IsDeviceReady+0x258>)
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004218:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2200      	movs	r2, #0
 8004222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f952 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00d      	beq.n	800424e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004240:	d103      	bne.n	800424a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0b6      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800424e:	897b      	ldrh	r3, [r7, #10]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800425c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800425e:	f7fd ff39 	bl	80020d4 <HAL_GetTick>
 8004262:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b02      	cmp	r3, #2
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004292:	e025      	b.n	80042e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004294:	f7fd ff1e 	bl	80020d4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d302      	bcc.n	80042aa <HAL_I2C_IsDeviceReady+0x13a>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	22a0      	movs	r2, #160	; 0xa0
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2ba0      	cmp	r3, #160	; 0xa0
 80042ea:	d005      	beq.n	80042f8 <HAL_I2C_IsDeviceReady+0x188>
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_I2C_IsDeviceReady+0x188>
 80042f2:	7dbb      	ldrb	r3, [r7, #22]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0cd      	beq.n	8004294 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b02      	cmp	r3, #2
 800430c:	d129      	bne.n	8004362 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	2319      	movs	r3, #25
 800433a:	2201      	movs	r2, #1
 800433c:	4921      	ldr	r1, [pc, #132]	; (80043c4 <HAL_I2C_IsDeviceReady+0x254>)
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f8c6 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e036      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e02c      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004370:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800437a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	2319      	movs	r3, #25
 8004382:	2201      	movs	r2, #1
 8004384:	490f      	ldr	r1, [pc, #60]	; (80043c4 <HAL_I2C_IsDeviceReady+0x254>)
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f8a2 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e012      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	3301      	adds	r3, #1
 800439a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	f4ff af32 	bcc.w	800420a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	00100002 	.word	0x00100002
 80043c8:	ffff0000 	.word	0xffff0000

080043cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	460b      	mov	r3, r1
 80043da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d006      	beq.n	80043f6 <I2C_MasterRequestWrite+0x2a>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d003      	beq.n	80043f6 <I2C_MasterRequestWrite+0x2a>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043f4:	d108      	bne.n	8004408 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e00b      	b.n	8004420 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	2b12      	cmp	r3, #18
 800440e:	d107      	bne.n	8004420 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f84f 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00d      	beq.n	8004454 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004446:	d103      	bne.n	8004450 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e035      	b.n	80044c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800445c:	d108      	bne.n	8004470 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800445e:	897b      	ldrh	r3, [r7, #10]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800446c:	611a      	str	r2, [r3, #16]
 800446e:	e01b      	b.n	80044a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004470:	897b      	ldrh	r3, [r7, #10]
 8004472:	11db      	asrs	r3, r3, #7
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0306 	and.w	r3, r3, #6
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f063 030f 	orn	r3, r3, #15
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	490e      	ldr	r1, [pc, #56]	; (80044c8 <I2C_MasterRequestWrite+0xfc>)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f875 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e010      	b.n	80044c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4907      	ldr	r1, [pc, #28]	; (80044cc <I2C_MasterRequestWrite+0x100>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f865 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	00010008 	.word	0x00010008
 80044cc:	00010002 	.word	0x00010002

080044d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e0:	e025      	b.n	800452e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d021      	beq.n	800452e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fd fdf3 	bl	80020d4 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d116      	bne.n	800452e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e023      	b.n	8004576 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d10d      	bne.n	8004554 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	43da      	mvns	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	e00c      	b.n	800456e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	43da      	mvns	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4013      	ands	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	429a      	cmp	r2, r3
 8004572:	d0b6      	beq.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800458c:	e051      	b.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459c:	d123      	bne.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e046      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d021      	beq.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fd fd71 	bl	80020d4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d116      	bne.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0220 	orr.w	r2, r3, #32
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e020      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	43da      	mvns	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e00b      	b.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	43da      	mvns	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d18d      	bne.n	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004688:	e02d      	b.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f878 	bl	8004780 <I2C_IsAcknowledgeFailed>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e02d      	b.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d021      	beq.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fd fd17 	bl	80020d4 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d116      	bne.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e007      	b.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d1ca      	bne.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470a:	e02d      	b.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f837 	bl	8004780 <I2C_IsAcknowledgeFailed>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e02d      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d021      	beq.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004724:	f7fd fcd6 	bl	80020d4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d116      	bne.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e007      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b04      	cmp	r3, #4
 8004774:	d1ca      	bne.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004796:	d11b      	bne.n	80047d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	f043 0204 	orr.w	r2, r3, #4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d129      	bne.n	8004848 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0210 	bic.w	r2, r2, #16
 800481a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b20      	cmp	r3, #32
 800486e:	d12a      	bne.n	80048c6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	; 0x24
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004890:	89fb      	ldrh	r3, [r7, #14]
 8004892:	f023 030f 	bic.w	r3, r3, #15
 8004896:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	b29a      	uxth	r2, r3
 800489c:	89fb      	ldrh	r3, [r7, #14]
 800489e:	4313      	orrs	r3, r2
 80048a0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	89fa      	ldrh	r2, [r7, #14]
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
  }
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e267      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d075      	beq.n	80049de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048f2:	4b88      	ldr	r3, [pc, #544]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d00c      	beq.n	8004918 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fe:	4b85      	ldr	r3, [pc, #532]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004906:	2b08      	cmp	r3, #8
 8004908:	d112      	bne.n	8004930 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800490a:	4b82      	ldr	r3, [pc, #520]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004916:	d10b      	bne.n	8004930 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004918:	4b7e      	ldr	r3, [pc, #504]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05b      	beq.n	80049dc <HAL_RCC_OscConfig+0x108>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d157      	bne.n	80049dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e242      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004938:	d106      	bne.n	8004948 <HAL_RCC_OscConfig+0x74>
 800493a:	4b76      	ldr	r3, [pc, #472]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a75      	ldr	r2, [pc, #468]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e01d      	b.n	8004984 <HAL_RCC_OscConfig+0xb0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004950:	d10c      	bne.n	800496c <HAL_RCC_OscConfig+0x98>
 8004952:	4b70      	ldr	r3, [pc, #448]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a6f      	ldr	r2, [pc, #444]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4b6d      	ldr	r3, [pc, #436]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a6c      	ldr	r2, [pc, #432]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e00b      	b.n	8004984 <HAL_RCC_OscConfig+0xb0>
 800496c:	4b69      	ldr	r3, [pc, #420]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a68      	ldr	r2, [pc, #416]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	4b66      	ldr	r3, [pc, #408]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a65      	ldr	r2, [pc, #404]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 800497e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fd fba2 	bl	80020d4 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004994:	f7fd fb9e 	bl	80020d4 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e207      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	4b5b      	ldr	r3, [pc, #364]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0xc0>
 80049b2:	e014      	b.n	80049de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fd fb8e 	bl	80020d4 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fd fb8a 	bl	80020d4 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e1f3      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ce:	4b51      	ldr	r3, [pc, #324]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0xe8>
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d063      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ea:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d11c      	bne.n	8004a3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a02:	4b44      	ldr	r3, [pc, #272]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d116      	bne.n	8004a3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_RCC_OscConfig+0x152>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e1c7      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a26:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4937      	ldr	r1, [pc, #220]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3a:	e03a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a44:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <HAL_RCC_OscConfig+0x244>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fd fb43 	bl	80020d4 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a52:	f7fd fb3f 	bl	80020d4 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e1a8      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4925      	ldr	r1, [pc, #148]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]
 8004a84:	e015      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <HAL_RCC_OscConfig+0x244>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fb22 	bl	80020d4 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a94:	f7fd fb1e 	bl	80020d4 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e187      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d036      	beq.n	8004b2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d016      	beq.n	8004af4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac6:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <HAL_RCC_OscConfig+0x248>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fd fb02 	bl	80020d4 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad4:	f7fd fafe 	bl	80020d4 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e167      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x200>
 8004af2:	e01b      	b.n	8004b2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCC_OscConfig+0x248>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afa:	f7fd faeb 	bl	80020d4 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	e00e      	b.n	8004b20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fd fae7 	bl	80020d4 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d907      	bls.n	8004b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e150      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
 8004b14:	40023800 	.word	0x40023800
 8004b18:	42470000 	.word	0x42470000
 8004b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b20:	4b88      	ldr	r3, [pc, #544]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ea      	bne.n	8004b02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8097 	beq.w	8004c68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3e:	4b81      	ldr	r3, [pc, #516]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10f      	bne.n	8004b6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	4b7d      	ldr	r3, [pc, #500]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	4a7c      	ldr	r2, [pc, #496]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5a:	4b7a      	ldr	r3, [pc, #488]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	4b77      	ldr	r3, [pc, #476]	; (8004d48 <HAL_RCC_OscConfig+0x474>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d118      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b76:	4b74      	ldr	r3, [pc, #464]	; (8004d48 <HAL_RCC_OscConfig+0x474>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a73      	ldr	r2, [pc, #460]	; (8004d48 <HAL_RCC_OscConfig+0x474>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b82:	f7fd faa7 	bl	80020d4 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8a:	f7fd faa3 	bl	80020d4 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e10c      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	4b6a      	ldr	r3, [pc, #424]	; (8004d48 <HAL_RCC_OscConfig+0x474>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x2ea>
 8004bb0:	4b64      	ldr	r3, [pc, #400]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	4a63      	ldr	r2, [pc, #396]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbc:	e01c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x324>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x30c>
 8004bc6:	4b5f      	ldr	r3, [pc, #380]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a5e      	ldr	r2, [pc, #376]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	f043 0304 	orr.w	r3, r3, #4
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd2:	4b5c      	ldr	r3, [pc, #368]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a5b      	ldr	r2, [pc, #364]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0x324>
 8004be0:	4b58      	ldr	r3, [pc, #352]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4a57      	ldr	r2, [pc, #348]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	6713      	str	r3, [r2, #112]	; 0x70
 8004bec:	4b55      	ldr	r3, [pc, #340]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	4a54      	ldr	r2, [pc, #336]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	f023 0304 	bic.w	r3, r3, #4
 8004bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d015      	beq.n	8004c2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c00:	f7fd fa68 	bl	80020d4 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fd fa64 	bl	80020d4 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0cb      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	4b49      	ldr	r3, [pc, #292]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ee      	beq.n	8004c08 <HAL_RCC_OscConfig+0x334>
 8004c2a:	e014      	b.n	8004c56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2c:	f7fd fa52 	bl	80020d4 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd fa4e 	bl	80020d4 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0b5      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4a:	4b3e      	ldr	r3, [pc, #248]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ee      	bne.n	8004c34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5c:	4b39      	ldr	r3, [pc, #228]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	4a38      	ldr	r2, [pc, #224]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80a1 	beq.w	8004db4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c72:	4b34      	ldr	r3, [pc, #208]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d05c      	beq.n	8004d38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d141      	bne.n	8004d0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c86:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <HAL_RCC_OscConfig+0x478>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fd fa22 	bl	80020d4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c94:	f7fd fa1e 	bl	80020d4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e087      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca6:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69da      	ldr	r2, [r3, #28]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	019b      	lsls	r3, r3, #6
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	491b      	ldr	r1, [pc, #108]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <HAL_RCC_OscConfig+0x478>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce2:	f7fd f9f7 	bl	80020d4 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cea:	f7fd f9f3 	bl	80020d4 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e05c      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x416>
 8004d08:	e054      	b.n	8004db4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0a:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <HAL_RCC_OscConfig+0x478>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fd f9e0 	bl	80020d4 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fd f9dc 	bl	80020d4 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e045      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x444>
 8004d36:	e03d      	b.n	8004db4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e038      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40007000 	.word	0x40007000
 8004d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d50:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <HAL_RCC_OscConfig+0x4ec>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d028      	beq.n	8004db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d121      	bne.n	8004db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d11a      	bne.n	8004db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d80:	4013      	ands	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d111      	bne.n	8004db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d107      	bne.n	8004db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800

08004dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0cc      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b68      	ldr	r3, [pc, #416]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d90c      	bls.n	8004e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b65      	ldr	r3, [pc, #404]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0b8      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e18:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4a58      	ldr	r2, [pc, #352]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e30:	4b53      	ldr	r3, [pc, #332]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4a52      	ldr	r2, [pc, #328]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e3c:	4b50      	ldr	r3, [pc, #320]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	494d      	ldr	r1, [pc, #308]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d044      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e62:	4b47      	ldr	r3, [pc, #284]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d119      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e07f      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d003      	beq.n	8004e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d107      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e82:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e06f      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e92:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e067      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ea2:	4b37      	ldr	r3, [pc, #220]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 0203 	bic.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4934      	ldr	r1, [pc, #208]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eb4:	f7fd f90e 	bl	80020d4 <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ebc:	f7fd f90a 	bl	80020d4 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e04f      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 020c 	and.w	r2, r3, #12
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d1eb      	bne.n	8004ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d20c      	bcs.n	8004f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e032      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4916      	ldr	r1, [pc, #88]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	490e      	ldr	r1, [pc, #56]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f4a:	f000 f821 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	490a      	ldr	r1, [pc, #40]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004f5c:	5ccb      	ldrb	r3, [r1, r3]
 8004f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <HAL_RCC_ClockConfig+0x1c8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd f86e 	bl	800204c <HAL_InitTick>

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023c00 	.word	0x40023c00
 8004f80:	40023800 	.word	0x40023800
 8004f84:	08008d88 	.word	0x08008d88
 8004f88:	20000238 	.word	0x20000238
 8004f8c:	2000023c 	.word	0x2000023c

08004f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f94:	b094      	sub	sp, #80	; 0x50
 8004f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa8:	4b79      	ldr	r3, [pc, #484]	; (8005190 <HAL_RCC_GetSysClockFreq+0x200>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d00d      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	f200 80e1 	bhi.w	800517c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d003      	beq.n	8004fca <HAL_RCC_GetSysClockFreq+0x3a>
 8004fc2:	e0db      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b73      	ldr	r3, [pc, #460]	; (8005194 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004fc8:	e0db      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fca:	4b73      	ldr	r3, [pc, #460]	; (8005198 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fce:	e0d8      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fd0:	4b6f      	ldr	r3, [pc, #444]	; (8005190 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fda:	4b6d      	ldr	r3, [pc, #436]	; (8005190 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d063      	beq.n	80050ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe6:	4b6a      	ldr	r3, [pc, #424]	; (8005190 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	099b      	lsrs	r3, r3, #6
 8004fec:	2200      	movs	r2, #0
 8004fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	f04f 0000 	mov.w	r0, #0
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	0159      	lsls	r1, r3, #5
 8005010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005014:	0150      	lsls	r0, r2, #5
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4621      	mov	r1, r4
 800501c:	1a51      	subs	r1, r2, r1
 800501e:	6139      	str	r1, [r7, #16]
 8005020:	4629      	mov	r1, r5
 8005022:	eb63 0301 	sbc.w	r3, r3, r1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005034:	4659      	mov	r1, fp
 8005036:	018b      	lsls	r3, r1, #6
 8005038:	4651      	mov	r1, sl
 800503a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800503e:	4651      	mov	r1, sl
 8005040:	018a      	lsls	r2, r1, #6
 8005042:	4651      	mov	r1, sl
 8005044:	ebb2 0801 	subs.w	r8, r2, r1
 8005048:	4659      	mov	r1, fp
 800504a:	eb63 0901 	sbc.w	r9, r3, r1
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800505a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800505e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005062:	4690      	mov	r8, r2
 8005064:	4699      	mov	r9, r3
 8005066:	4623      	mov	r3, r4
 8005068:	eb18 0303 	adds.w	r3, r8, r3
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	462b      	mov	r3, r5
 8005070:	eb49 0303 	adc.w	r3, r9, r3
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005082:	4629      	mov	r1, r5
 8005084:	024b      	lsls	r3, r1, #9
 8005086:	4621      	mov	r1, r4
 8005088:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800508c:	4621      	mov	r1, r4
 800508e:	024a      	lsls	r2, r1, #9
 8005090:	4610      	mov	r0, r2
 8005092:	4619      	mov	r1, r3
 8005094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005096:	2200      	movs	r2, #0
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
 800509a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800509c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050a0:	f7fb f8fe 	bl	80002a0 <__aeabi_uldivmod>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4613      	mov	r3, r2
 80050aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ac:	e058      	b.n	8005160 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ae:	4b38      	ldr	r3, [pc, #224]	; (8005190 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	099b      	lsrs	r3, r3, #6
 80050b4:	2200      	movs	r2, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	4611      	mov	r1, r2
 80050ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050be:	623b      	str	r3, [r7, #32]
 80050c0:	2300      	movs	r3, #0
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
 80050c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050c8:	4642      	mov	r2, r8
 80050ca:	464b      	mov	r3, r9
 80050cc:	f04f 0000 	mov.w	r0, #0
 80050d0:	f04f 0100 	mov.w	r1, #0
 80050d4:	0159      	lsls	r1, r3, #5
 80050d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050da:	0150      	lsls	r0, r2, #5
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4641      	mov	r1, r8
 80050e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80050e6:	4649      	mov	r1, r9
 80050e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005100:	ebb2 040a 	subs.w	r4, r2, sl
 8005104:	eb63 050b 	sbc.w	r5, r3, fp
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	00eb      	lsls	r3, r5, #3
 8005112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005116:	00e2      	lsls	r2, r4, #3
 8005118:	4614      	mov	r4, r2
 800511a:	461d      	mov	r5, r3
 800511c:	4643      	mov	r3, r8
 800511e:	18e3      	adds	r3, r4, r3
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	464b      	mov	r3, r9
 8005124:	eb45 0303 	adc.w	r3, r5, r3
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005136:	4629      	mov	r1, r5
 8005138:	028b      	lsls	r3, r1, #10
 800513a:	4621      	mov	r1, r4
 800513c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005140:	4621      	mov	r1, r4
 8005142:	028a      	lsls	r2, r1, #10
 8005144:	4610      	mov	r0, r2
 8005146:	4619      	mov	r1, r3
 8005148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800514a:	2200      	movs	r2, #0
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	61fa      	str	r2, [r7, #28]
 8005150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005154:	f7fb f8a4 	bl	80002a0 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4613      	mov	r3, r2
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCC_GetSysClockFreq+0x200>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	0c1b      	lsrs	r3, r3, #16
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	3301      	adds	r3, #1
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800517a:	e002      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800517c:	4b05      	ldr	r3, [pc, #20]	; (8005194 <HAL_RCC_GetSysClockFreq+0x204>)
 800517e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005184:	4618      	mov	r0, r3
 8005186:	3750      	adds	r7, #80	; 0x50
 8005188:	46bd      	mov	sp, r7
 800518a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800518e:	bf00      	nop
 8005190:	40023800 	.word	0x40023800
 8005194:	00f42400 	.word	0x00f42400
 8005198:	007a1200 	.word	0x007a1200

0800519c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a0:	4b03      	ldr	r3, [pc, #12]	; (80051b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051a2:	681b      	ldr	r3, [r3, #0]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000238 	.word	0x20000238

080051b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051b8:	f7ff fff0 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80051bc:	4602      	mov	r2, r0
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	0a9b      	lsrs	r3, r3, #10
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	4903      	ldr	r1, [pc, #12]	; (80051d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ca:	5ccb      	ldrb	r3, [r1, r3]
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40023800 	.word	0x40023800
 80051d8:	08008d98 	.word	0x08008d98

080051dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051e0:	f7ff ffdc 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b05      	ldr	r3, [pc, #20]	; (80051fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	0b5b      	lsrs	r3, r3, #13
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	4903      	ldr	r1, [pc, #12]	; (8005200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40023800 	.word	0x40023800
 8005200:	08008d98 	.word	0x08008d98

08005204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005228:	2b00      	cmp	r3, #0
 800522a:	d105      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005234:	2b00      	cmp	r3, #0
 8005236:	d075      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005238:	4b91      	ldr	r3, [pc, #580]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800523e:	f7fc ff49 	bl	80020d4 <HAL_GetTick>
 8005242:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005246:	f7fc ff45 	bl	80020d4 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e189      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005258:	4b8a      	ldr	r3, [pc, #552]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f0      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	019a      	lsls	r2, r3, #6
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	071b      	lsls	r3, r3, #28
 800527c:	4981      	ldr	r1, [pc, #516]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01f      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005290:	4b7c      	ldr	r3, [pc, #496]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005296:	0f1b      	lsrs	r3, r3, #28
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	019a      	lsls	r2, r3, #6
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	431a      	orrs	r2, r3
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	071b      	lsls	r3, r3, #28
 80052b0:	4974      	ldr	r1, [pc, #464]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052b8:	4b72      	ldr	r3, [pc, #456]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052be:	f023 021f 	bic.w	r2, r3, #31
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	496e      	ldr	r1, [pc, #440]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	019a      	lsls	r2, r3, #6
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	071b      	lsls	r3, r3, #28
 80052f0:	4964      	ldr	r1, [pc, #400]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052f8:	4b61      	ldr	r3, [pc, #388]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052fe:	f7fc fee9 	bl	80020d4 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005304:	e008      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005306:	f7fc fee5 	bl	80020d4 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e129      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005318:	4b5a      	ldr	r3, [pc, #360]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005338:	2b00      	cmp	r3, #0
 800533a:	d079      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800533c:	4b52      	ldr	r3, [pc, #328]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005342:	f7fc fec7 	bl	80020d4 <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005348:	e008      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800534a:	f7fc fec3 	bl	80020d4 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e107      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800535c:	4b49      	ldr	r3, [pc, #292]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005368:	d0ef      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d020      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005376:	4b43      	ldr	r3, [pc, #268]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	0f1b      	lsrs	r3, r3, #28
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	019a      	lsls	r2, r3, #6
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	061b      	lsls	r3, r3, #24
 8005390:	431a      	orrs	r2, r3
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	071b      	lsls	r3, r3, #28
 8005396:	493b      	ldr	r1, [pc, #236]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800539e:	4b39      	ldr	r3, [pc, #228]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	4934      	ldr	r1, [pc, #208]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01e      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053c4:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	0e1b      	lsrs	r3, r3, #24
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	019a      	lsls	r2, r3, #6
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	071b      	lsls	r3, r3, #28
 80053e4:	4927      	ldr	r1, [pc, #156]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053ec:	4b25      	ldr	r3, [pc, #148]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	4922      	ldr	r1, [pc, #136]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005402:	4b21      	ldr	r3, [pc, #132]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005404:	2201      	movs	r2, #1
 8005406:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005408:	f7fc fe64 	bl	80020d4 <HAL_GetTick>
 800540c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005410:	f7fc fe60 	bl	80020d4 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e0a4      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005422:	4b18      	ldr	r3, [pc, #96]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800542a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542e:	d1ef      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 808b 	beq.w	8005554 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	4b10      	ldr	r3, [pc, #64]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	4a0f      	ldr	r2, [pc, #60]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544c:	6413      	str	r3, [r2, #64]	; 0x40
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800545a:	4b0c      	ldr	r3, [pc, #48]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a0b      	ldr	r2, [pc, #44]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005464:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005466:	f7fc fe35 	bl	80020d4 <HAL_GetTick>
 800546a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800546c:	e010      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800546e:	f7fc fe31 	bl	80020d4 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d909      	bls.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e075      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005480:	42470068 	.word	0x42470068
 8005484:	40023800 	.word	0x40023800
 8005488:	42470070 	.word	0x42470070
 800548c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005490:	4b38      	ldr	r3, [pc, #224]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0e8      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d02f      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d028      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054ba:	4b2f      	ldr	r3, [pc, #188]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054c4:	4b2d      	ldr	r3, [pc, #180]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054ca:	4b2c      	ldr	r3, [pc, #176]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054d0:	4a29      	ldr	r2, [pc, #164]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054d6:	4b28      	ldr	r3, [pc, #160]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d114      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054e2:	f7fc fdf7 	bl	80020d4 <HAL_GetTick>
 80054e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e8:	e00a      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ea:	f7fc fdf3 	bl	80020d4 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e035      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005500:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ee      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005518:	d10d      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800551a:	4b17      	ldr	r3, [pc, #92]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800552a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552e:	4912      	ldr	r1, [pc, #72]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005530:	4313      	orrs	r3, r2
 8005532:	608b      	str	r3, [r1, #8]
 8005534:	e005      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4a0f      	ldr	r2, [pc, #60]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800553c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005540:	6093      	str	r3, [r2, #8]
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005544:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554e:	490a      	ldr	r1, [pc, #40]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005550:	4313      	orrs	r3, r2
 8005552:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	d004      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005568:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40007000 	.word	0x40007000
 8005578:	40023800 	.word	0x40023800
 800557c:	42470e40 	.word	0x42470e40
 8005580:	424711e0 	.word	0x424711e0

08005584 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e066      	b.n	8005668 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	7f5b      	ldrb	r3, [r3, #29]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc fb1c 	bl	8001be8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	22ca      	movs	r2, #202	; 0xca
 80055bc:	625a      	str	r2, [r3, #36]	; 0x24
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2253      	movs	r2, #83	; 0x53
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fc5e 	bl	8005e88 <RTC_EnterInitMode>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d12c      	bne.n	8005630 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6899      	ldr	r1, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	68d2      	ldr	r2, [r2, #12]
 8005610:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6919      	ldr	r1, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	041a      	lsls	r2, r3, #16
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fc65 	bl	8005ef6 <RTC_ExitInitMode>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d113      	bne.n	800565e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	22ff      	movs	r2, #255	; 0xff
 8005664:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	7f1b      	ldrb	r3, [r3, #28]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_RTC_SetTime+0x1c>
 8005688:	2302      	movs	r3, #2
 800568a:	e087      	b.n	800579c <HAL_RTC_SetTime+0x12c>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2202      	movs	r2, #2
 8005696:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d126      	bne.n	80056ec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fc42 	bl	8005f40 <RTC_ByteToBcd2>
 80056bc:	4603      	mov	r3, r0
 80056be:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fc3b 	bl	8005f40 <RTC_ByteToBcd2>
 80056ca:	4603      	mov	r3, r0
 80056cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056ce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	789b      	ldrb	r3, [r3, #2]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fc33 	bl	8005f40 <RTC_ByteToBcd2>
 80056da:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	e018      	b.n	800571e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800570c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005712:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	78db      	ldrb	r3, [r3, #3]
 8005718:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	22ca      	movs	r2, #202	; 0xca
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2253      	movs	r2, #83	; 0x53
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fbaa 	bl	8005e88 <RTC_EnterInitMode>
 8005734:	4603      	mov	r3, r0
 8005736:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005738:	7cfb      	ldrb	r3, [r7, #19]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d120      	bne.n	8005780 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005748:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800574c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800575c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	431a      	orrs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fbbd 	bl	8005ef6 <RTC_ExitInitMode>
 800577c:	4603      	mov	r3, r0
 800577e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005780:	7cfb      	ldrb	r3, [r7, #19]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	22ff      	movs	r2, #255	; 0xff
 8005792:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	771a      	strb	r2, [r3, #28]

  return status;
 800579a:	7cfb      	ldrb	r3, [r7, #19]
}
 800579c:	4618      	mov	r0, r3
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd90      	pop	{r4, r7, pc}

080057a4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80057d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80057da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	0c1b      	lsrs	r3, r3, #16
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	0d9b      	lsrs	r3, r3, #22
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11a      	bne.n	8005856 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fba8 	bl	8005f7a <RTC_Bcd2ToByte>
 800582a:	4603      	mov	r3, r0
 800582c:	461a      	mov	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fb9f 	bl	8005f7a <RTC_Bcd2ToByte>
 800583c:	4603      	mov	r3, r0
 800583e:	461a      	mov	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	789b      	ldrb	r3, [r3, #2]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fb96 	bl	8005f7a <RTC_Bcd2ToByte>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	7f1b      	ldrb	r3, [r3, #28]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_RTC_SetDate+0x1c>
 8005878:	2302      	movs	r3, #2
 800587a:	e071      	b.n	8005960 <HAL_RTC_SetDate+0x100>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2202      	movs	r2, #2
 8005886:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10e      	bne.n	80058ac <HAL_RTC_SetDate+0x4c>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	f023 0310 	bic.w	r3, r3, #16
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	330a      	adds	r3, #10
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d11c      	bne.n	80058ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	78db      	ldrb	r3, [r3, #3]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fb42 	bl	8005f40 <RTC_ByteToBcd2>
 80058bc:	4603      	mov	r3, r0
 80058be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fb3b 	bl	8005f40 <RTC_ByteToBcd2>
 80058ca:	4603      	mov	r3, r0
 80058cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	789b      	ldrb	r3, [r3, #2]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fb33 	bl	8005f40 <RTC_ByteToBcd2>
 80058da:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058dc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e00e      	b.n	800590a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	78db      	ldrb	r3, [r3, #3]
 80058f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80058f8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80058fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	22ca      	movs	r2, #202	; 0xca
 8005910:	625a      	str	r2, [r3, #36]	; 0x24
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2253      	movs	r2, #83	; 0x53
 8005918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fab4 	bl	8005e88 <RTC_EnterInitMode>
 8005920:	4603      	mov	r3, r0
 8005922:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10c      	bne.n	8005944 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005934:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005938:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fadb 	bl	8005ef6 <RTC_ExitInitMode>
 8005940:	4603      	mov	r3, r0
 8005942:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005944:	7cfb      	ldrb	r3, [r7, #19]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	22ff      	movs	r2, #255	; 0xff
 8005956:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	771a      	strb	r2, [r3, #28]

  return status;
 800595e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005960:	4618      	mov	r0, r3
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	bd90      	pop	{r4, r7, pc}

08005968 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005982:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005986:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	0c1b      	lsrs	r3, r3, #16
 800598c:	b2da      	uxtb	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	0a1b      	lsrs	r3, r3, #8
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	0b5b      	lsrs	r3, r3, #13
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d11a      	bne.n	80059fc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	78db      	ldrb	r3, [r3, #3]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fad5 	bl	8005f7a <RTC_Bcd2ToByte>
 80059d0:	4603      	mov	r3, r0
 80059d2:	461a      	mov	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 facc 	bl	8005f7a <RTC_Bcd2ToByte>
 80059e2:	4603      	mov	r3, r0
 80059e4:	461a      	mov	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	789b      	ldrb	r3, [r3, #2]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fac3 	bl	8005f7a <RTC_Bcd2ToByte>
 80059f4:	4603      	mov	r3, r0
 80059f6:	461a      	mov	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005a08:	b590      	push	{r4, r7, lr}
 8005a0a:	b089      	sub	sp, #36	; 0x24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005a14:	4b9a      	ldr	r3, [pc, #616]	; (8005c80 <HAL_RTC_SetAlarm_IT+0x278>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a9a      	ldr	r2, [pc, #616]	; (8005c84 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	0adb      	lsrs	r3, r3, #11
 8005a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a24:	fb02 f303 	mul.w	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	7f1b      	ldrb	r3, [r3, #28]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_RTC_SetAlarm_IT+0x36>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e11c      	b.n	8005c78 <HAL_RTC_SetAlarm_IT+0x270>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2202      	movs	r2, #2
 8005a48:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d137      	bne.n	8005ac0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2200      	movs	r2, #0
 8005a62:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fa69 	bl	8005f40 <RTC_ByteToBcd2>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fa62 	bl	8005f40 <RTC_ByteToBcd2>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005a80:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	789b      	ldrb	r3, [r3, #2]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fa5a 	bl	8005f40 <RTC_ByteToBcd2>
 8005a8c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a8e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	78db      	ldrb	r3, [r3, #3]
 8005a96:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005a98:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fa4c 	bl	8005f40 <RTC_ByteToBcd2>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005aac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005ab4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005aba:	4313      	orrs	r3, r2
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	e023      	b.n	8005b08 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ae0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005ae6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	78db      	ldrb	r3, [r3, #3]
 8005aec:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005aee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005af6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005af8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005afe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005b10:	4313      	orrs	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	22ca      	movs	r2, #202	; 0xca
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2253      	movs	r2, #83	; 0x53
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2c:	d141      	bne.n	8005bb2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b3c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005b4e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	1e5a      	subs	r2, r3, #1
 8005b54:	617a      	str	r2, [r7, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10b      	bne.n	8005b72 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	22ff      	movs	r2, #255	; 0xff
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2203      	movs	r2, #3
 8005b66:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e082      	b.n	8005c78 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0e7      	beq.n	8005b50 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	e04b      	b.n	8005c4a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bc0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005bd2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005bd4:	4b2a      	ldr	r3, [pc, #168]	; (8005c80 <HAL_RTC_SetAlarm_IT+0x278>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2a      	ldr	r2, [pc, #168]	; (8005c84 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	0adb      	lsrs	r3, r3, #11
 8005be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005be4:	fb02 f303 	mul.w	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	1e5a      	subs	r2, r3, #1
 8005bee:	617a      	str	r2, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10b      	bne.n	8005c0c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	22ff      	movs	r2, #255	; 0xff
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2203      	movs	r2, #3
 8005c00:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e035      	b.n	8005c78 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0e7      	beq.n	8005bea <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c38:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c48:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <HAL_RTC_SetAlarm_IT+0x280>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <HAL_RTC_SetAlarm_IT+0x280>)
 8005c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c54:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005c56:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <HAL_RTC_SetAlarm_IT+0x280>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	4a0b      	ldr	r2, [pc, #44]	; (8005c88 <HAL_RTC_SetAlarm_IT+0x280>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c60:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	22ff      	movs	r2, #255	; 0xff
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3724      	adds	r7, #36	; 0x24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd90      	pop	{r4, r7, pc}
 8005c80:	20000238 	.word	0x20000238
 8005c84:	10624dd3 	.word	0x10624dd3
 8005c88:	40013c00 	.word	0x40013c00

08005c8c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca8:	d10e      	bne.n	8005cc8 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	e00d      	b.n	8005ce4 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cde:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005ce2:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	0d9b      	lsrs	r3, r3, #22
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	0e1b      	lsrs	r3, r3, #24
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d125      	bne.n	8005da0 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 f90e 	bl	8005f7a <RTC_Bcd2ToByte>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	461a      	mov	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f905 	bl	8005f7a <RTC_Bcd2ToByte>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	789b      	ldrb	r3, [r3, #2]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 f8fc 	bl	8005f7a <RTC_Bcd2ToByte>
 8005d82:	4603      	mov	r3, r0
 8005d84:	461a      	mov	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f8f2 	bl	8005f7a <RTC_Bcd2ToByte>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d012      	beq.n	8005de8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fb fc8b 	bl	80016ec <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005de6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d012      	beq.n	8005e1c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f8d4 	bl	8005fb2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005e1a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005e1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e22:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	775a      	strb	r2, [r3, #29]
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40013c00 	.word	0x40013c00

08005e38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e52:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e54:	f7fc f93e 	bl	80020d4 <HAL_GetTick>
 8005e58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e5a:	e009      	b.n	8005e70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e5c:	f7fc f93a 	bl	80020d4 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e6a:	d901      	bls.n	8005e70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e007      	b.n	8005e80 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ee      	beq.n	8005e5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d122      	bne.n	8005eec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb6:	f7fc f90d 	bl	80020d4 <HAL_GetTick>
 8005eba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ebc:	e00c      	b.n	8005ed8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ebe:	f7fc f909 	bl	80020d4 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ecc:	d904      	bls.n	8005ed8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d102      	bne.n	8005eec <RTC_EnterInitMode+0x64>
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d1e8      	bne.n	8005ebe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f10:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff89 	bl	8005e38 <HAL_RTC_WaitForSynchro>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2204      	movs	r2, #4
 8005f30:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005f4e:	e005      	b.n	8005f5c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	3301      	adds	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	3b0a      	subs	r3, #10
 8005f5a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	2b09      	cmp	r3, #9
 8005f60:	d8f6      	bhi.n	8005f50 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	b2db      	uxtb	r3, r3
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	4603      	mov	r3, r0
 8005f82:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	091b      	lsrs	r3, r3, #4
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	0092      	lsls	r2, r2, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	b2db      	uxtb	r3, r3
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e041      	b.n	800605c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7fb fe2d 	bl	8001c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f000 fd0d 	bl	8006a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	d001      	beq.n	800607c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e04e      	b.n	800611a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a23      	ldr	r2, [pc, #140]	; (8006128 <HAL_TIM_Base_Start_IT+0xc4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d022      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a6:	d01d      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1f      	ldr	r2, [pc, #124]	; (800612c <HAL_TIM_Base_Start_IT+0xc8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1e      	ldr	r2, [pc, #120]	; (8006130 <HAL_TIM_Base_Start_IT+0xcc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <HAL_TIM_Base_Start_IT+0xd0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1b      	ldr	r2, [pc, #108]	; (8006138 <HAL_TIM_Base_Start_IT+0xd4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a19      	ldr	r2, [pc, #100]	; (800613c <HAL_TIM_Base_Start_IT+0xd8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a18      	ldr	r2, [pc, #96]	; (8006140 <HAL_TIM_Base_Start_IT+0xdc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d111      	bne.n	8006108 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d010      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	e007      	b.n	8006118 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40000c00 	.word	0x40000c00
 8006138:	40010400 	.word	0x40010400
 800613c:	40014000 	.word	0x40014000
 8006140:	40001800 	.word	0x40001800

08006144 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0201 	bic.w	r2, r2, #1
 800615a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a1a      	ldr	r2, [r3, #32]
 8006162:	f241 1311 	movw	r3, #4369	; 0x1111
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10f      	bne.n	800618c <HAL_TIM_Base_Stop_IT+0x48>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6a1a      	ldr	r2, [r3, #32]
 8006172:	f240 4344 	movw	r3, #1092	; 0x444
 8006176:	4013      	ands	r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d107      	bne.n	800618c <HAL_TIM_Base_Stop_IT+0x48>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e041      	b.n	8006238 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7fb fd5f 	bl	8001c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3304      	adds	r3, #4
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f000 fc1f 	bl	8006a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d109      	bne.n	8006264 <HAL_TIM_PWM_Start+0x24>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	e022      	b.n	80062aa <HAL_TIM_PWM_Start+0x6a>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b04      	cmp	r3, #4
 8006268:	d109      	bne.n	800627e <HAL_TIM_PWM_Start+0x3e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b01      	cmp	r3, #1
 8006274:	bf14      	ite	ne
 8006276:	2301      	movne	r3, #1
 8006278:	2300      	moveq	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	e015      	b.n	80062aa <HAL_TIM_PWM_Start+0x6a>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d109      	bne.n	8006298 <HAL_TIM_PWM_Start+0x58>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b01      	cmp	r3, #1
 800628e:	bf14      	ite	ne
 8006290:	2301      	movne	r3, #1
 8006292:	2300      	moveq	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	e008      	b.n	80062aa <HAL_TIM_PWM_Start+0x6a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e07c      	b.n	80063ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_TIM_PWM_Start+0x82>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c0:	e013      	b.n	80062ea <HAL_TIM_PWM_Start+0xaa>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d104      	bne.n	80062d2 <HAL_TIM_PWM_Start+0x92>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d0:	e00b      	b.n	80062ea <HAL_TIM_PWM_Start+0xaa>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d104      	bne.n	80062e2 <HAL_TIM_PWM_Start+0xa2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e0:	e003      	b.n	80062ea <HAL_TIM_PWM_Start+0xaa>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2202      	movs	r2, #2
 80062e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2201      	movs	r2, #1
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fe80 	bl	8006ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a2d      	ldr	r2, [pc, #180]	; (80063b4 <HAL_TIM_PWM_Start+0x174>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <HAL_TIM_PWM_Start+0xcc>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2c      	ldr	r2, [pc, #176]	; (80063b8 <HAL_TIM_PWM_Start+0x178>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d101      	bne.n	8006310 <HAL_TIM_PWM_Start+0xd0>
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <HAL_TIM_PWM_Start+0xd2>
 8006310:	2300      	movs	r3, #0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006324:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a22      	ldr	r2, [pc, #136]	; (80063b4 <HAL_TIM_PWM_Start+0x174>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d022      	beq.n	8006376 <HAL_TIM_PWM_Start+0x136>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006338:	d01d      	beq.n	8006376 <HAL_TIM_PWM_Start+0x136>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1f      	ldr	r2, [pc, #124]	; (80063bc <HAL_TIM_PWM_Start+0x17c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_TIM_PWM_Start+0x136>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1d      	ldr	r2, [pc, #116]	; (80063c0 <HAL_TIM_PWM_Start+0x180>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_TIM_PWM_Start+0x136>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1c      	ldr	r2, [pc, #112]	; (80063c4 <HAL_TIM_PWM_Start+0x184>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_TIM_PWM_Start+0x136>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <HAL_TIM_PWM_Start+0x178>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_TIM_PWM_Start+0x136>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <HAL_TIM_PWM_Start+0x188>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_TIM_PWM_Start+0x136>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a16      	ldr	r2, [pc, #88]	; (80063cc <HAL_TIM_PWM_Start+0x18c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d111      	bne.n	800639a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b06      	cmp	r3, #6
 8006386:	d010      	beq.n	80063aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006398:	e007      	b.n	80063aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40010400 	.word	0x40010400
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40000800 	.word	0x40000800
 80063c4:	40000c00 	.word	0x40000c00
 80063c8:	40014000 	.word	0x40014000
 80063cc:	40001800 	.word	0x40001800

080063d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2200      	movs	r2, #0
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fe08 	bl	8006ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2e      	ldr	r2, [pc, #184]	; (80064a8 <HAL_TIM_PWM_Stop+0xd8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <HAL_TIM_PWM_Stop+0x2c>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2d      	ldr	r2, [pc, #180]	; (80064ac <HAL_TIM_PWM_Stop+0xdc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d101      	bne.n	8006400 <HAL_TIM_PWM_Stop+0x30>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <HAL_TIM_PWM_Stop+0x32>
 8006400:	2300      	movs	r3, #0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d017      	beq.n	8006436 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006410:	4013      	ands	r3, r2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10f      	bne.n	8006436 <HAL_TIM_PWM_Stop+0x66>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6a1a      	ldr	r2, [r3, #32]
 800641c:	f240 4344 	movw	r3, #1092	; 0x444
 8006420:	4013      	ands	r3, r2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <HAL_TIM_PWM_Stop+0x66>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006434:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6a1a      	ldr	r2, [r3, #32]
 800643c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006440:	4013      	ands	r3, r2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <HAL_TIM_PWM_Stop+0x96>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	f240 4344 	movw	r3, #1092	; 0x444
 8006450:	4013      	ands	r3, r2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <HAL_TIM_PWM_Stop+0x96>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0201 	bic.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <HAL_TIM_PWM_Stop+0xa6>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006474:	e013      	b.n	800649e <HAL_TIM_PWM_Stop+0xce>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d104      	bne.n	8006486 <HAL_TIM_PWM_Stop+0xb6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006484:	e00b      	b.n	800649e <HAL_TIM_PWM_Stop+0xce>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d104      	bne.n	8006496 <HAL_TIM_PWM_Stop+0xc6>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006494:	e003      	b.n	800649e <HAL_TIM_PWM_Stop+0xce>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40010400 	.word	0x40010400

080064b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d122      	bne.n	800650c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d11b      	bne.n	800650c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0202 	mvn.w	r2, #2
 80064dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa77 	bl	80069e6 <HAL_TIM_IC_CaptureCallback>
 80064f8:	e005      	b.n	8006506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa69 	bl	80069d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fa7a 	bl	80069fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b04      	cmp	r3, #4
 8006518:	d122      	bne.n	8006560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d11b      	bne.n	8006560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0204 	mvn.w	r2, #4
 8006530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa4d 	bl	80069e6 <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa3f 	bl	80069d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa50 	bl	80069fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b08      	cmp	r3, #8
 800656c:	d122      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b08      	cmp	r3, #8
 800657a:	d11b      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0208 	mvn.w	r2, #8
 8006584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2204      	movs	r2, #4
 800658a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa23 	bl	80069e6 <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa15 	bl	80069d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa26 	bl	80069fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d122      	bne.n	8006608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d11b      	bne.n	8006608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0210 	mvn.w	r2, #16
 80065d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2208      	movs	r2, #8
 80065de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f9f9 	bl	80069e6 <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f9eb 	bl	80069d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f9fc 	bl	80069fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	d10e      	bne.n	8006634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	d107      	bne.n	8006634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0201 	mvn.w	r2, #1
 800662c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fb f888 	bl	8001744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	2b80      	cmp	r3, #128	; 0x80
 8006640:	d10e      	bne.n	8006660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664c:	2b80      	cmp	r3, #128	; 0x80
 800664e:	d107      	bne.n	8006660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fd78 	bl	8007150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d10e      	bne.n	800668c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d107      	bne.n	800668c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f9c1 	bl	8006a0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b20      	cmp	r3, #32
 8006698:	d10e      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d107      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0220 	mvn.w	r2, #32
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fd42 	bl	800713c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066da:	2302      	movs	r3, #2
 80066dc:	e0ae      	b.n	800683c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b0c      	cmp	r3, #12
 80066ea:	f200 809f 	bhi.w	800682c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006729 	.word	0x08006729
 80066f8:	0800682d 	.word	0x0800682d
 80066fc:	0800682d 	.word	0x0800682d
 8006700:	0800682d 	.word	0x0800682d
 8006704:	08006769 	.word	0x08006769
 8006708:	0800682d 	.word	0x0800682d
 800670c:	0800682d 	.word	0x0800682d
 8006710:	0800682d 	.word	0x0800682d
 8006714:	080067ab 	.word	0x080067ab
 8006718:	0800682d 	.word	0x0800682d
 800671c:	0800682d 	.word	0x0800682d
 8006720:	0800682d 	.word	0x0800682d
 8006724:	080067eb 	.word	0x080067eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fa18 	bl	8006b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0208 	orr.w	r2, r2, #8
 8006742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0204 	bic.w	r2, r2, #4
 8006752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6999      	ldr	r1, [r3, #24]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	619a      	str	r2, [r3, #24]
      break;
 8006766:	e064      	b.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fa68 	bl	8006c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6999      	ldr	r1, [r3, #24]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	619a      	str	r2, [r3, #24]
      break;
 80067a8:	e043      	b.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fabd 	bl	8006d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0208 	orr.w	r2, r2, #8
 80067c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0204 	bic.w	r2, r2, #4
 80067d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69d9      	ldr	r1, [r3, #28]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	61da      	str	r2, [r3, #28]
      break;
 80067e8:	e023      	b.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fb11 	bl	8006e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69da      	ldr	r2, [r3, #28]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69d9      	ldr	r1, [r3, #28]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	021a      	lsls	r2, r3, #8
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	61da      	str	r2, [r3, #28]
      break;
 800682a:	e002      	b.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	75fb      	strb	r3, [r7, #23]
      break;
 8006830:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_TIM_ConfigClockSource+0x1c>
 800685c:	2302      	movs	r3, #2
 800685e:	e0b4      	b.n	80069ca <HAL_TIM_ConfigClockSource+0x186>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800687e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006898:	d03e      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0xd4>
 800689a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689e:	f200 8087 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a6:	f000 8086 	beq.w	80069b6 <HAL_TIM_ConfigClockSource+0x172>
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	d87f      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068b0:	2b70      	cmp	r3, #112	; 0x70
 80068b2:	d01a      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0xa6>
 80068b4:	2b70      	cmp	r3, #112	; 0x70
 80068b6:	d87b      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068b8:	2b60      	cmp	r3, #96	; 0x60
 80068ba:	d050      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x11a>
 80068bc:	2b60      	cmp	r3, #96	; 0x60
 80068be:	d877      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c0:	2b50      	cmp	r3, #80	; 0x50
 80068c2:	d03c      	beq.n	800693e <HAL_TIM_ConfigClockSource+0xfa>
 80068c4:	2b50      	cmp	r3, #80	; 0x50
 80068c6:	d873      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	d058      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x13a>
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	d86f      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d0:	2b30      	cmp	r3, #48	; 0x30
 80068d2:	d064      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x15a>
 80068d4:	2b30      	cmp	r3, #48	; 0x30
 80068d6:	d86b      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d060      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x15a>
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d867      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05c      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x15a>
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d05a      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x15a>
 80068e8:	e062      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6899      	ldr	r1, [r3, #8]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f000 fb5d 	bl	8006fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800690c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	609a      	str	r2, [r3, #8]
      break;
 8006916:	e04f      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6899      	ldr	r1, [r3, #8]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f000 fb46 	bl	8006fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800693a:	609a      	str	r2, [r3, #8]
      break;
 800693c:	e03c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6859      	ldr	r1, [r3, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	461a      	mov	r2, r3
 800694c:	f000 faba 	bl	8006ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2150      	movs	r1, #80	; 0x50
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fb13 	bl	8006f82 <TIM_ITRx_SetConfig>
      break;
 800695c:	e02c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6859      	ldr	r1, [r3, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	461a      	mov	r2, r3
 800696c:	f000 fad9 	bl	8006f22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2160      	movs	r1, #96	; 0x60
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fb03 	bl	8006f82 <TIM_ITRx_SetConfig>
      break;
 800697c:	e01c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	6859      	ldr	r1, [r3, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	461a      	mov	r2, r3
 800698c:	f000 fa9a 	bl	8006ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2140      	movs	r1, #64	; 0x40
 8006996:	4618      	mov	r0, r3
 8006998:	f000 faf3 	bl	8006f82 <TIM_ITRx_SetConfig>
      break;
 800699c:	e00c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f000 faea 	bl	8006f82 <TIM_ITRx_SetConfig>
      break;
 80069ae:	e003      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
      break;
 80069b4:	e000      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a40      	ldr	r2, [pc, #256]	; (8006b38 <TIM_Base_SetConfig+0x114>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a42:	d00f      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a3d      	ldr	r2, [pc, #244]	; (8006b3c <TIM_Base_SetConfig+0x118>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00b      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a3c      	ldr	r2, [pc, #240]	; (8006b40 <TIM_Base_SetConfig+0x11c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d007      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a3b      	ldr	r2, [pc, #236]	; (8006b44 <TIM_Base_SetConfig+0x120>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d003      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a3a      	ldr	r2, [pc, #232]	; (8006b48 <TIM_Base_SetConfig+0x124>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d108      	bne.n	8006a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a2f      	ldr	r2, [pc, #188]	; (8006b38 <TIM_Base_SetConfig+0x114>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d02b      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a84:	d027      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2c      	ldr	r2, [pc, #176]	; (8006b3c <TIM_Base_SetConfig+0x118>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d023      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a2b      	ldr	r2, [pc, #172]	; (8006b40 <TIM_Base_SetConfig+0x11c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d01f      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a2a      	ldr	r2, [pc, #168]	; (8006b44 <TIM_Base_SetConfig+0x120>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d01b      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a29      	ldr	r2, [pc, #164]	; (8006b48 <TIM_Base_SetConfig+0x124>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d017      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a28      	ldr	r2, [pc, #160]	; (8006b4c <TIM_Base_SetConfig+0x128>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d013      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a27      	ldr	r2, [pc, #156]	; (8006b50 <TIM_Base_SetConfig+0x12c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00f      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a26      	ldr	r2, [pc, #152]	; (8006b54 <TIM_Base_SetConfig+0x130>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00b      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a25      	ldr	r2, [pc, #148]	; (8006b58 <TIM_Base_SetConfig+0x134>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d007      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <TIM_Base_SetConfig+0x138>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d003      	beq.n	8006ad6 <TIM_Base_SetConfig+0xb2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <TIM_Base_SetConfig+0x13c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d108      	bne.n	8006ae8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a0a      	ldr	r2, [pc, #40]	; (8006b38 <TIM_Base_SetConfig+0x114>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_Base_SetConfig+0xf8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a0c      	ldr	r2, [pc, #48]	; (8006b48 <TIM_Base_SetConfig+0x124>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d103      	bne.n	8006b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	615a      	str	r2, [r3, #20]
}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40000800 	.word	0x40000800
 8006b44:	40000c00 	.word	0x40000c00
 8006b48:	40010400 	.word	0x40010400
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40014400 	.word	0x40014400
 8006b54:	40014800 	.word	0x40014800
 8006b58:	40001800 	.word	0x40001800
 8006b5c:	40001c00 	.word	0x40001c00
 8006b60:	40002000 	.word	0x40002000

08006b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0201 	bic.w	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0303 	bic.w	r3, r3, #3
 8006b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f023 0302 	bic.w	r3, r3, #2
 8006bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <TIM_OC1_SetConfig+0xd8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_OC1_SetConfig+0x64>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <TIM_OC1_SetConfig+0xdc>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d10c      	bne.n	8006be2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 0308 	bic.w	r3, r3, #8
 8006bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f023 0304 	bic.w	r3, r3, #4
 8006be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a15      	ldr	r2, [pc, #84]	; (8006c3c <TIM_OC1_SetConfig+0xd8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <TIM_OC1_SetConfig+0x8e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <TIM_OC1_SetConfig+0xdc>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d111      	bne.n	8006c16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	40010000 	.word	0x40010000
 8006c40:	40010400 	.word	0x40010400

08006c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0210 	bic.w	r2, r3, #16
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0320 	bic.w	r3, r3, #32
 8006c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a22      	ldr	r2, [pc, #136]	; (8006d28 <TIM_OC2_SetConfig+0xe4>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d003      	beq.n	8006cac <TIM_OC2_SetConfig+0x68>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a21      	ldr	r2, [pc, #132]	; (8006d2c <TIM_OC2_SetConfig+0xe8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d10d      	bne.n	8006cc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <TIM_OC2_SetConfig+0xe4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_OC2_SetConfig+0x94>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a16      	ldr	r2, [pc, #88]	; (8006d2c <TIM_OC2_SetConfig+0xe8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d113      	bne.n	8006d00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	40010000 	.word	0x40010000
 8006d2c:	40010400 	.word	0x40010400

08006d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <TIM_OC3_SetConfig+0xe0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_OC3_SetConfig+0x66>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a20      	ldr	r2, [pc, #128]	; (8006e14 <TIM_OC3_SetConfig+0xe4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10d      	bne.n	8006db2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <TIM_OC3_SetConfig+0xe0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d003      	beq.n	8006dc2 <TIM_OC3_SetConfig+0x92>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <TIM_OC3_SetConfig+0xe4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d113      	bne.n	8006dea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	621a      	str	r2, [r3, #32]
}
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40010400 	.word	0x40010400

08006e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	031b      	lsls	r3, r3, #12
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <TIM_OC4_SetConfig+0xa4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_OC4_SetConfig+0x68>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a11      	ldr	r2, [pc, #68]	; (8006ec0 <TIM_OC4_SetConfig+0xa8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d109      	bne.n	8006e94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	019b      	lsls	r3, r3, #6
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40010000 	.word	0x40010000
 8006ec0:	40010400 	.word	0x40010400

08006ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0201 	bic.w	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f023 030a 	bic.w	r3, r3, #10
 8006f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b087      	sub	sp, #28
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0210 	bic.w	r2, r3, #16
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	031b      	lsls	r3, r3, #12
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f043 0307 	orr.w	r3, r3, #7
 8006fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	609a      	str	r2, [r3, #8]
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	021a      	lsls	r2, r3, #8
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	609a      	str	r2, [r3, #8]
}
 8006fec:	bf00      	nop
 8006fee:	371c      	adds	r7, #28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2201      	movs	r2, #1
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a1a      	ldr	r2, [r3, #32]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	43db      	mvns	r3, r3
 800701a:	401a      	ands	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a1a      	ldr	r2, [r3, #32]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 031f 	and.w	r3, r3, #31
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	fa01 f303 	lsl.w	r3, r1, r3
 8007030:	431a      	orrs	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007058:	2302      	movs	r3, #2
 800705a:	e05a      	b.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a21      	ldr	r2, [pc, #132]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d022      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a8:	d01d      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d018      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1a      	ldr	r2, [pc, #104]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00e      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a18      	ldr	r2, [pc, #96]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d009      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a17      	ldr	r2, [pc, #92]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d004      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a15      	ldr	r2, [pc, #84]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d10c      	bne.n	8007100 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40010000 	.word	0x40010000
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40000c00 	.word	0x40000c00
 8007130:	40010400 	.word	0x40010400
 8007134:	40014000 	.word	0x40014000
 8007138:	40001800 	.word	0x40001800

0800713c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e03f      	b.n	80071f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fa fdda 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2224      	movs	r2, #36	; 0x24
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f929 	bl	8007400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695a      	ldr	r2, [r3, #20]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b08a      	sub	sp, #40	; 0x28
 8007202:	af02      	add	r7, sp, #8
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	603b      	str	r3, [r7, #0]
 800720a:	4613      	mov	r3, r2
 800720c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b20      	cmp	r3, #32
 800721c:	d17c      	bne.n	8007318 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <HAL_UART_Transmit+0x2c>
 8007224:	88fb      	ldrh	r3, [r7, #6]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e075      	b.n	800731a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_UART_Transmit+0x3e>
 8007238:	2302      	movs	r3, #2
 800723a:	e06e      	b.n	800731a <HAL_UART_Transmit+0x11c>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2221      	movs	r2, #33	; 0x21
 800724e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007252:	f7fa ff3f 	bl	80020d4 <HAL_GetTick>
 8007256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726c:	d108      	bne.n	8007280 <HAL_UART_Transmit+0x82>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d104      	bne.n	8007280 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	e003      	b.n	8007288 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007290:	e02a      	b.n	80072e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2200      	movs	r2, #0
 800729a:	2180      	movs	r1, #128	; 0x80
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f840 	bl	8007322 <UART_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e036      	b.n	800731a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10b      	bne.n	80072ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	3302      	adds	r3, #2
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	e007      	b.n	80072da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	781a      	ldrb	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	3301      	adds	r3, #1
 80072d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1cf      	bne.n	8007292 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	2140      	movs	r1, #64	; 0x40
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 f810 	bl	8007322 <UART_WaitOnFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e006      	b.n	800731a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	e000      	b.n	800731a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007318:	2302      	movs	r3, #2
  }
}
 800731a:	4618      	mov	r0, r3
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b090      	sub	sp, #64	; 0x40
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	4613      	mov	r3, r2
 8007330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007332:	e050      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d04c      	beq.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800733c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <UART_WaitOnFlagUntilTimeout+0x30>
 8007342:	f7fa fec7 	bl	80020d4 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800734e:	429a      	cmp	r2, r3
 8007350:	d241      	bcs.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	330c      	adds	r3, #12
 8007358:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007372:	637a      	str	r2, [r7, #52]	; 0x34
 8007374:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3314      	adds	r3, #20
 800738c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	613b      	str	r3, [r7, #16]
   return(result);
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	63bb      	str	r3, [r7, #56]	; 0x38
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3314      	adds	r3, #20
 80073a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a6:	623a      	str	r2, [r7, #32]
 80073a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	69f9      	ldr	r1, [r7, #28]
 80073ac:	6a3a      	ldr	r2, [r7, #32]
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e5      	bne.n	8007386 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e00f      	b.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4013      	ands	r3, r2
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	bf0c      	ite	eq
 80073e6:	2301      	moveq	r3, #1
 80073e8:	2300      	movne	r3, #0
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d09f      	beq.n	8007334 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3740      	adds	r7, #64	; 0x40
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007404:	b0c0      	sub	sp, #256	; 0x100
 8007406:	af00      	add	r7, sp, #0
 8007408:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800740c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741c:	68d9      	ldr	r1, [r3, #12]
 800741e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	ea40 0301 	orr.w	r3, r0, r1
 8007428:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	431a      	orrs	r2, r3
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	431a      	orrs	r2, r3
 8007440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007458:	f021 010c 	bic.w	r1, r1, #12
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007466:	430b      	orrs	r3, r1
 8007468:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800746a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747a:	6999      	ldr	r1, [r3, #24]
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	ea40 0301 	orr.w	r3, r0, r1
 8007486:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	4b8f      	ldr	r3, [pc, #572]	; (80076cc <UART_SetConfig+0x2cc>)
 8007490:	429a      	cmp	r2, r3
 8007492:	d005      	beq.n	80074a0 <UART_SetConfig+0xa0>
 8007494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4b8d      	ldr	r3, [pc, #564]	; (80076d0 <UART_SetConfig+0x2d0>)
 800749c:	429a      	cmp	r2, r3
 800749e:	d104      	bne.n	80074aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074a0:	f7fd fe9c 	bl	80051dc <HAL_RCC_GetPCLK2Freq>
 80074a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80074a8:	e003      	b.n	80074b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074aa:	f7fd fe83 	bl	80051b4 <HAL_RCC_GetPCLK1Freq>
 80074ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074bc:	f040 810c 	bne.w	80076d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80074d2:	4622      	mov	r2, r4
 80074d4:	462b      	mov	r3, r5
 80074d6:	1891      	adds	r1, r2, r2
 80074d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80074da:	415b      	adcs	r3, r3
 80074dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074e2:	4621      	mov	r1, r4
 80074e4:	eb12 0801 	adds.w	r8, r2, r1
 80074e8:	4629      	mov	r1, r5
 80074ea:	eb43 0901 	adc.w	r9, r3, r1
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007502:	4690      	mov	r8, r2
 8007504:	4699      	mov	r9, r3
 8007506:	4623      	mov	r3, r4
 8007508:	eb18 0303 	adds.w	r3, r8, r3
 800750c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007510:	462b      	mov	r3, r5
 8007512:	eb49 0303 	adc.w	r3, r9, r3
 8007516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800751a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007526:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800752a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800752e:	460b      	mov	r3, r1
 8007530:	18db      	adds	r3, r3, r3
 8007532:	653b      	str	r3, [r7, #80]	; 0x50
 8007534:	4613      	mov	r3, r2
 8007536:	eb42 0303 	adc.w	r3, r2, r3
 800753a:	657b      	str	r3, [r7, #84]	; 0x54
 800753c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007540:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007544:	f7f8 feac 	bl	80002a0 <__aeabi_uldivmod>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4b61      	ldr	r3, [pc, #388]	; (80076d4 <UART_SetConfig+0x2d4>)
 800754e:	fba3 2302 	umull	r2, r3, r3, r2
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	011c      	lsls	r4, r3, #4
 8007556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800755a:	2200      	movs	r2, #0
 800755c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007560:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007564:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007568:	4642      	mov	r2, r8
 800756a:	464b      	mov	r3, r9
 800756c:	1891      	adds	r1, r2, r2
 800756e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007570:	415b      	adcs	r3, r3
 8007572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007574:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007578:	4641      	mov	r1, r8
 800757a:	eb12 0a01 	adds.w	sl, r2, r1
 800757e:	4649      	mov	r1, r9
 8007580:	eb43 0b01 	adc.w	fp, r3, r1
 8007584:	f04f 0200 	mov.w	r2, #0
 8007588:	f04f 0300 	mov.w	r3, #0
 800758c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007590:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007594:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007598:	4692      	mov	sl, r2
 800759a:	469b      	mov	fp, r3
 800759c:	4643      	mov	r3, r8
 800759e:	eb1a 0303 	adds.w	r3, sl, r3
 80075a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075a6:	464b      	mov	r3, r9
 80075a8:	eb4b 0303 	adc.w	r3, fp, r3
 80075ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80075c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075c4:	460b      	mov	r3, r1
 80075c6:	18db      	adds	r3, r3, r3
 80075c8:	643b      	str	r3, [r7, #64]	; 0x40
 80075ca:	4613      	mov	r3, r2
 80075cc:	eb42 0303 	adc.w	r3, r2, r3
 80075d0:	647b      	str	r3, [r7, #68]	; 0x44
 80075d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075da:	f7f8 fe61 	bl	80002a0 <__aeabi_uldivmod>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	4b3b      	ldr	r3, [pc, #236]	; (80076d4 <UART_SetConfig+0x2d4>)
 80075e6:	fba3 2301 	umull	r2, r3, r3, r1
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	2264      	movs	r2, #100	; 0x64
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
 80075f2:	1acb      	subs	r3, r1, r3
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075fa:	4b36      	ldr	r3, [pc, #216]	; (80076d4 <UART_SetConfig+0x2d4>)
 80075fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007608:	441c      	add	r4, r3
 800760a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800760e:	2200      	movs	r2, #0
 8007610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007614:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007618:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800761c:	4642      	mov	r2, r8
 800761e:	464b      	mov	r3, r9
 8007620:	1891      	adds	r1, r2, r2
 8007622:	63b9      	str	r1, [r7, #56]	; 0x38
 8007624:	415b      	adcs	r3, r3
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007628:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800762c:	4641      	mov	r1, r8
 800762e:	1851      	adds	r1, r2, r1
 8007630:	6339      	str	r1, [r7, #48]	; 0x30
 8007632:	4649      	mov	r1, r9
 8007634:	414b      	adcs	r3, r1
 8007636:	637b      	str	r3, [r7, #52]	; 0x34
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007644:	4659      	mov	r1, fp
 8007646:	00cb      	lsls	r3, r1, #3
 8007648:	4651      	mov	r1, sl
 800764a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800764e:	4651      	mov	r1, sl
 8007650:	00ca      	lsls	r2, r1, #3
 8007652:	4610      	mov	r0, r2
 8007654:	4619      	mov	r1, r3
 8007656:	4603      	mov	r3, r0
 8007658:	4642      	mov	r2, r8
 800765a:	189b      	adds	r3, r3, r2
 800765c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007660:	464b      	mov	r3, r9
 8007662:	460a      	mov	r2, r1
 8007664:	eb42 0303 	adc.w	r3, r2, r3
 8007668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007678:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800767c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007680:	460b      	mov	r3, r1
 8007682:	18db      	adds	r3, r3, r3
 8007684:	62bb      	str	r3, [r7, #40]	; 0x28
 8007686:	4613      	mov	r3, r2
 8007688:	eb42 0303 	adc.w	r3, r2, r3
 800768c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800768e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007692:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007696:	f7f8 fe03 	bl	80002a0 <__aeabi_uldivmod>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <UART_SetConfig+0x2d4>)
 80076a0:	fba3 1302 	umull	r1, r3, r3, r2
 80076a4:	095b      	lsrs	r3, r3, #5
 80076a6:	2164      	movs	r1, #100	; 0x64
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	3332      	adds	r3, #50	; 0x32
 80076b2:	4a08      	ldr	r2, [pc, #32]	; (80076d4 <UART_SetConfig+0x2d4>)
 80076b4:	fba2 2303 	umull	r2, r3, r2, r3
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	f003 0207 	and.w	r2, r3, #7
 80076be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4422      	add	r2, r4
 80076c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076c8:	e106      	b.n	80078d8 <UART_SetConfig+0x4d8>
 80076ca:	bf00      	nop
 80076cc:	40011000 	.word	0x40011000
 80076d0:	40011400 	.word	0x40011400
 80076d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076ea:	4642      	mov	r2, r8
 80076ec:	464b      	mov	r3, r9
 80076ee:	1891      	adds	r1, r2, r2
 80076f0:	6239      	str	r1, [r7, #32]
 80076f2:	415b      	adcs	r3, r3
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
 80076f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076fa:	4641      	mov	r1, r8
 80076fc:	1854      	adds	r4, r2, r1
 80076fe:	4649      	mov	r1, r9
 8007700:	eb43 0501 	adc.w	r5, r3, r1
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	00eb      	lsls	r3, r5, #3
 800770e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007712:	00e2      	lsls	r2, r4, #3
 8007714:	4614      	mov	r4, r2
 8007716:	461d      	mov	r5, r3
 8007718:	4643      	mov	r3, r8
 800771a:	18e3      	adds	r3, r4, r3
 800771c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007720:	464b      	mov	r3, r9
 8007722:	eb45 0303 	adc.w	r3, r5, r3
 8007726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800772a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007736:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007746:	4629      	mov	r1, r5
 8007748:	008b      	lsls	r3, r1, #2
 800774a:	4621      	mov	r1, r4
 800774c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007750:	4621      	mov	r1, r4
 8007752:	008a      	lsls	r2, r1, #2
 8007754:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007758:	f7f8 fda2 	bl	80002a0 <__aeabi_uldivmod>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4b60      	ldr	r3, [pc, #384]	; (80078e4 <UART_SetConfig+0x4e4>)
 8007762:	fba3 2302 	umull	r2, r3, r3, r2
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	011c      	lsls	r4, r3, #4
 800776a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800776e:	2200      	movs	r2, #0
 8007770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007774:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007778:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800777c:	4642      	mov	r2, r8
 800777e:	464b      	mov	r3, r9
 8007780:	1891      	adds	r1, r2, r2
 8007782:	61b9      	str	r1, [r7, #24]
 8007784:	415b      	adcs	r3, r3
 8007786:	61fb      	str	r3, [r7, #28]
 8007788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800778c:	4641      	mov	r1, r8
 800778e:	1851      	adds	r1, r2, r1
 8007790:	6139      	str	r1, [r7, #16]
 8007792:	4649      	mov	r1, r9
 8007794:	414b      	adcs	r3, r1
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077a4:	4659      	mov	r1, fp
 80077a6:	00cb      	lsls	r3, r1, #3
 80077a8:	4651      	mov	r1, sl
 80077aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ae:	4651      	mov	r1, sl
 80077b0:	00ca      	lsls	r2, r1, #3
 80077b2:	4610      	mov	r0, r2
 80077b4:	4619      	mov	r1, r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	4642      	mov	r2, r8
 80077ba:	189b      	adds	r3, r3, r2
 80077bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077c0:	464b      	mov	r3, r9
 80077c2:	460a      	mov	r2, r1
 80077c4:	eb42 0303 	adc.w	r3, r2, r3
 80077c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80077d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077e4:	4649      	mov	r1, r9
 80077e6:	008b      	lsls	r3, r1, #2
 80077e8:	4641      	mov	r1, r8
 80077ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ee:	4641      	mov	r1, r8
 80077f0:	008a      	lsls	r2, r1, #2
 80077f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077f6:	f7f8 fd53 	bl	80002a0 <__aeabi_uldivmod>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4611      	mov	r1, r2
 8007800:	4b38      	ldr	r3, [pc, #224]	; (80078e4 <UART_SetConfig+0x4e4>)
 8007802:	fba3 2301 	umull	r2, r3, r3, r1
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	2264      	movs	r2, #100	; 0x64
 800780a:	fb02 f303 	mul.w	r3, r2, r3
 800780e:	1acb      	subs	r3, r1, r3
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	3332      	adds	r3, #50	; 0x32
 8007814:	4a33      	ldr	r2, [pc, #204]	; (80078e4 <UART_SetConfig+0x4e4>)
 8007816:	fba2 2303 	umull	r2, r3, r2, r3
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007820:	441c      	add	r4, r3
 8007822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007826:	2200      	movs	r2, #0
 8007828:	673b      	str	r3, [r7, #112]	; 0x70
 800782a:	677a      	str	r2, [r7, #116]	; 0x74
 800782c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	1891      	adds	r1, r2, r2
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	415b      	adcs	r3, r3
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007840:	4641      	mov	r1, r8
 8007842:	1851      	adds	r1, r2, r1
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	4649      	mov	r1, r9
 8007848:	414b      	adcs	r3, r1
 800784a:	607b      	str	r3, [r7, #4]
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007858:	4659      	mov	r1, fp
 800785a:	00cb      	lsls	r3, r1, #3
 800785c:	4651      	mov	r1, sl
 800785e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007862:	4651      	mov	r1, sl
 8007864:	00ca      	lsls	r2, r1, #3
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	4603      	mov	r3, r0
 800786c:	4642      	mov	r2, r8
 800786e:	189b      	adds	r3, r3, r2
 8007870:	66bb      	str	r3, [r7, #104]	; 0x68
 8007872:	464b      	mov	r3, r9
 8007874:	460a      	mov	r2, r1
 8007876:	eb42 0303 	adc.w	r3, r2, r3
 800787a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800787c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	663b      	str	r3, [r7, #96]	; 0x60
 8007886:	667a      	str	r2, [r7, #100]	; 0x64
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007894:	4649      	mov	r1, r9
 8007896:	008b      	lsls	r3, r1, #2
 8007898:	4641      	mov	r1, r8
 800789a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800789e:	4641      	mov	r1, r8
 80078a0:	008a      	lsls	r2, r1, #2
 80078a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80078a6:	f7f8 fcfb 	bl	80002a0 <__aeabi_uldivmod>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <UART_SetConfig+0x4e4>)
 80078b0:	fba3 1302 	umull	r1, r3, r3, r2
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	2164      	movs	r1, #100	; 0x64
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	3332      	adds	r3, #50	; 0x32
 80078c2:	4a08      	ldr	r2, [pc, #32]	; (80078e4 <UART_SetConfig+0x4e4>)
 80078c4:	fba2 2303 	umull	r2, r3, r2, r3
 80078c8:	095b      	lsrs	r3, r3, #5
 80078ca:	f003 020f 	and.w	r2, r3, #15
 80078ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4422      	add	r2, r4
 80078d6:	609a      	str	r2, [r3, #8]
}
 80078d8:	bf00      	nop
 80078da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078de:	46bd      	mov	sp, r7
 80078e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078e4:	51eb851f 	.word	0x51eb851f

080078e8 <std>:
 80078e8:	2300      	movs	r3, #0
 80078ea:	b510      	push	{r4, lr}
 80078ec:	4604      	mov	r4, r0
 80078ee:	e9c0 3300 	strd	r3, r3, [r0]
 80078f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078f6:	6083      	str	r3, [r0, #8]
 80078f8:	8181      	strh	r1, [r0, #12]
 80078fa:	6643      	str	r3, [r0, #100]	; 0x64
 80078fc:	81c2      	strh	r2, [r0, #14]
 80078fe:	6183      	str	r3, [r0, #24]
 8007900:	4619      	mov	r1, r3
 8007902:	2208      	movs	r2, #8
 8007904:	305c      	adds	r0, #92	; 0x5c
 8007906:	f000 fa4b 	bl	8007da0 <memset>
 800790a:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <std+0x58>)
 800790c:	6263      	str	r3, [r4, #36]	; 0x24
 800790e:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <std+0x5c>)
 8007910:	62a3      	str	r3, [r4, #40]	; 0x28
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <std+0x60>)
 8007914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007916:	4b0d      	ldr	r3, [pc, #52]	; (800794c <std+0x64>)
 8007918:	6323      	str	r3, [r4, #48]	; 0x30
 800791a:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <std+0x68>)
 800791c:	6224      	str	r4, [r4, #32]
 800791e:	429c      	cmp	r4, r3
 8007920:	d006      	beq.n	8007930 <std+0x48>
 8007922:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007926:	4294      	cmp	r4, r2
 8007928:	d002      	beq.n	8007930 <std+0x48>
 800792a:	33d0      	adds	r3, #208	; 0xd0
 800792c:	429c      	cmp	r4, r3
 800792e:	d105      	bne.n	800793c <std+0x54>
 8007930:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007938:	f000 baaa 	b.w	8007e90 <__retarget_lock_init_recursive>
 800793c:	bd10      	pop	{r4, pc}
 800793e:	bf00      	nop
 8007940:	08007bf1 	.word	0x08007bf1
 8007944:	08007c13 	.word	0x08007c13
 8007948:	08007c4b 	.word	0x08007c4b
 800794c:	08007c6f 	.word	0x08007c6f
 8007950:	2000079c 	.word	0x2000079c

08007954 <stdio_exit_handler>:
 8007954:	4a02      	ldr	r2, [pc, #8]	; (8007960 <stdio_exit_handler+0xc>)
 8007956:	4903      	ldr	r1, [pc, #12]	; (8007964 <stdio_exit_handler+0x10>)
 8007958:	4803      	ldr	r0, [pc, #12]	; (8007968 <stdio_exit_handler+0x14>)
 800795a:	f000 b869 	b.w	8007a30 <_fwalk_sglue>
 800795e:	bf00      	nop
 8007960:	20000244 	.word	0x20000244
 8007964:	080089ed 	.word	0x080089ed
 8007968:	20000250 	.word	0x20000250

0800796c <cleanup_stdio>:
 800796c:	6841      	ldr	r1, [r0, #4]
 800796e:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <cleanup_stdio+0x34>)
 8007970:	4299      	cmp	r1, r3
 8007972:	b510      	push	{r4, lr}
 8007974:	4604      	mov	r4, r0
 8007976:	d001      	beq.n	800797c <cleanup_stdio+0x10>
 8007978:	f001 f838 	bl	80089ec <_fflush_r>
 800797c:	68a1      	ldr	r1, [r4, #8]
 800797e:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <cleanup_stdio+0x38>)
 8007980:	4299      	cmp	r1, r3
 8007982:	d002      	beq.n	800798a <cleanup_stdio+0x1e>
 8007984:	4620      	mov	r0, r4
 8007986:	f001 f831 	bl	80089ec <_fflush_r>
 800798a:	68e1      	ldr	r1, [r4, #12]
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <cleanup_stdio+0x3c>)
 800798e:	4299      	cmp	r1, r3
 8007990:	d004      	beq.n	800799c <cleanup_stdio+0x30>
 8007992:	4620      	mov	r0, r4
 8007994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007998:	f001 b828 	b.w	80089ec <_fflush_r>
 800799c:	bd10      	pop	{r4, pc}
 800799e:	bf00      	nop
 80079a0:	2000079c 	.word	0x2000079c
 80079a4:	20000804 	.word	0x20000804
 80079a8:	2000086c 	.word	0x2000086c

080079ac <global_stdio_init.part.0>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <global_stdio_init.part.0+0x30>)
 80079b0:	4c0b      	ldr	r4, [pc, #44]	; (80079e0 <global_stdio_init.part.0+0x34>)
 80079b2:	4a0c      	ldr	r2, [pc, #48]	; (80079e4 <global_stdio_init.part.0+0x38>)
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	4620      	mov	r0, r4
 80079b8:	2200      	movs	r2, #0
 80079ba:	2104      	movs	r1, #4
 80079bc:	f7ff ff94 	bl	80078e8 <std>
 80079c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80079c4:	2201      	movs	r2, #1
 80079c6:	2109      	movs	r1, #9
 80079c8:	f7ff ff8e 	bl	80078e8 <std>
 80079cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80079d0:	2202      	movs	r2, #2
 80079d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d6:	2112      	movs	r1, #18
 80079d8:	f7ff bf86 	b.w	80078e8 <std>
 80079dc:	200008d4 	.word	0x200008d4
 80079e0:	2000079c 	.word	0x2000079c
 80079e4:	08007955 	.word	0x08007955

080079e8 <__sfp_lock_acquire>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__sfp_lock_acquire+0x8>)
 80079ea:	f000 ba52 	b.w	8007e92 <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	200008dd 	.word	0x200008dd

080079f4 <__sfp_lock_release>:
 80079f4:	4801      	ldr	r0, [pc, #4]	; (80079fc <__sfp_lock_release+0x8>)
 80079f6:	f000 ba4d 	b.w	8007e94 <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	200008dd 	.word	0x200008dd

08007a00 <__sinit>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	4604      	mov	r4, r0
 8007a04:	f7ff fff0 	bl	80079e8 <__sfp_lock_acquire>
 8007a08:	6a23      	ldr	r3, [r4, #32]
 8007a0a:	b11b      	cbz	r3, 8007a14 <__sinit+0x14>
 8007a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a10:	f7ff bff0 	b.w	80079f4 <__sfp_lock_release>
 8007a14:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <__sinit+0x28>)
 8007a16:	6223      	str	r3, [r4, #32]
 8007a18:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <__sinit+0x2c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1f5      	bne.n	8007a0c <__sinit+0xc>
 8007a20:	f7ff ffc4 	bl	80079ac <global_stdio_init.part.0>
 8007a24:	e7f2      	b.n	8007a0c <__sinit+0xc>
 8007a26:	bf00      	nop
 8007a28:	0800796d 	.word	0x0800796d
 8007a2c:	200008d4 	.word	0x200008d4

08007a30 <_fwalk_sglue>:
 8007a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a34:	4607      	mov	r7, r0
 8007a36:	4688      	mov	r8, r1
 8007a38:	4614      	mov	r4, r2
 8007a3a:	2600      	movs	r6, #0
 8007a3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a40:	f1b9 0901 	subs.w	r9, r9, #1
 8007a44:	d505      	bpl.n	8007a52 <_fwalk_sglue+0x22>
 8007a46:	6824      	ldr	r4, [r4, #0]
 8007a48:	2c00      	cmp	r4, #0
 8007a4a:	d1f7      	bne.n	8007a3c <_fwalk_sglue+0xc>
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d907      	bls.n	8007a68 <_fwalk_sglue+0x38>
 8007a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	d003      	beq.n	8007a68 <_fwalk_sglue+0x38>
 8007a60:	4629      	mov	r1, r5
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c0      	blx	r8
 8007a66:	4306      	orrs	r6, r0
 8007a68:	3568      	adds	r5, #104	; 0x68
 8007a6a:	e7e9      	b.n	8007a40 <_fwalk_sglue+0x10>

08007a6c <iprintf>:
 8007a6c:	b40f      	push	{r0, r1, r2, r3}
 8007a6e:	b507      	push	{r0, r1, r2, lr}
 8007a70:	4906      	ldr	r1, [pc, #24]	; (8007a8c <iprintf+0x20>)
 8007a72:	ab04      	add	r3, sp, #16
 8007a74:	6808      	ldr	r0, [r1, #0]
 8007a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a7a:	6881      	ldr	r1, [r0, #8]
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	f000 fc85 	bl	800838c <_vfiprintf_r>
 8007a82:	b003      	add	sp, #12
 8007a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a88:	b004      	add	sp, #16
 8007a8a:	4770      	bx	lr
 8007a8c:	2000029c 	.word	0x2000029c

08007a90 <_puts_r>:
 8007a90:	6a03      	ldr	r3, [r0, #32]
 8007a92:	b570      	push	{r4, r5, r6, lr}
 8007a94:	6884      	ldr	r4, [r0, #8]
 8007a96:	4605      	mov	r5, r0
 8007a98:	460e      	mov	r6, r1
 8007a9a:	b90b      	cbnz	r3, 8007aa0 <_puts_r+0x10>
 8007a9c:	f7ff ffb0 	bl	8007a00 <__sinit>
 8007aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aa2:	07db      	lsls	r3, r3, #31
 8007aa4:	d405      	bmi.n	8007ab2 <_puts_r+0x22>
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	0598      	lsls	r0, r3, #22
 8007aaa:	d402      	bmi.n	8007ab2 <_puts_r+0x22>
 8007aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aae:	f000 f9f0 	bl	8007e92 <__retarget_lock_acquire_recursive>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	0719      	lsls	r1, r3, #28
 8007ab6:	d513      	bpl.n	8007ae0 <_puts_r+0x50>
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	b18b      	cbz	r3, 8007ae0 <_puts_r+0x50>
 8007abc:	3e01      	subs	r6, #1
 8007abe:	68a3      	ldr	r3, [r4, #8]
 8007ac0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	60a3      	str	r3, [r4, #8]
 8007ac8:	b9e9      	cbnz	r1, 8007b06 <_puts_r+0x76>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da2e      	bge.n	8007b2c <_puts_r+0x9c>
 8007ace:	4622      	mov	r2, r4
 8007ad0:	210a      	movs	r1, #10
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 f8cf 	bl	8007c76 <__swbuf_r>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d007      	beq.n	8007aec <_puts_r+0x5c>
 8007adc:	250a      	movs	r5, #10
 8007ade:	e007      	b.n	8007af0 <_puts_r+0x60>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 f904 	bl	8007cf0 <__swsetup_r>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d0e7      	beq.n	8007abc <_puts_r+0x2c>
 8007aec:	f04f 35ff 	mov.w	r5, #4294967295
 8007af0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007af2:	07da      	lsls	r2, r3, #31
 8007af4:	d405      	bmi.n	8007b02 <_puts_r+0x72>
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	059b      	lsls	r3, r3, #22
 8007afa:	d402      	bmi.n	8007b02 <_puts_r+0x72>
 8007afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afe:	f000 f9c9 	bl	8007e94 <__retarget_lock_release_recursive>
 8007b02:	4628      	mov	r0, r5
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da04      	bge.n	8007b14 <_puts_r+0x84>
 8007b0a:	69a2      	ldr	r2, [r4, #24]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	dc06      	bgt.n	8007b1e <_puts_r+0x8e>
 8007b10:	290a      	cmp	r1, #10
 8007b12:	d004      	beq.n	8007b1e <_puts_r+0x8e>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	6022      	str	r2, [r4, #0]
 8007b1a:	7019      	strb	r1, [r3, #0]
 8007b1c:	e7cf      	b.n	8007abe <_puts_r+0x2e>
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4628      	mov	r0, r5
 8007b22:	f000 f8a8 	bl	8007c76 <__swbuf_r>
 8007b26:	3001      	adds	r0, #1
 8007b28:	d1c9      	bne.n	8007abe <_puts_r+0x2e>
 8007b2a:	e7df      	b.n	8007aec <_puts_r+0x5c>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	250a      	movs	r5, #10
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	6022      	str	r2, [r4, #0]
 8007b34:	701d      	strb	r5, [r3, #0]
 8007b36:	e7db      	b.n	8007af0 <_puts_r+0x60>

08007b38 <puts>:
 8007b38:	4b02      	ldr	r3, [pc, #8]	; (8007b44 <puts+0xc>)
 8007b3a:	4601      	mov	r1, r0
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	f7ff bfa7 	b.w	8007a90 <_puts_r>
 8007b42:	bf00      	nop
 8007b44:	2000029c 	.word	0x2000029c

08007b48 <sniprintf>:
 8007b48:	b40c      	push	{r2, r3}
 8007b4a:	b530      	push	{r4, r5, lr}
 8007b4c:	4b17      	ldr	r3, [pc, #92]	; (8007bac <sniprintf+0x64>)
 8007b4e:	1e0c      	subs	r4, r1, #0
 8007b50:	681d      	ldr	r5, [r3, #0]
 8007b52:	b09d      	sub	sp, #116	; 0x74
 8007b54:	da08      	bge.n	8007b68 <sniprintf+0x20>
 8007b56:	238b      	movs	r3, #139	; 0x8b
 8007b58:	602b      	str	r3, [r5, #0]
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	b01d      	add	sp, #116	; 0x74
 8007b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b64:	b002      	add	sp, #8
 8007b66:	4770      	bx	lr
 8007b68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b70:	bf14      	ite	ne
 8007b72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b76:	4623      	moveq	r3, r4
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	9307      	str	r3, [sp, #28]
 8007b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b80:	9002      	str	r0, [sp, #8]
 8007b82:	9006      	str	r0, [sp, #24]
 8007b84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b8a:	ab21      	add	r3, sp, #132	; 0x84
 8007b8c:	a902      	add	r1, sp, #8
 8007b8e:	4628      	mov	r0, r5
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	f000 fad3 	bl	800813c <_svfiprintf_r>
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	bfbc      	itt	lt
 8007b9a:	238b      	movlt	r3, #139	; 0x8b
 8007b9c:	602b      	strlt	r3, [r5, #0]
 8007b9e:	2c00      	cmp	r4, #0
 8007ba0:	d0dd      	beq.n	8007b5e <sniprintf+0x16>
 8007ba2:	9b02      	ldr	r3, [sp, #8]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e7d9      	b.n	8007b5e <sniprintf+0x16>
 8007baa:	bf00      	nop
 8007bac:	2000029c 	.word	0x2000029c

08007bb0 <siprintf>:
 8007bb0:	b40e      	push	{r1, r2, r3}
 8007bb2:	b500      	push	{lr}
 8007bb4:	b09c      	sub	sp, #112	; 0x70
 8007bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8007bb8:	9002      	str	r0, [sp, #8]
 8007bba:	9006      	str	r0, [sp, #24]
 8007bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bc0:	4809      	ldr	r0, [pc, #36]	; (8007be8 <siprintf+0x38>)
 8007bc2:	9107      	str	r1, [sp, #28]
 8007bc4:	9104      	str	r1, [sp, #16]
 8007bc6:	4909      	ldr	r1, [pc, #36]	; (8007bec <siprintf+0x3c>)
 8007bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bcc:	9105      	str	r1, [sp, #20]
 8007bce:	6800      	ldr	r0, [r0, #0]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	a902      	add	r1, sp, #8
 8007bd4:	f000 fab2 	bl	800813c <_svfiprintf_r>
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	b01c      	add	sp, #112	; 0x70
 8007be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be4:	b003      	add	sp, #12
 8007be6:	4770      	bx	lr
 8007be8:	2000029c 	.word	0x2000029c
 8007bec:	ffff0208 	.word	0xffff0208

08007bf0 <__sread>:
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf8:	f000 f8fc 	bl	8007df4 <_read_r>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	bfab      	itete	ge
 8007c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c02:	89a3      	ldrhlt	r3, [r4, #12]
 8007c04:	181b      	addge	r3, r3, r0
 8007c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c0a:	bfac      	ite	ge
 8007c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c0e:	81a3      	strhlt	r3, [r4, #12]
 8007c10:	bd10      	pop	{r4, pc}

08007c12 <__swrite>:
 8007c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c16:	461f      	mov	r7, r3
 8007c18:	898b      	ldrh	r3, [r1, #12]
 8007c1a:	05db      	lsls	r3, r3, #23
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	4616      	mov	r6, r2
 8007c22:	d505      	bpl.n	8007c30 <__swrite+0x1e>
 8007c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c28:	2302      	movs	r3, #2
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f000 f8d0 	bl	8007dd0 <_lseek_r>
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	4632      	mov	r2, r6
 8007c3e:	463b      	mov	r3, r7
 8007c40:	4628      	mov	r0, r5
 8007c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c46:	f000 b8e7 	b.w	8007e18 <_write_r>

08007c4a <__sseek>:
 8007c4a:	b510      	push	{r4, lr}
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c52:	f000 f8bd 	bl	8007dd0 <_lseek_r>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	bf15      	itete	ne
 8007c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c66:	81a3      	strheq	r3, [r4, #12]
 8007c68:	bf18      	it	ne
 8007c6a:	81a3      	strhne	r3, [r4, #12]
 8007c6c:	bd10      	pop	{r4, pc}

08007c6e <__sclose>:
 8007c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c72:	f000 b89d 	b.w	8007db0 <_close_r>

08007c76 <__swbuf_r>:
 8007c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c78:	460e      	mov	r6, r1
 8007c7a:	4614      	mov	r4, r2
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	b118      	cbz	r0, 8007c88 <__swbuf_r+0x12>
 8007c80:	6a03      	ldr	r3, [r0, #32]
 8007c82:	b90b      	cbnz	r3, 8007c88 <__swbuf_r+0x12>
 8007c84:	f7ff febc 	bl	8007a00 <__sinit>
 8007c88:	69a3      	ldr	r3, [r4, #24]
 8007c8a:	60a3      	str	r3, [r4, #8]
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	071a      	lsls	r2, r3, #28
 8007c90:	d525      	bpl.n	8007cde <__swbuf_r+0x68>
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	b31b      	cbz	r3, 8007cde <__swbuf_r+0x68>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	6922      	ldr	r2, [r4, #16]
 8007c9a:	1a98      	subs	r0, r3, r2
 8007c9c:	6963      	ldr	r3, [r4, #20]
 8007c9e:	b2f6      	uxtb	r6, r6
 8007ca0:	4283      	cmp	r3, r0
 8007ca2:	4637      	mov	r7, r6
 8007ca4:	dc04      	bgt.n	8007cb0 <__swbuf_r+0x3a>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f000 fe9f 	bl	80089ec <_fflush_r>
 8007cae:	b9e0      	cbnz	r0, 8007cea <__swbuf_r+0x74>
 8007cb0:	68a3      	ldr	r3, [r4, #8]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	6022      	str	r2, [r4, #0]
 8007cbc:	701e      	strb	r6, [r3, #0]
 8007cbe:	6962      	ldr	r2, [r4, #20]
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d004      	beq.n	8007cd0 <__swbuf_r+0x5a>
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	07db      	lsls	r3, r3, #31
 8007cca:	d506      	bpl.n	8007cda <__swbuf_r+0x64>
 8007ccc:	2e0a      	cmp	r6, #10
 8007cce:	d104      	bne.n	8007cda <__swbuf_r+0x64>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 fe8a 	bl	80089ec <_fflush_r>
 8007cd8:	b938      	cbnz	r0, 8007cea <__swbuf_r+0x74>
 8007cda:	4638      	mov	r0, r7
 8007cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 f805 	bl	8007cf0 <__swsetup_r>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0d5      	beq.n	8007c96 <__swbuf_r+0x20>
 8007cea:	f04f 37ff 	mov.w	r7, #4294967295
 8007cee:	e7f4      	b.n	8007cda <__swbuf_r+0x64>

08007cf0 <__swsetup_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4b2a      	ldr	r3, [pc, #168]	; (8007d9c <__swsetup_r+0xac>)
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	b118      	cbz	r0, 8007d04 <__swsetup_r+0x14>
 8007cfc:	6a03      	ldr	r3, [r0, #32]
 8007cfe:	b90b      	cbnz	r3, 8007d04 <__swsetup_r+0x14>
 8007d00:	f7ff fe7e 	bl	8007a00 <__sinit>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d0a:	0718      	lsls	r0, r3, #28
 8007d0c:	d422      	bmi.n	8007d54 <__swsetup_r+0x64>
 8007d0e:	06d9      	lsls	r1, r3, #27
 8007d10:	d407      	bmi.n	8007d22 <__swsetup_r+0x32>
 8007d12:	2309      	movs	r3, #9
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	e034      	b.n	8007d8c <__swsetup_r+0x9c>
 8007d22:	0758      	lsls	r0, r3, #29
 8007d24:	d512      	bpl.n	8007d4c <__swsetup_r+0x5c>
 8007d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d28:	b141      	cbz	r1, 8007d3c <__swsetup_r+0x4c>
 8007d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d2e:	4299      	cmp	r1, r3
 8007d30:	d002      	beq.n	8007d38 <__swsetup_r+0x48>
 8007d32:	4628      	mov	r0, r5
 8007d34:	f000 f8b0 	bl	8007e98 <_free_r>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	6363      	str	r3, [r4, #52]	; 0x34
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	2300      	movs	r3, #0
 8007d46:	6063      	str	r3, [r4, #4]
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	6023      	str	r3, [r4, #0]
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	f043 0308 	orr.w	r3, r3, #8
 8007d52:	81a3      	strh	r3, [r4, #12]
 8007d54:	6923      	ldr	r3, [r4, #16]
 8007d56:	b94b      	cbnz	r3, 8007d6c <__swsetup_r+0x7c>
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d62:	d003      	beq.n	8007d6c <__swsetup_r+0x7c>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 fe8e 	bl	8008a88 <__smakebuf_r>
 8007d6c:	89a0      	ldrh	r0, [r4, #12]
 8007d6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d72:	f010 0301 	ands.w	r3, r0, #1
 8007d76:	d00a      	beq.n	8007d8e <__swsetup_r+0x9e>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60a3      	str	r3, [r4, #8]
 8007d7c:	6963      	ldr	r3, [r4, #20]
 8007d7e:	425b      	negs	r3, r3
 8007d80:	61a3      	str	r3, [r4, #24]
 8007d82:	6923      	ldr	r3, [r4, #16]
 8007d84:	b943      	cbnz	r3, 8007d98 <__swsetup_r+0xa8>
 8007d86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d8a:	d1c4      	bne.n	8007d16 <__swsetup_r+0x26>
 8007d8c:	bd38      	pop	{r3, r4, r5, pc}
 8007d8e:	0781      	lsls	r1, r0, #30
 8007d90:	bf58      	it	pl
 8007d92:	6963      	ldrpl	r3, [r4, #20]
 8007d94:	60a3      	str	r3, [r4, #8]
 8007d96:	e7f4      	b.n	8007d82 <__swsetup_r+0x92>
 8007d98:	2000      	movs	r0, #0
 8007d9a:	e7f7      	b.n	8007d8c <__swsetup_r+0x9c>
 8007d9c:	2000029c 	.word	0x2000029c

08007da0 <memset>:
 8007da0:	4402      	add	r2, r0
 8007da2:	4603      	mov	r3, r0
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d100      	bne.n	8007daa <memset+0xa>
 8007da8:	4770      	bx	lr
 8007daa:	f803 1b01 	strb.w	r1, [r3], #1
 8007dae:	e7f9      	b.n	8007da4 <memset+0x4>

08007db0 <_close_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d06      	ldr	r5, [pc, #24]	; (8007dcc <_close_r+0x1c>)
 8007db4:	2300      	movs	r3, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	f7fa f87d 	bl	8001eba <_close>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	d102      	bne.n	8007dca <_close_r+0x1a>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	b103      	cbz	r3, 8007dca <_close_r+0x1a>
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
 8007dcc:	200008d8 	.word	0x200008d8

08007dd0 <_lseek_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	4d07      	ldr	r5, [pc, #28]	; (8007df0 <_lseek_r+0x20>)
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	4608      	mov	r0, r1
 8007dd8:	4611      	mov	r1, r2
 8007dda:	2200      	movs	r2, #0
 8007ddc:	602a      	str	r2, [r5, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f7fa f892 	bl	8001f08 <_lseek>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_lseek_r+0x1e>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_lseek_r+0x1e>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	200008d8 	.word	0x200008d8

08007df4 <_read_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d07      	ldr	r5, [pc, #28]	; (8007e14 <_read_r+0x20>)
 8007df8:	4604      	mov	r4, r0
 8007dfa:	4608      	mov	r0, r1
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	2200      	movs	r2, #0
 8007e00:	602a      	str	r2, [r5, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f7fa f83c 	bl	8001e80 <_read>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_read_r+0x1e>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_read_r+0x1e>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	200008d8 	.word	0x200008d8

08007e18 <_write_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d07      	ldr	r5, [pc, #28]	; (8007e38 <_write_r+0x20>)
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	4608      	mov	r0, r1
 8007e20:	4611      	mov	r1, r2
 8007e22:	2200      	movs	r2, #0
 8007e24:	602a      	str	r2, [r5, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f7f8 fcd6 	bl	80007d8 <_write>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_write_r+0x1e>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_write_r+0x1e>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	200008d8 	.word	0x200008d8

08007e3c <__errno>:
 8007e3c:	4b01      	ldr	r3, [pc, #4]	; (8007e44 <__errno+0x8>)
 8007e3e:	6818      	ldr	r0, [r3, #0]
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	2000029c 	.word	0x2000029c

08007e48 <__libc_init_array>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	4d0d      	ldr	r5, [pc, #52]	; (8007e80 <__libc_init_array+0x38>)
 8007e4c:	4c0d      	ldr	r4, [pc, #52]	; (8007e84 <__libc_init_array+0x3c>)
 8007e4e:	1b64      	subs	r4, r4, r5
 8007e50:	10a4      	asrs	r4, r4, #2
 8007e52:	2600      	movs	r6, #0
 8007e54:	42a6      	cmp	r6, r4
 8007e56:	d109      	bne.n	8007e6c <__libc_init_array+0x24>
 8007e58:	4d0b      	ldr	r5, [pc, #44]	; (8007e88 <__libc_init_array+0x40>)
 8007e5a:	4c0c      	ldr	r4, [pc, #48]	; (8007e8c <__libc_init_array+0x44>)
 8007e5c:	f000 fee2 	bl	8008c24 <_init>
 8007e60:	1b64      	subs	r4, r4, r5
 8007e62:	10a4      	asrs	r4, r4, #2
 8007e64:	2600      	movs	r6, #0
 8007e66:	42a6      	cmp	r6, r4
 8007e68:	d105      	bne.n	8007e76 <__libc_init_array+0x2e>
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e70:	4798      	blx	r3
 8007e72:	3601      	adds	r6, #1
 8007e74:	e7ee      	b.n	8007e54 <__libc_init_array+0xc>
 8007e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7a:	4798      	blx	r3
 8007e7c:	3601      	adds	r6, #1
 8007e7e:	e7f2      	b.n	8007e66 <__libc_init_array+0x1e>
 8007e80:	08008de4 	.word	0x08008de4
 8007e84:	08008de4 	.word	0x08008de4
 8007e88:	08008de4 	.word	0x08008de4
 8007e8c:	08008de8 	.word	0x08008de8

08007e90 <__retarget_lock_init_recursive>:
 8007e90:	4770      	bx	lr

08007e92 <__retarget_lock_acquire_recursive>:
 8007e92:	4770      	bx	lr

08007e94 <__retarget_lock_release_recursive>:
 8007e94:	4770      	bx	lr
	...

08007e98 <_free_r>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	d044      	beq.n	8007f28 <_free_r+0x90>
 8007e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea2:	9001      	str	r0, [sp, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eaa:	bfb8      	it	lt
 8007eac:	18e4      	addlt	r4, r4, r3
 8007eae:	f000 f8df 	bl	8008070 <__malloc_lock>
 8007eb2:	4a1e      	ldr	r2, [pc, #120]	; (8007f2c <_free_r+0x94>)
 8007eb4:	9801      	ldr	r0, [sp, #4]
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	b933      	cbnz	r3, 8007ec8 <_free_r+0x30>
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	6014      	str	r4, [r2, #0]
 8007ebe:	b003      	add	sp, #12
 8007ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec4:	f000 b8da 	b.w	800807c <__malloc_unlock>
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	d908      	bls.n	8007ede <_free_r+0x46>
 8007ecc:	6825      	ldr	r5, [r4, #0]
 8007ece:	1961      	adds	r1, r4, r5
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	bf01      	itttt	eq
 8007ed4:	6819      	ldreq	r1, [r3, #0]
 8007ed6:	685b      	ldreq	r3, [r3, #4]
 8007ed8:	1949      	addeq	r1, r1, r5
 8007eda:	6021      	streq	r1, [r4, #0]
 8007edc:	e7ed      	b.n	8007eba <_free_r+0x22>
 8007ede:	461a      	mov	r2, r3
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	b10b      	cbz	r3, 8007ee8 <_free_r+0x50>
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	d9fa      	bls.n	8007ede <_free_r+0x46>
 8007ee8:	6811      	ldr	r1, [r2, #0]
 8007eea:	1855      	adds	r5, r2, r1
 8007eec:	42a5      	cmp	r5, r4
 8007eee:	d10b      	bne.n	8007f08 <_free_r+0x70>
 8007ef0:	6824      	ldr	r4, [r4, #0]
 8007ef2:	4421      	add	r1, r4
 8007ef4:	1854      	adds	r4, r2, r1
 8007ef6:	42a3      	cmp	r3, r4
 8007ef8:	6011      	str	r1, [r2, #0]
 8007efa:	d1e0      	bne.n	8007ebe <_free_r+0x26>
 8007efc:	681c      	ldr	r4, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	6053      	str	r3, [r2, #4]
 8007f02:	440c      	add	r4, r1
 8007f04:	6014      	str	r4, [r2, #0]
 8007f06:	e7da      	b.n	8007ebe <_free_r+0x26>
 8007f08:	d902      	bls.n	8007f10 <_free_r+0x78>
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	6003      	str	r3, [r0, #0]
 8007f0e:	e7d6      	b.n	8007ebe <_free_r+0x26>
 8007f10:	6825      	ldr	r5, [r4, #0]
 8007f12:	1961      	adds	r1, r4, r5
 8007f14:	428b      	cmp	r3, r1
 8007f16:	bf04      	itt	eq
 8007f18:	6819      	ldreq	r1, [r3, #0]
 8007f1a:	685b      	ldreq	r3, [r3, #4]
 8007f1c:	6063      	str	r3, [r4, #4]
 8007f1e:	bf04      	itt	eq
 8007f20:	1949      	addeq	r1, r1, r5
 8007f22:	6021      	streq	r1, [r4, #0]
 8007f24:	6054      	str	r4, [r2, #4]
 8007f26:	e7ca      	b.n	8007ebe <_free_r+0x26>
 8007f28:	b003      	add	sp, #12
 8007f2a:	bd30      	pop	{r4, r5, pc}
 8007f2c:	200008e0 	.word	0x200008e0

08007f30 <sbrk_aligned>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4e0e      	ldr	r6, [pc, #56]	; (8007f6c <sbrk_aligned+0x3c>)
 8007f34:	460c      	mov	r4, r1
 8007f36:	6831      	ldr	r1, [r6, #0]
 8007f38:	4605      	mov	r5, r0
 8007f3a:	b911      	cbnz	r1, 8007f42 <sbrk_aligned+0x12>
 8007f3c:	f000 fe1c 	bl	8008b78 <_sbrk_r>
 8007f40:	6030      	str	r0, [r6, #0]
 8007f42:	4621      	mov	r1, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 fe17 	bl	8008b78 <_sbrk_r>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	d00a      	beq.n	8007f64 <sbrk_aligned+0x34>
 8007f4e:	1cc4      	adds	r4, r0, #3
 8007f50:	f024 0403 	bic.w	r4, r4, #3
 8007f54:	42a0      	cmp	r0, r4
 8007f56:	d007      	beq.n	8007f68 <sbrk_aligned+0x38>
 8007f58:	1a21      	subs	r1, r4, r0
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 fe0c 	bl	8008b78 <_sbrk_r>
 8007f60:	3001      	adds	r0, #1
 8007f62:	d101      	bne.n	8007f68 <sbrk_aligned+0x38>
 8007f64:	f04f 34ff 	mov.w	r4, #4294967295
 8007f68:	4620      	mov	r0, r4
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}
 8007f6c:	200008e4 	.word	0x200008e4

08007f70 <_malloc_r>:
 8007f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	1ccd      	adds	r5, r1, #3
 8007f76:	f025 0503 	bic.w	r5, r5, #3
 8007f7a:	3508      	adds	r5, #8
 8007f7c:	2d0c      	cmp	r5, #12
 8007f7e:	bf38      	it	cc
 8007f80:	250c      	movcc	r5, #12
 8007f82:	2d00      	cmp	r5, #0
 8007f84:	4607      	mov	r7, r0
 8007f86:	db01      	blt.n	8007f8c <_malloc_r+0x1c>
 8007f88:	42a9      	cmp	r1, r5
 8007f8a:	d905      	bls.n	8007f98 <_malloc_r+0x28>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	2600      	movs	r6, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800806c <_malloc_r+0xfc>
 8007f9c:	f000 f868 	bl	8008070 <__malloc_lock>
 8007fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa4:	461c      	mov	r4, r3
 8007fa6:	bb5c      	cbnz	r4, 8008000 <_malloc_r+0x90>
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4638      	mov	r0, r7
 8007fac:	f7ff ffc0 	bl	8007f30 <sbrk_aligned>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	d155      	bne.n	8008062 <_malloc_r+0xf2>
 8007fb6:	f8d8 4000 	ldr.w	r4, [r8]
 8007fba:	4626      	mov	r6, r4
 8007fbc:	2e00      	cmp	r6, #0
 8007fbe:	d145      	bne.n	800804c <_malloc_r+0xdc>
 8007fc0:	2c00      	cmp	r4, #0
 8007fc2:	d048      	beq.n	8008056 <_malloc_r+0xe6>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4638      	mov	r0, r7
 8007fca:	eb04 0903 	add.w	r9, r4, r3
 8007fce:	f000 fdd3 	bl	8008b78 <_sbrk_r>
 8007fd2:	4581      	cmp	r9, r0
 8007fd4:	d13f      	bne.n	8008056 <_malloc_r+0xe6>
 8007fd6:	6821      	ldr	r1, [r4, #0]
 8007fd8:	1a6d      	subs	r5, r5, r1
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f7ff ffa7 	bl	8007f30 <sbrk_aligned>
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	d037      	beq.n	8008056 <_malloc_r+0xe6>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	442b      	add	r3, r5
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d038      	beq.n	8008066 <_malloc_r+0xf6>
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	42a2      	cmp	r2, r4
 8007ff8:	d12b      	bne.n	8008052 <_malloc_r+0xe2>
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	605a      	str	r2, [r3, #4]
 8007ffe:	e00f      	b.n	8008020 <_malloc_r+0xb0>
 8008000:	6822      	ldr	r2, [r4, #0]
 8008002:	1b52      	subs	r2, r2, r5
 8008004:	d41f      	bmi.n	8008046 <_malloc_r+0xd6>
 8008006:	2a0b      	cmp	r2, #11
 8008008:	d917      	bls.n	800803a <_malloc_r+0xca>
 800800a:	1961      	adds	r1, r4, r5
 800800c:	42a3      	cmp	r3, r4
 800800e:	6025      	str	r5, [r4, #0]
 8008010:	bf18      	it	ne
 8008012:	6059      	strne	r1, [r3, #4]
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	bf08      	it	eq
 8008018:	f8c8 1000 	streq.w	r1, [r8]
 800801c:	5162      	str	r2, [r4, r5]
 800801e:	604b      	str	r3, [r1, #4]
 8008020:	4638      	mov	r0, r7
 8008022:	f104 060b 	add.w	r6, r4, #11
 8008026:	f000 f829 	bl	800807c <__malloc_unlock>
 800802a:	f026 0607 	bic.w	r6, r6, #7
 800802e:	1d23      	adds	r3, r4, #4
 8008030:	1af2      	subs	r2, r6, r3
 8008032:	d0ae      	beq.n	8007f92 <_malloc_r+0x22>
 8008034:	1b9b      	subs	r3, r3, r6
 8008036:	50a3      	str	r3, [r4, r2]
 8008038:	e7ab      	b.n	8007f92 <_malloc_r+0x22>
 800803a:	42a3      	cmp	r3, r4
 800803c:	6862      	ldr	r2, [r4, #4]
 800803e:	d1dd      	bne.n	8007ffc <_malloc_r+0x8c>
 8008040:	f8c8 2000 	str.w	r2, [r8]
 8008044:	e7ec      	b.n	8008020 <_malloc_r+0xb0>
 8008046:	4623      	mov	r3, r4
 8008048:	6864      	ldr	r4, [r4, #4]
 800804a:	e7ac      	b.n	8007fa6 <_malloc_r+0x36>
 800804c:	4634      	mov	r4, r6
 800804e:	6876      	ldr	r6, [r6, #4]
 8008050:	e7b4      	b.n	8007fbc <_malloc_r+0x4c>
 8008052:	4613      	mov	r3, r2
 8008054:	e7cc      	b.n	8007ff0 <_malloc_r+0x80>
 8008056:	230c      	movs	r3, #12
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	4638      	mov	r0, r7
 800805c:	f000 f80e 	bl	800807c <__malloc_unlock>
 8008060:	e797      	b.n	8007f92 <_malloc_r+0x22>
 8008062:	6025      	str	r5, [r4, #0]
 8008064:	e7dc      	b.n	8008020 <_malloc_r+0xb0>
 8008066:	605b      	str	r3, [r3, #4]
 8008068:	deff      	udf	#255	; 0xff
 800806a:	bf00      	nop
 800806c:	200008e0 	.word	0x200008e0

08008070 <__malloc_lock>:
 8008070:	4801      	ldr	r0, [pc, #4]	; (8008078 <__malloc_lock+0x8>)
 8008072:	f7ff bf0e 	b.w	8007e92 <__retarget_lock_acquire_recursive>
 8008076:	bf00      	nop
 8008078:	200008dc 	.word	0x200008dc

0800807c <__malloc_unlock>:
 800807c:	4801      	ldr	r0, [pc, #4]	; (8008084 <__malloc_unlock+0x8>)
 800807e:	f7ff bf09 	b.w	8007e94 <__retarget_lock_release_recursive>
 8008082:	bf00      	nop
 8008084:	200008dc 	.word	0x200008dc

08008088 <__ssputs_r>:
 8008088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800808c:	688e      	ldr	r6, [r1, #8]
 800808e:	461f      	mov	r7, r3
 8008090:	42be      	cmp	r6, r7
 8008092:	680b      	ldr	r3, [r1, #0]
 8008094:	4682      	mov	sl, r0
 8008096:	460c      	mov	r4, r1
 8008098:	4690      	mov	r8, r2
 800809a:	d82c      	bhi.n	80080f6 <__ssputs_r+0x6e>
 800809c:	898a      	ldrh	r2, [r1, #12]
 800809e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080a2:	d026      	beq.n	80080f2 <__ssputs_r+0x6a>
 80080a4:	6965      	ldr	r5, [r4, #20]
 80080a6:	6909      	ldr	r1, [r1, #16]
 80080a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ac:	eba3 0901 	sub.w	r9, r3, r1
 80080b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080b4:	1c7b      	adds	r3, r7, #1
 80080b6:	444b      	add	r3, r9
 80080b8:	106d      	asrs	r5, r5, #1
 80080ba:	429d      	cmp	r5, r3
 80080bc:	bf38      	it	cc
 80080be:	461d      	movcc	r5, r3
 80080c0:	0553      	lsls	r3, r2, #21
 80080c2:	d527      	bpl.n	8008114 <__ssputs_r+0x8c>
 80080c4:	4629      	mov	r1, r5
 80080c6:	f7ff ff53 	bl	8007f70 <_malloc_r>
 80080ca:	4606      	mov	r6, r0
 80080cc:	b360      	cbz	r0, 8008128 <__ssputs_r+0xa0>
 80080ce:	6921      	ldr	r1, [r4, #16]
 80080d0:	464a      	mov	r2, r9
 80080d2:	f000 fd61 	bl	8008b98 <memcpy>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	6126      	str	r6, [r4, #16]
 80080e4:	6165      	str	r5, [r4, #20]
 80080e6:	444e      	add	r6, r9
 80080e8:	eba5 0509 	sub.w	r5, r5, r9
 80080ec:	6026      	str	r6, [r4, #0]
 80080ee:	60a5      	str	r5, [r4, #8]
 80080f0:	463e      	mov	r6, r7
 80080f2:	42be      	cmp	r6, r7
 80080f4:	d900      	bls.n	80080f8 <__ssputs_r+0x70>
 80080f6:	463e      	mov	r6, r7
 80080f8:	6820      	ldr	r0, [r4, #0]
 80080fa:	4632      	mov	r2, r6
 80080fc:	4641      	mov	r1, r8
 80080fe:	f000 fcff 	bl	8008b00 <memmove>
 8008102:	68a3      	ldr	r3, [r4, #8]
 8008104:	1b9b      	subs	r3, r3, r6
 8008106:	60a3      	str	r3, [r4, #8]
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	4433      	add	r3, r6
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	2000      	movs	r0, #0
 8008110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008114:	462a      	mov	r2, r5
 8008116:	f000 fd4d 	bl	8008bb4 <_realloc_r>
 800811a:	4606      	mov	r6, r0
 800811c:	2800      	cmp	r0, #0
 800811e:	d1e0      	bne.n	80080e2 <__ssputs_r+0x5a>
 8008120:	6921      	ldr	r1, [r4, #16]
 8008122:	4650      	mov	r0, sl
 8008124:	f7ff feb8 	bl	8007e98 <_free_r>
 8008128:	230c      	movs	r3, #12
 800812a:	f8ca 3000 	str.w	r3, [sl]
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	f04f 30ff 	mov.w	r0, #4294967295
 800813a:	e7e9      	b.n	8008110 <__ssputs_r+0x88>

0800813c <_svfiprintf_r>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	4698      	mov	r8, r3
 8008142:	898b      	ldrh	r3, [r1, #12]
 8008144:	061b      	lsls	r3, r3, #24
 8008146:	b09d      	sub	sp, #116	; 0x74
 8008148:	4607      	mov	r7, r0
 800814a:	460d      	mov	r5, r1
 800814c:	4614      	mov	r4, r2
 800814e:	d50e      	bpl.n	800816e <_svfiprintf_r+0x32>
 8008150:	690b      	ldr	r3, [r1, #16]
 8008152:	b963      	cbnz	r3, 800816e <_svfiprintf_r+0x32>
 8008154:	2140      	movs	r1, #64	; 0x40
 8008156:	f7ff ff0b 	bl	8007f70 <_malloc_r>
 800815a:	6028      	str	r0, [r5, #0]
 800815c:	6128      	str	r0, [r5, #16]
 800815e:	b920      	cbnz	r0, 800816a <_svfiprintf_r+0x2e>
 8008160:	230c      	movs	r3, #12
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	e0d0      	b.n	800830c <_svfiprintf_r+0x1d0>
 800816a:	2340      	movs	r3, #64	; 0x40
 800816c:	616b      	str	r3, [r5, #20]
 800816e:	2300      	movs	r3, #0
 8008170:	9309      	str	r3, [sp, #36]	; 0x24
 8008172:	2320      	movs	r3, #32
 8008174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008178:	f8cd 800c 	str.w	r8, [sp, #12]
 800817c:	2330      	movs	r3, #48	; 0x30
 800817e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008324 <_svfiprintf_r+0x1e8>
 8008182:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008186:	f04f 0901 	mov.w	r9, #1
 800818a:	4623      	mov	r3, r4
 800818c:	469a      	mov	sl, r3
 800818e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008192:	b10a      	cbz	r2, 8008198 <_svfiprintf_r+0x5c>
 8008194:	2a25      	cmp	r2, #37	; 0x25
 8008196:	d1f9      	bne.n	800818c <_svfiprintf_r+0x50>
 8008198:	ebba 0b04 	subs.w	fp, sl, r4
 800819c:	d00b      	beq.n	80081b6 <_svfiprintf_r+0x7a>
 800819e:	465b      	mov	r3, fp
 80081a0:	4622      	mov	r2, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	4638      	mov	r0, r7
 80081a6:	f7ff ff6f 	bl	8008088 <__ssputs_r>
 80081aa:	3001      	adds	r0, #1
 80081ac:	f000 80a9 	beq.w	8008302 <_svfiprintf_r+0x1c6>
 80081b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b2:	445a      	add	r2, fp
 80081b4:	9209      	str	r2, [sp, #36]	; 0x24
 80081b6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 80a1 	beq.w	8008302 <_svfiprintf_r+0x1c6>
 80081c0:	2300      	movs	r3, #0
 80081c2:	f04f 32ff 	mov.w	r2, #4294967295
 80081c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ca:	f10a 0a01 	add.w	sl, sl, #1
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	9307      	str	r3, [sp, #28]
 80081d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081d6:	931a      	str	r3, [sp, #104]	; 0x68
 80081d8:	4654      	mov	r4, sl
 80081da:	2205      	movs	r2, #5
 80081dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e0:	4850      	ldr	r0, [pc, #320]	; (8008324 <_svfiprintf_r+0x1e8>)
 80081e2:	f7f8 f80d 	bl	8000200 <memchr>
 80081e6:	9a04      	ldr	r2, [sp, #16]
 80081e8:	b9d8      	cbnz	r0, 8008222 <_svfiprintf_r+0xe6>
 80081ea:	06d0      	lsls	r0, r2, #27
 80081ec:	bf44      	itt	mi
 80081ee:	2320      	movmi	r3, #32
 80081f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081f4:	0711      	lsls	r1, r2, #28
 80081f6:	bf44      	itt	mi
 80081f8:	232b      	movmi	r3, #43	; 0x2b
 80081fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008202:	2b2a      	cmp	r3, #42	; 0x2a
 8008204:	d015      	beq.n	8008232 <_svfiprintf_r+0xf6>
 8008206:	9a07      	ldr	r2, [sp, #28]
 8008208:	4654      	mov	r4, sl
 800820a:	2000      	movs	r0, #0
 800820c:	f04f 0c0a 	mov.w	ip, #10
 8008210:	4621      	mov	r1, r4
 8008212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008216:	3b30      	subs	r3, #48	; 0x30
 8008218:	2b09      	cmp	r3, #9
 800821a:	d94d      	bls.n	80082b8 <_svfiprintf_r+0x17c>
 800821c:	b1b0      	cbz	r0, 800824c <_svfiprintf_r+0x110>
 800821e:	9207      	str	r2, [sp, #28]
 8008220:	e014      	b.n	800824c <_svfiprintf_r+0x110>
 8008222:	eba0 0308 	sub.w	r3, r0, r8
 8008226:	fa09 f303 	lsl.w	r3, r9, r3
 800822a:	4313      	orrs	r3, r2
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	46a2      	mov	sl, r4
 8008230:	e7d2      	b.n	80081d8 <_svfiprintf_r+0x9c>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	1d19      	adds	r1, r3, #4
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	9103      	str	r1, [sp, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfbb      	ittet	lt
 800823e:	425b      	neglt	r3, r3
 8008240:	f042 0202 	orrlt.w	r2, r2, #2
 8008244:	9307      	strge	r3, [sp, #28]
 8008246:	9307      	strlt	r3, [sp, #28]
 8008248:	bfb8      	it	lt
 800824a:	9204      	strlt	r2, [sp, #16]
 800824c:	7823      	ldrb	r3, [r4, #0]
 800824e:	2b2e      	cmp	r3, #46	; 0x2e
 8008250:	d10c      	bne.n	800826c <_svfiprintf_r+0x130>
 8008252:	7863      	ldrb	r3, [r4, #1]
 8008254:	2b2a      	cmp	r3, #42	; 0x2a
 8008256:	d134      	bne.n	80082c2 <_svfiprintf_r+0x186>
 8008258:	9b03      	ldr	r3, [sp, #12]
 800825a:	1d1a      	adds	r2, r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	9203      	str	r2, [sp, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	bfb8      	it	lt
 8008264:	f04f 33ff 	movlt.w	r3, #4294967295
 8008268:	3402      	adds	r4, #2
 800826a:	9305      	str	r3, [sp, #20]
 800826c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008334 <_svfiprintf_r+0x1f8>
 8008270:	7821      	ldrb	r1, [r4, #0]
 8008272:	2203      	movs	r2, #3
 8008274:	4650      	mov	r0, sl
 8008276:	f7f7 ffc3 	bl	8000200 <memchr>
 800827a:	b138      	cbz	r0, 800828c <_svfiprintf_r+0x150>
 800827c:	9b04      	ldr	r3, [sp, #16]
 800827e:	eba0 000a 	sub.w	r0, r0, sl
 8008282:	2240      	movs	r2, #64	; 0x40
 8008284:	4082      	lsls	r2, r0
 8008286:	4313      	orrs	r3, r2
 8008288:	3401      	adds	r4, #1
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008290:	4825      	ldr	r0, [pc, #148]	; (8008328 <_svfiprintf_r+0x1ec>)
 8008292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008296:	2206      	movs	r2, #6
 8008298:	f7f7 ffb2 	bl	8000200 <memchr>
 800829c:	2800      	cmp	r0, #0
 800829e:	d038      	beq.n	8008312 <_svfiprintf_r+0x1d6>
 80082a0:	4b22      	ldr	r3, [pc, #136]	; (800832c <_svfiprintf_r+0x1f0>)
 80082a2:	bb1b      	cbnz	r3, 80082ec <_svfiprintf_r+0x1b0>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	3307      	adds	r3, #7
 80082a8:	f023 0307 	bic.w	r3, r3, #7
 80082ac:	3308      	adds	r3, #8
 80082ae:	9303      	str	r3, [sp, #12]
 80082b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b2:	4433      	add	r3, r6
 80082b4:	9309      	str	r3, [sp, #36]	; 0x24
 80082b6:	e768      	b.n	800818a <_svfiprintf_r+0x4e>
 80082b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082bc:	460c      	mov	r4, r1
 80082be:	2001      	movs	r0, #1
 80082c0:	e7a6      	b.n	8008210 <_svfiprintf_r+0xd4>
 80082c2:	2300      	movs	r3, #0
 80082c4:	3401      	adds	r4, #1
 80082c6:	9305      	str	r3, [sp, #20]
 80082c8:	4619      	mov	r1, r3
 80082ca:	f04f 0c0a 	mov.w	ip, #10
 80082ce:	4620      	mov	r0, r4
 80082d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082d4:	3a30      	subs	r2, #48	; 0x30
 80082d6:	2a09      	cmp	r2, #9
 80082d8:	d903      	bls.n	80082e2 <_svfiprintf_r+0x1a6>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0c6      	beq.n	800826c <_svfiprintf_r+0x130>
 80082de:	9105      	str	r1, [sp, #20]
 80082e0:	e7c4      	b.n	800826c <_svfiprintf_r+0x130>
 80082e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082e6:	4604      	mov	r4, r0
 80082e8:	2301      	movs	r3, #1
 80082ea:	e7f0      	b.n	80082ce <_svfiprintf_r+0x192>
 80082ec:	ab03      	add	r3, sp, #12
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	462a      	mov	r2, r5
 80082f2:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <_svfiprintf_r+0x1f4>)
 80082f4:	a904      	add	r1, sp, #16
 80082f6:	4638      	mov	r0, r7
 80082f8:	f3af 8000 	nop.w
 80082fc:	1c42      	adds	r2, r0, #1
 80082fe:	4606      	mov	r6, r0
 8008300:	d1d6      	bne.n	80082b0 <_svfiprintf_r+0x174>
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	065b      	lsls	r3, r3, #25
 8008306:	f53f af2d 	bmi.w	8008164 <_svfiprintf_r+0x28>
 800830a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800830c:	b01d      	add	sp, #116	; 0x74
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	ab03      	add	r3, sp, #12
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	462a      	mov	r2, r5
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <_svfiprintf_r+0x1f4>)
 800831a:	a904      	add	r1, sp, #16
 800831c:	4638      	mov	r0, r7
 800831e:	f000 f9bd 	bl	800869c <_printf_i>
 8008322:	e7eb      	b.n	80082fc <_svfiprintf_r+0x1c0>
 8008324:	08008da8 	.word	0x08008da8
 8008328:	08008db2 	.word	0x08008db2
 800832c:	00000000 	.word	0x00000000
 8008330:	08008089 	.word	0x08008089
 8008334:	08008dae 	.word	0x08008dae

08008338 <__sfputc_r>:
 8008338:	6893      	ldr	r3, [r2, #8]
 800833a:	3b01      	subs	r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	b410      	push	{r4}
 8008340:	6093      	str	r3, [r2, #8]
 8008342:	da08      	bge.n	8008356 <__sfputc_r+0x1e>
 8008344:	6994      	ldr	r4, [r2, #24]
 8008346:	42a3      	cmp	r3, r4
 8008348:	db01      	blt.n	800834e <__sfputc_r+0x16>
 800834a:	290a      	cmp	r1, #10
 800834c:	d103      	bne.n	8008356 <__sfputc_r+0x1e>
 800834e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008352:	f7ff bc90 	b.w	8007c76 <__swbuf_r>
 8008356:	6813      	ldr	r3, [r2, #0]
 8008358:	1c58      	adds	r0, r3, #1
 800835a:	6010      	str	r0, [r2, #0]
 800835c:	7019      	strb	r1, [r3, #0]
 800835e:	4608      	mov	r0, r1
 8008360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008364:	4770      	bx	lr

08008366 <__sfputs_r>:
 8008366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008368:	4606      	mov	r6, r0
 800836a:	460f      	mov	r7, r1
 800836c:	4614      	mov	r4, r2
 800836e:	18d5      	adds	r5, r2, r3
 8008370:	42ac      	cmp	r4, r5
 8008372:	d101      	bne.n	8008378 <__sfputs_r+0x12>
 8008374:	2000      	movs	r0, #0
 8008376:	e007      	b.n	8008388 <__sfputs_r+0x22>
 8008378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837c:	463a      	mov	r2, r7
 800837e:	4630      	mov	r0, r6
 8008380:	f7ff ffda 	bl	8008338 <__sfputc_r>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d1f3      	bne.n	8008370 <__sfputs_r+0xa>
 8008388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800838c <_vfiprintf_r>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	460d      	mov	r5, r1
 8008392:	b09d      	sub	sp, #116	; 0x74
 8008394:	4614      	mov	r4, r2
 8008396:	4698      	mov	r8, r3
 8008398:	4606      	mov	r6, r0
 800839a:	b118      	cbz	r0, 80083a4 <_vfiprintf_r+0x18>
 800839c:	6a03      	ldr	r3, [r0, #32]
 800839e:	b90b      	cbnz	r3, 80083a4 <_vfiprintf_r+0x18>
 80083a0:	f7ff fb2e 	bl	8007a00 <__sinit>
 80083a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083a6:	07d9      	lsls	r1, r3, #31
 80083a8:	d405      	bmi.n	80083b6 <_vfiprintf_r+0x2a>
 80083aa:	89ab      	ldrh	r3, [r5, #12]
 80083ac:	059a      	lsls	r2, r3, #22
 80083ae:	d402      	bmi.n	80083b6 <_vfiprintf_r+0x2a>
 80083b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b2:	f7ff fd6e 	bl	8007e92 <__retarget_lock_acquire_recursive>
 80083b6:	89ab      	ldrh	r3, [r5, #12]
 80083b8:	071b      	lsls	r3, r3, #28
 80083ba:	d501      	bpl.n	80083c0 <_vfiprintf_r+0x34>
 80083bc:	692b      	ldr	r3, [r5, #16]
 80083be:	b99b      	cbnz	r3, 80083e8 <_vfiprintf_r+0x5c>
 80083c0:	4629      	mov	r1, r5
 80083c2:	4630      	mov	r0, r6
 80083c4:	f7ff fc94 	bl	8007cf0 <__swsetup_r>
 80083c8:	b170      	cbz	r0, 80083e8 <_vfiprintf_r+0x5c>
 80083ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083cc:	07dc      	lsls	r4, r3, #31
 80083ce:	d504      	bpl.n	80083da <_vfiprintf_r+0x4e>
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	b01d      	add	sp, #116	; 0x74
 80083d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083da:	89ab      	ldrh	r3, [r5, #12]
 80083dc:	0598      	lsls	r0, r3, #22
 80083de:	d4f7      	bmi.n	80083d0 <_vfiprintf_r+0x44>
 80083e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083e2:	f7ff fd57 	bl	8007e94 <__retarget_lock_release_recursive>
 80083e6:	e7f3      	b.n	80083d0 <_vfiprintf_r+0x44>
 80083e8:	2300      	movs	r3, #0
 80083ea:	9309      	str	r3, [sp, #36]	; 0x24
 80083ec:	2320      	movs	r3, #32
 80083ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80083f6:	2330      	movs	r3, #48	; 0x30
 80083f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80085ac <_vfiprintf_r+0x220>
 80083fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008400:	f04f 0901 	mov.w	r9, #1
 8008404:	4623      	mov	r3, r4
 8008406:	469a      	mov	sl, r3
 8008408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800840c:	b10a      	cbz	r2, 8008412 <_vfiprintf_r+0x86>
 800840e:	2a25      	cmp	r2, #37	; 0x25
 8008410:	d1f9      	bne.n	8008406 <_vfiprintf_r+0x7a>
 8008412:	ebba 0b04 	subs.w	fp, sl, r4
 8008416:	d00b      	beq.n	8008430 <_vfiprintf_r+0xa4>
 8008418:	465b      	mov	r3, fp
 800841a:	4622      	mov	r2, r4
 800841c:	4629      	mov	r1, r5
 800841e:	4630      	mov	r0, r6
 8008420:	f7ff ffa1 	bl	8008366 <__sfputs_r>
 8008424:	3001      	adds	r0, #1
 8008426:	f000 80a9 	beq.w	800857c <_vfiprintf_r+0x1f0>
 800842a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800842c:	445a      	add	r2, fp
 800842e:	9209      	str	r2, [sp, #36]	; 0x24
 8008430:	f89a 3000 	ldrb.w	r3, [sl]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 80a1 	beq.w	800857c <_vfiprintf_r+0x1f0>
 800843a:	2300      	movs	r3, #0
 800843c:	f04f 32ff 	mov.w	r2, #4294967295
 8008440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008444:	f10a 0a01 	add.w	sl, sl, #1
 8008448:	9304      	str	r3, [sp, #16]
 800844a:	9307      	str	r3, [sp, #28]
 800844c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008450:	931a      	str	r3, [sp, #104]	; 0x68
 8008452:	4654      	mov	r4, sl
 8008454:	2205      	movs	r2, #5
 8008456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845a:	4854      	ldr	r0, [pc, #336]	; (80085ac <_vfiprintf_r+0x220>)
 800845c:	f7f7 fed0 	bl	8000200 <memchr>
 8008460:	9a04      	ldr	r2, [sp, #16]
 8008462:	b9d8      	cbnz	r0, 800849c <_vfiprintf_r+0x110>
 8008464:	06d1      	lsls	r1, r2, #27
 8008466:	bf44      	itt	mi
 8008468:	2320      	movmi	r3, #32
 800846a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800846e:	0713      	lsls	r3, r2, #28
 8008470:	bf44      	itt	mi
 8008472:	232b      	movmi	r3, #43	; 0x2b
 8008474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008478:	f89a 3000 	ldrb.w	r3, [sl]
 800847c:	2b2a      	cmp	r3, #42	; 0x2a
 800847e:	d015      	beq.n	80084ac <_vfiprintf_r+0x120>
 8008480:	9a07      	ldr	r2, [sp, #28]
 8008482:	4654      	mov	r4, sl
 8008484:	2000      	movs	r0, #0
 8008486:	f04f 0c0a 	mov.w	ip, #10
 800848a:	4621      	mov	r1, r4
 800848c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008490:	3b30      	subs	r3, #48	; 0x30
 8008492:	2b09      	cmp	r3, #9
 8008494:	d94d      	bls.n	8008532 <_vfiprintf_r+0x1a6>
 8008496:	b1b0      	cbz	r0, 80084c6 <_vfiprintf_r+0x13a>
 8008498:	9207      	str	r2, [sp, #28]
 800849a:	e014      	b.n	80084c6 <_vfiprintf_r+0x13a>
 800849c:	eba0 0308 	sub.w	r3, r0, r8
 80084a0:	fa09 f303 	lsl.w	r3, r9, r3
 80084a4:	4313      	orrs	r3, r2
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	46a2      	mov	sl, r4
 80084aa:	e7d2      	b.n	8008452 <_vfiprintf_r+0xc6>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	1d19      	adds	r1, r3, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	9103      	str	r1, [sp, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bfbb      	ittet	lt
 80084b8:	425b      	neglt	r3, r3
 80084ba:	f042 0202 	orrlt.w	r2, r2, #2
 80084be:	9307      	strge	r3, [sp, #28]
 80084c0:	9307      	strlt	r3, [sp, #28]
 80084c2:	bfb8      	it	lt
 80084c4:	9204      	strlt	r2, [sp, #16]
 80084c6:	7823      	ldrb	r3, [r4, #0]
 80084c8:	2b2e      	cmp	r3, #46	; 0x2e
 80084ca:	d10c      	bne.n	80084e6 <_vfiprintf_r+0x15a>
 80084cc:	7863      	ldrb	r3, [r4, #1]
 80084ce:	2b2a      	cmp	r3, #42	; 0x2a
 80084d0:	d134      	bne.n	800853c <_vfiprintf_r+0x1b0>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	1d1a      	adds	r2, r3, #4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	9203      	str	r2, [sp, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	bfb8      	it	lt
 80084de:	f04f 33ff 	movlt.w	r3, #4294967295
 80084e2:	3402      	adds	r4, #2
 80084e4:	9305      	str	r3, [sp, #20]
 80084e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085bc <_vfiprintf_r+0x230>
 80084ea:	7821      	ldrb	r1, [r4, #0]
 80084ec:	2203      	movs	r2, #3
 80084ee:	4650      	mov	r0, sl
 80084f0:	f7f7 fe86 	bl	8000200 <memchr>
 80084f4:	b138      	cbz	r0, 8008506 <_vfiprintf_r+0x17a>
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	eba0 000a 	sub.w	r0, r0, sl
 80084fc:	2240      	movs	r2, #64	; 0x40
 80084fe:	4082      	lsls	r2, r0
 8008500:	4313      	orrs	r3, r2
 8008502:	3401      	adds	r4, #1
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850a:	4829      	ldr	r0, [pc, #164]	; (80085b0 <_vfiprintf_r+0x224>)
 800850c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008510:	2206      	movs	r2, #6
 8008512:	f7f7 fe75 	bl	8000200 <memchr>
 8008516:	2800      	cmp	r0, #0
 8008518:	d03f      	beq.n	800859a <_vfiprintf_r+0x20e>
 800851a:	4b26      	ldr	r3, [pc, #152]	; (80085b4 <_vfiprintf_r+0x228>)
 800851c:	bb1b      	cbnz	r3, 8008566 <_vfiprintf_r+0x1da>
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	3307      	adds	r3, #7
 8008522:	f023 0307 	bic.w	r3, r3, #7
 8008526:	3308      	adds	r3, #8
 8008528:	9303      	str	r3, [sp, #12]
 800852a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852c:	443b      	add	r3, r7
 800852e:	9309      	str	r3, [sp, #36]	; 0x24
 8008530:	e768      	b.n	8008404 <_vfiprintf_r+0x78>
 8008532:	fb0c 3202 	mla	r2, ip, r2, r3
 8008536:	460c      	mov	r4, r1
 8008538:	2001      	movs	r0, #1
 800853a:	e7a6      	b.n	800848a <_vfiprintf_r+0xfe>
 800853c:	2300      	movs	r3, #0
 800853e:	3401      	adds	r4, #1
 8008540:	9305      	str	r3, [sp, #20]
 8008542:	4619      	mov	r1, r3
 8008544:	f04f 0c0a 	mov.w	ip, #10
 8008548:	4620      	mov	r0, r4
 800854a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800854e:	3a30      	subs	r2, #48	; 0x30
 8008550:	2a09      	cmp	r2, #9
 8008552:	d903      	bls.n	800855c <_vfiprintf_r+0x1d0>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0c6      	beq.n	80084e6 <_vfiprintf_r+0x15a>
 8008558:	9105      	str	r1, [sp, #20]
 800855a:	e7c4      	b.n	80084e6 <_vfiprintf_r+0x15a>
 800855c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008560:	4604      	mov	r4, r0
 8008562:	2301      	movs	r3, #1
 8008564:	e7f0      	b.n	8008548 <_vfiprintf_r+0x1bc>
 8008566:	ab03      	add	r3, sp, #12
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	462a      	mov	r2, r5
 800856c:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <_vfiprintf_r+0x22c>)
 800856e:	a904      	add	r1, sp, #16
 8008570:	4630      	mov	r0, r6
 8008572:	f3af 8000 	nop.w
 8008576:	4607      	mov	r7, r0
 8008578:	1c78      	adds	r0, r7, #1
 800857a:	d1d6      	bne.n	800852a <_vfiprintf_r+0x19e>
 800857c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800857e:	07d9      	lsls	r1, r3, #31
 8008580:	d405      	bmi.n	800858e <_vfiprintf_r+0x202>
 8008582:	89ab      	ldrh	r3, [r5, #12]
 8008584:	059a      	lsls	r2, r3, #22
 8008586:	d402      	bmi.n	800858e <_vfiprintf_r+0x202>
 8008588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800858a:	f7ff fc83 	bl	8007e94 <__retarget_lock_release_recursive>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	065b      	lsls	r3, r3, #25
 8008592:	f53f af1d 	bmi.w	80083d0 <_vfiprintf_r+0x44>
 8008596:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008598:	e71c      	b.n	80083d4 <_vfiprintf_r+0x48>
 800859a:	ab03      	add	r3, sp, #12
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	462a      	mov	r2, r5
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <_vfiprintf_r+0x22c>)
 80085a2:	a904      	add	r1, sp, #16
 80085a4:	4630      	mov	r0, r6
 80085a6:	f000 f879 	bl	800869c <_printf_i>
 80085aa:	e7e4      	b.n	8008576 <_vfiprintf_r+0x1ea>
 80085ac:	08008da8 	.word	0x08008da8
 80085b0:	08008db2 	.word	0x08008db2
 80085b4:	00000000 	.word	0x00000000
 80085b8:	08008367 	.word	0x08008367
 80085bc:	08008dae 	.word	0x08008dae

080085c0 <_printf_common>:
 80085c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c4:	4616      	mov	r6, r2
 80085c6:	4699      	mov	r9, r3
 80085c8:	688a      	ldr	r2, [r1, #8]
 80085ca:	690b      	ldr	r3, [r1, #16]
 80085cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	bfb8      	it	lt
 80085d4:	4613      	movlt	r3, r2
 80085d6:	6033      	str	r3, [r6, #0]
 80085d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085dc:	4607      	mov	r7, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	b10a      	cbz	r2, 80085e6 <_printf_common+0x26>
 80085e2:	3301      	adds	r3, #1
 80085e4:	6033      	str	r3, [r6, #0]
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	0699      	lsls	r1, r3, #26
 80085ea:	bf42      	ittt	mi
 80085ec:	6833      	ldrmi	r3, [r6, #0]
 80085ee:	3302      	addmi	r3, #2
 80085f0:	6033      	strmi	r3, [r6, #0]
 80085f2:	6825      	ldr	r5, [r4, #0]
 80085f4:	f015 0506 	ands.w	r5, r5, #6
 80085f8:	d106      	bne.n	8008608 <_printf_common+0x48>
 80085fa:	f104 0a19 	add.w	sl, r4, #25
 80085fe:	68e3      	ldr	r3, [r4, #12]
 8008600:	6832      	ldr	r2, [r6, #0]
 8008602:	1a9b      	subs	r3, r3, r2
 8008604:	42ab      	cmp	r3, r5
 8008606:	dc26      	bgt.n	8008656 <_printf_common+0x96>
 8008608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800860c:	1e13      	subs	r3, r2, #0
 800860e:	6822      	ldr	r2, [r4, #0]
 8008610:	bf18      	it	ne
 8008612:	2301      	movne	r3, #1
 8008614:	0692      	lsls	r2, r2, #26
 8008616:	d42b      	bmi.n	8008670 <_printf_common+0xb0>
 8008618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800861c:	4649      	mov	r1, r9
 800861e:	4638      	mov	r0, r7
 8008620:	47c0      	blx	r8
 8008622:	3001      	adds	r0, #1
 8008624:	d01e      	beq.n	8008664 <_printf_common+0xa4>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	6922      	ldr	r2, [r4, #16]
 800862a:	f003 0306 	and.w	r3, r3, #6
 800862e:	2b04      	cmp	r3, #4
 8008630:	bf02      	ittt	eq
 8008632:	68e5      	ldreq	r5, [r4, #12]
 8008634:	6833      	ldreq	r3, [r6, #0]
 8008636:	1aed      	subeq	r5, r5, r3
 8008638:	68a3      	ldr	r3, [r4, #8]
 800863a:	bf0c      	ite	eq
 800863c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008640:	2500      	movne	r5, #0
 8008642:	4293      	cmp	r3, r2
 8008644:	bfc4      	itt	gt
 8008646:	1a9b      	subgt	r3, r3, r2
 8008648:	18ed      	addgt	r5, r5, r3
 800864a:	2600      	movs	r6, #0
 800864c:	341a      	adds	r4, #26
 800864e:	42b5      	cmp	r5, r6
 8008650:	d11a      	bne.n	8008688 <_printf_common+0xc8>
 8008652:	2000      	movs	r0, #0
 8008654:	e008      	b.n	8008668 <_printf_common+0xa8>
 8008656:	2301      	movs	r3, #1
 8008658:	4652      	mov	r2, sl
 800865a:	4649      	mov	r1, r9
 800865c:	4638      	mov	r0, r7
 800865e:	47c0      	blx	r8
 8008660:	3001      	adds	r0, #1
 8008662:	d103      	bne.n	800866c <_printf_common+0xac>
 8008664:	f04f 30ff 	mov.w	r0, #4294967295
 8008668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866c:	3501      	adds	r5, #1
 800866e:	e7c6      	b.n	80085fe <_printf_common+0x3e>
 8008670:	18e1      	adds	r1, r4, r3
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	2030      	movs	r0, #48	; 0x30
 8008676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800867a:	4422      	add	r2, r4
 800867c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008684:	3302      	adds	r3, #2
 8008686:	e7c7      	b.n	8008618 <_printf_common+0x58>
 8008688:	2301      	movs	r3, #1
 800868a:	4622      	mov	r2, r4
 800868c:	4649      	mov	r1, r9
 800868e:	4638      	mov	r0, r7
 8008690:	47c0      	blx	r8
 8008692:	3001      	adds	r0, #1
 8008694:	d0e6      	beq.n	8008664 <_printf_common+0xa4>
 8008696:	3601      	adds	r6, #1
 8008698:	e7d9      	b.n	800864e <_printf_common+0x8e>
	...

0800869c <_printf_i>:
 800869c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	7e0f      	ldrb	r7, [r1, #24]
 80086a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086a4:	2f78      	cmp	r7, #120	; 0x78
 80086a6:	4691      	mov	r9, r2
 80086a8:	4680      	mov	r8, r0
 80086aa:	460c      	mov	r4, r1
 80086ac:	469a      	mov	sl, r3
 80086ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086b2:	d807      	bhi.n	80086c4 <_printf_i+0x28>
 80086b4:	2f62      	cmp	r7, #98	; 0x62
 80086b6:	d80a      	bhi.n	80086ce <_printf_i+0x32>
 80086b8:	2f00      	cmp	r7, #0
 80086ba:	f000 80d4 	beq.w	8008866 <_printf_i+0x1ca>
 80086be:	2f58      	cmp	r7, #88	; 0x58
 80086c0:	f000 80c0 	beq.w	8008844 <_printf_i+0x1a8>
 80086c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086cc:	e03a      	b.n	8008744 <_printf_i+0xa8>
 80086ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086d2:	2b15      	cmp	r3, #21
 80086d4:	d8f6      	bhi.n	80086c4 <_printf_i+0x28>
 80086d6:	a101      	add	r1, pc, #4	; (adr r1, 80086dc <_printf_i+0x40>)
 80086d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086dc:	08008735 	.word	0x08008735
 80086e0:	08008749 	.word	0x08008749
 80086e4:	080086c5 	.word	0x080086c5
 80086e8:	080086c5 	.word	0x080086c5
 80086ec:	080086c5 	.word	0x080086c5
 80086f0:	080086c5 	.word	0x080086c5
 80086f4:	08008749 	.word	0x08008749
 80086f8:	080086c5 	.word	0x080086c5
 80086fc:	080086c5 	.word	0x080086c5
 8008700:	080086c5 	.word	0x080086c5
 8008704:	080086c5 	.word	0x080086c5
 8008708:	0800884d 	.word	0x0800884d
 800870c:	08008775 	.word	0x08008775
 8008710:	08008807 	.word	0x08008807
 8008714:	080086c5 	.word	0x080086c5
 8008718:	080086c5 	.word	0x080086c5
 800871c:	0800886f 	.word	0x0800886f
 8008720:	080086c5 	.word	0x080086c5
 8008724:	08008775 	.word	0x08008775
 8008728:	080086c5 	.word	0x080086c5
 800872c:	080086c5 	.word	0x080086c5
 8008730:	0800880f 	.word	0x0800880f
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	1d1a      	adds	r2, r3, #4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	602a      	str	r2, [r5, #0]
 800873c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008744:	2301      	movs	r3, #1
 8008746:	e09f      	b.n	8008888 <_printf_i+0x1ec>
 8008748:	6820      	ldr	r0, [r4, #0]
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	0607      	lsls	r7, r0, #24
 800874e:	f103 0104 	add.w	r1, r3, #4
 8008752:	6029      	str	r1, [r5, #0]
 8008754:	d501      	bpl.n	800875a <_printf_i+0xbe>
 8008756:	681e      	ldr	r6, [r3, #0]
 8008758:	e003      	b.n	8008762 <_printf_i+0xc6>
 800875a:	0646      	lsls	r6, r0, #25
 800875c:	d5fb      	bpl.n	8008756 <_printf_i+0xba>
 800875e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008762:	2e00      	cmp	r6, #0
 8008764:	da03      	bge.n	800876e <_printf_i+0xd2>
 8008766:	232d      	movs	r3, #45	; 0x2d
 8008768:	4276      	negs	r6, r6
 800876a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800876e:	485a      	ldr	r0, [pc, #360]	; (80088d8 <_printf_i+0x23c>)
 8008770:	230a      	movs	r3, #10
 8008772:	e012      	b.n	800879a <_printf_i+0xfe>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	1d19      	adds	r1, r3, #4
 800877a:	6029      	str	r1, [r5, #0]
 800877c:	0605      	lsls	r5, r0, #24
 800877e:	d501      	bpl.n	8008784 <_printf_i+0xe8>
 8008780:	681e      	ldr	r6, [r3, #0]
 8008782:	e002      	b.n	800878a <_printf_i+0xee>
 8008784:	0641      	lsls	r1, r0, #25
 8008786:	d5fb      	bpl.n	8008780 <_printf_i+0xe4>
 8008788:	881e      	ldrh	r6, [r3, #0]
 800878a:	4853      	ldr	r0, [pc, #332]	; (80088d8 <_printf_i+0x23c>)
 800878c:	2f6f      	cmp	r7, #111	; 0x6f
 800878e:	bf0c      	ite	eq
 8008790:	2308      	moveq	r3, #8
 8008792:	230a      	movne	r3, #10
 8008794:	2100      	movs	r1, #0
 8008796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800879a:	6865      	ldr	r5, [r4, #4]
 800879c:	60a5      	str	r5, [r4, #8]
 800879e:	2d00      	cmp	r5, #0
 80087a0:	bfa2      	ittt	ge
 80087a2:	6821      	ldrge	r1, [r4, #0]
 80087a4:	f021 0104 	bicge.w	r1, r1, #4
 80087a8:	6021      	strge	r1, [r4, #0]
 80087aa:	b90e      	cbnz	r6, 80087b0 <_printf_i+0x114>
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	d04b      	beq.n	8008848 <_printf_i+0x1ac>
 80087b0:	4615      	mov	r5, r2
 80087b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80087b6:	fb03 6711 	mls	r7, r3, r1, r6
 80087ba:	5dc7      	ldrb	r7, [r0, r7]
 80087bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087c0:	4637      	mov	r7, r6
 80087c2:	42bb      	cmp	r3, r7
 80087c4:	460e      	mov	r6, r1
 80087c6:	d9f4      	bls.n	80087b2 <_printf_i+0x116>
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d10b      	bne.n	80087e4 <_printf_i+0x148>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	07de      	lsls	r6, r3, #31
 80087d0:	d508      	bpl.n	80087e4 <_printf_i+0x148>
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	6861      	ldr	r1, [r4, #4]
 80087d6:	4299      	cmp	r1, r3
 80087d8:	bfde      	ittt	le
 80087da:	2330      	movle	r3, #48	; 0x30
 80087dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087e4:	1b52      	subs	r2, r2, r5
 80087e6:	6122      	str	r2, [r4, #16]
 80087e8:	f8cd a000 	str.w	sl, [sp]
 80087ec:	464b      	mov	r3, r9
 80087ee:	aa03      	add	r2, sp, #12
 80087f0:	4621      	mov	r1, r4
 80087f2:	4640      	mov	r0, r8
 80087f4:	f7ff fee4 	bl	80085c0 <_printf_common>
 80087f8:	3001      	adds	r0, #1
 80087fa:	d14a      	bne.n	8008892 <_printf_i+0x1f6>
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	b004      	add	sp, #16
 8008802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	f043 0320 	orr.w	r3, r3, #32
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	4833      	ldr	r0, [pc, #204]	; (80088dc <_printf_i+0x240>)
 8008810:	2778      	movs	r7, #120	; 0x78
 8008812:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	6829      	ldr	r1, [r5, #0]
 800881a:	061f      	lsls	r7, r3, #24
 800881c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008820:	d402      	bmi.n	8008828 <_printf_i+0x18c>
 8008822:	065f      	lsls	r7, r3, #25
 8008824:	bf48      	it	mi
 8008826:	b2b6      	uxthmi	r6, r6
 8008828:	07df      	lsls	r7, r3, #31
 800882a:	bf48      	it	mi
 800882c:	f043 0320 	orrmi.w	r3, r3, #32
 8008830:	6029      	str	r1, [r5, #0]
 8008832:	bf48      	it	mi
 8008834:	6023      	strmi	r3, [r4, #0]
 8008836:	b91e      	cbnz	r6, 8008840 <_printf_i+0x1a4>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	f023 0320 	bic.w	r3, r3, #32
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	2310      	movs	r3, #16
 8008842:	e7a7      	b.n	8008794 <_printf_i+0xf8>
 8008844:	4824      	ldr	r0, [pc, #144]	; (80088d8 <_printf_i+0x23c>)
 8008846:	e7e4      	b.n	8008812 <_printf_i+0x176>
 8008848:	4615      	mov	r5, r2
 800884a:	e7bd      	b.n	80087c8 <_printf_i+0x12c>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	6826      	ldr	r6, [r4, #0]
 8008850:	6961      	ldr	r1, [r4, #20]
 8008852:	1d18      	adds	r0, r3, #4
 8008854:	6028      	str	r0, [r5, #0]
 8008856:	0635      	lsls	r5, r6, #24
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	d501      	bpl.n	8008860 <_printf_i+0x1c4>
 800885c:	6019      	str	r1, [r3, #0]
 800885e:	e002      	b.n	8008866 <_printf_i+0x1ca>
 8008860:	0670      	lsls	r0, r6, #25
 8008862:	d5fb      	bpl.n	800885c <_printf_i+0x1c0>
 8008864:	8019      	strh	r1, [r3, #0]
 8008866:	2300      	movs	r3, #0
 8008868:	6123      	str	r3, [r4, #16]
 800886a:	4615      	mov	r5, r2
 800886c:	e7bc      	b.n	80087e8 <_printf_i+0x14c>
 800886e:	682b      	ldr	r3, [r5, #0]
 8008870:	1d1a      	adds	r2, r3, #4
 8008872:	602a      	str	r2, [r5, #0]
 8008874:	681d      	ldr	r5, [r3, #0]
 8008876:	6862      	ldr	r2, [r4, #4]
 8008878:	2100      	movs	r1, #0
 800887a:	4628      	mov	r0, r5
 800887c:	f7f7 fcc0 	bl	8000200 <memchr>
 8008880:	b108      	cbz	r0, 8008886 <_printf_i+0x1ea>
 8008882:	1b40      	subs	r0, r0, r5
 8008884:	6060      	str	r0, [r4, #4]
 8008886:	6863      	ldr	r3, [r4, #4]
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	2300      	movs	r3, #0
 800888c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008890:	e7aa      	b.n	80087e8 <_printf_i+0x14c>
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	462a      	mov	r2, r5
 8008896:	4649      	mov	r1, r9
 8008898:	4640      	mov	r0, r8
 800889a:	47d0      	blx	sl
 800889c:	3001      	adds	r0, #1
 800889e:	d0ad      	beq.n	80087fc <_printf_i+0x160>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	079b      	lsls	r3, r3, #30
 80088a4:	d413      	bmi.n	80088ce <_printf_i+0x232>
 80088a6:	68e0      	ldr	r0, [r4, #12]
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	4298      	cmp	r0, r3
 80088ac:	bfb8      	it	lt
 80088ae:	4618      	movlt	r0, r3
 80088b0:	e7a6      	b.n	8008800 <_printf_i+0x164>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4632      	mov	r2, r6
 80088b6:	4649      	mov	r1, r9
 80088b8:	4640      	mov	r0, r8
 80088ba:	47d0      	blx	sl
 80088bc:	3001      	adds	r0, #1
 80088be:	d09d      	beq.n	80087fc <_printf_i+0x160>
 80088c0:	3501      	adds	r5, #1
 80088c2:	68e3      	ldr	r3, [r4, #12]
 80088c4:	9903      	ldr	r1, [sp, #12]
 80088c6:	1a5b      	subs	r3, r3, r1
 80088c8:	42ab      	cmp	r3, r5
 80088ca:	dcf2      	bgt.n	80088b2 <_printf_i+0x216>
 80088cc:	e7eb      	b.n	80088a6 <_printf_i+0x20a>
 80088ce:	2500      	movs	r5, #0
 80088d0:	f104 0619 	add.w	r6, r4, #25
 80088d4:	e7f5      	b.n	80088c2 <_printf_i+0x226>
 80088d6:	bf00      	nop
 80088d8:	08008db9 	.word	0x08008db9
 80088dc:	08008dca 	.word	0x08008dca

080088e0 <__sflush_r>:
 80088e0:	898a      	ldrh	r2, [r1, #12]
 80088e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e6:	4605      	mov	r5, r0
 80088e8:	0710      	lsls	r0, r2, #28
 80088ea:	460c      	mov	r4, r1
 80088ec:	d458      	bmi.n	80089a0 <__sflush_r+0xc0>
 80088ee:	684b      	ldr	r3, [r1, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc05      	bgt.n	8008900 <__sflush_r+0x20>
 80088f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dc02      	bgt.n	8008900 <__sflush_r+0x20>
 80088fa:	2000      	movs	r0, #0
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008902:	2e00      	cmp	r6, #0
 8008904:	d0f9      	beq.n	80088fa <__sflush_r+0x1a>
 8008906:	2300      	movs	r3, #0
 8008908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800890c:	682f      	ldr	r7, [r5, #0]
 800890e:	6a21      	ldr	r1, [r4, #32]
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	d032      	beq.n	800897a <__sflush_r+0x9a>
 8008914:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	075a      	lsls	r2, r3, #29
 800891a:	d505      	bpl.n	8008928 <__sflush_r+0x48>
 800891c:	6863      	ldr	r3, [r4, #4]
 800891e:	1ac0      	subs	r0, r0, r3
 8008920:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008922:	b10b      	cbz	r3, 8008928 <__sflush_r+0x48>
 8008924:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008926:	1ac0      	subs	r0, r0, r3
 8008928:	2300      	movs	r3, #0
 800892a:	4602      	mov	r2, r0
 800892c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800892e:	6a21      	ldr	r1, [r4, #32]
 8008930:	4628      	mov	r0, r5
 8008932:	47b0      	blx	r6
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	d106      	bne.n	8008948 <__sflush_r+0x68>
 800893a:	6829      	ldr	r1, [r5, #0]
 800893c:	291d      	cmp	r1, #29
 800893e:	d82b      	bhi.n	8008998 <__sflush_r+0xb8>
 8008940:	4a29      	ldr	r2, [pc, #164]	; (80089e8 <__sflush_r+0x108>)
 8008942:	410a      	asrs	r2, r1
 8008944:	07d6      	lsls	r6, r2, #31
 8008946:	d427      	bmi.n	8008998 <__sflush_r+0xb8>
 8008948:	2200      	movs	r2, #0
 800894a:	6062      	str	r2, [r4, #4]
 800894c:	04d9      	lsls	r1, r3, #19
 800894e:	6922      	ldr	r2, [r4, #16]
 8008950:	6022      	str	r2, [r4, #0]
 8008952:	d504      	bpl.n	800895e <__sflush_r+0x7e>
 8008954:	1c42      	adds	r2, r0, #1
 8008956:	d101      	bne.n	800895c <__sflush_r+0x7c>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b903      	cbnz	r3, 800895e <__sflush_r+0x7e>
 800895c:	6560      	str	r0, [r4, #84]	; 0x54
 800895e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008960:	602f      	str	r7, [r5, #0]
 8008962:	2900      	cmp	r1, #0
 8008964:	d0c9      	beq.n	80088fa <__sflush_r+0x1a>
 8008966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800896a:	4299      	cmp	r1, r3
 800896c:	d002      	beq.n	8008974 <__sflush_r+0x94>
 800896e:	4628      	mov	r0, r5
 8008970:	f7ff fa92 	bl	8007e98 <_free_r>
 8008974:	2000      	movs	r0, #0
 8008976:	6360      	str	r0, [r4, #52]	; 0x34
 8008978:	e7c0      	b.n	80088fc <__sflush_r+0x1c>
 800897a:	2301      	movs	r3, #1
 800897c:	4628      	mov	r0, r5
 800897e:	47b0      	blx	r6
 8008980:	1c41      	adds	r1, r0, #1
 8008982:	d1c8      	bne.n	8008916 <__sflush_r+0x36>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0c5      	beq.n	8008916 <__sflush_r+0x36>
 800898a:	2b1d      	cmp	r3, #29
 800898c:	d001      	beq.n	8008992 <__sflush_r+0xb2>
 800898e:	2b16      	cmp	r3, #22
 8008990:	d101      	bne.n	8008996 <__sflush_r+0xb6>
 8008992:	602f      	str	r7, [r5, #0]
 8008994:	e7b1      	b.n	80088fa <__sflush_r+0x1a>
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	e7ad      	b.n	80088fc <__sflush_r+0x1c>
 80089a0:	690f      	ldr	r7, [r1, #16]
 80089a2:	2f00      	cmp	r7, #0
 80089a4:	d0a9      	beq.n	80088fa <__sflush_r+0x1a>
 80089a6:	0793      	lsls	r3, r2, #30
 80089a8:	680e      	ldr	r6, [r1, #0]
 80089aa:	bf08      	it	eq
 80089ac:	694b      	ldreq	r3, [r1, #20]
 80089ae:	600f      	str	r7, [r1, #0]
 80089b0:	bf18      	it	ne
 80089b2:	2300      	movne	r3, #0
 80089b4:	eba6 0807 	sub.w	r8, r6, r7
 80089b8:	608b      	str	r3, [r1, #8]
 80089ba:	f1b8 0f00 	cmp.w	r8, #0
 80089be:	dd9c      	ble.n	80088fa <__sflush_r+0x1a>
 80089c0:	6a21      	ldr	r1, [r4, #32]
 80089c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089c4:	4643      	mov	r3, r8
 80089c6:	463a      	mov	r2, r7
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b0      	blx	r6
 80089cc:	2800      	cmp	r0, #0
 80089ce:	dc06      	bgt.n	80089de <__sflush_r+0xfe>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d6:	81a3      	strh	r3, [r4, #12]
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295
 80089dc:	e78e      	b.n	80088fc <__sflush_r+0x1c>
 80089de:	4407      	add	r7, r0
 80089e0:	eba8 0800 	sub.w	r8, r8, r0
 80089e4:	e7e9      	b.n	80089ba <__sflush_r+0xda>
 80089e6:	bf00      	nop
 80089e8:	dfbffffe 	.word	0xdfbffffe

080089ec <_fflush_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	690b      	ldr	r3, [r1, #16]
 80089f0:	4605      	mov	r5, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b913      	cbnz	r3, 80089fc <_fflush_r+0x10>
 80089f6:	2500      	movs	r5, #0
 80089f8:	4628      	mov	r0, r5
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	b118      	cbz	r0, 8008a06 <_fflush_r+0x1a>
 80089fe:	6a03      	ldr	r3, [r0, #32]
 8008a00:	b90b      	cbnz	r3, 8008a06 <_fflush_r+0x1a>
 8008a02:	f7fe fffd 	bl	8007a00 <__sinit>
 8008a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0f3      	beq.n	80089f6 <_fflush_r+0xa>
 8008a0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a10:	07d0      	lsls	r0, r2, #31
 8008a12:	d404      	bmi.n	8008a1e <_fflush_r+0x32>
 8008a14:	0599      	lsls	r1, r3, #22
 8008a16:	d402      	bmi.n	8008a1e <_fflush_r+0x32>
 8008a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a1a:	f7ff fa3a 	bl	8007e92 <__retarget_lock_acquire_recursive>
 8008a1e:	4628      	mov	r0, r5
 8008a20:	4621      	mov	r1, r4
 8008a22:	f7ff ff5d 	bl	80088e0 <__sflush_r>
 8008a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a28:	07da      	lsls	r2, r3, #31
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	d4e4      	bmi.n	80089f8 <_fflush_r+0xc>
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	059b      	lsls	r3, r3, #22
 8008a32:	d4e1      	bmi.n	80089f8 <_fflush_r+0xc>
 8008a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a36:	f7ff fa2d 	bl	8007e94 <__retarget_lock_release_recursive>
 8008a3a:	e7dd      	b.n	80089f8 <_fflush_r+0xc>

08008a3c <__swhatbuf_r>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	460c      	mov	r4, r1
 8008a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a44:	2900      	cmp	r1, #0
 8008a46:	b096      	sub	sp, #88	; 0x58
 8008a48:	4615      	mov	r5, r2
 8008a4a:	461e      	mov	r6, r3
 8008a4c:	da0d      	bge.n	8008a6a <__swhatbuf_r+0x2e>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a54:	f04f 0100 	mov.w	r1, #0
 8008a58:	bf0c      	ite	eq
 8008a5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a5e:	2340      	movne	r3, #64	; 0x40
 8008a60:	2000      	movs	r0, #0
 8008a62:	6031      	str	r1, [r6, #0]
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	b016      	add	sp, #88	; 0x58
 8008a68:	bd70      	pop	{r4, r5, r6, pc}
 8008a6a:	466a      	mov	r2, sp
 8008a6c:	f000 f862 	bl	8008b34 <_fstat_r>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	dbec      	blt.n	8008a4e <__swhatbuf_r+0x12>
 8008a74:	9901      	ldr	r1, [sp, #4]
 8008a76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a7e:	4259      	negs	r1, r3
 8008a80:	4159      	adcs	r1, r3
 8008a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a86:	e7eb      	b.n	8008a60 <__swhatbuf_r+0x24>

08008a88 <__smakebuf_r>:
 8008a88:	898b      	ldrh	r3, [r1, #12]
 8008a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a8c:	079d      	lsls	r5, r3, #30
 8008a8e:	4606      	mov	r6, r0
 8008a90:	460c      	mov	r4, r1
 8008a92:	d507      	bpl.n	8008aa4 <__smakebuf_r+0x1c>
 8008a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	6163      	str	r3, [r4, #20]
 8008aa0:	b002      	add	sp, #8
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	ab01      	add	r3, sp, #4
 8008aa6:	466a      	mov	r2, sp
 8008aa8:	f7ff ffc8 	bl	8008a3c <__swhatbuf_r>
 8008aac:	9900      	ldr	r1, [sp, #0]
 8008aae:	4605      	mov	r5, r0
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f7ff fa5d 	bl	8007f70 <_malloc_r>
 8008ab6:	b948      	cbnz	r0, 8008acc <__smakebuf_r+0x44>
 8008ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008abc:	059a      	lsls	r2, r3, #22
 8008abe:	d4ef      	bmi.n	8008aa0 <__smakebuf_r+0x18>
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	f043 0302 	orr.w	r3, r3, #2
 8008ac8:	81a3      	strh	r3, [r4, #12]
 8008aca:	e7e3      	b.n	8008a94 <__smakebuf_r+0xc>
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	6020      	str	r0, [r4, #0]
 8008ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	9b00      	ldr	r3, [sp, #0]
 8008ad8:	6163      	str	r3, [r4, #20]
 8008ada:	9b01      	ldr	r3, [sp, #4]
 8008adc:	6120      	str	r0, [r4, #16]
 8008ade:	b15b      	cbz	r3, 8008af8 <__smakebuf_r+0x70>
 8008ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f000 f837 	bl	8008b58 <_isatty_r>
 8008aea:	b128      	cbz	r0, 8008af8 <__smakebuf_r+0x70>
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	f023 0303 	bic.w	r3, r3, #3
 8008af2:	f043 0301 	orr.w	r3, r3, #1
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	431d      	orrs	r5, r3
 8008afc:	81a5      	strh	r5, [r4, #12]
 8008afe:	e7cf      	b.n	8008aa0 <__smakebuf_r+0x18>

08008b00 <memmove>:
 8008b00:	4288      	cmp	r0, r1
 8008b02:	b510      	push	{r4, lr}
 8008b04:	eb01 0402 	add.w	r4, r1, r2
 8008b08:	d902      	bls.n	8008b10 <memmove+0x10>
 8008b0a:	4284      	cmp	r4, r0
 8008b0c:	4623      	mov	r3, r4
 8008b0e:	d807      	bhi.n	8008b20 <memmove+0x20>
 8008b10:	1e43      	subs	r3, r0, #1
 8008b12:	42a1      	cmp	r1, r4
 8008b14:	d008      	beq.n	8008b28 <memmove+0x28>
 8008b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b1e:	e7f8      	b.n	8008b12 <memmove+0x12>
 8008b20:	4402      	add	r2, r0
 8008b22:	4601      	mov	r1, r0
 8008b24:	428a      	cmp	r2, r1
 8008b26:	d100      	bne.n	8008b2a <memmove+0x2a>
 8008b28:	bd10      	pop	{r4, pc}
 8008b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b32:	e7f7      	b.n	8008b24 <memmove+0x24>

08008b34 <_fstat_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d07      	ldr	r5, [pc, #28]	; (8008b54 <_fstat_r+0x20>)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	4608      	mov	r0, r1
 8008b3e:	4611      	mov	r1, r2
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	f7f9 f9c6 	bl	8001ed2 <_fstat>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d102      	bne.n	8008b50 <_fstat_r+0x1c>
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	b103      	cbz	r3, 8008b50 <_fstat_r+0x1c>
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	bf00      	nop
 8008b54:	200008d8 	.word	0x200008d8

08008b58 <_isatty_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d06      	ldr	r5, [pc, #24]	; (8008b74 <_isatty_r+0x1c>)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4604      	mov	r4, r0
 8008b60:	4608      	mov	r0, r1
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	f7f9 f9c5 	bl	8001ef2 <_isatty>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d102      	bne.n	8008b72 <_isatty_r+0x1a>
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	b103      	cbz	r3, 8008b72 <_isatty_r+0x1a>
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	200008d8 	.word	0x200008d8

08008b78 <_sbrk_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4d06      	ldr	r5, [pc, #24]	; (8008b94 <_sbrk_r+0x1c>)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	f7f9 f9ce 	bl	8001f24 <_sbrk>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_sbrk_r+0x1a>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_sbrk_r+0x1a>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	200008d8 	.word	0x200008d8

08008b98 <memcpy>:
 8008b98:	440a      	add	r2, r1
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba0:	d100      	bne.n	8008ba4 <memcpy+0xc>
 8008ba2:	4770      	bx	lr
 8008ba4:	b510      	push	{r4, lr}
 8008ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bae:	4291      	cmp	r1, r2
 8008bb0:	d1f9      	bne.n	8008ba6 <memcpy+0xe>
 8008bb2:	bd10      	pop	{r4, pc}

08008bb4 <_realloc_r>:
 8008bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb8:	4680      	mov	r8, r0
 8008bba:	4614      	mov	r4, r2
 8008bbc:	460e      	mov	r6, r1
 8008bbe:	b921      	cbnz	r1, 8008bca <_realloc_r+0x16>
 8008bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	f7ff b9d3 	b.w	8007f70 <_malloc_r>
 8008bca:	b92a      	cbnz	r2, 8008bd8 <_realloc_r+0x24>
 8008bcc:	f7ff f964 	bl	8007e98 <_free_r>
 8008bd0:	4625      	mov	r5, r4
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd8:	f000 f81b 	bl	8008c12 <_malloc_usable_size_r>
 8008bdc:	4284      	cmp	r4, r0
 8008bde:	4607      	mov	r7, r0
 8008be0:	d802      	bhi.n	8008be8 <_realloc_r+0x34>
 8008be2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008be6:	d812      	bhi.n	8008c0e <_realloc_r+0x5a>
 8008be8:	4621      	mov	r1, r4
 8008bea:	4640      	mov	r0, r8
 8008bec:	f7ff f9c0 	bl	8007f70 <_malloc_r>
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0ed      	beq.n	8008bd2 <_realloc_r+0x1e>
 8008bf6:	42bc      	cmp	r4, r7
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	bf28      	it	cs
 8008bfe:	463a      	movcs	r2, r7
 8008c00:	f7ff ffca 	bl	8008b98 <memcpy>
 8008c04:	4631      	mov	r1, r6
 8008c06:	4640      	mov	r0, r8
 8008c08:	f7ff f946 	bl	8007e98 <_free_r>
 8008c0c:	e7e1      	b.n	8008bd2 <_realloc_r+0x1e>
 8008c0e:	4635      	mov	r5, r6
 8008c10:	e7df      	b.n	8008bd2 <_realloc_r+0x1e>

08008c12 <_malloc_usable_size_r>:
 8008c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c16:	1f18      	subs	r0, r3, #4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	bfbc      	itt	lt
 8008c1c:	580b      	ldrlt	r3, [r1, r0]
 8008c1e:	18c0      	addlt	r0, r0, r3
 8008c20:	4770      	bx	lr
	...

08008c24 <_init>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	bf00      	nop
 8008c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2a:	bc08      	pop	{r3}
 8008c2c:	469e      	mov	lr, r3
 8008c2e:	4770      	bx	lr

08008c30 <_fini>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	bf00      	nop
 8008c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c36:	bc08      	pop	{r3}
 8008c38:	469e      	mov	lr, r3
 8008c3a:	4770      	bx	lr
