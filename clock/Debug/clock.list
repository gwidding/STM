
clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009560  08009560  000202e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009560  08009560  00019560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009568  08009568  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800956c  0800956c  0001956c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08009570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202e4  2**0
                  CONTENTS
 10 .bss          00000668  200002e4  200002e4  000202e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000094c  2000094c  000202e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019dfe  00000000  00000000  00020357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003680  00000000  00000000  0003a155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001798  00000000  00000000  0003d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000128b  00000000  00000000  0003ef70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028def  00000000  00000000  000401fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c8d7  00000000  00000000  00068fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8c30  00000000  00000000  000858c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006ebc  00000000  00000000  0017e4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001853b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009390 	.word	0x08009390

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002e8 	.word	0x200002e8
 80001ec:	08009390 	.word	0x08009390

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f007 f9cb 	bl	800796a <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f004 f977 	bl	80048dc <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f007 fe55 	bl	80082b4 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f007 f9a4 	bl	800796a <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f007 f99c 	bl	800796a <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f007 f98c 	bl	800796a <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	080093b8 	.word	0x080093b8
 8000660:	200006e4 	.word	0x200006e4
 8000664:	200005e0 	.word	0x200005e0
 8000668:	080093a8 	.word	0x080093a8
 800066c:	080093b0 	.word	0x080093b0
 8000670:	080093b4 	.word	0x080093b4

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f004 f923 	bl	80048dc <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f003 ffec 	bl	80046e0 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fd9d 	bl	800224c <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200005e0 	.word	0x200005e0

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <_write>:
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <_write+0x28>)
 80007f0:	f007 f8bb 	bl	800796a <HAL_UART_Transmit>
	return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200006e4 	.word	0x200006e4

08000804 <update_nvitems>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef update_nvitems(void)
{
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b08e      	sub	sp, #56	; 0x38
 8000808:	af00      	add	r7, sp, #0
	uint32_t FirstSector,NbOfSectors,SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error= HAL_OK;
 800080a:	2300      	movs	r3, #0
 800080c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    uint32_t Address,i;
    uint64_t Data;
    uint8_t *ptr;

	HAL_FLASH_Unlock();
 8000810:	f003 f960 	bl	8003ad4 <HAL_FLASH_Unlock>
	FirstSector = FLASH_SECTOR_11;
 8000814:	230b      	movs	r3, #11
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector        = FirstSector;
 8000824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000826:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8000828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082a:	60fb      	str	r3, [r7, #12]

	error = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 800082c:	f107 0214 	add.w	r2, r7, #20
 8000830:	463b      	mov	r3, r7
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fabf 	bl	8003db8 <HAL_FLASHEx_Erase>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(error != HAL_OK)
 8000840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <update_nvitems+0x4a>
	{
		return error;
 8000848:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800084c:	e02c      	b.n	80008a8 <update_nvitems+0xa4>
	}

	ptr = (uint8_t*)&default_nvitem;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <update_nvitems+0xac>)
 8000850:	627b      	str	r3, [r7, #36]	; 0x24

	for(i=0;i<sizeof(NVitemTypeDef);i++)
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
 8000856:	e022      	b.n	800089e <update_nvitems+0x9a>
	{
		Address = (uint8_t*)nv_items+i;
 8000858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800085e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8000862:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*)ptr+ i);
 8000864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2200      	movs	r2, #0
 8000870:	461c      	mov	r4, r3
 8000872:	4615      	mov	r5, r2
 8000874:	e9c7 4506 	strd	r4, r5, [r7, #24]
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,Address,Data);
 8000878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800087c:	6a39      	ldr	r1, [r7, #32]
 800087e:	2000      	movs	r0, #0
 8000880:	f003 f8d4 	bl	8003a2c <HAL_FLASH_Program>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(error != HAL_OK)
 800088a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <update_nvitems+0x94>
		{
			return error;
 8000892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000896:	e007      	b.n	80008a8 <update_nvitems+0xa4>
	for(i=0;i<sizeof(NVitemTypeDef);i++)
 8000898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089a:	3301      	adds	r3, #1
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
 800089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a0:	2b43      	cmp	r3, #67	; 0x43
 80008a2:	d9d9      	bls.n	8000858 <update_nvitems+0x54>
		}
	}

	HAL_FLASH_Lock();
 80008a4:	f003 f938 	bl	8003b18 <HAL_FLASH_Lock>
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3738      	adds	r7, #56	; 0x38
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bdb0      	pop	{r4, r5, r7, pc}
 80008b0:	20000000 	.word	0x20000000

080008b4 <get_time>:
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
RTC_AlarmTypeDef aTime;

void get_time(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008ba:	2200      	movs	r2, #0
 80008bc:	4911      	ldr	r1, [pc, #68]	; (8000904 <get_time+0x50>)
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <get_time+0x54>)
 80008c0:	f005 fb26 	bl	8005f10 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008c4:	2200      	movs	r2, #0
 80008c6:	4911      	ldr	r1, [pc, #68]	; (800090c <get_time+0x58>)
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <get_time+0x54>)
 80008ca:	f005 fc03 	bl	80060d4 <HAL_RTC_GetDate>
	sprintf((char*)showTime, "%s %02d : %02d : %02d      ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <get_time+0x50>)
 80008d0:	78db      	ldrb	r3, [r3, #3]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <get_time+0x5c>)
 80008dc:	441a      	add	r2, r3
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <get_time+0x50>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <get_time+0x50>)
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <get_time+0x50>)
 80008ec:	789b      	ldrb	r3, [r3, #2]
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	9100      	str	r1, [sp, #0]
 80008f2:	4603      	mov	r3, r0
 80008f4:	4907      	ldr	r1, [pc, #28]	; (8000914 <get_time+0x60>)
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <get_time+0x64>)
 80008f8:	f007 fd10 	bl	800831c <siprintf>
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000774 	.word	0x20000774
 8000908:	20000634 	.word	0x20000634
 800090c:	20000788 	.word	0x20000788
 8000910:	20000274 	.word	0x20000274
 8000914:	080093f0 	.word	0x080093f0
 8000918:	2000072c 	.word	0x2000072c

0800091c <get_alarm>:
void get_alarm(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af02      	add	r7, sp, #8
	HAL_RTC_GetAlarm(&hrtc, &aTime, RTC_CR_ALRAE, RTC_FORMAT_BIN);
 8000922:	2300      	movs	r3, #0
 8000924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000928:	490e      	ldr	r1, [pc, #56]	; (8000964 <get_alarm+0x48>)
 800092a:	480f      	ldr	r0, [pc, #60]	; (8000968 <get_alarm+0x4c>)
 800092c:	f005 fd64 	bl	80063f8 <HAL_RTC_GetAlarm>
	sprintf((char*)alarmTime, "%s %02d : %02d : %02d      ", ampm[aTime.AlarmTime.TimeFormat], aTime.AlarmTime.Hours, aTime.AlarmTime.Minutes, aTime.AlarmTime.Seconds);
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <get_alarm+0x48>)
 8000932:	78db      	ldrb	r3, [r3, #3]
 8000934:	461a      	mov	r2, r3
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	4a0b      	ldr	r2, [pc, #44]	; (800096c <get_alarm+0x50>)
 800093e:	441a      	add	r2, r3
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <get_alarm+0x48>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <get_alarm+0x48>)
 8000948:	785b      	ldrb	r3, [r3, #1]
 800094a:	4619      	mov	r1, r3
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <get_alarm+0x48>)
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	9100      	str	r1, [sp, #0]
 8000954:	4603      	mov	r3, r0
 8000956:	4906      	ldr	r1, [pc, #24]	; (8000970 <get_alarm+0x54>)
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <get_alarm+0x58>)
 800095a:	f007 fcdf 	bl	800831c <siprintf>
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000078c 	.word	0x2000078c
 8000968:	20000634 	.word	0x20000634
 800096c:	20000274 	.word	0x20000274
 8000970:	080093f0 	.word	0x080093f0
 8000974:	2000074c 	.word	0x2000074c

08000978 <time_display>:

void time_display(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  if (current_state.mode == NORMAL_STATE) {
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <time_display+0xac>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d112      	bne.n	80009aa <time_display+0x32>
	  get_time();
 8000984:	f7ff ff96 	bl	80008b4 <get_time>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	204e      	movs	r0, #78	; 0x4e
 800098c:	f7ff fec8 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "CLOCK              ");
 8000990:	4925      	ldr	r1, [pc, #148]	; (8000a28 <time_display+0xb0>)
 8000992:	204e      	movs	r0, #78	; 0x4e
 8000994:	f7ff ff05 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000998:	21c0      	movs	r1, #192	; 0xc0
 800099a:	204e      	movs	r0, #78	; 0x4e
 800099c:	f7ff fec0 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 80009a0:	4922      	ldr	r1, [pc, #136]	; (8000a2c <time_display+0xb4>)
 80009a2:	204e      	movs	r0, #78	; 0x4e
 80009a4:	f7ff fefd 	bl	80007a2 <LCD_SendString>
  else if (current_state.mode == MUSIC_SELECT) {
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
	  LCD_SendString(LCD_ADDR, "Music Select       ");
	  music_select();
  }
}
 80009a8:	e039      	b.n	8000a1e <time_display+0xa6>
  else if (current_state.mode == TIME_SETTING){
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <time_display+0xac>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d110      	bne.n	80009d4 <time_display+0x5c>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	204e      	movs	r0, #78	; 0x4e
 80009b6:	f7ff feb3 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Time Setting      ");
 80009ba:	491d      	ldr	r1, [pc, #116]	; (8000a30 <time_display+0xb8>)
 80009bc:	204e      	movs	r0, #78	; 0x4e
 80009be:	f7ff fef0 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80009c2:	21c0      	movs	r1, #192	; 0xc0
 80009c4:	204e      	movs	r0, #78	; 0x4e
 80009c6:	f7ff feab 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 80009ca:	4918      	ldr	r1, [pc, #96]	; (8000a2c <time_display+0xb4>)
 80009cc:	204e      	movs	r0, #78	; 0x4e
 80009ce:	f7ff fee8 	bl	80007a2 <LCD_SendString>
}
 80009d2:	e024      	b.n	8000a1e <time_display+0xa6>
  else if (current_state.mode == ALARM_TIME_SETTING) {
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <time_display+0xac>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d112      	bne.n	8000a02 <time_display+0x8a>
	  get_alarm();
 80009dc:	f7ff ff9e 	bl	800091c <get_alarm>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	204e      	movs	r0, #78	; 0x4e
 80009e4:	f7ff fe9c 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Alarm Time       ");
 80009e8:	4912      	ldr	r1, [pc, #72]	; (8000a34 <time_display+0xbc>)
 80009ea:	204e      	movs	r0, #78	; 0x4e
 80009ec:	f7ff fed9 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80009f0:	21c0      	movs	r1, #192	; 0xc0
 80009f2:	204e      	movs	r0, #78	; 0x4e
 80009f4:	f7ff fe94 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, alarmTime);
 80009f8:	490f      	ldr	r1, [pc, #60]	; (8000a38 <time_display+0xc0>)
 80009fa:	204e      	movs	r0, #78	; 0x4e
 80009fc:	f7ff fed1 	bl	80007a2 <LCD_SendString>
}
 8000a00:	e00d      	b.n	8000a1e <time_display+0xa6>
  else if (current_state.mode == MUSIC_SELECT) {
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <time_display+0xac>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d109      	bne.n	8000a1e <time_display+0xa6>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	204e      	movs	r0, #78	; 0x4e
 8000a0e:	f7ff fe87 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Music Select       ");
 8000a12:	490a      	ldr	r1, [pc, #40]	; (8000a3c <time_display+0xc4>)
 8000a14:	204e      	movs	r0, #78	; 0x4e
 8000a16:	f7ff fec4 	bl	80007a2 <LCD_SendString>
	  music_select();
 8000a1a:	f000 fa3d 	bl	8000e98 <music_select>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000308 	.word	0x20000308
 8000a28:	0800940c 	.word	0x0800940c
 8000a2c:	2000072c 	.word	0x2000072c
 8000a30:	08009420 	.word	0x08009420
 8000a34:	08009434 	.word	0x08009434
 8000a38:	2000074c 	.word	0x2000074c
 8000a3c:	08009448 	.word	0x08009448

08000a40 <HAL_GPIO_EXTI_Callback>:
	SECOND_PULL
} click_state;
enum CLICK_STATE click_state = NO_CLICK;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) {
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	2b80      	cmp	r3, #128	; 0x80
 8000a4e:	f040 8092 	bne.w	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
        level = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	4849      	ldr	r0, [pc, #292]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a56:	f003 fc9b 	bl	8004390 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a60:	601a      	str	r2, [r3, #0]
    	if (seq > 0) {
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x144>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d010      	beq.n	8000a8c <HAL_GPIO_EXTI_Callback+0x4c>
    		seq = alarm_music[current_state.music_num].music_length;
 8000a6a:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	4947      	ldr	r1, [pc, #284]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	440b      	add	r3, r1
 8000a7a:	3314      	adds	r3, #20
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x144>)
 8000a82:	701a      	strb	r2, [r3, #0]
    		if (level == 1) return;
 8000a84:	4b3e      	ldr	r3, [pc, #248]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	e074      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
    	}
    	else {
			currentTime = HAL_GetTick();
 8000a8c:	f001 fbd2 	bl	8002234 <HAL_GetTick>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a3f      	ldr	r2, [pc, #252]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x150>)
 8000a94:	6013      	str	r3, [r2, #0]
			interval = currentTime - lastTime;
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x150>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x154>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	4a3d      	ldr	r2, [pc, #244]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x158>)
 8000aa2:	6013      	str	r3, [r2, #0]
			lastTime = currentTime;
 8000aa4:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x150>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a3a      	ldr	r2, [pc, #232]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x154>)
 8000aaa:	6013      	str	r3, [r2, #0]

			if (interval > 50) {
 8000aac:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x158>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b32      	cmp	r3, #50	; 0x32
 8000ab2:	d960      	bls.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
				if (level == 0 && (click_state == NO_CLICK || click_state == SECOND_PULL)) {
 8000ab4:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d110      	bne.n	8000ade <HAL_GPIO_EXTI_Callback+0x9e>
 8000abc:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_EXTI_Callback+0x8c>
 8000ac4:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d108      	bne.n	8000ade <HAL_GPIO_EXTI_Callback+0x9e>
					click_state = FIRST_PUSH;
 8000acc:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
					ctime = HAL_GetTick();
 8000ad2:	f001 fbaf 	bl	8002234 <HAL_GetTick>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a31      	ldr	r2, [pc, #196]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x160>)
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	e04b      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
				}
				else if (level == 1 && click_state == FIRST_PUSH) {
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d121      	bne.n	8000b2a <HAL_GPIO_EXTI_Callback+0xea>
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d11d      	bne.n	8000b2a <HAL_GPIO_EXTI_Callback+0xea>
					click_state = FIRST_PULL;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	701a      	strb	r2, [r3, #0]
					ltime = HAL_GetTick();
 8000af4:	f001 fb9e 	bl	8002234 <HAL_GetTick>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x164>)
 8000afc:	6013      	str	r3, [r2, #0]
					if (ltime - ctime > 1000 && current_state.mode == NORMAL_STATE) {
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x164>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x160>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b0c:	d932      	bls.n	8000b74 <HAL_GPIO_EXTI_Callback+0x134>
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d12e      	bne.n	8000b74 <HAL_GPIO_EXTI_Callback+0x134>
						printf("Long click~~~~~~~~\r\n");
 8000b16:	4824      	ldr	r0, [pc, #144]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0x168>)
 8000b18:	f007 fbc4 	bl	80082a4 <puts>
						click_state = NO_CLICK;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
						current_state.mode = ALARM_TIME_SETTING;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	701a      	strb	r2, [r3, #0]
					if (ltime - ctime > 1000 && current_state.mode == NORMAL_STATE) {
 8000b28:	e024      	b.n	8000b74 <HAL_GPIO_EXTI_Callback+0x134>
					}
					else {
		//				printf("first pull \r\n");
					}
				}
				else if (level == 0 && click_state == FIRST_PULL) {
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d107      	bne.n	8000b42 <HAL_GPIO_EXTI_Callback+0x102>
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d103      	bne.n	8000b42 <HAL_GPIO_EXTI_Callback+0x102>
					click_state = SECOND_PUSH;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	e019      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
		//			printf("second_push \r\n");
				}
				else if (level == 1 && click_state == SECOND_PUSH) {
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d115      	bne.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d111      	bne.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
					click_state = SECOND_PULL;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	701a      	strb	r2, [r3, #0]
		//			printf("second_pull \r\n");
					printf("doubleeeeeeee \r\n");
 8000b58:	4814      	ldr	r0, [pc, #80]	; (8000bac <HAL_GPIO_EXTI_Callback+0x16c>)
 8000b5a:	f007 fba3 	bl	80082a4 <puts>
					if (current_state.mode == NORMAL_STATE) {
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <HAL_GPIO_EXTI_Callback+0x12c>
						current_state.mode = MUSIC_SELECT;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b68:	2203      	movs	r2, #3
 8000b6a:	701a      	strb	r2, [r3, #0]
					}
					click_state = NO_CLICK;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e000      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
					if (ltime - ctime > 1000 && current_state.mode == NORMAL_STATE) {
 8000b74:	bf00      	nop
				}
			}

    	}
    }
}
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021400 	.word	0x40021400
 8000b80:	200007c0 	.word	0x200007c0
 8000b84:	20000304 	.word	0x20000304
 8000b88:	20000308 	.word	0x20000308
 8000b8c:	20000244 	.word	0x20000244
 8000b90:	200007c4 	.word	0x200007c4
 8000b94:	200007c8 	.word	0x200007c8
 8000b98:	200007bc 	.word	0x200007bc
 8000b9c:	200007cc 	.word	0x200007cc
 8000ba0:	200007b4 	.word	0x200007b4
 8000ba4:	200007b8 	.word	0x200007b8
 8000ba8:	0800945c 	.word	0x0800945c
 8000bac:	08009470 	.word	0x08009470

08000bb0 <setTime_Position>:

void setTime_Position() {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
	char blink[30] = {0};
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	831a      	strh	r2, [r3, #24]
	RTC_TimeTypeDef* selectedTime;
	if (current_state.mode == TIME_SETTING) {
 8000bce:	4b94      	ldr	r3, [pc, #592]	; (8000e20 <setTime_Position+0x270>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d102      	bne.n	8000bdc <setTime_Position+0x2c>
		selectedTime = &sTime;
 8000bd6:	4b93      	ldr	r3, [pc, #588]	; (8000e24 <setTime_Position+0x274>)
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bda:	e001      	b.n	8000be0 <setTime_Position+0x30>
	} else {
		selectedTime = &(aTime.AlarmTime);
 8000bdc:	4b92      	ldr	r3, [pc, #584]	; (8000e28 <setTime_Position+0x278>)
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (XY[0] < 1500) hourMinSec--;
 8000be0:	4b92      	ldr	r3, [pc, #584]	; (8000e2c <setTime_Position+0x27c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f240 52db 	movw	r2, #1499	; 0x5db
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d804      	bhi.n	8000bf6 <setTime_Position+0x46>
 8000bec:	4b90      	ldr	r3, [pc, #576]	; (8000e30 <setTime_Position+0x280>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	4a8f      	ldr	r2, [pc, #572]	; (8000e30 <setTime_Position+0x280>)
 8000bf4:	6013      	str	r3, [r2, #0]
	if (XY[0] > 4000) hourMinSec++;
 8000bf6:	4b8d      	ldr	r3, [pc, #564]	; (8000e2c <setTime_Position+0x27c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000bfe:	d904      	bls.n	8000c0a <setTime_Position+0x5a>
 8000c00:	4b8b      	ldr	r3, [pc, #556]	; (8000e30 <setTime_Position+0x280>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a8a      	ldr	r2, [pc, #552]	; (8000e30 <setTime_Position+0x280>)
 8000c08:	6013      	str	r3, [r2, #0]

	if (hourMinSec > 3) hourMinSec = 0;
 8000c0a:	4b89      	ldr	r3, [pc, #548]	; (8000e30 <setTime_Position+0x280>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	dd02      	ble.n	8000c18 <setTime_Position+0x68>
 8000c12:	4b87      	ldr	r3, [pc, #540]	; (8000e30 <setTime_Position+0x280>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
	if (hourMinSec < 0) hourMinSec = 3;
 8000c18:	4b85      	ldr	r3, [pc, #532]	; (8000e30 <setTime_Position+0x280>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	da02      	bge.n	8000c26 <setTime_Position+0x76>
 8000c20:	4b83      	ldr	r3, [pc, #524]	; (8000e30 <setTime_Position+0x280>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	601a      	str	r2, [r3, #0]

	printf("time_position : %d \r\n", hourMinSec);
 8000c26:	4b82      	ldr	r3, [pc, #520]	; (8000e30 <setTime_Position+0x280>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4881      	ldr	r0, [pc, #516]	; (8000e34 <setTime_Position+0x284>)
 8000c2e:	f007 fad3 	bl	80081d8 <iprintf>

	switch(hourMinSec) {
 8000c32:	4b7f      	ldr	r3, [pc, #508]	; (8000e30 <setTime_Position+0x280>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	f200 80d6 	bhi.w	8000de8 <setTime_Position+0x238>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <setTime_Position+0x94>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c55 	.word	0x08000c55
 8000c48:	08000ca9 	.word	0x08000ca9
 8000c4c:	08000d0f 	.word	0x08000d0f
 8000c50:	08000d75 	.word	0x08000d75
	case 0:
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000c54:	21c0      	movs	r1, #192	; 0xc0
 8000c56:	204e      	movs	r0, #78	; 0x4e
 8000c58:	f7ff fd62 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%s", ampm[selectedTime->TimeFormat]);
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	78db      	ldrb	r3, [r3, #3]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	4a73      	ldr	r2, [pc, #460]	; (8000e38 <setTime_Position+0x288>)
 8000c6a:	441a      	add	r2, r3
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4973      	ldr	r1, [pc, #460]	; (8000e3c <setTime_Position+0x28c>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f007 fb53 	bl	800831c <siprintf>
		if (XY[1] < 1500 ) selectedTime->TimeFormat++;
 8000c76:	4b6d      	ldr	r3, [pc, #436]	; (8000e2c <setTime_Position+0x27c>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f240 52db 	movw	r2, #1499	; 0x5db
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d805      	bhi.n	8000c8e <setTime_Position+0xde>
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	78db      	ldrb	r3, [r3, #3]
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	70da      	strb	r2, [r3, #3]
		if (XY[1] > 4000)  selectedTime->TimeFormat--;
 8000c8e:	4b67      	ldr	r3, [pc, #412]	; (8000e2c <setTime_Position+0x27c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c96:	f240 80a0 	bls.w	8000dda <setTime_Position+0x22a>
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	78db      	ldrb	r3, [r3, #3]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	70da      	strb	r2, [r3, #3]
		break;
 8000ca6:	e098      	b.n	8000dda <setTime_Position+0x22a>
	case 1:
		LCD_SendCommand(LCD_ADDR, 0b11000011);
 8000ca8:	21c3      	movs	r1, #195	; 0xc3
 8000caa:	204e      	movs	r0, #78	; 0x4e
 8000cac:	f7ff fd38 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%02d", selectedTime->Hours);
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4961      	ldr	r1, [pc, #388]	; (8000e40 <setTime_Position+0x290>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f007 fb2e 	bl	800831c <siprintf>
		if (XY[1] < 1500) selectedTime->Hours++;
 8000cc0:	4b5a      	ldr	r3, [pc, #360]	; (8000e2c <setTime_Position+0x27c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f240 52db 	movw	r2, #1499	; 0x5db
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d805      	bhi.n	8000cd8 <setTime_Position+0x128>
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	701a      	strb	r2, [r3, #0]
		if (XY[1] > 4000) selectedTime->Hours--;
 8000cd8:	4b54      	ldr	r3, [pc, #336]	; (8000e2c <setTime_Position+0x27c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000ce0:	d905      	bls.n	8000cee <setTime_Position+0x13e>
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	701a      	strb	r2, [r3, #0]
		if (selectedTime -> Hours == 0)     selectedTime->Hours = 12;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d103      	bne.n	8000cfe <setTime_Position+0x14e>
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	220c      	movs	r2, #12
 8000cfa:	701a      	strb	r2, [r3, #0]
		else if (selectedTime-> Hours > 12 ) selectedTime->Hours = 1;
		break;
 8000cfc:	e06f      	b.n	8000dde <setTime_Position+0x22e>
		else if (selectedTime-> Hours > 12 ) selectedTime->Hours = 1;
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	d96b      	bls.n	8000dde <setTime_Position+0x22e>
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
		break;
 8000d0c:	e067      	b.n	8000dde <setTime_Position+0x22e>
	case 2:
		LCD_SendCommand(LCD_ADDR, 0b11001000);
 8000d0e:	21c8      	movs	r1, #200	; 0xc8
 8000d10:	204e      	movs	r0, #78	; 0x4e
 8000d12:	f7ff fd05 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%02d", selectedTime->Minutes);
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	785b      	ldrb	r3, [r3, #1]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4948      	ldr	r1, [pc, #288]	; (8000e40 <setTime_Position+0x290>)
 8000d20:	4618      	mov	r0, r3
 8000d22:	f007 fafb 	bl	800831c <siprintf>
		if (XY[1] < 1500) selectedTime->Minutes++;
 8000d26:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <setTime_Position+0x27c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f240 52db 	movw	r2, #1499	; 0x5db
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d805      	bhi.n	8000d3e <setTime_Position+0x18e>
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	3301      	adds	r3, #1
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	705a      	strb	r2, [r3, #1]
		if (XY[1] > 4000) selectedTime->Minutes--;
 8000d3e:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <setTime_Position+0x27c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d46:	d905      	bls.n	8000d54 <setTime_Position+0x1a4>
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	785b      	ldrb	r3, [r3, #1]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	705a      	strb	r2, [r3, #1]
		if (selectedTime->Minutes > 250)     selectedTime->Minutes = 59;
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	785b      	ldrb	r3, [r3, #1]
 8000d58:	2bfa      	cmp	r3, #250	; 0xfa
 8000d5a:	d903      	bls.n	8000d64 <setTime_Position+0x1b4>
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	223b      	movs	r2, #59	; 0x3b
 8000d60:	705a      	strb	r2, [r3, #1]
		else if (selectedTime->Minutes > 59) selectedTime->Minutes = 0;
		break;
 8000d62:	e03e      	b.n	8000de2 <setTime_Position+0x232>
		else if (selectedTime->Minutes > 59) selectedTime->Minutes = 0;
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	2b3b      	cmp	r3, #59	; 0x3b
 8000d6a:	d93a      	bls.n	8000de2 <setTime_Position+0x232>
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	2200      	movs	r2, #0
 8000d70:	705a      	strb	r2, [r3, #1]
		break;
 8000d72:	e036      	b.n	8000de2 <setTime_Position+0x232>
	case 3:
		LCD_SendCommand(LCD_ADDR, 0b11001101);
 8000d74:	21cd      	movs	r1, #205	; 0xcd
 8000d76:	204e      	movs	r0, #78	; 0x4e
 8000d78:	f7ff fcd2 	bl	8000720 <LCD_SendCommand>
		 sprintf(blink, "%02d", selectedTime->Seconds);
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	789b      	ldrb	r3, [r3, #2]
 8000d80:	461a      	mov	r2, r3
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	492e      	ldr	r1, [pc, #184]	; (8000e40 <setTime_Position+0x290>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f007 fac8 	bl	800831c <siprintf>
		if (XY[1] < 1500) selectedTime->Seconds++;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <setTime_Position+0x27c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f240 52db 	movw	r2, #1499	; 0x5db
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d805      	bhi.n	8000da4 <setTime_Position+0x1f4>
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	789b      	ldrb	r3, [r3, #2]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	709a      	strb	r2, [r3, #2]
		if (XY[1] > 4000) selectedTime->Seconds--;
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <setTime_Position+0x27c>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000dac:	d905      	bls.n	8000dba <setTime_Position+0x20a>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	709a      	strb	r2, [r3, #2]
		if (selectedTime->Seconds > 250)     selectedTime->Seconds = 59;
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	789b      	ldrb	r3, [r3, #2]
 8000dbe:	2bfa      	cmp	r3, #250	; 0xfa
 8000dc0:	d903      	bls.n	8000dca <setTime_Position+0x21a>
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	223b      	movs	r2, #59	; 0x3b
 8000dc6:	709a      	strb	r2, [r3, #2]
		else if (selectedTime->Seconds > 59) selectedTime->Seconds = 0;
		break;
 8000dc8:	e00d      	b.n	8000de6 <setTime_Position+0x236>
		else if (selectedTime->Seconds > 59) selectedTime->Seconds = 0;
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	789b      	ldrb	r3, [r3, #2]
 8000dce:	2b3b      	cmp	r3, #59	; 0x3b
 8000dd0:	d909      	bls.n	8000de6 <setTime_Position+0x236>
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	709a      	strb	r2, [r3, #2]
		break;
 8000dd8:	e005      	b.n	8000de6 <setTime_Position+0x236>
		break;
 8000dda:	bf00      	nop
 8000ddc:	e004      	b.n	8000de8 <setTime_Position+0x238>
		break;
 8000dde:	bf00      	nop
 8000de0:	e002      	b.n	8000de8 <setTime_Position+0x238>
		break;
 8000de2:	bf00      	nop
 8000de4:	e000      	b.n	8000de8 <setTime_Position+0x238>
		break;
 8000de6:	bf00      	nop
	}

//	HAL_Delay(400);
	LCD_SendString(LCD_ADDR, "  ");
 8000de8:	4916      	ldr	r1, [pc, #88]	; (8000e44 <setTime_Position+0x294>)
 8000dea:	204e      	movs	r0, #78	; 0x4e
 8000dec:	f7ff fcd9 	bl	80007a2 <LCD_SendString>
	if (current_state.mode == TIME_SETTING) {
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <setTime_Position+0x270>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d12b      	bne.n	8000e50 <setTime_Position+0x2a0>
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	490a      	ldr	r1, [pc, #40]	; (8000e24 <setTime_Position+0x274>)
 8000dfc:	4812      	ldr	r0, [pc, #72]	; (8000e48 <setTime_Position+0x298>)
 8000dfe:	f004 ffed 	bl	8005ddc <HAL_RTC_SetTime>
		default_nvitem.setting_time.Hours = sTime.Hours;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <setTime_Position+0x274>)
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <setTime_Position+0x29c>)
 8000e08:	711a      	strb	r2, [r3, #4]
		default_nvitem.setting_time.Minutes = sTime.Minutes;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <setTime_Position+0x274>)
 8000e0c:	785a      	ldrb	r2, [r3, #1]
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <setTime_Position+0x29c>)
 8000e10:	715a      	strb	r2, [r3, #5]
		default_nvitem.setting_time.Seconds = sTime.Seconds;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <setTime_Position+0x274>)
 8000e14:	789a      	ldrb	r2, [r3, #2]
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <setTime_Position+0x29c>)
 8000e18:	719a      	strb	r2, [r3, #6]
		update_nvitems();
 8000e1a:	f7ff fcf3 	bl	8000804 <update_nvitems>
		default_nvitem.alarm_time.AlarmTime.Seconds = aTime.AlarmTime.Seconds;
		default_nvitem.alarm_time.AlarmTime.TimeFormat = aTime.AlarmTime.TimeFormat;
		update_nvitems();
		get_alarm();
	}
}
 8000e1e:	e030      	b.n	8000e82 <setTime_Position+0x2d2>
 8000e20:	20000308 	.word	0x20000308
 8000e24:	20000774 	.word	0x20000774
 8000e28:	2000078c 	.word	0x2000078c
 8000e2c:	2000076c 	.word	0x2000076c
 8000e30:	20000728 	.word	0x20000728
 8000e34:	08009480 	.word	0x08009480
 8000e38:	20000274 	.word	0x20000274
 8000e3c:	08009498 	.word	0x08009498
 8000e40:	0800949c 	.word	0x0800949c
 8000e44:	080094a4 	.word	0x080094a4
 8000e48:	20000634 	.word	0x20000634
 8000e4c:	20000000 	.word	0x20000000
		HAL_RTC_SetAlarm_IT(&hrtc, &aTime, RTC_FORMAT_BIN);
 8000e50:	2200      	movs	r2, #0
 8000e52:	490e      	ldr	r1, [pc, #56]	; (8000e8c <setTime_Position+0x2dc>)
 8000e54:	480e      	ldr	r0, [pc, #56]	; (8000e90 <setTime_Position+0x2e0>)
 8000e56:	f005 f98d 	bl	8006174 <HAL_RTC_SetAlarm_IT>
		default_nvitem.alarm_time.AlarmTime.Hours = aTime.AlarmTime.Hours;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <setTime_Position+0x2dc>)
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <setTime_Position+0x2e4>)
 8000e60:	761a      	strb	r2, [r3, #24]
		default_nvitem.alarm_time.AlarmTime.Minutes = aTime.AlarmTime.Minutes;
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <setTime_Position+0x2dc>)
 8000e64:	785a      	ldrb	r2, [r3, #1]
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <setTime_Position+0x2e4>)
 8000e68:	765a      	strb	r2, [r3, #25]
		default_nvitem.alarm_time.AlarmTime.Seconds = aTime.AlarmTime.Seconds;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <setTime_Position+0x2dc>)
 8000e6c:	789a      	ldrb	r2, [r3, #2]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <setTime_Position+0x2e4>)
 8000e70:	769a      	strb	r2, [r3, #26]
		default_nvitem.alarm_time.AlarmTime.TimeFormat = aTime.AlarmTime.TimeFormat;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <setTime_Position+0x2dc>)
 8000e74:	78da      	ldrb	r2, [r3, #3]
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <setTime_Position+0x2e4>)
 8000e78:	76da      	strb	r2, [r3, #27]
		update_nvitems();
 8000e7a:	f7ff fcc3 	bl	8000804 <update_nvitems>
		get_alarm();
 8000e7e:	f7ff fd4d 	bl	800091c <get_alarm>
}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000078c 	.word	0x2000078c
 8000e90:	20000634 	.word	0x20000634
 8000e94:	20000000 	.word	0x20000000

08000e98 <music_select>:

void music_select(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
	unsigned int music_cnt = sizeof(alarm_music)/sizeof(alarm_music[0]); // total music cnt
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	607b      	str	r3, [r7, #4]

	if (XY[1] < 1500 ) current_state.music_num++;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <music_select+0x88>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f240 52db 	movw	r2, #1499	; 0x5db
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d804      	bhi.n	8000eb8 <music_select+0x20>
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <music_select+0x8c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <music_select+0x8c>)
 8000eb6:	6053      	str	r3, [r2, #4]
	if (XY[1] > 4000 ) current_state.music_num--;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <music_select+0x88>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000ec0:	d904      	bls.n	8000ecc <music_select+0x34>
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <music_select+0x8c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <music_select+0x8c>)
 8000eca:	6053      	str	r3, [r2, #4]
	current_state.music_num %= music_cnt;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <music_select+0x8c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	fb01 f202 	mul.w	r2, r1, r2
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <music_select+0x8c>)
 8000ee2:	605a      	str	r2, [r3, #4]

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000ee4:	21c0      	movs	r1, #192	; 0xc0
 8000ee6:	204e      	movs	r0, #78	; 0x4e
 8000ee8:	f7ff fc1a 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, alarm_music[current_state.music_num].music_title);
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <music_select+0x8c>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <music_select+0x90>)
 8000efa:	4413      	add	r3, r2
 8000efc:	3301      	adds	r3, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	204e      	movs	r0, #78	; 0x4e
 8000f02:	f7ff fc4e 	bl	80007a2 <LCD_SendString>
	default_nvitem.alarm_music_num = current_state.music_num;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <music_select+0x8c>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	b25a      	sxtb	r2, r3
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <music_select+0x94>)
 8000f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	update_nvitems();
 8000f12:	f7ff fc77 	bl	8000804 <update_nvitems>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000076c 	.word	0x2000076c
 8000f24:	20000308 	.word	0x20000308
 8000f28:	20000244 	.word	0x20000244
 8000f2c:	20000000 	.word	0x20000000

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f001 f918 	bl	8002168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f8a8 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 fb9c 	bl	8001678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f40:	f000 fb7a 	bl	8001638 <MX_DMA_Init>
  MX_ETH_Init();
 8000f44:	f000 f98a 	bl	800125c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f48:	f000 fb4c 	bl	80015e4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f4c:	f000 f9d4 	bl	80012f8 <MX_I2C1_Init>
  MX_RTC_Init();
 8000f50:	f000 fa12 	bl	8001378 <MX_RTC_Init>
  MX_ADC1_Init();
 8000f54:	f000 f922 	bl	800119c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f58:	f000 faec 	bl	8001534 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f5c:	f000 fa9e 	bl	800149c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f60:	f000 f900 	bl	8001164 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 8000f64:	f7ff fb1a 	bl	800059c <I2C_Scan>
  LCD_Init(LCD_ADDR);
 8000f68:	204e      	movs	r0, #78	; 0x4e
 8000f6a:	f7ff fbfd 	bl	8000768 <LCD_Init>

  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4936      	ldr	r1, [pc, #216]	; (800104c <main+0x11c>)
 8000f72:	4837      	ldr	r0, [pc, #220]	; (8001050 <main+0x120>)
 8000f74:	f001 f9d2 	bl	800231c <HAL_ADC_Start_DMA>

  current_state.mode = NORMAL_STATE;
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <main+0x124>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  click_state = NO_CLICK;
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <main+0x128>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
  current_state.music_num = 0;
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <main+0x124>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]

  if(nv_items->magic_num == MAGIC_NUM) // get
 8000f8a:	4b34      	ldr	r3, [pc, #208]	; (800105c <main+0x12c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a34      	ldr	r2, [pc, #208]	; (8001060 <main+0x130>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d10c      	bne.n	8000fae <main+0x7e>
  {
	  printf("1111111111");
 8000f94:	4833      	ldr	r0, [pc, #204]	; (8001064 <main+0x134>)
 8000f96:	f007 f91f 	bl	80081d8 <iprintf>
//	  memcpy(&default_nvitem,nv_items,sizeof(NVitemTypeDef));
//	  sTime.Hours = default_nvitem.setting_time.Hours;
//	  sTime.Minutes = default_nvitem.setting_time.Minutes;
//	  sTime.Seconds = default_nvitem.setting_time.Seconds;
	  sTime.Hours = *(uint8_t *)(FLASH_SECTOR_11 + 4);
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	781a      	ldrb	r2, [r3, #0]
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <main+0x138>)
 8000fa0:	701a      	strb	r2, [r3, #0]


	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4930      	ldr	r1, [pc, #192]	; (8001068 <main+0x138>)
 8000fa6:	4831      	ldr	r0, [pc, #196]	; (800106c <main+0x13c>)
 8000fa8:	f004 ff18 	bl	8005ddc <HAL_RTC_SetTime>
 8000fac:	e004      	b.n	8000fb8 <main+0x88>
  }
  else // set
  {
	  printf("2222222222\r\n");
 8000fae:	4830      	ldr	r0, [pc, #192]	; (8001070 <main+0x140>)
 8000fb0:	f007 f978 	bl	80082a4 <puts>
	  update_nvitems();
 8000fb4:	f7ff fc26 	bl	8000804 <update_nvitems>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 8000fb8:	f7ff fc7c 	bl	80008b4 <get_time>
	  time_display();
 8000fbc:	f7ff fcdc 	bl	8000978 <time_display>
	  if (current_state.mode == TIME_SETTING || current_state.mode == ALARM_TIME_SETTING) {
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <main+0x124>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d003      	beq.n	8000fd0 <main+0xa0>
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <main+0x124>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d10c      	bne.n	8000fea <main+0xba>
		  setTime_Position();
 8000fd0:	f7ff fdee 	bl	8000bb0 <setTime_Position>
		  printf("%d, %d \r\n", XY[0], XY[1]);
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <main+0x11c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1c      	ldr	r2, [pc, #112]	; (800104c <main+0x11c>)
 8000fda:	6852      	ldr	r2, [r2, #4]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4825      	ldr	r0, [pc, #148]	; (8001074 <main+0x144>)
 8000fe0:	f007 f8fa 	bl	80081d8 <iprintf>
		  printf("\r\n");
 8000fe4:	4824      	ldr	r0, [pc, #144]	; (8001078 <main+0x148>)
 8000fe6:	f007 f95d 	bl	80082a4 <puts>
	  }

	  if (click_state == FIRST_PULL && (HAL_GetTick()-ltime) > 100) {
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <main+0x128>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d1e2      	bne.n	8000fb8 <main+0x88>
 8000ff2:	f001 f91f 	bl	8002234 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <main+0x14c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d9da      	bls.n	8000fb8 <main+0x88>
		printf("one click \r\n");
 8001002:	481f      	ldr	r0, [pc, #124]	; (8001080 <main+0x150>)
 8001004:	f007 f94e 	bl	80082a4 <puts>
		if (seq > 0 ) {
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <main+0x154>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00d      	beq.n	800102c <main+0xfc>
			seq = alarm_music[current_state.music_num].music_length;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <main+0x124>)
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	491c      	ldr	r1, [pc, #112]	; (8001088 <main+0x158>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	3314      	adds	r3, #20
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <main+0x154>)
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e00a      	b.n	8001042 <main+0x112>

		}
		else {
			if (current_state.mode == NORMAL_STATE) {
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <main+0x124>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d103      	bne.n	800103c <main+0x10c>
				current_state.mode = TIME_SETTING;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <main+0x124>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e002      	b.n	8001042 <main+0x112>
			}
			else {
				current_state.mode = NORMAL_STATE;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <main+0x124>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
			}
		}

		click_state = NO_CLICK;
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <main+0x128>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
	  get_time();
 8001048:	e7b6      	b.n	8000fb8 <main+0x88>
 800104a:	bf00      	nop
 800104c:	2000076c 	.word	0x2000076c
 8001050:	20000488 	.word	0x20000488
 8001054:	20000308 	.word	0x20000308
 8001058:	200007cc 	.word	0x200007cc
 800105c:	080e0000 	.word	0x080e0000
 8001060:	deadbeef 	.word	0xdeadbeef
 8001064:	080094a8 	.word	0x080094a8
 8001068:	20000774 	.word	0x20000774
 800106c:	20000634 	.word	0x20000634
 8001070:	080094b4 	.word	0x080094b4
 8001074:	080094c0 	.word	0x080094c0
 8001078:	080094cc 	.word	0x080094cc
 800107c:	200007b8 	.word	0x200007b8
 8001080:	080094d0 	.word	0x080094d0
 8001084:	20000304 	.word	0x20000304
 8001088:	20000244 	.word	0x20000244

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	; 0x50
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2230      	movs	r2, #48	; 0x30
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f007 fa36 	bl	800850c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <SystemClock_Config+0xd0>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a28      	ldr	r2, [pc, #160]	; (800115c <SystemClock_Config+0xd0>)
 80010ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010be:	6413      	str	r3, [r2, #64]	; 0x40
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <SystemClock_Config+0xd0>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <SystemClock_Config+0xd4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a22      	ldr	r2, [pc, #136]	; (8001160 <SystemClock_Config+0xd4>)
 80010d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <SystemClock_Config+0xd4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80010e8:	2305      	movs	r3, #5
 80010ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001104:	23a8      	movs	r3, #168	; 0xa8
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800110c:	2307      	movs	r3, #7
 800110e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f003 ff93 	bl	8005040 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001120:	f000 fc5e 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001130:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2105      	movs	r1, #5
 8001142:	4618      	mov	r0, r3
 8001144:	f004 f9f4 	bl	8005530 <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800114e:	f000 fc47 	bl	80019e0 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3750      	adds	r7, #80	; 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2017      	movs	r0, #23
 800116e:	f001 fd8e 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001172:	2017      	movs	r0, #23
 8001174:	f001 fda7 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2009      	movs	r0, #9
 800117e:	f001 fd86 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001182:	2009      	movs	r0, #9
 8001184:	f001 fd9f 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	201c      	movs	r0, #28
 800118e:	f001 fd7e 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001192:	201c      	movs	r0, #28
 8001194:	f001 fd97 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011b0:	4a28      	ldr	r2, [pc, #160]	; (8001254 <MX_ADC1_Init+0xb8>)
 80011b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <MX_ADC1_Init+0xbc>)
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011ea:	2202      	movs	r2, #2
 80011ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011fc:	4814      	ldr	r0, [pc, #80]	; (8001250 <MX_ADC1_Init+0xb4>)
 80011fe:	f001 f849 	bl	8002294 <HAL_ADC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001208:	f000 fbea 	bl	80019e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800120c:	230d      	movs	r3, #13
 800120e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001214:	2304      	movs	r3, #4
 8001216:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_ADC1_Init+0xb4>)
 800121e:	f001 f9ab 	bl	8002578 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001228:	f000 fbda 	bl	80019e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800122c:	230a      	movs	r3, #10
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001230:	2302      	movs	r3, #2
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_ADC1_Init+0xb4>)
 800123a:	f001 f99d 	bl	8002578 <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001244:	f000 fbcc 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000488 	.word	0x20000488
 8001254:	40012000 	.word	0x40012000
 8001258:	0f000001 	.word	0x0f000001

0800125c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_ETH_Init+0x84>)
 8001262:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <MX_ETH_Init+0x88>)
 8001264:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_ETH_Init+0x8c>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_ETH_Init+0x8c>)
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_ETH_Init+0x8c>)
 8001274:	22e1      	movs	r2, #225	; 0xe1
 8001276:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_ETH_Init+0x8c>)
 800127a:	2200      	movs	r2, #0
 800127c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_ETH_Init+0x8c>)
 8001280:	2200      	movs	r2, #0
 8001282:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_ETH_Init+0x8c>)
 8001286:	2200      	movs	r2, #0
 8001288:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_ETH_Init+0x84>)
 800128c:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <MX_ETH_Init+0x8c>)
 800128e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_ETH_Init+0x84>)
 8001292:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001296:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_ETH_Init+0x84>)
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <MX_ETH_Init+0x90>)
 800129c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_ETH_Init+0x84>)
 80012a0:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <MX_ETH_Init+0x94>)
 80012a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_ETH_Init+0x84>)
 80012a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_ETH_Init+0x84>)
 80012ae:	f002 f895 	bl	80033dc <HAL_ETH_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80012b8:	f000 fb92 	bl	80019e0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80012bc:	2238      	movs	r2, #56	; 0x38
 80012be:	2100      	movs	r1, #0
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_ETH_Init+0x98>)
 80012c2:	f007 f923 	bl	800850c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_ETH_Init+0x98>)
 80012c8:	2221      	movs	r2, #33	; 0x21
 80012ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_ETH_Init+0x98>)
 80012ce:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80012d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_ETH_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000530 	.word	0x20000530
 80012e4:	40028000 	.word	0x40028000
 80012e8:	200007d0 	.word	0x200007d0
 80012ec:	200003e8 	.word	0x200003e8
 80012f0:	20000348 	.word	0x20000348
 80012f4:	20000310 	.word	0x20000310

080012f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_I2C1_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <MX_I2C1_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_I2C1_Init+0x74>)
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <MX_I2C1_Init+0x7c>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_I2C1_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_I2C1_Init+0x74>)
 8001316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800131a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_I2C1_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_I2C1_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_I2C1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_I2C1_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_I2C1_Init+0x74>)
 8001336:	f003 f88f 	bl	8004458 <HAL_I2C_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001340:	f000 fb4e 	bl	80019e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <MX_I2C1_Init+0x74>)
 8001348:	f003 fdff 	bl	8004f4a <HAL_I2CEx_ConfigAnalogFilter>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001352:	f000 fb45 	bl	80019e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_I2C1_Init+0x74>)
 800135a:	f003 fe32 	bl	8004fc2 <HAL_I2CEx_ConfigDigitalFilter>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001364:	f000 fb3c 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200005e0 	.word	0x200005e0
 8001370:	40005400 	.word	0x40005400
 8001374:	000186a0 	.word	0x000186a0

08001378 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b090      	sub	sp, #64	; 0x40
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800137e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001392:	463b      	mov	r3, r7
 8001394:	2228      	movs	r2, #40	; 0x28
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f007 f8b7 	bl	800850c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <MX_RTC_Init+0x11c>)
 80013a0:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <MX_RTC_Init+0x120>)
 80013a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80013a4:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <MX_RTC_Init+0x11c>)
 80013a6:	2240      	movs	r2, #64	; 0x40
 80013a8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013aa:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <MX_RTC_Init+0x11c>)
 80013ac:	227f      	movs	r2, #127	; 0x7f
 80013ae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013b0:	4b38      	ldr	r3, [pc, #224]	; (8001494 <MX_RTC_Init+0x11c>)
 80013b2:	22ff      	movs	r2, #255	; 0xff
 80013b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <MX_RTC_Init+0x11c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <MX_RTC_Init+0x11c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <MX_RTC_Init+0x11c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013c8:	4832      	ldr	r0, [pc, #200]	; (8001494 <MX_RTC_Init+0x11c>)
 80013ca:	f004 fc91 	bl	8005cf0 <HAL_RTC_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80013d4:	f000 fb04 	bl	80019e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 80013d8:	2311      	movs	r3, #17
 80013da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 80013de:	2359      	movs	r3, #89	; 0x59
 80013e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x36;
 80013e4:	2336      	movs	r3, #54	; 0x36
 80013e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	4824      	ldr	r0, [pc, #144]	; (8001494 <MX_RTC_Init+0x11c>)
 8001402:	f004 fceb 	bl	8005ddc <HAL_RTC_SetTime>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800140c:	f000 fae8 	bl	80019e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001410:	2301      	movs	r3, #1
 8001412:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001416:	2301      	movs	r3, #1
 8001418:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800141c:	2301      	movs	r3, #1
 800141e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142c:	2201      	movs	r2, #1
 800142e:	4619      	mov	r1, r3
 8001430:	4818      	ldr	r0, [pc, #96]	; (8001494 <MX_RTC_Init+0x11c>)
 8001432:	f004 fdcb 	bl	8005fcc <HAL_RTC_SetDate>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800143c:	f000 fad0 	bl	80019e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001440:	2301      	movs	r3, #1
 8001442:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001444:	2300      	movs	r3, #0
 8001446:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x45;
 8001448:	2345      	movs	r3, #69	; 0x45
 800144a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001450:	2300      	movs	r3, #0
 8001452:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800145c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001460:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800146a:	2301      	movs	r3, #1
 800146c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	2201      	movs	r2, #1
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_RTC_Init+0x11c>)
 800147e:	f004 fe79 	bl	8006174 <HAL_RTC_SetAlarm_IT>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001488:	f000 faaa 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3740      	adds	r7, #64	; 0x40
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000634 	.word	0x20000634
 8001498:	40002800 	.word	0x40002800

0800149c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_TIM2_Init+0x94>)
 80014ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_TIM2_Init+0x94>)
 80014c2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80014c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_TIM2_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_TIM2_Init+0x94>)
 80014d0:	2263      	movs	r2, #99	; 0x63
 80014d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_TIM2_Init+0x94>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_TIM2_Init+0x94>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_TIM2_Init+0x94>)
 80014e2:	f005 f926 	bl	8006732 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014ec:	f000 fa78 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_TIM2_Init+0x94>)
 80014fe:	f005 fd57 	bl	8006fb0 <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001508:	f000 fa6a 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM2_Init+0x94>)
 800151a:	f006 f949 	bl	80077b0 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001524:	f000 fa5c 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000654 	.word	0x20000654

08001534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <MX_TIM3_Init+0xa8>)
 8001558:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <MX_TIM3_Init+0xac>)
 800155a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_TIM3_Init+0xa8>)
 800155e:	2253      	movs	r2, #83	; 0x53
 8001560:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_TIM3_Init+0xa8>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_TIM3_Init+0xa8>)
 800156a:	22c7      	movs	r2, #199	; 0xc7
 800156c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_TIM3_Init+0xa8>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM3_Init+0xa8>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800157a:	4818      	ldr	r0, [pc, #96]	; (80015dc <MX_TIM3_Init+0xa8>)
 800157c:	f005 f9c7 	bl	800690e <HAL_TIM_PWM_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001586:	f000 fa2b 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	4619      	mov	r1, r3
 8001598:	4810      	ldr	r0, [pc, #64]	; (80015dc <MX_TIM3_Init+0xa8>)
 800159a:	f006 f909 	bl	80077b0 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80015a4:	f000 fa1c 	bl	80019e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a8:	2360      	movs	r3, #96	; 0x60
 80015aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 80015ac:	2331      	movs	r3, #49	; 0x31
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2204      	movs	r2, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <MX_TIM3_Init+0xa8>)
 80015c0:	f005 fc34 	bl	8006e2c <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80015ca:	f000 fa09 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <MX_TIM3_Init+0xa8>)
 80015d0:	f000 fc2e 	bl	8001e30 <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000069c 	.word	0x2000069c
 80015e0:	40000400 	.word	0x40000400

080015e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART3_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_USART3_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_USART3_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART3_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART3_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART3_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART3_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART3_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART3_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART3_UART_Init+0x4c>)
 800161c:	f006 f958 	bl	80078d0 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f000 f9db 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200006e4 	.word	0x200006e4
 8001634:	40004800 	.word	0x40004800

08001638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_DMA_Init+0x3c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <MX_DMA_Init+0x3c>)
 8001648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_DMA_Init+0x3c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2038      	movs	r0, #56	; 0x38
 8001660:	f001 fb15 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001664:	2038      	movs	r0, #56	; 0x38
 8001666:	f001 fb2e 	bl	8002cc6 <HAL_NVIC_EnableIRQ>

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	; 0x30
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	4b68      	ldr	r3, [pc, #416]	; (8001834 <MX_GPIO_Init+0x1bc>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a67      	ldr	r2, [pc, #412]	; (8001834 <MX_GPIO_Init+0x1bc>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a60      	ldr	r2, [pc, #384]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b5a      	ldr	r3, [pc, #360]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a59      	ldr	r2, [pc, #356]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a52      	ldr	r2, [pc, #328]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b50      	ldr	r3, [pc, #320]	; (8001834 <MX_GPIO_Init+0x1bc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b4c      	ldr	r3, [pc, #304]	; (8001834 <MX_GPIO_Init+0x1bc>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a4b      	ldr	r2, [pc, #300]	; (8001834 <MX_GPIO_Init+0x1bc>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <MX_GPIO_Init+0x1bc>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <MX_GPIO_Init+0x1bc>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a44      	ldr	r2, [pc, #272]	; (8001834 <MX_GPIO_Init+0x1bc>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b42      	ldr	r3, [pc, #264]	; (8001834 <MX_GPIO_Init+0x1bc>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <MX_GPIO_Init+0x1bc>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a3d      	ldr	r2, [pc, #244]	; (8001834 <MX_GPIO_Init+0x1bc>)
 8001740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <MX_GPIO_Init+0x1bc>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f244 0181 	movw	r1, #16513	; 0x4081
 8001758:	4837      	ldr	r0, [pc, #220]	; (8001838 <MX_GPIO_Init+0x1c0>)
 800175a:	f002 fe31 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2140      	movs	r1, #64	; 0x40
 8001762:	4836      	ldr	r0, [pc, #216]	; (800183c <MX_GPIO_Init+0x1c4>)
 8001764:	f002 fe2c 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	4830      	ldr	r0, [pc, #192]	; (8001840 <MX_GPIO_Init+0x1c8>)
 8001780:	f002 fc5a 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 setBtn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|setBtn_Pin;
 8001784:	2388      	movs	r3, #136	; 0x88
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001788:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178e:	2301      	movs	r3, #1
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4619      	mov	r1, r3
 8001798:	482a      	ldr	r0, [pc, #168]	; (8001844 <MX_GPIO_Init+0x1cc>)
 800179a:	f002 fc4d 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800179e:	f244 0381 	movw	r3, #16513	; 0x4081
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	4820      	ldr	r0, [pc, #128]	; (8001838 <MX_GPIO_Init+0x1c0>)
 80017b8:	f002 fc3e 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017bc:	2340      	movs	r3, #64	; 0x40
 80017be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	481a      	ldr	r0, [pc, #104]	; (800183c <MX_GPIO_Init+0x1c4>)
 80017d4:	f002 fc30 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4814      	ldr	r0, [pc, #80]	; (800183c <MX_GPIO_Init+0x1c4>)
 80017ec:	f002 fc24 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017f0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001802:	230a      	movs	r3, #10
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	480e      	ldr	r0, [pc, #56]	; (8001848 <MX_GPIO_Init+0x1d0>)
 800180e:	f002 fc13 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <MX_GPIO_Init+0x1d0>)
 8001828:	f002 fc06 	bl	8004038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800182c:	bf00      	nop
 800182e:	3730      	adds	r7, #48	; 0x30
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400
 800183c:	40021800 	.word	0x40021800
 8001840:	40020800 	.word	0x40020800
 8001844:	40021400 	.word	0x40021400
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&showTime, strlen(showTime), 1000);
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <HAL_RTC_AlarmAEventCallback+0x40>)
 8001856:	f7fe fccb 	bl	80001f0 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	b29a      	uxth	r2, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	490a      	ldr	r1, [pc, #40]	; (800188c <HAL_RTC_AlarmAEventCallback+0x40>)
 8001864:	480a      	ldr	r0, [pc, #40]	; (8001890 <HAL_RTC_AlarmAEventCallback+0x44>)
 8001866:	f006 f880 	bl	800796a <HAL_UART_Transmit>
	printf("Alarm Callback Occurred!! \r\n");
 800186a:	480a      	ldr	r0, [pc, #40]	; (8001894 <HAL_RTC_AlarmAEventCallback+0x48>)
 800186c:	f006 fd1a 	bl	80082a4 <puts>
	seq = 0;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RTC_AlarmAEventCallback+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8001876:	4809      	ldr	r0, [pc, #36]	; (800189c <HAL_RTC_AlarmAEventCallback+0x50>)
 8001878:	f004 ffaa 	bl	80067d0 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800187c:	2101      	movs	r1, #1
 800187e:	4808      	ldr	r0, [pc, #32]	; (80018a0 <HAL_RTC_AlarmAEventCallback+0x54>)
 8001880:	f002 fdb7 	bl	80043f2 <HAL_GPIO_TogglePin>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000072c 	.word	0x2000072c
 8001890:	200006e4 	.word	0x200006e4
 8001894:	080094dc 	.word	0x080094dc
 8001898:	20000304 	.word	0x20000304
 800189c:	20000654 	.word	0x20000654
 80018a0:	40020400 	.word	0x40020400

080018a4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	int selected_music_num = current_state.music_num;
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
	switch(selected_music_num) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_TIM_PeriodElapsedCallback+0x1c>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d004      	beq.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x24>
 80018be:	e007      	b.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
	case 0 :
		buzzer = harry;
 80018c0:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80018c2:	4a3c      	ldr	r2, [pc, #240]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80018c4:	601a      	str	r2, [r3, #0]
		break;
 80018c6:	e003      	b.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
	case 1 :
		buzzer = bell;
 80018c8:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80018ca:	4a3b      	ldr	r2, [pc, #236]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80018cc:	601a      	str	r2, [r3, #0]
		break;
 80018ce:	bf00      	nop
	}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018d0:	2104      	movs	r1, #4
 80018d2:	483a      	ldr	r0, [pc, #232]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018d4:	f005 f86a 	bl	80069ac <HAL_TIM_PWM_Start>
	uint16_t melody = (uint16_t)(1000000 / buzzer[seq].freq);
 80018d8:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80018ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80018ee:	817b      	strh	r3, [r7, #10]
	printf("music num : %d \r\n", current_state.music_num);
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4834      	ldr	r0, [pc, #208]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80018f8:	f006 fc6e 	bl	80081d8 <iprintf>
	if(stop == 1){
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x128>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d10c      	bne.n	800191e <HAL_TIM_PeriodElapsedCallback+0x7a>
		TIM2->ARR = 500;
 8001904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001908:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800190c:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800190e:	2104      	movs	r1, #4
 8001910:	482a      	ldr	r0, [pc, #168]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001912:	f005 f913 	bl	8006b3c <HAL_TIM_PWM_Stop>
		stop = 0;
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	e03d      	b.n	800199a <HAL_TIM_PeriodElapsedCallback+0xf6>
	}
	else{
		if(seq == alarm_music[current_state.music_num].music_length){
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4929      	ldr	r1, [pc, #164]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	3314      	adds	r3, #20
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4298      	cmp	r0, r3
 800193a:	d10a      	bne.n	8001952 <HAL_TIM_PeriodElapsedCallback+0xae>
			HAL_TIM_Base_Stop_IT(&htim2);
 800193c:	4825      	ldr	r0, [pc, #148]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800193e:	f004 ffb7 	bl	80068b0 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001942:	2104      	movs	r1, #4
 8001944:	481d      	ldr	r0, [pc, #116]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001946:	f005 f8f9 	bl	8006b3c <HAL_TIM_PWM_Stop>
			seq = 0;
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e023      	b.n	800199a <HAL_TIM_PeriodElapsedCallback+0xf6>
		}
		else{
			TIM3->ARR = melody;
 8001952:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001954:	897b      	ldrh	r3, [r7, #10]
 8001956:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR2 = melody / 2;
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001960:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->ARR = buzzer[seq].delay * 1500;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	885b      	ldrh	r3, [r3, #2]
 8001970:	461a      	mov	r2, r3
 8001972:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001976:	fb03 f202 	mul.w	r2, r3, r2
 800197a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001980:	2104      	movs	r1, #4
 8001982:	480e      	ldr	r0, [pc, #56]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001984:	f005 f812 	bl	80069ac <HAL_TIM_PWM_Start>
			stop = 1;
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x128>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
			seq++;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001998:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800199a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199e:	480f      	ldr	r0, [pc, #60]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019a0:	f002 fd27 	bl	80043f2 <HAL_GPIO_TogglePin>
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000308 	.word	0x20000308
 80019b0:	20000300 	.word	0x20000300
 80019b4:	20000144 	.word	0x20000144
 80019b8:	20000044 	.word	0x20000044
 80019bc:	2000069c 	.word	0x2000069c
 80019c0:	20000304 	.word	0x20000304
 80019c4:	000f4240 	.word	0x000f4240
 80019c8:	080094f8 	.word	0x080094f8
 80019cc:	20000305 	.word	0x20000305
 80019d0:	20000244 	.word	0x20000244
 80019d4:	20000654 	.word	0x20000654
 80019d8:	40000400 	.word	0x40000400
 80019dc:	40020400 	.word	0x40020400

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <Error_Handler+0x8>
	...

080019ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <HAL_MspInit+0x4c>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <HAL_ADC_MspInit+0xdc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d157      	bne.n	8001b0e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_ADC_MspInit+0xe0>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <HAL_ADC_MspInit+0xe0>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_ADC_MspInit+0xe0>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_ADC_MspInit+0xe0>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <HAL_ADC_MspInit+0xe0>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_ADC_MspInit+0xe0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001a96:	2309      	movs	r3, #9
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	481d      	ldr	r0, [pc, #116]	; (8001b20 <HAL_ADC_MspInit+0xe4>)
 8001aaa:	f002 fac5 	bl	8004038 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_ADC_MspInit+0xec>)
 8001ab2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001acc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001ad0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001ad8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001adc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001af4:	f001 f902 	bl	8002cfc <HAL_DMA_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001afe:	f7ff ff6f 	bl	80019e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001b06:	639a      	str	r2, [r3, #56]	; 0x38
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_ADC_MspInit+0xe8>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40012000 	.word	0x40012000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020800 	.word	0x40020800
 8001b24:	200004d0 	.word	0x200004d0
 8001b28:	40026410 	.word	0x40026410

08001b2c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08e      	sub	sp, #56	; 0x38
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a55      	ldr	r2, [pc, #340]	; (8001ca0 <HAL_ETH_MspInit+0x174>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	f040 80a4 	bne.w	8001c98 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a4b      	ldr	r2, [pc, #300]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	4a44      	ldr	r2, [pc, #272]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b96:	6313      	str	r3, [r2, #48]	; 0x30
 8001b98:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a3d      	ldr	r2, [pc, #244]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4a36      	ldr	r2, [pc, #216]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd0:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001be6:	f043 0302 	orr.w	r3, r3, #2
 8001bea:	6313      	str	r3, [r2, #48]	; 0x30
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c06:	6313      	str	r3, [r2, #48]	; 0x30
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_ETH_MspInit+0x178>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c14:	2332      	movs	r3, #50	; 0x32
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c24:	230b      	movs	r3, #11
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <HAL_ETH_MspInit+0x17c>)
 8001c30:	f002 fa02 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c34:	2386      	movs	r3, #134	; 0x86
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c44:	230b      	movs	r3, #11
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4817      	ldr	r0, [pc, #92]	; (8001cac <HAL_ETH_MspInit+0x180>)
 8001c50:	f002 f9f2 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c66:	230b      	movs	r3, #11
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <HAL_ETH_MspInit+0x184>)
 8001c72:	f002 f9e1 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c88:	230b      	movs	r3, #11
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c90:	4619      	mov	r1, r3
 8001c92:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <HAL_ETH_MspInit+0x188>)
 8001c94:	f002 f9d0 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3738      	adds	r7, #56	; 0x38
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40028000 	.word	0x40028000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40021800 	.word	0x40021800

08001cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_I2C_MspInit+0x84>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d12c      	bne.n	8001d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	480c      	ldr	r0, [pc, #48]	; (8001d44 <HAL_I2C_MspInit+0x8c>)
 8001d14:	f002 f990 	bl	8004038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d26:	6413      	str	r3, [r2, #64]	; 0x40
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40005400 	.word	0x40005400
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020400 	.word	0x40020400

08001d48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	2230      	movs	r2, #48	; 0x30
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f006 fbd7 	bl	800850c <memset>
  if(hrtc->Instance==RTC)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_RTC_MspInit+0x5c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d119      	bne.n	8001d9c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fdfa 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001d82:	f7ff fe2d 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_RTC_MspInit+0x60>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2029      	movs	r0, #41	; 0x29
 8001d92:	f000 ff7c 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d96:	2029      	movs	r0, #41	; 0x29
 8001d98:	f000 ff95 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3738      	adds	r7, #56	; 0x38
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40002800 	.word	0x40002800
 8001da8:	42470e3c 	.word	0x42470e3c

08001dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbc:	d10d      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d10d      	bne.n	8001e1a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_TIM_PWM_MspInit+0x40>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_TIM_PWM_MspInit+0x40>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_TIM_PWM_MspInit+0x40>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40023800 	.word	0x40023800

08001e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_TIM_MspPostInit+0x68>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d11d      	bne.n	8001e8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_TIM_MspPostInit+0x6c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <HAL_TIM_MspPostInit+0x6c>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_TIM_MspPostInit+0x6c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	4619      	mov	r1, r3
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <HAL_TIM_MspPostInit+0x70>)
 8001e8a:	f002 f8d5 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e8e:	bf00      	nop
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020800 	.word	0x40020800

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_UART_MspInit+0x84>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12c      	bne.n	8001f20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001eec:	f043 0308 	orr.w	r3, r3, #8
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f10:	2307      	movs	r3, #7
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <HAL_UART_MspInit+0x8c>)
 8001f1c:	f002 f88c 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40004800 	.word	0x40004800
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020c00 	.word	0x40020c00

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x4>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f944 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f8c:	2008      	movs	r0, #8
 8001f8e:	f002 fa4b 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(setBtn_Pin);
 8001f9a:	2080      	movs	r0, #128	; 0x80
 8001f9c:	f002 fa44 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <TIM2_IRQHandler+0x10>)
 8001faa:	f004 fe37 	bl	8006c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000654 	.word	0x20000654

08001fb8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <RTC_Alarm_IRQHandler+0x10>)
 8001fbe:	f004 faab 	bl	8006518 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000634 	.word	0x20000634

08001fcc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <DMA2_Stream0_IRQHandler+0x10>)
 8001fd2:	f000 ff99 	bl	8002f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200004d0 	.word	0x200004d0

08001fe0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e00a      	b.n	8002008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ff2:	f3af 8000 	nop.w
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf0      	blt.n	8001ff2 <_read+0x12>
  }

  return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_close>:
  }
  return len;
}

int _close(int file)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002042:	605a      	str	r2, [r3, #4]
  return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_isatty>:

int _isatty(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800208c:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <_sbrk+0x5c>)
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <_sbrk+0x60>)
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <_sbrk+0x64>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <_sbrk+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d207      	bcs.n	80020c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b4:	f006 fa78 	bl	80085a8 <__errno>
 80020b8:	4603      	mov	r3, r0
 80020ba:	220c      	movs	r2, #12
 80020bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	e009      	b.n	80020d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <_sbrk+0x64>)
 80020d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20030000 	.word	0x20030000
 80020e4:	00000400 	.word	0x00000400
 80020e8:	200007d8 	.word	0x200007d8
 80020ec:	20000950 	.word	0x20000950

080020f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <SystemInit+0x20>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <SystemInit+0x20>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800214c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800211a:	490e      	ldr	r1, [pc, #56]	; (8002154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002120:	e002      	b.n	8002128 <LoopCopyDataInit>

08002122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002126:	3304      	adds	r3, #4

08002128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800212c:	d3f9      	bcc.n	8002122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002130:	4c0b      	ldr	r4, [pc, #44]	; (8002160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002134:	e001      	b.n	800213a <LoopFillZerobss>

08002136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002138:	3204      	adds	r2, #4

0800213a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800213c:	d3fb      	bcc.n	8002136 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800213e:	f7ff ffd7 	bl	80020f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002142:	f006 fa37 	bl	80085b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002146:	f7fe fef3 	bl	8000f30 <main>
  bx  lr    
 800214a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800214c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002154:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8002158:	08009570 	.word	0x08009570
  ldr r2, =_sbss
 800215c:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8002160:	2000094c 	.word	0x2000094c

08002164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC_IRQHandler>
	...

08002168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_Init+0x40>)
 8002172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_Init+0x40>)
 800217e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_Init+0x40>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f000 fd71 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002196:	2000      	movs	r0, #0
 8002198:	f000 f808 	bl	80021ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219c:	f7ff fc26 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00

080021ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_InitTick+0x54>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x58>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fd89 	bl	8002ce2 <HAL_SYSTICK_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00e      	b.n	80021f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d80a      	bhi.n	80021f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f000 fd51 	bl	8002c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <HAL_InitTick+0x5c>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000027c 	.word	0x2000027c
 8002204:	20000284 	.word	0x20000284
 8002208:	20000280 	.word	0x20000280

0800220c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x20>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x24>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_IncTick+0x24>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000284 	.word	0x20000284
 8002230:	200007dc 	.word	0x200007dc

08002234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_GetTick+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	200007dc 	.word	0x200007dc

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff ffee 	bl	8002234 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d005      	beq.n	8002272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_Delay+0x44>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002272:	bf00      	nop
 8002274:	f7ff ffde 	bl	8002234 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8f7      	bhi.n	8002274 <HAL_Delay+0x28>
  {
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000284 	.word	0x20000284

08002294 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e033      	b.n	8002312 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fbc2 	bl	8001a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022da:	f023 0302 	bic.w	r3, r3, #2
 80022de:	f043 0202 	orr.w	r2, r3, #2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fa78 	bl	80027dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
 8002302:	e001      	b.n	8002308 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_ADC_Start_DMA+0x1e>
 8002336:	2302      	movs	r3, #2
 8002338:	e0e9      	b.n	800250e <HAL_ADC_Start_DMA+0x1f2>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d018      	beq.n	8002382 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002360:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_ADC_Start_DMA+0x1fc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a6d      	ldr	r2, [pc, #436]	; (800251c <HAL_ADC_Start_DMA+0x200>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0c9a      	lsrs	r2, r3, #18
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002374:	e002      	b.n	800237c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	3b01      	subs	r3, #1
 800237a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f9      	bne.n	8002376 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002390:	d107      	bne.n	80023a2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	f040 80a1 	bne.w	80024f4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f0:	d106      	bne.n	8002400 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f023 0206 	bic.w	r2, r3, #6
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
 80023fe:	e002      	b.n	8002406 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800240e:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_ADC_Start_DMA+0x204>)
 8002410:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	4a43      	ldr	r2, [pc, #268]	; (8002524 <HAL_ADC_Start_DMA+0x208>)
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	4a42      	ldr	r2, [pc, #264]	; (8002528 <HAL_ADC_Start_DMA+0x20c>)
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	4a41      	ldr	r2, [pc, #260]	; (800252c <HAL_ADC_Start_DMA+0x210>)
 8002428:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002432:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002442:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002452:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	334c      	adds	r3, #76	; 0x4c
 800245e:	4619      	mov	r1, r3
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f000 fcf8 	bl	8002e58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2b00      	cmp	r3, #0
 8002472:	d12a      	bne.n	80024ca <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <HAL_ADC_Start_DMA+0x214>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d015      	beq.n	80024aa <HAL_ADC_Start_DMA+0x18e>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <HAL_ADC_Start_DMA+0x218>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d105      	bne.n	8002494 <HAL_ADC_Start_DMA+0x178>
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_ADC_Start_DMA+0x204>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a27      	ldr	r2, [pc, #156]	; (8002538 <HAL_ADC_Start_DMA+0x21c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d136      	bne.n	800250c <HAL_ADC_Start_DMA+0x1f0>
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_ADC_Start_DMA+0x204>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d130      	bne.n	800250c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d129      	bne.n	800250c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	e020      	b.n	800250c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a18      	ldr	r2, [pc, #96]	; (8002530 <HAL_ADC_Start_DMA+0x214>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d11b      	bne.n	800250c <HAL_ADC_Start_DMA+0x1f0>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d114      	bne.n	800250c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	e00b      	b.n	800250c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f043 0210 	orr.w	r2, r3, #16
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2000027c 	.word	0x2000027c
 800251c:	431bde83 	.word	0x431bde83
 8002520:	40012300 	.word	0x40012300
 8002524:	080029d5 	.word	0x080029d5
 8002528:	08002a8f 	.word	0x08002a8f
 800252c:	08002aab 	.word	0x08002aab
 8002530:	40012000 	.word	0x40012000
 8002534:	40012100 	.word	0x40012100
 8002538:	40012200 	.word	0x40012200

0800253c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1c>
 8002590:	2302      	movs	r3, #2
 8002592:	e113      	b.n	80027bc <HAL_ADC_ConfigChannel+0x244>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	d925      	bls.n	80025f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68d9      	ldr	r1, [r3, #12]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	3b1e      	subs	r3, #30
 80025ba:	2207      	movs	r2, #7
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43da      	mvns	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	400a      	ands	r2, r1
 80025c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68d9      	ldr	r1, [r3, #12]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	4603      	mov	r3, r0
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4403      	add	r3, r0
 80025e2:	3b1e      	subs	r3, #30
 80025e4:	409a      	lsls	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	e022      	b.n	8002636 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6919      	ldr	r1, [r3, #16]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	2207      	movs	r2, #7
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	400a      	ands	r2, r1
 8002612:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6919      	ldr	r1, [r3, #16]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4618      	mov	r0, r3
 8002626:	4603      	mov	r3, r0
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4403      	add	r3, r0
 800262c:	409a      	lsls	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b06      	cmp	r3, #6
 800263c:	d824      	bhi.n	8002688 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b05      	subs	r3, #5
 8002650:	221f      	movs	r2, #31
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	400a      	ands	r2, r1
 800265e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	4618      	mov	r0, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3b05      	subs	r3, #5
 800267a:	fa00 f203 	lsl.w	r2, r0, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	635a      	str	r2, [r3, #52]	; 0x34
 8002686:	e04c      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	d824      	bhi.n	80026da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	3b23      	subs	r3, #35	; 0x23
 80026a2:	221f      	movs	r2, #31
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43da      	mvns	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	400a      	ands	r2, r1
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3b23      	subs	r3, #35	; 0x23
 80026cc:	fa00 f203 	lsl.w	r2, r0, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
 80026d8:	e023      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	3b41      	subs	r3, #65	; 0x41
 80026ec:	221f      	movs	r2, #31
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	400a      	ands	r2, r1
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	4618      	mov	r0, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	3b41      	subs	r3, #65	; 0x41
 8002716:	fa00 f203 	lsl.w	r2, r0, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <HAL_ADC_ConfigChannel+0x250>)
 8002724:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a28      	ldr	r2, [pc, #160]	; (80027cc <HAL_ADC_ConfigChannel+0x254>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d10f      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x1d8>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b12      	cmp	r3, #18
 8002736:	d10b      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_ADC_ConfigChannel+0x254>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d12b      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x23a>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <HAL_ADC_ConfigChannel+0x258>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d003      	beq.n	800276c <HAL_ADC_ConfigChannel+0x1f4>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b11      	cmp	r3, #17
 800276a:	d122      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <HAL_ADC_ConfigChannel+0x258>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d111      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_ADC_ConfigChannel+0x25c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a11      	ldr	r2, [pc, #68]	; (80027d8 <HAL_ADC_ConfigChannel+0x260>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	0c9a      	lsrs	r2, r3, #18
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a4:	e002      	b.n	80027ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f9      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40012300 	.word	0x40012300
 80027cc:	40012000 	.word	0x40012000
 80027d0:	10000012 	.word	0x10000012
 80027d4:	2000027c 	.word	0x2000027c
 80027d8:	431bde83 	.word	0x431bde83

080027dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027e4:	4b79      	ldr	r3, [pc, #484]	; (80029cc <ADC_Init+0x1f0>)
 80027e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6899      	ldr	r1, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <ADC_Init+0x1f4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002882:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e00f      	b.n	80028da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0202 	bic.w	r2, r2, #2
 80028e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6899      	ldr	r1, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7e1b      	ldrb	r3, [r3, #24]
 80028f4:	005a      	lsls	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002916:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002926:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	3b01      	subs	r3, #1
 8002934:	035a      	lsls	r2, r3, #13
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	e007      	b.n	8002950 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	3b01      	subs	r3, #1
 800296c:	051a      	lsls	r2, r3, #20
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6899      	ldr	r1, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002992:	025a      	lsls	r2, r3, #9
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	029a      	lsls	r2, r3, #10
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40012300 	.word	0x40012300
 80029d0:	0f000001 	.word	0x0f000001

080029d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d13c      	bne.n	8002a68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d12b      	bne.n	8002a60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d127      	bne.n	8002a60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d119      	bne.n	8002a60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0220 	bic.w	r2, r2, #32
 8002a3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff fd6b 	bl	800253c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a66:	e00e      	b.n	8002a86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff fd75 	bl	8002564 <HAL_ADC_ErrorCallback>
}
 8002a7a:	e004      	b.n	8002a86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff fd57 	bl	8002550 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fd4a 	bl	8002564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff29 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff3e 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff8e 	bl	8002bcc <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff31 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffa2 	bl	8002c34 <SysTick_Config>
 8002cf0:	4603      	mov	r3, r0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff fa94 	bl	8002234 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e099      	b.n	8002e4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d38:	e00f      	b.n	8002d5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d3a:	f7ff fa7b 	bl	8002234 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d908      	bls.n	8002d5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2203      	movs	r2, #3
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e078      	b.n	8002e4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e8      	bne.n	8002d3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <HAL_DMA_Init+0x158>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d117      	bne.n	8002e1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00e      	beq.n	8002e1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa6f 	bl	80032e4 <DMA_CheckFifoParam>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2240      	movs	r2, #64	; 0x40
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e016      	b.n	8002e4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa26 	bl	8003278 <DMA_CalcBaseAndBitshift>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	223f      	movs	r2, #63	; 0x3f
 8002e36:	409a      	lsls	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	f010803f 	.word	0xf010803f

08002e58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_DMA_Start_IT+0x26>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e040      	b.n	8002f00 <HAL_DMA_Start_IT+0xa8>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d12f      	bne.n	8002ef2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2202      	movs	r2, #2
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f9b8 	bl	800321c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	223f      	movs	r2, #63	; 0x3f
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0216 	orr.w	r2, r2, #22
 8002ec6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0208 	orr.w	r2, r2, #8
 8002ede:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e005      	b.n	8002efe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
 8002efc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f14:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <HAL_DMA_IRQHandler+0x248>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a8e      	ldr	r2, [pc, #568]	; (8003154 <HAL_DMA_IRQHandler+0x24c>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0a9b      	lsrs	r3, r3, #10
 8002f20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	2208      	movs	r2, #8
 8002f34:	409a      	lsls	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01a      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0204 	bic.w	r2, r2, #4
 8002f5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	2208      	movs	r2, #8
 8002f62:	409a      	lsls	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	2201      	movs	r2, #1
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	2201      	movs	r2, #1
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	2204      	movs	r2, #4
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d012      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	2204      	movs	r2, #4
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d043      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03c      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	2210      	movs	r2, #16
 8003004:	409a      	lsls	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d018      	beq.n	800304a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d024      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
 8003036:	e01f      	b.n	8003078 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
 8003048:	e016      	b.n	8003078 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0208 	bic.w	r2, r2, #8
 8003066:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	2220      	movs	r2, #32
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 808f 	beq.w	80031a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8087 	beq.w	80031a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	2220      	movs	r2, #32
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d136      	bne.n	8003120 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0216 	bic.w	r2, r2, #22
 80030c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <HAL_DMA_IRQHandler+0x1da>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0208 	bic.w	r2, r2, #8
 80030f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	223f      	movs	r2, #63	; 0x3f
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d07e      	beq.n	8003214 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
        }
        return;
 800311e:	e079      	b.n	8003214 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01d      	beq.n	800316a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10d      	bne.n	8003158 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	2b00      	cmp	r3, #0
 8003142:	d031      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e02c      	b.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
 800314e:	bf00      	nop
 8003150:	2000027c 	.word	0x2000027c
 8003154:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d023      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
 8003168:	e01e      	b.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10f      	bne.n	8003198 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0210 	bic.w	r2, r2, #16
 8003186:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d032      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d022      	beq.n	8003202 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2205      	movs	r2, #5
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d307      	bcc.n	80031f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f2      	bne.n	80031d4 <HAL_DMA_IRQHandler+0x2cc>
 80031ee:	e000      	b.n	80031f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
 8003212:	e000      	b.n	8003216 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003214:	bf00      	nop
    }
  }
}
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003238:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d108      	bne.n	800325c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800325a:	e007      	b.n	800326c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	60da      	str	r2, [r3, #12]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	3b10      	subs	r3, #16
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <DMA_CalcBaseAndBitshift+0x64>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003292:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d909      	bls.n	80032ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	1d1a      	adds	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	659a      	str	r2, [r3, #88]	; 0x58
 80032b8:	e007      	b.n	80032ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	aaaaaaab 	.word	0xaaaaaaab
 80032e0:	08009524 	.word	0x08009524

080032e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11f      	bne.n	800333e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d856      	bhi.n	80033b2 <DMA_CheckFifoParam+0xce>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <DMA_CheckFifoParam+0x28>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	0800331d 	.word	0x0800331d
 8003310:	0800332f 	.word	0x0800332f
 8003314:	0800331d 	.word	0x0800331d
 8003318:	080033b3 	.word	0x080033b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d046      	beq.n	80033b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332c:	e043      	b.n	80033b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003336:	d140      	bne.n	80033ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333c:	e03d      	b.n	80033ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	d121      	bne.n	800338c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d837      	bhi.n	80033be <DMA_CheckFifoParam+0xda>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <DMA_CheckFifoParam+0x70>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003365 	.word	0x08003365
 8003358:	0800336b 	.word	0x0800336b
 800335c:	08003365 	.word	0x08003365
 8003360:	0800337d 	.word	0x0800337d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      break;
 8003368:	e030      	b.n	80033cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d025      	beq.n	80033c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337a:	e022      	b.n	80033c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003384:	d11f      	bne.n	80033c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800338a:	e01c      	b.n	80033c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d903      	bls.n	800339a <DMA_CheckFifoParam+0xb6>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b03      	cmp	r3, #3
 8003396:	d003      	beq.n	80033a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003398:	e018      	b.n	80033cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
      break;
 800339e:	e015      	b.n	80033cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00e      	beq.n	80033ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      break;
 80033b0:	e00b      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
      break;
 80033b2:	bf00      	nop
 80033b4:	e00a      	b.n	80033cc <DMA_CheckFifoParam+0xe8>
      break;
 80033b6:	bf00      	nop
 80033b8:	e008      	b.n	80033cc <DMA_CheckFifoParam+0xe8>
      break;
 80033ba:	bf00      	nop
 80033bc:	e006      	b.n	80033cc <DMA_CheckFifoParam+0xe8>
      break;
 80033be:	bf00      	nop
 80033c0:	e004      	b.n	80033cc <DMA_CheckFifoParam+0xe8>
      break;
 80033c2:	bf00      	nop
 80033c4:	e002      	b.n	80033cc <DMA_CheckFifoParam+0xe8>
      break;   
 80033c6:	bf00      	nop
 80033c8:	e000      	b.n	80033cc <DMA_CheckFifoParam+0xe8>
      break;
 80033ca:	bf00      	nop
    }
  } 
  
  return status; 
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop

080033dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e06c      	b.n	80034c8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2223      	movs	r2, #35	; 0x23
 80033fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7fe fb93 	bl	8001b2c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_ETH_Init+0xf4>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	4a30      	ldr	r2, [pc, #192]	; (80034d0 <HAL_ETH_Init+0xf4>)
 8003410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003414:	6453      	str	r3, [r2, #68]	; 0x44
 8003416:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_ETH_Init+0xf4>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <HAL_ETH_Init+0xf8>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a2b      	ldr	r2, [pc, #172]	; (80034d4 <HAL_ETH_Init+0xf8>)
 8003428:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800342c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <HAL_ETH_Init+0xf8>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4927      	ldr	r1, [pc, #156]	; (80034d4 <HAL_ETH_Init+0xf8>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800343c:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <HAL_ETH_Init+0xf8>)
 800343e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003456:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003458:	f7fe feec 	bl	8002234 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800345e:	e011      	b.n	8003484 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003460:	f7fe fee8 	bl	8002234 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800346e:	d909      	bls.n	8003484 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2204      	movs	r2, #4
 8003474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	22e0      	movs	r2, #224	; 0xe0
 800347c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e021      	b.n	80034c8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e4      	bne.n	8003460 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f958 	bl	800374c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f9ff 	bl	80038a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa55 	bl	8003952 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	461a      	mov	r2, r3
 80034ae:	2100      	movs	r1, #0
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f9bd 	bl	8003830 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2210      	movs	r2, #16
 80034c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40013800 	.word	0x40013800

080034d8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4b51      	ldr	r3, [pc, #324]	; (8003634 <ETH_SetMACConfig+0x15c>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	7c1b      	ldrb	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <ETH_SetMACConfig+0x28>
 80034fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034fe:	e000      	b.n	8003502 <ETH_SetMACConfig+0x2a>
 8003500:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	7c5b      	ldrb	r3, [r3, #17]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <ETH_SetMACConfig+0x38>
 800350a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800350e:	e000      	b.n	8003512 <ETH_SetMACConfig+0x3a>
 8003510:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003512:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003518:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	7fdb      	ldrb	r3, [r3, #31]
 800351e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003520:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003526:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	7f92      	ldrb	r2, [r2, #30]
 800352c:	2a00      	cmp	r2, #0
 800352e:	d102      	bne.n	8003536 <ETH_SetMACConfig+0x5e>
 8003530:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003534:	e000      	b.n	8003538 <ETH_SetMACConfig+0x60>
 8003536:	2200      	movs	r2, #0
                        macconf->Speed |
 8003538:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	7f1b      	ldrb	r3, [r3, #28]
 800353e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003540:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003546:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	791b      	ldrb	r3, [r3, #4]
 800354c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800354e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003556:	2a00      	cmp	r2, #0
 8003558:	d102      	bne.n	8003560 <ETH_SetMACConfig+0x88>
 800355a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355e:	e000      	b.n	8003562 <ETH_SetMACConfig+0x8a>
 8003560:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003562:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	7bdb      	ldrb	r3, [r3, #15]
 8003568:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800356a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003570:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003578:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800357a:	4313      	orrs	r3, r2
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003592:	2001      	movs	r0, #1
 8003594:	f7fe fe5a 	bl	800224c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80035ae:	4013      	ands	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80035be:	2a00      	cmp	r2, #0
 80035c0:	d101      	bne.n	80035c6 <ETH_SetMACConfig+0xee>
 80035c2:	2280      	movs	r2, #128	; 0x80
 80035c4:	e000      	b.n	80035c8 <ETH_SetMACConfig+0xf0>
 80035c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80035ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80035d6:	2a01      	cmp	r2, #1
 80035d8:	d101      	bne.n	80035de <ETH_SetMACConfig+0x106>
 80035da:	2208      	movs	r2, #8
 80035dc:	e000      	b.n	80035e0 <ETH_SetMACConfig+0x108>
 80035de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80035e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80035e8:	2a01      	cmp	r2, #1
 80035ea:	d101      	bne.n	80035f0 <ETH_SetMACConfig+0x118>
 80035ec:	2204      	movs	r2, #4
 80035ee:	e000      	b.n	80035f2 <ETH_SetMACConfig+0x11a>
 80035f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80035f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80035fa:	2a01      	cmp	r2, #1
 80035fc:	d101      	bne.n	8003602 <ETH_SetMACConfig+0x12a>
 80035fe:	2202      	movs	r2, #2
 8003600:	e000      	b.n	8003604 <ETH_SetMACConfig+0x12c>
 8003602:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003604:	4313      	orrs	r3, r2
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800361c:	2001      	movs	r0, #1
 800361e:	f7fe fe15 	bl	800224c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	ff20810f 	.word	0xff20810f

08003638 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <ETH_SetDMAConfig+0x110>)
 8003652:	4013      	ands	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	7b1b      	ldrb	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <ETH_SetDMAConfig+0x2c>
 800365e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003662:	e000      	b.n	8003666 <ETH_SetDMAConfig+0x2e>
 8003664:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	7b5b      	ldrb	r3, [r3, #13]
 800366a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800366c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	7f52      	ldrb	r2, [r2, #29]
 8003672:	2a00      	cmp	r2, #0
 8003674:	d102      	bne.n	800367c <ETH_SetDMAConfig+0x44>
 8003676:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800367a:	e000      	b.n	800367e <ETH_SetDMAConfig+0x46>
 800367c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800367e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	7b9b      	ldrb	r3, [r3, #14]
 8003684:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003686:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800368c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	7f1b      	ldrb	r3, [r3, #28]
 8003692:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003694:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	7f9b      	ldrb	r3, [r3, #30]
 800369a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800369c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036ac:	4313      	orrs	r3, r2
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036bc:	461a      	mov	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036ce:	2001      	movs	r0, #1
 80036d0:	f7fe fdbc 	bl	800224c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036dc:	461a      	mov	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	791b      	ldrb	r3, [r3, #4]
 80036e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80036f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003700:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003702:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800370a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003710:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800371a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800371e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800372c:	2001      	movs	r0, #1
 800372e:	f7fe fd8d 	bl	800224c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6013      	str	r3, [r2, #0]
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	f8de3f23 	.word	0xf8de3f23

0800374c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b0a6      	sub	sp, #152	; 0x98
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003760:	2300      	movs	r3, #0
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800377c:	2300      	movs	r3, #0
 800377e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003788:	2300      	movs	r3, #0
 800378a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003792:	2300      	movs	r3, #0
 8003794:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003796:	2300      	movs	r3, #0
 8003798:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80037ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037b2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80037b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80037c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff fe86 	bl	80034d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80037da:	2301      	movs	r3, #1
 80037dc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80037ee:	2300      	movs	r3, #0
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80037fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003800:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003806:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800380c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003814:	2300      	movs	r3, #0
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003818:	2300      	movs	r3, #0
 800381a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800381c:	f107 0308 	add.w	r3, r7, #8
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ff08 	bl	8003638 <ETH_SetDMAConfig>
}
 8003828:	bf00      	nop
 800382a:	3798      	adds	r7, #152	; 0x98
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3305      	adds	r3, #5
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	3204      	adds	r2, #4
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <ETH_MACAddressConfig+0x68>)
 8003852:	4413      	add	r3, r2
 8003854:	461a      	mov	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3303      	adds	r3, #3
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	061a      	lsls	r2, r3, #24
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3302      	adds	r3, #2
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3301      	adds	r3, #1
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	4313      	orrs	r3, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <ETH_MACAddressConfig+0x6c>)
 8003882:	4413      	add	r3, r2
 8003884:	461a      	mov	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	6013      	str	r3, [r2, #0]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40028040 	.word	0x40028040
 800389c:	40028044 	.word	0x40028044

080038a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e03e      	b.n	800392c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68d9      	ldr	r1, [r3, #12]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	440b      	add	r3, r1
 80038be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	3206      	adds	r2, #6
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d80c      	bhi.n	8003910 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68d9      	ldr	r1, [r3, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	440b      	add	r3, r1
 8003908:	461a      	mov	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	e004      	b.n	800391a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	461a      	mov	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3301      	adds	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d9bd      	bls.n	80038ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003944:	611a      	str	r2, [r3, #16]
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e046      	b.n	80039ee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6919      	ldr	r1, [r3, #16]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	440b      	add	r3, r1
 8003970:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2200      	movs	r2, #0
 800398e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800399c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80039a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	3212      	adds	r2, #18
 80039ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d80c      	bhi.n	80039de <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6919      	ldr	r1, [r3, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	461a      	mov	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	e004      	b.n	80039e8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	461a      	mov	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d9b5      	bls.n	8003960 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1e:	60da      	str	r2, [r3, #12]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <HAL_FLASH_Program+0xa0>)
 8003a40:	7e1b      	ldrb	r3, [r3, #24]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_FLASH_Program+0x1e>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e03b      	b.n	8003ac2 <HAL_FLASH_Program+0x96>
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_FLASH_Program+0xa0>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a54:	f000 f870 	bl	8003b38 <FLASH_WaitForLastOperation>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d12b      	bne.n	8003aba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003a68:	783b      	ldrb	r3, [r7, #0]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	68b8      	ldr	r0, [r7, #8]
 8003a6e:	f000 f91b 	bl	8003ca8 <FLASH_Program_Byte>
 8003a72:	e016      	b.n	8003aa2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003a7a:	883b      	ldrh	r3, [r7, #0]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	68b8      	ldr	r0, [r7, #8]
 8003a80:	f000 f8ee 	bl	8003c60 <FLASH_Program_HalfWord>
 8003a84:	e00d      	b.n	8003aa2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d105      	bne.n	8003a98 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	68b8      	ldr	r0, [r7, #8]
 8003a92:	f000 f8c3 	bl	8003c1c <FLASH_Program_Word>
 8003a96:	e004      	b.n	8003aa2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a9c:	68b8      	ldr	r0, [r7, #8]
 8003a9e:	f000 f88b 	bl	8003bb8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003aa2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003aa6:	f000 f847 	bl	8003b38 <FLASH_WaitForLastOperation>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_FLASH_Program+0xa4>)
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <HAL_FLASH_Program+0xa4>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003aba:	4b04      	ldr	r3, [pc, #16]	; (8003acc <HAL_FLASH_Program+0xa0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200007e0 	.word	0x200007e0
 8003ad0:	40023c00 	.word	0x40023c00

08003ad4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_FLASH_Unlock+0x38>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da0b      	bge.n	8003afe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_FLASH_Unlock+0x38>)
 8003ae8:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <HAL_FLASH_Unlock+0x3c>)
 8003aea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_FLASH_Unlock+0x38>)
 8003aee:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <HAL_FLASH_Unlock+0x40>)
 8003af0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_FLASH_Unlock+0x38>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da01      	bge.n	8003afe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003afe:	79fb      	ldrb	r3, [r7, #7]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40023c00 	.word	0x40023c00
 8003b10:	45670123 	.word	0x45670123
 8003b14:	cdef89ab 	.word	0xcdef89ab

08003b18 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_FLASH_Lock+0x1c>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_FLASH_Lock+0x1c>)
 8003b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b26:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40023c00 	.word	0x40023c00

08003b38 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <FLASH_WaitForLastOperation+0x78>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b4a:	f7fe fb73 	bl	8002234 <HAL_GetTick>
 8003b4e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b50:	e010      	b.n	8003b74 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d00c      	beq.n	8003b74 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <FLASH_WaitForLastOperation+0x38>
 8003b60:	f7fe fb68 	bl	8002234 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d201      	bcs.n	8003b74 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e019      	b.n	8003ba8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <FLASH_WaitForLastOperation+0x7c>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e8      	bne.n	8003b52 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <FLASH_WaitForLastOperation+0x7c>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <FLASH_WaitForLastOperation+0x7c>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <FLASH_WaitForLastOperation+0x7c>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b9e:	f000 f8a5 	bl	8003cec <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
  
}  
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	200007e0 	.word	0x200007e0
 8003bb4:	40023c00 	.word	0x40023c00

08003bb8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <FLASH_Program_DoubleWord+0x60>)
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <FLASH_Program_DoubleWord+0x60>)
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <FLASH_Program_DoubleWord+0x60>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <FLASH_Program_DoubleWord+0x60>)
 8003bd6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003bda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <FLASH_Program_DoubleWord+0x60>)
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <FLASH_Program_DoubleWord+0x60>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003bee:	f3bf 8f6f 	isb	sy
}
 8003bf2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	000a      	movs	r2, r1
 8003c02:	2300      	movs	r3, #0
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	3104      	adds	r1, #4
 8003c08:	4613      	mov	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	40023c00 	.word	0x40023c00

08003c1c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <FLASH_Program_Word+0x40>)
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	4a0c      	ldr	r2, [pc, #48]	; (8003c5c <FLASH_Program_Word+0x40>)
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <FLASH_Program_Word+0x40>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <FLASH_Program_Word+0x40>)
 8003c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <FLASH_Program_Word+0x40>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	4a06      	ldr	r2, [pc, #24]	; (8003c5c <FLASH_Program_Word+0x40>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	601a      	str	r2, [r3, #0]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40023c00 	.word	0x40023c00

08003c60 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <FLASH_Program_HalfWord+0x44>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	4a0c      	ldr	r2, [pc, #48]	; (8003ca4 <FLASH_Program_HalfWord+0x44>)
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <FLASH_Program_HalfWord+0x44>)
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <FLASH_Program_HalfWord+0x44>)
 8003c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c84:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <FLASH_Program_HalfWord+0x44>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	4a06      	ldr	r2, [pc, #24]	; (8003ca4 <FLASH_Program_HalfWord+0x44>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	887a      	ldrh	r2, [r7, #2]
 8003c94:	801a      	strh	r2, [r3, #0]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40023c00 	.word	0x40023c00

08003ca8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <FLASH_Program_Byte+0x40>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ce8 <FLASH_Program_Byte+0x40>)
 8003cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <FLASH_Program_Byte+0x40>)
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <FLASH_Program_Byte+0x40>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <FLASH_Program_Byte+0x40>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	4a06      	ldr	r2, [pc, #24]	; (8003ce8 <FLASH_Program_Byte+0x40>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	701a      	strb	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40023c00 	.word	0x40023c00

08003cec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003cfc:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f043 0310 	orr.w	r3, r3, #16
 8003d04:	4a2b      	ldr	r2, [pc, #172]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d06:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003d08:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003d0e:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003d1a:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f043 0308 	orr.w	r3, r3, #8
 8003d22:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d24:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003d26:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d28:	2220      	movs	r2, #32
 8003d2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003d2c:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f043 0304 	orr.w	r3, r3, #4
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d46:	2240      	movs	r2, #64	; 0x40
 8003d48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003d4a:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003d56:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d60:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003d62:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d86:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f043 0320 	orr.w	r3, r3, #32
 8003d9c:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <FLASH_SetErrorCode+0xc8>)
 8003d9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <FLASH_SetErrorCode+0xc4>)
 8003da2:	2202      	movs	r2, #2
 8003da4:	60da      	str	r2, [r3, #12]
  }
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40023c00 	.word	0x40023c00
 8003db4:	200007e0 	.word	0x200007e0

08003db8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dca:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <HAL_FLASHEx_Erase+0xdc>)
 8003dcc:	7e1b      	ldrb	r3, [r3, #24]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_FLASHEx_Erase+0x1e>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e05a      	b.n	8003e8c <HAL_FLASHEx_Erase+0xd4>
 8003dd6:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <HAL_FLASHEx_Erase+0xdc>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ddc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003de0:	f7ff feaa 	bl	8003b38 <FLASH_WaitForLastOperation>
 8003de4:	4603      	mov	r3, r0
 8003de6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d14a      	bne.n	8003e84 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d117      	bne.n	8003e2e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 f846 	bl	8003e9c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e14:	f7ff fe90 	bl	8003b38 <FLASH_WaitForLastOperation>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_FLASHEx_Erase+0xe0>)
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_FLASHEx_Erase+0xe0>)
 8003e22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e26:	f023 0304 	bic.w	r3, r3, #4
 8003e2a:	6113      	str	r3, [r2, #16]
 8003e2c:	e028      	b.n	8003e80 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	e01c      	b.n	8003e70 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	68b8      	ldr	r0, [r7, #8]
 8003e40:	f000 f866 	bl	8003f10 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e48:	f7ff fe76 	bl	8003b38 <FLASH_WaitForLastOperation>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <HAL_FLASHEx_Erase+0xe0>)
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <HAL_FLASHEx_Erase+0xe0>)
 8003e56:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003e5a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	601a      	str	r2, [r3, #0]
          break;
 8003e68:	e00a      	b.n	8003e80 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d3da      	bcc.n	8003e36 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003e80:	f000 f894 	bl	8003fac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_FLASHEx_Erase+0xdc>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	761a      	strb	r2, [r3, #24]

  return status;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200007e0 	.word	0x200007e0
 8003e98:	40023c00 	.word	0x40023c00

08003e9c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	6039      	str	r1, [r7, #0]
 8003ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ea8:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <FLASH_MassErase+0x70>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <FLASH_MassErase+0x70>)
 8003eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb2:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d108      	bne.n	8003ecc <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <FLASH_MassErase+0x70>)
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <FLASH_MassErase+0x70>)
 8003ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec4:	f043 0304 	orr.w	r3, r3, #4
 8003ec8:	6113      	str	r3, [r2, #16]
 8003eca:	e00f      	b.n	8003eec <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d106      	bne.n	8003ee0 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <FLASH_MassErase+0x70>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <FLASH_MassErase+0x70>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6113      	str	r3, [r2, #16]
 8003ede:	e005      	b.n	8003eec <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <FLASH_MassErase+0x70>)
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <FLASH_MassErase+0x70>)
 8003ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eea:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <FLASH_MassErase+0x70>)
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <FLASH_MassErase+0x70>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6113      	str	r3, [r2, #16]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40023c00 	.word	0x40023c00

08003f10 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	e010      	b.n	8003f4e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d103      	bne.n	8003f3a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e009      	b.n	8003f4e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d103      	bne.n	8003f48 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	e002      	b.n	8003f4e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003f48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b0b      	cmp	r3, #11
 8003f52:	d902      	bls.n	8003f5a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	490f      	ldr	r1, [pc, #60]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4313      	orrs	r3, r2
 8003f88:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f8a:	f043 0302 	orr.w	r3, r3, #2
 8003f8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <FLASH_Erase_Sector+0x98>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	6113      	str	r3, [r2, #16]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40023c00 	.word	0x40023c00

08003fac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003fb0:	4b20      	ldr	r3, [pc, #128]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d017      	beq.n	8003fec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b17      	ldr	r3, [pc, #92]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a16      	ldr	r2, [pc, #88]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fde:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d017      	beq.n	8004028 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0d      	ldr	r2, [pc, #52]	; (8004034 <FLASH_FlushCaches+0x88>)
 8003ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004002:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <FLASH_FlushCaches+0x88>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <FLASH_FlushCaches+0x88>)
 800400a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <FLASH_FlushCaches+0x88>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <FLASH_FlushCaches+0x88>)
 8004016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800401a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <FLASH_FlushCaches+0x88>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <FLASH_FlushCaches+0x88>)
 8004022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004026:	6013      	str	r3, [r2, #0]
  }
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40023c00 	.word	0x40023c00

08004038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e177      	b.n	8004344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004054:	2201      	movs	r2, #1
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	429a      	cmp	r2, r3
 800406e:	f040 8166 	bne.w	800433e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d005      	beq.n	800408a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004086:	2b02      	cmp	r3, #2
 8004088:	d130      	bne.n	80040ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	2203      	movs	r2, #3
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43db      	mvns	r3, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4013      	ands	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040c0:	2201      	movs	r2, #1
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 0201 	and.w	r2, r3, #1
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d017      	beq.n	8004128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	2203      	movs	r2, #3
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d123      	bne.n	800417c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	08da      	lsrs	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3208      	adds	r2, #8
 800413c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	220f      	movs	r2, #15
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	08da      	lsrs	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3208      	adds	r2, #8
 8004176:	69b9      	ldr	r1, [r7, #24]
 8004178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	2203      	movs	r2, #3
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 0203 	and.w	r2, r3, #3
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80c0 	beq.w	800433e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	4b66      	ldr	r3, [pc, #408]	; (800435c <HAL_GPIO_Init+0x324>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	4a65      	ldr	r2, [pc, #404]	; (800435c <HAL_GPIO_Init+0x324>)
 80041c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041cc:	6453      	str	r3, [r2, #68]	; 0x44
 80041ce:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_GPIO_Init+0x324>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041da:	4a61      	ldr	r2, [pc, #388]	; (8004360 <HAL_GPIO_Init+0x328>)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	3302      	adds	r3, #2
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	220f      	movs	r2, #15
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a58      	ldr	r2, [pc, #352]	; (8004364 <HAL_GPIO_Init+0x32c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d037      	beq.n	8004276 <HAL_GPIO_Init+0x23e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a57      	ldr	r2, [pc, #348]	; (8004368 <HAL_GPIO_Init+0x330>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d031      	beq.n	8004272 <HAL_GPIO_Init+0x23a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a56      	ldr	r2, [pc, #344]	; (800436c <HAL_GPIO_Init+0x334>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02b      	beq.n	800426e <HAL_GPIO_Init+0x236>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a55      	ldr	r2, [pc, #340]	; (8004370 <HAL_GPIO_Init+0x338>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d025      	beq.n	800426a <HAL_GPIO_Init+0x232>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a54      	ldr	r2, [pc, #336]	; (8004374 <HAL_GPIO_Init+0x33c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01f      	beq.n	8004266 <HAL_GPIO_Init+0x22e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a53      	ldr	r2, [pc, #332]	; (8004378 <HAL_GPIO_Init+0x340>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d019      	beq.n	8004262 <HAL_GPIO_Init+0x22a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_GPIO_Init+0x344>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_GPIO_Init+0x226>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a51      	ldr	r2, [pc, #324]	; (8004380 <HAL_GPIO_Init+0x348>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00d      	beq.n	800425a <HAL_GPIO_Init+0x222>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a50      	ldr	r2, [pc, #320]	; (8004384 <HAL_GPIO_Init+0x34c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <HAL_GPIO_Init+0x21e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4f      	ldr	r2, [pc, #316]	; (8004388 <HAL_GPIO_Init+0x350>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_GPIO_Init+0x21a>
 800424e:	2309      	movs	r3, #9
 8004250:	e012      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004252:	230a      	movs	r3, #10
 8004254:	e010      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004256:	2308      	movs	r3, #8
 8004258:	e00e      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800425a:	2307      	movs	r3, #7
 800425c:	e00c      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800425e:	2306      	movs	r3, #6
 8004260:	e00a      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004262:	2305      	movs	r3, #5
 8004264:	e008      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004266:	2304      	movs	r3, #4
 8004268:	e006      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800426a:	2303      	movs	r3, #3
 800426c:	e004      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800426e:	2302      	movs	r3, #2
 8004270:	e002      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004276:	2300      	movs	r3, #0
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	f002 0203 	and.w	r2, r2, #3
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4093      	lsls	r3, r2
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004288:	4935      	ldr	r1, [pc, #212]	; (8004360 <HAL_GPIO_Init+0x328>)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	3302      	adds	r3, #2
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004296:	4b3d      	ldr	r3, [pc, #244]	; (800438c <HAL_GPIO_Init+0x354>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042ba:	4a34      	ldr	r2, [pc, #208]	; (800438c <HAL_GPIO_Init+0x354>)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <HAL_GPIO_Init+0x354>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042e4:	4a29      	ldr	r2, [pc, #164]	; (800438c <HAL_GPIO_Init+0x354>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042ea:	4b28      	ldr	r3, [pc, #160]	; (800438c <HAL_GPIO_Init+0x354>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800430e:	4a1f      	ldr	r2, [pc, #124]	; (800438c <HAL_GPIO_Init+0x354>)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004314:	4b1d      	ldr	r3, [pc, #116]	; (800438c <HAL_GPIO_Init+0x354>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <HAL_GPIO_Init+0x354>)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3301      	adds	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b0f      	cmp	r3, #15
 8004348:	f67f ae84 	bls.w	8004054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3724      	adds	r7, #36	; 0x24
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	40013800 	.word	0x40013800
 8004364:	40020000 	.word	0x40020000
 8004368:	40020400 	.word	0x40020400
 800436c:	40020800 	.word	0x40020800
 8004370:	40020c00 	.word	0x40020c00
 8004374:	40021000 	.word	0x40021000
 8004378:	40021400 	.word	0x40021400
 800437c:	40021800 	.word	0x40021800
 8004380:	40021c00 	.word	0x40021c00
 8004384:	40022000 	.word	0x40022000
 8004388:	40022400 	.word	0x40022400
 800438c:	40013c00 	.word	0x40013c00

08004390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e001      	b.n	80043b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043dc:	e003      	b.n	80043e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	041a      	lsls	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	619a      	str	r2, [r3, #24]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004404:	887a      	ldrh	r2, [r7, #2]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4013      	ands	r3, r2
 800440a:	041a      	lsls	r2, r3, #16
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	43d9      	mvns	r1, r3
 8004410:	887b      	ldrh	r3, [r7, #2]
 8004412:	400b      	ands	r3, r1
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	619a      	str	r2, [r3, #24]
}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc fafa 	bl	8000a40 <HAL_GPIO_EXTI_Callback>
  }
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40013c00 	.word	0x40013c00

08004458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e12b      	b.n	80046c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd fc1a 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	; 0x24
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044bc:	f001 fa30 	bl	8005920 <HAL_RCC_GetPCLK1Freq>
 80044c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4a81      	ldr	r2, [pc, #516]	; (80046cc <HAL_I2C_Init+0x274>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d807      	bhi.n	80044dc <HAL_I2C_Init+0x84>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a80      	ldr	r2, [pc, #512]	; (80046d0 <HAL_I2C_Init+0x278>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	bf94      	ite	ls
 80044d4:	2301      	movls	r3, #1
 80044d6:	2300      	movhi	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e006      	b.n	80044ea <HAL_I2C_Init+0x92>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a7d      	ldr	r2, [pc, #500]	; (80046d4 <HAL_I2C_Init+0x27c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bf94      	ite	ls
 80044e4:	2301      	movls	r3, #1
 80044e6:	2300      	movhi	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0e7      	b.n	80046c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a78      	ldr	r2, [pc, #480]	; (80046d8 <HAL_I2C_Init+0x280>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	0c9b      	lsrs	r3, r3, #18
 80044fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4a6a      	ldr	r2, [pc, #424]	; (80046cc <HAL_I2C_Init+0x274>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d802      	bhi.n	800452c <HAL_I2C_Init+0xd4>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3301      	adds	r3, #1
 800452a:	e009      	b.n	8004540 <HAL_I2C_Init+0xe8>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	4a69      	ldr	r2, [pc, #420]	; (80046dc <HAL_I2C_Init+0x284>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	099b      	lsrs	r3, r3, #6
 800453e:	3301      	adds	r3, #1
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	430b      	orrs	r3, r1
 8004546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004552:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	495c      	ldr	r1, [pc, #368]	; (80046cc <HAL_I2C_Init+0x274>)
 800455c:	428b      	cmp	r3, r1
 800455e:	d819      	bhi.n	8004594 <HAL_I2C_Init+0x13c>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1e59      	subs	r1, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fbb1 f3f3 	udiv	r3, r1, r3
 800456e:	1c59      	adds	r1, r3, #1
 8004570:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004574:	400b      	ands	r3, r1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_I2C_Init+0x138>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1e59      	subs	r1, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fbb1 f3f3 	udiv	r3, r1, r3
 8004588:	3301      	adds	r3, #1
 800458a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458e:	e051      	b.n	8004634 <HAL_I2C_Init+0x1dc>
 8004590:	2304      	movs	r3, #4
 8004592:	e04f      	b.n	8004634 <HAL_I2C_Init+0x1dc>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d111      	bne.n	80045c0 <HAL_I2C_Init+0x168>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1e58      	subs	r0, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	440b      	add	r3, r1
 80045aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ae:	3301      	adds	r3, #1
 80045b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	e012      	b.n	80045e6 <HAL_I2C_Init+0x18e>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1e58      	subs	r0, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	0099      	lsls	r1, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_I2C_Init+0x196>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e022      	b.n	8004634 <HAL_I2C_Init+0x1dc>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10e      	bne.n	8004614 <HAL_I2C_Init+0x1bc>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1e58      	subs	r0, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6859      	ldr	r1, [r3, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	440b      	add	r3, r1
 8004604:	fbb0 f3f3 	udiv	r3, r0, r3
 8004608:	3301      	adds	r3, #1
 800460a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004612:	e00f      	b.n	8004634 <HAL_I2C_Init+0x1dc>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	0099      	lsls	r1, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	fbb0 f3f3 	udiv	r3, r0, r3
 800462a:	3301      	adds	r3, #1
 800462c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	6809      	ldr	r1, [r1, #0]
 8004638:	4313      	orrs	r3, r2
 800463a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69da      	ldr	r2, [r3, #28]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6911      	ldr	r1, [r2, #16]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68d2      	ldr	r2, [r2, #12]
 800466e:	4311      	orrs	r1, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	430b      	orrs	r3, r1
 8004676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	000186a0 	.word	0x000186a0
 80046d0:	001e847f 	.word	0x001e847f
 80046d4:	003d08ff 	.word	0x003d08ff
 80046d8:	431bde83 	.word	0x431bde83
 80046dc:	10624dd3 	.word	0x10624dd3

080046e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	461a      	mov	r2, r3
 80046ec:	460b      	mov	r3, r1
 80046ee:	817b      	strh	r3, [r7, #10]
 80046f0:	4613      	mov	r3, r2
 80046f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046f4:	f7fd fd9e 	bl	8002234 <HAL_GetTick>
 80046f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b20      	cmp	r3, #32
 8004704:	f040 80e0 	bne.w	80048c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2319      	movs	r3, #25
 800470e:	2201      	movs	r2, #1
 8004710:	4970      	ldr	r1, [pc, #448]	; (80048d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 fa92 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
 8004720:	e0d3      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_I2C_Master_Transmit+0x50>
 800472c:	2302      	movs	r3, #2
 800472e:	e0cc      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b01      	cmp	r3, #1
 8004744:	d007      	beq.n	8004756 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0201 	orr.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004764:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2221      	movs	r2, #33	; 0x21
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2210      	movs	r2, #16
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	893a      	ldrh	r2, [r7, #8]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a50      	ldr	r2, [pc, #320]	; (80048d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004798:	8979      	ldrh	r1, [r7, #10]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f9ca 	bl	8004b38 <I2C_MasterRequestWrite>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e08d      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047c4:	e066      	b.n	8004894 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	6a39      	ldr	r1, [r7, #32]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fb0c 	bl	8004de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00d      	beq.n	80047f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d107      	bne.n	80047ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e06b      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b04      	cmp	r3, #4
 800482e:	d11b      	bne.n	8004868 <HAL_I2C_Master_Transmit+0x188>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	d017      	beq.n	8004868 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	6a39      	ldr	r1, [r7, #32]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fafc 	bl	8004e6a <I2C_WaitOnBTFFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	2b04      	cmp	r3, #4
 800487e:	d107      	bne.n	8004890 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e01a      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d194      	bne.n	80047c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	00100002 	.word	0x00100002
 80048d8:	ffff0000 	.word	0xffff0000

080048dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	460b      	mov	r3, r1
 80048ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80048ec:	f7fd fca2 	bl	8002234 <HAL_GetTick>
 80048f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b20      	cmp	r3, #32
 8004900:	f040 8111 	bne.w	8004b26 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2319      	movs	r3, #25
 800490a:	2201      	movs	r2, #1
 800490c:	4988      	ldr	r1, [pc, #544]	; (8004b30 <HAL_I2C_IsDeviceReady+0x254>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f994 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
 800491c:	e104      	b.n	8004b28 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_I2C_IsDeviceReady+0x50>
 8004928:	2302      	movs	r3, #2
 800492a:	e0fd      	b.n	8004b28 <HAL_I2C_IsDeviceReady+0x24c>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d007      	beq.n	8004952 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0201 	orr.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004960:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2224      	movs	r2, #36	; 0x24
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a70      	ldr	r2, [pc, #448]	; (8004b34 <HAL_I2C_IsDeviceReady+0x258>)
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004984:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2200      	movs	r2, #0
 800498e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f952 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ac:	d103      	bne.n	80049b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0b6      	b.n	8004b28 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80049ca:	f7fd fc33 	bl	8002234 <HAL_GetTick>
 80049ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	bf0c      	ite	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	2300      	movne	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f4:	bf0c      	ite	eq
 80049f6:	2301      	moveq	r3, #1
 80049f8:	2300      	movne	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049fe:	e025      	b.n	8004a4c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a00:	f7fd fc18 	bl	8002234 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <HAL_I2C_IsDeviceReady+0x13a>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	22a0      	movs	r2, #160	; 0xa0
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2ba0      	cmp	r3, #160	; 0xa0
 8004a56:	d005      	beq.n	8004a64 <HAL_I2C_IsDeviceReady+0x188>
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <HAL_I2C_IsDeviceReady+0x188>
 8004a5e:	7dbb      	ldrb	r3, [r7, #22]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0cd      	beq.n	8004a00 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d129      	bne.n	8004ace <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a88:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2319      	movs	r3, #25
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	4921      	ldr	r1, [pc, #132]	; (8004b30 <HAL_I2C_IsDeviceReady+0x254>)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f8c6 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e036      	b.n	8004b28 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e02c      	b.n	8004b28 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004adc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ae6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2319      	movs	r3, #25
 8004aee:	2201      	movs	r2, #1
 8004af0:	490f      	ldr	r1, [pc, #60]	; (8004b30 <HAL_I2C_IsDeviceReady+0x254>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f8a2 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e012      	b.n	8004b28 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	3301      	adds	r3, #1
 8004b06:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	f4ff af32 	bcc.w	8004976 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	00100002 	.word	0x00100002
 8004b34:	ffff0000 	.word	0xffff0000

08004b38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	460b      	mov	r3, r1
 8004b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d006      	beq.n	8004b62 <I2C_MasterRequestWrite+0x2a>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d003      	beq.n	8004b62 <I2C_MasterRequestWrite+0x2a>
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b60:	d108      	bne.n	8004b74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e00b      	b.n	8004b8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b12      	cmp	r3, #18
 8004b7a:	d107      	bne.n	8004b8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f84f 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00d      	beq.n	8004bc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb2:	d103      	bne.n	8004bbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e035      	b.n	8004c2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc8:	d108      	bne.n	8004bdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bca:	897b      	ldrh	r3, [r7, #10]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bd8:	611a      	str	r2, [r3, #16]
 8004bda:	e01b      	b.n	8004c14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bdc:	897b      	ldrh	r3, [r7, #10]
 8004bde:	11db      	asrs	r3, r3, #7
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 0306 	and.w	r3, r3, #6
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f063 030f 	orn	r3, r3, #15
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	490e      	ldr	r1, [pc, #56]	; (8004c34 <I2C_MasterRequestWrite+0xfc>)
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f875 	bl	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e010      	b.n	8004c2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4907      	ldr	r1, [pc, #28]	; (8004c38 <I2C_MasterRequestWrite+0x100>)
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f865 	bl	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	00010008 	.word	0x00010008
 8004c38:	00010002 	.word	0x00010002

08004c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c4c:	e025      	b.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d021      	beq.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c56:	f7fd faed 	bl	8002234 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d116      	bne.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e023      	b.n	8004ce2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10d      	bne.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	43da      	mvns	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	e00c      	b.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d0b6      	beq.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cf8:	e051      	b.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d08:	d123      	bne.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f043 0204 	orr.w	r2, r3, #4
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e046      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d021      	beq.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fd fa6b 	bl	8002234 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d116      	bne.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e020      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d10c      	bne.n	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e00b      	b.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d18d      	bne.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004df4:	e02d      	b.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f878 	bl	8004eec <I2C_IsAcknowledgeFailed>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e02d      	b.n	8004e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d021      	beq.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fd fa11 	bl	8002234 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d116      	bne.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e007      	b.n	8004e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5c:	2b80      	cmp	r3, #128	; 0x80
 8004e5e:	d1ca      	bne.n	8004df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e76:	e02d      	b.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f837 	bl	8004eec <I2C_IsAcknowledgeFailed>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e02d      	b.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d021      	beq.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e90:	f7fd f9d0 	bl	8002234 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d302      	bcc.n	8004ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d116      	bne.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e007      	b.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d1ca      	bne.n	8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	d11b      	bne.n	8004f3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f043 0204 	orr.w	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d129      	bne.n	8004fb4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2224      	movs	r2, #36	; 0x24
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0210 	bic.w	r2, r2, #16
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e000      	b.n	8004fb6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
  }
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d12a      	bne.n	8005032 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2224      	movs	r2, #36	; 0x24
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004ffc:	89fb      	ldrh	r3, [r7, #14]
 8004ffe:	f023 030f 	bic.w	r3, r3, #15
 8005002:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	b29a      	uxth	r2, r3
 8005008:	89fb      	ldrh	r3, [r7, #14]
 800500a:	4313      	orrs	r3, r2
 800500c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	89fa      	ldrh	r2, [r7, #14]
 8005014:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
  }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e267      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d075      	beq.n	800514a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800505e:	4b88      	ldr	r3, [pc, #544]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b04      	cmp	r3, #4
 8005068:	d00c      	beq.n	8005084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800506a:	4b85      	ldr	r3, [pc, #532]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005072:	2b08      	cmp	r3, #8
 8005074:	d112      	bne.n	800509c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005076:	4b82      	ldr	r3, [pc, #520]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005082:	d10b      	bne.n	800509c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	4b7e      	ldr	r3, [pc, #504]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d05b      	beq.n	8005148 <HAL_RCC_OscConfig+0x108>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d157      	bne.n	8005148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e242      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a4:	d106      	bne.n	80050b4 <HAL_RCC_OscConfig+0x74>
 80050a6:	4b76      	ldr	r3, [pc, #472]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a75      	ldr	r2, [pc, #468]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e01d      	b.n	80050f0 <HAL_RCC_OscConfig+0xb0>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCC_OscConfig+0x98>
 80050be:	4b70      	ldr	r3, [pc, #448]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6f      	ldr	r2, [pc, #444]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	4b6d      	ldr	r3, [pc, #436]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a6c      	ldr	r2, [pc, #432]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e00b      	b.n	80050f0 <HAL_RCC_OscConfig+0xb0>
 80050d8:	4b69      	ldr	r3, [pc, #420]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a68      	ldr	r2, [pc, #416]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	4b66      	ldr	r3, [pc, #408]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a65      	ldr	r2, [pc, #404]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80050ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d013      	beq.n	8005120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fd f89c 	bl	8002234 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005100:	f7fd f898 	bl	8002234 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b64      	cmp	r3, #100	; 0x64
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e207      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	4b5b      	ldr	r3, [pc, #364]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0xc0>
 800511e:	e014      	b.n	800514a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fd f888 	bl	8002234 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005128:	f7fd f884 	bl	8002234 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b64      	cmp	r3, #100	; 0x64
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e1f3      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513a:	4b51      	ldr	r3, [pc, #324]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0xe8>
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d063      	beq.n	800521e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005156:	4b4a      	ldr	r3, [pc, #296]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00b      	beq.n	800517a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005162:	4b47      	ldr	r3, [pc, #284]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800516a:	2b08      	cmp	r3, #8
 800516c:	d11c      	bne.n	80051a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800516e:	4b44      	ldr	r3, [pc, #272]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d116      	bne.n	80051a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517a:	4b41      	ldr	r3, [pc, #260]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_RCC_OscConfig+0x152>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d001      	beq.n	8005192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e1c7      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005192:	4b3b      	ldr	r3, [pc, #236]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4937      	ldr	r1, [pc, #220]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a6:	e03a      	b.n	800521e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d020      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051b0:	4b34      	ldr	r3, [pc, #208]	; (8005284 <HAL_RCC_OscConfig+0x244>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fd f83d 	bl	8002234 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051be:	f7fd f839 	bl	8002234 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e1a8      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d0:	4b2b      	ldr	r3, [pc, #172]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051dc:	4b28      	ldr	r3, [pc, #160]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4925      	ldr	r1, [pc, #148]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	600b      	str	r3, [r1, #0]
 80051f0:	e015      	b.n	800521e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051f2:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_RCC_OscConfig+0x244>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fd f81c 	bl	8002234 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005200:	f7fd f818 	bl	8002234 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e187      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005212:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d036      	beq.n	8005298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d016      	beq.n	8005260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <HAL_RCC_OscConfig+0x248>)
 8005234:	2201      	movs	r2, #1
 8005236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005238:	f7fc fffc 	bl	8002234 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005240:	f7fc fff8 	bl	8002234 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e167      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_OscConfig+0x240>)
 8005254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0x200>
 800525e:	e01b      	b.n	8005298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <HAL_RCC_OscConfig+0x248>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005266:	f7fc ffe5 	bl	8002234 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800526c:	e00e      	b.n	800528c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800526e:	f7fc ffe1 	bl	8002234 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d907      	bls.n	800528c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e150      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
 8005280:	40023800 	.word	0x40023800
 8005284:	42470000 	.word	0x42470000
 8005288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528c:	4b88      	ldr	r3, [pc, #544]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 800528e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1ea      	bne.n	800526e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8097 	beq.w	80053d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052aa:	4b81      	ldr	r3, [pc, #516]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10f      	bne.n	80052d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	4b7d      	ldr	r3, [pc, #500]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	4a7c      	ldr	r2, [pc, #496]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 80052c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c4:	6413      	str	r3, [r2, #64]	; 0x40
 80052c6:	4b7a      	ldr	r3, [pc, #488]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052d2:	2301      	movs	r3, #1
 80052d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d6:	4b77      	ldr	r3, [pc, #476]	; (80054b4 <HAL_RCC_OscConfig+0x474>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d118      	bne.n	8005314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052e2:	4b74      	ldr	r3, [pc, #464]	; (80054b4 <HAL_RCC_OscConfig+0x474>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a73      	ldr	r2, [pc, #460]	; (80054b4 <HAL_RCC_OscConfig+0x474>)
 80052e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ee:	f7fc ffa1 	bl	8002234 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f6:	f7fc ff9d 	bl	8002234 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e10c      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005308:	4b6a      	ldr	r3, [pc, #424]	; (80054b4 <HAL_RCC_OscConfig+0x474>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0f0      	beq.n	80052f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d106      	bne.n	800532a <HAL_RCC_OscConfig+0x2ea>
 800531c:	4b64      	ldr	r3, [pc, #400]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4a63      	ldr	r2, [pc, #396]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	6713      	str	r3, [r2, #112]	; 0x70
 8005328:	e01c      	b.n	8005364 <HAL_RCC_OscConfig+0x324>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b05      	cmp	r3, #5
 8005330:	d10c      	bne.n	800534c <HAL_RCC_OscConfig+0x30c>
 8005332:	4b5f      	ldr	r3, [pc, #380]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	4a5e      	ldr	r2, [pc, #376]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 8005338:	f043 0304 	orr.w	r3, r3, #4
 800533c:	6713      	str	r3, [r2, #112]	; 0x70
 800533e:	4b5c      	ldr	r3, [pc, #368]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	4a5b      	ldr	r2, [pc, #364]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6713      	str	r3, [r2, #112]	; 0x70
 800534a:	e00b      	b.n	8005364 <HAL_RCC_OscConfig+0x324>
 800534c:	4b58      	ldr	r3, [pc, #352]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 800534e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005350:	4a57      	ldr	r2, [pc, #348]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	6713      	str	r3, [r2, #112]	; 0x70
 8005358:	4b55      	ldr	r3, [pc, #340]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	4a54      	ldr	r2, [pc, #336]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 800535e:	f023 0304 	bic.w	r3, r3, #4
 8005362:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536c:	f7fc ff62 	bl	8002234 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005372:	e00a      	b.n	800538a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005374:	f7fc ff5e 	bl	8002234 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e0cb      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538a:	4b49      	ldr	r3, [pc, #292]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0ee      	beq.n	8005374 <HAL_RCC_OscConfig+0x334>
 8005396:	e014      	b.n	80053c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005398:	f7fc ff4c 	bl	8002234 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a0:	f7fc ff48 	bl	8002234 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e0b5      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b6:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1ee      	bne.n	80053a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d105      	bne.n	80053d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c8:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	4a38      	ldr	r2, [pc, #224]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 80053ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80a1 	beq.w	8005520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053de:	4b34      	ldr	r3, [pc, #208]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d05c      	beq.n	80054a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d141      	bne.n	8005476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f2:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <HAL_RCC_OscConfig+0x478>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f8:	f7fc ff1c 	bl	8002234 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005400:	f7fc ff18 	bl	8002234 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e087      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	4b27      	ldr	r3, [pc, #156]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	019b      	lsls	r3, r3, #6
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	3b01      	subs	r3, #1
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	491b      	ldr	r1, [pc, #108]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 8005444:	4313      	orrs	r3, r2
 8005446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005448:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <HAL_RCC_OscConfig+0x478>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544e:	f7fc fef1 	bl	8002234 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005456:	f7fc feed 	bl	8002234 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e05c      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005468:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f0      	beq.n	8005456 <HAL_RCC_OscConfig+0x416>
 8005474:	e054      	b.n	8005520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005476:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <HAL_RCC_OscConfig+0x478>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7fc feda 	bl	8002234 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005484:	f7fc fed6 	bl	8002234 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e045      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005496:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <HAL_RCC_OscConfig+0x470>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x444>
 80054a2:	e03d      	b.n	8005520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e038      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
 80054b0:	40023800 	.word	0x40023800
 80054b4:	40007000 	.word	0x40007000
 80054b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <HAL_RCC_OscConfig+0x4ec>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d028      	beq.n	800551c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d121      	bne.n	800551c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d11a      	bne.n	800551c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d111      	bne.n	800551c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	3b01      	subs	r3, #1
 8005506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d107      	bne.n	800551c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d001      	beq.n	8005520 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40023800 	.word	0x40023800

08005530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0cc      	b.n	80056de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	4b68      	ldr	r3, [pc, #416]	; (80056e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d90c      	bls.n	800556c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b65      	ldr	r3, [pc, #404]	; (80056e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555a:	4b63      	ldr	r3, [pc, #396]	; (80056e8 <HAL_RCC_ClockConfig+0x1b8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0b8      	b.n	80056de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d020      	beq.n	80055ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005584:	4b59      	ldr	r3, [pc, #356]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	4a58      	ldr	r2, [pc, #352]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800558e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800559c:	4b53      	ldr	r3, [pc, #332]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	4a52      	ldr	r2, [pc, #328]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a8:	4b50      	ldr	r3, [pc, #320]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	494d      	ldr	r1, [pc, #308]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d044      	beq.n	8005650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d107      	bne.n	80055de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ce:	4b47      	ldr	r3, [pc, #284]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d119      	bne.n	800560e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e07f      	b.n	80056de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d003      	beq.n	80055ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d107      	bne.n	80055fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ee:	4b3f      	ldr	r3, [pc, #252]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e06f      	b.n	80056de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fe:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e067      	b.n	80056de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800560e:	4b37      	ldr	r3, [pc, #220]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f023 0203 	bic.w	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4934      	ldr	r1, [pc, #208]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	4313      	orrs	r3, r2
 800561e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005620:	f7fc fe08 	bl	8002234 <HAL_GetTick>
 8005624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005626:	e00a      	b.n	800563e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005628:	f7fc fe04 	bl	8002234 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	; 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e04f      	b.n	80056de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563e:	4b2b      	ldr	r3, [pc, #172]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 020c 	and.w	r2, r3, #12
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	429a      	cmp	r2, r3
 800564e:	d1eb      	bne.n	8005628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005650:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d20c      	bcs.n	8005678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565e:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005666:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d001      	beq.n	8005678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e032      	b.n	80056de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005684:	4b19      	ldr	r3, [pc, #100]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4916      	ldr	r1, [pc, #88]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	4313      	orrs	r3, r2
 8005694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056a2:	4b12      	ldr	r3, [pc, #72]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	490e      	ldr	r1, [pc, #56]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056b6:	f000 f821 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80056ba:	4602      	mov	r2, r0
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	490a      	ldr	r1, [pc, #40]	; (80056f0 <HAL_RCC_ClockConfig+0x1c0>)
 80056c8:	5ccb      	ldrb	r3, [r1, r3]
 80056ca:	fa22 f303 	lsr.w	r3, r2, r3
 80056ce:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80056d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <HAL_RCC_ClockConfig+0x1c8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fc fd68 	bl	80021ac <HAL_InitTick>

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40023c00 	.word	0x40023c00
 80056ec:	40023800 	.word	0x40023800
 80056f0:	0800950c 	.word	0x0800950c
 80056f4:	2000027c 	.word	0x2000027c
 80056f8:	20000280 	.word	0x20000280

080056fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005700:	b094      	sub	sp, #80	; 0x50
 8005702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	647b      	str	r3, [r7, #68]	; 0x44
 8005708:	2300      	movs	r3, #0
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800570c:	2300      	movs	r3, #0
 800570e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005714:	4b79      	ldr	r3, [pc, #484]	; (80058fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 030c 	and.w	r3, r3, #12
 800571c:	2b08      	cmp	r3, #8
 800571e:	d00d      	beq.n	800573c <HAL_RCC_GetSysClockFreq+0x40>
 8005720:	2b08      	cmp	r3, #8
 8005722:	f200 80e1 	bhi.w	80058e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0x34>
 800572a:	2b04      	cmp	r3, #4
 800572c:	d003      	beq.n	8005736 <HAL_RCC_GetSysClockFreq+0x3a>
 800572e:	e0db      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005730:	4b73      	ldr	r3, [pc, #460]	; (8005900 <HAL_RCC_GetSysClockFreq+0x204>)
 8005732:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005734:	e0db      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005736:	4b73      	ldr	r3, [pc, #460]	; (8005904 <HAL_RCC_GetSysClockFreq+0x208>)
 8005738:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800573a:	e0d8      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800573c:	4b6f      	ldr	r3, [pc, #444]	; (80058fc <HAL_RCC_GetSysClockFreq+0x200>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005744:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005746:	4b6d      	ldr	r3, [pc, #436]	; (80058fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d063      	beq.n	800581a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005752:	4b6a      	ldr	r3, [pc, #424]	; (80058fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	099b      	lsrs	r3, r3, #6
 8005758:	2200      	movs	r2, #0
 800575a:	63bb      	str	r3, [r7, #56]	; 0x38
 800575c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005764:	633b      	str	r3, [r7, #48]	; 0x30
 8005766:	2300      	movs	r3, #0
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
 800576a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800576e:	4622      	mov	r2, r4
 8005770:	462b      	mov	r3, r5
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f04f 0100 	mov.w	r1, #0
 800577a:	0159      	lsls	r1, r3, #5
 800577c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005780:	0150      	lsls	r0, r2, #5
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4621      	mov	r1, r4
 8005788:	1a51      	subs	r1, r2, r1
 800578a:	6139      	str	r1, [r7, #16]
 800578c:	4629      	mov	r1, r5
 800578e:	eb63 0301 	sbc.w	r3, r3, r1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057a0:	4659      	mov	r1, fp
 80057a2:	018b      	lsls	r3, r1, #6
 80057a4:	4651      	mov	r1, sl
 80057a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057aa:	4651      	mov	r1, sl
 80057ac:	018a      	lsls	r2, r1, #6
 80057ae:	4651      	mov	r1, sl
 80057b0:	ebb2 0801 	subs.w	r8, r2, r1
 80057b4:	4659      	mov	r1, fp
 80057b6:	eb63 0901 	sbc.w	r9, r3, r1
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057ce:	4690      	mov	r8, r2
 80057d0:	4699      	mov	r9, r3
 80057d2:	4623      	mov	r3, r4
 80057d4:	eb18 0303 	adds.w	r3, r8, r3
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	462b      	mov	r3, r5
 80057dc:	eb49 0303 	adc.w	r3, r9, r3
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057ee:	4629      	mov	r1, r5
 80057f0:	024b      	lsls	r3, r1, #9
 80057f2:	4621      	mov	r1, r4
 80057f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057f8:	4621      	mov	r1, r4
 80057fa:	024a      	lsls	r2, r1, #9
 80057fc:	4610      	mov	r0, r2
 80057fe:	4619      	mov	r1, r3
 8005800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005802:	2200      	movs	r2, #0
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
 8005806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800580c:	f7fa fd48 	bl	80002a0 <__aeabi_uldivmod>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4613      	mov	r3, r2
 8005816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005818:	e058      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800581a:	4b38      	ldr	r3, [pc, #224]	; (80058fc <HAL_RCC_GetSysClockFreq+0x200>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	099b      	lsrs	r3, r3, #6
 8005820:	2200      	movs	r2, #0
 8005822:	4618      	mov	r0, r3
 8005824:	4611      	mov	r1, r2
 8005826:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800582a:	623b      	str	r3, [r7, #32]
 800582c:	2300      	movs	r3, #0
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
 8005830:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	f04f 0000 	mov.w	r0, #0
 800583c:	f04f 0100 	mov.w	r1, #0
 8005840:	0159      	lsls	r1, r3, #5
 8005842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005846:	0150      	lsls	r0, r2, #5
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4641      	mov	r1, r8
 800584e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005852:	4649      	mov	r1, r9
 8005854:	eb63 0b01 	sbc.w	fp, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005864:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005868:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800586c:	ebb2 040a 	subs.w	r4, r2, sl
 8005870:	eb63 050b 	sbc.w	r5, r3, fp
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	00eb      	lsls	r3, r5, #3
 800587e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005882:	00e2      	lsls	r2, r4, #3
 8005884:	4614      	mov	r4, r2
 8005886:	461d      	mov	r5, r3
 8005888:	4643      	mov	r3, r8
 800588a:	18e3      	adds	r3, r4, r3
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	464b      	mov	r3, r9
 8005890:	eb45 0303 	adc.w	r3, r5, r3
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058a2:	4629      	mov	r1, r5
 80058a4:	028b      	lsls	r3, r1, #10
 80058a6:	4621      	mov	r1, r4
 80058a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058ac:	4621      	mov	r1, r4
 80058ae:	028a      	lsls	r2, r1, #10
 80058b0:	4610      	mov	r0, r2
 80058b2:	4619      	mov	r1, r3
 80058b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b6:	2200      	movs	r2, #0
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	61fa      	str	r2, [r7, #28]
 80058bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058c0:	f7fa fcee 	bl	80002a0 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4613      	mov	r3, r2
 80058ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <HAL_RCC_GetSysClockFreq+0x200>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	0c1b      	lsrs	r3, r3, #16
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	3301      	adds	r3, #1
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80058dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058e6:	e002      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <HAL_RCC_GetSysClockFreq+0x204>)
 80058ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3750      	adds	r7, #80	; 0x50
 80058f4:	46bd      	mov	sp, r7
 80058f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058fa:	bf00      	nop
 80058fc:	40023800 	.word	0x40023800
 8005900:	00f42400 	.word	0x00f42400
 8005904:	007a1200 	.word	0x007a1200

08005908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800590c:	4b03      	ldr	r3, [pc, #12]	; (800591c <HAL_RCC_GetHCLKFreq+0x14>)
 800590e:	681b      	ldr	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	2000027c 	.word	0x2000027c

08005920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005924:	f7ff fff0 	bl	8005908 <HAL_RCC_GetHCLKFreq>
 8005928:	4602      	mov	r2, r0
 800592a:	4b05      	ldr	r3, [pc, #20]	; (8005940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	0a9b      	lsrs	r3, r3, #10
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	4903      	ldr	r1, [pc, #12]	; (8005944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005936:	5ccb      	ldrb	r3, [r1, r3]
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40023800 	.word	0x40023800
 8005944:	0800951c 	.word	0x0800951c

08005948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800594c:	f7ff ffdc 	bl	8005908 <HAL_RCC_GetHCLKFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	0b5b      	lsrs	r3, r3, #13
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4903      	ldr	r1, [pc, #12]	; (800596c <HAL_RCC_GetPCLK2Freq+0x24>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40023800 	.word	0x40023800
 800596c:	0800951c 	.word	0x0800951c

08005970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005994:	2b00      	cmp	r3, #0
 8005996:	d105      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d075      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059a4:	4b91      	ldr	r3, [pc, #580]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059aa:	f7fc fc43 	bl	8002234 <HAL_GetTick>
 80059ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059b2:	f7fc fc3f 	bl	8002234 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e189      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059c4:	4b8a      	ldr	r3, [pc, #552]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f0      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	019a      	lsls	r2, r3, #6
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	071b      	lsls	r3, r3, #28
 80059e8:	4981      	ldr	r1, [pc, #516]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01f      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059fc:	4b7c      	ldr	r3, [pc, #496]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a02:	0f1b      	lsrs	r3, r3, #28
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	019a      	lsls	r2, r3, #6
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	061b      	lsls	r3, r3, #24
 8005a16:	431a      	orrs	r2, r3
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	071b      	lsls	r3, r3, #28
 8005a1c:	4974      	ldr	r1, [pc, #464]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a24:	4b72      	ldr	r3, [pc, #456]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2a:	f023 021f 	bic.w	r2, r3, #31
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	496e      	ldr	r1, [pc, #440]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00d      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	019a      	lsls	r2, r3, #6
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	061b      	lsls	r3, r3, #24
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	071b      	lsls	r3, r3, #28
 8005a5c:	4964      	ldr	r1, [pc, #400]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a64:	4b61      	ldr	r3, [pc, #388]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a6a:	f7fc fbe3 	bl	8002234 <HAL_GetTick>
 8005a6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a70:	e008      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a72:	f7fc fbdf 	bl	8002234 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e129      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a84:	4b5a      	ldr	r3, [pc, #360]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d105      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d079      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005aa8:	4b52      	ldr	r3, [pc, #328]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aae:	f7fc fbc1 	bl	8002234 <HAL_GetTick>
 8005ab2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ab6:	f7fc fbbd 	bl	8002234 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e107      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ac8:	4b49      	ldr	r3, [pc, #292]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad4:	d0ef      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d020      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ae2:	4b43      	ldr	r3, [pc, #268]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae8:	0f1b      	lsrs	r3, r3, #28
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	019a      	lsls	r2, r3, #6
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	061b      	lsls	r3, r3, #24
 8005afc:	431a      	orrs	r2, r3
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	071b      	lsls	r3, r3, #28
 8005b02:	493b      	ldr	r1, [pc, #236]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b0a:	4b39      	ldr	r3, [pc, #228]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	4934      	ldr	r1, [pc, #208]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01e      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b30:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	0e1b      	lsrs	r3, r3, #24
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	019a      	lsls	r2, r3, #6
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	071b      	lsls	r3, r3, #28
 8005b50:	4927      	ldr	r1, [pc, #156]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b58:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	4922      	ldr	r1, [pc, #136]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b6e:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b74:	f7fc fb5e 	bl	8002234 <HAL_GetTick>
 8005b78:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b7c:	f7fc fb5a 	bl	8002234 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e0a4      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b8e:	4b18      	ldr	r3, [pc, #96]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b9a:	d1ef      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 808b 	beq.w	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	4a0f      	ldr	r2, [pc, #60]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bba:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a0b      	ldr	r2, [pc, #44]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bd2:	f7fc fb2f 	bl	8002234 <HAL_GetTick>
 8005bd6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bd8:	e010      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005bda:	f7fc fb2b 	bl	8002234 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d909      	bls.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e075      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005bec:	42470068 	.word	0x42470068
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	42470070 	.word	0x42470070
 8005bf8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bfc:	4b38      	ldr	r3, [pc, #224]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0e8      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c08:	4b36      	ldr	r3, [pc, #216]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d02f      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d028      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c26:	4b2f      	ldr	r3, [pc, #188]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c30:	4b2d      	ldr	r3, [pc, #180]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c36:	4b2c      	ldr	r3, [pc, #176]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c3c:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c42:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d114      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c4e:	f7fc faf1 	bl	8002234 <HAL_GetTick>
 8005c52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c54:	e00a      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c56:	f7fc faed 	bl	8002234 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e035      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0ee      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c84:	d10d      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c86:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9a:	4912      	ldr	r1, [pc, #72]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]
 8005ca0:	e005      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	4a0f      	ldr	r2, [pc, #60]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ca8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cac:	6093      	str	r3, [r2, #8]
 8005cae:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cba:	490a      	ldr	r1, [pc, #40]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005cd4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40007000 	.word	0x40007000
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	42470e40 	.word	0x42470e40
 8005cec:	424711e0 	.word	0x424711e0

08005cf0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e066      	b.n	8005dd4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7f5b      	ldrb	r3, [r3, #29]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d105      	bne.n	8005d1c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fc f816 	bl	8001d48 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	22ca      	movs	r2, #202	; 0xca
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2253      	movs	r2, #83	; 0x53
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fc5e 	bl	80065f4 <RTC_EnterInitMode>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d12c      	bne.n	8005d9c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d54:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68d2      	ldr	r2, [r2, #12]
 8005d7c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6919      	ldr	r1, [r3, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	041a      	lsls	r2, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fc65 	bl	8006662 <RTC_ExitInitMode>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d113      	bne.n	8005dca <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	22ff      	movs	r2, #255	; 0xff
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	7f1b      	ldrb	r3, [r3, #28]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_RTC_SetTime+0x1c>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e087      	b.n	8005f08 <HAL_RTC_SetTime+0x12c>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2202      	movs	r2, #2
 8005e02:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d126      	bne.n	8005e58 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fc42 	bl	80066ac <RTC_ByteToBcd2>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fc3b 	bl	80066ac <RTC_ByteToBcd2>
 8005e36:	4603      	mov	r3, r0
 8005e38:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e3a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	789b      	ldrb	r3, [r3, #2]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fc33 	bl	80066ac <RTC_ByteToBcd2>
 8005e46:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e48:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	78db      	ldrb	r3, [r3, #3]
 8005e50:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	e018      	b.n	8005e8a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e78:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e7e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	78db      	ldrb	r3, [r3, #3]
 8005e84:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	22ca      	movs	r2, #202	; 0xca
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2253      	movs	r2, #83	; 0x53
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fbaa 	bl	80065f4 <RTC_EnterInitMode>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d120      	bne.n	8005eec <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005eb4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005eb8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ec8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6899      	ldr	r1, [r3, #8]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fbbd 	bl	8006662 <RTC_ExitInitMode>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005eec:	7cfb      	ldrb	r3, [r7, #19]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	22ff      	movs	r2, #255	; 0xff
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	771a      	strb	r2, [r3, #28]

  return status;
 8005f06:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd90      	pop	{r4, r7, pc}

08005f10 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	0d9b      	lsrs	r3, r3, #22
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d11a      	bne.n	8005fc2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fba8 	bl	80066e6 <RTC_Bcd2ToByte>
 8005f96:	4603      	mov	r3, r0
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fb9f 	bl	80066e6 <RTC_Bcd2ToByte>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	461a      	mov	r2, r3
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	789b      	ldrb	r3, [r3, #2]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fb96 	bl	80066e6 <RTC_Bcd2ToByte>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	7f1b      	ldrb	r3, [r3, #28]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RTC_SetDate+0x1c>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e071      	b.n	80060cc <HAL_RTC_SetDate+0x100>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10e      	bne.n	8006018 <HAL_RTC_SetDate+0x4c>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	f023 0310 	bic.w	r3, r3, #16
 800600e:	b2db      	uxtb	r3, r3
 8006010:	330a      	adds	r3, #10
 8006012:	b2da      	uxtb	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d11c      	bne.n	8006058 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	78db      	ldrb	r3, [r3, #3]
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fb42 	bl	80066ac <RTC_ByteToBcd2>
 8006028:	4603      	mov	r3, r0
 800602a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fb3b 	bl	80066ac <RTC_ByteToBcd2>
 8006036:	4603      	mov	r3, r0
 8006038:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800603a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	789b      	ldrb	r3, [r3, #2]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fb33 	bl	80066ac <RTC_ByteToBcd2>
 8006046:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006048:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	e00e      	b.n	8006076 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	78db      	ldrb	r3, [r3, #3]
 800605c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006064:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800606a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	22ca      	movs	r2, #202	; 0xca
 800607c:	625a      	str	r2, [r3, #36]	; 0x24
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2253      	movs	r2, #83	; 0x53
 8006084:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fab4 	bl	80065f4 <RTC_EnterInitMode>
 800608c:	4603      	mov	r3, r0
 800608e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006090:	7cfb      	ldrb	r3, [r7, #19]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10c      	bne.n	80060b0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fadb 	bl	8006662 <RTC_ExitInitMode>
 80060ac:	4603      	mov	r3, r0
 80060ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80060b0:	7cfb      	ldrb	r3, [r7, #19]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	771a      	strb	r2, [r3, #28]

  return status;
 80060ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd90      	pop	{r4, r7, pc}

080060d4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	0c1b      	lsrs	r3, r3, #16
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	0a1b      	lsrs	r3, r3, #8
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	b2da      	uxtb	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	0b5b      	lsrs	r3, r3, #13
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	b2da      	uxtb	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d11a      	bne.n	8006168 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fad5 	bl	80066e6 <RTC_Bcd2ToByte>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	4618      	mov	r0, r3
 800614a:	f000 facc 	bl	80066e6 <RTC_Bcd2ToByte>
 800614e:	4603      	mov	r3, r0
 8006150:	461a      	mov	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	789b      	ldrb	r3, [r3, #2]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fac3 	bl	80066e6 <RTC_Bcd2ToByte>
 8006160:	4603      	mov	r3, r0
 8006162:	461a      	mov	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006174:	b590      	push	{r4, r7, lr}
 8006176:	b089      	sub	sp, #36	; 0x24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006180:	4b9a      	ldr	r3, [pc, #616]	; (80063ec <HAL_RTC_SetAlarm_IT+0x278>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a9a      	ldr	r2, [pc, #616]	; (80063f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006186:	fba2 2303 	umull	r2, r3, r2, r3
 800618a:	0adb      	lsrs	r3, r3, #11
 800618c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006190:	fb02 f303 	mul.w	r3, r2, r3
 8006194:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	7f1b      	ldrb	r3, [r3, #28]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_RTC_SetAlarm_IT+0x36>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e11c      	b.n	80063e4 <HAL_RTC_SetAlarm_IT+0x270>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2202      	movs	r2, #2
 80061b4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d137      	bne.n	800622c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fa69 	bl	80066ac <RTC_ByteToBcd2>
 80061da:	4603      	mov	r3, r0
 80061dc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fa62 	bl	80066ac <RTC_ByteToBcd2>
 80061e8:	4603      	mov	r3, r0
 80061ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80061ec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	789b      	ldrb	r3, [r3, #2]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fa5a 	bl	80066ac <RTC_ByteToBcd2>
 80061f8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061fa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	78db      	ldrb	r3, [r3, #3]
 8006202:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006204:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fa4c 	bl	80066ac <RTC_ByteToBcd2>
 8006214:	4603      	mov	r3, r0
 8006216:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006218:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006220:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006226:	4313      	orrs	r3, r2
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	e023      	b.n	8006274 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800624c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006252:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	78db      	ldrb	r3, [r3, #3]
 8006258:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800625a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006262:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006264:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800626a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006270:	4313      	orrs	r3, r2
 8006272:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800627c:	4313      	orrs	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	22ca      	movs	r2, #202	; 0xca
 8006286:	625a      	str	r2, [r3, #36]	; 0x24
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2253      	movs	r2, #83	; 0x53
 800628e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006298:	d141      	bne.n	800631e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062a8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80062ba:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	617a      	str	r2, [r7, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	22ff      	movs	r2, #255	; 0xff
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2203      	movs	r2, #3
 80062d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e082      	b.n	80063e4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0e7      	beq.n	80062bc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800630a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800631a:	609a      	str	r2, [r3, #8]
 800631c:	e04b      	b.n	80063b6 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800632c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	b2da      	uxtb	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800633e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006340:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <HAL_RTC_SetAlarm_IT+0x278>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a2a      	ldr	r2, [pc, #168]	; (80063f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	0adb      	lsrs	r3, r3, #11
 800634c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006350:	fb02 f303 	mul.w	r3, r2, r3
 8006354:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	1e5a      	subs	r2, r3, #1
 800635a:	617a      	str	r2, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	22ff      	movs	r2, #255	; 0xff
 8006366:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2203      	movs	r2, #3
 800636c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e035      	b.n	80063e4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0e7      	beq.n	8006356 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063b4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <HAL_RTC_SetAlarm_IT+0x280>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a0e      	ldr	r2, [pc, #56]	; (80063f4 <HAL_RTC_SetAlarm_IT+0x280>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80063c2:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <HAL_RTC_SetAlarm_IT+0x280>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	4a0b      	ldr	r2, [pc, #44]	; (80063f4 <HAL_RTC_SetAlarm_IT+0x280>)
 80063c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063cc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	22ff      	movs	r2, #255	; 0xff
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3724      	adds	r7, #36	; 0x24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd90      	pop	{r4, r7, pc}
 80063ec:	2000027c 	.word	0x2000027c
 80063f0:	10624dd3 	.word	0x10624dd3
 80063f4:	40013c00 	.word	0x40013c00

080063f8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006414:	d10e      	bne.n	8006434 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	e00d      	b.n	8006450 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643a:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800644e:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	0c1b      	lsrs	r3, r3, #16
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800645a:	b2da      	uxtb	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	0a1b      	lsrs	r3, r3, #8
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646a:	b2da      	uxtb	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006478:	b2da      	uxtb	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	0d9b      	lsrs	r3, r3, #22
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	b2da      	uxtb	r2, r3
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	0e1b      	lsrs	r3, r3, #24
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d125      	bne.n	800650c <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 f90e 	bl	80066e6 <RTC_Bcd2ToByte>
 80064ca:	4603      	mov	r3, r0
 80064cc:	461a      	mov	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f905 	bl	80066e6 <RTC_Bcd2ToByte>
 80064dc:	4603      	mov	r3, r0
 80064de:	461a      	mov	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	789b      	ldrb	r3, [r3, #2]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f8fc 	bl	80066e6 <RTC_Bcd2ToByte>
 80064ee:	4603      	mov	r3, r0
 80064f0:	461a      	mov	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 f8f2 	bl	80066e6 <RTC_Bcd2ToByte>
 8006502:	4603      	mov	r3, r0
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d012      	beq.n	8006554 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fb f985 	bl	800184c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006552:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d012      	beq.n	8006588 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f8d4 	bl	800671e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006586:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006588:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800658a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800658e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	775a      	strb	r2, [r3, #29]
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40013c00 	.word	0x40013c00

080065a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065be:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065c0:	f7fb fe38 	bl	8002234 <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065c6:	e009      	b.n	80065dc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065c8:	f7fb fe34 	bl	8002234 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065d6:	d901      	bls.n	80065dc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e007      	b.n	80065ec <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0ee      	beq.n	80065c8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	d122      	bne.n	8006658 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006620:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006622:	f7fb fe07 	bl	8002234 <HAL_GetTick>
 8006626:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006628:	e00c      	b.n	8006644 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800662a:	f7fb fe03 	bl	8002234 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006638:	d904      	bls.n	8006644 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2204      	movs	r2, #4
 800663e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <RTC_EnterInitMode+0x64>
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d1e8      	bne.n	800662a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800667c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff ff89 	bl	80065a4 <HAL_RTC_WaitForSynchro>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2204      	movs	r2, #4
 800669c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80066ba:	e005      	b.n	80066c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	3301      	adds	r3, #1
 80066c0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	3b0a      	subs	r3, #10
 80066c6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d8f6      	bhi.n	80066bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	b2db      	uxtb	r3, r3
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	4603      	mov	r3, r0
 80066ee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	0092      	lsls	r2, r2, #2
 80066fe:	4413      	add	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	b2da      	uxtb	r2, r3
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	4413      	add	r3, r2
 8006710:	b2db      	uxtb	r3, r3
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e041      	b.n	80067c8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fb fb27 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2202      	movs	r2, #2
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3304      	adds	r3, #4
 800676e:	4619      	mov	r1, r3
 8006770:	4610      	mov	r0, r2
 8006772:	f000 fd0d 	bl	8007190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d001      	beq.n	80067e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e04e      	b.n	8006886 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a23      	ldr	r2, [pc, #140]	; (8006894 <HAL_TIM_Base_Start_IT+0xc4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d022      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x80>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006812:	d01d      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x80>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1f      	ldr	r2, [pc, #124]	; (8006898 <HAL_TIM_Base_Start_IT+0xc8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d018      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x80>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1e      	ldr	r2, [pc, #120]	; (800689c <HAL_TIM_Base_Start_IT+0xcc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d013      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x80>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00e      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x80>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1b      	ldr	r2, [pc, #108]	; (80068a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d009      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x80>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a19      	ldr	r2, [pc, #100]	; (80068a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x80>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a18      	ldr	r2, [pc, #96]	; (80068ac <HAL_TIM_Base_Start_IT+0xdc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d111      	bne.n	8006874 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b06      	cmp	r3, #6
 8006860:	d010      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f042 0201 	orr.w	r2, r2, #1
 8006870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006872:	e007      	b.n	8006884 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40000400 	.word	0x40000400
 800689c:	40000800 	.word	0x40000800
 80068a0:	40000c00 	.word	0x40000c00
 80068a4:	40010400 	.word	0x40010400
 80068a8:	40014000 	.word	0x40014000
 80068ac:	40001800 	.word	0x40001800

080068b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0201 	bic.w	r2, r2, #1
 80068c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6a1a      	ldr	r2, [r3, #32]
 80068ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10f      	bne.n	80068f8 <HAL_TIM_Base_Stop_IT+0x48>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6a1a      	ldr	r2, [r3, #32]
 80068de:	f240 4344 	movw	r3, #1092	; 0x444
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d107      	bne.n	80068f8 <HAL_TIM_Base_Stop_IT+0x48>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e041      	b.n	80069a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7fb fa59 	bl	8001dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f000 fc1f 	bl	8007190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d109      	bne.n	80069d0 <HAL_TIM_PWM_Start+0x24>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e022      	b.n	8006a16 <HAL_TIM_PWM_Start+0x6a>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d109      	bne.n	80069ea <HAL_TIM_PWM_Start+0x3e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	bf14      	ite	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	2300      	moveq	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	e015      	b.n	8006a16 <HAL_TIM_PWM_Start+0x6a>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d109      	bne.n	8006a04 <HAL_TIM_PWM_Start+0x58>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e008      	b.n	8006a16 <HAL_TIM_PWM_Start+0x6a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	bf14      	ite	ne
 8006a10:	2301      	movne	r3, #1
 8006a12:	2300      	moveq	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e07c      	b.n	8006b18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_PWM_Start+0x82>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a2c:	e013      	b.n	8006a56 <HAL_TIM_PWM_Start+0xaa>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_PWM_Start+0x92>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a3c:	e00b      	b.n	8006a56 <HAL_TIM_PWM_Start+0xaa>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_PWM_Start+0xa2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a4c:	e003      	b.n	8006a56 <HAL_TIM_PWM_Start+0xaa>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fe80 	bl	8007764 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a2d      	ldr	r2, [pc, #180]	; (8006b20 <HAL_TIM_PWM_Start+0x174>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d004      	beq.n	8006a78 <HAL_TIM_PWM_Start+0xcc>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a2c      	ldr	r2, [pc, #176]	; (8006b24 <HAL_TIM_PWM_Start+0x178>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d101      	bne.n	8006a7c <HAL_TIM_PWM_Start+0xd0>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <HAL_TIM_PWM_Start+0xd2>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a22      	ldr	r2, [pc, #136]	; (8006b20 <HAL_TIM_PWM_Start+0x174>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d022      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x136>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa4:	d01d      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x136>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1f      	ldr	r2, [pc, #124]	; (8006b28 <HAL_TIM_PWM_Start+0x17c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d018      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x136>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	; (8006b2c <HAL_TIM_PWM_Start+0x180>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x136>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1c      	ldr	r2, [pc, #112]	; (8006b30 <HAL_TIM_PWM_Start+0x184>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00e      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x136>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a16      	ldr	r2, [pc, #88]	; (8006b24 <HAL_TIM_PWM_Start+0x178>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x136>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <HAL_TIM_PWM_Start+0x188>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x136>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a16      	ldr	r2, [pc, #88]	; (8006b38 <HAL_TIM_PWM_Start+0x18c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d111      	bne.n	8006b06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b06      	cmp	r3, #6
 8006af2:	d010      	beq.n	8006b16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0201 	orr.w	r2, r2, #1
 8006b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b04:	e007      	b.n	8006b16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0201 	orr.w	r2, r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40010400 	.word	0x40010400
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40000800 	.word	0x40000800
 8006b30:	40000c00 	.word	0x40000c00
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40001800 	.word	0x40001800

08006b3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fe08 	bl	8007764 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a2e      	ldr	r2, [pc, #184]	; (8006c14 <HAL_TIM_PWM_Stop+0xd8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d004      	beq.n	8006b68 <HAL_TIM_PWM_Stop+0x2c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_TIM_PWM_Stop+0xdc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d101      	bne.n	8006b6c <HAL_TIM_PWM_Stop+0x30>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e000      	b.n	8006b6e <HAL_TIM_PWM_Stop+0x32>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d017      	beq.n	8006ba2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10f      	bne.n	8006ba2 <HAL_TIM_PWM_Stop+0x66>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	f240 4344 	movw	r3, #1092	; 0x444
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d107      	bne.n	8006ba2 <HAL_TIM_PWM_Stop+0x66>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bac:	4013      	ands	r3, r2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10f      	bne.n	8006bd2 <HAL_TIM_PWM_Stop+0x96>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6a1a      	ldr	r2, [r3, #32]
 8006bb8:	f240 4344 	movw	r3, #1092	; 0x444
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d107      	bne.n	8006bd2 <HAL_TIM_PWM_Stop+0x96>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0201 	bic.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <HAL_TIM_PWM_Stop+0xa6>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006be0:	e013      	b.n	8006c0a <HAL_TIM_PWM_Stop+0xce>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d104      	bne.n	8006bf2 <HAL_TIM_PWM_Stop+0xb6>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf0:	e00b      	b.n	8006c0a <HAL_TIM_PWM_Stop+0xce>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d104      	bne.n	8006c02 <HAL_TIM_PWM_Stop+0xc6>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c00:	e003      	b.n	8006c0a <HAL_TIM_PWM_Stop+0xce>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40010400 	.word	0x40010400

08006c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d122      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d11b      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0202 	mvn.w	r2, #2
 8006c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa77 	bl	8007152 <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa69 	bl	800713e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fa7a 	bl	8007166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d122      	bne.n	8006ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d11b      	bne.n	8006ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0204 	mvn.w	r2, #4
 8006c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa4d 	bl	8007152 <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e005      	b.n	8006cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa3f 	bl	800713e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fa50 	bl	8007166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d122      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d11b      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0208 	mvn.w	r2, #8
 8006cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa23 	bl	8007152 <HAL_TIM_IC_CaptureCallback>
 8006d0c:	e005      	b.n	8006d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa15 	bl	800713e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fa26 	bl	8007166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d122      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d11b      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0210 	mvn.w	r2, #16
 8006d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2208      	movs	r2, #8
 8006d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9f9 	bl	8007152 <HAL_TIM_IC_CaptureCallback>
 8006d60:	e005      	b.n	8006d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9eb 	bl	800713e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f9fc 	bl	8007166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d10e      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d107      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0201 	mvn.w	r2, #1
 8006d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fa fd82 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b80      	cmp	r3, #128	; 0x80
 8006dac:	d10e      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fd78 	bl	80078bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d10e      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	d107      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f9c1 	bl	800717a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d10e      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d107      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0220 	mvn.w	r2, #32
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fd42 	bl	80078a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e0ae      	b.n	8006fa8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	f200 809f 	bhi.w	8006f98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e5a:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006e95 	.word	0x08006e95
 8006e64:	08006f99 	.word	0x08006f99
 8006e68:	08006f99 	.word	0x08006f99
 8006e6c:	08006f99 	.word	0x08006f99
 8006e70:	08006ed5 	.word	0x08006ed5
 8006e74:	08006f99 	.word	0x08006f99
 8006e78:	08006f99 	.word	0x08006f99
 8006e7c:	08006f99 	.word	0x08006f99
 8006e80:	08006f17 	.word	0x08006f17
 8006e84:	08006f99 	.word	0x08006f99
 8006e88:	08006f99 	.word	0x08006f99
 8006e8c:	08006f99 	.word	0x08006f99
 8006e90:	08006f57 	.word	0x08006f57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fa18 	bl	80072d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0208 	orr.w	r2, r2, #8
 8006eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0204 	bic.w	r2, r2, #4
 8006ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6999      	ldr	r1, [r3, #24]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	691a      	ldr	r2, [r3, #16]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	619a      	str	r2, [r3, #24]
      break;
 8006ed2:	e064      	b.n	8006f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fa68 	bl	80073b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699a      	ldr	r2, [r3, #24]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6999      	ldr	r1, [r3, #24]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	021a      	lsls	r2, r3, #8
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	619a      	str	r2, [r3, #24]
      break;
 8006f14:	e043      	b.n	8006f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fabd 	bl	800749c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0208 	orr.w	r2, r2, #8
 8006f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69da      	ldr	r2, [r3, #28]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0204 	bic.w	r2, r2, #4
 8006f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69d9      	ldr	r1, [r3, #28]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	61da      	str	r2, [r3, #28]
      break;
 8006f54:	e023      	b.n	8006f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fb11 	bl	8007584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69d9      	ldr	r1, [r3, #28]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	021a      	lsls	r2, r3, #8
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	61da      	str	r2, [r3, #28]
      break;
 8006f96:	e002      	b.n	8006f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e0b4      	b.n	8007136 <HAL_TIM_ConfigClockSource+0x186>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007004:	d03e      	beq.n	8007084 <HAL_TIM_ConfigClockSource+0xd4>
 8007006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700a:	f200 8087 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800700e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007012:	f000 8086 	beq.w	8007122 <HAL_TIM_ConfigClockSource+0x172>
 8007016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701a:	d87f      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800701c:	2b70      	cmp	r3, #112	; 0x70
 800701e:	d01a      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0xa6>
 8007020:	2b70      	cmp	r3, #112	; 0x70
 8007022:	d87b      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 8007024:	2b60      	cmp	r3, #96	; 0x60
 8007026:	d050      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x11a>
 8007028:	2b60      	cmp	r3, #96	; 0x60
 800702a:	d877      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800702c:	2b50      	cmp	r3, #80	; 0x50
 800702e:	d03c      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0xfa>
 8007030:	2b50      	cmp	r3, #80	; 0x50
 8007032:	d873      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d058      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0x13a>
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d86f      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800703c:	2b30      	cmp	r3, #48	; 0x30
 800703e:	d064      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x15a>
 8007040:	2b30      	cmp	r3, #48	; 0x30
 8007042:	d86b      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 8007044:	2b20      	cmp	r3, #32
 8007046:	d060      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x15a>
 8007048:	2b20      	cmp	r3, #32
 800704a:	d867      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800704c:	2b00      	cmp	r3, #0
 800704e:	d05c      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x15a>
 8007050:	2b10      	cmp	r3, #16
 8007052:	d05a      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x15a>
 8007054:	e062      	b.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6899      	ldr	r1, [r3, #8]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f000 fb5d 	bl	8007724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	609a      	str	r2, [r3, #8]
      break;
 8007082:	e04f      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	6899      	ldr	r1, [r3, #8]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f000 fb46 	bl	8007724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070a6:	609a      	str	r2, [r3, #8]
      break;
 80070a8:	e03c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6859      	ldr	r1, [r3, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f000 faba 	bl	8007630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2150      	movs	r1, #80	; 0x50
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fb13 	bl	80076ee <TIM_ITRx_SetConfig>
      break;
 80070c8:	e02c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6859      	ldr	r1, [r3, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f000 fad9 	bl	800768e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2160      	movs	r1, #96	; 0x60
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fb03 	bl	80076ee <TIM_ITRx_SetConfig>
      break;
 80070e8:	e01c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6859      	ldr	r1, [r3, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f000 fa9a 	bl	8007630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2140      	movs	r1, #64	; 0x40
 8007102:	4618      	mov	r0, r3
 8007104:	f000 faf3 	bl	80076ee <TIM_ITRx_SetConfig>
      break;
 8007108:	e00c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f000 faea 	bl	80076ee <TIM_ITRx_SetConfig>
      break;
 800711a:	e003      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
      break;
 8007120:	e000      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
	...

08007190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a40      	ldr	r2, [pc, #256]	; (80072a4 <TIM_Base_SetConfig+0x114>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d013      	beq.n	80071d0 <TIM_Base_SetConfig+0x40>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ae:	d00f      	beq.n	80071d0 <TIM_Base_SetConfig+0x40>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a3d      	ldr	r2, [pc, #244]	; (80072a8 <TIM_Base_SetConfig+0x118>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00b      	beq.n	80071d0 <TIM_Base_SetConfig+0x40>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a3c      	ldr	r2, [pc, #240]	; (80072ac <TIM_Base_SetConfig+0x11c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d007      	beq.n	80071d0 <TIM_Base_SetConfig+0x40>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a3b      	ldr	r2, [pc, #236]	; (80072b0 <TIM_Base_SetConfig+0x120>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <TIM_Base_SetConfig+0x40>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a3a      	ldr	r2, [pc, #232]	; (80072b4 <TIM_Base_SetConfig+0x124>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d108      	bne.n	80071e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a2f      	ldr	r2, [pc, #188]	; (80072a4 <TIM_Base_SetConfig+0x114>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d02b      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f0:	d027      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a2c      	ldr	r2, [pc, #176]	; (80072a8 <TIM_Base_SetConfig+0x118>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d023      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a2b      	ldr	r2, [pc, #172]	; (80072ac <TIM_Base_SetConfig+0x11c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01f      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a2a      	ldr	r2, [pc, #168]	; (80072b0 <TIM_Base_SetConfig+0x120>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d01b      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a29      	ldr	r2, [pc, #164]	; (80072b4 <TIM_Base_SetConfig+0x124>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d017      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a28      	ldr	r2, [pc, #160]	; (80072b8 <TIM_Base_SetConfig+0x128>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a27      	ldr	r2, [pc, #156]	; (80072bc <TIM_Base_SetConfig+0x12c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00f      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a26      	ldr	r2, [pc, #152]	; (80072c0 <TIM_Base_SetConfig+0x130>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00b      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a25      	ldr	r2, [pc, #148]	; (80072c4 <TIM_Base_SetConfig+0x134>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d007      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a24      	ldr	r2, [pc, #144]	; (80072c8 <TIM_Base_SetConfig+0x138>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d003      	beq.n	8007242 <TIM_Base_SetConfig+0xb2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a23      	ldr	r2, [pc, #140]	; (80072cc <TIM_Base_SetConfig+0x13c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d108      	bne.n	8007254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a0a      	ldr	r2, [pc, #40]	; (80072a4 <TIM_Base_SetConfig+0x114>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_Base_SetConfig+0xf8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <TIM_Base_SetConfig+0x124>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d103      	bne.n	8007290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	691a      	ldr	r2, [r3, #16]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	615a      	str	r2, [r3, #20]
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40010400 	.word	0x40010400
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40014400 	.word	0x40014400
 80072c0:	40014800 	.word	0x40014800
 80072c4:	40001800 	.word	0x40001800
 80072c8:	40001c00 	.word	0x40001c00
 80072cc:	40002000 	.word	0x40002000

080072d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0201 	bic.w	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0303 	bic.w	r3, r3, #3
 8007306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f023 0302 	bic.w	r3, r3, #2
 8007318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a20      	ldr	r2, [pc, #128]	; (80073a8 <TIM_OC1_SetConfig+0xd8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <TIM_OC1_SetConfig+0x64>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a1f      	ldr	r2, [pc, #124]	; (80073ac <TIM_OC1_SetConfig+0xdc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d10c      	bne.n	800734e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f023 0308 	bic.w	r3, r3, #8
 800733a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4313      	orrs	r3, r2
 8007344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f023 0304 	bic.w	r3, r3, #4
 800734c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <TIM_OC1_SetConfig+0xd8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d003      	beq.n	800735e <TIM_OC1_SetConfig+0x8e>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a14      	ldr	r2, [pc, #80]	; (80073ac <TIM_OC1_SetConfig+0xdc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d111      	bne.n	8007382 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800736c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4313      	orrs	r3, r2
 8007380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	621a      	str	r2, [r3, #32]
}
 800739c:	bf00      	nop
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	40010000 	.word	0x40010000
 80073ac:	40010400 	.word	0x40010400

080073b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	f023 0210 	bic.w	r2, r3, #16
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	021b      	lsls	r3, r3, #8
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f023 0320 	bic.w	r3, r3, #32
 80073fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a22      	ldr	r2, [pc, #136]	; (8007494 <TIM_OC2_SetConfig+0xe4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d003      	beq.n	8007418 <TIM_OC2_SetConfig+0x68>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a21      	ldr	r2, [pc, #132]	; (8007498 <TIM_OC2_SetConfig+0xe8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d10d      	bne.n	8007434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007432:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a17      	ldr	r2, [pc, #92]	; (8007494 <TIM_OC2_SetConfig+0xe4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_OC2_SetConfig+0x94>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a16      	ldr	r2, [pc, #88]	; (8007498 <TIM_OC2_SetConfig+0xe8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d113      	bne.n	800746c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800744a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	621a      	str	r2, [r3, #32]
}
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40010000 	.word	0x40010000
 8007498:	40010400 	.word	0x40010400

0800749c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 0303 	bic.w	r3, r3, #3
 80074d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a21      	ldr	r2, [pc, #132]	; (800757c <TIM_OC3_SetConfig+0xe0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d003      	beq.n	8007502 <TIM_OC3_SetConfig+0x66>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a20      	ldr	r2, [pc, #128]	; (8007580 <TIM_OC3_SetConfig+0xe4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d10d      	bne.n	800751e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800751c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a16      	ldr	r2, [pc, #88]	; (800757c <TIM_OC3_SetConfig+0xe0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d003      	beq.n	800752e <TIM_OC3_SetConfig+0x92>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a15      	ldr	r2, [pc, #84]	; (8007580 <TIM_OC3_SetConfig+0xe4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d113      	bne.n	8007556 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800753c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	621a      	str	r2, [r3, #32]
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	40010000 	.word	0x40010000
 8007580:	40010400 	.word	0x40010400

08007584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	031b      	lsls	r3, r3, #12
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a12      	ldr	r2, [pc, #72]	; (8007628 <TIM_OC4_SetConfig+0xa4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d003      	beq.n	80075ec <TIM_OC4_SetConfig+0x68>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a11      	ldr	r2, [pc, #68]	; (800762c <TIM_OC4_SetConfig+0xa8>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d109      	bne.n	8007600 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	019b      	lsls	r3, r3, #6
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	40010000 	.word	0x40010000
 800762c:	40010400 	.word	0x40010400

08007630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0201 	bic.w	r2, r3, #1
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800765a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f023 030a 	bic.w	r3, r3, #10
 800766c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	621a      	str	r2, [r3, #32]
}
 8007682:	bf00      	nop
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800768e:	b480      	push	{r7}
 8007690:	b087      	sub	sp, #28
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	f023 0210 	bic.w	r2, r3, #16
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	031b      	lsls	r3, r3, #12
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	f043 0307 	orr.w	r3, r3, #7
 8007710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	609a      	str	r2, [r3, #8]
}
 8007718:	bf00      	nop
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800773e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	021a      	lsls	r2, r3, #8
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	431a      	orrs	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4313      	orrs	r3, r2
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	4313      	orrs	r3, r2
 8007750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	609a      	str	r2, [r3, #8]
}
 8007758:	bf00      	nop
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	2201      	movs	r2, #1
 8007778:	fa02 f303 	lsl.w	r3, r2, r3
 800777c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a1a      	ldr	r2, [r3, #32]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	43db      	mvns	r3, r3
 8007786:	401a      	ands	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a1a      	ldr	r2, [r3, #32]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	fa01 f303 	lsl.w	r3, r1, r3
 800779c:	431a      	orrs	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e05a      	b.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a21      	ldr	r2, [pc, #132]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d022      	beq.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007814:	d01d      	beq.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a1d      	ldr	r2, [pc, #116]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d018      	beq.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a1b      	ldr	r2, [pc, #108]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1a      	ldr	r2, [pc, #104]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00e      	beq.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a18      	ldr	r2, [pc, #96]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d009      	beq.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a17      	ldr	r2, [pc, #92]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d004      	beq.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a15      	ldr	r2, [pc, #84]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d10c      	bne.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	4313      	orrs	r3, r2
 8007862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	40010000 	.word	0x40010000
 8007890:	40000400 	.word	0x40000400
 8007894:	40000800 	.word	0x40000800
 8007898:	40000c00 	.word	0x40000c00
 800789c:	40010400 	.word	0x40010400
 80078a0:	40014000 	.word	0x40014000
 80078a4:	40001800 	.word	0x40001800

080078a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e03f      	b.n	8007962 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7fa fad4 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2224      	movs	r2, #36	; 0x24
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f929 	bl	8007b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695a      	ldr	r2, [r3, #20]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b08a      	sub	sp, #40	; 0x28
 800796e:	af02      	add	r7, sp, #8
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b20      	cmp	r3, #32
 8007988:	d17c      	bne.n	8007a84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_UART_Transmit+0x2c>
 8007990:	88fb      	ldrh	r3, [r7, #6]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e075      	b.n	8007a86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d101      	bne.n	80079a8 <HAL_UART_Transmit+0x3e>
 80079a4:	2302      	movs	r3, #2
 80079a6:	e06e      	b.n	8007a86 <HAL_UART_Transmit+0x11c>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2221      	movs	r2, #33	; 0x21
 80079ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079be:	f7fa fc39 	bl	8002234 <HAL_GetTick>
 80079c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	88fa      	ldrh	r2, [r7, #6]
 80079c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d8:	d108      	bne.n	80079ec <HAL_UART_Transmit+0x82>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d104      	bne.n	80079ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	61bb      	str	r3, [r7, #24]
 80079ea:	e003      	b.n	80079f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80079fc:	e02a      	b.n	8007a54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2200      	movs	r2, #0
 8007a06:	2180      	movs	r1, #128	; 0x80
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f840 	bl	8007a8e <UART_WaitOnFlagUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e036      	b.n	8007a86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	3302      	adds	r3, #2
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	e007      	b.n	8007a46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	781a      	ldrb	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	3301      	adds	r3, #1
 8007a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1cf      	bne.n	80079fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2200      	movs	r2, #0
 8007a66:	2140      	movs	r1, #64	; 0x40
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 f810 	bl	8007a8e <UART_WaitOnFlagUntilTimeout>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	e000      	b.n	8007a86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a84:	2302      	movs	r3, #2
  }
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3720      	adds	r7, #32
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b090      	sub	sp, #64	; 0x40
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	603b      	str	r3, [r7, #0]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9e:	e050      	b.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d04c      	beq.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d007      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0x30>
 8007aae:	f7fa fbc1 	bl	8002234 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d241      	bcs.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	330c      	adds	r3, #12
 8007ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ade:	637a      	str	r2, [r7, #52]	; 0x34
 8007ae0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3314      	adds	r3, #20
 8007af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	613b      	str	r3, [r7, #16]
   return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f023 0301 	bic.w	r3, r3, #1
 8007b08:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3314      	adds	r3, #20
 8007b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b12:	623a      	str	r2, [r7, #32]
 8007b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	69f9      	ldr	r1, [r7, #28]
 8007b18:	6a3a      	ldr	r2, [r7, #32]
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e5      	bne.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e00f      	b.n	8007b62 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	bf0c      	ite	eq
 8007b52:	2301      	moveq	r3, #1
 8007b54:	2300      	movne	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d09f      	beq.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3740      	adds	r7, #64	; 0x40
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b70:	b0c0      	sub	sp, #256	; 0x100
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	68d9      	ldr	r1, [r3, #12]
 8007b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	ea40 0301 	orr.w	r3, r0, r1
 8007b94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bc4:	f021 010c 	bic.w	r1, r1, #12
 8007bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be6:	6999      	ldr	r1, [r3, #24]
 8007be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	ea40 0301 	orr.w	r3, r0, r1
 8007bf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b8f      	ldr	r3, [pc, #572]	; (8007e38 <UART_SetConfig+0x2cc>)
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d005      	beq.n	8007c0c <UART_SetConfig+0xa0>
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b8d      	ldr	r3, [pc, #564]	; (8007e3c <UART_SetConfig+0x2d0>)
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d104      	bne.n	8007c16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c0c:	f7fd fe9c 	bl	8005948 <HAL_RCC_GetPCLK2Freq>
 8007c10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c14:	e003      	b.n	8007c1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c16:	f7fd fe83 	bl	8005920 <HAL_RCC_GetPCLK1Freq>
 8007c1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c28:	f040 810c 	bne.w	8007e44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c30:	2200      	movs	r2, #0
 8007c32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c3e:	4622      	mov	r2, r4
 8007c40:	462b      	mov	r3, r5
 8007c42:	1891      	adds	r1, r2, r2
 8007c44:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c46:	415b      	adcs	r3, r3
 8007c48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c4e:	4621      	mov	r1, r4
 8007c50:	eb12 0801 	adds.w	r8, r2, r1
 8007c54:	4629      	mov	r1, r5
 8007c56:	eb43 0901 	adc.w	r9, r3, r1
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c6e:	4690      	mov	r8, r2
 8007c70:	4699      	mov	r9, r3
 8007c72:	4623      	mov	r3, r4
 8007c74:	eb18 0303 	adds.w	r3, r8, r3
 8007c78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	eb49 0303 	adc.w	r3, r9, r3
 8007c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	18db      	adds	r3, r3, r3
 8007c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	eb42 0303 	adc.w	r3, r2, r3
 8007ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ca8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cb0:	f7f8 faf6 	bl	80002a0 <__aeabi_uldivmod>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4b61      	ldr	r3, [pc, #388]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007cba:	fba3 2302 	umull	r2, r3, r3, r2
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	011c      	lsls	r4, r3, #4
 8007cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ccc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	1891      	adds	r1, r2, r2
 8007cda:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cdc:	415b      	adcs	r3, r3
 8007cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	eb12 0a01 	adds.w	sl, r2, r1
 8007cea:	4649      	mov	r1, r9
 8007cec:	eb43 0b01 	adc.w	fp, r3, r1
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d04:	4692      	mov	sl, r2
 8007d06:	469b      	mov	fp, r3
 8007d08:	4643      	mov	r3, r8
 8007d0a:	eb1a 0303 	adds.w	r3, sl, r3
 8007d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d12:	464b      	mov	r3, r9
 8007d14:	eb4b 0303 	adc.w	r3, fp, r3
 8007d18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d30:	460b      	mov	r3, r1
 8007d32:	18db      	adds	r3, r3, r3
 8007d34:	643b      	str	r3, [r7, #64]	; 0x40
 8007d36:	4613      	mov	r3, r2
 8007d38:	eb42 0303 	adc.w	r3, r2, r3
 8007d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d46:	f7f8 faab 	bl	80002a0 <__aeabi_uldivmod>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4b3b      	ldr	r3, [pc, #236]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007d52:	fba3 2301 	umull	r2, r3, r3, r1
 8007d56:	095b      	lsrs	r3, r3, #5
 8007d58:	2264      	movs	r2, #100	; 0x64
 8007d5a:	fb02 f303 	mul.w	r3, r2, r3
 8007d5e:	1acb      	subs	r3, r1, r3
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d66:	4b36      	ldr	r3, [pc, #216]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007d68:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d74:	441c      	add	r4, r3
 8007d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d88:	4642      	mov	r2, r8
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	1891      	adds	r1, r2, r2
 8007d8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d90:	415b      	adcs	r3, r3
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d98:	4641      	mov	r1, r8
 8007d9a:	1851      	adds	r1, r2, r1
 8007d9c:	6339      	str	r1, [r7, #48]	; 0x30
 8007d9e:	4649      	mov	r1, r9
 8007da0:	414b      	adcs	r3, r1
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
 8007da4:	f04f 0200 	mov.w	r2, #0
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007db0:	4659      	mov	r1, fp
 8007db2:	00cb      	lsls	r3, r1, #3
 8007db4:	4651      	mov	r1, sl
 8007db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dba:	4651      	mov	r1, sl
 8007dbc:	00ca      	lsls	r2, r1, #3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	189b      	adds	r3, r3, r2
 8007dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dcc:	464b      	mov	r3, r9
 8007dce:	460a      	mov	r2, r1
 8007dd0:	eb42 0303 	adc.w	r3, r2, r3
 8007dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007de4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007de8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007dec:	460b      	mov	r3, r1
 8007dee:	18db      	adds	r3, r3, r3
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007df2:	4613      	mov	r3, r2
 8007df4:	eb42 0303 	adc.w	r3, r2, r3
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e02:	f7f8 fa4d 	bl	80002a0 <__aeabi_uldivmod>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e10:	095b      	lsrs	r3, r3, #5
 8007e12:	2164      	movs	r1, #100	; 0x64
 8007e14:	fb01 f303 	mul.w	r3, r1, r3
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	3332      	adds	r3, #50	; 0x32
 8007e1e:	4a08      	ldr	r2, [pc, #32]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007e20:	fba2 2303 	umull	r2, r3, r2, r3
 8007e24:	095b      	lsrs	r3, r3, #5
 8007e26:	f003 0207 	and.w	r2, r3, #7
 8007e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4422      	add	r2, r4
 8007e32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e34:	e106      	b.n	8008044 <UART_SetConfig+0x4d8>
 8007e36:	bf00      	nop
 8007e38:	40011000 	.word	0x40011000
 8007e3c:	40011400 	.word	0x40011400
 8007e40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e56:	4642      	mov	r2, r8
 8007e58:	464b      	mov	r3, r9
 8007e5a:	1891      	adds	r1, r2, r2
 8007e5c:	6239      	str	r1, [r7, #32]
 8007e5e:	415b      	adcs	r3, r3
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
 8007e62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e66:	4641      	mov	r1, r8
 8007e68:	1854      	adds	r4, r2, r1
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	eb43 0501 	adc.w	r5, r3, r1
 8007e70:	f04f 0200 	mov.w	r2, #0
 8007e74:	f04f 0300 	mov.w	r3, #0
 8007e78:	00eb      	lsls	r3, r5, #3
 8007e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e7e:	00e2      	lsls	r2, r4, #3
 8007e80:	4614      	mov	r4, r2
 8007e82:	461d      	mov	r5, r3
 8007e84:	4643      	mov	r3, r8
 8007e86:	18e3      	adds	r3, r4, r3
 8007e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	eb45 0303 	adc.w	r3, r5, r3
 8007e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ea2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	f04f 0300 	mov.w	r3, #0
 8007eae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	008b      	lsls	r3, r1, #2
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	008a      	lsls	r2, r1, #2
 8007ec0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ec4:	f7f8 f9ec 	bl	80002a0 <__aeabi_uldivmod>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4b60      	ldr	r3, [pc, #384]	; (8008050 <UART_SetConfig+0x4e4>)
 8007ece:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed2:	095b      	lsrs	r3, r3, #5
 8007ed4:	011c      	lsls	r4, r3, #4
 8007ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ee0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ee4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ee8:	4642      	mov	r2, r8
 8007eea:	464b      	mov	r3, r9
 8007eec:	1891      	adds	r1, r2, r2
 8007eee:	61b9      	str	r1, [r7, #24]
 8007ef0:	415b      	adcs	r3, r3
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ef8:	4641      	mov	r1, r8
 8007efa:	1851      	adds	r1, r2, r1
 8007efc:	6139      	str	r1, [r7, #16]
 8007efe:	4649      	mov	r1, r9
 8007f00:	414b      	adcs	r3, r1
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f10:	4659      	mov	r1, fp
 8007f12:	00cb      	lsls	r3, r1, #3
 8007f14:	4651      	mov	r1, sl
 8007f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f1a:	4651      	mov	r1, sl
 8007f1c:	00ca      	lsls	r2, r1, #3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4619      	mov	r1, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	4642      	mov	r2, r8
 8007f26:	189b      	adds	r3, r3, r2
 8007f28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	460a      	mov	r2, r1
 8007f30:	eb42 0303 	adc.w	r3, r2, r3
 8007f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f50:	4649      	mov	r1, r9
 8007f52:	008b      	lsls	r3, r1, #2
 8007f54:	4641      	mov	r1, r8
 8007f56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	008a      	lsls	r2, r1, #2
 8007f5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f62:	f7f8 f99d 	bl	80002a0 <__aeabi_uldivmod>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4b38      	ldr	r3, [pc, #224]	; (8008050 <UART_SetConfig+0x4e4>)
 8007f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f72:	095b      	lsrs	r3, r3, #5
 8007f74:	2264      	movs	r2, #100	; 0x64
 8007f76:	fb02 f303 	mul.w	r3, r2, r3
 8007f7a:	1acb      	subs	r3, r1, r3
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	3332      	adds	r3, #50	; 0x32
 8007f80:	4a33      	ldr	r2, [pc, #204]	; (8008050 <UART_SetConfig+0x4e4>)
 8007f82:	fba2 2303 	umull	r2, r3, r2, r3
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f8c:	441c      	add	r4, r3
 8007f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f92:	2200      	movs	r2, #0
 8007f94:	673b      	str	r3, [r7, #112]	; 0x70
 8007f96:	677a      	str	r2, [r7, #116]	; 0x74
 8007f98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	1891      	adds	r1, r2, r2
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	415b      	adcs	r3, r3
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fac:	4641      	mov	r1, r8
 8007fae:	1851      	adds	r1, r2, r1
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	414b      	adcs	r3, r1
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	00cb      	lsls	r3, r1, #3
 8007fc8:	4651      	mov	r1, sl
 8007fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fce:	4651      	mov	r1, sl
 8007fd0:	00ca      	lsls	r2, r1, #3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4642      	mov	r2, r8
 8007fda:	189b      	adds	r3, r3, r2
 8007fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fde:	464b      	mov	r3, r9
 8007fe0:	460a      	mov	r2, r1
 8007fe2:	eb42 0303 	adc.w	r3, r2, r3
 8007fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ff2:	667a      	str	r2, [r7, #100]	; 0x64
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008000:	4649      	mov	r1, r9
 8008002:	008b      	lsls	r3, r1, #2
 8008004:	4641      	mov	r1, r8
 8008006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800800a:	4641      	mov	r1, r8
 800800c:	008a      	lsls	r2, r1, #2
 800800e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008012:	f7f8 f945 	bl	80002a0 <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <UART_SetConfig+0x4e4>)
 800801c:	fba3 1302 	umull	r1, r3, r3, r2
 8008020:	095b      	lsrs	r3, r3, #5
 8008022:	2164      	movs	r1, #100	; 0x64
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	3332      	adds	r3, #50	; 0x32
 800802e:	4a08      	ldr	r2, [pc, #32]	; (8008050 <UART_SetConfig+0x4e4>)
 8008030:	fba2 2303 	umull	r2, r3, r2, r3
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	f003 020f 	and.w	r2, r3, #15
 800803a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4422      	add	r2, r4
 8008042:	609a      	str	r2, [r3, #8]
}
 8008044:	bf00      	nop
 8008046:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800804a:	46bd      	mov	sp, r7
 800804c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008050:	51eb851f 	.word	0x51eb851f

08008054 <std>:
 8008054:	2300      	movs	r3, #0
 8008056:	b510      	push	{r4, lr}
 8008058:	4604      	mov	r4, r0
 800805a:	e9c0 3300 	strd	r3, r3, [r0]
 800805e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008062:	6083      	str	r3, [r0, #8]
 8008064:	8181      	strh	r1, [r0, #12]
 8008066:	6643      	str	r3, [r0, #100]	; 0x64
 8008068:	81c2      	strh	r2, [r0, #14]
 800806a:	6183      	str	r3, [r0, #24]
 800806c:	4619      	mov	r1, r3
 800806e:	2208      	movs	r2, #8
 8008070:	305c      	adds	r0, #92	; 0x5c
 8008072:	f000 fa4b 	bl	800850c <memset>
 8008076:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <std+0x58>)
 8008078:	6263      	str	r3, [r4, #36]	; 0x24
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <std+0x5c>)
 800807c:	62a3      	str	r3, [r4, #40]	; 0x28
 800807e:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <std+0x60>)
 8008080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008082:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <std+0x64>)
 8008084:	6323      	str	r3, [r4, #48]	; 0x30
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <std+0x68>)
 8008088:	6224      	str	r4, [r4, #32]
 800808a:	429c      	cmp	r4, r3
 800808c:	d006      	beq.n	800809c <std+0x48>
 800808e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008092:	4294      	cmp	r4, r2
 8008094:	d002      	beq.n	800809c <std+0x48>
 8008096:	33d0      	adds	r3, #208	; 0xd0
 8008098:	429c      	cmp	r4, r3
 800809a:	d105      	bne.n	80080a8 <std+0x54>
 800809c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a4:	f000 baaa 	b.w	80085fc <__retarget_lock_init_recursive>
 80080a8:	bd10      	pop	{r4, pc}
 80080aa:	bf00      	nop
 80080ac:	0800835d 	.word	0x0800835d
 80080b0:	0800837f 	.word	0x0800837f
 80080b4:	080083b7 	.word	0x080083b7
 80080b8:	080083db 	.word	0x080083db
 80080bc:	20000800 	.word	0x20000800

080080c0 <stdio_exit_handler>:
 80080c0:	4a02      	ldr	r2, [pc, #8]	; (80080cc <stdio_exit_handler+0xc>)
 80080c2:	4903      	ldr	r1, [pc, #12]	; (80080d0 <stdio_exit_handler+0x10>)
 80080c4:	4803      	ldr	r0, [pc, #12]	; (80080d4 <stdio_exit_handler+0x14>)
 80080c6:	f000 b869 	b.w	800819c <_fwalk_sglue>
 80080ca:	bf00      	nop
 80080cc:	20000288 	.word	0x20000288
 80080d0:	08009159 	.word	0x08009159
 80080d4:	20000294 	.word	0x20000294

080080d8 <cleanup_stdio>:
 80080d8:	6841      	ldr	r1, [r0, #4]
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <cleanup_stdio+0x34>)
 80080dc:	4299      	cmp	r1, r3
 80080de:	b510      	push	{r4, lr}
 80080e0:	4604      	mov	r4, r0
 80080e2:	d001      	beq.n	80080e8 <cleanup_stdio+0x10>
 80080e4:	f001 f838 	bl	8009158 <_fflush_r>
 80080e8:	68a1      	ldr	r1, [r4, #8]
 80080ea:	4b09      	ldr	r3, [pc, #36]	; (8008110 <cleanup_stdio+0x38>)
 80080ec:	4299      	cmp	r1, r3
 80080ee:	d002      	beq.n	80080f6 <cleanup_stdio+0x1e>
 80080f0:	4620      	mov	r0, r4
 80080f2:	f001 f831 	bl	8009158 <_fflush_r>
 80080f6:	68e1      	ldr	r1, [r4, #12]
 80080f8:	4b06      	ldr	r3, [pc, #24]	; (8008114 <cleanup_stdio+0x3c>)
 80080fa:	4299      	cmp	r1, r3
 80080fc:	d004      	beq.n	8008108 <cleanup_stdio+0x30>
 80080fe:	4620      	mov	r0, r4
 8008100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008104:	f001 b828 	b.w	8009158 <_fflush_r>
 8008108:	bd10      	pop	{r4, pc}
 800810a:	bf00      	nop
 800810c:	20000800 	.word	0x20000800
 8008110:	20000868 	.word	0x20000868
 8008114:	200008d0 	.word	0x200008d0

08008118 <global_stdio_init.part.0>:
 8008118:	b510      	push	{r4, lr}
 800811a:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <global_stdio_init.part.0+0x30>)
 800811c:	4c0b      	ldr	r4, [pc, #44]	; (800814c <global_stdio_init.part.0+0x34>)
 800811e:	4a0c      	ldr	r2, [pc, #48]	; (8008150 <global_stdio_init.part.0+0x38>)
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	4620      	mov	r0, r4
 8008124:	2200      	movs	r2, #0
 8008126:	2104      	movs	r1, #4
 8008128:	f7ff ff94 	bl	8008054 <std>
 800812c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008130:	2201      	movs	r2, #1
 8008132:	2109      	movs	r1, #9
 8008134:	f7ff ff8e 	bl	8008054 <std>
 8008138:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800813c:	2202      	movs	r2, #2
 800813e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008142:	2112      	movs	r1, #18
 8008144:	f7ff bf86 	b.w	8008054 <std>
 8008148:	20000938 	.word	0x20000938
 800814c:	20000800 	.word	0x20000800
 8008150:	080080c1 	.word	0x080080c1

08008154 <__sfp_lock_acquire>:
 8008154:	4801      	ldr	r0, [pc, #4]	; (800815c <__sfp_lock_acquire+0x8>)
 8008156:	f000 ba52 	b.w	80085fe <__retarget_lock_acquire_recursive>
 800815a:	bf00      	nop
 800815c:	20000941 	.word	0x20000941

08008160 <__sfp_lock_release>:
 8008160:	4801      	ldr	r0, [pc, #4]	; (8008168 <__sfp_lock_release+0x8>)
 8008162:	f000 ba4d 	b.w	8008600 <__retarget_lock_release_recursive>
 8008166:	bf00      	nop
 8008168:	20000941 	.word	0x20000941

0800816c <__sinit>:
 800816c:	b510      	push	{r4, lr}
 800816e:	4604      	mov	r4, r0
 8008170:	f7ff fff0 	bl	8008154 <__sfp_lock_acquire>
 8008174:	6a23      	ldr	r3, [r4, #32]
 8008176:	b11b      	cbz	r3, 8008180 <__sinit+0x14>
 8008178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817c:	f7ff bff0 	b.w	8008160 <__sfp_lock_release>
 8008180:	4b04      	ldr	r3, [pc, #16]	; (8008194 <__sinit+0x28>)
 8008182:	6223      	str	r3, [r4, #32]
 8008184:	4b04      	ldr	r3, [pc, #16]	; (8008198 <__sinit+0x2c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f5      	bne.n	8008178 <__sinit+0xc>
 800818c:	f7ff ffc4 	bl	8008118 <global_stdio_init.part.0>
 8008190:	e7f2      	b.n	8008178 <__sinit+0xc>
 8008192:	bf00      	nop
 8008194:	080080d9 	.word	0x080080d9
 8008198:	20000938 	.word	0x20000938

0800819c <_fwalk_sglue>:
 800819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a0:	4607      	mov	r7, r0
 80081a2:	4688      	mov	r8, r1
 80081a4:	4614      	mov	r4, r2
 80081a6:	2600      	movs	r6, #0
 80081a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081ac:	f1b9 0901 	subs.w	r9, r9, #1
 80081b0:	d505      	bpl.n	80081be <_fwalk_sglue+0x22>
 80081b2:	6824      	ldr	r4, [r4, #0]
 80081b4:	2c00      	cmp	r4, #0
 80081b6:	d1f7      	bne.n	80081a8 <_fwalk_sglue+0xc>
 80081b8:	4630      	mov	r0, r6
 80081ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081be:	89ab      	ldrh	r3, [r5, #12]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d907      	bls.n	80081d4 <_fwalk_sglue+0x38>
 80081c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081c8:	3301      	adds	r3, #1
 80081ca:	d003      	beq.n	80081d4 <_fwalk_sglue+0x38>
 80081cc:	4629      	mov	r1, r5
 80081ce:	4638      	mov	r0, r7
 80081d0:	47c0      	blx	r8
 80081d2:	4306      	orrs	r6, r0
 80081d4:	3568      	adds	r5, #104	; 0x68
 80081d6:	e7e9      	b.n	80081ac <_fwalk_sglue+0x10>

080081d8 <iprintf>:
 80081d8:	b40f      	push	{r0, r1, r2, r3}
 80081da:	b507      	push	{r0, r1, r2, lr}
 80081dc:	4906      	ldr	r1, [pc, #24]	; (80081f8 <iprintf+0x20>)
 80081de:	ab04      	add	r3, sp, #16
 80081e0:	6808      	ldr	r0, [r1, #0]
 80081e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e6:	6881      	ldr	r1, [r0, #8]
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	f000 fc85 	bl	8008af8 <_vfiprintf_r>
 80081ee:	b003      	add	sp, #12
 80081f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr
 80081f8:	200002e0 	.word	0x200002e0

080081fc <_puts_r>:
 80081fc:	6a03      	ldr	r3, [r0, #32]
 80081fe:	b570      	push	{r4, r5, r6, lr}
 8008200:	6884      	ldr	r4, [r0, #8]
 8008202:	4605      	mov	r5, r0
 8008204:	460e      	mov	r6, r1
 8008206:	b90b      	cbnz	r3, 800820c <_puts_r+0x10>
 8008208:	f7ff ffb0 	bl	800816c <__sinit>
 800820c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800820e:	07db      	lsls	r3, r3, #31
 8008210:	d405      	bmi.n	800821e <_puts_r+0x22>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	0598      	lsls	r0, r3, #22
 8008216:	d402      	bmi.n	800821e <_puts_r+0x22>
 8008218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800821a:	f000 f9f0 	bl	80085fe <__retarget_lock_acquire_recursive>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	0719      	lsls	r1, r3, #28
 8008222:	d513      	bpl.n	800824c <_puts_r+0x50>
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	b18b      	cbz	r3, 800824c <_puts_r+0x50>
 8008228:	3e01      	subs	r6, #1
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008230:	3b01      	subs	r3, #1
 8008232:	60a3      	str	r3, [r4, #8]
 8008234:	b9e9      	cbnz	r1, 8008272 <_puts_r+0x76>
 8008236:	2b00      	cmp	r3, #0
 8008238:	da2e      	bge.n	8008298 <_puts_r+0x9c>
 800823a:	4622      	mov	r2, r4
 800823c:	210a      	movs	r1, #10
 800823e:	4628      	mov	r0, r5
 8008240:	f000 f8cf 	bl	80083e2 <__swbuf_r>
 8008244:	3001      	adds	r0, #1
 8008246:	d007      	beq.n	8008258 <_puts_r+0x5c>
 8008248:	250a      	movs	r5, #10
 800824a:	e007      	b.n	800825c <_puts_r+0x60>
 800824c:	4621      	mov	r1, r4
 800824e:	4628      	mov	r0, r5
 8008250:	f000 f904 	bl	800845c <__swsetup_r>
 8008254:	2800      	cmp	r0, #0
 8008256:	d0e7      	beq.n	8008228 <_puts_r+0x2c>
 8008258:	f04f 35ff 	mov.w	r5, #4294967295
 800825c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800825e:	07da      	lsls	r2, r3, #31
 8008260:	d405      	bmi.n	800826e <_puts_r+0x72>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	059b      	lsls	r3, r3, #22
 8008266:	d402      	bmi.n	800826e <_puts_r+0x72>
 8008268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826a:	f000 f9c9 	bl	8008600 <__retarget_lock_release_recursive>
 800826e:	4628      	mov	r0, r5
 8008270:	bd70      	pop	{r4, r5, r6, pc}
 8008272:	2b00      	cmp	r3, #0
 8008274:	da04      	bge.n	8008280 <_puts_r+0x84>
 8008276:	69a2      	ldr	r2, [r4, #24]
 8008278:	429a      	cmp	r2, r3
 800827a:	dc06      	bgt.n	800828a <_puts_r+0x8e>
 800827c:	290a      	cmp	r1, #10
 800827e:	d004      	beq.n	800828a <_puts_r+0x8e>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	6022      	str	r2, [r4, #0]
 8008286:	7019      	strb	r1, [r3, #0]
 8008288:	e7cf      	b.n	800822a <_puts_r+0x2e>
 800828a:	4622      	mov	r2, r4
 800828c:	4628      	mov	r0, r5
 800828e:	f000 f8a8 	bl	80083e2 <__swbuf_r>
 8008292:	3001      	adds	r0, #1
 8008294:	d1c9      	bne.n	800822a <_puts_r+0x2e>
 8008296:	e7df      	b.n	8008258 <_puts_r+0x5c>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	250a      	movs	r5, #10
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	6022      	str	r2, [r4, #0]
 80082a0:	701d      	strb	r5, [r3, #0]
 80082a2:	e7db      	b.n	800825c <_puts_r+0x60>

080082a4 <puts>:
 80082a4:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <puts+0xc>)
 80082a6:	4601      	mov	r1, r0
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	f7ff bfa7 	b.w	80081fc <_puts_r>
 80082ae:	bf00      	nop
 80082b0:	200002e0 	.word	0x200002e0

080082b4 <sniprintf>:
 80082b4:	b40c      	push	{r2, r3}
 80082b6:	b530      	push	{r4, r5, lr}
 80082b8:	4b17      	ldr	r3, [pc, #92]	; (8008318 <sniprintf+0x64>)
 80082ba:	1e0c      	subs	r4, r1, #0
 80082bc:	681d      	ldr	r5, [r3, #0]
 80082be:	b09d      	sub	sp, #116	; 0x74
 80082c0:	da08      	bge.n	80082d4 <sniprintf+0x20>
 80082c2:	238b      	movs	r3, #139	; 0x8b
 80082c4:	602b      	str	r3, [r5, #0]
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	b01d      	add	sp, #116	; 0x74
 80082cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082d0:	b002      	add	sp, #8
 80082d2:	4770      	bx	lr
 80082d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80082d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082dc:	bf14      	ite	ne
 80082de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082e2:	4623      	moveq	r3, r4
 80082e4:	9304      	str	r3, [sp, #16]
 80082e6:	9307      	str	r3, [sp, #28]
 80082e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082ec:	9002      	str	r0, [sp, #8]
 80082ee:	9006      	str	r0, [sp, #24]
 80082f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082f6:	ab21      	add	r3, sp, #132	; 0x84
 80082f8:	a902      	add	r1, sp, #8
 80082fa:	4628      	mov	r0, r5
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	f000 fad3 	bl	80088a8 <_svfiprintf_r>
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	bfbc      	itt	lt
 8008306:	238b      	movlt	r3, #139	; 0x8b
 8008308:	602b      	strlt	r3, [r5, #0]
 800830a:	2c00      	cmp	r4, #0
 800830c:	d0dd      	beq.n	80082ca <sniprintf+0x16>
 800830e:	9b02      	ldr	r3, [sp, #8]
 8008310:	2200      	movs	r2, #0
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	e7d9      	b.n	80082ca <sniprintf+0x16>
 8008316:	bf00      	nop
 8008318:	200002e0 	.word	0x200002e0

0800831c <siprintf>:
 800831c:	b40e      	push	{r1, r2, r3}
 800831e:	b500      	push	{lr}
 8008320:	b09c      	sub	sp, #112	; 0x70
 8008322:	ab1d      	add	r3, sp, #116	; 0x74
 8008324:	9002      	str	r0, [sp, #8]
 8008326:	9006      	str	r0, [sp, #24]
 8008328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800832c:	4809      	ldr	r0, [pc, #36]	; (8008354 <siprintf+0x38>)
 800832e:	9107      	str	r1, [sp, #28]
 8008330:	9104      	str	r1, [sp, #16]
 8008332:	4909      	ldr	r1, [pc, #36]	; (8008358 <siprintf+0x3c>)
 8008334:	f853 2b04 	ldr.w	r2, [r3], #4
 8008338:	9105      	str	r1, [sp, #20]
 800833a:	6800      	ldr	r0, [r0, #0]
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	a902      	add	r1, sp, #8
 8008340:	f000 fab2 	bl	80088a8 <_svfiprintf_r>
 8008344:	9b02      	ldr	r3, [sp, #8]
 8008346:	2200      	movs	r2, #0
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	b01c      	add	sp, #112	; 0x70
 800834c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008350:	b003      	add	sp, #12
 8008352:	4770      	bx	lr
 8008354:	200002e0 	.word	0x200002e0
 8008358:	ffff0208 	.word	0xffff0208

0800835c <__sread>:
 800835c:	b510      	push	{r4, lr}
 800835e:	460c      	mov	r4, r1
 8008360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008364:	f000 f8fc 	bl	8008560 <_read_r>
 8008368:	2800      	cmp	r0, #0
 800836a:	bfab      	itete	ge
 800836c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800836e:	89a3      	ldrhlt	r3, [r4, #12]
 8008370:	181b      	addge	r3, r3, r0
 8008372:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008376:	bfac      	ite	ge
 8008378:	6563      	strge	r3, [r4, #84]	; 0x54
 800837a:	81a3      	strhlt	r3, [r4, #12]
 800837c:	bd10      	pop	{r4, pc}

0800837e <__swrite>:
 800837e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008382:	461f      	mov	r7, r3
 8008384:	898b      	ldrh	r3, [r1, #12]
 8008386:	05db      	lsls	r3, r3, #23
 8008388:	4605      	mov	r5, r0
 800838a:	460c      	mov	r4, r1
 800838c:	4616      	mov	r6, r2
 800838e:	d505      	bpl.n	800839c <__swrite+0x1e>
 8008390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008394:	2302      	movs	r3, #2
 8008396:	2200      	movs	r2, #0
 8008398:	f000 f8d0 	bl	800853c <_lseek_r>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083a6:	81a3      	strh	r3, [r4, #12]
 80083a8:	4632      	mov	r2, r6
 80083aa:	463b      	mov	r3, r7
 80083ac:	4628      	mov	r0, r5
 80083ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b2:	f000 b8e7 	b.w	8008584 <_write_r>

080083b6 <__sseek>:
 80083b6:	b510      	push	{r4, lr}
 80083b8:	460c      	mov	r4, r1
 80083ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083be:	f000 f8bd 	bl	800853c <_lseek_r>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	bf15      	itete	ne
 80083c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083d2:	81a3      	strheq	r3, [r4, #12]
 80083d4:	bf18      	it	ne
 80083d6:	81a3      	strhne	r3, [r4, #12]
 80083d8:	bd10      	pop	{r4, pc}

080083da <__sclose>:
 80083da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083de:	f000 b89d 	b.w	800851c <_close_r>

080083e2 <__swbuf_r>:
 80083e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e4:	460e      	mov	r6, r1
 80083e6:	4614      	mov	r4, r2
 80083e8:	4605      	mov	r5, r0
 80083ea:	b118      	cbz	r0, 80083f4 <__swbuf_r+0x12>
 80083ec:	6a03      	ldr	r3, [r0, #32]
 80083ee:	b90b      	cbnz	r3, 80083f4 <__swbuf_r+0x12>
 80083f0:	f7ff febc 	bl	800816c <__sinit>
 80083f4:	69a3      	ldr	r3, [r4, #24]
 80083f6:	60a3      	str	r3, [r4, #8]
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	071a      	lsls	r2, r3, #28
 80083fc:	d525      	bpl.n	800844a <__swbuf_r+0x68>
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	b31b      	cbz	r3, 800844a <__swbuf_r+0x68>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	6922      	ldr	r2, [r4, #16]
 8008406:	1a98      	subs	r0, r3, r2
 8008408:	6963      	ldr	r3, [r4, #20]
 800840a:	b2f6      	uxtb	r6, r6
 800840c:	4283      	cmp	r3, r0
 800840e:	4637      	mov	r7, r6
 8008410:	dc04      	bgt.n	800841c <__swbuf_r+0x3a>
 8008412:	4621      	mov	r1, r4
 8008414:	4628      	mov	r0, r5
 8008416:	f000 fe9f 	bl	8009158 <_fflush_r>
 800841a:	b9e0      	cbnz	r0, 8008456 <__swbuf_r+0x74>
 800841c:	68a3      	ldr	r3, [r4, #8]
 800841e:	3b01      	subs	r3, #1
 8008420:	60a3      	str	r3, [r4, #8]
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	6022      	str	r2, [r4, #0]
 8008428:	701e      	strb	r6, [r3, #0]
 800842a:	6962      	ldr	r2, [r4, #20]
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	429a      	cmp	r2, r3
 8008430:	d004      	beq.n	800843c <__swbuf_r+0x5a>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	07db      	lsls	r3, r3, #31
 8008436:	d506      	bpl.n	8008446 <__swbuf_r+0x64>
 8008438:	2e0a      	cmp	r6, #10
 800843a:	d104      	bne.n	8008446 <__swbuf_r+0x64>
 800843c:	4621      	mov	r1, r4
 800843e:	4628      	mov	r0, r5
 8008440:	f000 fe8a 	bl	8009158 <_fflush_r>
 8008444:	b938      	cbnz	r0, 8008456 <__swbuf_r+0x74>
 8008446:	4638      	mov	r0, r7
 8008448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800844a:	4621      	mov	r1, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f000 f805 	bl	800845c <__swsetup_r>
 8008452:	2800      	cmp	r0, #0
 8008454:	d0d5      	beq.n	8008402 <__swbuf_r+0x20>
 8008456:	f04f 37ff 	mov.w	r7, #4294967295
 800845a:	e7f4      	b.n	8008446 <__swbuf_r+0x64>

0800845c <__swsetup_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4b2a      	ldr	r3, [pc, #168]	; (8008508 <__swsetup_r+0xac>)
 8008460:	4605      	mov	r5, r0
 8008462:	6818      	ldr	r0, [r3, #0]
 8008464:	460c      	mov	r4, r1
 8008466:	b118      	cbz	r0, 8008470 <__swsetup_r+0x14>
 8008468:	6a03      	ldr	r3, [r0, #32]
 800846a:	b90b      	cbnz	r3, 8008470 <__swsetup_r+0x14>
 800846c:	f7ff fe7e 	bl	800816c <__sinit>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008476:	0718      	lsls	r0, r3, #28
 8008478:	d422      	bmi.n	80084c0 <__swsetup_r+0x64>
 800847a:	06d9      	lsls	r1, r3, #27
 800847c:	d407      	bmi.n	800848e <__swsetup_r+0x32>
 800847e:	2309      	movs	r3, #9
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	f04f 30ff 	mov.w	r0, #4294967295
 800848c:	e034      	b.n	80084f8 <__swsetup_r+0x9c>
 800848e:	0758      	lsls	r0, r3, #29
 8008490:	d512      	bpl.n	80084b8 <__swsetup_r+0x5c>
 8008492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008494:	b141      	cbz	r1, 80084a8 <__swsetup_r+0x4c>
 8008496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800849a:	4299      	cmp	r1, r3
 800849c:	d002      	beq.n	80084a4 <__swsetup_r+0x48>
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 f8b0 	bl	8008604 <_free_r>
 80084a4:	2300      	movs	r3, #0
 80084a6:	6363      	str	r3, [r4, #52]	; 0x34
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	2300      	movs	r3, #0
 80084b2:	6063      	str	r3, [r4, #4]
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	f043 0308 	orr.w	r3, r3, #8
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	b94b      	cbnz	r3, 80084d8 <__swsetup_r+0x7c>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ce:	d003      	beq.n	80084d8 <__swsetup_r+0x7c>
 80084d0:	4621      	mov	r1, r4
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 fe8e 	bl	80091f4 <__smakebuf_r>
 80084d8:	89a0      	ldrh	r0, [r4, #12]
 80084da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084de:	f010 0301 	ands.w	r3, r0, #1
 80084e2:	d00a      	beq.n	80084fa <__swsetup_r+0x9e>
 80084e4:	2300      	movs	r3, #0
 80084e6:	60a3      	str	r3, [r4, #8]
 80084e8:	6963      	ldr	r3, [r4, #20]
 80084ea:	425b      	negs	r3, r3
 80084ec:	61a3      	str	r3, [r4, #24]
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	b943      	cbnz	r3, 8008504 <__swsetup_r+0xa8>
 80084f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084f6:	d1c4      	bne.n	8008482 <__swsetup_r+0x26>
 80084f8:	bd38      	pop	{r3, r4, r5, pc}
 80084fa:	0781      	lsls	r1, r0, #30
 80084fc:	bf58      	it	pl
 80084fe:	6963      	ldrpl	r3, [r4, #20]
 8008500:	60a3      	str	r3, [r4, #8]
 8008502:	e7f4      	b.n	80084ee <__swsetup_r+0x92>
 8008504:	2000      	movs	r0, #0
 8008506:	e7f7      	b.n	80084f8 <__swsetup_r+0x9c>
 8008508:	200002e0 	.word	0x200002e0

0800850c <memset>:
 800850c:	4402      	add	r2, r0
 800850e:	4603      	mov	r3, r0
 8008510:	4293      	cmp	r3, r2
 8008512:	d100      	bne.n	8008516 <memset+0xa>
 8008514:	4770      	bx	lr
 8008516:	f803 1b01 	strb.w	r1, [r3], #1
 800851a:	e7f9      	b.n	8008510 <memset+0x4>

0800851c <_close_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4d06      	ldr	r5, [pc, #24]	; (8008538 <_close_r+0x1c>)
 8008520:	2300      	movs	r3, #0
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	602b      	str	r3, [r5, #0]
 8008528:	f7f9 fd77 	bl	800201a <_close>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_close_r+0x1a>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_close_r+0x1a>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	2000093c 	.word	0x2000093c

0800853c <_lseek_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4d07      	ldr	r5, [pc, #28]	; (800855c <_lseek_r+0x20>)
 8008540:	4604      	mov	r4, r0
 8008542:	4608      	mov	r0, r1
 8008544:	4611      	mov	r1, r2
 8008546:	2200      	movs	r2, #0
 8008548:	602a      	str	r2, [r5, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	f7f9 fd8c 	bl	8002068 <_lseek>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_lseek_r+0x1e>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b103      	cbz	r3, 800855a <_lseek_r+0x1e>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	2000093c 	.word	0x2000093c

08008560 <_read_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d07      	ldr	r5, [pc, #28]	; (8008580 <_read_r+0x20>)
 8008564:	4604      	mov	r4, r0
 8008566:	4608      	mov	r0, r1
 8008568:	4611      	mov	r1, r2
 800856a:	2200      	movs	r2, #0
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f7f9 fd36 	bl	8001fe0 <_read>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_read_r+0x1e>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_read_r+0x1e>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	2000093c 	.word	0x2000093c

08008584 <_write_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	; (80085a4 <_write_r+0x20>)
 8008588:	4604      	mov	r4, r0
 800858a:	4608      	mov	r0, r1
 800858c:	4611      	mov	r1, r2
 800858e:	2200      	movs	r2, #0
 8008590:	602a      	str	r2, [r5, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	f7f8 f920 	bl	80007d8 <_write>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d102      	bne.n	80085a2 <_write_r+0x1e>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	b103      	cbz	r3, 80085a2 <_write_r+0x1e>
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	2000093c 	.word	0x2000093c

080085a8 <__errno>:
 80085a8:	4b01      	ldr	r3, [pc, #4]	; (80085b0 <__errno+0x8>)
 80085aa:	6818      	ldr	r0, [r3, #0]
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	200002e0 	.word	0x200002e0

080085b4 <__libc_init_array>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	4d0d      	ldr	r5, [pc, #52]	; (80085ec <__libc_init_array+0x38>)
 80085b8:	4c0d      	ldr	r4, [pc, #52]	; (80085f0 <__libc_init_array+0x3c>)
 80085ba:	1b64      	subs	r4, r4, r5
 80085bc:	10a4      	asrs	r4, r4, #2
 80085be:	2600      	movs	r6, #0
 80085c0:	42a6      	cmp	r6, r4
 80085c2:	d109      	bne.n	80085d8 <__libc_init_array+0x24>
 80085c4:	4d0b      	ldr	r5, [pc, #44]	; (80085f4 <__libc_init_array+0x40>)
 80085c6:	4c0c      	ldr	r4, [pc, #48]	; (80085f8 <__libc_init_array+0x44>)
 80085c8:	f000 fee2 	bl	8009390 <_init>
 80085cc:	1b64      	subs	r4, r4, r5
 80085ce:	10a4      	asrs	r4, r4, #2
 80085d0:	2600      	movs	r6, #0
 80085d2:	42a6      	cmp	r6, r4
 80085d4:	d105      	bne.n	80085e2 <__libc_init_array+0x2e>
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085dc:	4798      	blx	r3
 80085de:	3601      	adds	r6, #1
 80085e0:	e7ee      	b.n	80085c0 <__libc_init_array+0xc>
 80085e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e6:	4798      	blx	r3
 80085e8:	3601      	adds	r6, #1
 80085ea:	e7f2      	b.n	80085d2 <__libc_init_array+0x1e>
 80085ec:	08009568 	.word	0x08009568
 80085f0:	08009568 	.word	0x08009568
 80085f4:	08009568 	.word	0x08009568
 80085f8:	0800956c 	.word	0x0800956c

080085fc <__retarget_lock_init_recursive>:
 80085fc:	4770      	bx	lr

080085fe <__retarget_lock_acquire_recursive>:
 80085fe:	4770      	bx	lr

08008600 <__retarget_lock_release_recursive>:
 8008600:	4770      	bx	lr
	...

08008604 <_free_r>:
 8008604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008606:	2900      	cmp	r1, #0
 8008608:	d044      	beq.n	8008694 <_free_r+0x90>
 800860a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860e:	9001      	str	r0, [sp, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f1a1 0404 	sub.w	r4, r1, #4
 8008616:	bfb8      	it	lt
 8008618:	18e4      	addlt	r4, r4, r3
 800861a:	f000 f8df 	bl	80087dc <__malloc_lock>
 800861e:	4a1e      	ldr	r2, [pc, #120]	; (8008698 <_free_r+0x94>)
 8008620:	9801      	ldr	r0, [sp, #4]
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	b933      	cbnz	r3, 8008634 <_free_r+0x30>
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	b003      	add	sp, #12
 800862c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008630:	f000 b8da 	b.w	80087e8 <__malloc_unlock>
 8008634:	42a3      	cmp	r3, r4
 8008636:	d908      	bls.n	800864a <_free_r+0x46>
 8008638:	6825      	ldr	r5, [r4, #0]
 800863a:	1961      	adds	r1, r4, r5
 800863c:	428b      	cmp	r3, r1
 800863e:	bf01      	itttt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	1949      	addeq	r1, r1, r5
 8008646:	6021      	streq	r1, [r4, #0]
 8008648:	e7ed      	b.n	8008626 <_free_r+0x22>
 800864a:	461a      	mov	r2, r3
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b10b      	cbz	r3, 8008654 <_free_r+0x50>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d9fa      	bls.n	800864a <_free_r+0x46>
 8008654:	6811      	ldr	r1, [r2, #0]
 8008656:	1855      	adds	r5, r2, r1
 8008658:	42a5      	cmp	r5, r4
 800865a:	d10b      	bne.n	8008674 <_free_r+0x70>
 800865c:	6824      	ldr	r4, [r4, #0]
 800865e:	4421      	add	r1, r4
 8008660:	1854      	adds	r4, r2, r1
 8008662:	42a3      	cmp	r3, r4
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	d1e0      	bne.n	800862a <_free_r+0x26>
 8008668:	681c      	ldr	r4, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	6053      	str	r3, [r2, #4]
 800866e:	440c      	add	r4, r1
 8008670:	6014      	str	r4, [r2, #0]
 8008672:	e7da      	b.n	800862a <_free_r+0x26>
 8008674:	d902      	bls.n	800867c <_free_r+0x78>
 8008676:	230c      	movs	r3, #12
 8008678:	6003      	str	r3, [r0, #0]
 800867a:	e7d6      	b.n	800862a <_free_r+0x26>
 800867c:	6825      	ldr	r5, [r4, #0]
 800867e:	1961      	adds	r1, r4, r5
 8008680:	428b      	cmp	r3, r1
 8008682:	bf04      	itt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	6063      	str	r3, [r4, #4]
 800868a:	bf04      	itt	eq
 800868c:	1949      	addeq	r1, r1, r5
 800868e:	6021      	streq	r1, [r4, #0]
 8008690:	6054      	str	r4, [r2, #4]
 8008692:	e7ca      	b.n	800862a <_free_r+0x26>
 8008694:	b003      	add	sp, #12
 8008696:	bd30      	pop	{r4, r5, pc}
 8008698:	20000944 	.word	0x20000944

0800869c <sbrk_aligned>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	4e0e      	ldr	r6, [pc, #56]	; (80086d8 <sbrk_aligned+0x3c>)
 80086a0:	460c      	mov	r4, r1
 80086a2:	6831      	ldr	r1, [r6, #0]
 80086a4:	4605      	mov	r5, r0
 80086a6:	b911      	cbnz	r1, 80086ae <sbrk_aligned+0x12>
 80086a8:	f000 fe1c 	bl	80092e4 <_sbrk_r>
 80086ac:	6030      	str	r0, [r6, #0]
 80086ae:	4621      	mov	r1, r4
 80086b0:	4628      	mov	r0, r5
 80086b2:	f000 fe17 	bl	80092e4 <_sbrk_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	d00a      	beq.n	80086d0 <sbrk_aligned+0x34>
 80086ba:	1cc4      	adds	r4, r0, #3
 80086bc:	f024 0403 	bic.w	r4, r4, #3
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d007      	beq.n	80086d4 <sbrk_aligned+0x38>
 80086c4:	1a21      	subs	r1, r4, r0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 fe0c 	bl	80092e4 <_sbrk_r>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d101      	bne.n	80086d4 <sbrk_aligned+0x38>
 80086d0:	f04f 34ff 	mov.w	r4, #4294967295
 80086d4:	4620      	mov	r0, r4
 80086d6:	bd70      	pop	{r4, r5, r6, pc}
 80086d8:	20000948 	.word	0x20000948

080086dc <_malloc_r>:
 80086dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e0:	1ccd      	adds	r5, r1, #3
 80086e2:	f025 0503 	bic.w	r5, r5, #3
 80086e6:	3508      	adds	r5, #8
 80086e8:	2d0c      	cmp	r5, #12
 80086ea:	bf38      	it	cc
 80086ec:	250c      	movcc	r5, #12
 80086ee:	2d00      	cmp	r5, #0
 80086f0:	4607      	mov	r7, r0
 80086f2:	db01      	blt.n	80086f8 <_malloc_r+0x1c>
 80086f4:	42a9      	cmp	r1, r5
 80086f6:	d905      	bls.n	8008704 <_malloc_r+0x28>
 80086f8:	230c      	movs	r3, #12
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	2600      	movs	r6, #0
 80086fe:	4630      	mov	r0, r6
 8008700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008704:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087d8 <_malloc_r+0xfc>
 8008708:	f000 f868 	bl	80087dc <__malloc_lock>
 800870c:	f8d8 3000 	ldr.w	r3, [r8]
 8008710:	461c      	mov	r4, r3
 8008712:	bb5c      	cbnz	r4, 800876c <_malloc_r+0x90>
 8008714:	4629      	mov	r1, r5
 8008716:	4638      	mov	r0, r7
 8008718:	f7ff ffc0 	bl	800869c <sbrk_aligned>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	4604      	mov	r4, r0
 8008720:	d155      	bne.n	80087ce <_malloc_r+0xf2>
 8008722:	f8d8 4000 	ldr.w	r4, [r8]
 8008726:	4626      	mov	r6, r4
 8008728:	2e00      	cmp	r6, #0
 800872a:	d145      	bne.n	80087b8 <_malloc_r+0xdc>
 800872c:	2c00      	cmp	r4, #0
 800872e:	d048      	beq.n	80087c2 <_malloc_r+0xe6>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	4631      	mov	r1, r6
 8008734:	4638      	mov	r0, r7
 8008736:	eb04 0903 	add.w	r9, r4, r3
 800873a:	f000 fdd3 	bl	80092e4 <_sbrk_r>
 800873e:	4581      	cmp	r9, r0
 8008740:	d13f      	bne.n	80087c2 <_malloc_r+0xe6>
 8008742:	6821      	ldr	r1, [r4, #0]
 8008744:	1a6d      	subs	r5, r5, r1
 8008746:	4629      	mov	r1, r5
 8008748:	4638      	mov	r0, r7
 800874a:	f7ff ffa7 	bl	800869c <sbrk_aligned>
 800874e:	3001      	adds	r0, #1
 8008750:	d037      	beq.n	80087c2 <_malloc_r+0xe6>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	442b      	add	r3, r5
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	f8d8 3000 	ldr.w	r3, [r8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d038      	beq.n	80087d2 <_malloc_r+0xf6>
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	42a2      	cmp	r2, r4
 8008764:	d12b      	bne.n	80087be <_malloc_r+0xe2>
 8008766:	2200      	movs	r2, #0
 8008768:	605a      	str	r2, [r3, #4]
 800876a:	e00f      	b.n	800878c <_malloc_r+0xb0>
 800876c:	6822      	ldr	r2, [r4, #0]
 800876e:	1b52      	subs	r2, r2, r5
 8008770:	d41f      	bmi.n	80087b2 <_malloc_r+0xd6>
 8008772:	2a0b      	cmp	r2, #11
 8008774:	d917      	bls.n	80087a6 <_malloc_r+0xca>
 8008776:	1961      	adds	r1, r4, r5
 8008778:	42a3      	cmp	r3, r4
 800877a:	6025      	str	r5, [r4, #0]
 800877c:	bf18      	it	ne
 800877e:	6059      	strne	r1, [r3, #4]
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	bf08      	it	eq
 8008784:	f8c8 1000 	streq.w	r1, [r8]
 8008788:	5162      	str	r2, [r4, r5]
 800878a:	604b      	str	r3, [r1, #4]
 800878c:	4638      	mov	r0, r7
 800878e:	f104 060b 	add.w	r6, r4, #11
 8008792:	f000 f829 	bl	80087e8 <__malloc_unlock>
 8008796:	f026 0607 	bic.w	r6, r6, #7
 800879a:	1d23      	adds	r3, r4, #4
 800879c:	1af2      	subs	r2, r6, r3
 800879e:	d0ae      	beq.n	80086fe <_malloc_r+0x22>
 80087a0:	1b9b      	subs	r3, r3, r6
 80087a2:	50a3      	str	r3, [r4, r2]
 80087a4:	e7ab      	b.n	80086fe <_malloc_r+0x22>
 80087a6:	42a3      	cmp	r3, r4
 80087a8:	6862      	ldr	r2, [r4, #4]
 80087aa:	d1dd      	bne.n	8008768 <_malloc_r+0x8c>
 80087ac:	f8c8 2000 	str.w	r2, [r8]
 80087b0:	e7ec      	b.n	800878c <_malloc_r+0xb0>
 80087b2:	4623      	mov	r3, r4
 80087b4:	6864      	ldr	r4, [r4, #4]
 80087b6:	e7ac      	b.n	8008712 <_malloc_r+0x36>
 80087b8:	4634      	mov	r4, r6
 80087ba:	6876      	ldr	r6, [r6, #4]
 80087bc:	e7b4      	b.n	8008728 <_malloc_r+0x4c>
 80087be:	4613      	mov	r3, r2
 80087c0:	e7cc      	b.n	800875c <_malloc_r+0x80>
 80087c2:	230c      	movs	r3, #12
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	4638      	mov	r0, r7
 80087c8:	f000 f80e 	bl	80087e8 <__malloc_unlock>
 80087cc:	e797      	b.n	80086fe <_malloc_r+0x22>
 80087ce:	6025      	str	r5, [r4, #0]
 80087d0:	e7dc      	b.n	800878c <_malloc_r+0xb0>
 80087d2:	605b      	str	r3, [r3, #4]
 80087d4:	deff      	udf	#255	; 0xff
 80087d6:	bf00      	nop
 80087d8:	20000944 	.word	0x20000944

080087dc <__malloc_lock>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__malloc_lock+0x8>)
 80087de:	f7ff bf0e 	b.w	80085fe <__retarget_lock_acquire_recursive>
 80087e2:	bf00      	nop
 80087e4:	20000940 	.word	0x20000940

080087e8 <__malloc_unlock>:
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__malloc_unlock+0x8>)
 80087ea:	f7ff bf09 	b.w	8008600 <__retarget_lock_release_recursive>
 80087ee:	bf00      	nop
 80087f0:	20000940 	.word	0x20000940

080087f4 <__ssputs_r>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	688e      	ldr	r6, [r1, #8]
 80087fa:	461f      	mov	r7, r3
 80087fc:	42be      	cmp	r6, r7
 80087fe:	680b      	ldr	r3, [r1, #0]
 8008800:	4682      	mov	sl, r0
 8008802:	460c      	mov	r4, r1
 8008804:	4690      	mov	r8, r2
 8008806:	d82c      	bhi.n	8008862 <__ssputs_r+0x6e>
 8008808:	898a      	ldrh	r2, [r1, #12]
 800880a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800880e:	d026      	beq.n	800885e <__ssputs_r+0x6a>
 8008810:	6965      	ldr	r5, [r4, #20]
 8008812:	6909      	ldr	r1, [r1, #16]
 8008814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008818:	eba3 0901 	sub.w	r9, r3, r1
 800881c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008820:	1c7b      	adds	r3, r7, #1
 8008822:	444b      	add	r3, r9
 8008824:	106d      	asrs	r5, r5, #1
 8008826:	429d      	cmp	r5, r3
 8008828:	bf38      	it	cc
 800882a:	461d      	movcc	r5, r3
 800882c:	0553      	lsls	r3, r2, #21
 800882e:	d527      	bpl.n	8008880 <__ssputs_r+0x8c>
 8008830:	4629      	mov	r1, r5
 8008832:	f7ff ff53 	bl	80086dc <_malloc_r>
 8008836:	4606      	mov	r6, r0
 8008838:	b360      	cbz	r0, 8008894 <__ssputs_r+0xa0>
 800883a:	6921      	ldr	r1, [r4, #16]
 800883c:	464a      	mov	r2, r9
 800883e:	f000 fd61 	bl	8009304 <memcpy>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884c:	81a3      	strh	r3, [r4, #12]
 800884e:	6126      	str	r6, [r4, #16]
 8008850:	6165      	str	r5, [r4, #20]
 8008852:	444e      	add	r6, r9
 8008854:	eba5 0509 	sub.w	r5, r5, r9
 8008858:	6026      	str	r6, [r4, #0]
 800885a:	60a5      	str	r5, [r4, #8]
 800885c:	463e      	mov	r6, r7
 800885e:	42be      	cmp	r6, r7
 8008860:	d900      	bls.n	8008864 <__ssputs_r+0x70>
 8008862:	463e      	mov	r6, r7
 8008864:	6820      	ldr	r0, [r4, #0]
 8008866:	4632      	mov	r2, r6
 8008868:	4641      	mov	r1, r8
 800886a:	f000 fcff 	bl	800926c <memmove>
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	1b9b      	subs	r3, r3, r6
 8008872:	60a3      	str	r3, [r4, #8]
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	4433      	add	r3, r6
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	2000      	movs	r0, #0
 800887c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008880:	462a      	mov	r2, r5
 8008882:	f000 fd4d 	bl	8009320 <_realloc_r>
 8008886:	4606      	mov	r6, r0
 8008888:	2800      	cmp	r0, #0
 800888a:	d1e0      	bne.n	800884e <__ssputs_r+0x5a>
 800888c:	6921      	ldr	r1, [r4, #16]
 800888e:	4650      	mov	r0, sl
 8008890:	f7ff feb8 	bl	8008604 <_free_r>
 8008894:	230c      	movs	r3, #12
 8008896:	f8ca 3000 	str.w	r3, [sl]
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	e7e9      	b.n	800887c <__ssputs_r+0x88>

080088a8 <_svfiprintf_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	4698      	mov	r8, r3
 80088ae:	898b      	ldrh	r3, [r1, #12]
 80088b0:	061b      	lsls	r3, r3, #24
 80088b2:	b09d      	sub	sp, #116	; 0x74
 80088b4:	4607      	mov	r7, r0
 80088b6:	460d      	mov	r5, r1
 80088b8:	4614      	mov	r4, r2
 80088ba:	d50e      	bpl.n	80088da <_svfiprintf_r+0x32>
 80088bc:	690b      	ldr	r3, [r1, #16]
 80088be:	b963      	cbnz	r3, 80088da <_svfiprintf_r+0x32>
 80088c0:	2140      	movs	r1, #64	; 0x40
 80088c2:	f7ff ff0b 	bl	80086dc <_malloc_r>
 80088c6:	6028      	str	r0, [r5, #0]
 80088c8:	6128      	str	r0, [r5, #16]
 80088ca:	b920      	cbnz	r0, 80088d6 <_svfiprintf_r+0x2e>
 80088cc:	230c      	movs	r3, #12
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	e0d0      	b.n	8008a78 <_svfiprintf_r+0x1d0>
 80088d6:	2340      	movs	r3, #64	; 0x40
 80088d8:	616b      	str	r3, [r5, #20]
 80088da:	2300      	movs	r3, #0
 80088dc:	9309      	str	r3, [sp, #36]	; 0x24
 80088de:	2320      	movs	r3, #32
 80088e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088e8:	2330      	movs	r3, #48	; 0x30
 80088ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a90 <_svfiprintf_r+0x1e8>
 80088ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088f2:	f04f 0901 	mov.w	r9, #1
 80088f6:	4623      	mov	r3, r4
 80088f8:	469a      	mov	sl, r3
 80088fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088fe:	b10a      	cbz	r2, 8008904 <_svfiprintf_r+0x5c>
 8008900:	2a25      	cmp	r2, #37	; 0x25
 8008902:	d1f9      	bne.n	80088f8 <_svfiprintf_r+0x50>
 8008904:	ebba 0b04 	subs.w	fp, sl, r4
 8008908:	d00b      	beq.n	8008922 <_svfiprintf_r+0x7a>
 800890a:	465b      	mov	r3, fp
 800890c:	4622      	mov	r2, r4
 800890e:	4629      	mov	r1, r5
 8008910:	4638      	mov	r0, r7
 8008912:	f7ff ff6f 	bl	80087f4 <__ssputs_r>
 8008916:	3001      	adds	r0, #1
 8008918:	f000 80a9 	beq.w	8008a6e <_svfiprintf_r+0x1c6>
 800891c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800891e:	445a      	add	r2, fp
 8008920:	9209      	str	r2, [sp, #36]	; 0x24
 8008922:	f89a 3000 	ldrb.w	r3, [sl]
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 80a1 	beq.w	8008a6e <_svfiprintf_r+0x1c6>
 800892c:	2300      	movs	r3, #0
 800892e:	f04f 32ff 	mov.w	r2, #4294967295
 8008932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008936:	f10a 0a01 	add.w	sl, sl, #1
 800893a:	9304      	str	r3, [sp, #16]
 800893c:	9307      	str	r3, [sp, #28]
 800893e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008942:	931a      	str	r3, [sp, #104]	; 0x68
 8008944:	4654      	mov	r4, sl
 8008946:	2205      	movs	r2, #5
 8008948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894c:	4850      	ldr	r0, [pc, #320]	; (8008a90 <_svfiprintf_r+0x1e8>)
 800894e:	f7f7 fc57 	bl	8000200 <memchr>
 8008952:	9a04      	ldr	r2, [sp, #16]
 8008954:	b9d8      	cbnz	r0, 800898e <_svfiprintf_r+0xe6>
 8008956:	06d0      	lsls	r0, r2, #27
 8008958:	bf44      	itt	mi
 800895a:	2320      	movmi	r3, #32
 800895c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008960:	0711      	lsls	r1, r2, #28
 8008962:	bf44      	itt	mi
 8008964:	232b      	movmi	r3, #43	; 0x2b
 8008966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800896a:	f89a 3000 	ldrb.w	r3, [sl]
 800896e:	2b2a      	cmp	r3, #42	; 0x2a
 8008970:	d015      	beq.n	800899e <_svfiprintf_r+0xf6>
 8008972:	9a07      	ldr	r2, [sp, #28]
 8008974:	4654      	mov	r4, sl
 8008976:	2000      	movs	r0, #0
 8008978:	f04f 0c0a 	mov.w	ip, #10
 800897c:	4621      	mov	r1, r4
 800897e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008982:	3b30      	subs	r3, #48	; 0x30
 8008984:	2b09      	cmp	r3, #9
 8008986:	d94d      	bls.n	8008a24 <_svfiprintf_r+0x17c>
 8008988:	b1b0      	cbz	r0, 80089b8 <_svfiprintf_r+0x110>
 800898a:	9207      	str	r2, [sp, #28]
 800898c:	e014      	b.n	80089b8 <_svfiprintf_r+0x110>
 800898e:	eba0 0308 	sub.w	r3, r0, r8
 8008992:	fa09 f303 	lsl.w	r3, r9, r3
 8008996:	4313      	orrs	r3, r2
 8008998:	9304      	str	r3, [sp, #16]
 800899a:	46a2      	mov	sl, r4
 800899c:	e7d2      	b.n	8008944 <_svfiprintf_r+0x9c>
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	1d19      	adds	r1, r3, #4
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	9103      	str	r1, [sp, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	bfbb      	ittet	lt
 80089aa:	425b      	neglt	r3, r3
 80089ac:	f042 0202 	orrlt.w	r2, r2, #2
 80089b0:	9307      	strge	r3, [sp, #28]
 80089b2:	9307      	strlt	r3, [sp, #28]
 80089b4:	bfb8      	it	lt
 80089b6:	9204      	strlt	r2, [sp, #16]
 80089b8:	7823      	ldrb	r3, [r4, #0]
 80089ba:	2b2e      	cmp	r3, #46	; 0x2e
 80089bc:	d10c      	bne.n	80089d8 <_svfiprintf_r+0x130>
 80089be:	7863      	ldrb	r3, [r4, #1]
 80089c0:	2b2a      	cmp	r3, #42	; 0x2a
 80089c2:	d134      	bne.n	8008a2e <_svfiprintf_r+0x186>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	1d1a      	adds	r2, r3, #4
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	9203      	str	r2, [sp, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	bfb8      	it	lt
 80089d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80089d4:	3402      	adds	r4, #2
 80089d6:	9305      	str	r3, [sp, #20]
 80089d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008aa0 <_svfiprintf_r+0x1f8>
 80089dc:	7821      	ldrb	r1, [r4, #0]
 80089de:	2203      	movs	r2, #3
 80089e0:	4650      	mov	r0, sl
 80089e2:	f7f7 fc0d 	bl	8000200 <memchr>
 80089e6:	b138      	cbz	r0, 80089f8 <_svfiprintf_r+0x150>
 80089e8:	9b04      	ldr	r3, [sp, #16]
 80089ea:	eba0 000a 	sub.w	r0, r0, sl
 80089ee:	2240      	movs	r2, #64	; 0x40
 80089f0:	4082      	lsls	r2, r0
 80089f2:	4313      	orrs	r3, r2
 80089f4:	3401      	adds	r4, #1
 80089f6:	9304      	str	r3, [sp, #16]
 80089f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089fc:	4825      	ldr	r0, [pc, #148]	; (8008a94 <_svfiprintf_r+0x1ec>)
 80089fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a02:	2206      	movs	r2, #6
 8008a04:	f7f7 fbfc 	bl	8000200 <memchr>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d038      	beq.n	8008a7e <_svfiprintf_r+0x1d6>
 8008a0c:	4b22      	ldr	r3, [pc, #136]	; (8008a98 <_svfiprintf_r+0x1f0>)
 8008a0e:	bb1b      	cbnz	r3, 8008a58 <_svfiprintf_r+0x1b0>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	3307      	adds	r3, #7
 8008a14:	f023 0307 	bic.w	r3, r3, #7
 8008a18:	3308      	adds	r3, #8
 8008a1a:	9303      	str	r3, [sp, #12]
 8008a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1e:	4433      	add	r3, r6
 8008a20:	9309      	str	r3, [sp, #36]	; 0x24
 8008a22:	e768      	b.n	80088f6 <_svfiprintf_r+0x4e>
 8008a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a28:	460c      	mov	r4, r1
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	e7a6      	b.n	800897c <_svfiprintf_r+0xd4>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	3401      	adds	r4, #1
 8008a32:	9305      	str	r3, [sp, #20]
 8008a34:	4619      	mov	r1, r3
 8008a36:	f04f 0c0a 	mov.w	ip, #10
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a40:	3a30      	subs	r2, #48	; 0x30
 8008a42:	2a09      	cmp	r2, #9
 8008a44:	d903      	bls.n	8008a4e <_svfiprintf_r+0x1a6>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0c6      	beq.n	80089d8 <_svfiprintf_r+0x130>
 8008a4a:	9105      	str	r1, [sp, #20]
 8008a4c:	e7c4      	b.n	80089d8 <_svfiprintf_r+0x130>
 8008a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a52:	4604      	mov	r4, r0
 8008a54:	2301      	movs	r3, #1
 8008a56:	e7f0      	b.n	8008a3a <_svfiprintf_r+0x192>
 8008a58:	ab03      	add	r3, sp, #12
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	462a      	mov	r2, r5
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <_svfiprintf_r+0x1f4>)
 8008a60:	a904      	add	r1, sp, #16
 8008a62:	4638      	mov	r0, r7
 8008a64:	f3af 8000 	nop.w
 8008a68:	1c42      	adds	r2, r0, #1
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	d1d6      	bne.n	8008a1c <_svfiprintf_r+0x174>
 8008a6e:	89ab      	ldrh	r3, [r5, #12]
 8008a70:	065b      	lsls	r3, r3, #25
 8008a72:	f53f af2d 	bmi.w	80088d0 <_svfiprintf_r+0x28>
 8008a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a78:	b01d      	add	sp, #116	; 0x74
 8008a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7e:	ab03      	add	r3, sp, #12
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	462a      	mov	r2, r5
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <_svfiprintf_r+0x1f4>)
 8008a86:	a904      	add	r1, sp, #16
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f000 f9bd 	bl	8008e08 <_printf_i>
 8008a8e:	e7eb      	b.n	8008a68 <_svfiprintf_r+0x1c0>
 8008a90:	0800952c 	.word	0x0800952c
 8008a94:	08009536 	.word	0x08009536
 8008a98:	00000000 	.word	0x00000000
 8008a9c:	080087f5 	.word	0x080087f5
 8008aa0:	08009532 	.word	0x08009532

08008aa4 <__sfputc_r>:
 8008aa4:	6893      	ldr	r3, [r2, #8]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	b410      	push	{r4}
 8008aac:	6093      	str	r3, [r2, #8]
 8008aae:	da08      	bge.n	8008ac2 <__sfputc_r+0x1e>
 8008ab0:	6994      	ldr	r4, [r2, #24]
 8008ab2:	42a3      	cmp	r3, r4
 8008ab4:	db01      	blt.n	8008aba <__sfputc_r+0x16>
 8008ab6:	290a      	cmp	r1, #10
 8008ab8:	d103      	bne.n	8008ac2 <__sfputc_r+0x1e>
 8008aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008abe:	f7ff bc90 	b.w	80083e2 <__swbuf_r>
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	1c58      	adds	r0, r3, #1
 8008ac6:	6010      	str	r0, [r2, #0]
 8008ac8:	7019      	strb	r1, [r3, #0]
 8008aca:	4608      	mov	r0, r1
 8008acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <__sfputs_r>:
 8008ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	460f      	mov	r7, r1
 8008ad8:	4614      	mov	r4, r2
 8008ada:	18d5      	adds	r5, r2, r3
 8008adc:	42ac      	cmp	r4, r5
 8008ade:	d101      	bne.n	8008ae4 <__sfputs_r+0x12>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	e007      	b.n	8008af4 <__sfputs_r+0x22>
 8008ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae8:	463a      	mov	r2, r7
 8008aea:	4630      	mov	r0, r6
 8008aec:	f7ff ffda 	bl	8008aa4 <__sfputc_r>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d1f3      	bne.n	8008adc <__sfputs_r+0xa>
 8008af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008af8 <_vfiprintf_r>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	460d      	mov	r5, r1
 8008afe:	b09d      	sub	sp, #116	; 0x74
 8008b00:	4614      	mov	r4, r2
 8008b02:	4698      	mov	r8, r3
 8008b04:	4606      	mov	r6, r0
 8008b06:	b118      	cbz	r0, 8008b10 <_vfiprintf_r+0x18>
 8008b08:	6a03      	ldr	r3, [r0, #32]
 8008b0a:	b90b      	cbnz	r3, 8008b10 <_vfiprintf_r+0x18>
 8008b0c:	f7ff fb2e 	bl	800816c <__sinit>
 8008b10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b12:	07d9      	lsls	r1, r3, #31
 8008b14:	d405      	bmi.n	8008b22 <_vfiprintf_r+0x2a>
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	059a      	lsls	r2, r3, #22
 8008b1a:	d402      	bmi.n	8008b22 <_vfiprintf_r+0x2a>
 8008b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1e:	f7ff fd6e 	bl	80085fe <__retarget_lock_acquire_recursive>
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	071b      	lsls	r3, r3, #28
 8008b26:	d501      	bpl.n	8008b2c <_vfiprintf_r+0x34>
 8008b28:	692b      	ldr	r3, [r5, #16]
 8008b2a:	b99b      	cbnz	r3, 8008b54 <_vfiprintf_r+0x5c>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f7ff fc94 	bl	800845c <__swsetup_r>
 8008b34:	b170      	cbz	r0, 8008b54 <_vfiprintf_r+0x5c>
 8008b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b38:	07dc      	lsls	r4, r3, #31
 8008b3a:	d504      	bpl.n	8008b46 <_vfiprintf_r+0x4e>
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b40:	b01d      	add	sp, #116	; 0x74
 8008b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b46:	89ab      	ldrh	r3, [r5, #12]
 8008b48:	0598      	lsls	r0, r3, #22
 8008b4a:	d4f7      	bmi.n	8008b3c <_vfiprintf_r+0x44>
 8008b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b4e:	f7ff fd57 	bl	8008600 <__retarget_lock_release_recursive>
 8008b52:	e7f3      	b.n	8008b3c <_vfiprintf_r+0x44>
 8008b54:	2300      	movs	r3, #0
 8008b56:	9309      	str	r3, [sp, #36]	; 0x24
 8008b58:	2320      	movs	r3, #32
 8008b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b62:	2330      	movs	r3, #48	; 0x30
 8008b64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008d18 <_vfiprintf_r+0x220>
 8008b68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b6c:	f04f 0901 	mov.w	r9, #1
 8008b70:	4623      	mov	r3, r4
 8008b72:	469a      	mov	sl, r3
 8008b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b78:	b10a      	cbz	r2, 8008b7e <_vfiprintf_r+0x86>
 8008b7a:	2a25      	cmp	r2, #37	; 0x25
 8008b7c:	d1f9      	bne.n	8008b72 <_vfiprintf_r+0x7a>
 8008b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b82:	d00b      	beq.n	8008b9c <_vfiprintf_r+0xa4>
 8008b84:	465b      	mov	r3, fp
 8008b86:	4622      	mov	r2, r4
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f7ff ffa1 	bl	8008ad2 <__sfputs_r>
 8008b90:	3001      	adds	r0, #1
 8008b92:	f000 80a9 	beq.w	8008ce8 <_vfiprintf_r+0x1f0>
 8008b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b98:	445a      	add	r2, fp
 8008b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80a1 	beq.w	8008ce8 <_vfiprintf_r+0x1f0>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bb0:	f10a 0a01 	add.w	sl, sl, #1
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	9307      	str	r3, [sp, #28]
 8008bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8008bbe:	4654      	mov	r4, sl
 8008bc0:	2205      	movs	r2, #5
 8008bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc6:	4854      	ldr	r0, [pc, #336]	; (8008d18 <_vfiprintf_r+0x220>)
 8008bc8:	f7f7 fb1a 	bl	8000200 <memchr>
 8008bcc:	9a04      	ldr	r2, [sp, #16]
 8008bce:	b9d8      	cbnz	r0, 8008c08 <_vfiprintf_r+0x110>
 8008bd0:	06d1      	lsls	r1, r2, #27
 8008bd2:	bf44      	itt	mi
 8008bd4:	2320      	movmi	r3, #32
 8008bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bda:	0713      	lsls	r3, r2, #28
 8008bdc:	bf44      	itt	mi
 8008bde:	232b      	movmi	r3, #43	; 0x2b
 8008be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008be4:	f89a 3000 	ldrb.w	r3, [sl]
 8008be8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bea:	d015      	beq.n	8008c18 <_vfiprintf_r+0x120>
 8008bec:	9a07      	ldr	r2, [sp, #28]
 8008bee:	4654      	mov	r4, sl
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	f04f 0c0a 	mov.w	ip, #10
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bfc:	3b30      	subs	r3, #48	; 0x30
 8008bfe:	2b09      	cmp	r3, #9
 8008c00:	d94d      	bls.n	8008c9e <_vfiprintf_r+0x1a6>
 8008c02:	b1b0      	cbz	r0, 8008c32 <_vfiprintf_r+0x13a>
 8008c04:	9207      	str	r2, [sp, #28]
 8008c06:	e014      	b.n	8008c32 <_vfiprintf_r+0x13a>
 8008c08:	eba0 0308 	sub.w	r3, r0, r8
 8008c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c10:	4313      	orrs	r3, r2
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	46a2      	mov	sl, r4
 8008c16:	e7d2      	b.n	8008bbe <_vfiprintf_r+0xc6>
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	1d19      	adds	r1, r3, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	9103      	str	r1, [sp, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bfbb      	ittet	lt
 8008c24:	425b      	neglt	r3, r3
 8008c26:	f042 0202 	orrlt.w	r2, r2, #2
 8008c2a:	9307      	strge	r3, [sp, #28]
 8008c2c:	9307      	strlt	r3, [sp, #28]
 8008c2e:	bfb8      	it	lt
 8008c30:	9204      	strlt	r2, [sp, #16]
 8008c32:	7823      	ldrb	r3, [r4, #0]
 8008c34:	2b2e      	cmp	r3, #46	; 0x2e
 8008c36:	d10c      	bne.n	8008c52 <_vfiprintf_r+0x15a>
 8008c38:	7863      	ldrb	r3, [r4, #1]
 8008c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c3c:	d134      	bne.n	8008ca8 <_vfiprintf_r+0x1b0>
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	1d1a      	adds	r2, r3, #4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	9203      	str	r2, [sp, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bfb8      	it	lt
 8008c4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c4e:	3402      	adds	r4, #2
 8008c50:	9305      	str	r3, [sp, #20]
 8008c52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008d28 <_vfiprintf_r+0x230>
 8008c56:	7821      	ldrb	r1, [r4, #0]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	4650      	mov	r0, sl
 8008c5c:	f7f7 fad0 	bl	8000200 <memchr>
 8008c60:	b138      	cbz	r0, 8008c72 <_vfiprintf_r+0x17a>
 8008c62:	9b04      	ldr	r3, [sp, #16]
 8008c64:	eba0 000a 	sub.w	r0, r0, sl
 8008c68:	2240      	movs	r2, #64	; 0x40
 8008c6a:	4082      	lsls	r2, r0
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	3401      	adds	r4, #1
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c76:	4829      	ldr	r0, [pc, #164]	; (8008d1c <_vfiprintf_r+0x224>)
 8008c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c7c:	2206      	movs	r2, #6
 8008c7e:	f7f7 fabf 	bl	8000200 <memchr>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d03f      	beq.n	8008d06 <_vfiprintf_r+0x20e>
 8008c86:	4b26      	ldr	r3, [pc, #152]	; (8008d20 <_vfiprintf_r+0x228>)
 8008c88:	bb1b      	cbnz	r3, 8008cd2 <_vfiprintf_r+0x1da>
 8008c8a:	9b03      	ldr	r3, [sp, #12]
 8008c8c:	3307      	adds	r3, #7
 8008c8e:	f023 0307 	bic.w	r3, r3, #7
 8008c92:	3308      	adds	r3, #8
 8008c94:	9303      	str	r3, [sp, #12]
 8008c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c98:	443b      	add	r3, r7
 8008c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c9c:	e768      	b.n	8008b70 <_vfiprintf_r+0x78>
 8008c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	e7a6      	b.n	8008bf6 <_vfiprintf_r+0xfe>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	3401      	adds	r4, #1
 8008cac:	9305      	str	r3, [sp, #20]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	f04f 0c0a 	mov.w	ip, #10
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cba:	3a30      	subs	r2, #48	; 0x30
 8008cbc:	2a09      	cmp	r2, #9
 8008cbe:	d903      	bls.n	8008cc8 <_vfiprintf_r+0x1d0>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0c6      	beq.n	8008c52 <_vfiprintf_r+0x15a>
 8008cc4:	9105      	str	r1, [sp, #20]
 8008cc6:	e7c4      	b.n	8008c52 <_vfiprintf_r+0x15a>
 8008cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ccc:	4604      	mov	r4, r0
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e7f0      	b.n	8008cb4 <_vfiprintf_r+0x1bc>
 8008cd2:	ab03      	add	r3, sp, #12
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <_vfiprintf_r+0x22c>)
 8008cda:	a904      	add	r1, sp, #16
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f3af 8000 	nop.w
 8008ce2:	4607      	mov	r7, r0
 8008ce4:	1c78      	adds	r0, r7, #1
 8008ce6:	d1d6      	bne.n	8008c96 <_vfiprintf_r+0x19e>
 8008ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cea:	07d9      	lsls	r1, r3, #31
 8008cec:	d405      	bmi.n	8008cfa <_vfiprintf_r+0x202>
 8008cee:	89ab      	ldrh	r3, [r5, #12]
 8008cf0:	059a      	lsls	r2, r3, #22
 8008cf2:	d402      	bmi.n	8008cfa <_vfiprintf_r+0x202>
 8008cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cf6:	f7ff fc83 	bl	8008600 <__retarget_lock_release_recursive>
 8008cfa:	89ab      	ldrh	r3, [r5, #12]
 8008cfc:	065b      	lsls	r3, r3, #25
 8008cfe:	f53f af1d 	bmi.w	8008b3c <_vfiprintf_r+0x44>
 8008d02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d04:	e71c      	b.n	8008b40 <_vfiprintf_r+0x48>
 8008d06:	ab03      	add	r3, sp, #12
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	462a      	mov	r2, r5
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <_vfiprintf_r+0x22c>)
 8008d0e:	a904      	add	r1, sp, #16
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 f879 	bl	8008e08 <_printf_i>
 8008d16:	e7e4      	b.n	8008ce2 <_vfiprintf_r+0x1ea>
 8008d18:	0800952c 	.word	0x0800952c
 8008d1c:	08009536 	.word	0x08009536
 8008d20:	00000000 	.word	0x00000000
 8008d24:	08008ad3 	.word	0x08008ad3
 8008d28:	08009532 	.word	0x08009532

08008d2c <_printf_common>:
 8008d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d30:	4616      	mov	r6, r2
 8008d32:	4699      	mov	r9, r3
 8008d34:	688a      	ldr	r2, [r1, #8]
 8008d36:	690b      	ldr	r3, [r1, #16]
 8008d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	bfb8      	it	lt
 8008d40:	4613      	movlt	r3, r2
 8008d42:	6033      	str	r3, [r6, #0]
 8008d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d48:	4607      	mov	r7, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	b10a      	cbz	r2, 8008d52 <_printf_common+0x26>
 8008d4e:	3301      	adds	r3, #1
 8008d50:	6033      	str	r3, [r6, #0]
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	0699      	lsls	r1, r3, #26
 8008d56:	bf42      	ittt	mi
 8008d58:	6833      	ldrmi	r3, [r6, #0]
 8008d5a:	3302      	addmi	r3, #2
 8008d5c:	6033      	strmi	r3, [r6, #0]
 8008d5e:	6825      	ldr	r5, [r4, #0]
 8008d60:	f015 0506 	ands.w	r5, r5, #6
 8008d64:	d106      	bne.n	8008d74 <_printf_common+0x48>
 8008d66:	f104 0a19 	add.w	sl, r4, #25
 8008d6a:	68e3      	ldr	r3, [r4, #12]
 8008d6c:	6832      	ldr	r2, [r6, #0]
 8008d6e:	1a9b      	subs	r3, r3, r2
 8008d70:	42ab      	cmp	r3, r5
 8008d72:	dc26      	bgt.n	8008dc2 <_printf_common+0x96>
 8008d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d78:	1e13      	subs	r3, r2, #0
 8008d7a:	6822      	ldr	r2, [r4, #0]
 8008d7c:	bf18      	it	ne
 8008d7e:	2301      	movne	r3, #1
 8008d80:	0692      	lsls	r2, r2, #26
 8008d82:	d42b      	bmi.n	8008ddc <_printf_common+0xb0>
 8008d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d88:	4649      	mov	r1, r9
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	47c0      	blx	r8
 8008d8e:	3001      	adds	r0, #1
 8008d90:	d01e      	beq.n	8008dd0 <_printf_common+0xa4>
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	6922      	ldr	r2, [r4, #16]
 8008d96:	f003 0306 	and.w	r3, r3, #6
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	bf02      	ittt	eq
 8008d9e:	68e5      	ldreq	r5, [r4, #12]
 8008da0:	6833      	ldreq	r3, [r6, #0]
 8008da2:	1aed      	subeq	r5, r5, r3
 8008da4:	68a3      	ldr	r3, [r4, #8]
 8008da6:	bf0c      	ite	eq
 8008da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dac:	2500      	movne	r5, #0
 8008dae:	4293      	cmp	r3, r2
 8008db0:	bfc4      	itt	gt
 8008db2:	1a9b      	subgt	r3, r3, r2
 8008db4:	18ed      	addgt	r5, r5, r3
 8008db6:	2600      	movs	r6, #0
 8008db8:	341a      	adds	r4, #26
 8008dba:	42b5      	cmp	r5, r6
 8008dbc:	d11a      	bne.n	8008df4 <_printf_common+0xc8>
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	e008      	b.n	8008dd4 <_printf_common+0xa8>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	4652      	mov	r2, sl
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	4638      	mov	r0, r7
 8008dca:	47c0      	blx	r8
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d103      	bne.n	8008dd8 <_printf_common+0xac>
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd8:	3501      	adds	r5, #1
 8008dda:	e7c6      	b.n	8008d6a <_printf_common+0x3e>
 8008ddc:	18e1      	adds	r1, r4, r3
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	2030      	movs	r0, #48	; 0x30
 8008de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008de6:	4422      	add	r2, r4
 8008de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008df0:	3302      	adds	r3, #2
 8008df2:	e7c7      	b.n	8008d84 <_printf_common+0x58>
 8008df4:	2301      	movs	r3, #1
 8008df6:	4622      	mov	r2, r4
 8008df8:	4649      	mov	r1, r9
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	47c0      	blx	r8
 8008dfe:	3001      	adds	r0, #1
 8008e00:	d0e6      	beq.n	8008dd0 <_printf_common+0xa4>
 8008e02:	3601      	adds	r6, #1
 8008e04:	e7d9      	b.n	8008dba <_printf_common+0x8e>
	...

08008e08 <_printf_i>:
 8008e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e0c:	7e0f      	ldrb	r7, [r1, #24]
 8008e0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e10:	2f78      	cmp	r7, #120	; 0x78
 8008e12:	4691      	mov	r9, r2
 8008e14:	4680      	mov	r8, r0
 8008e16:	460c      	mov	r4, r1
 8008e18:	469a      	mov	sl, r3
 8008e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e1e:	d807      	bhi.n	8008e30 <_printf_i+0x28>
 8008e20:	2f62      	cmp	r7, #98	; 0x62
 8008e22:	d80a      	bhi.n	8008e3a <_printf_i+0x32>
 8008e24:	2f00      	cmp	r7, #0
 8008e26:	f000 80d4 	beq.w	8008fd2 <_printf_i+0x1ca>
 8008e2a:	2f58      	cmp	r7, #88	; 0x58
 8008e2c:	f000 80c0 	beq.w	8008fb0 <_printf_i+0x1a8>
 8008e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e38:	e03a      	b.n	8008eb0 <_printf_i+0xa8>
 8008e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e3e:	2b15      	cmp	r3, #21
 8008e40:	d8f6      	bhi.n	8008e30 <_printf_i+0x28>
 8008e42:	a101      	add	r1, pc, #4	; (adr r1, 8008e48 <_printf_i+0x40>)
 8008e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e48:	08008ea1 	.word	0x08008ea1
 8008e4c:	08008eb5 	.word	0x08008eb5
 8008e50:	08008e31 	.word	0x08008e31
 8008e54:	08008e31 	.word	0x08008e31
 8008e58:	08008e31 	.word	0x08008e31
 8008e5c:	08008e31 	.word	0x08008e31
 8008e60:	08008eb5 	.word	0x08008eb5
 8008e64:	08008e31 	.word	0x08008e31
 8008e68:	08008e31 	.word	0x08008e31
 8008e6c:	08008e31 	.word	0x08008e31
 8008e70:	08008e31 	.word	0x08008e31
 8008e74:	08008fb9 	.word	0x08008fb9
 8008e78:	08008ee1 	.word	0x08008ee1
 8008e7c:	08008f73 	.word	0x08008f73
 8008e80:	08008e31 	.word	0x08008e31
 8008e84:	08008e31 	.word	0x08008e31
 8008e88:	08008fdb 	.word	0x08008fdb
 8008e8c:	08008e31 	.word	0x08008e31
 8008e90:	08008ee1 	.word	0x08008ee1
 8008e94:	08008e31 	.word	0x08008e31
 8008e98:	08008e31 	.word	0x08008e31
 8008e9c:	08008f7b 	.word	0x08008f7b
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	1d1a      	adds	r2, r3, #4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	602a      	str	r2, [r5, #0]
 8008ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e09f      	b.n	8008ff4 <_printf_i+0x1ec>
 8008eb4:	6820      	ldr	r0, [r4, #0]
 8008eb6:	682b      	ldr	r3, [r5, #0]
 8008eb8:	0607      	lsls	r7, r0, #24
 8008eba:	f103 0104 	add.w	r1, r3, #4
 8008ebe:	6029      	str	r1, [r5, #0]
 8008ec0:	d501      	bpl.n	8008ec6 <_printf_i+0xbe>
 8008ec2:	681e      	ldr	r6, [r3, #0]
 8008ec4:	e003      	b.n	8008ece <_printf_i+0xc6>
 8008ec6:	0646      	lsls	r6, r0, #25
 8008ec8:	d5fb      	bpl.n	8008ec2 <_printf_i+0xba>
 8008eca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008ece:	2e00      	cmp	r6, #0
 8008ed0:	da03      	bge.n	8008eda <_printf_i+0xd2>
 8008ed2:	232d      	movs	r3, #45	; 0x2d
 8008ed4:	4276      	negs	r6, r6
 8008ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eda:	485a      	ldr	r0, [pc, #360]	; (8009044 <_printf_i+0x23c>)
 8008edc:	230a      	movs	r3, #10
 8008ede:	e012      	b.n	8008f06 <_printf_i+0xfe>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	6820      	ldr	r0, [r4, #0]
 8008ee4:	1d19      	adds	r1, r3, #4
 8008ee6:	6029      	str	r1, [r5, #0]
 8008ee8:	0605      	lsls	r5, r0, #24
 8008eea:	d501      	bpl.n	8008ef0 <_printf_i+0xe8>
 8008eec:	681e      	ldr	r6, [r3, #0]
 8008eee:	e002      	b.n	8008ef6 <_printf_i+0xee>
 8008ef0:	0641      	lsls	r1, r0, #25
 8008ef2:	d5fb      	bpl.n	8008eec <_printf_i+0xe4>
 8008ef4:	881e      	ldrh	r6, [r3, #0]
 8008ef6:	4853      	ldr	r0, [pc, #332]	; (8009044 <_printf_i+0x23c>)
 8008ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8008efa:	bf0c      	ite	eq
 8008efc:	2308      	moveq	r3, #8
 8008efe:	230a      	movne	r3, #10
 8008f00:	2100      	movs	r1, #0
 8008f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f06:	6865      	ldr	r5, [r4, #4]
 8008f08:	60a5      	str	r5, [r4, #8]
 8008f0a:	2d00      	cmp	r5, #0
 8008f0c:	bfa2      	ittt	ge
 8008f0e:	6821      	ldrge	r1, [r4, #0]
 8008f10:	f021 0104 	bicge.w	r1, r1, #4
 8008f14:	6021      	strge	r1, [r4, #0]
 8008f16:	b90e      	cbnz	r6, 8008f1c <_printf_i+0x114>
 8008f18:	2d00      	cmp	r5, #0
 8008f1a:	d04b      	beq.n	8008fb4 <_printf_i+0x1ac>
 8008f1c:	4615      	mov	r5, r2
 8008f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f22:	fb03 6711 	mls	r7, r3, r1, r6
 8008f26:	5dc7      	ldrb	r7, [r0, r7]
 8008f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f2c:	4637      	mov	r7, r6
 8008f2e:	42bb      	cmp	r3, r7
 8008f30:	460e      	mov	r6, r1
 8008f32:	d9f4      	bls.n	8008f1e <_printf_i+0x116>
 8008f34:	2b08      	cmp	r3, #8
 8008f36:	d10b      	bne.n	8008f50 <_printf_i+0x148>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	07de      	lsls	r6, r3, #31
 8008f3c:	d508      	bpl.n	8008f50 <_printf_i+0x148>
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	6861      	ldr	r1, [r4, #4]
 8008f42:	4299      	cmp	r1, r3
 8008f44:	bfde      	ittt	le
 8008f46:	2330      	movle	r3, #48	; 0x30
 8008f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f50:	1b52      	subs	r2, r2, r5
 8008f52:	6122      	str	r2, [r4, #16]
 8008f54:	f8cd a000 	str.w	sl, [sp]
 8008f58:	464b      	mov	r3, r9
 8008f5a:	aa03      	add	r2, sp, #12
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f7ff fee4 	bl	8008d2c <_printf_common>
 8008f64:	3001      	adds	r0, #1
 8008f66:	d14a      	bne.n	8008ffe <_printf_i+0x1f6>
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	b004      	add	sp, #16
 8008f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	f043 0320 	orr.w	r3, r3, #32
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	4833      	ldr	r0, [pc, #204]	; (8009048 <_printf_i+0x240>)
 8008f7c:	2778      	movs	r7, #120	; 0x78
 8008f7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	6829      	ldr	r1, [r5, #0]
 8008f86:	061f      	lsls	r7, r3, #24
 8008f88:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f8c:	d402      	bmi.n	8008f94 <_printf_i+0x18c>
 8008f8e:	065f      	lsls	r7, r3, #25
 8008f90:	bf48      	it	mi
 8008f92:	b2b6      	uxthmi	r6, r6
 8008f94:	07df      	lsls	r7, r3, #31
 8008f96:	bf48      	it	mi
 8008f98:	f043 0320 	orrmi.w	r3, r3, #32
 8008f9c:	6029      	str	r1, [r5, #0]
 8008f9e:	bf48      	it	mi
 8008fa0:	6023      	strmi	r3, [r4, #0]
 8008fa2:	b91e      	cbnz	r6, 8008fac <_printf_i+0x1a4>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	f023 0320 	bic.w	r3, r3, #32
 8008faa:	6023      	str	r3, [r4, #0]
 8008fac:	2310      	movs	r3, #16
 8008fae:	e7a7      	b.n	8008f00 <_printf_i+0xf8>
 8008fb0:	4824      	ldr	r0, [pc, #144]	; (8009044 <_printf_i+0x23c>)
 8008fb2:	e7e4      	b.n	8008f7e <_printf_i+0x176>
 8008fb4:	4615      	mov	r5, r2
 8008fb6:	e7bd      	b.n	8008f34 <_printf_i+0x12c>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	6826      	ldr	r6, [r4, #0]
 8008fbc:	6961      	ldr	r1, [r4, #20]
 8008fbe:	1d18      	adds	r0, r3, #4
 8008fc0:	6028      	str	r0, [r5, #0]
 8008fc2:	0635      	lsls	r5, r6, #24
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	d501      	bpl.n	8008fcc <_printf_i+0x1c4>
 8008fc8:	6019      	str	r1, [r3, #0]
 8008fca:	e002      	b.n	8008fd2 <_printf_i+0x1ca>
 8008fcc:	0670      	lsls	r0, r6, #25
 8008fce:	d5fb      	bpl.n	8008fc8 <_printf_i+0x1c0>
 8008fd0:	8019      	strh	r1, [r3, #0]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6123      	str	r3, [r4, #16]
 8008fd6:	4615      	mov	r5, r2
 8008fd8:	e7bc      	b.n	8008f54 <_printf_i+0x14c>
 8008fda:	682b      	ldr	r3, [r5, #0]
 8008fdc:	1d1a      	adds	r2, r3, #4
 8008fde:	602a      	str	r2, [r5, #0]
 8008fe0:	681d      	ldr	r5, [r3, #0]
 8008fe2:	6862      	ldr	r2, [r4, #4]
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f7f7 f90a 	bl	8000200 <memchr>
 8008fec:	b108      	cbz	r0, 8008ff2 <_printf_i+0x1ea>
 8008fee:	1b40      	subs	r0, r0, r5
 8008ff0:	6060      	str	r0, [r4, #4]
 8008ff2:	6863      	ldr	r3, [r4, #4]
 8008ff4:	6123      	str	r3, [r4, #16]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ffc:	e7aa      	b.n	8008f54 <_printf_i+0x14c>
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	462a      	mov	r2, r5
 8009002:	4649      	mov	r1, r9
 8009004:	4640      	mov	r0, r8
 8009006:	47d0      	blx	sl
 8009008:	3001      	adds	r0, #1
 800900a:	d0ad      	beq.n	8008f68 <_printf_i+0x160>
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	079b      	lsls	r3, r3, #30
 8009010:	d413      	bmi.n	800903a <_printf_i+0x232>
 8009012:	68e0      	ldr	r0, [r4, #12]
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	4298      	cmp	r0, r3
 8009018:	bfb8      	it	lt
 800901a:	4618      	movlt	r0, r3
 800901c:	e7a6      	b.n	8008f6c <_printf_i+0x164>
 800901e:	2301      	movs	r3, #1
 8009020:	4632      	mov	r2, r6
 8009022:	4649      	mov	r1, r9
 8009024:	4640      	mov	r0, r8
 8009026:	47d0      	blx	sl
 8009028:	3001      	adds	r0, #1
 800902a:	d09d      	beq.n	8008f68 <_printf_i+0x160>
 800902c:	3501      	adds	r5, #1
 800902e:	68e3      	ldr	r3, [r4, #12]
 8009030:	9903      	ldr	r1, [sp, #12]
 8009032:	1a5b      	subs	r3, r3, r1
 8009034:	42ab      	cmp	r3, r5
 8009036:	dcf2      	bgt.n	800901e <_printf_i+0x216>
 8009038:	e7eb      	b.n	8009012 <_printf_i+0x20a>
 800903a:	2500      	movs	r5, #0
 800903c:	f104 0619 	add.w	r6, r4, #25
 8009040:	e7f5      	b.n	800902e <_printf_i+0x226>
 8009042:	bf00      	nop
 8009044:	0800953d 	.word	0x0800953d
 8009048:	0800954e 	.word	0x0800954e

0800904c <__sflush_r>:
 800904c:	898a      	ldrh	r2, [r1, #12]
 800904e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009052:	4605      	mov	r5, r0
 8009054:	0710      	lsls	r0, r2, #28
 8009056:	460c      	mov	r4, r1
 8009058:	d458      	bmi.n	800910c <__sflush_r+0xc0>
 800905a:	684b      	ldr	r3, [r1, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	dc05      	bgt.n	800906c <__sflush_r+0x20>
 8009060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009062:	2b00      	cmp	r3, #0
 8009064:	dc02      	bgt.n	800906c <__sflush_r+0x20>
 8009066:	2000      	movs	r0, #0
 8009068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800906c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800906e:	2e00      	cmp	r6, #0
 8009070:	d0f9      	beq.n	8009066 <__sflush_r+0x1a>
 8009072:	2300      	movs	r3, #0
 8009074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009078:	682f      	ldr	r7, [r5, #0]
 800907a:	6a21      	ldr	r1, [r4, #32]
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	d032      	beq.n	80090e6 <__sflush_r+0x9a>
 8009080:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	075a      	lsls	r2, r3, #29
 8009086:	d505      	bpl.n	8009094 <__sflush_r+0x48>
 8009088:	6863      	ldr	r3, [r4, #4]
 800908a:	1ac0      	subs	r0, r0, r3
 800908c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800908e:	b10b      	cbz	r3, 8009094 <__sflush_r+0x48>
 8009090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009092:	1ac0      	subs	r0, r0, r3
 8009094:	2300      	movs	r3, #0
 8009096:	4602      	mov	r2, r0
 8009098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800909a:	6a21      	ldr	r1, [r4, #32]
 800909c:	4628      	mov	r0, r5
 800909e:	47b0      	blx	r6
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	d106      	bne.n	80090b4 <__sflush_r+0x68>
 80090a6:	6829      	ldr	r1, [r5, #0]
 80090a8:	291d      	cmp	r1, #29
 80090aa:	d82b      	bhi.n	8009104 <__sflush_r+0xb8>
 80090ac:	4a29      	ldr	r2, [pc, #164]	; (8009154 <__sflush_r+0x108>)
 80090ae:	410a      	asrs	r2, r1
 80090b0:	07d6      	lsls	r6, r2, #31
 80090b2:	d427      	bmi.n	8009104 <__sflush_r+0xb8>
 80090b4:	2200      	movs	r2, #0
 80090b6:	6062      	str	r2, [r4, #4]
 80090b8:	04d9      	lsls	r1, r3, #19
 80090ba:	6922      	ldr	r2, [r4, #16]
 80090bc:	6022      	str	r2, [r4, #0]
 80090be:	d504      	bpl.n	80090ca <__sflush_r+0x7e>
 80090c0:	1c42      	adds	r2, r0, #1
 80090c2:	d101      	bne.n	80090c8 <__sflush_r+0x7c>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b903      	cbnz	r3, 80090ca <__sflush_r+0x7e>
 80090c8:	6560      	str	r0, [r4, #84]	; 0x54
 80090ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090cc:	602f      	str	r7, [r5, #0]
 80090ce:	2900      	cmp	r1, #0
 80090d0:	d0c9      	beq.n	8009066 <__sflush_r+0x1a>
 80090d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d6:	4299      	cmp	r1, r3
 80090d8:	d002      	beq.n	80090e0 <__sflush_r+0x94>
 80090da:	4628      	mov	r0, r5
 80090dc:	f7ff fa92 	bl	8008604 <_free_r>
 80090e0:	2000      	movs	r0, #0
 80090e2:	6360      	str	r0, [r4, #52]	; 0x34
 80090e4:	e7c0      	b.n	8009068 <__sflush_r+0x1c>
 80090e6:	2301      	movs	r3, #1
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b0      	blx	r6
 80090ec:	1c41      	adds	r1, r0, #1
 80090ee:	d1c8      	bne.n	8009082 <__sflush_r+0x36>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0c5      	beq.n	8009082 <__sflush_r+0x36>
 80090f6:	2b1d      	cmp	r3, #29
 80090f8:	d001      	beq.n	80090fe <__sflush_r+0xb2>
 80090fa:	2b16      	cmp	r3, #22
 80090fc:	d101      	bne.n	8009102 <__sflush_r+0xb6>
 80090fe:	602f      	str	r7, [r5, #0]
 8009100:	e7b1      	b.n	8009066 <__sflush_r+0x1a>
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009108:	81a3      	strh	r3, [r4, #12]
 800910a:	e7ad      	b.n	8009068 <__sflush_r+0x1c>
 800910c:	690f      	ldr	r7, [r1, #16]
 800910e:	2f00      	cmp	r7, #0
 8009110:	d0a9      	beq.n	8009066 <__sflush_r+0x1a>
 8009112:	0793      	lsls	r3, r2, #30
 8009114:	680e      	ldr	r6, [r1, #0]
 8009116:	bf08      	it	eq
 8009118:	694b      	ldreq	r3, [r1, #20]
 800911a:	600f      	str	r7, [r1, #0]
 800911c:	bf18      	it	ne
 800911e:	2300      	movne	r3, #0
 8009120:	eba6 0807 	sub.w	r8, r6, r7
 8009124:	608b      	str	r3, [r1, #8]
 8009126:	f1b8 0f00 	cmp.w	r8, #0
 800912a:	dd9c      	ble.n	8009066 <__sflush_r+0x1a>
 800912c:	6a21      	ldr	r1, [r4, #32]
 800912e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009130:	4643      	mov	r3, r8
 8009132:	463a      	mov	r2, r7
 8009134:	4628      	mov	r0, r5
 8009136:	47b0      	blx	r6
 8009138:	2800      	cmp	r0, #0
 800913a:	dc06      	bgt.n	800914a <__sflush_r+0xfe>
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	e78e      	b.n	8009068 <__sflush_r+0x1c>
 800914a:	4407      	add	r7, r0
 800914c:	eba8 0800 	sub.w	r8, r8, r0
 8009150:	e7e9      	b.n	8009126 <__sflush_r+0xda>
 8009152:	bf00      	nop
 8009154:	dfbffffe 	.word	0xdfbffffe

08009158 <_fflush_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	690b      	ldr	r3, [r1, #16]
 800915c:	4605      	mov	r5, r0
 800915e:	460c      	mov	r4, r1
 8009160:	b913      	cbnz	r3, 8009168 <_fflush_r+0x10>
 8009162:	2500      	movs	r5, #0
 8009164:	4628      	mov	r0, r5
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	b118      	cbz	r0, 8009172 <_fflush_r+0x1a>
 800916a:	6a03      	ldr	r3, [r0, #32]
 800916c:	b90b      	cbnz	r3, 8009172 <_fflush_r+0x1a>
 800916e:	f7fe fffd 	bl	800816c <__sinit>
 8009172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0f3      	beq.n	8009162 <_fflush_r+0xa>
 800917a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800917c:	07d0      	lsls	r0, r2, #31
 800917e:	d404      	bmi.n	800918a <_fflush_r+0x32>
 8009180:	0599      	lsls	r1, r3, #22
 8009182:	d402      	bmi.n	800918a <_fflush_r+0x32>
 8009184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009186:	f7ff fa3a 	bl	80085fe <__retarget_lock_acquire_recursive>
 800918a:	4628      	mov	r0, r5
 800918c:	4621      	mov	r1, r4
 800918e:	f7ff ff5d 	bl	800904c <__sflush_r>
 8009192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009194:	07da      	lsls	r2, r3, #31
 8009196:	4605      	mov	r5, r0
 8009198:	d4e4      	bmi.n	8009164 <_fflush_r+0xc>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	059b      	lsls	r3, r3, #22
 800919e:	d4e1      	bmi.n	8009164 <_fflush_r+0xc>
 80091a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091a2:	f7ff fa2d 	bl	8008600 <__retarget_lock_release_recursive>
 80091a6:	e7dd      	b.n	8009164 <_fflush_r+0xc>

080091a8 <__swhatbuf_r>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	460c      	mov	r4, r1
 80091ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b0:	2900      	cmp	r1, #0
 80091b2:	b096      	sub	sp, #88	; 0x58
 80091b4:	4615      	mov	r5, r2
 80091b6:	461e      	mov	r6, r3
 80091b8:	da0d      	bge.n	80091d6 <__swhatbuf_r+0x2e>
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091c0:	f04f 0100 	mov.w	r1, #0
 80091c4:	bf0c      	ite	eq
 80091c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091ca:	2340      	movne	r3, #64	; 0x40
 80091cc:	2000      	movs	r0, #0
 80091ce:	6031      	str	r1, [r6, #0]
 80091d0:	602b      	str	r3, [r5, #0]
 80091d2:	b016      	add	sp, #88	; 0x58
 80091d4:	bd70      	pop	{r4, r5, r6, pc}
 80091d6:	466a      	mov	r2, sp
 80091d8:	f000 f862 	bl	80092a0 <_fstat_r>
 80091dc:	2800      	cmp	r0, #0
 80091de:	dbec      	blt.n	80091ba <__swhatbuf_r+0x12>
 80091e0:	9901      	ldr	r1, [sp, #4]
 80091e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091ea:	4259      	negs	r1, r3
 80091ec:	4159      	adcs	r1, r3
 80091ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f2:	e7eb      	b.n	80091cc <__swhatbuf_r+0x24>

080091f4 <__smakebuf_r>:
 80091f4:	898b      	ldrh	r3, [r1, #12]
 80091f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091f8:	079d      	lsls	r5, r3, #30
 80091fa:	4606      	mov	r6, r0
 80091fc:	460c      	mov	r4, r1
 80091fe:	d507      	bpl.n	8009210 <__smakebuf_r+0x1c>
 8009200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	2301      	movs	r3, #1
 800920a:	6163      	str	r3, [r4, #20]
 800920c:	b002      	add	sp, #8
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	ab01      	add	r3, sp, #4
 8009212:	466a      	mov	r2, sp
 8009214:	f7ff ffc8 	bl	80091a8 <__swhatbuf_r>
 8009218:	9900      	ldr	r1, [sp, #0]
 800921a:	4605      	mov	r5, r0
 800921c:	4630      	mov	r0, r6
 800921e:	f7ff fa5d 	bl	80086dc <_malloc_r>
 8009222:	b948      	cbnz	r0, 8009238 <__smakebuf_r+0x44>
 8009224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009228:	059a      	lsls	r2, r3, #22
 800922a:	d4ef      	bmi.n	800920c <__smakebuf_r+0x18>
 800922c:	f023 0303 	bic.w	r3, r3, #3
 8009230:	f043 0302 	orr.w	r3, r3, #2
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	e7e3      	b.n	8009200 <__smakebuf_r+0xc>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	6020      	str	r0, [r4, #0]
 800923c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	9b00      	ldr	r3, [sp, #0]
 8009244:	6163      	str	r3, [r4, #20]
 8009246:	9b01      	ldr	r3, [sp, #4]
 8009248:	6120      	str	r0, [r4, #16]
 800924a:	b15b      	cbz	r3, 8009264 <__smakebuf_r+0x70>
 800924c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009250:	4630      	mov	r0, r6
 8009252:	f000 f837 	bl	80092c4 <_isatty_r>
 8009256:	b128      	cbz	r0, 8009264 <__smakebuf_r+0x70>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f023 0303 	bic.w	r3, r3, #3
 800925e:	f043 0301 	orr.w	r3, r3, #1
 8009262:	81a3      	strh	r3, [r4, #12]
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	431d      	orrs	r5, r3
 8009268:	81a5      	strh	r5, [r4, #12]
 800926a:	e7cf      	b.n	800920c <__smakebuf_r+0x18>

0800926c <memmove>:
 800926c:	4288      	cmp	r0, r1
 800926e:	b510      	push	{r4, lr}
 8009270:	eb01 0402 	add.w	r4, r1, r2
 8009274:	d902      	bls.n	800927c <memmove+0x10>
 8009276:	4284      	cmp	r4, r0
 8009278:	4623      	mov	r3, r4
 800927a:	d807      	bhi.n	800928c <memmove+0x20>
 800927c:	1e43      	subs	r3, r0, #1
 800927e:	42a1      	cmp	r1, r4
 8009280:	d008      	beq.n	8009294 <memmove+0x28>
 8009282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800928a:	e7f8      	b.n	800927e <memmove+0x12>
 800928c:	4402      	add	r2, r0
 800928e:	4601      	mov	r1, r0
 8009290:	428a      	cmp	r2, r1
 8009292:	d100      	bne.n	8009296 <memmove+0x2a>
 8009294:	bd10      	pop	{r4, pc}
 8009296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800929a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800929e:	e7f7      	b.n	8009290 <memmove+0x24>

080092a0 <_fstat_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d07      	ldr	r5, [pc, #28]	; (80092c0 <_fstat_r+0x20>)
 80092a4:	2300      	movs	r3, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	4611      	mov	r1, r2
 80092ac:	602b      	str	r3, [r5, #0]
 80092ae:	f7f8 fec0 	bl	8002032 <_fstat>
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	d102      	bne.n	80092bc <_fstat_r+0x1c>
 80092b6:	682b      	ldr	r3, [r5, #0]
 80092b8:	b103      	cbz	r3, 80092bc <_fstat_r+0x1c>
 80092ba:	6023      	str	r3, [r4, #0]
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	bf00      	nop
 80092c0:	2000093c 	.word	0x2000093c

080092c4 <_isatty_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d06      	ldr	r5, [pc, #24]	; (80092e0 <_isatty_r+0x1c>)
 80092c8:	2300      	movs	r3, #0
 80092ca:	4604      	mov	r4, r0
 80092cc:	4608      	mov	r0, r1
 80092ce:	602b      	str	r3, [r5, #0]
 80092d0:	f7f8 febf 	bl	8002052 <_isatty>
 80092d4:	1c43      	adds	r3, r0, #1
 80092d6:	d102      	bne.n	80092de <_isatty_r+0x1a>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	b103      	cbz	r3, 80092de <_isatty_r+0x1a>
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	2000093c 	.word	0x2000093c

080092e4 <_sbrk_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	4d06      	ldr	r5, [pc, #24]	; (8009300 <_sbrk_r+0x1c>)
 80092e8:	2300      	movs	r3, #0
 80092ea:	4604      	mov	r4, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	f7f8 fec8 	bl	8002084 <_sbrk>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_sbrk_r+0x1a>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_sbrk_r+0x1a>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	2000093c 	.word	0x2000093c

08009304 <memcpy>:
 8009304:	440a      	add	r2, r1
 8009306:	4291      	cmp	r1, r2
 8009308:	f100 33ff 	add.w	r3, r0, #4294967295
 800930c:	d100      	bne.n	8009310 <memcpy+0xc>
 800930e:	4770      	bx	lr
 8009310:	b510      	push	{r4, lr}
 8009312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800931a:	4291      	cmp	r1, r2
 800931c:	d1f9      	bne.n	8009312 <memcpy+0xe>
 800931e:	bd10      	pop	{r4, pc}

08009320 <_realloc_r>:
 8009320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009324:	4680      	mov	r8, r0
 8009326:	4614      	mov	r4, r2
 8009328:	460e      	mov	r6, r1
 800932a:	b921      	cbnz	r1, 8009336 <_realloc_r+0x16>
 800932c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009330:	4611      	mov	r1, r2
 8009332:	f7ff b9d3 	b.w	80086dc <_malloc_r>
 8009336:	b92a      	cbnz	r2, 8009344 <_realloc_r+0x24>
 8009338:	f7ff f964 	bl	8008604 <_free_r>
 800933c:	4625      	mov	r5, r4
 800933e:	4628      	mov	r0, r5
 8009340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009344:	f000 f81b 	bl	800937e <_malloc_usable_size_r>
 8009348:	4284      	cmp	r4, r0
 800934a:	4607      	mov	r7, r0
 800934c:	d802      	bhi.n	8009354 <_realloc_r+0x34>
 800934e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009352:	d812      	bhi.n	800937a <_realloc_r+0x5a>
 8009354:	4621      	mov	r1, r4
 8009356:	4640      	mov	r0, r8
 8009358:	f7ff f9c0 	bl	80086dc <_malloc_r>
 800935c:	4605      	mov	r5, r0
 800935e:	2800      	cmp	r0, #0
 8009360:	d0ed      	beq.n	800933e <_realloc_r+0x1e>
 8009362:	42bc      	cmp	r4, r7
 8009364:	4622      	mov	r2, r4
 8009366:	4631      	mov	r1, r6
 8009368:	bf28      	it	cs
 800936a:	463a      	movcs	r2, r7
 800936c:	f7ff ffca 	bl	8009304 <memcpy>
 8009370:	4631      	mov	r1, r6
 8009372:	4640      	mov	r0, r8
 8009374:	f7ff f946 	bl	8008604 <_free_r>
 8009378:	e7e1      	b.n	800933e <_realloc_r+0x1e>
 800937a:	4635      	mov	r5, r6
 800937c:	e7df      	b.n	800933e <_realloc_r+0x1e>

0800937e <_malloc_usable_size_r>:
 800937e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009382:	1f18      	subs	r0, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	bfbc      	itt	lt
 8009388:	580b      	ldrlt	r3, [r1, r0]
 800938a:	18c0      	addlt	r0, r0, r3
 800938c:	4770      	bx	lr
	...

08009390 <_init>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr

0800939c <_fini>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr
