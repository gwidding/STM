
clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007668  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079bc  080079bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079c4  080079c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079c4  080079c4  000179c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079c8  080079c8  000179c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080079cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000005a8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000618  20000618  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014165  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bde  00000000  00000000  00034248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010a0  00000000  00000000  00036e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cf3  00000000  00000000  00037ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002779d  00000000  00000000  00038bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000155a0  00000000  00000000  00060358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef743  00000000  00000000  000758f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f88  00000000  00000000  0016503c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00169fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007800 	.word	0x08007800

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08007800 	.word	0x08007800

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f005 fc04 	bl	8005ddc <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f003 fb55 	bl	8003c98 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f006 f88d 	bl	8006724 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f005 fbdd 	bl	8005ddc <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f005 fbd5 	bl	8005ddc <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f005 fbc5 	bl	8005ddc <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	08007828 	.word	0x08007828
 8000660:	200003d8 	.word	0x200003d8
 8000664:	20000364 	.word	0x20000364
 8000668:	08007818 	.word	0x08007818
 800066c:	08007820 	.word	0x08007820
 8000670:	08007824 	.word	0x08007824

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f003 fb01 	bl	8003c98 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f003 f9ca 	bl	8003a9c <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fa81 	bl	8001c14 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000364 	.word	0x20000364

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <_write>:
static void MX_I2C1_Init(void);
static void MX_RTC_Init(void);
static void MX_ADC1_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <_write+0x28>)
 80007f0:	f005 faf4 	bl	8005ddc <HAL_UART_Transmit>
	return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200003d8 	.word	0x200003d8

08000804 <get_time>:
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
RTC_AlarmTypeDef aTime;

void get_time(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800080a:	2200      	movs	r2, #0
 800080c:	4911      	ldr	r1, [pc, #68]	; (8000854 <get_time+0x50>)
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <get_time+0x54>)
 8000810:	f004 fd5c 	bl	80052cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000814:	2200      	movs	r2, #0
 8000816:	4911      	ldr	r1, [pc, #68]	; (800085c <get_time+0x58>)
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <get_time+0x54>)
 800081a:	f004 fe39 	bl	8005490 <HAL_RTC_GetDate>
	sprintf((char*)showTime, "%s %02d : %02d : %02d      ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <get_time+0x50>)
 8000820:	78db      	ldrb	r3, [r3, #3]
 8000822:	461a      	mov	r2, r3
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <get_time+0x5c>)
 800082c:	441a      	add	r2, r3
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <get_time+0x50>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <get_time+0x50>)
 8000836:	785b      	ldrb	r3, [r3, #1]
 8000838:	4619      	mov	r1, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <get_time+0x50>)
 800083c:	789b      	ldrb	r3, [r3, #2]
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	9100      	str	r1, [sp, #0]
 8000842:	4603      	mov	r3, r0
 8000844:	4907      	ldr	r1, [pc, #28]	; (8000864 <get_time+0x60>)
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <get_time+0x64>)
 8000848:	f005 ffa0 	bl	800678c <siprintf>
//	HAL_UART_Transmit(&huart3, (uint8_t *)&showTime, strlen(showTime), 1000);
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000047c 	.word	0x2000047c
 8000858:	200003b8 	.word	0x200003b8
 800085c:	20000490 	.word	0x20000490
 8000860:	20000000 	.word	0x20000000
 8000864:	08007860 	.word	0x08007860
 8000868:	20000420 	.word	0x20000420

0800086c <get_alarm>:
	aTime.AlarmTime.Minutes = mm;
	aTime.AlarmTime.Seconds = ss;
	HAL_RTC_SetAlarm(&hrtc, &aTime, RTC_FORMAT_BIN);
}
void get_alarm(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af02      	add	r7, sp, #8
	HAL_RTC_GetAlarm(&hrtc, &aTime, RTC_CR_ALRAE, RTC_FORMAT_BIN);
 8000872:	2300      	movs	r3, #0
 8000874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000878:	490e      	ldr	r1, [pc, #56]	; (80008b4 <get_alarm+0x48>)
 800087a:	480f      	ldr	r0, [pc, #60]	; (80008b8 <get_alarm+0x4c>)
 800087c:	f005 f8c4 	bl	8005a08 <HAL_RTC_GetAlarm>
	sprintf((char*)alarmTime, "%s %02d : %02d : %02d      ", ampm[aTime.AlarmTime.TimeFormat], aTime.AlarmTime.Hours, aTime.AlarmTime.Minutes, aTime.AlarmTime.Seconds);
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <get_alarm+0x48>)
 8000882:	78db      	ldrb	r3, [r3, #3]
 8000884:	461a      	mov	r2, r3
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <get_alarm+0x50>)
 800088e:	441a      	add	r2, r3
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <get_alarm+0x48>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <get_alarm+0x48>)
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	4619      	mov	r1, r3
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <get_alarm+0x48>)
 800089e:	789b      	ldrb	r3, [r3, #2]
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	9100      	str	r1, [sp, #0]
 80008a4:	4603      	mov	r3, r0
 80008a6:	4906      	ldr	r1, [pc, #24]	; (80008c0 <get_alarm+0x54>)
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <get_alarm+0x58>)
 80008aa:	f005 ff6f 	bl	800678c <siprintf>

}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000494 	.word	0x20000494
 80008b8:	200003b8 	.word	0x200003b8
 80008bc:	20000000 	.word	0x20000000
 80008c0:	08007860 	.word	0x08007860
 80008c4:	20000440 	.word	0x20000440

080008c8 <time_display>:

void time_display(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  if (current_state.mode == NORMAL_STATE) {
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <time_display+0xa8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d112      	bne.n	80008fa <time_display+0x32>
	  get_time();
 80008d4:	f7ff ff96 	bl	8000804 <get_time>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	204e      	movs	r0, #78	; 0x4e
 80008dc:	f7ff ff20 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "CLOCK              ");
 80008e0:	4924      	ldr	r1, [pc, #144]	; (8000974 <time_display+0xac>)
 80008e2:	204e      	movs	r0, #78	; 0x4e
 80008e4:	f7ff ff5d 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80008e8:	21c0      	movs	r1, #192	; 0xc0
 80008ea:	204e      	movs	r0, #78	; 0x4e
 80008ec:	f7ff ff18 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 80008f0:	4921      	ldr	r1, [pc, #132]	; (8000978 <time_display+0xb0>)
 80008f2:	204e      	movs	r0, #78	; 0x4e
 80008f4:	f7ff ff55 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
	  LCD_SendString(LCD_ADDR, "Music Select       ");
//	  LCD_SendCommand(LCD_ADDR, 0b11000000);
//	  LCD_SendString(LCD_ADDR, alarmTime);
  }
}
 80008f8:	e037      	b.n	800096a <time_display+0xa2>
  else if (current_state.mode == TIME_SETTING){
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <time_display+0xa8>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d110      	bne.n	8000924 <time_display+0x5c>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	204e      	movs	r0, #78	; 0x4e
 8000906:	f7ff ff0b 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Time Setting      ");
 800090a:	491c      	ldr	r1, [pc, #112]	; (800097c <time_display+0xb4>)
 800090c:	204e      	movs	r0, #78	; 0x4e
 800090e:	f7ff ff48 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000912:	21c0      	movs	r1, #192	; 0xc0
 8000914:	204e      	movs	r0, #78	; 0x4e
 8000916:	f7ff ff03 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 800091a:	4917      	ldr	r1, [pc, #92]	; (8000978 <time_display+0xb0>)
 800091c:	204e      	movs	r0, #78	; 0x4e
 800091e:	f7ff ff40 	bl	80007a2 <LCD_SendString>
}
 8000922:	e022      	b.n	800096a <time_display+0xa2>
  else if (current_state.mode == ALARM_TIME_SETTING) {
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <time_display+0xa8>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d112      	bne.n	8000952 <time_display+0x8a>
	  get_alarm();
 800092c:	f7ff ff9e 	bl	800086c <get_alarm>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	204e      	movs	r0, #78	; 0x4e
 8000934:	f7ff fef4 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Alarm Time       ");
 8000938:	4911      	ldr	r1, [pc, #68]	; (8000980 <time_display+0xb8>)
 800093a:	204e      	movs	r0, #78	; 0x4e
 800093c:	f7ff ff31 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000940:	21c0      	movs	r1, #192	; 0xc0
 8000942:	204e      	movs	r0, #78	; 0x4e
 8000944:	f7ff feec 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, alarmTime);
 8000948:	490e      	ldr	r1, [pc, #56]	; (8000984 <time_display+0xbc>)
 800094a:	204e      	movs	r0, #78	; 0x4e
 800094c:	f7ff ff29 	bl	80007a2 <LCD_SendString>
}
 8000950:	e00b      	b.n	800096a <time_display+0xa2>
  else if (current_state.mode == MUSIC_SELECT) {
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <time_display+0xa8>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d107      	bne.n	800096a <time_display+0xa2>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	204e      	movs	r0, #78	; 0x4e
 800095e:	f7ff fedf 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Music Select       ");
 8000962:	4909      	ldr	r1, [pc, #36]	; (8000988 <time_display+0xc0>)
 8000964:	204e      	movs	r0, #78	; 0x4e
 8000966:	f7ff ff1c 	bl	80007a2 <LCD_SendString>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000008c 	.word	0x2000008c
 8000974:	0800787c 	.word	0x0800787c
 8000978:	20000420 	.word	0x20000420
 800097c:	08007890 	.word	0x08007890
 8000980:	080078a4 	.word	0x080078a4
 8000984:	20000440 	.word	0x20000440
 8000988:	080078b8 	.word	0x080078b8

0800098c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) {
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	2b80      	cmp	r3, #128	; 0x80
 800099a:	d171      	bne.n	8000a80 <HAL_GPIO_EXTI_Callback+0xf4>
        ctime = HAL_GetTick();
 800099c:	f001 f92e 	bl	8001bfc <HAL_GetTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <HAL_GPIO_EXTI_Callback+0xfc>)
 80009a4:	6013      	str	r3, [r2, #0]
        interval = ctime - ltime;
 80009a6:	4b38      	ldr	r3, [pc, #224]	; (8000a88 <HAL_GPIO_EXTI_Callback+0xfc>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b38      	ldr	r3, [pc, #224]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x100>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	4a37      	ldr	r2, [pc, #220]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x104>)
 80009b2:	6013      	str	r3, [r2, #0]
        ltime = ctime;
 80009b4:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <HAL_GPIO_EXTI_Callback+0xfc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a34      	ldr	r2, [pc, #208]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x100>)
 80009ba:	6013      	str	r3, [r2, #0]

        if (interval > 90) {
 80009bc:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x104>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b5a      	cmp	r3, #90	; 0x5a
 80009c2:	d95d      	bls.n	8000a80 <HAL_GPIO_EXTI_Callback+0xf4>
            level = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	4833      	ldr	r0, [pc, #204]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x108>)
 80009c8:	f002 fec0 	bl	800374c <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x10c>)
 80009d2:	601a      	str	r2, [r3, #0]

            if (level == 1) {
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x10c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d151      	bne.n	8000a80 <HAL_GPIO_EXTI_Callback+0xf4>
                printf("Switch pressed, cnt = %d,  %u\r\n",double_key_cnt,  interval);
 80009dc:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x110>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x104>)
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	482e      	ldr	r0, [pc, #184]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x114>)
 80009e8:	f005 fe2e 	bl	8006648 <iprintf>
                if (interval < 150) {
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x104>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b95      	cmp	r3, #149	; 0x95
 80009f2:	d805      	bhi.n	8000a00 <HAL_GPIO_EXTI_Callback+0x74>
                	double_key_cnt++;
 80009f4:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x110>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a28      	ldr	r2, [pc, #160]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x110>)
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	e027      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0xc4>
                }
                else if (interval <= 230) {
 8000a00:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x104>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2be6      	cmp	r3, #230	; 0xe6
 8000a06:	d811      	bhi.n	8000a2c <HAL_GPIO_EXTI_Callback+0xa0>
                	printf("one click \r\n");
 8000a08:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x118>)
 8000a0a:	f005 fe83 	bl	8006714 <puts>
                	double_key_cnt = 0;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
                	if (current_state.mode == NORMAL_STATE) {
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d103      	bne.n	8000a24 <HAL_GPIO_EXTI_Callback+0x98>
                		current_state.mode = TIME_SETTING;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	e015      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0xc4>
                	}
                	else {
                		current_state.mode = NORMAL_STATE;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e011      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0xc4>
                	}
                }
                else if (interval > 1000 && current_state.mode == NORMAL_STATE) {
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x104>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a34:	d90c      	bls.n	8000a50 <HAL_GPIO_EXTI_Callback+0xc4>
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d108      	bne.n	8000a50 <HAL_GPIO_EXTI_Callback+0xc4>
                	printf("long click \r\n");
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <HAL_GPIO_EXTI_Callback+0x120>)
 8000a40:	f005 fe68 	bl	8006714 <puts>
                	double_key_cnt = 0;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
                	current_state.mode = ALARM_TIME_SETTING;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	701a      	strb	r2, [r3, #0]
                }
                if (double_key_cnt >= 2 && current_state.mode == NORMAL_STATE) {
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	dd0c      	ble.n	8000a72 <HAL_GPIO_EXTI_Callback+0xe6>
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d108      	bne.n	8000a72 <HAL_GPIO_EXTI_Callback+0xe6>
                	printf("double~~~");
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x124>)
 8000a62:	f005 fdf1 	bl	8006648 <iprintf>
                	double_key_cnt = 0;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
                	current_state.mode = MUSIC_SELECT;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a6e:	2203      	movs	r2, #3
 8000a70:	701a      	strb	r2, [r3, #0]
                }
                if (double_key_cnt > 2) {
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	dd02      	ble.n	8000a80 <HAL_GPIO_EXTI_Callback+0xf4>
                	double_key_cnt = 0;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x110>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000468 	.word	0x20000468
 8000a8c:	2000046c 	.word	0x2000046c
 8000a90:	20000470 	.word	0x20000470
 8000a94:	40021400 	.word	0x40021400
 8000a98:	20000474 	.word	0x20000474
 8000a9c:	20000478 	.word	0x20000478
 8000aa0:	080078cc 	.word	0x080078cc
 8000aa4:	080078ec 	.word	0x080078ec
 8000aa8:	2000008c 	.word	0x2000008c
 8000aac:	080078f8 	.word	0x080078f8
 8000ab0:	08007908 	.word	0x08007908

08000ab4 <setTime_Position>:

void setTime_Position() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
	char blink[30] = {0};
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	831a      	strh	r2, [r3, #24]
	RTC_TimeTypeDef* selectedTime;
	if (current_state.mode == TIME_SETTING) {
 8000ad2:	4b88      	ldr	r3, [pc, #544]	; (8000cf4 <setTime_Position+0x240>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d102      	bne.n	8000ae0 <setTime_Position+0x2c>
		selectedTime = &sTime;
 8000ada:	4b87      	ldr	r3, [pc, #540]	; (8000cf8 <setTime_Position+0x244>)
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ade:	e001      	b.n	8000ae4 <setTime_Position+0x30>
	} else {
		selectedTime = &aTime;
 8000ae0:	4b86      	ldr	r3, [pc, #536]	; (8000cfc <setTime_Position+0x248>)
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (XY[0] < 1500) hourMinSec--;
 8000ae4:	4b86      	ldr	r3, [pc, #536]	; (8000d00 <setTime_Position+0x24c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f240 52db 	movw	r2, #1499	; 0x5db
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d804      	bhi.n	8000afa <setTime_Position+0x46>
 8000af0:	4b84      	ldr	r3, [pc, #528]	; (8000d04 <setTime_Position+0x250>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	4a83      	ldr	r2, [pc, #524]	; (8000d04 <setTime_Position+0x250>)
 8000af8:	6013      	str	r3, [r2, #0]
	if (XY[0] > 4000) hourMinSec++;
 8000afa:	4b81      	ldr	r3, [pc, #516]	; (8000d00 <setTime_Position+0x24c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000b02:	d904      	bls.n	8000b0e <setTime_Position+0x5a>
 8000b04:	4b7f      	ldr	r3, [pc, #508]	; (8000d04 <setTime_Position+0x250>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a7e      	ldr	r2, [pc, #504]	; (8000d04 <setTime_Position+0x250>)
 8000b0c:	6013      	str	r3, [r2, #0]

	if (hourMinSec > 3) hourMinSec = 0;
 8000b0e:	4b7d      	ldr	r3, [pc, #500]	; (8000d04 <setTime_Position+0x250>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	dd02      	ble.n	8000b1c <setTime_Position+0x68>
 8000b16:	4b7b      	ldr	r3, [pc, #492]	; (8000d04 <setTime_Position+0x250>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
	if (hourMinSec < 0) hourMinSec = 3;
 8000b1c:	4b79      	ldr	r3, [pc, #484]	; (8000d04 <setTime_Position+0x250>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	da02      	bge.n	8000b2a <setTime_Position+0x76>
 8000b24:	4b77      	ldr	r3, [pc, #476]	; (8000d04 <setTime_Position+0x250>)
 8000b26:	2203      	movs	r2, #3
 8000b28:	601a      	str	r2, [r3, #0]

	printf("time_position : %d \r\n", hourMinSec);
 8000b2a:	4b76      	ldr	r3, [pc, #472]	; (8000d04 <setTime_Position+0x250>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4875      	ldr	r0, [pc, #468]	; (8000d08 <setTime_Position+0x254>)
 8000b32:	f005 fd89 	bl	8006648 <iprintf>

	switch(hourMinSec) {
 8000b36:	4b73      	ldr	r3, [pc, #460]	; (8000d04 <setTime_Position+0x250>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	f200 80be 	bhi.w	8000cbc <setTime_Position+0x208>
 8000b40:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <setTime_Position+0x94>)
 8000b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b46:	bf00      	nop
 8000b48:	08000b59 	.word	0x08000b59
 8000b4c:	08000bad 	.word	0x08000bad
 8000b50:	08000c03 	.word	0x08000c03
 8000b54:	08000c59 	.word	0x08000c59
	case 0:
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000b58:	21c0      	movs	r1, #192	; 0xc0
 8000b5a:	204e      	movs	r0, #78	; 0x4e
 8000b5c:	f7ff fde0 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%s", ampm[selectedTime->TimeFormat]);
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	78db      	ldrb	r3, [r3, #3]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a67      	ldr	r2, [pc, #412]	; (8000d0c <setTime_Position+0x258>)
 8000b6e:	441a      	add	r2, r3
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4967      	ldr	r1, [pc, #412]	; (8000d10 <setTime_Position+0x25c>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f005 fe09 	bl	800678c <siprintf>
		if (XY[1] < 1500 ) selectedTime->TimeFormat++;
 8000b7a:	4b61      	ldr	r3, [pc, #388]	; (8000d00 <setTime_Position+0x24c>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d805      	bhi.n	8000b92 <setTime_Position+0xde>
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	78db      	ldrb	r3, [r3, #3]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	70da      	strb	r2, [r3, #3]
		if (XY[1] > 4000) selectedTime->TimeFormat--;
 8000b92:	4b5b      	ldr	r3, [pc, #364]	; (8000d00 <setTime_Position+0x24c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000b9a:	f240 8088 	bls.w	8000cae <setTime_Position+0x1fa>
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	78db      	ldrb	r3, [r3, #3]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	70da      	strb	r2, [r3, #3]
		break;
 8000baa:	e080      	b.n	8000cae <setTime_Position+0x1fa>
	case 1:
		LCD_SendCommand(LCD_ADDR, 0b11000011);
 8000bac:	21c3      	movs	r1, #195	; 0xc3
 8000bae:	204e      	movs	r0, #78	; 0x4e
 8000bb0:	f7ff fdb6 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%02d", selectedTime->Hours);
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4955      	ldr	r1, [pc, #340]	; (8000d14 <setTime_Position+0x260>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f005 fde4 	bl	800678c <siprintf>
		if (XY[1] < 1500) selectedTime->Hours++;
 8000bc4:	4b4e      	ldr	r3, [pc, #312]	; (8000d00 <setTime_Position+0x24c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f240 52db 	movw	r2, #1499	; 0x5db
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d805      	bhi.n	8000bdc <setTime_Position+0x128>
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	701a      	strb	r2, [r3, #0]
		if (XY[1] > 4000) selectedTime->Hours--;
 8000bdc:	4b48      	ldr	r3, [pc, #288]	; (8000d00 <setTime_Position+0x24c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000be4:	d905      	bls.n	8000bf2 <setTime_Position+0x13e>
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	701a      	strb	r2, [r3, #0]

		if (selectedTime->Hours > 12) selectedTime->Hours = 0;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b0c      	cmp	r3, #12
 8000bf8:	d95b      	bls.n	8000cb2 <setTime_Position+0x1fe>
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
		if (selectedTime->Hours < 0) selectedTime->Hours = 12;
		break;
 8000c00:	e057      	b.n	8000cb2 <setTime_Position+0x1fe>
	case 2:
		LCD_SendCommand(LCD_ADDR, 0b11001000);
 8000c02:	21c8      	movs	r1, #200	; 0xc8
 8000c04:	204e      	movs	r0, #78	; 0x4e
 8000c06:	f7ff fd8b 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%02d", selectedTime->Minutes);
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	785b      	ldrb	r3, [r3, #1]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4940      	ldr	r1, [pc, #256]	; (8000d14 <setTime_Position+0x260>)
 8000c14:	4618      	mov	r0, r3
 8000c16:	f005 fdb9 	bl	800678c <siprintf>
		if (XY[1] < 1500) selectedTime->Minutes++;
 8000c1a:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <setTime_Position+0x24c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d805      	bhi.n	8000c32 <setTime_Position+0x17e>
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	705a      	strb	r2, [r3, #1]
		if (XY[1] > 4000) selectedTime->Minutes--;
 8000c32:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <setTime_Position+0x24c>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c3a:	d905      	bls.n	8000c48 <setTime_Position+0x194>
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	785b      	ldrb	r3, [r3, #1]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	705a      	strb	r2, [r3, #1]
		if (selectedTime->Minutes > 12) selectedTime->Minutes = 0;
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	785b      	ldrb	r3, [r3, #1]
 8000c4c:	2b0c      	cmp	r3, #12
 8000c4e:	d932      	bls.n	8000cb6 <setTime_Position+0x202>
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	2200      	movs	r2, #0
 8000c54:	705a      	strb	r2, [r3, #1]
		if (selectedTime->Minutes < 0) selectedTime->Minutes = 12;
		break;
 8000c56:	e02e      	b.n	8000cb6 <setTime_Position+0x202>
	case 3:
		LCD_SendCommand(LCD_ADDR, 0b11001101);
 8000c58:	21cd      	movs	r1, #205	; 0xcd
 8000c5a:	204e      	movs	r0, #78	; 0x4e
 8000c5c:	f7ff fd60 	bl	8000720 <LCD_SendCommand>
		 sprintf(blink, "%02d", selectedTime->Seconds);
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	461a      	mov	r2, r3
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	492a      	ldr	r1, [pc, #168]	; (8000d14 <setTime_Position+0x260>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f005 fd8e 	bl	800678c <siprintf>
		if (XY[1] < 1500) selectedTime->Seconds++;
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <setTime_Position+0x24c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f240 52db 	movw	r2, #1499	; 0x5db
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d805      	bhi.n	8000c88 <setTime_Position+0x1d4>
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	789b      	ldrb	r3, [r3, #2]
 8000c80:	3301      	adds	r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	709a      	strb	r2, [r3, #2]
		if (XY[1] > 4000) selectedTime->Seconds--;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <setTime_Position+0x24c>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c90:	d905      	bls.n	8000c9e <setTime_Position+0x1ea>
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	789b      	ldrb	r3, [r3, #2]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	709a      	strb	r2, [r3, #2]
		if (selectedTime->Seconds > 12) selectedTime->Seconds = 0;
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	2b0c      	cmp	r3, #12
 8000ca4:	d909      	bls.n	8000cba <setTime_Position+0x206>
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	709a      	strb	r2, [r3, #2]
		if (selectedTime->Seconds < 0) selectedTime->Seconds = 12;
		break;
 8000cac:	e005      	b.n	8000cba <setTime_Position+0x206>
		break;
 8000cae:	bf00      	nop
 8000cb0:	e004      	b.n	8000cbc <setTime_Position+0x208>
		break;
 8000cb2:	bf00      	nop
 8000cb4:	e002      	b.n	8000cbc <setTime_Position+0x208>
		break;
 8000cb6:	bf00      	nop
 8000cb8:	e000      	b.n	8000cbc <setTime_Position+0x208>
		break;
 8000cba:	bf00      	nop
	}
//	timeRange_check();
	HAL_Delay(500);
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f000 ffa8 	bl	8001c14 <HAL_Delay>
	LCD_SendString(LCD_ADDR, "  ");
 8000cc4:	4914      	ldr	r1, [pc, #80]	; (8000d18 <setTime_Position+0x264>)
 8000cc6:	204e      	movs	r0, #78	; 0x4e
 8000cc8:	f7ff fd6b 	bl	80007a2 <LCD_SendString>
	if (current_state.mode == TIME_SETTING) {
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <setTime_Position+0x240>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d105      	bne.n	8000ce0 <setTime_Position+0x22c>
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <setTime_Position+0x244>)
 8000cd8:	4810      	ldr	r0, [pc, #64]	; (8000d1c <setTime_Position+0x268>)
 8000cda:	f004 fa5d 	bl	8005198 <HAL_RTC_SetTime>
	}
	else {
		HAL_RTC_SetAlarm(&hrtc, &aTime, RTC_FORMAT_BIN);
	}
}
 8000cde:	e004      	b.n	8000cea <setTime_Position+0x236>
		HAL_RTC_SetAlarm(&hrtc, &aTime, RTC_FORMAT_BIN);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4906      	ldr	r1, [pc, #24]	; (8000cfc <setTime_Position+0x248>)
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <setTime_Position+0x268>)
 8000ce6:	f004 fc22 	bl	800552e <HAL_RTC_SetAlarm>
}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000008c 	.word	0x2000008c
 8000cf8:	2000047c 	.word	0x2000047c
 8000cfc:	20000494 	.word	0x20000494
 8000d00:	20000460 	.word	0x20000460
 8000d04:	2000041c 	.word	0x2000041c
 8000d08:	08007914 	.word	0x08007914
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	0800792c 	.word	0x0800792c
 8000d14:	08007930 	.word	0x08007930
 8000d18:	08007938 	.word	0x08007938
 8000d1c:	200003b8 	.word	0x200003b8

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f000 ff04 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d28:	f000 f85e 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2c:	f000 faa8 	bl	8001280 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d30:	f000 fa86 	bl	8001240 <MX_DMA_Init>
  MX_ETH_Init();
 8000d34:	f000 f938 	bl	8000fa8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d38:	f000 fa58 	bl	80011ec <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000d3c:	f000 f982 	bl	8001044 <MX_I2C1_Init>
  MX_RTC_Init();
 8000d40:	f000 f9c0 	bl	80010c4 <MX_RTC_Init>
  MX_ADC1_Init();
 8000d44:	f000 f8d0 	bl	8000ee8 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d48:	f000 f8ba 	bl	8000ec0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 8000d4c:	f7ff fc26 	bl	800059c <I2C_Scan>
  LCD_Init(LCD_ADDR);
 8000d50:	204e      	movs	r0, #78	; 0x4e
 8000d52:	f7ff fd09 	bl	8000768 <LCD_Init>
  current_state.mode = TIME_SETTING;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <main+0xa8>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	491b      	ldr	r1, [pc, #108]	; (8000dcc <main+0xac>)
 8000d60:	481b      	ldr	r0, [pc, #108]	; (8000dd0 <main+0xb0>)
 8000d62:	f000 ffbf 	bl	8001ce4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 8000d66:	f7ff fd4d 	bl	8000804 <get_time>
	  time_display();
 8000d6a:	f7ff fdad 	bl	80008c8 <time_display>
	  if (current_state.mode == TIME_SETTING || current_state.mode == ALARM_TIME_SETTING) {
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <main+0xa8>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d003      	beq.n	8000d7e <main+0x5e>
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <main+0xa8>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d1f3      	bne.n	8000d66 <main+0x46>
		  setTime_Position();
 8000d7e:	f7ff fe99 	bl	8000ab4 <setTime_Position>
		  HAL_UART_Transmit(&huart3, (uint8_t *)&showTime, strlen(showTime), 1000);
 8000d82:	4814      	ldr	r0, [pc, #80]	; (8000dd4 <main+0xb4>)
 8000d84:	f7ff fa34 	bl	80001f0 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d90:	4910      	ldr	r1, [pc, #64]	; (8000dd4 <main+0xb4>)
 8000d92:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <main+0xb8>)
 8000d94:	f005 f822 	bl	8005ddc <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, (uint8_t *)&alarmTime, strlen(alarmTime), 1000);
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <main+0xbc>)
 8000d9a:	f7ff fa29 	bl	80001f0 <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <main+0xbc>)
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <main+0xb8>)
 8000daa:	f005 f817 	bl	8005ddc <HAL_UART_Transmit>
		  printf("%d, %d \r\n", XY[0], XY[1]);
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <main+0xac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <main+0xac>)
 8000db4:	6852      	ldr	r2, [r2, #4]
 8000db6:	4619      	mov	r1, r3
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <main+0xc0>)
 8000dba:	f005 fc45 	bl	8006648 <iprintf>
		  printf("\r\n");
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <main+0xc4>)
 8000dc0:	f005 fca8 	bl	8006714 <puts>
	  get_time();
 8000dc4:	e7cf      	b.n	8000d66 <main+0x46>
 8000dc6:	bf00      	nop
 8000dc8:	2000008c 	.word	0x2000008c
 8000dcc:	20000460 	.word	0x20000460
 8000dd0:	2000020c 	.word	0x2000020c
 8000dd4:	20000420 	.word	0x20000420
 8000dd8:	200003d8 	.word	0x200003d8
 8000ddc:	20000440 	.word	0x20000440
 8000de0:	0800793c 	.word	0x0800793c
 8000de4:	08007948 	.word	0x08007948

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	; 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	2230      	movs	r2, #48	; 0x30
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f005 fdc0 	bl	800697c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <SystemClock_Config+0xd4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <SystemClock_Config+0xd4>)
 8000e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <SystemClock_Config+0xd4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e44:	2305      	movs	r3, #5
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e52:	2302      	movs	r3, #2
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e60:	23a8      	movs	r3, #168	; 0xa8
 8000e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fac3 	bl	80043fc <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e7c:	f000 fb1a 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e84:	2302      	movs	r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 fd24 	bl	80048ec <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eaa:	f000 fb03 	bl	80014b4 <Error_Handler>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3750      	adds	r7, #80	; 0x50
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2017      	movs	r0, #23
 8000eca:	f001 fbc4 	bl	8002656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ece:	2017      	movs	r0, #23
 8000ed0:	f001 fbdd 	bl	800268e <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2009      	movs	r0, #9
 8000eda:	f001 fbbc 	bl	8002656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ede:	2009      	movs	r0, #9
 8000ee0:	f001 fbd5 	bl	800268e <HAL_NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000efc:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <MX_ADC1_Init+0xb8>)
 8000efe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <MX_ADC1_Init+0xbc>)
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f48:	4814      	ldr	r0, [pc, #80]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f4a:	f000 fe87 	bl	8001c5c <HAL_ADC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 faae 	bl	80014b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f58:	230d      	movs	r3, #13
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000f60:	2304      	movs	r3, #4
 8000f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f6a:	f000 ffe9 	bl	8001f40 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f74:	f000 fa9e 	bl	80014b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f78:	230a      	movs	r3, #10
 8000f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_ADC1_Init+0xb4>)
 8000f86:	f000 ffdb 	bl	8001f40 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f90:	f000 fa90 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000020c 	.word	0x2000020c
 8000fa0:	40012000 	.word	0x40012000
 8000fa4:	0f000001 	.word	0x0f000001

08000fa8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_ETH_Init+0x84>)
 8000fae:	4a20      	ldr	r2, [pc, #128]	; (8001030 <MX_ETH_Init+0x88>)
 8000fb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <MX_ETH_Init+0x8c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <MX_ETH_Init+0x8c>)
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_ETH_Init+0x8c>)
 8000fc0:	22e1      	movs	r2, #225	; 0xe1
 8000fc2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_ETH_Init+0x8c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_ETH_Init+0x8c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_ETH_Init+0x8c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_ETH_Init+0x84>)
 8000fd8:	4a16      	ldr	r2, [pc, #88]	; (8001034 <MX_ETH_Init+0x8c>)
 8000fda:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_ETH_Init+0x84>)
 8000fde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fe2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_ETH_Init+0x84>)
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <MX_ETH_Init+0x90>)
 8000fe8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_ETH_Init+0x84>)
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <MX_ETH_Init+0x94>)
 8000fee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_ETH_Init+0x84>)
 8000ff2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ff6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_ETH_Init+0x84>)
 8000ffa:	f001 fed3 	bl	8002da4 <HAL_ETH_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001004:	f000 fa56 	bl	80014b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001008:	2238      	movs	r2, #56	; 0x38
 800100a:	2100      	movs	r1, #0
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_ETH_Init+0x98>)
 800100e:	f005 fcb5 	bl	800697c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_ETH_Init+0x98>)
 8001014:	2221      	movs	r2, #33	; 0x21
 8001016:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_ETH_Init+0x98>)
 800101a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800101e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <MX_ETH_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200002b4 	.word	0x200002b4
 8001030:	40028000 	.word	0x40028000
 8001034:	200004bc 	.word	0x200004bc
 8001038:	2000016c 	.word	0x2000016c
 800103c:	200000cc 	.word	0x200000cc
 8001040:	20000094 	.word	0x20000094

08001044 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_I2C1_Init+0x74>)
 800104a:	4a1c      	ldr	r2, [pc, #112]	; (80010bc <MX_I2C1_Init+0x78>)
 800104c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_I2C1_Init+0x74>)
 8001050:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <MX_I2C1_Init+0x7c>)
 8001052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_I2C1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_I2C1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_I2C1_Init+0x74>)
 8001062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001066:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_I2C1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_I2C1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_I2C1_Init+0x74>)
 8001082:	f002 fbc7 	bl	8003814 <HAL_I2C_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800108c:	f000 fa12 	bl	80014b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001090:	2100      	movs	r1, #0
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <MX_I2C1_Init+0x74>)
 8001094:	f003 f937 	bl	8004306 <HAL_I2CEx_ConfigAnalogFilter>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800109e:	f000 fa09 	bl	80014b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_I2C1_Init+0x74>)
 80010a6:	f003 f96a 	bl	800437e <HAL_I2CEx_ConfigDigitalFilter>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80010b0:	f000 fa00 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000364 	.word	0x20000364
 80010bc:	40005400 	.word	0x40005400
 80010c0:	000186a0 	.word	0x000186a0

080010c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b090      	sub	sp, #64	; 0x40
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2228      	movs	r2, #40	; 0x28
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f005 fc49 	bl	800697c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <MX_RTC_Init+0x11c>)
 80010ec:	4a3d      	ldr	r2, [pc, #244]	; (80011e4 <MX_RTC_Init+0x120>)
 80010ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <MX_RTC_Init+0x11c>)
 80010f2:	2240      	movs	r2, #64	; 0x40
 80010f4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <MX_RTC_Init+0x11c>)
 80010f8:	227f      	movs	r2, #127	; 0x7f
 80010fa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MX_RTC_Init+0x11c>)
 80010fe:	22ff      	movs	r2, #255	; 0xff
 8001100:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <MX_RTC_Init+0x11c>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <MX_RTC_Init+0x11c>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <MX_RTC_Init+0x11c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001114:	4832      	ldr	r0, [pc, #200]	; (80011e0 <MX_RTC_Init+0x11c>)
 8001116:	f003 ffc9 	bl	80050ac <HAL_RTC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 f9c8 	bl	80014b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8001124:	2311      	movs	r3, #17
 8001126:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 800112a:	2359      	movs	r3, #89	; 0x59
 800112c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x30;
 8001130:	2330      	movs	r3, #48	; 0x30
 8001132:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	4824      	ldr	r0, [pc, #144]	; (80011e0 <MX_RTC_Init+0x11c>)
 800114e:	f004 f823 	bl	8005198 <HAL_RTC_SetTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001158:	f000 f9ac 	bl	80014b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800115c:	2301      	movs	r3, #1
 800115e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001162:	2301      	movs	r3, #1
 8001164:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001178:	2201      	movs	r2, #1
 800117a:	4619      	mov	r1, r3
 800117c:	4818      	ldr	r0, [pc, #96]	; (80011e0 <MX_RTC_Init+0x11c>)
 800117e:	f004 f903 	bl	8005388 <HAL_RTC_SetDate>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001188:	f000 f994 	bl	80014b4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800118c:	2301      	movs	r3, #1
 800118e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001190:	2300      	movs	r3, #0
 8001192:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001194:	2310      	movs	r3, #16
 8001196:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800119c:	2300      	movs	r3, #0
 800119e:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_RTC_Init+0x124>)
 80011aa:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80011ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_RTC_Init+0x11c>)
 80011c8:	f004 fadc 	bl	8005784 <HAL_RTC_SetAlarm_IT>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 80011d2:	f000 f96f 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3740      	adds	r7, #64	; 0x40
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200003b8 	.word	0x200003b8
 80011e4:	40002800 	.word	0x40002800
 80011e8:	80808000 	.word	0x80808000

080011ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART3_UART_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_USART3_UART_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_USART3_UART_Init+0x4c>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART3_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART3_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART3_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART3_UART_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART3_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART3_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART3_UART_Init+0x4c>)
 8001224:	f004 fd8d 	bl	8005d42 <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800122e:	f000 f941 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200003d8 	.word	0x200003d8
 800123c:	40004800 	.word	0x40004800

08001240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_DMA_Init+0x3c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <MX_DMA_Init+0x3c>)
 8001250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_DMA_Init+0x3c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2038      	movs	r0, #56	; 0x38
 8001268:	f001 f9f5 	bl	8002656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800126c:	2038      	movs	r0, #56	; 0x38
 800126e:	f001 fa0e 	bl	800268e <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	4b68      	ldr	r3, [pc, #416]	; (800143c <MX_GPIO_Init+0x1bc>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a67      	ldr	r2, [pc, #412]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b65      	ldr	r3, [pc, #404]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	4b61      	ldr	r3, [pc, #388]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a60      	ldr	r2, [pc, #384]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012bc:	f043 0320 	orr.w	r3, r3, #32
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b5e      	ldr	r3, [pc, #376]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b5a      	ldr	r3, [pc, #360]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a59      	ldr	r2, [pc, #356]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b57      	ldr	r3, [pc, #348]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b53      	ldr	r3, [pc, #332]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a52      	ldr	r2, [pc, #328]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <MX_GPIO_Init+0x1bc>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b4c      	ldr	r3, [pc, #304]	; (800143c <MX_GPIO_Init+0x1bc>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a4b      	ldr	r2, [pc, #300]	; (800143c <MX_GPIO_Init+0x1bc>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b49      	ldr	r3, [pc, #292]	; (800143c <MX_GPIO_Init+0x1bc>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <MX_GPIO_Init+0x1bc>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a44      	ldr	r2, [pc, #272]	; (800143c <MX_GPIO_Init+0x1bc>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b42      	ldr	r3, [pc, #264]	; (800143c <MX_GPIO_Init+0x1bc>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <MX_GPIO_Init+0x1bc>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a3d      	ldr	r2, [pc, #244]	; (800143c <MX_GPIO_Init+0x1bc>)
 8001348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <MX_GPIO_Init+0x1bc>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001360:	4837      	ldr	r0, [pc, #220]	; (8001440 <MX_GPIO_Init+0x1c0>)
 8001362:	f002 fa0b 	bl	800377c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	4836      	ldr	r0, [pc, #216]	; (8001444 <MX_GPIO_Init+0x1c4>)
 800136c:	f002 fa06 	bl	800377c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001376:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4830      	ldr	r0, [pc, #192]	; (8001448 <MX_GPIO_Init+0x1c8>)
 8001388:	f002 f834 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 setBtn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|setBtn_Pin;
 800138c:	2388      	movs	r3, #136	; 0x88
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001390:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	482a      	ldr	r0, [pc, #168]	; (800144c <MX_GPIO_Init+0x1cc>)
 80013a2:	f002 f827 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013a6:	f244 0381 	movw	r3, #16513	; 0x4081
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4820      	ldr	r0, [pc, #128]	; (8001440 <MX_GPIO_Init+0x1c0>)
 80013c0:	f002 f818 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013c4:	2340      	movs	r3, #64	; 0x40
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	481a      	ldr	r0, [pc, #104]	; (8001444 <MX_GPIO_Init+0x1c4>)
 80013dc:	f002 f80a 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_GPIO_Init+0x1c4>)
 80013f4:	f001 fffe 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800140a:	230a      	movs	r3, #10
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	480e      	ldr	r0, [pc, #56]	; (8001450 <MX_GPIO_Init+0x1d0>)
 8001416:	f001 ffed 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800141a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4808      	ldr	r0, [pc, #32]	; (8001450 <MX_GPIO_Init+0x1d0>)
 8001430:	f001 ffe0 	bl	80033f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001434:	bf00      	nop
 8001436:	3730      	adds	r7, #48	; 0x30
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020400 	.word	0x40020400
 8001444:	40021800 	.word	0x40021800
 8001448:	40020800 	.word	0x40020800
 800144c:	40021400 	.word	0x40021400
 8001450:	40020000 	.word	0x40020000

08001454 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&showTime, strlen(showTime), 1000);
 800145c:	4810      	ldr	r0, [pc, #64]	; (80014a0 <HAL_RTC_AlarmAEventCallback+0x4c>)
 800145e:	f7fe fec7 	bl	80001f0 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	b29a      	uxth	r2, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	490d      	ldr	r1, [pc, #52]	; (80014a0 <HAL_RTC_AlarmAEventCallback+0x4c>)
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <HAL_RTC_AlarmAEventCallback+0x50>)
 800146e:	f004 fcb5 	bl	8005ddc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)&alarmTime, strlen(alarmTime), 1000);
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <HAL_RTC_AlarmAEventCallback+0x54>)
 8001474:	f7fe febc 	bl	80001f0 <strlen>
 8001478:	4603      	mov	r3, r0
 800147a:	b29a      	uxth	r2, r3
 800147c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001480:	4909      	ldr	r1, [pc, #36]	; (80014a8 <HAL_RTC_AlarmAEventCallback+0x54>)
 8001482:	4808      	ldr	r0, [pc, #32]	; (80014a4 <HAL_RTC_AlarmAEventCallback+0x50>)
 8001484:	f004 fcaa 	bl	8005ddc <HAL_UART_Transmit>
	printf("Alarm Callback Occurred!! \r\n");
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <HAL_RTC_AlarmAEventCallback+0x58>)
 800148a:	f005 f943 	bl	8006714 <puts>
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <HAL_RTC_AlarmAEventCallback+0x5c>)
 8001492:	f002 f98c 	bl	80037ae <HAL_GPIO_TogglePin>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000420 	.word	0x20000420
 80014a4:	200003d8 	.word	0x200003d8
 80014a8:	20000440 	.word	0x20000440
 80014ac:	0800794c 	.word	0x0800794c
 80014b0:	40020400 	.word	0x40020400

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_MspInit+0x4c>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_MspInit+0x4c>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <HAL_ADC_MspInit+0xdc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d157      	bne.n	80015e2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a2d      	ldr	r2, [pc, #180]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800156a:	2309      	movs	r3, #9
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	481d      	ldr	r0, [pc, #116]	; (80015f4 <HAL_ADC_MspInit+0xe4>)
 800157e:	f001 ff39 	bl	80033f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 8001584:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_ADC_MspInit+0xec>)
 8001586:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 800159c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015c6:	480c      	ldr	r0, [pc, #48]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015c8:	f001 f87c 	bl	80026c4 <HAL_DMA_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015d2:	f7ff ff6f 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015da:	639a      	str	r2, [r3, #56]	; 0x38
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40012000 	.word	0x40012000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020800 	.word	0x40020800
 80015f8:	20000254 	.word	0x20000254
 80015fc:	40026410 	.word	0x40026410

08001600 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08e      	sub	sp, #56	; 0x38
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a55      	ldr	r2, [pc, #340]	; (8001774 <HAL_ETH_MspInit+0x174>)
 800161e:	4293      	cmp	r3, r2
 8001620:	f040 80a4 	bne.w	800176c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_ETH_MspInit+0x178>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4a52      	ldr	r2, [pc, #328]	; (8001778 <HAL_ETH_MspInit+0x178>)
 800162e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001632:	6313      	str	r3, [r2, #48]	; 0x30
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_ETH_MspInit+0x178>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_ETH_MspInit+0x178>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <HAL_ETH_MspInit+0x178>)
 800164a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800164e:	6313      	str	r3, [r2, #48]	; 0x30
 8001650:	4b49      	ldr	r3, [pc, #292]	; (8001778 <HAL_ETH_MspInit+0x178>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_ETH_MspInit+0x178>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	4a44      	ldr	r2, [pc, #272]	; (8001778 <HAL_ETH_MspInit+0x178>)
 8001666:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800166a:	6313      	str	r3, [r2, #48]	; 0x30
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_ETH_MspInit+0x178>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HAL_ETH_MspInit+0x178>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a3d      	ldr	r2, [pc, #244]	; (8001778 <HAL_ETH_MspInit+0x178>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6313      	str	r3, [r2, #48]	; 0x30
 8001688:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_ETH_MspInit+0x178>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HAL_ETH_MspInit+0x178>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4a36      	ldr	r2, [pc, #216]	; (8001778 <HAL_ETH_MspInit+0x178>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
 80016a4:	4b34      	ldr	r3, [pc, #208]	; (8001778 <HAL_ETH_MspInit+0x178>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_ETH_MspInit+0x178>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a2f      	ldr	r2, [pc, #188]	; (8001778 <HAL_ETH_MspInit+0x178>)
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_ETH_MspInit+0x178>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_ETH_MspInit+0x178>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_ETH_MspInit+0x178>)
 80016d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_ETH_MspInit+0x178>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016e8:	2332      	movs	r3, #50	; 0x32
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016f8:	230b      	movs	r3, #11
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	481e      	ldr	r0, [pc, #120]	; (800177c <HAL_ETH_MspInit+0x17c>)
 8001704:	f001 fe76 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001708:	2386      	movs	r3, #134	; 0x86
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001718:	230b      	movs	r3, #11
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	4817      	ldr	r0, [pc, #92]	; (8001780 <HAL_ETH_MspInit+0x180>)
 8001724:	f001 fe66 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800173a:	230b      	movs	r3, #11
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <HAL_ETH_MspInit+0x184>)
 8001746:	f001 fe55 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800174a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800175c:	230b      	movs	r3, #11
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	4808      	ldr	r0, [pc, #32]	; (8001788 <HAL_ETH_MspInit+0x188>)
 8001768:	f001 fe44 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3738      	adds	r7, #56	; 0x38
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40028000 	.word	0x40028000
 8001778:	40023800 	.word	0x40023800
 800177c:	40020800 	.word	0x40020800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	40021800 	.word	0x40021800

0800178c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <HAL_I2C_MspInit+0x84>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d12c      	bne.n	8001808 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a17      	ldr	r2, [pc, #92]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d0:	2312      	movs	r3, #18
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017dc:	2304      	movs	r3, #4
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <HAL_I2C_MspInit+0x8c>)
 80017e8:	f001 fe04 	bl	80033f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40005400 	.word	0x40005400
 8001814:	40023800 	.word	0x40023800
 8001818:	40020400 	.word	0x40020400

0800181c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08e      	sub	sp, #56	; 0x38
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	2230      	movs	r2, #48	; 0x30
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f005 f8a5 	bl	800697c <memset>
  if(hrtc->Instance==RTC)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_RTC_MspInit+0x5c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d119      	bne.n	8001870 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800183c:	2320      	movs	r3, #32
 800183e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fa6e 	bl	8004d2c <HAL_RCCEx_PeriphCLKConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001856:	f7ff fe2d 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_RTC_MspInit+0x60>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2029      	movs	r0, #41	; 0x29
 8001866:	f000 fef6 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800186a:	2029      	movs	r0, #41	; 0x29
 800186c:	f000 ff0f 	bl	800268e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001870:	bf00      	nop
 8001872:	3738      	adds	r7, #56	; 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40002800 	.word	0x40002800
 800187c:	42470e3c 	.word	0x42470e3c

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_UART_MspInit+0x84>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d12c      	bne.n	80018fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ec:	2307      	movs	r3, #7
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_UART_MspInit+0x8c>)
 80018f8:	f001 fd7c 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40004800 	.word	0x40004800
 8001908:	40023800 	.word	0x40023800
 800190c:	40020c00 	.word	0x40020c00

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f000 f93a 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001968:	2008      	movs	r0, #8
 800196a:	f001 ff3b 	bl	80037e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}

08001972 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(setBtn_Pin);
 8001976:	2080      	movs	r0, #128	; 0x80
 8001978:	f001 ff34 	bl	80037e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <RTC_Alarm_IRQHandler+0x10>)
 8001986:	f004 f8cf 	bl	8005b28 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200003b8 	.word	0x200003b8

08001994 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <DMA2_Stream0_IRQHandler+0x10>)
 800199a:	f000 ff99 	bl	80028d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000254 	.word	0x20000254

080019a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e00a      	b.n	80019d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ba:	f3af 8000 	nop.w
 80019be:	4601      	mov	r1, r0
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	60ba      	str	r2, [r7, #8]
 80019c6:	b2ca      	uxtb	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbf0      	blt.n	80019ba <_read+0x12>
  }

  return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_isatty>:

int _isatty(int file)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f004 ffcc 	bl	8006a18 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20030000 	.word	0x20030000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	200004c4 	.word	0x200004c4
 8001ab4:	20000618 	.word	0x20000618

08001ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b14 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ae2:	490e      	ldr	r1, [pc, #56]	; (8001b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001af8:	4c0b      	ldr	r4, [pc, #44]	; (8001b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b06:	f7ff ffd7 	bl	8001ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f004 ff8b 	bl	8006a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0e:	f7ff f907 	bl	8000d20 <main>
  bx  lr    
 8001b12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b20:	080079cc 	.word	0x080079cc
  ldr r2, =_sbss
 8001b24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b28:	20000618 	.word	0x20000618

08001b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_Init+0x40>)
 8001b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_Init+0x40>)
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_Init+0x40>)
 8001b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 fd71 	bl	8002640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f000 f808 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff fcac 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x54>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fd89 	bl	80026aa <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f000 fd51 	bl	8002656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <HAL_InitTick+0x5c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	20000010 	.word	0x20000010
 8001bd0:	2000000c 	.word	0x2000000c

08001bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_IncTick+0x20>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_IncTick+0x24>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <HAL_IncTick+0x24>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000010 	.word	0x20000010
 8001bf8:	200004c8 	.word	0x200004c8

08001bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <HAL_GetTick+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200004c8 	.word	0x200004c8

08001c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff ffee 	bl	8001bfc <HAL_GetTick>
 8001c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d005      	beq.n	8001c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_Delay+0x44>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c3a:	bf00      	nop
 8001c3c:	f7ff ffde 	bl	8001bfc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d8f7      	bhi.n	8001c3c <HAL_Delay+0x28>
  {
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000010 	.word	0x20000010

08001c5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e033      	b.n	8001cda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fc48 	bl	8001510 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d118      	bne.n	8001ccc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca2:	f023 0302 	bic.w	r3, r3, #2
 8001ca6:	f043 0202 	orr.w	r2, r3, #2
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fa78 	bl	80021a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cca:	e001      	b.n	8001cd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_Start_DMA+0x1e>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e0e9      	b.n	8001ed6 <HAL_ADC_Start_DMA+0x1f2>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d018      	beq.n	8001d4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d28:	4b6d      	ldr	r3, [pc, #436]	; (8001ee0 <HAL_ADC_Start_DMA+0x1fc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6d      	ldr	r2, [pc, #436]	; (8001ee4 <HAL_ADC_Start_DMA+0x200>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0c9a      	lsrs	r2, r3, #18
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d58:	d107      	bne.n	8001d6a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d68:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	f040 80a1 	bne.w	8001ebc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db8:	d106      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f023 0206 	bic.w	r2, r3, #6
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
 8001dc6:	e002      	b.n	8001dce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_ADC_Start_DMA+0x204>)
 8001dd8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	4a43      	ldr	r2, [pc, #268]	; (8001eec <HAL_ADC_Start_DMA+0x208>)
 8001de0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <HAL_ADC_Start_DMA+0x20c>)
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	4a41      	ldr	r2, [pc, #260]	; (8001ef4 <HAL_ADC_Start_DMA+0x210>)
 8001df0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e0a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e1a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	334c      	adds	r3, #76	; 0x4c
 8001e26:	4619      	mov	r1, r3
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f000 fcf8 	bl	8002820 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d12a      	bne.n	8001e92 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2d      	ldr	r2, [pc, #180]	; (8001ef8 <HAL_ADC_Start_DMA+0x214>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d015      	beq.n	8001e72 <HAL_ADC_Start_DMA+0x18e>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <HAL_ADC_Start_DMA+0x218>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d105      	bne.n	8001e5c <HAL_ADC_Start_DMA+0x178>
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <HAL_ADC_Start_DMA+0x204>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00a      	beq.n	8001e72 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a27      	ldr	r2, [pc, #156]	; (8001f00 <HAL_ADC_Start_DMA+0x21c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d136      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0x1f0>
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_ADC_Start_DMA+0x204>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d130      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d129      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e020      	b.n	8001ed4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_ADC_Start_DMA+0x214>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0x1f0>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d114      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	e00b      	b.n	8001ed4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0210 	orr.w	r2, r3, #16
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	431bde83 	.word	0x431bde83
 8001ee8:	40012300 	.word	0x40012300
 8001eec:	0800239d 	.word	0x0800239d
 8001ef0:	08002457 	.word	0x08002457
 8001ef4:	08002473 	.word	0x08002473
 8001ef8:	40012000 	.word	0x40012000
 8001efc:	40012100 	.word	0x40012100
 8001f00:	40012200 	.word	0x40012200

08001f04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1c>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e113      	b.n	8002184 <HAL_ADC_ConfigChannel+0x244>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d925      	bls.n	8001fb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68d9      	ldr	r1, [r3, #12]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b1e      	subs	r3, #30
 8001f82:	2207      	movs	r2, #7
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43da      	mvns	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	400a      	ands	r2, r1
 8001f90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68d9      	ldr	r1, [r3, #12]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4403      	add	r3, r0
 8001faa:	3b1e      	subs	r3, #30
 8001fac:	409a      	lsls	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	e022      	b.n	8001ffe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6919      	ldr	r1, [r3, #16]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	2207      	movs	r2, #7
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	400a      	ands	r2, r1
 8001fda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6919      	ldr	r1, [r3, #16]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4403      	add	r3, r0
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b06      	cmp	r3, #6
 8002004:	d824      	bhi.n	8002050 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b05      	subs	r3, #5
 8002018:	221f      	movs	r2, #31
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	400a      	ands	r2, r1
 8002026:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b05      	subs	r3, #5
 8002042:	fa00 f203 	lsl.w	r2, r0, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	635a      	str	r2, [r3, #52]	; 0x34
 800204e:	e04c      	b.n	80020ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	d824      	bhi.n	80020a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b23      	subs	r3, #35	; 0x23
 800206a:	221f      	movs	r2, #31
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43da      	mvns	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	400a      	ands	r2, r1
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	b29b      	uxth	r3, r3
 8002086:	4618      	mov	r0, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b23      	subs	r3, #35	; 0x23
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
 80020a0:	e023      	b.n	80020ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	3b41      	subs	r3, #65	; 0x41
 80020b4:	221f      	movs	r2, #31
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	400a      	ands	r2, r1
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4618      	mov	r0, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	3b41      	subs	r3, #65	; 0x41
 80020de:	fa00 f203 	lsl.w	r2, r0, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_ADC_ConfigChannel+0x250>)
 80020ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a28      	ldr	r2, [pc, #160]	; (8002194 <HAL_ADC_ConfigChannel+0x254>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d10f      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d8>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b12      	cmp	r3, #18
 80020fe:	d10b      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <HAL_ADC_ConfigChannel+0x254>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12b      	bne.n	800217a <HAL_ADC_ConfigChannel+0x23a>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_ADC_ConfigChannel+0x258>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x1f4>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b11      	cmp	r3, #17
 8002132:	d122      	bne.n	800217a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_ADC_ConfigChannel+0x258>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d111      	bne.n	800217a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_ADC_ConfigChannel+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a11      	ldr	r2, [pc, #68]	; (80021a0 <HAL_ADC_ConfigChannel+0x260>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9a      	lsrs	r2, r3, #18
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800216c:	e002      	b.n	8002174 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3b01      	subs	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40012300 	.word	0x40012300
 8002194:	40012000 	.word	0x40012000
 8002198:	10000012 	.word	0x10000012
 800219c:	20000008 	.word	0x20000008
 80021a0:	431bde83 	.word	0x431bde83

080021a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ac:	4b79      	ldr	r3, [pc, #484]	; (8002394 <ADC_Init+0x1f0>)
 80021ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	021a      	lsls	r2, r3, #8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6899      	ldr	r1, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	4a58      	ldr	r2, [pc, #352]	; (8002398 <ADC_Init+0x1f4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d022      	beq.n	8002282 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800224a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6899      	ldr	r1, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800226c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6899      	ldr	r1, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	e00f      	b.n	80022a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0202 	bic.w	r2, r2, #2
 80022b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6899      	ldr	r1, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7e1b      	ldrb	r3, [r3, #24]
 80022bc:	005a      	lsls	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01b      	beq.n	8002308 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	3b01      	subs	r3, #1
 80022fc:	035a      	lsls	r2, r3, #13
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	e007      	b.n	8002318 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002316:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	3b01      	subs	r3, #1
 8002334:	051a      	lsls	r2, r3, #20
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800234c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6899      	ldr	r1, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800235a:	025a      	lsls	r2, r3, #9
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6899      	ldr	r1, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	029a      	lsls	r2, r3, #10
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40012300 	.word	0x40012300
 8002398:	0f000001 	.word	0x0f000001

0800239c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d13c      	bne.n	8002430 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d12b      	bne.n	8002428 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d127      	bne.n	8002428 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d119      	bne.n	8002428 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0220 	bic.w	r2, r2, #32
 8002402:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff fd6b 	bl	8001f04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800242e:	e00e      	b.n	800244e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7ff fd75 	bl	8001f2c <HAL_ADC_ErrorCallback>
}
 8002442:	e004      	b.n	800244e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff fd57 	bl	8001f18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f043 0204 	orr.w	r2, r3, #4
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff fd4a 	bl	8001f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024bc:	4013      	ands	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d2:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	60d3      	str	r3, [r2, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <__NVIC_GetPriorityGrouping+0x18>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	f003 0307 	and.w	r3, r3, #7
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	2b00      	cmp	r3, #0
 8002514:	db0b      	blt.n	800252e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	4907      	ldr	r1, [pc, #28]	; (800253c <__NVIC_EnableIRQ+0x38>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2001      	movs	r0, #1
 8002526:	fa00 f202 	lsl.w	r2, r0, r2
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100

08002540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	2b00      	cmp	r3, #0
 8002552:	db0a      	blt.n	800256a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	490c      	ldr	r1, [pc, #48]	; (800258c <__NVIC_SetPriority+0x4c>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	0112      	lsls	r2, r2, #4
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	440b      	add	r3, r1
 8002564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002568:	e00a      	b.n	8002580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4908      	ldr	r1, [pc, #32]	; (8002590 <__NVIC_SetPriority+0x50>)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	3b04      	subs	r3, #4
 8002578:	0112      	lsls	r2, r2, #4
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	440b      	add	r3, r1
 800257e:	761a      	strb	r2, [r3, #24]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000e100 	.word	0xe000e100
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f1c3 0307 	rsb	r3, r3, #7
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	bf28      	it	cs
 80025b2:	2304      	movcs	r3, #4
 80025b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d902      	bls.n	80025c4 <NVIC_EncodePriority+0x30>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3b03      	subs	r3, #3
 80025c2:	e000      	b.n	80025c6 <NVIC_EncodePriority+0x32>
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	401a      	ands	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	43d9      	mvns	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	4313      	orrs	r3, r2
         );
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800260c:	d301      	bcc.n	8002612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260e:	2301      	movs	r3, #1
 8002610:	e00f      	b.n	8002632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <SysTick_Config+0x40>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261a:	210f      	movs	r1, #15
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f7ff ff8e 	bl	8002540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <SysTick_Config+0x40>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262a:	4b04      	ldr	r3, [pc, #16]	; (800263c <SysTick_Config+0x40>)
 800262c:	2207      	movs	r2, #7
 800262e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	e000e010 	.word	0xe000e010

08002640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff29 	bl	80024a0 <__NVIC_SetPriorityGrouping>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002668:	f7ff ff3e 	bl	80024e8 <__NVIC_GetPriorityGrouping>
 800266c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff ff8e 	bl	8002594 <NVIC_EncodePriority>
 8002678:	4602      	mov	r2, r0
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff5d 	bl	8002540 <__NVIC_SetPriority>
}
 8002686:	bf00      	nop
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff31 	bl	8002504 <__NVIC_EnableIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ffa2 	bl	80025fc <SysTick_Config>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fa94 	bl	8001bfc <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e099      	b.n	8002814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002700:	e00f      	b.n	8002722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002702:	f7ff fa7b 	bl	8001bfc <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b05      	cmp	r3, #5
 800270e:	d908      	bls.n	8002722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2203      	movs	r2, #3
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e078      	b.n	8002814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e8      	bne.n	8002702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_DMA_Init+0x158>)
 800273c:	4013      	ands	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800274e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2b04      	cmp	r3, #4
 800277a:	d107      	bne.n	800278c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	4313      	orrs	r3, r2
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f023 0307 	bic.w	r3, r3, #7
 80027a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d117      	bne.n	80027e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fa6f 	bl	8002cac <DMA_CheckFifoParam>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2240      	movs	r2, #64	; 0x40
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027e2:	2301      	movs	r3, #1
 80027e4:	e016      	b.n	8002814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa26 	bl	8002c40 <DMA_CalcBaseAndBitshift>
 80027f4:	4603      	mov	r3, r0
 80027f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	223f      	movs	r2, #63	; 0x3f
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	f010803f 	.word	0xf010803f

08002820 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_DMA_Start_IT+0x26>
 8002842:	2302      	movs	r3, #2
 8002844:	e040      	b.n	80028c8 <HAL_DMA_Start_IT+0xa8>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d12f      	bne.n	80028ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2202      	movs	r2, #2
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f9b8 	bl	8002be4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	223f      	movs	r2, #63	; 0x3f
 800287a:	409a      	lsls	r2, r3
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0216 	orr.w	r2, r2, #22
 800288e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0208 	orr.w	r2, r2, #8
 80028a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e005      	b.n	80028c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028dc:	4b8e      	ldr	r3, [pc, #568]	; (8002b18 <HAL_DMA_IRQHandler+0x248>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a8e      	ldr	r2, [pc, #568]	; (8002b1c <HAL_DMA_IRQHandler+0x24c>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0a9b      	lsrs	r3, r3, #10
 80028e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	2208      	movs	r2, #8
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01a      	beq.n	800293c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0204 	bic.w	r2, r2, #4
 8002922:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	2208      	movs	r2, #8
 800292a:	409a      	lsls	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	2201      	movs	r2, #1
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d012      	beq.n	8002972 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	2201      	movs	r2, #1
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f043 0202 	orr.w	r2, r3, #2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	2204      	movs	r2, #4
 8002978:	409a      	lsls	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d012      	beq.n	80029a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	2204      	movs	r2, #4
 8002996:	409a      	lsls	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0204 	orr.w	r2, r3, #4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2210      	movs	r2, #16
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d043      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d03c      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	2210      	movs	r2, #16
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d018      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d108      	bne.n	8002a00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d024      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
 80029fe:	e01f      	b.n	8002a40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
 8002a10:	e016      	b.n	8002a40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0208 	bic.w	r2, r2, #8
 8002a2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	2220      	movs	r2, #32
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 808f 	beq.w	8002b70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8087 	beq.w	8002b70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	2220      	movs	r2, #32
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d136      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0216 	bic.w	r2, r2, #22
 8002a88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <HAL_DMA_IRQHandler+0x1da>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0208 	bic.w	r2, r2, #8
 8002ab8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	223f      	movs	r2, #63	; 0x3f
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d07e      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
        }
        return;
 8002ae6:	e079      	b.n	8002bdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01d      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10d      	bne.n	8002b20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d031      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
 8002b14:	e02c      	b.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
 8002b16:	bf00      	nop
 8002b18:	20000008 	.word	0x20000008
 8002b1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d023      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
 8002b30:	e01e      	b.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0210 	bic.w	r2, r2, #16
 8002b4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d032      	beq.n	8002bde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d022      	beq.n	8002bca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2205      	movs	r2, #5
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d307      	bcc.n	8002bb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f2      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x2cc>
 8002bb6:	e000      	b.n	8002bba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
 8002bda:	e000      	b.n	8002bde <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bdc:	bf00      	nop
    }
  }
}
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d108      	bne.n	8002c24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c22:	e007      	b.n	8002c34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3b10      	subs	r3, #16
 8002c50:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c5a:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <DMA_CalcBaseAndBitshift+0x68>)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4413      	add	r3, r2
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d909      	bls.n	8002c82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c76:	f023 0303 	bic.w	r3, r3, #3
 8002c7a:	1d1a      	adds	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c80:	e007      	b.n	8002c92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	aaaaaaab 	.word	0xaaaaaaab
 8002ca8:	08007980 	.word	0x08007980

08002cac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d11f      	bne.n	8002d06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d856      	bhi.n	8002d7a <DMA_CheckFifoParam+0xce>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <DMA_CheckFifoParam+0x28>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002ce5 	.word	0x08002ce5
 8002cd8:	08002cf7 	.word	0x08002cf7
 8002cdc:	08002ce5 	.word	0x08002ce5
 8002ce0:	08002d7b 	.word	0x08002d7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d046      	beq.n	8002d7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e043      	b.n	8002d7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cfe:	d140      	bne.n	8002d82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d04:	e03d      	b.n	8002d82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0e:	d121      	bne.n	8002d54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d837      	bhi.n	8002d86 <DMA_CheckFifoParam+0xda>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <DMA_CheckFifoParam+0x70>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d33 	.word	0x08002d33
 8002d24:	08002d2d 	.word	0x08002d2d
 8002d28:	08002d45 	.word	0x08002d45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e030      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d025      	beq.n	8002d8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d42:	e022      	b.n	8002d8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d4c:	d11f      	bne.n	8002d8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d52:	e01c      	b.n	8002d8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d903      	bls.n	8002d62 <DMA_CheckFifoParam+0xb6>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d003      	beq.n	8002d68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d60:	e018      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
      break;
 8002d66:	e015      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00e      	beq.n	8002d92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      break;
 8002d78:	e00b      	b.n	8002d92 <DMA_CheckFifoParam+0xe6>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e00a      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e008      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e006      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e004      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
    }
  } 
  
  return status; 
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop

08002da4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06c      	b.n	8002e90 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2223      	movs	r2, #35	; 0x23
 8002dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fe fc19 	bl	8001600 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <HAL_ETH_Init+0xf4>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a30      	ldr	r2, [pc, #192]	; (8002e98 <HAL_ETH_Init+0xf4>)
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <HAL_ETH_Init+0xf4>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_ETH_Init+0xf8>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <HAL_ETH_Init+0xf8>)
 8002df0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002df4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_ETH_Init+0xf8>)
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4927      	ldr	r1, [pc, #156]	; (8002e9c <HAL_ETH_Init+0xf8>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HAL_ETH_Init+0xf8>)
 8002e06:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e20:	f7fe feec 	bl	8001bfc <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e26:	e011      	b.n	8002e4c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e28:	f7fe fee8 	bl	8001bfc <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e36:	d909      	bls.n	8002e4c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	22e0      	movs	r2, #224	; 0xe0
 8002e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e021      	b.n	8002e90 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e4      	bne.n	8002e28 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f958 	bl	8003114 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f9ff 	bl	8003268 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa55 	bl	800331a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	461a      	mov	r2, r3
 8002e76:	2100      	movs	r1, #0
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f9bd 	bl	80031f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40013800 	.word	0x40013800

08002ea0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4b51      	ldr	r3, [pc, #324]	; (8002ffc <ETH_SetMACConfig+0x15c>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	7c1b      	ldrb	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <ETH_SetMACConfig+0x28>
 8002ec2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ec6:	e000      	b.n	8002eca <ETH_SetMACConfig+0x2a>
 8002ec8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	7c5b      	ldrb	r3, [r3, #17]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <ETH_SetMACConfig+0x38>
 8002ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ed6:	e000      	b.n	8002eda <ETH_SetMACConfig+0x3a>
 8002ed8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002eda:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	7fdb      	ldrb	r3, [r3, #31]
 8002ee6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ee8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002eee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	7f92      	ldrb	r2, [r2, #30]
 8002ef4:	2a00      	cmp	r2, #0
 8002ef6:	d102      	bne.n	8002efe <ETH_SetMACConfig+0x5e>
 8002ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002efc:	e000      	b.n	8002f00 <ETH_SetMACConfig+0x60>
 8002efe:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7f1b      	ldrb	r3, [r3, #28]
 8002f06:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f08:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	791b      	ldrb	r3, [r3, #4]
 8002f14:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f1e:	2a00      	cmp	r2, #0
 8002f20:	d102      	bne.n	8002f28 <ETH_SetMACConfig+0x88>
 8002f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f26:	e000      	b.n	8002f2a <ETH_SetMACConfig+0x8a>
 8002f28:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	7bdb      	ldrb	r3, [r3, #15]
 8002f30:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f32:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f40:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f42:	4313      	orrs	r3, r2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f7fe fe5a 	bl	8001c14 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f76:	4013      	ands	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f86:	2a00      	cmp	r2, #0
 8002f88:	d101      	bne.n	8002f8e <ETH_SetMACConfig+0xee>
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	e000      	b.n	8002f90 <ETH_SetMACConfig+0xf0>
 8002f8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f90:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002f9e:	2a01      	cmp	r2, #1
 8002fa0:	d101      	bne.n	8002fa6 <ETH_SetMACConfig+0x106>
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	e000      	b.n	8002fa8 <ETH_SetMACConfig+0x108>
 8002fa6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002fa8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002fb0:	2a01      	cmp	r2, #1
 8002fb2:	d101      	bne.n	8002fb8 <ETH_SetMACConfig+0x118>
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	e000      	b.n	8002fba <ETH_SetMACConfig+0x11a>
 8002fb8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002fc2:	2a01      	cmp	r2, #1
 8002fc4:	d101      	bne.n	8002fca <ETH_SetMACConfig+0x12a>
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	e000      	b.n	8002fcc <ETH_SetMACConfig+0x12c>
 8002fca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7fe fe15 	bl	8001c14 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	ff20810f 	.word	0xff20810f

08003000 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <ETH_SetDMAConfig+0x110>)
 800301a:	4013      	ands	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	7b1b      	ldrb	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <ETH_SetDMAConfig+0x2c>
 8003026:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800302a:	e000      	b.n	800302e <ETH_SetDMAConfig+0x2e>
 800302c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	7b5b      	ldrb	r3, [r3, #13]
 8003032:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003034:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	7f52      	ldrb	r2, [r2, #29]
 800303a:	2a00      	cmp	r2, #0
 800303c:	d102      	bne.n	8003044 <ETH_SetDMAConfig+0x44>
 800303e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003042:	e000      	b.n	8003046 <ETH_SetDMAConfig+0x46>
 8003044:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003046:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	7b9b      	ldrb	r3, [r3, #14]
 800304c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800304e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003054:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	7f1b      	ldrb	r3, [r3, #28]
 800305a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800305c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	7f9b      	ldrb	r3, [r3, #30]
 8003062:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003064:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800306a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003072:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003074:	4313      	orrs	r3, r2
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003084:	461a      	mov	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003096:	2001      	movs	r0, #1
 8003098:	f7fe fdbc 	bl	8001c14 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	791b      	ldrb	r3, [r3, #4]
 80030ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80030ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80030ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fe fd8d 	bl	8001c14 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	f8de3f23 	.word	0xf8de3f23

08003114 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b0a6      	sub	sp, #152	; 0x98
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003128:	2300      	movs	r3, #0
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003132:	2301      	movs	r3, #1
 8003134:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003150:	2300      	movs	r3, #0
 8003152:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800315a:	2300      	movs	r3, #0
 800315c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003176:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800317a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800317c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003180:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003188:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800318c:	4619      	mov	r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff fe86 	bl	8002ea0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003194:	2301      	movs	r3, #1
 8003196:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003198:	2301      	movs	r3, #1
 800319a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031c0:	2301      	movs	r3, #1
 80031c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff08 	bl	8003000 <ETH_SetDMAConfig>
}
 80031f0:	bf00      	nop
 80031f2:	3798      	adds	r7, #152	; 0x98
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3305      	adds	r3, #5
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	3204      	adds	r2, #4
 8003210:	7812      	ldrb	r2, [r2, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <ETH_MACAddressConfig+0x68>)
 800321a:	4413      	add	r3, r2
 800321c:	461a      	mov	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3303      	adds	r3, #3
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	061a      	lsls	r2, r3, #24
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3302      	adds	r3, #2
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	041b      	lsls	r3, r3, #16
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3301      	adds	r3, #1
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	4313      	orrs	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <ETH_MACAddressConfig+0x6c>)
 800324a:	4413      	add	r3, r2
 800324c:	461a      	mov	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	6013      	str	r3, [r2, #0]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40028040 	.word	0x40028040
 8003264:	40028044 	.word	0x40028044

08003268 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e03e      	b.n	80032f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68d9      	ldr	r1, [r3, #12]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	3206      	adds	r2, #6
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d80c      	bhi.n	80032d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68d9      	ldr	r1, [r3, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e004      	b.n	80032e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d9bd      	bls.n	8003276 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330c:	611a      	str	r2, [r3, #16]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e046      	b.n	80033b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6919      	ldr	r1, [r3, #16]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	440b      	add	r3, r1
 8003338:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2200      	movs	r2, #0
 8003356:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2200      	movs	r2, #0
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003364:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800336c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	3212      	adds	r2, #18
 8003382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d80c      	bhi.n	80033a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6919      	ldr	r1, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	461a      	mov	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	e004      	b.n	80033b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3301      	adds	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d9b5      	bls.n	8003328 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e6:	60da      	str	r2, [r3, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e177      	b.n	8003700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	429a      	cmp	r2, r3
 800342a:	f040 8166 	bne.w	80036fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d005      	beq.n	8003446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	2b02      	cmp	r3, #2
 8003444:	d130      	bne.n	80034a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 0201 	and.w	r2, r3, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d017      	beq.n	80034e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d123      	bne.n	8003538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	08da      	lsrs	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3208      	adds	r2, #8
 80034f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	220f      	movs	r2, #15
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	08da      	lsrs	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3208      	adds	r2, #8
 8003532:	69b9      	ldr	r1, [r7, #24]
 8003534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0203 	and.w	r2, r3, #3
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80c0 	beq.w	80036fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	4b66      	ldr	r3, [pc, #408]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a65      	ldr	r2, [pc, #404]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b63      	ldr	r3, [pc, #396]	; (8003718 <HAL_GPIO_Init+0x324>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003596:	4a61      	ldr	r2, [pc, #388]	; (800371c <HAL_GPIO_Init+0x328>)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_GPIO_Init+0x32c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d037      	beq.n	8003632 <HAL_GPIO_Init+0x23e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_GPIO_Init+0x330>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_GPIO_Init+0x23a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_GPIO_Init+0x334>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d02b      	beq.n	800362a <HAL_GPIO_Init+0x236>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a55      	ldr	r2, [pc, #340]	; (800372c <HAL_GPIO_Init+0x338>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d025      	beq.n	8003626 <HAL_GPIO_Init+0x232>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a54      	ldr	r2, [pc, #336]	; (8003730 <HAL_GPIO_Init+0x33c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01f      	beq.n	8003622 <HAL_GPIO_Init+0x22e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a53      	ldr	r2, [pc, #332]	; (8003734 <HAL_GPIO_Init+0x340>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x22a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x344>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x226>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_GPIO_Init+0x348>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x222>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_GPIO_Init+0x34c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x21e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x350>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x21a>
 800360a:	2309      	movs	r3, #9
 800360c:	e012      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800360e:	230a      	movs	r3, #10
 8003610:	e010      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003612:	2308      	movs	r3, #8
 8003614:	e00e      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003616:	2307      	movs	r3, #7
 8003618:	e00c      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361a:	2306      	movs	r3, #6
 800361c:	e00a      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361e:	2305      	movs	r3, #5
 8003620:	e008      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003622:	2304      	movs	r3, #4
 8003624:	e006      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003626:	2303      	movs	r3, #3
 8003628:	e004      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362a:	2302      	movs	r3, #2
 800362c:	e002      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003632:	2300      	movs	r3, #0
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	f002 0203 	and.w	r2, r2, #3
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	4093      	lsls	r3, r2
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003644:	4935      	ldr	r1, [pc, #212]	; (800371c <HAL_GPIO_Init+0x328>)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	3302      	adds	r3, #2
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003676:	4a34      	ldr	r2, [pc, #208]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <HAL_GPIO_Init+0x354>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a0:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3301      	adds	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	f67f ae84 	bls.w	8003410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40013800 	.word	0x40013800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	40020800 	.word	0x40020800
 800372c:	40020c00 	.word	0x40020c00
 8003730:	40021000 	.word	0x40021000
 8003734:	40021400 	.word	0x40021400
 8003738:	40021800 	.word	0x40021800
 800373c:	40021c00 	.word	0x40021c00
 8003740:	40022000 	.word	0x40022000
 8003744:	40022400 	.word	0x40022400
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	e001      	b.n	800376e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
 8003788:	4613      	mov	r3, r2
 800378a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800378c:	787b      	ldrb	r3, [r7, #1]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003792:	887a      	ldrh	r2, [r7, #2]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003798:	e003      	b.n	80037a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800379a:	887b      	ldrh	r3, [r7, #2]
 800379c:	041a      	lsls	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	619a      	str	r2, [r3, #24]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037c0:	887a      	ldrh	r2, [r7, #2]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4013      	ands	r3, r2
 80037c6:	041a      	lsls	r2, r3, #16
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43d9      	mvns	r1, r3
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	400b      	ands	r3, r1
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	619a      	str	r2, [r3, #24]
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037fa:	4a05      	ldr	r2, [pc, #20]	; (8003810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd f8c2 	bl	800098c <HAL_GPIO_EXTI_Callback>
  }
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40013c00 	.word	0x40013c00

08003814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e12b      	b.n	8003a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd ffa6 	bl	800178c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	; 0x24
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003878:	f001 fa30 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 800387c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a81      	ldr	r2, [pc, #516]	; (8003a88 <HAL_I2C_Init+0x274>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d807      	bhi.n	8003898 <HAL_I2C_Init+0x84>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a80      	ldr	r2, [pc, #512]	; (8003a8c <HAL_I2C_Init+0x278>)
 800388c:	4293      	cmp	r3, r2
 800388e:	bf94      	ite	ls
 8003890:	2301      	movls	r3, #1
 8003892:	2300      	movhi	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e006      	b.n	80038a6 <HAL_I2C_Init+0x92>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a7d      	ldr	r2, [pc, #500]	; (8003a90 <HAL_I2C_Init+0x27c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	bf94      	ite	ls
 80038a0:	2301      	movls	r3, #1
 80038a2:	2300      	movhi	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0e7      	b.n	8003a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a78      	ldr	r2, [pc, #480]	; (8003a94 <HAL_I2C_Init+0x280>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	0c9b      	lsrs	r3, r3, #18
 80038b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a6a      	ldr	r2, [pc, #424]	; (8003a88 <HAL_I2C_Init+0x274>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d802      	bhi.n	80038e8 <HAL_I2C_Init+0xd4>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	e009      	b.n	80038fc <HAL_I2C_Init+0xe8>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	4a69      	ldr	r2, [pc, #420]	; (8003a98 <HAL_I2C_Init+0x284>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	3301      	adds	r3, #1
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	430b      	orrs	r3, r1
 8003902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800390e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	495c      	ldr	r1, [pc, #368]	; (8003a88 <HAL_I2C_Init+0x274>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d819      	bhi.n	8003950 <HAL_I2C_Init+0x13c>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1e59      	subs	r1, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	fbb1 f3f3 	udiv	r3, r1, r3
 800392a:	1c59      	adds	r1, r3, #1
 800392c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003930:	400b      	ands	r3, r1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_I2C_Init+0x138>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e59      	subs	r1, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fbb1 f3f3 	udiv	r3, r1, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394a:	e051      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 800394c:	2304      	movs	r3, #4
 800394e:	e04f      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d111      	bne.n	800397c <HAL_I2C_Init+0x168>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e58      	subs	r0, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e012      	b.n	80039a2 <HAL_I2C_Init+0x18e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	0099      	lsls	r1, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Init+0x196>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10e      	bne.n	80039d0 <HAL_I2C_Init+0x1bc>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1e58      	subs	r0, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	440b      	add	r3, r1
 80039c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ce:	e00f      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e58      	subs	r0, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	0099      	lsls	r1, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	6809      	ldr	r1, [r1, #0]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6911      	ldr	r1, [r2, #16]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68d2      	ldr	r2, [r2, #12]
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	000186a0 	.word	0x000186a0
 8003a8c:	001e847f 	.word	0x001e847f
 8003a90:	003d08ff 	.word	0x003d08ff
 8003a94:	431bde83 	.word	0x431bde83
 8003a98:	10624dd3 	.word	0x10624dd3

08003a9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	817b      	strh	r3, [r7, #10]
 8003aac:	4613      	mov	r3, r2
 8003aae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab0:	f7fe f8a4 	bl	8001bfc <HAL_GetTick>
 8003ab4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	f040 80e0 	bne.w	8003c84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2319      	movs	r3, #25
 8003aca:	2201      	movs	r2, #1
 8003acc:	4970      	ldr	r1, [pc, #448]	; (8003c90 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fa92 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
 8003adc:	e0d3      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_I2C_Master_Transmit+0x50>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e0cc      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d007      	beq.n	8003b12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2221      	movs	r2, #33	; 0x21
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	893a      	ldrh	r2, [r7, #8]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a50      	ldr	r2, [pc, #320]	; (8003c94 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b54:	8979      	ldrh	r1, [r7, #10]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	6a3a      	ldr	r2, [r7, #32]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f9ca 	bl	8003ef4 <I2C_MasterRequestWrite>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e08d      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b80:	e066      	b.n	8003c50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	6a39      	ldr	r1, [r7, #32]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb0c 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d107      	bne.n	8003baa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e06b      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	781a      	ldrb	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d11b      	bne.n	8003c24 <HAL_I2C_Master_Transmit+0x188>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d017      	beq.n	8003c24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	6a39      	ldr	r1, [r7, #32]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fafc 	bl	8004226 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d107      	bne.n	8003c4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e01a      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d194      	bne.n	8003b82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	00100002 	.word	0x00100002
 8003c94:	ffff0000 	.word	0xffff0000

08003c98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ca8:	f7fd ffa8 	bl	8001bfc <HAL_GetTick>
 8003cac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f040 8111 	bne.w	8003ee2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2319      	movs	r3, #25
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	4988      	ldr	r1, [pc, #544]	; (8003eec <HAL_I2C_IsDeviceReady+0x254>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f994 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e104      	b.n	8003ee4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2C_IsDeviceReady+0x50>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0fd      	b.n	8003ee4 <HAL_I2C_IsDeviceReady+0x24c>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d007      	beq.n	8003d0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2224      	movs	r2, #36	; 0x24
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a70      	ldr	r2, [pc, #448]	; (8003ef0 <HAL_I2C_IsDeviceReady+0x258>)
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f952 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d68:	d103      	bne.n	8003d72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0b6      	b.n	8003ee4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d76:	897b      	ldrh	r3, [r7, #10]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d86:	f7fd ff39 	bl	8001bfc <HAL_GetTick>
 8003d8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dba:	e025      	b.n	8003e08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dbc:	f7fd ff1e 	bl	8001bfc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d302      	bcc.n	8003dd2 <HAL_I2C_IsDeviceReady+0x13a>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	22a0      	movs	r2, #160	; 0xa0
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2ba0      	cmp	r3, #160	; 0xa0
 8003e12:	d005      	beq.n	8003e20 <HAL_I2C_IsDeviceReady+0x188>
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <HAL_I2C_IsDeviceReady+0x188>
 8003e1a:	7dbb      	ldrb	r3, [r7, #22]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0cd      	beq.n	8003dbc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d129      	bne.n	8003e8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2319      	movs	r3, #25
 8003e62:	2201      	movs	r2, #1
 8003e64:	4921      	ldr	r1, [pc, #132]	; (8003eec <HAL_I2C_IsDeviceReady+0x254>)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f8c6 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e036      	b.n	8003ee4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e02c      	b.n	8003ee4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ea2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2319      	movs	r3, #25
 8003eaa:	2201      	movs	r2, #1
 8003eac:	490f      	ldr	r1, [pc, #60]	; (8003eec <HAL_I2C_IsDeviceReady+0x254>)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f8a2 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e012      	b.n	8003ee4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f4ff af32 	bcc.w	8003d32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3720      	adds	r7, #32
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	00100002 	.word	0x00100002
 8003ef0:	ffff0000 	.word	0xffff0000

08003ef4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	460b      	mov	r3, r1
 8003f02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d006      	beq.n	8003f1e <I2C_MasterRequestWrite+0x2a>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d003      	beq.n	8003f1e <I2C_MasterRequestWrite+0x2a>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f1c:	d108      	bne.n	8003f30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e00b      	b.n	8003f48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	2b12      	cmp	r3, #18
 8003f36:	d107      	bne.n	8003f48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f84f 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d103      	bne.n	8003f78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e035      	b.n	8003fe8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f84:	d108      	bne.n	8003f98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f86:	897b      	ldrh	r3, [r7, #10]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f94:	611a      	str	r2, [r3, #16]
 8003f96:	e01b      	b.n	8003fd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f98:	897b      	ldrh	r3, [r7, #10]
 8003f9a:	11db      	asrs	r3, r3, #7
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 0306 	and.w	r3, r3, #6
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f063 030f 	orn	r3, r3, #15
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	490e      	ldr	r1, [pc, #56]	; (8003ff0 <I2C_MasterRequestWrite+0xfc>)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f875 	bl	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e010      	b.n	8003fe8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fc6:	897b      	ldrh	r3, [r7, #10]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4907      	ldr	r1, [pc, #28]	; (8003ff4 <I2C_MasterRequestWrite+0x100>)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f865 	bl	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	00010008 	.word	0x00010008
 8003ff4:	00010002 	.word	0x00010002

08003ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004008:	e025      	b.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d021      	beq.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fd fdf3 	bl	8001bfc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e023      	b.n	800409e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d10d      	bne.n	800407c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	e00c      	b.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	429a      	cmp	r2, r3
 800409a:	d0b6      	beq.n	800400a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b4:	e051      	b.n	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c4:	d123      	bne.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f043 0204 	orr.w	r2, r3, #4
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e046      	b.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d021      	beq.n	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fd fd71 	bl	8001bfc <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d116      	bne.n	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f043 0220 	orr.w	r2, r3, #32
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e020      	b.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10c      	bne.n	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	43da      	mvns	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4013      	ands	r3, r2
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	e00b      	b.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	43da      	mvns	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4013      	ands	r3, r2
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d18d      	bne.n	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b0:	e02d      	b.n	800420e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f878 	bl	80042a8 <I2C_IsAcknowledgeFailed>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e02d      	b.n	800421e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d021      	beq.n	800420e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fd fd17 	bl	8001bfc <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d116      	bne.n	800420e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e007      	b.n	800421e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d1ca      	bne.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004232:	e02d      	b.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f837 	bl	80042a8 <I2C_IsAcknowledgeFailed>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e02d      	b.n	80042a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d021      	beq.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424c:	f7fd fcd6 	bl	8001bfc <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d116      	bne.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e007      	b.n	80042a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b04      	cmp	r3, #4
 800429c:	d1ca      	bne.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042be:	d11b      	bne.n	80042f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f043 0204 	orr.w	r2, r3, #4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b20      	cmp	r3, #32
 800431a:	d129      	bne.n	8004370 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0210 	bic.w	r2, r2, #16
 8004342:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b20      	cmp	r3, #32
 8004396:	d12a      	bne.n	80043ee <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	; 0x24
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80043b8:	89fb      	ldrh	r3, [r7, #14]
 80043ba:	f023 030f 	bic.w	r3, r3, #15
 80043be:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	89fb      	ldrh	r3, [r7, #14]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	89fa      	ldrh	r2, [r7, #14]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
  }
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e267      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d075      	beq.n	8004506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800441a:	4b88      	ldr	r3, [pc, #544]	; (800463c <HAL_RCC_OscConfig+0x240>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b04      	cmp	r3, #4
 8004424:	d00c      	beq.n	8004440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4b85      	ldr	r3, [pc, #532]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442e:	2b08      	cmp	r3, #8
 8004430:	d112      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004432:	4b82      	ldr	r3, [pc, #520]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800443e:	d10b      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	4b7e      	ldr	r3, [pc, #504]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d05b      	beq.n	8004504 <HAL_RCC_OscConfig+0x108>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d157      	bne.n	8004504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e242      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d106      	bne.n	8004470 <HAL_RCC_OscConfig+0x74>
 8004462:	4b76      	ldr	r3, [pc, #472]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a75      	ldr	r2, [pc, #468]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01d      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x98>
 800447a:	4b70      	ldr	r3, [pc, #448]	; (800463c <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a6f      	ldr	r2, [pc, #444]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b6d      	ldr	r3, [pc, #436]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a6c      	ldr	r2, [pc, #432]	; (800463c <HAL_RCC_OscConfig+0x240>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004494:	4b69      	ldr	r3, [pc, #420]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a68      	ldr	r2, [pc, #416]	; (800463c <HAL_RCC_OscConfig+0x240>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b66      	ldr	r3, [pc, #408]	; (800463c <HAL_RCC_OscConfig+0x240>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a65      	ldr	r2, [pc, #404]	; (800463c <HAL_RCC_OscConfig+0x240>)
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fd fba2 	bl	8001bfc <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fd fb9e 	bl	8001bfc <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e207      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b5b      	ldr	r3, [pc, #364]	; (800463c <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0xc0>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fd fb8e 	bl	8001bfc <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fd fb8a 	bl	8001bfc <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1f3      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	4b51      	ldr	r3, [pc, #324]	; (800463c <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0xe8>
 8004502:	e000      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451e:	4b47      	ldr	r3, [pc, #284]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004526:	2b08      	cmp	r3, #8
 8004528:	d11c      	bne.n	8004564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452a:	4b44      	ldr	r3, [pc, #272]	; (800463c <HAL_RCC_OscConfig+0x240>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d116      	bne.n	8004564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004536:	4b41      	ldr	r3, [pc, #260]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_RCC_OscConfig+0x152>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e1c7      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454e:	4b3b      	ldr	r3, [pc, #236]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4937      	ldr	r1, [pc, #220]	; (800463c <HAL_RCC_OscConfig+0x240>)
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004562:	e03a      	b.n	80045da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456c:	4b34      	ldr	r3, [pc, #208]	; (8004640 <HAL_RCC_OscConfig+0x244>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fd fb43 	bl	8001bfc <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457a:	f7fd fb3f 	bl	8001bfc <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e1a8      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <HAL_RCC_OscConfig+0x240>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004598:	4b28      	ldr	r3, [pc, #160]	; (800463c <HAL_RCC_OscConfig+0x240>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4925      	ldr	r1, [pc, #148]	; (800463c <HAL_RCC_OscConfig+0x240>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	e015      	b.n	80045da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_RCC_OscConfig+0x244>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fd fb22 	bl	8001bfc <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fd fb1e 	bl	8001bfc <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e187      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d036      	beq.n	8004654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b15      	ldr	r3, [pc, #84]	; (8004644 <HAL_RCC_OscConfig+0x248>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fd fb02 	bl	8001bfc <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045fc:	f7fd fafe 	bl	8001bfc <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e167      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_OscConfig+0x240>)
 8004610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x200>
 800461a:	e01b      	b.n	8004654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800461c:	4b09      	ldr	r3, [pc, #36]	; (8004644 <HAL_RCC_OscConfig+0x248>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7fd faeb 	bl	8001bfc <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004628:	e00e      	b.n	8004648 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462a:	f7fd fae7 	bl	8001bfc <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d907      	bls.n	8004648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e150      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
 800463c:	40023800 	.word	0x40023800
 8004640:	42470000 	.word	0x42470000
 8004644:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004648:	4b88      	ldr	r3, [pc, #544]	; (800486c <HAL_RCC_OscConfig+0x470>)
 800464a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1ea      	bne.n	800462a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8097 	beq.w	8004790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004662:	2300      	movs	r3, #0
 8004664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004666:	4b81      	ldr	r3, [pc, #516]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	4b7d      	ldr	r3, [pc, #500]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	4a7c      	ldr	r2, [pc, #496]	; (800486c <HAL_RCC_OscConfig+0x470>)
 800467c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004680:	6413      	str	r3, [r2, #64]	; 0x40
 8004682:	4b7a      	ldr	r3, [pc, #488]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800468e:	2301      	movs	r3, #1
 8004690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004692:	4b77      	ldr	r3, [pc, #476]	; (8004870 <HAL_RCC_OscConfig+0x474>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d118      	bne.n	80046d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800469e:	4b74      	ldr	r3, [pc, #464]	; (8004870 <HAL_RCC_OscConfig+0x474>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a73      	ldr	r2, [pc, #460]	; (8004870 <HAL_RCC_OscConfig+0x474>)
 80046a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046aa:	f7fd faa7 	bl	8001bfc <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b2:	f7fd faa3 	bl	8001bfc <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e10c      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c4:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <HAL_RCC_OscConfig+0x474>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0f0      	beq.n	80046b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d106      	bne.n	80046e6 <HAL_RCC_OscConfig+0x2ea>
 80046d8:	4b64      	ldr	r3, [pc, #400]	; (800486c <HAL_RCC_OscConfig+0x470>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	4a63      	ldr	r2, [pc, #396]	; (800486c <HAL_RCC_OscConfig+0x470>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
 80046e4:	e01c      	b.n	8004720 <HAL_RCC_OscConfig+0x324>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x30c>
 80046ee:	4b5f      	ldr	r3, [pc, #380]	; (800486c <HAL_RCC_OscConfig+0x470>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	4a5e      	ldr	r2, [pc, #376]	; (800486c <HAL_RCC_OscConfig+0x470>)
 80046f4:	f043 0304 	orr.w	r3, r3, #4
 80046f8:	6713      	str	r3, [r2, #112]	; 0x70
 80046fa:	4b5c      	ldr	r3, [pc, #368]	; (800486c <HAL_RCC_OscConfig+0x470>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	4a5b      	ldr	r2, [pc, #364]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6713      	str	r3, [r2, #112]	; 0x70
 8004706:	e00b      	b.n	8004720 <HAL_RCC_OscConfig+0x324>
 8004708:	4b58      	ldr	r3, [pc, #352]	; (800486c <HAL_RCC_OscConfig+0x470>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a57      	ldr	r2, [pc, #348]	; (800486c <HAL_RCC_OscConfig+0x470>)
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
 8004714:	4b55      	ldr	r3, [pc, #340]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	4a54      	ldr	r2, [pc, #336]	; (800486c <HAL_RCC_OscConfig+0x470>)
 800471a:	f023 0304 	bic.w	r3, r3, #4
 800471e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d015      	beq.n	8004754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7fd fa68 	bl	8001bfc <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	e00a      	b.n	8004746 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004730:	f7fd fa64 	bl	8001bfc <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f241 3288 	movw	r2, #5000	; 0x1388
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e0cb      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004746:	4b49      	ldr	r3, [pc, #292]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0ee      	beq.n	8004730 <HAL_RCC_OscConfig+0x334>
 8004752:	e014      	b.n	800477e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004754:	f7fd fa52 	bl	8001bfc <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475a:	e00a      	b.n	8004772 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800475c:	f7fd fa4e 	bl	8001bfc <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f241 3288 	movw	r2, #5000	; 0x1388
 800476a:	4293      	cmp	r3, r2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e0b5      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004772:	4b3e      	ldr	r3, [pc, #248]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ee      	bne.n	800475c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d105      	bne.n	8004790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004784:	4b39      	ldr	r3, [pc, #228]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	4a38      	ldr	r2, [pc, #224]	; (800486c <HAL_RCC_OscConfig+0x470>)
 800478a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80a1 	beq.w	80048dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800479a:	4b34      	ldr	r3, [pc, #208]	; (800486c <HAL_RCC_OscConfig+0x470>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d05c      	beq.n	8004860 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d141      	bne.n	8004832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ae:	4b31      	ldr	r3, [pc, #196]	; (8004874 <HAL_RCC_OscConfig+0x478>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fd fa22 	bl	8001bfc <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fd fa1e 	bl	8001bfc <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e087      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	4b27      	ldr	r3, [pc, #156]	; (800486c <HAL_RCC_OscConfig+0x470>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	019b      	lsls	r3, r3, #6
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	3b01      	subs	r3, #1
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	061b      	lsls	r3, r3, #24
 80047fe:	491b      	ldr	r1, [pc, #108]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004800:	4313      	orrs	r3, r2
 8004802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004804:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <HAL_RCC_OscConfig+0x478>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7fd f9f7 	bl	8001bfc <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004812:	f7fd f9f3 	bl	8001bfc <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e05c      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x416>
 8004830:	e054      	b.n	80048dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCC_OscConfig+0x478>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fd f9e0 	bl	8001bfc <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004840:	f7fd f9dc 	bl	8001bfc <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e045      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_OscConfig+0x470>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x444>
 800485e:	e03d      	b.n	80048dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d107      	bne.n	8004878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e038      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
 800486c:	40023800 	.word	0x40023800
 8004870:	40007000 	.word	0x40007000
 8004874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004878:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <HAL_RCC_OscConfig+0x4ec>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d028      	beq.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d121      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d11a      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048a8:	4013      	ands	r3, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d111      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	3b01      	subs	r3, #1
 80048c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800

080048ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0cc      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004900:	4b68      	ldr	r3, [pc, #416]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d90c      	bls.n	8004928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b65      	ldr	r3, [pc, #404]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b63      	ldr	r3, [pc, #396]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0b8      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d020      	beq.n	8004976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004940:	4b59      	ldr	r3, [pc, #356]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a58      	ldr	r2, [pc, #352]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800494a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004958:	4b53      	ldr	r3, [pc, #332]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a52      	ldr	r2, [pc, #328]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4b50      	ldr	r3, [pc, #320]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	494d      	ldr	r1, [pc, #308]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d044      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d119      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e07f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049aa:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e06f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ba:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e067      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ca:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4934      	ldr	r1, [pc, #208]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049dc:	f7fd f90e 	bl	8001bfc <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e4:	f7fd f90a 	bl	8001bfc <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e04f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 020c 	and.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1eb      	bne.n	80049e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d20c      	bcs.n	8004a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e032      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4916      	ldr	r1, [pc, #88]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	490e      	ldr	r1, [pc, #56]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a72:	f000 f821 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	490a      	ldr	r1, [pc, #40]	; (8004aac <HAL_RCC_ClockConfig+0x1c0>)
 8004a84:	5ccb      	ldrb	r3, [r1, r3]
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fd f86e 	bl	8001b74 <HAL_InitTick>

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023c00 	.word	0x40023c00
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	08007968 	.word	0x08007968
 8004ab0:	20000008 	.word	0x20000008
 8004ab4:	2000000c 	.word	0x2000000c

08004ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004abc:	b094      	sub	sp, #80	; 0x50
 8004abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac8:	2300      	movs	r3, #0
 8004aca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad0:	4b79      	ldr	r3, [pc, #484]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d00d      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x40>
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	f200 80e1 	bhi.w	8004ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x34>
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aea:	e0db      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aec:	4b73      	ldr	r3, [pc, #460]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8004aee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004af0:	e0db      	b.n	8004caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004af2:	4b73      	ldr	r3, [pc, #460]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004af6:	e0d8      	b.n	8004caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af8:	4b6f      	ldr	r3, [pc, #444]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b02:	4b6d      	ldr	r3, [pc, #436]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d063      	beq.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0e:	4b6a      	ldr	r3, [pc, #424]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	099b      	lsrs	r3, r3, #6
 8004b14:	2200      	movs	r2, #0
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30
 8004b22:	2300      	movs	r3, #0
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
 8004b26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	f04f 0000 	mov.w	r0, #0
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	0159      	lsls	r1, r3, #5
 8004b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b3c:	0150      	lsls	r0, r2, #5
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4621      	mov	r1, r4
 8004b44:	1a51      	subs	r1, r2, r1
 8004b46:	6139      	str	r1, [r7, #16]
 8004b48:	4629      	mov	r1, r5
 8004b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	018b      	lsls	r3, r1, #6
 8004b60:	4651      	mov	r1, sl
 8004b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b66:	4651      	mov	r1, sl
 8004b68:	018a      	lsls	r2, r1, #6
 8004b6a:	4651      	mov	r1, sl
 8004b6c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b70:	4659      	mov	r1, fp
 8004b72:	eb63 0901 	sbc.w	r9, r3, r1
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b8a:	4690      	mov	r8, r2
 8004b8c:	4699      	mov	r9, r3
 8004b8e:	4623      	mov	r3, r4
 8004b90:	eb18 0303 	adds.w	r3, r8, r3
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	462b      	mov	r3, r5
 8004b98:	eb49 0303 	adc.w	r3, r9, r3
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004baa:	4629      	mov	r1, r5
 8004bac:	024b      	lsls	r3, r1, #9
 8004bae:	4621      	mov	r1, r4
 8004bb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	024a      	lsls	r2, r1, #9
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bc8:	f7fb fb6a 	bl	80002a0 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd4:	e058      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd6:	4b38      	ldr	r3, [pc, #224]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	099b      	lsrs	r3, r3, #6
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	4611      	mov	r1, r2
 8004be2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004be6:	623b      	str	r3, [r7, #32]
 8004be8:	2300      	movs	r3, #0
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
 8004bec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	f04f 0000 	mov.w	r0, #0
 8004bf8:	f04f 0100 	mov.w	r1, #0
 8004bfc:	0159      	lsls	r1, r3, #5
 8004bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c02:	0150      	lsls	r0, r2, #5
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4641      	mov	r1, r8
 8004c0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c0e:	4649      	mov	r1, r9
 8004c10:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c28:	ebb2 040a 	subs.w	r4, r2, sl
 8004c2c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	00eb      	lsls	r3, r5, #3
 8004c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c3e:	00e2      	lsls	r2, r4, #3
 8004c40:	4614      	mov	r4, r2
 8004c42:	461d      	mov	r5, r3
 8004c44:	4643      	mov	r3, r8
 8004c46:	18e3      	adds	r3, r4, r3
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	eb45 0303 	adc.w	r3, r5, r3
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c5e:	4629      	mov	r1, r5
 8004c60:	028b      	lsls	r3, r1, #10
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c68:	4621      	mov	r1, r4
 8004c6a:	028a      	lsls	r2, r1, #10
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c72:	2200      	movs	r2, #0
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	61fa      	str	r2, [r7, #28]
 8004c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c7c:	f7fb fb10 	bl	80002a0 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4613      	mov	r3, r2
 8004c86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	3301      	adds	r3, #1
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ca2:	e002      	b.n	8004caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ca6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3750      	adds	r7, #80	; 0x50
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	00f42400 	.word	0x00f42400
 8004cc0:	007a1200 	.word	0x007a1200

08004cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000008 	.word	0x20000008

08004cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ce0:	f7ff fff0 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0a9b      	lsrs	r3, r3, #10
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4903      	ldr	r1, [pc, #12]	; (8004d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	08007978 	.word	0x08007978

08004d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d08:	f7ff ffdc 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	0b5b      	lsrs	r3, r3, #13
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4903      	ldr	r1, [pc, #12]	; (8004d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40023800 	.word	0x40023800
 8004d28:	08007978 	.word	0x08007978

08004d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d105      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d075      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d60:	4b91      	ldr	r3, [pc, #580]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d66:	f7fc ff49 	bl	8001bfc <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d6e:	f7fc ff45 	bl	8001bfc <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e189      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d80:	4b8a      	ldr	r3, [pc, #552]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	019a      	lsls	r2, r3, #6
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	071b      	lsls	r3, r3, #28
 8004da4:	4981      	ldr	r1, [pc, #516]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01f      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004db8:	4b7c      	ldr	r3, [pc, #496]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dbe:	0f1b      	lsrs	r3, r3, #28
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	019a      	lsls	r2, r3, #6
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	071b      	lsls	r3, r3, #28
 8004dd8:	4974      	ldr	r1, [pc, #464]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004de0:	4b72      	ldr	r3, [pc, #456]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de6:	f023 021f 	bic.w	r2, r3, #31
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	496e      	ldr	r1, [pc, #440]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	019a      	lsls	r2, r3, #6
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	071b      	lsls	r3, r3, #28
 8004e18:	4964      	ldr	r1, [pc, #400]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e20:	4b61      	ldr	r3, [pc, #388]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e26:	f7fc fee9 	bl	8001bfc <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e2e:	f7fc fee5 	bl	8001bfc <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e129      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e40:	4b5a      	ldr	r3, [pc, #360]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d105      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d079      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e64:	4b52      	ldr	r3, [pc, #328]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e6a:	f7fc fec7 	bl	8001bfc <HAL_GetTick>
 8004e6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e72:	f7fc fec3 	bl	8001bfc <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e107      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e84:	4b49      	ldr	r3, [pc, #292]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e90:	d0ef      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d020      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e9e:	4b43      	ldr	r3, [pc, #268]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	0f1b      	lsrs	r3, r3, #28
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	019a      	lsls	r2, r3, #6
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	061b      	lsls	r3, r3, #24
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	071b      	lsls	r3, r3, #28
 8004ebe:	493b      	ldr	r1, [pc, #236]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ec6:	4b39      	ldr	r3, [pc, #228]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ecc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	4934      	ldr	r1, [pc, #208]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01e      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eec:	4b2f      	ldr	r3, [pc, #188]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	0e1b      	lsrs	r3, r3, #24
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	019a      	lsls	r2, r3, #6
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	061b      	lsls	r3, r3, #24
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	071b      	lsls	r3, r3, #28
 8004f0c:	4927      	ldr	r1, [pc, #156]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	4922      	ldr	r1, [pc, #136]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f2a:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f30:	f7fc fe64 	bl	8001bfc <HAL_GetTick>
 8004f34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f38:	f7fc fe60 	bl	8001bfc <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e0a4      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f4a:	4b18      	ldr	r3, [pc, #96]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f56:	d1ef      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 808b 	beq.w	800507c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	4b10      	ldr	r3, [pc, #64]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	4a0f      	ldr	r2, [pc, #60]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f74:	6413      	str	r3, [r2, #64]	; 0x40
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a0b      	ldr	r2, [pc, #44]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f8e:	f7fc fe35 	bl	8001bfc <HAL_GetTick>
 8004f92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f94:	e010      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f96:	f7fc fe31 	bl	8001bfc <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d909      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e075      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004fa8:	42470068 	.word	0x42470068
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	42470070 	.word	0x42470070
 8004fb4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fb8:	4b38      	ldr	r3, [pc, #224]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0e8      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fc4:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fcc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d02f      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d028      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fe2:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fec:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff2:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ff8:	4a29      	ldr	r2, [pc, #164]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ffe:	4b28      	ldr	r3, [pc, #160]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b01      	cmp	r3, #1
 8005008:	d114      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800500a:	f7fc fdf7 	bl	8001bfc <HAL_GetTick>
 800500e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005010:	e00a      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fc fdf3 	bl	8001bfc <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e035      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005028:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ee      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005040:	d10d      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005042:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005056:	4912      	ldr	r1, [pc, #72]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005058:	4313      	orrs	r3, r2
 800505a:	608b      	str	r3, [r1, #8]
 800505c:	e005      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	4a0f      	ldr	r2, [pc, #60]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005064:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005068:	6093      	str	r3, [r2, #8]
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800506c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005076:	490a      	ldr	r1, [pc, #40]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005078:	4313      	orrs	r3, r2
 800507a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005090:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40007000 	.word	0x40007000
 80050a0:	40023800 	.word	0x40023800
 80050a4:	42470e40 	.word	0x42470e40
 80050a8:	424711e0 	.word	0x424711e0

080050ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e066      	b.n	8005190 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	7f5b      	ldrb	r3, [r3, #29]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fc fba2 	bl	800181c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	22ca      	movs	r2, #202	; 0xca
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2253      	movs	r2, #83	; 0x53
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fd88 	bl	8005c04 <RTC_EnterInitMode>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d12c      	bne.n	8005158 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800510c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005110:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6899      	ldr	r1, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	68d2      	ldr	r2, [r2, #12]
 8005138:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6919      	ldr	r1, [r3, #16]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	041a      	lsls	r2, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fd8f 	bl	8005c72 <RTC_ExitInitMode>
 8005154:	4603      	mov	r3, r0
 8005156:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d113      	bne.n	8005186 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	22ff      	movs	r2, #255	; 0xff
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800518e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005198:	b590      	push	{r4, r7, lr}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	7f1b      	ldrb	r3, [r3, #28]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_RTC_SetTime+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e087      	b.n	80052c4 <HAL_RTC_SetTime+0x12c>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2202      	movs	r2, #2
 80051be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d126      	bne.n	8005214 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fd6c 	bl	8005cbc <RTC_ByteToBcd2>
 80051e4:	4603      	mov	r3, r0
 80051e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fd65 	bl	8005cbc <RTC_ByteToBcd2>
 80051f2:	4603      	mov	r3, r0
 80051f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	789b      	ldrb	r3, [r3, #2]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fd5d 	bl	8005cbc <RTC_ByteToBcd2>
 8005202:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005204:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	78db      	ldrb	r3, [r3, #3]
 800520c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e018      	b.n	8005246 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005234:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800523a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	78db      	ldrb	r3, [r3, #3]
 8005240:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	22ca      	movs	r2, #202	; 0xca
 800524c:	625a      	str	r2, [r3, #36]	; 0x24
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2253      	movs	r2, #83	; 0x53
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fcd4 	bl	8005c04 <RTC_EnterInitMode>
 800525c:	4603      	mov	r3, r0
 800525e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d120      	bne.n	80052a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005270:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005274:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005284:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6899      	ldr	r1, [r3, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fce7 	bl	8005c72 <RTC_ExitInitMode>
 80052a4:	4603      	mov	r3, r0
 80052a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d102      	bne.n	80052b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	22ff      	movs	r2, #255	; 0xff
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	771a      	strb	r2, [r3, #28]

  return status;
 80052c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd90      	pop	{r4, r7, pc}

080052cc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80052fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005302:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800530e:	b2da      	uxtb	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800531e:	b2da      	uxtb	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800532c:	b2da      	uxtb	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	0d9b      	lsrs	r3, r3, #22
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d11a      	bne.n	800537e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fcd2 	bl	8005cf6 <RTC_Bcd2ToByte>
 8005352:	4603      	mov	r3, r0
 8005354:	461a      	mov	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fcc9 	bl	8005cf6 <RTC_Bcd2ToByte>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	789b      	ldrb	r3, [r3, #2]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fcc0 	bl	8005cf6 <RTC_Bcd2ToByte>
 8005376:	4603      	mov	r3, r0
 8005378:	461a      	mov	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005388:	b590      	push	{r4, r7, lr}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	7f1b      	ldrb	r3, [r3, #28]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_RTC_SetDate+0x1c>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e071      	b.n	8005488 <HAL_RTC_SetDate+0x100>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2202      	movs	r2, #2
 80053ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10e      	bne.n	80053d4 <HAL_RTC_SetDate+0x4c>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	330a      	adds	r3, #10
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11c      	bne.n	8005414 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	78db      	ldrb	r3, [r3, #3]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fc6c 	bl	8005cbc <RTC_ByteToBcd2>
 80053e4:	4603      	mov	r3, r0
 80053e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fc65 	bl	8005cbc <RTC_ByteToBcd2>
 80053f2:	4603      	mov	r3, r0
 80053f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	789b      	ldrb	r3, [r3, #2]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fc5d 	bl	8005cbc <RTC_ByteToBcd2>
 8005402:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005404:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e00e      	b.n	8005432 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	78db      	ldrb	r3, [r3, #3]
 8005418:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005420:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005426:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	22ca      	movs	r2, #202	; 0xca
 8005438:	625a      	str	r2, [r3, #36]	; 0x24
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2253      	movs	r2, #83	; 0x53
 8005440:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fbde 	bl	8005c04 <RTC_EnterInitMode>
 8005448:	4603      	mov	r3, r0
 800544a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800544c:	7cfb      	ldrb	r3, [r7, #19]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10c      	bne.n	800546c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800545c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005460:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fc05 	bl	8005c72 <RTC_ExitInitMode>
 8005468:	4603      	mov	r3, r0
 800546a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d102      	bne.n	8005478 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	22ff      	movs	r2, #255	; 0xff
 800547e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	771a      	strb	r2, [r3, #28]

  return status;
 8005486:	7cfb      	ldrb	r3, [r7, #19]
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd90      	pop	{r4, r7, pc}

08005490 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	0b5b      	lsrs	r3, r3, #13
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d11a      	bne.n	8005524 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	78db      	ldrb	r3, [r3, #3]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fbff 	bl	8005cf6 <RTC_Bcd2ToByte>
 80054f8:	4603      	mov	r3, r0
 80054fa:	461a      	mov	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fbf6 	bl	8005cf6 <RTC_Bcd2ToByte>
 800550a:	4603      	mov	r3, r0
 800550c:	461a      	mov	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	789b      	ldrb	r3, [r3, #2]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fbed 	bl	8005cf6 <RTC_Bcd2ToByte>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800552e:	b590      	push	{r4, r7, lr}
 8005530:	b089      	sub	sp, #36	; 0x24
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	7f1b      	ldrb	r3, [r3, #28]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_RTC_SetAlarm+0x24>
 800554e:	2302      	movs	r3, #2
 8005550:	e113      	b.n	800577a <HAL_RTC_SetAlarm+0x24c>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2202      	movs	r2, #2
 800555c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d137      	bne.n	80055d4 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2200      	movs	r2, #0
 8005576:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fb9d 	bl	8005cbc <RTC_ByteToBcd2>
 8005582:	4603      	mov	r3, r0
 8005584:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fb96 	bl	8005cbc <RTC_ByteToBcd2>
 8005590:	4603      	mov	r3, r0
 8005592:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005594:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	789b      	ldrb	r3, [r3, #2]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fb8e 	bl	8005cbc <RTC_ByteToBcd2>
 80055a0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80055a2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	78db      	ldrb	r3, [r3, #3]
 80055aa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80055ac:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fb80 	bl	8005cbc <RTC_ByteToBcd2>
 80055bc:	4603      	mov	r3, r0
 80055be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80055c0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80055c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	e023      	b.n	800561c <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d102      	bne.n	80055e8 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80055f4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80055fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	78db      	ldrb	r3, [r3, #3]
 8005600:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005602:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f893 3020 	ldrb.w	r3, [r3, #32]
 800560a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800560c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005612:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005618:	4313      	orrs	r3, r2
 800561a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	22ca      	movs	r2, #202	; 0xca
 800562e:	625a      	str	r2, [r3, #36]	; 0x24
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2253      	movs	r2, #83	; 0x53
 8005636:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005640:	d148      	bne.n	80056d4 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005650:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005660:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	b2da      	uxtb	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005672:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005674:	f7fc fac2 	bl	8001bfc <HAL_GetTick>
 8005678:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800567a:	e013      	b.n	80056a4 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800567c:	f7fc fabe 	bl	8001bfc <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800568a:	d90b      	bls.n	80056a4 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	22ff      	movs	r2, #255	; 0xff
 8005692:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2203      	movs	r2, #3
 8005698:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e06a      	b.n	800577a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0e4      	beq.n	800567c <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d0:	609a      	str	r2, [r3, #8]
 80056d2:	e047      	b.n	8005764 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056e2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005704:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005706:	f7fc fa79 	bl	8001bfc <HAL_GetTick>
 800570a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800570c:	e013      	b.n	8005736 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800570e:	f7fc fa75 	bl	8001bfc <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800571c:	d90b      	bls.n	8005736 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	22ff      	movs	r2, #255	; 0xff
 8005724:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2203      	movs	r2, #3
 800572a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e021      	b.n	800577a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0e4      	beq.n	800570e <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005762:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	22ff      	movs	r2, #255	; 0xff
 800576a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3724      	adds	r7, #36	; 0x24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd90      	pop	{r4, r7, pc}
	...

08005784 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b089      	sub	sp, #36	; 0x24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005790:	4b9a      	ldr	r3, [pc, #616]	; (80059fc <HAL_RTC_SetAlarm_IT+0x278>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a9a      	ldr	r2, [pc, #616]	; (8005a00 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	0adb      	lsrs	r3, r3, #11
 800579c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	7f1b      	ldrb	r3, [r3, #28]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <HAL_RTC_SetAlarm_IT+0x36>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e11c      	b.n	80059f4 <HAL_RTC_SetAlarm_IT+0x270>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2202      	movs	r2, #2
 80057c4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d137      	bne.n	800583c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d102      	bne.n	80057e0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fa69 	bl	8005cbc <RTC_ByteToBcd2>
 80057ea:	4603      	mov	r3, r0
 80057ec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fa62 	bl	8005cbc <RTC_ByteToBcd2>
 80057f8:	4603      	mov	r3, r0
 80057fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80057fc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	789b      	ldrb	r3, [r3, #2]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fa5a 	bl	8005cbc <RTC_ByteToBcd2>
 8005808:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800580a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	78db      	ldrb	r3, [r3, #3]
 8005812:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005814:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fa4c 	bl	8005cbc <RTC_ByteToBcd2>
 8005824:	4603      	mov	r3, r0
 8005826:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005828:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005830:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005836:	4313      	orrs	r3, r2
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	e023      	b.n	8005884 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2200      	movs	r2, #0
 800584e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	785b      	ldrb	r3, [r3, #1]
 800585a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800585c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005862:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	78db      	ldrb	r3, [r3, #3]
 8005868:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800586a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005872:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005874:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800587a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005880:	4313      	orrs	r3, r2
 8005882:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800588c:	4313      	orrs	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	22ca      	movs	r2, #202	; 0xca
 8005896:	625a      	str	r2, [r3, #36]	; 0x24
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2253      	movs	r2, #83	; 0x53
 800589e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a8:	d141      	bne.n	800592e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058b8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80058ca:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1e5a      	subs	r2, r3, #1
 80058d0:	617a      	str	r2, [r7, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	22ff      	movs	r2, #255	; 0xff
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2203      	movs	r2, #3
 80058e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e082      	b.n	80059f4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0e7      	beq.n	80058cc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800591a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800592a:	609a      	str	r2, [r3, #8]
 800592c:	e04b      	b.n	80059c6 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800593c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800594e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005950:	4b2a      	ldr	r3, [pc, #168]	; (80059fc <HAL_RTC_SetAlarm_IT+0x278>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2a      	ldr	r2, [pc, #168]	; (8005a00 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	0adb      	lsrs	r3, r3, #11
 800595c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005960:	fb02 f303 	mul.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	1e5a      	subs	r2, r3, #1
 800596a:	617a      	str	r2, [r7, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10b      	bne.n	8005988 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	22ff      	movs	r2, #255	; 0xff
 8005976:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2203      	movs	r2, #3
 800597c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e035      	b.n	80059f4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0e7      	beq.n	8005966 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80059c6:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <HAL_RTC_SetAlarm_IT+0x280>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a0e      	ldr	r2, [pc, #56]	; (8005a04 <HAL_RTC_SetAlarm_IT+0x280>)
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80059d2:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <HAL_RTC_SetAlarm_IT+0x280>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	4a0b      	ldr	r2, [pc, #44]	; (8005a04 <HAL_RTC_SetAlarm_IT+0x280>)
 80059d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059dc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	22ff      	movs	r2, #255	; 0xff
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3724      	adds	r7, #36	; 0x24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd90      	pop	{r4, r7, pc}
 80059fc:	20000008 	.word	0x20000008
 8005a00:	10624dd3 	.word	0x10624dd3
 8005a04:	40013c00 	.word	0x40013c00

08005a08 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a24:	d10e      	bne.n	8005a44 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a2c:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e00d      	b.n	8005a60 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005a5e:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	0c1b      	lsrs	r3, r3, #16
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	0a1b      	lsrs	r3, r3, #8
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	0d9b      	lsrs	r3, r3, #22
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	0e1b      	lsrs	r3, r3, #24
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d125      	bne.n	8005b1c <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f90e 	bl	8005cf6 <RTC_Bcd2ToByte>
 8005ada:	4603      	mov	r3, r0
 8005adc:	461a      	mov	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f905 	bl	8005cf6 <RTC_Bcd2ToByte>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	789b      	ldrb	r3, [r3, #2]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f8fc 	bl	8005cf6 <RTC_Bcd2ToByte>
 8005afe:	4603      	mov	r3, r0
 8005b00:	461a      	mov	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f8f2 	bl	8005cf6 <RTC_Bcd2ToByte>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7fb fc81 	bl	8001454 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005b62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d012      	beq.n	8005b98 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f8d4 	bl	8005d2e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005b96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b9e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	775a      	strb	r2, [r3, #29]
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40013c00 	.word	0x40013c00

08005bb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bd0:	f7fc f814 	bl	8001bfc <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bd6:	e009      	b.n	8005bec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bd8:	f7fc f810 	bl	8001bfc <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005be6:	d901      	bls.n	8005bec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e007      	b.n	8005bfc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0ee      	beq.n	8005bd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d122      	bne.n	8005c68 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c32:	f7fb ffe3 	bl	8001bfc <HAL_GetTick>
 8005c36:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c38:	e00c      	b.n	8005c54 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c3a:	f7fb ffdf 	bl	8001bfc <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c48:	d904      	bls.n	8005c54 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d102      	bne.n	8005c68 <RTC_EnterInitMode+0x64>
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d1e8      	bne.n	8005c3a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c8c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff ff89 	bl	8005bb4 <HAL_RTC_WaitForSynchro>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2204      	movs	r2, #4
 8005cac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005cca:	e005      	b.n	8005cd8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	3b0a      	subs	r3, #10
 8005cd6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	2b09      	cmp	r3, #9
 8005cdc:	d8f6      	bhi.n	8005ccc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	b2db      	uxtb	r3, r3
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	091b      	lsrs	r3, r3, #4
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	0092      	lsls	r2, r2, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	4413      	add	r3, r2
 8005d20:	b2db      	uxtb	r3, r3
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e03f      	b.n	8005dd4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7fb fd89 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2224      	movs	r2, #36	; 0x24
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f928 	bl	8005fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695a      	ldr	r2, [r3, #20]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005daa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	; 0x28
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	4613      	mov	r3, r2
 8005dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d17c      	bne.n	8005ef6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_UART_Transmit+0x2c>
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e075      	b.n	8005ef8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Transmit+0x3e>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e06e      	b.n	8005ef8 <HAL_UART_Transmit+0x11c>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2221      	movs	r2, #33	; 0x21
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e30:	f7fb fee4 	bl	8001bfc <HAL_GetTick>
 8005e34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	88fa      	ldrh	r2, [r7, #6]
 8005e3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4a:	d108      	bne.n	8005e5e <HAL_UART_Transmit+0x82>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d104      	bne.n	8005e5e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	61bb      	str	r3, [r7, #24]
 8005e5c:	e003      	b.n	8005e66 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e6e:	e02a      	b.n	8005ec6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2200      	movs	r2, #0
 8005e78:	2180      	movs	r1, #128	; 0x80
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f840 	bl	8005f00 <UART_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e036      	b.n	8005ef8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10b      	bne.n	8005ea8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e9e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	e007      	b.n	8005eb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1cf      	bne.n	8005e70 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2140      	movs	r1, #64	; 0x40
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f810 	bl	8005f00 <UART_WaitOnFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e006      	b.n	8005ef8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e000      	b.n	8005ef8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ef6:	2302      	movs	r3, #2
  }
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b090      	sub	sp, #64	; 0x40
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f10:	e050      	b.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	d04c      	beq.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f20:	f7fb fe6c 	bl	8001bfc <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d241      	bcs.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f50:	637a      	str	r2, [r7, #52]	; 0x34
 8005f52:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e5      	bne.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3314      	adds	r3, #20
 8005f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	613b      	str	r3, [r7, #16]
   return(result);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f84:	623a      	str	r2, [r7, #32]
 8005f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	69f9      	ldr	r1, [r7, #28]
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e5      	bne.n	8005f64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e00f      	b.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2301      	moveq	r3, #1
 8005fc6:	2300      	movne	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d09f      	beq.n	8005f12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3740      	adds	r7, #64	; 0x40
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe0:	b0c0      	sub	sp, #256	; 0x100
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	68d9      	ldr	r1, [r3, #12]
 8005ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	ea40 0301 	orr.w	r3, r0, r1
 8006004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	431a      	orrs	r2, r3
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	431a      	orrs	r2, r3
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006034:	f021 010c 	bic.w	r1, r1, #12
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006042:	430b      	orrs	r3, r1
 8006044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006056:	6999      	ldr	r1, [r3, #24]
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	ea40 0301 	orr.w	r3, r0, r1
 8006062:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b8f      	ldr	r3, [pc, #572]	; (80062a8 <UART_SetConfig+0x2cc>)
 800606c:	429a      	cmp	r2, r3
 800606e:	d005      	beq.n	800607c <UART_SetConfig+0xa0>
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b8d      	ldr	r3, [pc, #564]	; (80062ac <UART_SetConfig+0x2d0>)
 8006078:	429a      	cmp	r2, r3
 800607a:	d104      	bne.n	8006086 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800607c:	f7fe fe42 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 8006080:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006084:	e003      	b.n	800608e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006086:	f7fe fe29 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 800608a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006098:	f040 810c 	bne.w	80062b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800609c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060ae:	4622      	mov	r2, r4
 80060b0:	462b      	mov	r3, r5
 80060b2:	1891      	adds	r1, r2, r2
 80060b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80060b6:	415b      	adcs	r3, r3
 80060b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060be:	4621      	mov	r1, r4
 80060c0:	eb12 0801 	adds.w	r8, r2, r1
 80060c4:	4629      	mov	r1, r5
 80060c6:	eb43 0901 	adc.w	r9, r3, r1
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060de:	4690      	mov	r8, r2
 80060e0:	4699      	mov	r9, r3
 80060e2:	4623      	mov	r3, r4
 80060e4:	eb18 0303 	adds.w	r3, r8, r3
 80060e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060ec:	462b      	mov	r3, r5
 80060ee:	eb49 0303 	adc.w	r3, r9, r3
 80060f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006102:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800610a:	460b      	mov	r3, r1
 800610c:	18db      	adds	r3, r3, r3
 800610e:	653b      	str	r3, [r7, #80]	; 0x50
 8006110:	4613      	mov	r3, r2
 8006112:	eb42 0303 	adc.w	r3, r2, r3
 8006116:	657b      	str	r3, [r7, #84]	; 0x54
 8006118:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800611c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006120:	f7fa f8be 	bl	80002a0 <__aeabi_uldivmod>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4b61      	ldr	r3, [pc, #388]	; (80062b0 <UART_SetConfig+0x2d4>)
 800612a:	fba3 2302 	umull	r2, r3, r3, r2
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	011c      	lsls	r4, r3, #4
 8006132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006136:	2200      	movs	r2, #0
 8006138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800613c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006140:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006144:	4642      	mov	r2, r8
 8006146:	464b      	mov	r3, r9
 8006148:	1891      	adds	r1, r2, r2
 800614a:	64b9      	str	r1, [r7, #72]	; 0x48
 800614c:	415b      	adcs	r3, r3
 800614e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006154:	4641      	mov	r1, r8
 8006156:	eb12 0a01 	adds.w	sl, r2, r1
 800615a:	4649      	mov	r1, r9
 800615c:	eb43 0b01 	adc.w	fp, r3, r1
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800616c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006174:	4692      	mov	sl, r2
 8006176:	469b      	mov	fp, r3
 8006178:	4643      	mov	r3, r8
 800617a:	eb1a 0303 	adds.w	r3, sl, r3
 800617e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006182:	464b      	mov	r3, r9
 8006184:	eb4b 0303 	adc.w	r3, fp, r3
 8006188:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006198:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800619c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061a0:	460b      	mov	r3, r1
 80061a2:	18db      	adds	r3, r3, r3
 80061a4:	643b      	str	r3, [r7, #64]	; 0x40
 80061a6:	4613      	mov	r3, r2
 80061a8:	eb42 0303 	adc.w	r3, r2, r3
 80061ac:	647b      	str	r3, [r7, #68]	; 0x44
 80061ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061b6:	f7fa f873 	bl	80002a0 <__aeabi_uldivmod>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	4b3b      	ldr	r3, [pc, #236]	; (80062b0 <UART_SetConfig+0x2d4>)
 80061c2:	fba3 2301 	umull	r2, r3, r3, r1
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	2264      	movs	r2, #100	; 0x64
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	1acb      	subs	r3, r1, r3
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061d6:	4b36      	ldr	r3, [pc, #216]	; (80062b0 <UART_SetConfig+0x2d4>)
 80061d8:	fba3 2302 	umull	r2, r3, r3, r2
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061e4:	441c      	add	r4, r3
 80061e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	1891      	adds	r1, r2, r2
 80061fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006200:	415b      	adcs	r3, r3
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006208:	4641      	mov	r1, r8
 800620a:	1851      	adds	r1, r2, r1
 800620c:	6339      	str	r1, [r7, #48]	; 0x30
 800620e:	4649      	mov	r1, r9
 8006210:	414b      	adcs	r3, r1
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006220:	4659      	mov	r1, fp
 8006222:	00cb      	lsls	r3, r1, #3
 8006224:	4651      	mov	r1, sl
 8006226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800622a:	4651      	mov	r1, sl
 800622c:	00ca      	lsls	r2, r1, #3
 800622e:	4610      	mov	r0, r2
 8006230:	4619      	mov	r1, r3
 8006232:	4603      	mov	r3, r0
 8006234:	4642      	mov	r2, r8
 8006236:	189b      	adds	r3, r3, r2
 8006238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800623c:	464b      	mov	r3, r9
 800623e:	460a      	mov	r2, r1
 8006240:	eb42 0303 	adc.w	r3, r2, r3
 8006244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006254:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800625c:	460b      	mov	r3, r1
 800625e:	18db      	adds	r3, r3, r3
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
 8006262:	4613      	mov	r3, r2
 8006264:	eb42 0303 	adc.w	r3, r2, r3
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800626a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800626e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006272:	f7fa f815 	bl	80002a0 <__aeabi_uldivmod>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <UART_SetConfig+0x2d4>)
 800627c:	fba3 1302 	umull	r1, r3, r3, r2
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	2164      	movs	r1, #100	; 0x64
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	3332      	adds	r3, #50	; 0x32
 800628e:	4a08      	ldr	r2, [pc, #32]	; (80062b0 <UART_SetConfig+0x2d4>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	f003 0207 	and.w	r2, r3, #7
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4422      	add	r2, r4
 80062a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062a4:	e106      	b.n	80064b4 <UART_SetConfig+0x4d8>
 80062a6:	bf00      	nop
 80062a8:	40011000 	.word	0x40011000
 80062ac:	40011400 	.word	0x40011400
 80062b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062c6:	4642      	mov	r2, r8
 80062c8:	464b      	mov	r3, r9
 80062ca:	1891      	adds	r1, r2, r2
 80062cc:	6239      	str	r1, [r7, #32]
 80062ce:	415b      	adcs	r3, r3
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
 80062d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062d6:	4641      	mov	r1, r8
 80062d8:	1854      	adds	r4, r2, r1
 80062da:	4649      	mov	r1, r9
 80062dc:	eb43 0501 	adc.w	r5, r3, r1
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	00eb      	lsls	r3, r5, #3
 80062ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ee:	00e2      	lsls	r2, r4, #3
 80062f0:	4614      	mov	r4, r2
 80062f2:	461d      	mov	r5, r3
 80062f4:	4643      	mov	r3, r8
 80062f6:	18e3      	adds	r3, r4, r3
 80062f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062fc:	464b      	mov	r3, r9
 80062fe:	eb45 0303 	adc.w	r3, r5, r3
 8006302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006322:	4629      	mov	r1, r5
 8006324:	008b      	lsls	r3, r1, #2
 8006326:	4621      	mov	r1, r4
 8006328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800632c:	4621      	mov	r1, r4
 800632e:	008a      	lsls	r2, r1, #2
 8006330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006334:	f7f9 ffb4 	bl	80002a0 <__aeabi_uldivmod>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4b60      	ldr	r3, [pc, #384]	; (80064c0 <UART_SetConfig+0x4e4>)
 800633e:	fba3 2302 	umull	r2, r3, r3, r2
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	011c      	lsls	r4, r3, #4
 8006346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800634a:	2200      	movs	r2, #0
 800634c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006350:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006354:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006358:	4642      	mov	r2, r8
 800635a:	464b      	mov	r3, r9
 800635c:	1891      	adds	r1, r2, r2
 800635e:	61b9      	str	r1, [r7, #24]
 8006360:	415b      	adcs	r3, r3
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006368:	4641      	mov	r1, r8
 800636a:	1851      	adds	r1, r2, r1
 800636c:	6139      	str	r1, [r7, #16]
 800636e:	4649      	mov	r1, r9
 8006370:	414b      	adcs	r3, r1
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006380:	4659      	mov	r1, fp
 8006382:	00cb      	lsls	r3, r1, #3
 8006384:	4651      	mov	r1, sl
 8006386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800638a:	4651      	mov	r1, sl
 800638c:	00ca      	lsls	r2, r1, #3
 800638e:	4610      	mov	r0, r2
 8006390:	4619      	mov	r1, r3
 8006392:	4603      	mov	r3, r0
 8006394:	4642      	mov	r2, r8
 8006396:	189b      	adds	r3, r3, r2
 8006398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800639c:	464b      	mov	r3, r9
 800639e:	460a      	mov	r2, r1
 80063a0:	eb42 0303 	adc.w	r3, r2, r3
 80063a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80063b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063c0:	4649      	mov	r1, r9
 80063c2:	008b      	lsls	r3, r1, #2
 80063c4:	4641      	mov	r1, r8
 80063c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ca:	4641      	mov	r1, r8
 80063cc:	008a      	lsls	r2, r1, #2
 80063ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063d2:	f7f9 ff65 	bl	80002a0 <__aeabi_uldivmod>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4611      	mov	r1, r2
 80063dc:	4b38      	ldr	r3, [pc, #224]	; (80064c0 <UART_SetConfig+0x4e4>)
 80063de:	fba3 2301 	umull	r2, r3, r3, r1
 80063e2:	095b      	lsrs	r3, r3, #5
 80063e4:	2264      	movs	r2, #100	; 0x64
 80063e6:	fb02 f303 	mul.w	r3, r2, r3
 80063ea:	1acb      	subs	r3, r1, r3
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	3332      	adds	r3, #50	; 0x32
 80063f0:	4a33      	ldr	r2, [pc, #204]	; (80064c0 <UART_SetConfig+0x4e4>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063fc:	441c      	add	r4, r3
 80063fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006402:	2200      	movs	r2, #0
 8006404:	673b      	str	r3, [r7, #112]	; 0x70
 8006406:	677a      	str	r2, [r7, #116]	; 0x74
 8006408:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800640c:	4642      	mov	r2, r8
 800640e:	464b      	mov	r3, r9
 8006410:	1891      	adds	r1, r2, r2
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	415b      	adcs	r3, r3
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800641c:	4641      	mov	r1, r8
 800641e:	1851      	adds	r1, r2, r1
 8006420:	6039      	str	r1, [r7, #0]
 8006422:	4649      	mov	r1, r9
 8006424:	414b      	adcs	r3, r1
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006434:	4659      	mov	r1, fp
 8006436:	00cb      	lsls	r3, r1, #3
 8006438:	4651      	mov	r1, sl
 800643a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800643e:	4651      	mov	r1, sl
 8006440:	00ca      	lsls	r2, r1, #3
 8006442:	4610      	mov	r0, r2
 8006444:	4619      	mov	r1, r3
 8006446:	4603      	mov	r3, r0
 8006448:	4642      	mov	r2, r8
 800644a:	189b      	adds	r3, r3, r2
 800644c:	66bb      	str	r3, [r7, #104]	; 0x68
 800644e:	464b      	mov	r3, r9
 8006450:	460a      	mov	r2, r1
 8006452:	eb42 0303 	adc.w	r3, r2, r3
 8006456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	663b      	str	r3, [r7, #96]	; 0x60
 8006462:	667a      	str	r2, [r7, #100]	; 0x64
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006470:	4649      	mov	r1, r9
 8006472:	008b      	lsls	r3, r1, #2
 8006474:	4641      	mov	r1, r8
 8006476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800647a:	4641      	mov	r1, r8
 800647c:	008a      	lsls	r2, r1, #2
 800647e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006482:	f7f9 ff0d 	bl	80002a0 <__aeabi_uldivmod>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <UART_SetConfig+0x4e4>)
 800648c:	fba3 1302 	umull	r1, r3, r3, r2
 8006490:	095b      	lsrs	r3, r3, #5
 8006492:	2164      	movs	r1, #100	; 0x64
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	3332      	adds	r3, #50	; 0x32
 800649e:	4a08      	ldr	r2, [pc, #32]	; (80064c0 <UART_SetConfig+0x4e4>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	f003 020f 	and.w	r2, r3, #15
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4422      	add	r2, r4
 80064b2:	609a      	str	r2, [r3, #8]
}
 80064b4:	bf00      	nop
 80064b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064ba:	46bd      	mov	sp, r7
 80064bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064c0:	51eb851f 	.word	0x51eb851f

080064c4 <std>:
 80064c4:	2300      	movs	r3, #0
 80064c6:	b510      	push	{r4, lr}
 80064c8:	4604      	mov	r4, r0
 80064ca:	e9c0 3300 	strd	r3, r3, [r0]
 80064ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064d2:	6083      	str	r3, [r0, #8]
 80064d4:	8181      	strh	r1, [r0, #12]
 80064d6:	6643      	str	r3, [r0, #100]	; 0x64
 80064d8:	81c2      	strh	r2, [r0, #14]
 80064da:	6183      	str	r3, [r0, #24]
 80064dc:	4619      	mov	r1, r3
 80064de:	2208      	movs	r2, #8
 80064e0:	305c      	adds	r0, #92	; 0x5c
 80064e2:	f000 fa4b 	bl	800697c <memset>
 80064e6:	4b0d      	ldr	r3, [pc, #52]	; (800651c <std+0x58>)
 80064e8:	6263      	str	r3, [r4, #36]	; 0x24
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <std+0x5c>)
 80064ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80064ee:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <std+0x60>)
 80064f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064f2:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <std+0x64>)
 80064f4:	6323      	str	r3, [r4, #48]	; 0x30
 80064f6:	4b0d      	ldr	r3, [pc, #52]	; (800652c <std+0x68>)
 80064f8:	6224      	str	r4, [r4, #32]
 80064fa:	429c      	cmp	r4, r3
 80064fc:	d006      	beq.n	800650c <std+0x48>
 80064fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006502:	4294      	cmp	r4, r2
 8006504:	d002      	beq.n	800650c <std+0x48>
 8006506:	33d0      	adds	r3, #208	; 0xd0
 8006508:	429c      	cmp	r4, r3
 800650a:	d105      	bne.n	8006518 <std+0x54>
 800650c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006514:	f000 baaa 	b.w	8006a6c <__retarget_lock_init_recursive>
 8006518:	bd10      	pop	{r4, pc}
 800651a:	bf00      	nop
 800651c:	080067cd 	.word	0x080067cd
 8006520:	080067ef 	.word	0x080067ef
 8006524:	08006827 	.word	0x08006827
 8006528:	0800684b 	.word	0x0800684b
 800652c:	200004cc 	.word	0x200004cc

08006530 <stdio_exit_handler>:
 8006530:	4a02      	ldr	r2, [pc, #8]	; (800653c <stdio_exit_handler+0xc>)
 8006532:	4903      	ldr	r1, [pc, #12]	; (8006540 <stdio_exit_handler+0x10>)
 8006534:	4803      	ldr	r0, [pc, #12]	; (8006544 <stdio_exit_handler+0x14>)
 8006536:	f000 b869 	b.w	800660c <_fwalk_sglue>
 800653a:	bf00      	nop
 800653c:	20000014 	.word	0x20000014
 8006540:	080075c9 	.word	0x080075c9
 8006544:	20000020 	.word	0x20000020

08006548 <cleanup_stdio>:
 8006548:	6841      	ldr	r1, [r0, #4]
 800654a:	4b0c      	ldr	r3, [pc, #48]	; (800657c <cleanup_stdio+0x34>)
 800654c:	4299      	cmp	r1, r3
 800654e:	b510      	push	{r4, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	d001      	beq.n	8006558 <cleanup_stdio+0x10>
 8006554:	f001 f838 	bl	80075c8 <_fflush_r>
 8006558:	68a1      	ldr	r1, [r4, #8]
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <cleanup_stdio+0x38>)
 800655c:	4299      	cmp	r1, r3
 800655e:	d002      	beq.n	8006566 <cleanup_stdio+0x1e>
 8006560:	4620      	mov	r0, r4
 8006562:	f001 f831 	bl	80075c8 <_fflush_r>
 8006566:	68e1      	ldr	r1, [r4, #12]
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <cleanup_stdio+0x3c>)
 800656a:	4299      	cmp	r1, r3
 800656c:	d004      	beq.n	8006578 <cleanup_stdio+0x30>
 800656e:	4620      	mov	r0, r4
 8006570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006574:	f001 b828 	b.w	80075c8 <_fflush_r>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	bf00      	nop
 800657c:	200004cc 	.word	0x200004cc
 8006580:	20000534 	.word	0x20000534
 8006584:	2000059c 	.word	0x2000059c

08006588 <global_stdio_init.part.0>:
 8006588:	b510      	push	{r4, lr}
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <global_stdio_init.part.0+0x30>)
 800658c:	4c0b      	ldr	r4, [pc, #44]	; (80065bc <global_stdio_init.part.0+0x34>)
 800658e:	4a0c      	ldr	r2, [pc, #48]	; (80065c0 <global_stdio_init.part.0+0x38>)
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	4620      	mov	r0, r4
 8006594:	2200      	movs	r2, #0
 8006596:	2104      	movs	r1, #4
 8006598:	f7ff ff94 	bl	80064c4 <std>
 800659c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065a0:	2201      	movs	r2, #1
 80065a2:	2109      	movs	r1, #9
 80065a4:	f7ff ff8e 	bl	80064c4 <std>
 80065a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80065ac:	2202      	movs	r2, #2
 80065ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b2:	2112      	movs	r1, #18
 80065b4:	f7ff bf86 	b.w	80064c4 <std>
 80065b8:	20000604 	.word	0x20000604
 80065bc:	200004cc 	.word	0x200004cc
 80065c0:	08006531 	.word	0x08006531

080065c4 <__sfp_lock_acquire>:
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <__sfp_lock_acquire+0x8>)
 80065c6:	f000 ba52 	b.w	8006a6e <__retarget_lock_acquire_recursive>
 80065ca:	bf00      	nop
 80065cc:	2000060d 	.word	0x2000060d

080065d0 <__sfp_lock_release>:
 80065d0:	4801      	ldr	r0, [pc, #4]	; (80065d8 <__sfp_lock_release+0x8>)
 80065d2:	f000 ba4d 	b.w	8006a70 <__retarget_lock_release_recursive>
 80065d6:	bf00      	nop
 80065d8:	2000060d 	.word	0x2000060d

080065dc <__sinit>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	4604      	mov	r4, r0
 80065e0:	f7ff fff0 	bl	80065c4 <__sfp_lock_acquire>
 80065e4:	6a23      	ldr	r3, [r4, #32]
 80065e6:	b11b      	cbz	r3, 80065f0 <__sinit+0x14>
 80065e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ec:	f7ff bff0 	b.w	80065d0 <__sfp_lock_release>
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <__sinit+0x28>)
 80065f2:	6223      	str	r3, [r4, #32]
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <__sinit+0x2c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f5      	bne.n	80065e8 <__sinit+0xc>
 80065fc:	f7ff ffc4 	bl	8006588 <global_stdio_init.part.0>
 8006600:	e7f2      	b.n	80065e8 <__sinit+0xc>
 8006602:	bf00      	nop
 8006604:	08006549 	.word	0x08006549
 8006608:	20000604 	.word	0x20000604

0800660c <_fwalk_sglue>:
 800660c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006610:	4607      	mov	r7, r0
 8006612:	4688      	mov	r8, r1
 8006614:	4614      	mov	r4, r2
 8006616:	2600      	movs	r6, #0
 8006618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800661c:	f1b9 0901 	subs.w	r9, r9, #1
 8006620:	d505      	bpl.n	800662e <_fwalk_sglue+0x22>
 8006622:	6824      	ldr	r4, [r4, #0]
 8006624:	2c00      	cmp	r4, #0
 8006626:	d1f7      	bne.n	8006618 <_fwalk_sglue+0xc>
 8006628:	4630      	mov	r0, r6
 800662a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800662e:	89ab      	ldrh	r3, [r5, #12]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d907      	bls.n	8006644 <_fwalk_sglue+0x38>
 8006634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006638:	3301      	adds	r3, #1
 800663a:	d003      	beq.n	8006644 <_fwalk_sglue+0x38>
 800663c:	4629      	mov	r1, r5
 800663e:	4638      	mov	r0, r7
 8006640:	47c0      	blx	r8
 8006642:	4306      	orrs	r6, r0
 8006644:	3568      	adds	r5, #104	; 0x68
 8006646:	e7e9      	b.n	800661c <_fwalk_sglue+0x10>

08006648 <iprintf>:
 8006648:	b40f      	push	{r0, r1, r2, r3}
 800664a:	b507      	push	{r0, r1, r2, lr}
 800664c:	4906      	ldr	r1, [pc, #24]	; (8006668 <iprintf+0x20>)
 800664e:	ab04      	add	r3, sp, #16
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	f853 2b04 	ldr.w	r2, [r3], #4
 8006656:	6881      	ldr	r1, [r0, #8]
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	f000 fc85 	bl	8006f68 <_vfiprintf_r>
 800665e:	b003      	add	sp, #12
 8006660:	f85d eb04 	ldr.w	lr, [sp], #4
 8006664:	b004      	add	sp, #16
 8006666:	4770      	bx	lr
 8006668:	2000006c 	.word	0x2000006c

0800666c <_puts_r>:
 800666c:	6a03      	ldr	r3, [r0, #32]
 800666e:	b570      	push	{r4, r5, r6, lr}
 8006670:	6884      	ldr	r4, [r0, #8]
 8006672:	4605      	mov	r5, r0
 8006674:	460e      	mov	r6, r1
 8006676:	b90b      	cbnz	r3, 800667c <_puts_r+0x10>
 8006678:	f7ff ffb0 	bl	80065dc <__sinit>
 800667c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800667e:	07db      	lsls	r3, r3, #31
 8006680:	d405      	bmi.n	800668e <_puts_r+0x22>
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	0598      	lsls	r0, r3, #22
 8006686:	d402      	bmi.n	800668e <_puts_r+0x22>
 8006688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668a:	f000 f9f0 	bl	8006a6e <__retarget_lock_acquire_recursive>
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	0719      	lsls	r1, r3, #28
 8006692:	d513      	bpl.n	80066bc <_puts_r+0x50>
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	b18b      	cbz	r3, 80066bc <_puts_r+0x50>
 8006698:	3e01      	subs	r6, #1
 800669a:	68a3      	ldr	r3, [r4, #8]
 800669c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066a0:	3b01      	subs	r3, #1
 80066a2:	60a3      	str	r3, [r4, #8]
 80066a4:	b9e9      	cbnz	r1, 80066e2 <_puts_r+0x76>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	da2e      	bge.n	8006708 <_puts_r+0x9c>
 80066aa:	4622      	mov	r2, r4
 80066ac:	210a      	movs	r1, #10
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 f8cf 	bl	8006852 <__swbuf_r>
 80066b4:	3001      	adds	r0, #1
 80066b6:	d007      	beq.n	80066c8 <_puts_r+0x5c>
 80066b8:	250a      	movs	r5, #10
 80066ba:	e007      	b.n	80066cc <_puts_r+0x60>
 80066bc:	4621      	mov	r1, r4
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 f904 	bl	80068cc <__swsetup_r>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d0e7      	beq.n	8006698 <_puts_r+0x2c>
 80066c8:	f04f 35ff 	mov.w	r5, #4294967295
 80066cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066ce:	07da      	lsls	r2, r3, #31
 80066d0:	d405      	bmi.n	80066de <_puts_r+0x72>
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	059b      	lsls	r3, r3, #22
 80066d6:	d402      	bmi.n	80066de <_puts_r+0x72>
 80066d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066da:	f000 f9c9 	bl	8006a70 <__retarget_lock_release_recursive>
 80066de:	4628      	mov	r0, r5
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da04      	bge.n	80066f0 <_puts_r+0x84>
 80066e6:	69a2      	ldr	r2, [r4, #24]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	dc06      	bgt.n	80066fa <_puts_r+0x8e>
 80066ec:	290a      	cmp	r1, #10
 80066ee:	d004      	beq.n	80066fa <_puts_r+0x8e>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	6022      	str	r2, [r4, #0]
 80066f6:	7019      	strb	r1, [r3, #0]
 80066f8:	e7cf      	b.n	800669a <_puts_r+0x2e>
 80066fa:	4622      	mov	r2, r4
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 f8a8 	bl	8006852 <__swbuf_r>
 8006702:	3001      	adds	r0, #1
 8006704:	d1c9      	bne.n	800669a <_puts_r+0x2e>
 8006706:	e7df      	b.n	80066c8 <_puts_r+0x5c>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	250a      	movs	r5, #10
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	6022      	str	r2, [r4, #0]
 8006710:	701d      	strb	r5, [r3, #0]
 8006712:	e7db      	b.n	80066cc <_puts_r+0x60>

08006714 <puts>:
 8006714:	4b02      	ldr	r3, [pc, #8]	; (8006720 <puts+0xc>)
 8006716:	4601      	mov	r1, r0
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	f7ff bfa7 	b.w	800666c <_puts_r>
 800671e:	bf00      	nop
 8006720:	2000006c 	.word	0x2000006c

08006724 <sniprintf>:
 8006724:	b40c      	push	{r2, r3}
 8006726:	b530      	push	{r4, r5, lr}
 8006728:	4b17      	ldr	r3, [pc, #92]	; (8006788 <sniprintf+0x64>)
 800672a:	1e0c      	subs	r4, r1, #0
 800672c:	681d      	ldr	r5, [r3, #0]
 800672e:	b09d      	sub	sp, #116	; 0x74
 8006730:	da08      	bge.n	8006744 <sniprintf+0x20>
 8006732:	238b      	movs	r3, #139	; 0x8b
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	f04f 30ff 	mov.w	r0, #4294967295
 800673a:	b01d      	add	sp, #116	; 0x74
 800673c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006740:	b002      	add	sp, #8
 8006742:	4770      	bx	lr
 8006744:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006748:	f8ad 3014 	strh.w	r3, [sp, #20]
 800674c:	bf14      	ite	ne
 800674e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006752:	4623      	moveq	r3, r4
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800675c:	9002      	str	r0, [sp, #8]
 800675e:	9006      	str	r0, [sp, #24]
 8006760:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006764:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006766:	ab21      	add	r3, sp, #132	; 0x84
 8006768:	a902      	add	r1, sp, #8
 800676a:	4628      	mov	r0, r5
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	f000 fad3 	bl	8006d18 <_svfiprintf_r>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	bfbc      	itt	lt
 8006776:	238b      	movlt	r3, #139	; 0x8b
 8006778:	602b      	strlt	r3, [r5, #0]
 800677a:	2c00      	cmp	r4, #0
 800677c:	d0dd      	beq.n	800673a <sniprintf+0x16>
 800677e:	9b02      	ldr	r3, [sp, #8]
 8006780:	2200      	movs	r2, #0
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e7d9      	b.n	800673a <sniprintf+0x16>
 8006786:	bf00      	nop
 8006788:	2000006c 	.word	0x2000006c

0800678c <siprintf>:
 800678c:	b40e      	push	{r1, r2, r3}
 800678e:	b500      	push	{lr}
 8006790:	b09c      	sub	sp, #112	; 0x70
 8006792:	ab1d      	add	r3, sp, #116	; 0x74
 8006794:	9002      	str	r0, [sp, #8]
 8006796:	9006      	str	r0, [sp, #24]
 8006798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800679c:	4809      	ldr	r0, [pc, #36]	; (80067c4 <siprintf+0x38>)
 800679e:	9107      	str	r1, [sp, #28]
 80067a0:	9104      	str	r1, [sp, #16]
 80067a2:	4909      	ldr	r1, [pc, #36]	; (80067c8 <siprintf+0x3c>)
 80067a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067a8:	9105      	str	r1, [sp, #20]
 80067aa:	6800      	ldr	r0, [r0, #0]
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	a902      	add	r1, sp, #8
 80067b0:	f000 fab2 	bl	8006d18 <_svfiprintf_r>
 80067b4:	9b02      	ldr	r3, [sp, #8]
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	b01c      	add	sp, #112	; 0x70
 80067bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067c0:	b003      	add	sp, #12
 80067c2:	4770      	bx	lr
 80067c4:	2000006c 	.word	0x2000006c
 80067c8:	ffff0208 	.word	0xffff0208

080067cc <__sread>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	460c      	mov	r4, r1
 80067d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d4:	f000 f8fc 	bl	80069d0 <_read_r>
 80067d8:	2800      	cmp	r0, #0
 80067da:	bfab      	itete	ge
 80067dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067de:	89a3      	ldrhlt	r3, [r4, #12]
 80067e0:	181b      	addge	r3, r3, r0
 80067e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067e6:	bfac      	ite	ge
 80067e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067ea:	81a3      	strhlt	r3, [r4, #12]
 80067ec:	bd10      	pop	{r4, pc}

080067ee <__swrite>:
 80067ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f2:	461f      	mov	r7, r3
 80067f4:	898b      	ldrh	r3, [r1, #12]
 80067f6:	05db      	lsls	r3, r3, #23
 80067f8:	4605      	mov	r5, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	4616      	mov	r6, r2
 80067fe:	d505      	bpl.n	800680c <__swrite+0x1e>
 8006800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006804:	2302      	movs	r3, #2
 8006806:	2200      	movs	r2, #0
 8006808:	f000 f8d0 	bl	80069ac <_lseek_r>
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	4632      	mov	r2, r6
 800681a:	463b      	mov	r3, r7
 800681c:	4628      	mov	r0, r5
 800681e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006822:	f000 b8e7 	b.w	80069f4 <_write_r>

08006826 <__sseek>:
 8006826:	b510      	push	{r4, lr}
 8006828:	460c      	mov	r4, r1
 800682a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682e:	f000 f8bd 	bl	80069ac <_lseek_r>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	bf15      	itete	ne
 8006838:	6560      	strne	r0, [r4, #84]	; 0x54
 800683a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800683e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006842:	81a3      	strheq	r3, [r4, #12]
 8006844:	bf18      	it	ne
 8006846:	81a3      	strhne	r3, [r4, #12]
 8006848:	bd10      	pop	{r4, pc}

0800684a <__sclose>:
 800684a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684e:	f000 b89d 	b.w	800698c <_close_r>

08006852 <__swbuf_r>:
 8006852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006854:	460e      	mov	r6, r1
 8006856:	4614      	mov	r4, r2
 8006858:	4605      	mov	r5, r0
 800685a:	b118      	cbz	r0, 8006864 <__swbuf_r+0x12>
 800685c:	6a03      	ldr	r3, [r0, #32]
 800685e:	b90b      	cbnz	r3, 8006864 <__swbuf_r+0x12>
 8006860:	f7ff febc 	bl	80065dc <__sinit>
 8006864:	69a3      	ldr	r3, [r4, #24]
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	071a      	lsls	r2, r3, #28
 800686c:	d525      	bpl.n	80068ba <__swbuf_r+0x68>
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	b31b      	cbz	r3, 80068ba <__swbuf_r+0x68>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	6922      	ldr	r2, [r4, #16]
 8006876:	1a98      	subs	r0, r3, r2
 8006878:	6963      	ldr	r3, [r4, #20]
 800687a:	b2f6      	uxtb	r6, r6
 800687c:	4283      	cmp	r3, r0
 800687e:	4637      	mov	r7, r6
 8006880:	dc04      	bgt.n	800688c <__swbuf_r+0x3a>
 8006882:	4621      	mov	r1, r4
 8006884:	4628      	mov	r0, r5
 8006886:	f000 fe9f 	bl	80075c8 <_fflush_r>
 800688a:	b9e0      	cbnz	r0, 80068c6 <__swbuf_r+0x74>
 800688c:	68a3      	ldr	r3, [r4, #8]
 800688e:	3b01      	subs	r3, #1
 8006890:	60a3      	str	r3, [r4, #8]
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	6022      	str	r2, [r4, #0]
 8006898:	701e      	strb	r6, [r3, #0]
 800689a:	6962      	ldr	r2, [r4, #20]
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	429a      	cmp	r2, r3
 80068a0:	d004      	beq.n	80068ac <__swbuf_r+0x5a>
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	07db      	lsls	r3, r3, #31
 80068a6:	d506      	bpl.n	80068b6 <__swbuf_r+0x64>
 80068a8:	2e0a      	cmp	r6, #10
 80068aa:	d104      	bne.n	80068b6 <__swbuf_r+0x64>
 80068ac:	4621      	mov	r1, r4
 80068ae:	4628      	mov	r0, r5
 80068b0:	f000 fe8a 	bl	80075c8 <_fflush_r>
 80068b4:	b938      	cbnz	r0, 80068c6 <__swbuf_r+0x74>
 80068b6:	4638      	mov	r0, r7
 80068b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ba:	4621      	mov	r1, r4
 80068bc:	4628      	mov	r0, r5
 80068be:	f000 f805 	bl	80068cc <__swsetup_r>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d0d5      	beq.n	8006872 <__swbuf_r+0x20>
 80068c6:	f04f 37ff 	mov.w	r7, #4294967295
 80068ca:	e7f4      	b.n	80068b6 <__swbuf_r+0x64>

080068cc <__swsetup_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <__swsetup_r+0xac>)
 80068d0:	4605      	mov	r5, r0
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	460c      	mov	r4, r1
 80068d6:	b118      	cbz	r0, 80068e0 <__swsetup_r+0x14>
 80068d8:	6a03      	ldr	r3, [r0, #32]
 80068da:	b90b      	cbnz	r3, 80068e0 <__swsetup_r+0x14>
 80068dc:	f7ff fe7e 	bl	80065dc <__sinit>
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068e6:	0718      	lsls	r0, r3, #28
 80068e8:	d422      	bmi.n	8006930 <__swsetup_r+0x64>
 80068ea:	06d9      	lsls	r1, r3, #27
 80068ec:	d407      	bmi.n	80068fe <__swsetup_r+0x32>
 80068ee:	2309      	movs	r3, #9
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	e034      	b.n	8006968 <__swsetup_r+0x9c>
 80068fe:	0758      	lsls	r0, r3, #29
 8006900:	d512      	bpl.n	8006928 <__swsetup_r+0x5c>
 8006902:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006904:	b141      	cbz	r1, 8006918 <__swsetup_r+0x4c>
 8006906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800690a:	4299      	cmp	r1, r3
 800690c:	d002      	beq.n	8006914 <__swsetup_r+0x48>
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f8b0 	bl	8006a74 <_free_r>
 8006914:	2300      	movs	r3, #0
 8006916:	6363      	str	r3, [r4, #52]	; 0x34
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800691e:	81a3      	strh	r3, [r4, #12]
 8006920:	2300      	movs	r3, #0
 8006922:	6063      	str	r3, [r4, #4]
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	f043 0308 	orr.w	r3, r3, #8
 800692e:	81a3      	strh	r3, [r4, #12]
 8006930:	6923      	ldr	r3, [r4, #16]
 8006932:	b94b      	cbnz	r3, 8006948 <__swsetup_r+0x7c>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800693a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800693e:	d003      	beq.n	8006948 <__swsetup_r+0x7c>
 8006940:	4621      	mov	r1, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f000 fe8e 	bl	8007664 <__smakebuf_r>
 8006948:	89a0      	ldrh	r0, [r4, #12]
 800694a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800694e:	f010 0301 	ands.w	r3, r0, #1
 8006952:	d00a      	beq.n	800696a <__swsetup_r+0x9e>
 8006954:	2300      	movs	r3, #0
 8006956:	60a3      	str	r3, [r4, #8]
 8006958:	6963      	ldr	r3, [r4, #20]
 800695a:	425b      	negs	r3, r3
 800695c:	61a3      	str	r3, [r4, #24]
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	b943      	cbnz	r3, 8006974 <__swsetup_r+0xa8>
 8006962:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006966:	d1c4      	bne.n	80068f2 <__swsetup_r+0x26>
 8006968:	bd38      	pop	{r3, r4, r5, pc}
 800696a:	0781      	lsls	r1, r0, #30
 800696c:	bf58      	it	pl
 800696e:	6963      	ldrpl	r3, [r4, #20]
 8006970:	60a3      	str	r3, [r4, #8]
 8006972:	e7f4      	b.n	800695e <__swsetup_r+0x92>
 8006974:	2000      	movs	r0, #0
 8006976:	e7f7      	b.n	8006968 <__swsetup_r+0x9c>
 8006978:	2000006c 	.word	0x2000006c

0800697c <memset>:
 800697c:	4402      	add	r2, r0
 800697e:	4603      	mov	r3, r0
 8006980:	4293      	cmp	r3, r2
 8006982:	d100      	bne.n	8006986 <memset+0xa>
 8006984:	4770      	bx	lr
 8006986:	f803 1b01 	strb.w	r1, [r3], #1
 800698a:	e7f9      	b.n	8006980 <memset+0x4>

0800698c <_close_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d06      	ldr	r5, [pc, #24]	; (80069a8 <_close_r+0x1c>)
 8006990:	2300      	movs	r3, #0
 8006992:	4604      	mov	r4, r0
 8006994:	4608      	mov	r0, r1
 8006996:	602b      	str	r3, [r5, #0]
 8006998:	f7fb f823 	bl	80019e2 <_close>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d102      	bne.n	80069a6 <_close_r+0x1a>
 80069a0:	682b      	ldr	r3, [r5, #0]
 80069a2:	b103      	cbz	r3, 80069a6 <_close_r+0x1a>
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
 80069a8:	20000608 	.word	0x20000608

080069ac <_lseek_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4d07      	ldr	r5, [pc, #28]	; (80069cc <_lseek_r+0x20>)
 80069b0:	4604      	mov	r4, r0
 80069b2:	4608      	mov	r0, r1
 80069b4:	4611      	mov	r1, r2
 80069b6:	2200      	movs	r2, #0
 80069b8:	602a      	str	r2, [r5, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	f7fb f838 	bl	8001a30 <_lseek>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_lseek_r+0x1e>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_lseek_r+0x1e>
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	20000608 	.word	0x20000608

080069d0 <_read_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d07      	ldr	r5, [pc, #28]	; (80069f0 <_read_r+0x20>)
 80069d4:	4604      	mov	r4, r0
 80069d6:	4608      	mov	r0, r1
 80069d8:	4611      	mov	r1, r2
 80069da:	2200      	movs	r2, #0
 80069dc:	602a      	str	r2, [r5, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	f7fa ffe2 	bl	80019a8 <_read>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_read_r+0x1e>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_read_r+0x1e>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000608 	.word	0x20000608

080069f4 <_write_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d07      	ldr	r5, [pc, #28]	; (8006a14 <_write_r+0x20>)
 80069f8:	4604      	mov	r4, r0
 80069fa:	4608      	mov	r0, r1
 80069fc:	4611      	mov	r1, r2
 80069fe:	2200      	movs	r2, #0
 8006a00:	602a      	str	r2, [r5, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f7f9 fee8 	bl	80007d8 <_write>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d102      	bne.n	8006a12 <_write_r+0x1e>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	b103      	cbz	r3, 8006a12 <_write_r+0x1e>
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	20000608 	.word	0x20000608

08006a18 <__errno>:
 8006a18:	4b01      	ldr	r3, [pc, #4]	; (8006a20 <__errno+0x8>)
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	2000006c 	.word	0x2000006c

08006a24 <__libc_init_array>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	4d0d      	ldr	r5, [pc, #52]	; (8006a5c <__libc_init_array+0x38>)
 8006a28:	4c0d      	ldr	r4, [pc, #52]	; (8006a60 <__libc_init_array+0x3c>)
 8006a2a:	1b64      	subs	r4, r4, r5
 8006a2c:	10a4      	asrs	r4, r4, #2
 8006a2e:	2600      	movs	r6, #0
 8006a30:	42a6      	cmp	r6, r4
 8006a32:	d109      	bne.n	8006a48 <__libc_init_array+0x24>
 8006a34:	4d0b      	ldr	r5, [pc, #44]	; (8006a64 <__libc_init_array+0x40>)
 8006a36:	4c0c      	ldr	r4, [pc, #48]	; (8006a68 <__libc_init_array+0x44>)
 8006a38:	f000 fee2 	bl	8007800 <_init>
 8006a3c:	1b64      	subs	r4, r4, r5
 8006a3e:	10a4      	asrs	r4, r4, #2
 8006a40:	2600      	movs	r6, #0
 8006a42:	42a6      	cmp	r6, r4
 8006a44:	d105      	bne.n	8006a52 <__libc_init_array+0x2e>
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4c:	4798      	blx	r3
 8006a4e:	3601      	adds	r6, #1
 8006a50:	e7ee      	b.n	8006a30 <__libc_init_array+0xc>
 8006a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a56:	4798      	blx	r3
 8006a58:	3601      	adds	r6, #1
 8006a5a:	e7f2      	b.n	8006a42 <__libc_init_array+0x1e>
 8006a5c:	080079c4 	.word	0x080079c4
 8006a60:	080079c4 	.word	0x080079c4
 8006a64:	080079c4 	.word	0x080079c4
 8006a68:	080079c8 	.word	0x080079c8

08006a6c <__retarget_lock_init_recursive>:
 8006a6c:	4770      	bx	lr

08006a6e <__retarget_lock_acquire_recursive>:
 8006a6e:	4770      	bx	lr

08006a70 <__retarget_lock_release_recursive>:
 8006a70:	4770      	bx	lr
	...

08006a74 <_free_r>:
 8006a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a76:	2900      	cmp	r1, #0
 8006a78:	d044      	beq.n	8006b04 <_free_r+0x90>
 8006a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a7e:	9001      	str	r0, [sp, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f1a1 0404 	sub.w	r4, r1, #4
 8006a86:	bfb8      	it	lt
 8006a88:	18e4      	addlt	r4, r4, r3
 8006a8a:	f000 f8df 	bl	8006c4c <__malloc_lock>
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	; (8006b08 <_free_r+0x94>)
 8006a90:	9801      	ldr	r0, [sp, #4]
 8006a92:	6813      	ldr	r3, [r2, #0]
 8006a94:	b933      	cbnz	r3, 8006aa4 <_free_r+0x30>
 8006a96:	6063      	str	r3, [r4, #4]
 8006a98:	6014      	str	r4, [r2, #0]
 8006a9a:	b003      	add	sp, #12
 8006a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aa0:	f000 b8da 	b.w	8006c58 <__malloc_unlock>
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	d908      	bls.n	8006aba <_free_r+0x46>
 8006aa8:	6825      	ldr	r5, [r4, #0]
 8006aaa:	1961      	adds	r1, r4, r5
 8006aac:	428b      	cmp	r3, r1
 8006aae:	bf01      	itttt	eq
 8006ab0:	6819      	ldreq	r1, [r3, #0]
 8006ab2:	685b      	ldreq	r3, [r3, #4]
 8006ab4:	1949      	addeq	r1, r1, r5
 8006ab6:	6021      	streq	r1, [r4, #0]
 8006ab8:	e7ed      	b.n	8006a96 <_free_r+0x22>
 8006aba:	461a      	mov	r2, r3
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	b10b      	cbz	r3, 8006ac4 <_free_r+0x50>
 8006ac0:	42a3      	cmp	r3, r4
 8006ac2:	d9fa      	bls.n	8006aba <_free_r+0x46>
 8006ac4:	6811      	ldr	r1, [r2, #0]
 8006ac6:	1855      	adds	r5, r2, r1
 8006ac8:	42a5      	cmp	r5, r4
 8006aca:	d10b      	bne.n	8006ae4 <_free_r+0x70>
 8006acc:	6824      	ldr	r4, [r4, #0]
 8006ace:	4421      	add	r1, r4
 8006ad0:	1854      	adds	r4, r2, r1
 8006ad2:	42a3      	cmp	r3, r4
 8006ad4:	6011      	str	r1, [r2, #0]
 8006ad6:	d1e0      	bne.n	8006a9a <_free_r+0x26>
 8006ad8:	681c      	ldr	r4, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	6053      	str	r3, [r2, #4]
 8006ade:	440c      	add	r4, r1
 8006ae0:	6014      	str	r4, [r2, #0]
 8006ae2:	e7da      	b.n	8006a9a <_free_r+0x26>
 8006ae4:	d902      	bls.n	8006aec <_free_r+0x78>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	6003      	str	r3, [r0, #0]
 8006aea:	e7d6      	b.n	8006a9a <_free_r+0x26>
 8006aec:	6825      	ldr	r5, [r4, #0]
 8006aee:	1961      	adds	r1, r4, r5
 8006af0:	428b      	cmp	r3, r1
 8006af2:	bf04      	itt	eq
 8006af4:	6819      	ldreq	r1, [r3, #0]
 8006af6:	685b      	ldreq	r3, [r3, #4]
 8006af8:	6063      	str	r3, [r4, #4]
 8006afa:	bf04      	itt	eq
 8006afc:	1949      	addeq	r1, r1, r5
 8006afe:	6021      	streq	r1, [r4, #0]
 8006b00:	6054      	str	r4, [r2, #4]
 8006b02:	e7ca      	b.n	8006a9a <_free_r+0x26>
 8006b04:	b003      	add	sp, #12
 8006b06:	bd30      	pop	{r4, r5, pc}
 8006b08:	20000610 	.word	0x20000610

08006b0c <sbrk_aligned>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4e0e      	ldr	r6, [pc, #56]	; (8006b48 <sbrk_aligned+0x3c>)
 8006b10:	460c      	mov	r4, r1
 8006b12:	6831      	ldr	r1, [r6, #0]
 8006b14:	4605      	mov	r5, r0
 8006b16:	b911      	cbnz	r1, 8006b1e <sbrk_aligned+0x12>
 8006b18:	f000 fe1c 	bl	8007754 <_sbrk_r>
 8006b1c:	6030      	str	r0, [r6, #0]
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 fe17 	bl	8007754 <_sbrk_r>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	d00a      	beq.n	8006b40 <sbrk_aligned+0x34>
 8006b2a:	1cc4      	adds	r4, r0, #3
 8006b2c:	f024 0403 	bic.w	r4, r4, #3
 8006b30:	42a0      	cmp	r0, r4
 8006b32:	d007      	beq.n	8006b44 <sbrk_aligned+0x38>
 8006b34:	1a21      	subs	r1, r4, r0
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 fe0c 	bl	8007754 <_sbrk_r>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d101      	bne.n	8006b44 <sbrk_aligned+0x38>
 8006b40:	f04f 34ff 	mov.w	r4, #4294967295
 8006b44:	4620      	mov	r0, r4
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	20000614 	.word	0x20000614

08006b4c <_malloc_r>:
 8006b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b50:	1ccd      	adds	r5, r1, #3
 8006b52:	f025 0503 	bic.w	r5, r5, #3
 8006b56:	3508      	adds	r5, #8
 8006b58:	2d0c      	cmp	r5, #12
 8006b5a:	bf38      	it	cc
 8006b5c:	250c      	movcc	r5, #12
 8006b5e:	2d00      	cmp	r5, #0
 8006b60:	4607      	mov	r7, r0
 8006b62:	db01      	blt.n	8006b68 <_malloc_r+0x1c>
 8006b64:	42a9      	cmp	r1, r5
 8006b66:	d905      	bls.n	8006b74 <_malloc_r+0x28>
 8006b68:	230c      	movs	r3, #12
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	4630      	mov	r0, r6
 8006b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c48 <_malloc_r+0xfc>
 8006b78:	f000 f868 	bl	8006c4c <__malloc_lock>
 8006b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b80:	461c      	mov	r4, r3
 8006b82:	bb5c      	cbnz	r4, 8006bdc <_malloc_r+0x90>
 8006b84:	4629      	mov	r1, r5
 8006b86:	4638      	mov	r0, r7
 8006b88:	f7ff ffc0 	bl	8006b0c <sbrk_aligned>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	4604      	mov	r4, r0
 8006b90:	d155      	bne.n	8006c3e <_malloc_r+0xf2>
 8006b92:	f8d8 4000 	ldr.w	r4, [r8]
 8006b96:	4626      	mov	r6, r4
 8006b98:	2e00      	cmp	r6, #0
 8006b9a:	d145      	bne.n	8006c28 <_malloc_r+0xdc>
 8006b9c:	2c00      	cmp	r4, #0
 8006b9e:	d048      	beq.n	8006c32 <_malloc_r+0xe6>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	eb04 0903 	add.w	r9, r4, r3
 8006baa:	f000 fdd3 	bl	8007754 <_sbrk_r>
 8006bae:	4581      	cmp	r9, r0
 8006bb0:	d13f      	bne.n	8006c32 <_malloc_r+0xe6>
 8006bb2:	6821      	ldr	r1, [r4, #0]
 8006bb4:	1a6d      	subs	r5, r5, r1
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4638      	mov	r0, r7
 8006bba:	f7ff ffa7 	bl	8006b0c <sbrk_aligned>
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d037      	beq.n	8006c32 <_malloc_r+0xe6>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	442b      	add	r3, r5
 8006bc6:	6023      	str	r3, [r4, #0]
 8006bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d038      	beq.n	8006c42 <_malloc_r+0xf6>
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	42a2      	cmp	r2, r4
 8006bd4:	d12b      	bne.n	8006c2e <_malloc_r+0xe2>
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	605a      	str	r2, [r3, #4]
 8006bda:	e00f      	b.n	8006bfc <_malloc_r+0xb0>
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	1b52      	subs	r2, r2, r5
 8006be0:	d41f      	bmi.n	8006c22 <_malloc_r+0xd6>
 8006be2:	2a0b      	cmp	r2, #11
 8006be4:	d917      	bls.n	8006c16 <_malloc_r+0xca>
 8006be6:	1961      	adds	r1, r4, r5
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	6025      	str	r5, [r4, #0]
 8006bec:	bf18      	it	ne
 8006bee:	6059      	strne	r1, [r3, #4]
 8006bf0:	6863      	ldr	r3, [r4, #4]
 8006bf2:	bf08      	it	eq
 8006bf4:	f8c8 1000 	streq.w	r1, [r8]
 8006bf8:	5162      	str	r2, [r4, r5]
 8006bfa:	604b      	str	r3, [r1, #4]
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	f104 060b 	add.w	r6, r4, #11
 8006c02:	f000 f829 	bl	8006c58 <__malloc_unlock>
 8006c06:	f026 0607 	bic.w	r6, r6, #7
 8006c0a:	1d23      	adds	r3, r4, #4
 8006c0c:	1af2      	subs	r2, r6, r3
 8006c0e:	d0ae      	beq.n	8006b6e <_malloc_r+0x22>
 8006c10:	1b9b      	subs	r3, r3, r6
 8006c12:	50a3      	str	r3, [r4, r2]
 8006c14:	e7ab      	b.n	8006b6e <_malloc_r+0x22>
 8006c16:	42a3      	cmp	r3, r4
 8006c18:	6862      	ldr	r2, [r4, #4]
 8006c1a:	d1dd      	bne.n	8006bd8 <_malloc_r+0x8c>
 8006c1c:	f8c8 2000 	str.w	r2, [r8]
 8006c20:	e7ec      	b.n	8006bfc <_malloc_r+0xb0>
 8006c22:	4623      	mov	r3, r4
 8006c24:	6864      	ldr	r4, [r4, #4]
 8006c26:	e7ac      	b.n	8006b82 <_malloc_r+0x36>
 8006c28:	4634      	mov	r4, r6
 8006c2a:	6876      	ldr	r6, [r6, #4]
 8006c2c:	e7b4      	b.n	8006b98 <_malloc_r+0x4c>
 8006c2e:	4613      	mov	r3, r2
 8006c30:	e7cc      	b.n	8006bcc <_malloc_r+0x80>
 8006c32:	230c      	movs	r3, #12
 8006c34:	603b      	str	r3, [r7, #0]
 8006c36:	4638      	mov	r0, r7
 8006c38:	f000 f80e 	bl	8006c58 <__malloc_unlock>
 8006c3c:	e797      	b.n	8006b6e <_malloc_r+0x22>
 8006c3e:	6025      	str	r5, [r4, #0]
 8006c40:	e7dc      	b.n	8006bfc <_malloc_r+0xb0>
 8006c42:	605b      	str	r3, [r3, #4]
 8006c44:	deff      	udf	#255	; 0xff
 8006c46:	bf00      	nop
 8006c48:	20000610 	.word	0x20000610

08006c4c <__malloc_lock>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	; (8006c54 <__malloc_lock+0x8>)
 8006c4e:	f7ff bf0e 	b.w	8006a6e <__retarget_lock_acquire_recursive>
 8006c52:	bf00      	nop
 8006c54:	2000060c 	.word	0x2000060c

08006c58 <__malloc_unlock>:
 8006c58:	4801      	ldr	r0, [pc, #4]	; (8006c60 <__malloc_unlock+0x8>)
 8006c5a:	f7ff bf09 	b.w	8006a70 <__retarget_lock_release_recursive>
 8006c5e:	bf00      	nop
 8006c60:	2000060c 	.word	0x2000060c

08006c64 <__ssputs_r>:
 8006c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c68:	688e      	ldr	r6, [r1, #8]
 8006c6a:	461f      	mov	r7, r3
 8006c6c:	42be      	cmp	r6, r7
 8006c6e:	680b      	ldr	r3, [r1, #0]
 8006c70:	4682      	mov	sl, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	4690      	mov	r8, r2
 8006c76:	d82c      	bhi.n	8006cd2 <__ssputs_r+0x6e>
 8006c78:	898a      	ldrh	r2, [r1, #12]
 8006c7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c7e:	d026      	beq.n	8006cce <__ssputs_r+0x6a>
 8006c80:	6965      	ldr	r5, [r4, #20]
 8006c82:	6909      	ldr	r1, [r1, #16]
 8006c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c88:	eba3 0901 	sub.w	r9, r3, r1
 8006c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c90:	1c7b      	adds	r3, r7, #1
 8006c92:	444b      	add	r3, r9
 8006c94:	106d      	asrs	r5, r5, #1
 8006c96:	429d      	cmp	r5, r3
 8006c98:	bf38      	it	cc
 8006c9a:	461d      	movcc	r5, r3
 8006c9c:	0553      	lsls	r3, r2, #21
 8006c9e:	d527      	bpl.n	8006cf0 <__ssputs_r+0x8c>
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7ff ff53 	bl	8006b4c <_malloc_r>
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	b360      	cbz	r0, 8006d04 <__ssputs_r+0xa0>
 8006caa:	6921      	ldr	r1, [r4, #16]
 8006cac:	464a      	mov	r2, r9
 8006cae:	f000 fd61 	bl	8007774 <memcpy>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cbc:	81a3      	strh	r3, [r4, #12]
 8006cbe:	6126      	str	r6, [r4, #16]
 8006cc0:	6165      	str	r5, [r4, #20]
 8006cc2:	444e      	add	r6, r9
 8006cc4:	eba5 0509 	sub.w	r5, r5, r9
 8006cc8:	6026      	str	r6, [r4, #0]
 8006cca:	60a5      	str	r5, [r4, #8]
 8006ccc:	463e      	mov	r6, r7
 8006cce:	42be      	cmp	r6, r7
 8006cd0:	d900      	bls.n	8006cd4 <__ssputs_r+0x70>
 8006cd2:	463e      	mov	r6, r7
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	4641      	mov	r1, r8
 8006cda:	f000 fcff 	bl	80076dc <memmove>
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	1b9b      	subs	r3, r3, r6
 8006ce2:	60a3      	str	r3, [r4, #8]
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	4433      	add	r3, r6
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	2000      	movs	r0, #0
 8006cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	f000 fd4d 	bl	8007790 <_realloc_r>
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d1e0      	bne.n	8006cbe <__ssputs_r+0x5a>
 8006cfc:	6921      	ldr	r1, [r4, #16]
 8006cfe:	4650      	mov	r0, sl
 8006d00:	f7ff feb8 	bl	8006a74 <_free_r>
 8006d04:	230c      	movs	r3, #12
 8006d06:	f8ca 3000 	str.w	r3, [sl]
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	f04f 30ff 	mov.w	r0, #4294967295
 8006d16:	e7e9      	b.n	8006cec <__ssputs_r+0x88>

08006d18 <_svfiprintf_r>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	4698      	mov	r8, r3
 8006d1e:	898b      	ldrh	r3, [r1, #12]
 8006d20:	061b      	lsls	r3, r3, #24
 8006d22:	b09d      	sub	sp, #116	; 0x74
 8006d24:	4607      	mov	r7, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	4614      	mov	r4, r2
 8006d2a:	d50e      	bpl.n	8006d4a <_svfiprintf_r+0x32>
 8006d2c:	690b      	ldr	r3, [r1, #16]
 8006d2e:	b963      	cbnz	r3, 8006d4a <_svfiprintf_r+0x32>
 8006d30:	2140      	movs	r1, #64	; 0x40
 8006d32:	f7ff ff0b 	bl	8006b4c <_malloc_r>
 8006d36:	6028      	str	r0, [r5, #0]
 8006d38:	6128      	str	r0, [r5, #16]
 8006d3a:	b920      	cbnz	r0, 8006d46 <_svfiprintf_r+0x2e>
 8006d3c:	230c      	movs	r3, #12
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295
 8006d44:	e0d0      	b.n	8006ee8 <_svfiprintf_r+0x1d0>
 8006d46:	2340      	movs	r3, #64	; 0x40
 8006d48:	616b      	str	r3, [r5, #20]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4e:	2320      	movs	r3, #32
 8006d50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d58:	2330      	movs	r3, #48	; 0x30
 8006d5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f00 <_svfiprintf_r+0x1e8>
 8006d5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d62:	f04f 0901 	mov.w	r9, #1
 8006d66:	4623      	mov	r3, r4
 8006d68:	469a      	mov	sl, r3
 8006d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d6e:	b10a      	cbz	r2, 8006d74 <_svfiprintf_r+0x5c>
 8006d70:	2a25      	cmp	r2, #37	; 0x25
 8006d72:	d1f9      	bne.n	8006d68 <_svfiprintf_r+0x50>
 8006d74:	ebba 0b04 	subs.w	fp, sl, r4
 8006d78:	d00b      	beq.n	8006d92 <_svfiprintf_r+0x7a>
 8006d7a:	465b      	mov	r3, fp
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4638      	mov	r0, r7
 8006d82:	f7ff ff6f 	bl	8006c64 <__ssputs_r>
 8006d86:	3001      	adds	r0, #1
 8006d88:	f000 80a9 	beq.w	8006ede <_svfiprintf_r+0x1c6>
 8006d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d8e:	445a      	add	r2, fp
 8006d90:	9209      	str	r2, [sp, #36]	; 0x24
 8006d92:	f89a 3000 	ldrb.w	r3, [sl]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 80a1 	beq.w	8006ede <_svfiprintf_r+0x1c6>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da6:	f10a 0a01 	add.w	sl, sl, #1
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	9307      	str	r3, [sp, #28]
 8006dae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db2:	931a      	str	r3, [sp, #104]	; 0x68
 8006db4:	4654      	mov	r4, sl
 8006db6:	2205      	movs	r2, #5
 8006db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbc:	4850      	ldr	r0, [pc, #320]	; (8006f00 <_svfiprintf_r+0x1e8>)
 8006dbe:	f7f9 fa1f 	bl	8000200 <memchr>
 8006dc2:	9a04      	ldr	r2, [sp, #16]
 8006dc4:	b9d8      	cbnz	r0, 8006dfe <_svfiprintf_r+0xe6>
 8006dc6:	06d0      	lsls	r0, r2, #27
 8006dc8:	bf44      	itt	mi
 8006dca:	2320      	movmi	r3, #32
 8006dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd0:	0711      	lsls	r1, r2, #28
 8006dd2:	bf44      	itt	mi
 8006dd4:	232b      	movmi	r3, #43	; 0x2b
 8006dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dda:	f89a 3000 	ldrb.w	r3, [sl]
 8006dde:	2b2a      	cmp	r3, #42	; 0x2a
 8006de0:	d015      	beq.n	8006e0e <_svfiprintf_r+0xf6>
 8006de2:	9a07      	ldr	r2, [sp, #28]
 8006de4:	4654      	mov	r4, sl
 8006de6:	2000      	movs	r0, #0
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	4621      	mov	r1, r4
 8006dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df2:	3b30      	subs	r3, #48	; 0x30
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	d94d      	bls.n	8006e94 <_svfiprintf_r+0x17c>
 8006df8:	b1b0      	cbz	r0, 8006e28 <_svfiprintf_r+0x110>
 8006dfa:	9207      	str	r2, [sp, #28]
 8006dfc:	e014      	b.n	8006e28 <_svfiprintf_r+0x110>
 8006dfe:	eba0 0308 	sub.w	r3, r0, r8
 8006e02:	fa09 f303 	lsl.w	r3, r9, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	46a2      	mov	sl, r4
 8006e0c:	e7d2      	b.n	8006db4 <_svfiprintf_r+0x9c>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	1d19      	adds	r1, r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	9103      	str	r1, [sp, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfbb      	ittet	lt
 8006e1a:	425b      	neglt	r3, r3
 8006e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e20:	9307      	strge	r3, [sp, #28]
 8006e22:	9307      	strlt	r3, [sp, #28]
 8006e24:	bfb8      	it	lt
 8006e26:	9204      	strlt	r2, [sp, #16]
 8006e28:	7823      	ldrb	r3, [r4, #0]
 8006e2a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e2c:	d10c      	bne.n	8006e48 <_svfiprintf_r+0x130>
 8006e2e:	7863      	ldrb	r3, [r4, #1]
 8006e30:	2b2a      	cmp	r3, #42	; 0x2a
 8006e32:	d134      	bne.n	8006e9e <_svfiprintf_r+0x186>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	9203      	str	r2, [sp, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfb8      	it	lt
 8006e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e44:	3402      	adds	r4, #2
 8006e46:	9305      	str	r3, [sp, #20]
 8006e48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006f10 <_svfiprintf_r+0x1f8>
 8006e4c:	7821      	ldrb	r1, [r4, #0]
 8006e4e:	2203      	movs	r2, #3
 8006e50:	4650      	mov	r0, sl
 8006e52:	f7f9 f9d5 	bl	8000200 <memchr>
 8006e56:	b138      	cbz	r0, 8006e68 <_svfiprintf_r+0x150>
 8006e58:	9b04      	ldr	r3, [sp, #16]
 8006e5a:	eba0 000a 	sub.w	r0, r0, sl
 8006e5e:	2240      	movs	r2, #64	; 0x40
 8006e60:	4082      	lsls	r2, r0
 8006e62:	4313      	orrs	r3, r2
 8006e64:	3401      	adds	r4, #1
 8006e66:	9304      	str	r3, [sp, #16]
 8006e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6c:	4825      	ldr	r0, [pc, #148]	; (8006f04 <_svfiprintf_r+0x1ec>)
 8006e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e72:	2206      	movs	r2, #6
 8006e74:	f7f9 f9c4 	bl	8000200 <memchr>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d038      	beq.n	8006eee <_svfiprintf_r+0x1d6>
 8006e7c:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <_svfiprintf_r+0x1f0>)
 8006e7e:	bb1b      	cbnz	r3, 8006ec8 <_svfiprintf_r+0x1b0>
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	3307      	adds	r3, #7
 8006e84:	f023 0307 	bic.w	r3, r3, #7
 8006e88:	3308      	adds	r3, #8
 8006e8a:	9303      	str	r3, [sp, #12]
 8006e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8e:	4433      	add	r3, r6
 8006e90:	9309      	str	r3, [sp, #36]	; 0x24
 8006e92:	e768      	b.n	8006d66 <_svfiprintf_r+0x4e>
 8006e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e98:	460c      	mov	r4, r1
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	e7a6      	b.n	8006dec <_svfiprintf_r+0xd4>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	3401      	adds	r4, #1
 8006ea2:	9305      	str	r3, [sp, #20]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f04f 0c0a 	mov.w	ip, #10
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb0:	3a30      	subs	r2, #48	; 0x30
 8006eb2:	2a09      	cmp	r2, #9
 8006eb4:	d903      	bls.n	8006ebe <_svfiprintf_r+0x1a6>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0c6      	beq.n	8006e48 <_svfiprintf_r+0x130>
 8006eba:	9105      	str	r1, [sp, #20]
 8006ebc:	e7c4      	b.n	8006e48 <_svfiprintf_r+0x130>
 8006ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e7f0      	b.n	8006eaa <_svfiprintf_r+0x192>
 8006ec8:	ab03      	add	r3, sp, #12
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	462a      	mov	r2, r5
 8006ece:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <_svfiprintf_r+0x1f4>)
 8006ed0:	a904      	add	r1, sp, #16
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	f3af 8000 	nop.w
 8006ed8:	1c42      	adds	r2, r0, #1
 8006eda:	4606      	mov	r6, r0
 8006edc:	d1d6      	bne.n	8006e8c <_svfiprintf_r+0x174>
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	065b      	lsls	r3, r3, #25
 8006ee2:	f53f af2d 	bmi.w	8006d40 <_svfiprintf_r+0x28>
 8006ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ee8:	b01d      	add	sp, #116	; 0x74
 8006eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eee:	ab03      	add	r3, sp, #12
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	462a      	mov	r2, r5
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <_svfiprintf_r+0x1f4>)
 8006ef6:	a904      	add	r1, sp, #16
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f000 f9bd 	bl	8007278 <_printf_i>
 8006efe:	e7eb      	b.n	8006ed8 <_svfiprintf_r+0x1c0>
 8006f00:	08007988 	.word	0x08007988
 8006f04:	08007992 	.word	0x08007992
 8006f08:	00000000 	.word	0x00000000
 8006f0c:	08006c65 	.word	0x08006c65
 8006f10:	0800798e 	.word	0x0800798e

08006f14 <__sfputc_r>:
 8006f14:	6893      	ldr	r3, [r2, #8]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	b410      	push	{r4}
 8006f1c:	6093      	str	r3, [r2, #8]
 8006f1e:	da08      	bge.n	8006f32 <__sfputc_r+0x1e>
 8006f20:	6994      	ldr	r4, [r2, #24]
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	db01      	blt.n	8006f2a <__sfputc_r+0x16>
 8006f26:	290a      	cmp	r1, #10
 8006f28:	d103      	bne.n	8006f32 <__sfputc_r+0x1e>
 8006f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f2e:	f7ff bc90 	b.w	8006852 <__swbuf_r>
 8006f32:	6813      	ldr	r3, [r2, #0]
 8006f34:	1c58      	adds	r0, r3, #1
 8006f36:	6010      	str	r0, [r2, #0]
 8006f38:	7019      	strb	r1, [r3, #0]
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <__sfputs_r>:
 8006f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f44:	4606      	mov	r6, r0
 8006f46:	460f      	mov	r7, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	18d5      	adds	r5, r2, r3
 8006f4c:	42ac      	cmp	r4, r5
 8006f4e:	d101      	bne.n	8006f54 <__sfputs_r+0x12>
 8006f50:	2000      	movs	r0, #0
 8006f52:	e007      	b.n	8006f64 <__sfputs_r+0x22>
 8006f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f58:	463a      	mov	r2, r7
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff ffda 	bl	8006f14 <__sfputc_r>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d1f3      	bne.n	8006f4c <__sfputs_r+0xa>
 8006f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f68 <_vfiprintf_r>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	460d      	mov	r5, r1
 8006f6e:	b09d      	sub	sp, #116	; 0x74
 8006f70:	4614      	mov	r4, r2
 8006f72:	4698      	mov	r8, r3
 8006f74:	4606      	mov	r6, r0
 8006f76:	b118      	cbz	r0, 8006f80 <_vfiprintf_r+0x18>
 8006f78:	6a03      	ldr	r3, [r0, #32]
 8006f7a:	b90b      	cbnz	r3, 8006f80 <_vfiprintf_r+0x18>
 8006f7c:	f7ff fb2e 	bl	80065dc <__sinit>
 8006f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f82:	07d9      	lsls	r1, r3, #31
 8006f84:	d405      	bmi.n	8006f92 <_vfiprintf_r+0x2a>
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	059a      	lsls	r2, r3, #22
 8006f8a:	d402      	bmi.n	8006f92 <_vfiprintf_r+0x2a>
 8006f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f8e:	f7ff fd6e 	bl	8006a6e <__retarget_lock_acquire_recursive>
 8006f92:	89ab      	ldrh	r3, [r5, #12]
 8006f94:	071b      	lsls	r3, r3, #28
 8006f96:	d501      	bpl.n	8006f9c <_vfiprintf_r+0x34>
 8006f98:	692b      	ldr	r3, [r5, #16]
 8006f9a:	b99b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x5c>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7ff fc94 	bl	80068cc <__swsetup_r>
 8006fa4:	b170      	cbz	r0, 8006fc4 <_vfiprintf_r+0x5c>
 8006fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa8:	07dc      	lsls	r4, r3, #31
 8006faa:	d504      	bpl.n	8006fb6 <_vfiprintf_r+0x4e>
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb0:	b01d      	add	sp, #116	; 0x74
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	0598      	lsls	r0, r3, #22
 8006fba:	d4f7      	bmi.n	8006fac <_vfiprintf_r+0x44>
 8006fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fbe:	f7ff fd57 	bl	8006a70 <__retarget_lock_release_recursive>
 8006fc2:	e7f3      	b.n	8006fac <_vfiprintf_r+0x44>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc8:	2320      	movs	r3, #32
 8006fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd2:	2330      	movs	r3, #48	; 0x30
 8006fd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007188 <_vfiprintf_r+0x220>
 8006fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fdc:	f04f 0901 	mov.w	r9, #1
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	469a      	mov	sl, r3
 8006fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe8:	b10a      	cbz	r2, 8006fee <_vfiprintf_r+0x86>
 8006fea:	2a25      	cmp	r2, #37	; 0x25
 8006fec:	d1f9      	bne.n	8006fe2 <_vfiprintf_r+0x7a>
 8006fee:	ebba 0b04 	subs.w	fp, sl, r4
 8006ff2:	d00b      	beq.n	800700c <_vfiprintf_r+0xa4>
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7ff ffa1 	bl	8006f42 <__sfputs_r>
 8007000:	3001      	adds	r0, #1
 8007002:	f000 80a9 	beq.w	8007158 <_vfiprintf_r+0x1f0>
 8007006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007008:	445a      	add	r2, fp
 800700a:	9209      	str	r2, [sp, #36]	; 0x24
 800700c:	f89a 3000 	ldrb.w	r3, [sl]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80a1 	beq.w	8007158 <_vfiprintf_r+0x1f0>
 8007016:	2300      	movs	r3, #0
 8007018:	f04f 32ff 	mov.w	r2, #4294967295
 800701c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007020:	f10a 0a01 	add.w	sl, sl, #1
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800702c:	931a      	str	r3, [sp, #104]	; 0x68
 800702e:	4654      	mov	r4, sl
 8007030:	2205      	movs	r2, #5
 8007032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007036:	4854      	ldr	r0, [pc, #336]	; (8007188 <_vfiprintf_r+0x220>)
 8007038:	f7f9 f8e2 	bl	8000200 <memchr>
 800703c:	9a04      	ldr	r2, [sp, #16]
 800703e:	b9d8      	cbnz	r0, 8007078 <_vfiprintf_r+0x110>
 8007040:	06d1      	lsls	r1, r2, #27
 8007042:	bf44      	itt	mi
 8007044:	2320      	movmi	r3, #32
 8007046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800704a:	0713      	lsls	r3, r2, #28
 800704c:	bf44      	itt	mi
 800704e:	232b      	movmi	r3, #43	; 0x2b
 8007050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007054:	f89a 3000 	ldrb.w	r3, [sl]
 8007058:	2b2a      	cmp	r3, #42	; 0x2a
 800705a:	d015      	beq.n	8007088 <_vfiprintf_r+0x120>
 800705c:	9a07      	ldr	r2, [sp, #28]
 800705e:	4654      	mov	r4, sl
 8007060:	2000      	movs	r0, #0
 8007062:	f04f 0c0a 	mov.w	ip, #10
 8007066:	4621      	mov	r1, r4
 8007068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800706c:	3b30      	subs	r3, #48	; 0x30
 800706e:	2b09      	cmp	r3, #9
 8007070:	d94d      	bls.n	800710e <_vfiprintf_r+0x1a6>
 8007072:	b1b0      	cbz	r0, 80070a2 <_vfiprintf_r+0x13a>
 8007074:	9207      	str	r2, [sp, #28]
 8007076:	e014      	b.n	80070a2 <_vfiprintf_r+0x13a>
 8007078:	eba0 0308 	sub.w	r3, r0, r8
 800707c:	fa09 f303 	lsl.w	r3, r9, r3
 8007080:	4313      	orrs	r3, r2
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	46a2      	mov	sl, r4
 8007086:	e7d2      	b.n	800702e <_vfiprintf_r+0xc6>
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	1d19      	adds	r1, r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	9103      	str	r1, [sp, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfbb      	ittet	lt
 8007094:	425b      	neglt	r3, r3
 8007096:	f042 0202 	orrlt.w	r2, r2, #2
 800709a:	9307      	strge	r3, [sp, #28]
 800709c:	9307      	strlt	r3, [sp, #28]
 800709e:	bfb8      	it	lt
 80070a0:	9204      	strlt	r2, [sp, #16]
 80070a2:	7823      	ldrb	r3, [r4, #0]
 80070a4:	2b2e      	cmp	r3, #46	; 0x2e
 80070a6:	d10c      	bne.n	80070c2 <_vfiprintf_r+0x15a>
 80070a8:	7863      	ldrb	r3, [r4, #1]
 80070aa:	2b2a      	cmp	r3, #42	; 0x2a
 80070ac:	d134      	bne.n	8007118 <_vfiprintf_r+0x1b0>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	1d1a      	adds	r2, r3, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	9203      	str	r2, [sp, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bfb8      	it	lt
 80070ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80070be:	3402      	adds	r4, #2
 80070c0:	9305      	str	r3, [sp, #20]
 80070c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007198 <_vfiprintf_r+0x230>
 80070c6:	7821      	ldrb	r1, [r4, #0]
 80070c8:	2203      	movs	r2, #3
 80070ca:	4650      	mov	r0, sl
 80070cc:	f7f9 f898 	bl	8000200 <memchr>
 80070d0:	b138      	cbz	r0, 80070e2 <_vfiprintf_r+0x17a>
 80070d2:	9b04      	ldr	r3, [sp, #16]
 80070d4:	eba0 000a 	sub.w	r0, r0, sl
 80070d8:	2240      	movs	r2, #64	; 0x40
 80070da:	4082      	lsls	r2, r0
 80070dc:	4313      	orrs	r3, r2
 80070de:	3401      	adds	r4, #1
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e6:	4829      	ldr	r0, [pc, #164]	; (800718c <_vfiprintf_r+0x224>)
 80070e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070ec:	2206      	movs	r2, #6
 80070ee:	f7f9 f887 	bl	8000200 <memchr>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d03f      	beq.n	8007176 <_vfiprintf_r+0x20e>
 80070f6:	4b26      	ldr	r3, [pc, #152]	; (8007190 <_vfiprintf_r+0x228>)
 80070f8:	bb1b      	cbnz	r3, 8007142 <_vfiprintf_r+0x1da>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	3307      	adds	r3, #7
 80070fe:	f023 0307 	bic.w	r3, r3, #7
 8007102:	3308      	adds	r3, #8
 8007104:	9303      	str	r3, [sp, #12]
 8007106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007108:	443b      	add	r3, r7
 800710a:	9309      	str	r3, [sp, #36]	; 0x24
 800710c:	e768      	b.n	8006fe0 <_vfiprintf_r+0x78>
 800710e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007112:	460c      	mov	r4, r1
 8007114:	2001      	movs	r0, #1
 8007116:	e7a6      	b.n	8007066 <_vfiprintf_r+0xfe>
 8007118:	2300      	movs	r3, #0
 800711a:	3401      	adds	r4, #1
 800711c:	9305      	str	r3, [sp, #20]
 800711e:	4619      	mov	r1, r3
 8007120:	f04f 0c0a 	mov.w	ip, #10
 8007124:	4620      	mov	r0, r4
 8007126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800712a:	3a30      	subs	r2, #48	; 0x30
 800712c:	2a09      	cmp	r2, #9
 800712e:	d903      	bls.n	8007138 <_vfiprintf_r+0x1d0>
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0c6      	beq.n	80070c2 <_vfiprintf_r+0x15a>
 8007134:	9105      	str	r1, [sp, #20]
 8007136:	e7c4      	b.n	80070c2 <_vfiprintf_r+0x15a>
 8007138:	fb0c 2101 	mla	r1, ip, r1, r2
 800713c:	4604      	mov	r4, r0
 800713e:	2301      	movs	r3, #1
 8007140:	e7f0      	b.n	8007124 <_vfiprintf_r+0x1bc>
 8007142:	ab03      	add	r3, sp, #12
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	462a      	mov	r2, r5
 8007148:	4b12      	ldr	r3, [pc, #72]	; (8007194 <_vfiprintf_r+0x22c>)
 800714a:	a904      	add	r1, sp, #16
 800714c:	4630      	mov	r0, r6
 800714e:	f3af 8000 	nop.w
 8007152:	4607      	mov	r7, r0
 8007154:	1c78      	adds	r0, r7, #1
 8007156:	d1d6      	bne.n	8007106 <_vfiprintf_r+0x19e>
 8007158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800715a:	07d9      	lsls	r1, r3, #31
 800715c:	d405      	bmi.n	800716a <_vfiprintf_r+0x202>
 800715e:	89ab      	ldrh	r3, [r5, #12]
 8007160:	059a      	lsls	r2, r3, #22
 8007162:	d402      	bmi.n	800716a <_vfiprintf_r+0x202>
 8007164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007166:	f7ff fc83 	bl	8006a70 <__retarget_lock_release_recursive>
 800716a:	89ab      	ldrh	r3, [r5, #12]
 800716c:	065b      	lsls	r3, r3, #25
 800716e:	f53f af1d 	bmi.w	8006fac <_vfiprintf_r+0x44>
 8007172:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007174:	e71c      	b.n	8006fb0 <_vfiprintf_r+0x48>
 8007176:	ab03      	add	r3, sp, #12
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	462a      	mov	r2, r5
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <_vfiprintf_r+0x22c>)
 800717e:	a904      	add	r1, sp, #16
 8007180:	4630      	mov	r0, r6
 8007182:	f000 f879 	bl	8007278 <_printf_i>
 8007186:	e7e4      	b.n	8007152 <_vfiprintf_r+0x1ea>
 8007188:	08007988 	.word	0x08007988
 800718c:	08007992 	.word	0x08007992
 8007190:	00000000 	.word	0x00000000
 8007194:	08006f43 	.word	0x08006f43
 8007198:	0800798e 	.word	0x0800798e

0800719c <_printf_common>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	4616      	mov	r6, r2
 80071a2:	4699      	mov	r9, r3
 80071a4:	688a      	ldr	r2, [r1, #8]
 80071a6:	690b      	ldr	r3, [r1, #16]
 80071a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	bfb8      	it	lt
 80071b0:	4613      	movlt	r3, r2
 80071b2:	6033      	str	r3, [r6, #0]
 80071b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b8:	4607      	mov	r7, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	b10a      	cbz	r2, 80071c2 <_printf_common+0x26>
 80071be:	3301      	adds	r3, #1
 80071c0:	6033      	str	r3, [r6, #0]
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	0699      	lsls	r1, r3, #26
 80071c6:	bf42      	ittt	mi
 80071c8:	6833      	ldrmi	r3, [r6, #0]
 80071ca:	3302      	addmi	r3, #2
 80071cc:	6033      	strmi	r3, [r6, #0]
 80071ce:	6825      	ldr	r5, [r4, #0]
 80071d0:	f015 0506 	ands.w	r5, r5, #6
 80071d4:	d106      	bne.n	80071e4 <_printf_common+0x48>
 80071d6:	f104 0a19 	add.w	sl, r4, #25
 80071da:	68e3      	ldr	r3, [r4, #12]
 80071dc:	6832      	ldr	r2, [r6, #0]
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dc26      	bgt.n	8007232 <_printf_common+0x96>
 80071e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e8:	1e13      	subs	r3, r2, #0
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	bf18      	it	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	0692      	lsls	r2, r2, #26
 80071f2:	d42b      	bmi.n	800724c <_printf_common+0xb0>
 80071f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f8:	4649      	mov	r1, r9
 80071fa:	4638      	mov	r0, r7
 80071fc:	47c0      	blx	r8
 80071fe:	3001      	adds	r0, #1
 8007200:	d01e      	beq.n	8007240 <_printf_common+0xa4>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	6922      	ldr	r2, [r4, #16]
 8007206:	f003 0306 	and.w	r3, r3, #6
 800720a:	2b04      	cmp	r3, #4
 800720c:	bf02      	ittt	eq
 800720e:	68e5      	ldreq	r5, [r4, #12]
 8007210:	6833      	ldreq	r3, [r6, #0]
 8007212:	1aed      	subeq	r5, r5, r3
 8007214:	68a3      	ldr	r3, [r4, #8]
 8007216:	bf0c      	ite	eq
 8007218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800721c:	2500      	movne	r5, #0
 800721e:	4293      	cmp	r3, r2
 8007220:	bfc4      	itt	gt
 8007222:	1a9b      	subgt	r3, r3, r2
 8007224:	18ed      	addgt	r5, r5, r3
 8007226:	2600      	movs	r6, #0
 8007228:	341a      	adds	r4, #26
 800722a:	42b5      	cmp	r5, r6
 800722c:	d11a      	bne.n	8007264 <_printf_common+0xc8>
 800722e:	2000      	movs	r0, #0
 8007230:	e008      	b.n	8007244 <_printf_common+0xa8>
 8007232:	2301      	movs	r3, #1
 8007234:	4652      	mov	r2, sl
 8007236:	4649      	mov	r1, r9
 8007238:	4638      	mov	r0, r7
 800723a:	47c0      	blx	r8
 800723c:	3001      	adds	r0, #1
 800723e:	d103      	bne.n	8007248 <_printf_common+0xac>
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007248:	3501      	adds	r5, #1
 800724a:	e7c6      	b.n	80071da <_printf_common+0x3e>
 800724c:	18e1      	adds	r1, r4, r3
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	2030      	movs	r0, #48	; 0x30
 8007252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007256:	4422      	add	r2, r4
 8007258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800725c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007260:	3302      	adds	r3, #2
 8007262:	e7c7      	b.n	80071f4 <_printf_common+0x58>
 8007264:	2301      	movs	r3, #1
 8007266:	4622      	mov	r2, r4
 8007268:	4649      	mov	r1, r9
 800726a:	4638      	mov	r0, r7
 800726c:	47c0      	blx	r8
 800726e:	3001      	adds	r0, #1
 8007270:	d0e6      	beq.n	8007240 <_printf_common+0xa4>
 8007272:	3601      	adds	r6, #1
 8007274:	e7d9      	b.n	800722a <_printf_common+0x8e>
	...

08007278 <_printf_i>:
 8007278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	7e0f      	ldrb	r7, [r1, #24]
 800727e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007280:	2f78      	cmp	r7, #120	; 0x78
 8007282:	4691      	mov	r9, r2
 8007284:	4680      	mov	r8, r0
 8007286:	460c      	mov	r4, r1
 8007288:	469a      	mov	sl, r3
 800728a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800728e:	d807      	bhi.n	80072a0 <_printf_i+0x28>
 8007290:	2f62      	cmp	r7, #98	; 0x62
 8007292:	d80a      	bhi.n	80072aa <_printf_i+0x32>
 8007294:	2f00      	cmp	r7, #0
 8007296:	f000 80d4 	beq.w	8007442 <_printf_i+0x1ca>
 800729a:	2f58      	cmp	r7, #88	; 0x58
 800729c:	f000 80c0 	beq.w	8007420 <_printf_i+0x1a8>
 80072a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072a8:	e03a      	b.n	8007320 <_printf_i+0xa8>
 80072aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072ae:	2b15      	cmp	r3, #21
 80072b0:	d8f6      	bhi.n	80072a0 <_printf_i+0x28>
 80072b2:	a101      	add	r1, pc, #4	; (adr r1, 80072b8 <_printf_i+0x40>)
 80072b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b8:	08007311 	.word	0x08007311
 80072bc:	08007325 	.word	0x08007325
 80072c0:	080072a1 	.word	0x080072a1
 80072c4:	080072a1 	.word	0x080072a1
 80072c8:	080072a1 	.word	0x080072a1
 80072cc:	080072a1 	.word	0x080072a1
 80072d0:	08007325 	.word	0x08007325
 80072d4:	080072a1 	.word	0x080072a1
 80072d8:	080072a1 	.word	0x080072a1
 80072dc:	080072a1 	.word	0x080072a1
 80072e0:	080072a1 	.word	0x080072a1
 80072e4:	08007429 	.word	0x08007429
 80072e8:	08007351 	.word	0x08007351
 80072ec:	080073e3 	.word	0x080073e3
 80072f0:	080072a1 	.word	0x080072a1
 80072f4:	080072a1 	.word	0x080072a1
 80072f8:	0800744b 	.word	0x0800744b
 80072fc:	080072a1 	.word	0x080072a1
 8007300:	08007351 	.word	0x08007351
 8007304:	080072a1 	.word	0x080072a1
 8007308:	080072a1 	.word	0x080072a1
 800730c:	080073eb 	.word	0x080073eb
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	1d1a      	adds	r2, r3, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	602a      	str	r2, [r5, #0]
 8007318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800731c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007320:	2301      	movs	r3, #1
 8007322:	e09f      	b.n	8007464 <_printf_i+0x1ec>
 8007324:	6820      	ldr	r0, [r4, #0]
 8007326:	682b      	ldr	r3, [r5, #0]
 8007328:	0607      	lsls	r7, r0, #24
 800732a:	f103 0104 	add.w	r1, r3, #4
 800732e:	6029      	str	r1, [r5, #0]
 8007330:	d501      	bpl.n	8007336 <_printf_i+0xbe>
 8007332:	681e      	ldr	r6, [r3, #0]
 8007334:	e003      	b.n	800733e <_printf_i+0xc6>
 8007336:	0646      	lsls	r6, r0, #25
 8007338:	d5fb      	bpl.n	8007332 <_printf_i+0xba>
 800733a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800733e:	2e00      	cmp	r6, #0
 8007340:	da03      	bge.n	800734a <_printf_i+0xd2>
 8007342:	232d      	movs	r3, #45	; 0x2d
 8007344:	4276      	negs	r6, r6
 8007346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800734a:	485a      	ldr	r0, [pc, #360]	; (80074b4 <_printf_i+0x23c>)
 800734c:	230a      	movs	r3, #10
 800734e:	e012      	b.n	8007376 <_printf_i+0xfe>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	6820      	ldr	r0, [r4, #0]
 8007354:	1d19      	adds	r1, r3, #4
 8007356:	6029      	str	r1, [r5, #0]
 8007358:	0605      	lsls	r5, r0, #24
 800735a:	d501      	bpl.n	8007360 <_printf_i+0xe8>
 800735c:	681e      	ldr	r6, [r3, #0]
 800735e:	e002      	b.n	8007366 <_printf_i+0xee>
 8007360:	0641      	lsls	r1, r0, #25
 8007362:	d5fb      	bpl.n	800735c <_printf_i+0xe4>
 8007364:	881e      	ldrh	r6, [r3, #0]
 8007366:	4853      	ldr	r0, [pc, #332]	; (80074b4 <_printf_i+0x23c>)
 8007368:	2f6f      	cmp	r7, #111	; 0x6f
 800736a:	bf0c      	ite	eq
 800736c:	2308      	moveq	r3, #8
 800736e:	230a      	movne	r3, #10
 8007370:	2100      	movs	r1, #0
 8007372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007376:	6865      	ldr	r5, [r4, #4]
 8007378:	60a5      	str	r5, [r4, #8]
 800737a:	2d00      	cmp	r5, #0
 800737c:	bfa2      	ittt	ge
 800737e:	6821      	ldrge	r1, [r4, #0]
 8007380:	f021 0104 	bicge.w	r1, r1, #4
 8007384:	6021      	strge	r1, [r4, #0]
 8007386:	b90e      	cbnz	r6, 800738c <_printf_i+0x114>
 8007388:	2d00      	cmp	r5, #0
 800738a:	d04b      	beq.n	8007424 <_printf_i+0x1ac>
 800738c:	4615      	mov	r5, r2
 800738e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007392:	fb03 6711 	mls	r7, r3, r1, r6
 8007396:	5dc7      	ldrb	r7, [r0, r7]
 8007398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800739c:	4637      	mov	r7, r6
 800739e:	42bb      	cmp	r3, r7
 80073a0:	460e      	mov	r6, r1
 80073a2:	d9f4      	bls.n	800738e <_printf_i+0x116>
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d10b      	bne.n	80073c0 <_printf_i+0x148>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	07de      	lsls	r6, r3, #31
 80073ac:	d508      	bpl.n	80073c0 <_printf_i+0x148>
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	6861      	ldr	r1, [r4, #4]
 80073b2:	4299      	cmp	r1, r3
 80073b4:	bfde      	ittt	le
 80073b6:	2330      	movle	r3, #48	; 0x30
 80073b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073c0:	1b52      	subs	r2, r2, r5
 80073c2:	6122      	str	r2, [r4, #16]
 80073c4:	f8cd a000 	str.w	sl, [sp]
 80073c8:	464b      	mov	r3, r9
 80073ca:	aa03      	add	r2, sp, #12
 80073cc:	4621      	mov	r1, r4
 80073ce:	4640      	mov	r0, r8
 80073d0:	f7ff fee4 	bl	800719c <_printf_common>
 80073d4:	3001      	adds	r0, #1
 80073d6:	d14a      	bne.n	800746e <_printf_i+0x1f6>
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	b004      	add	sp, #16
 80073de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	f043 0320 	orr.w	r3, r3, #32
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	4833      	ldr	r0, [pc, #204]	; (80074b8 <_printf_i+0x240>)
 80073ec:	2778      	movs	r7, #120	; 0x78
 80073ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	6829      	ldr	r1, [r5, #0]
 80073f6:	061f      	lsls	r7, r3, #24
 80073f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80073fc:	d402      	bmi.n	8007404 <_printf_i+0x18c>
 80073fe:	065f      	lsls	r7, r3, #25
 8007400:	bf48      	it	mi
 8007402:	b2b6      	uxthmi	r6, r6
 8007404:	07df      	lsls	r7, r3, #31
 8007406:	bf48      	it	mi
 8007408:	f043 0320 	orrmi.w	r3, r3, #32
 800740c:	6029      	str	r1, [r5, #0]
 800740e:	bf48      	it	mi
 8007410:	6023      	strmi	r3, [r4, #0]
 8007412:	b91e      	cbnz	r6, 800741c <_printf_i+0x1a4>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	f023 0320 	bic.w	r3, r3, #32
 800741a:	6023      	str	r3, [r4, #0]
 800741c:	2310      	movs	r3, #16
 800741e:	e7a7      	b.n	8007370 <_printf_i+0xf8>
 8007420:	4824      	ldr	r0, [pc, #144]	; (80074b4 <_printf_i+0x23c>)
 8007422:	e7e4      	b.n	80073ee <_printf_i+0x176>
 8007424:	4615      	mov	r5, r2
 8007426:	e7bd      	b.n	80073a4 <_printf_i+0x12c>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	6826      	ldr	r6, [r4, #0]
 800742c:	6961      	ldr	r1, [r4, #20]
 800742e:	1d18      	adds	r0, r3, #4
 8007430:	6028      	str	r0, [r5, #0]
 8007432:	0635      	lsls	r5, r6, #24
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	d501      	bpl.n	800743c <_printf_i+0x1c4>
 8007438:	6019      	str	r1, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0x1ca>
 800743c:	0670      	lsls	r0, r6, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0x1c0>
 8007440:	8019      	strh	r1, [r3, #0]
 8007442:	2300      	movs	r3, #0
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	4615      	mov	r5, r2
 8007448:	e7bc      	b.n	80073c4 <_printf_i+0x14c>
 800744a:	682b      	ldr	r3, [r5, #0]
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	602a      	str	r2, [r5, #0]
 8007450:	681d      	ldr	r5, [r3, #0]
 8007452:	6862      	ldr	r2, [r4, #4]
 8007454:	2100      	movs	r1, #0
 8007456:	4628      	mov	r0, r5
 8007458:	f7f8 fed2 	bl	8000200 <memchr>
 800745c:	b108      	cbz	r0, 8007462 <_printf_i+0x1ea>
 800745e:	1b40      	subs	r0, r0, r5
 8007460:	6060      	str	r0, [r4, #4]
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	2300      	movs	r3, #0
 8007468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746c:	e7aa      	b.n	80073c4 <_printf_i+0x14c>
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	462a      	mov	r2, r5
 8007472:	4649      	mov	r1, r9
 8007474:	4640      	mov	r0, r8
 8007476:	47d0      	blx	sl
 8007478:	3001      	adds	r0, #1
 800747a:	d0ad      	beq.n	80073d8 <_printf_i+0x160>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	079b      	lsls	r3, r3, #30
 8007480:	d413      	bmi.n	80074aa <_printf_i+0x232>
 8007482:	68e0      	ldr	r0, [r4, #12]
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	4298      	cmp	r0, r3
 8007488:	bfb8      	it	lt
 800748a:	4618      	movlt	r0, r3
 800748c:	e7a6      	b.n	80073dc <_printf_i+0x164>
 800748e:	2301      	movs	r3, #1
 8007490:	4632      	mov	r2, r6
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	47d0      	blx	sl
 8007498:	3001      	adds	r0, #1
 800749a:	d09d      	beq.n	80073d8 <_printf_i+0x160>
 800749c:	3501      	adds	r5, #1
 800749e:	68e3      	ldr	r3, [r4, #12]
 80074a0:	9903      	ldr	r1, [sp, #12]
 80074a2:	1a5b      	subs	r3, r3, r1
 80074a4:	42ab      	cmp	r3, r5
 80074a6:	dcf2      	bgt.n	800748e <_printf_i+0x216>
 80074a8:	e7eb      	b.n	8007482 <_printf_i+0x20a>
 80074aa:	2500      	movs	r5, #0
 80074ac:	f104 0619 	add.w	r6, r4, #25
 80074b0:	e7f5      	b.n	800749e <_printf_i+0x226>
 80074b2:	bf00      	nop
 80074b4:	08007999 	.word	0x08007999
 80074b8:	080079aa 	.word	0x080079aa

080074bc <__sflush_r>:
 80074bc:	898a      	ldrh	r2, [r1, #12]
 80074be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c2:	4605      	mov	r5, r0
 80074c4:	0710      	lsls	r0, r2, #28
 80074c6:	460c      	mov	r4, r1
 80074c8:	d458      	bmi.n	800757c <__sflush_r+0xc0>
 80074ca:	684b      	ldr	r3, [r1, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dc05      	bgt.n	80074dc <__sflush_r+0x20>
 80074d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dc02      	bgt.n	80074dc <__sflush_r+0x20>
 80074d6:	2000      	movs	r0, #0
 80074d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074de:	2e00      	cmp	r6, #0
 80074e0:	d0f9      	beq.n	80074d6 <__sflush_r+0x1a>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074e8:	682f      	ldr	r7, [r5, #0]
 80074ea:	6a21      	ldr	r1, [r4, #32]
 80074ec:	602b      	str	r3, [r5, #0]
 80074ee:	d032      	beq.n	8007556 <__sflush_r+0x9a>
 80074f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	075a      	lsls	r2, r3, #29
 80074f6:	d505      	bpl.n	8007504 <__sflush_r+0x48>
 80074f8:	6863      	ldr	r3, [r4, #4]
 80074fa:	1ac0      	subs	r0, r0, r3
 80074fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074fe:	b10b      	cbz	r3, 8007504 <__sflush_r+0x48>
 8007500:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007502:	1ac0      	subs	r0, r0, r3
 8007504:	2300      	movs	r3, #0
 8007506:	4602      	mov	r2, r0
 8007508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800750a:	6a21      	ldr	r1, [r4, #32]
 800750c:	4628      	mov	r0, r5
 800750e:	47b0      	blx	r6
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	d106      	bne.n	8007524 <__sflush_r+0x68>
 8007516:	6829      	ldr	r1, [r5, #0]
 8007518:	291d      	cmp	r1, #29
 800751a:	d82b      	bhi.n	8007574 <__sflush_r+0xb8>
 800751c:	4a29      	ldr	r2, [pc, #164]	; (80075c4 <__sflush_r+0x108>)
 800751e:	410a      	asrs	r2, r1
 8007520:	07d6      	lsls	r6, r2, #31
 8007522:	d427      	bmi.n	8007574 <__sflush_r+0xb8>
 8007524:	2200      	movs	r2, #0
 8007526:	6062      	str	r2, [r4, #4]
 8007528:	04d9      	lsls	r1, r3, #19
 800752a:	6922      	ldr	r2, [r4, #16]
 800752c:	6022      	str	r2, [r4, #0]
 800752e:	d504      	bpl.n	800753a <__sflush_r+0x7e>
 8007530:	1c42      	adds	r2, r0, #1
 8007532:	d101      	bne.n	8007538 <__sflush_r+0x7c>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	b903      	cbnz	r3, 800753a <__sflush_r+0x7e>
 8007538:	6560      	str	r0, [r4, #84]	; 0x54
 800753a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800753c:	602f      	str	r7, [r5, #0]
 800753e:	2900      	cmp	r1, #0
 8007540:	d0c9      	beq.n	80074d6 <__sflush_r+0x1a>
 8007542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007546:	4299      	cmp	r1, r3
 8007548:	d002      	beq.n	8007550 <__sflush_r+0x94>
 800754a:	4628      	mov	r0, r5
 800754c:	f7ff fa92 	bl	8006a74 <_free_r>
 8007550:	2000      	movs	r0, #0
 8007552:	6360      	str	r0, [r4, #52]	; 0x34
 8007554:	e7c0      	b.n	80074d8 <__sflush_r+0x1c>
 8007556:	2301      	movs	r3, #1
 8007558:	4628      	mov	r0, r5
 800755a:	47b0      	blx	r6
 800755c:	1c41      	adds	r1, r0, #1
 800755e:	d1c8      	bne.n	80074f2 <__sflush_r+0x36>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0c5      	beq.n	80074f2 <__sflush_r+0x36>
 8007566:	2b1d      	cmp	r3, #29
 8007568:	d001      	beq.n	800756e <__sflush_r+0xb2>
 800756a:	2b16      	cmp	r3, #22
 800756c:	d101      	bne.n	8007572 <__sflush_r+0xb6>
 800756e:	602f      	str	r7, [r5, #0]
 8007570:	e7b1      	b.n	80074d6 <__sflush_r+0x1a>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007578:	81a3      	strh	r3, [r4, #12]
 800757a:	e7ad      	b.n	80074d8 <__sflush_r+0x1c>
 800757c:	690f      	ldr	r7, [r1, #16]
 800757e:	2f00      	cmp	r7, #0
 8007580:	d0a9      	beq.n	80074d6 <__sflush_r+0x1a>
 8007582:	0793      	lsls	r3, r2, #30
 8007584:	680e      	ldr	r6, [r1, #0]
 8007586:	bf08      	it	eq
 8007588:	694b      	ldreq	r3, [r1, #20]
 800758a:	600f      	str	r7, [r1, #0]
 800758c:	bf18      	it	ne
 800758e:	2300      	movne	r3, #0
 8007590:	eba6 0807 	sub.w	r8, r6, r7
 8007594:	608b      	str	r3, [r1, #8]
 8007596:	f1b8 0f00 	cmp.w	r8, #0
 800759a:	dd9c      	ble.n	80074d6 <__sflush_r+0x1a>
 800759c:	6a21      	ldr	r1, [r4, #32]
 800759e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075a0:	4643      	mov	r3, r8
 80075a2:	463a      	mov	r2, r7
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b0      	blx	r6
 80075a8:	2800      	cmp	r0, #0
 80075aa:	dc06      	bgt.n	80075ba <__sflush_r+0xfe>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b2:	81a3      	strh	r3, [r4, #12]
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	e78e      	b.n	80074d8 <__sflush_r+0x1c>
 80075ba:	4407      	add	r7, r0
 80075bc:	eba8 0800 	sub.w	r8, r8, r0
 80075c0:	e7e9      	b.n	8007596 <__sflush_r+0xda>
 80075c2:	bf00      	nop
 80075c4:	dfbffffe 	.word	0xdfbffffe

080075c8 <_fflush_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	690b      	ldr	r3, [r1, #16]
 80075cc:	4605      	mov	r5, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	b913      	cbnz	r3, 80075d8 <_fflush_r+0x10>
 80075d2:	2500      	movs	r5, #0
 80075d4:	4628      	mov	r0, r5
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	b118      	cbz	r0, 80075e2 <_fflush_r+0x1a>
 80075da:	6a03      	ldr	r3, [r0, #32]
 80075dc:	b90b      	cbnz	r3, 80075e2 <_fflush_r+0x1a>
 80075de:	f7fe fffd 	bl	80065dc <__sinit>
 80075e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0f3      	beq.n	80075d2 <_fflush_r+0xa>
 80075ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075ec:	07d0      	lsls	r0, r2, #31
 80075ee:	d404      	bmi.n	80075fa <_fflush_r+0x32>
 80075f0:	0599      	lsls	r1, r3, #22
 80075f2:	d402      	bmi.n	80075fa <_fflush_r+0x32>
 80075f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075f6:	f7ff fa3a 	bl	8006a6e <__retarget_lock_acquire_recursive>
 80075fa:	4628      	mov	r0, r5
 80075fc:	4621      	mov	r1, r4
 80075fe:	f7ff ff5d 	bl	80074bc <__sflush_r>
 8007602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007604:	07da      	lsls	r2, r3, #31
 8007606:	4605      	mov	r5, r0
 8007608:	d4e4      	bmi.n	80075d4 <_fflush_r+0xc>
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	059b      	lsls	r3, r3, #22
 800760e:	d4e1      	bmi.n	80075d4 <_fflush_r+0xc>
 8007610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007612:	f7ff fa2d 	bl	8006a70 <__retarget_lock_release_recursive>
 8007616:	e7dd      	b.n	80075d4 <_fflush_r+0xc>

08007618 <__swhatbuf_r>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	460c      	mov	r4, r1
 800761c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007620:	2900      	cmp	r1, #0
 8007622:	b096      	sub	sp, #88	; 0x58
 8007624:	4615      	mov	r5, r2
 8007626:	461e      	mov	r6, r3
 8007628:	da0d      	bge.n	8007646 <__swhatbuf_r+0x2e>
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007630:	f04f 0100 	mov.w	r1, #0
 8007634:	bf0c      	ite	eq
 8007636:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800763a:	2340      	movne	r3, #64	; 0x40
 800763c:	2000      	movs	r0, #0
 800763e:	6031      	str	r1, [r6, #0]
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	b016      	add	sp, #88	; 0x58
 8007644:	bd70      	pop	{r4, r5, r6, pc}
 8007646:	466a      	mov	r2, sp
 8007648:	f000 f862 	bl	8007710 <_fstat_r>
 800764c:	2800      	cmp	r0, #0
 800764e:	dbec      	blt.n	800762a <__swhatbuf_r+0x12>
 8007650:	9901      	ldr	r1, [sp, #4]
 8007652:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007656:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800765a:	4259      	negs	r1, r3
 800765c:	4159      	adcs	r1, r3
 800765e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007662:	e7eb      	b.n	800763c <__swhatbuf_r+0x24>

08007664 <__smakebuf_r>:
 8007664:	898b      	ldrh	r3, [r1, #12]
 8007666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007668:	079d      	lsls	r5, r3, #30
 800766a:	4606      	mov	r6, r0
 800766c:	460c      	mov	r4, r1
 800766e:	d507      	bpl.n	8007680 <__smakebuf_r+0x1c>
 8007670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	6123      	str	r3, [r4, #16]
 8007678:	2301      	movs	r3, #1
 800767a:	6163      	str	r3, [r4, #20]
 800767c:	b002      	add	sp, #8
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	ab01      	add	r3, sp, #4
 8007682:	466a      	mov	r2, sp
 8007684:	f7ff ffc8 	bl	8007618 <__swhatbuf_r>
 8007688:	9900      	ldr	r1, [sp, #0]
 800768a:	4605      	mov	r5, r0
 800768c:	4630      	mov	r0, r6
 800768e:	f7ff fa5d 	bl	8006b4c <_malloc_r>
 8007692:	b948      	cbnz	r0, 80076a8 <__smakebuf_r+0x44>
 8007694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007698:	059a      	lsls	r2, r3, #22
 800769a:	d4ef      	bmi.n	800767c <__smakebuf_r+0x18>
 800769c:	f023 0303 	bic.w	r3, r3, #3
 80076a0:	f043 0302 	orr.w	r3, r3, #2
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	e7e3      	b.n	8007670 <__smakebuf_r+0xc>
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	6020      	str	r0, [r4, #0]
 80076ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	9b00      	ldr	r3, [sp, #0]
 80076b4:	6163      	str	r3, [r4, #20]
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	6120      	str	r0, [r4, #16]
 80076ba:	b15b      	cbz	r3, 80076d4 <__smakebuf_r+0x70>
 80076bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c0:	4630      	mov	r0, r6
 80076c2:	f000 f837 	bl	8007734 <_isatty_r>
 80076c6:	b128      	cbz	r0, 80076d4 <__smakebuf_r+0x70>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	f043 0301 	orr.w	r3, r3, #1
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	431d      	orrs	r5, r3
 80076d8:	81a5      	strh	r5, [r4, #12]
 80076da:	e7cf      	b.n	800767c <__smakebuf_r+0x18>

080076dc <memmove>:
 80076dc:	4288      	cmp	r0, r1
 80076de:	b510      	push	{r4, lr}
 80076e0:	eb01 0402 	add.w	r4, r1, r2
 80076e4:	d902      	bls.n	80076ec <memmove+0x10>
 80076e6:	4284      	cmp	r4, r0
 80076e8:	4623      	mov	r3, r4
 80076ea:	d807      	bhi.n	80076fc <memmove+0x20>
 80076ec:	1e43      	subs	r3, r0, #1
 80076ee:	42a1      	cmp	r1, r4
 80076f0:	d008      	beq.n	8007704 <memmove+0x28>
 80076f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076fa:	e7f8      	b.n	80076ee <memmove+0x12>
 80076fc:	4402      	add	r2, r0
 80076fe:	4601      	mov	r1, r0
 8007700:	428a      	cmp	r2, r1
 8007702:	d100      	bne.n	8007706 <memmove+0x2a>
 8007704:	bd10      	pop	{r4, pc}
 8007706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800770a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800770e:	e7f7      	b.n	8007700 <memmove+0x24>

08007710 <_fstat_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d07      	ldr	r5, [pc, #28]	; (8007730 <_fstat_r+0x20>)
 8007714:	2300      	movs	r3, #0
 8007716:	4604      	mov	r4, r0
 8007718:	4608      	mov	r0, r1
 800771a:	4611      	mov	r1, r2
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	f7fa f96c 	bl	80019fa <_fstat>
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	d102      	bne.n	800772c <_fstat_r+0x1c>
 8007726:	682b      	ldr	r3, [r5, #0]
 8007728:	b103      	cbz	r3, 800772c <_fstat_r+0x1c>
 800772a:	6023      	str	r3, [r4, #0]
 800772c:	bd38      	pop	{r3, r4, r5, pc}
 800772e:	bf00      	nop
 8007730:	20000608 	.word	0x20000608

08007734 <_isatty_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4d06      	ldr	r5, [pc, #24]	; (8007750 <_isatty_r+0x1c>)
 8007738:	2300      	movs	r3, #0
 800773a:	4604      	mov	r4, r0
 800773c:	4608      	mov	r0, r1
 800773e:	602b      	str	r3, [r5, #0]
 8007740:	f7fa f96b 	bl	8001a1a <_isatty>
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	d102      	bne.n	800774e <_isatty_r+0x1a>
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	b103      	cbz	r3, 800774e <_isatty_r+0x1a>
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	bd38      	pop	{r3, r4, r5, pc}
 8007750:	20000608 	.word	0x20000608

08007754 <_sbrk_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d06      	ldr	r5, [pc, #24]	; (8007770 <_sbrk_r+0x1c>)
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	f7fa f974 	bl	8001a4c <_sbrk>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_sbrk_r+0x1a>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_sbrk_r+0x1a>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	20000608 	.word	0x20000608

08007774 <memcpy>:
 8007774:	440a      	add	r2, r1
 8007776:	4291      	cmp	r1, r2
 8007778:	f100 33ff 	add.w	r3, r0, #4294967295
 800777c:	d100      	bne.n	8007780 <memcpy+0xc>
 800777e:	4770      	bx	lr
 8007780:	b510      	push	{r4, lr}
 8007782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800778a:	4291      	cmp	r1, r2
 800778c:	d1f9      	bne.n	8007782 <memcpy+0xe>
 800778e:	bd10      	pop	{r4, pc}

08007790 <_realloc_r>:
 8007790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007794:	4680      	mov	r8, r0
 8007796:	4614      	mov	r4, r2
 8007798:	460e      	mov	r6, r1
 800779a:	b921      	cbnz	r1, 80077a6 <_realloc_r+0x16>
 800779c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077a0:	4611      	mov	r1, r2
 80077a2:	f7ff b9d3 	b.w	8006b4c <_malloc_r>
 80077a6:	b92a      	cbnz	r2, 80077b4 <_realloc_r+0x24>
 80077a8:	f7ff f964 	bl	8006a74 <_free_r>
 80077ac:	4625      	mov	r5, r4
 80077ae:	4628      	mov	r0, r5
 80077b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b4:	f000 f81b 	bl	80077ee <_malloc_usable_size_r>
 80077b8:	4284      	cmp	r4, r0
 80077ba:	4607      	mov	r7, r0
 80077bc:	d802      	bhi.n	80077c4 <_realloc_r+0x34>
 80077be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077c2:	d812      	bhi.n	80077ea <_realloc_r+0x5a>
 80077c4:	4621      	mov	r1, r4
 80077c6:	4640      	mov	r0, r8
 80077c8:	f7ff f9c0 	bl	8006b4c <_malloc_r>
 80077cc:	4605      	mov	r5, r0
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d0ed      	beq.n	80077ae <_realloc_r+0x1e>
 80077d2:	42bc      	cmp	r4, r7
 80077d4:	4622      	mov	r2, r4
 80077d6:	4631      	mov	r1, r6
 80077d8:	bf28      	it	cs
 80077da:	463a      	movcs	r2, r7
 80077dc:	f7ff ffca 	bl	8007774 <memcpy>
 80077e0:	4631      	mov	r1, r6
 80077e2:	4640      	mov	r0, r8
 80077e4:	f7ff f946 	bl	8006a74 <_free_r>
 80077e8:	e7e1      	b.n	80077ae <_realloc_r+0x1e>
 80077ea:	4635      	mov	r5, r6
 80077ec:	e7df      	b.n	80077ae <_realloc_r+0x1e>

080077ee <_malloc_usable_size_r>:
 80077ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f2:	1f18      	subs	r0, r3, #4
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bfbc      	itt	lt
 80077f8:	580b      	ldrlt	r3, [r1, r0]
 80077fa:	18c0      	addlt	r0, r0, r3
 80077fc:	4770      	bx	lr
	...

08007800 <_init>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr

0800780c <_fini>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr
