
clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800982c  0800982c  000202b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009834  08009834  000202b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0800983c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202b0  2**0
                  CONTENTS
 10 .bss          00000668  200002b0  200002b0  000202b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000918  20000918  000202b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019e67  00000000  00000000  00020323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003680  00000000  00000000  0003a18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001798  00000000  00000000  0003d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000128b  00000000  00000000  0003efa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028def  00000000  00000000  00040233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c908  00000000  00000000  00069022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8c30  00000000  00000000  0008592a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006ebc  00000000  00000000  0017e55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00185418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b0 	.word	0x200002b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800965c 	.word	0x0800965c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002b4 	.word	0x200002b4
 80001ec:	0800965c 	.word	0x0800965c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f007 fb31 	bl	8007c36 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f004 f9b3 	bl	8004954 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f007 ffbb 	bl	8008580 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f007 fb0a 	bl	8007c36 <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f007 fb02 	bl	8007c36 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f007 faf2 	bl	8007c36 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	08009684 	.word	0x08009684
 8000660:	200006b0 	.word	0x200006b0
 8000664:	200005ac 	.word	0x200005ac
 8000668:	08009674 	.word	0x08009674
 800066c:	0800967c 	.word	0x0800967c
 8000670:	08009680 	.word	0x08009680

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f004 f95f 	bl	8004954 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f004 f828 	bl	8004758 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fdd9 	bl	80022c4 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200005ac 	.word	0x200005ac

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <_write>:
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <_write+0x28>)
 80007f0:	f007 fa21 	bl	8007c36 <HAL_UART_Transmit>
	return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200006b0 	.word	0x200006b0

08000804 <update_nvitems>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef update_nvitems(void)
{
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b08e      	sub	sp, #56	; 0x38
 8000808:	af00      	add	r7, sp, #0
	uint32_t FirstSector,NbOfSectors,SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error= HAL_OK;
 800080a:	2300      	movs	r3, #0
 800080c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    uint32_t Address,i;
    uint64_t Data;
    uint8_t *ptr;

	HAL_FLASH_Unlock();
 8000810:	f003 f99c 	bl	8003b4c <HAL_FLASH_Unlock>
	FirstSector = FLASH_SECTOR_11;
 8000814:	230b      	movs	r3, #11
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector        = FirstSector;
 8000824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000826:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8000828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082a:	60fb      	str	r3, [r7, #12]

	error = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 800082c:	f107 0214 	add.w	r2, r7, #20
 8000830:	463b      	mov	r3, r7
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fafb 	bl	8003e30 <HAL_FLASHEx_Erase>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(error != HAL_OK)
 8000840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <update_nvitems+0x4a>
	{
		return error;
 8000848:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800084c:	e02c      	b.n	80008a8 <update_nvitems+0xa4>
	}

	ptr = (uint8_t*)&default_nvitem;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <update_nvitems+0xac>)
 8000850:	627b      	str	r3, [r7, #36]	; 0x24

	for(i=0;i<sizeof(NVitemTypeDef);i++)
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
 8000856:	e022      	b.n	800089e <update_nvitems+0x9a>
	{
		Address = (uint8_t*)nv_items+i;
 8000858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800085e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8000862:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*)ptr+ i);
 8000864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2200      	movs	r2, #0
 8000870:	461c      	mov	r4, r3
 8000872:	4615      	mov	r5, r2
 8000874:	e9c7 4506 	strd	r4, r5, [r7, #24]
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,Address,Data);
 8000878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800087c:	6a39      	ldr	r1, [r7, #32]
 800087e:	2000      	movs	r0, #0
 8000880:	f003 f910 	bl	8003aa4 <HAL_FLASH_Program>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(error != HAL_OK)
 800088a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <update_nvitems+0x94>
		{
			return error;
 8000892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000896:	e007      	b.n	80008a8 <update_nvitems+0xa4>
	for(i=0;i<sizeof(NVitemTypeDef);i++)
 8000898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089a:	3301      	adds	r3, #1
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
 800089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d9d9      	bls.n	8000858 <update_nvitems+0x54>
		}
	}

	HAL_FLASH_Lock();
 80008a4:	f003 f974 	bl	8003b90 <HAL_FLASH_Lock>
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3738      	adds	r7, #56	; 0x38
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bdb0      	pop	{r4, r5, r7, pc}
 80008b0:	20000000 	.word	0x20000000

080008b4 <get_time>:
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
RTC_AlarmTypeDef aTime;

void get_time(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008ba:	2200      	movs	r2, #0
 80008bc:	4911      	ldr	r1, [pc, #68]	; (8000904 <get_time+0x50>)
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <get_time+0x54>)
 80008c0:	f005 fb62 	bl	8005f88 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008c4:	2200      	movs	r2, #0
 80008c6:	4911      	ldr	r1, [pc, #68]	; (800090c <get_time+0x58>)
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <get_time+0x54>)
 80008ca:	f005 fc3f 	bl	800614c <HAL_RTC_GetDate>
	sprintf((char*)showTime, "%s %02d : %02d : %02d      ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <get_time+0x50>)
 80008d0:	78db      	ldrb	r3, [r3, #3]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <get_time+0x5c>)
 80008dc:	441a      	add	r2, r3
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <get_time+0x50>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <get_time+0x50>)
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <get_time+0x50>)
 80008ec:	789b      	ldrb	r3, [r3, #2]
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	9100      	str	r1, [sp, #0]
 80008f2:	4603      	mov	r3, r0
 80008f4:	4907      	ldr	r1, [pc, #28]	; (8000914 <get_time+0x60>)
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <get_time+0x64>)
 80008f8:	f007 fe76 	bl	80085e8 <siprintf>
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000740 	.word	0x20000740
 8000908:	20000600 	.word	0x20000600
 800090c:	20000754 	.word	0x20000754
 8000910:	20000240 	.word	0x20000240
 8000914:	080096bc 	.word	0x080096bc
 8000918:	200006f8 	.word	0x200006f8

0800091c <get_alarm>:
void get_alarm(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af02      	add	r7, sp, #8
	HAL_RTC_GetAlarm(&hrtc, &aTime, RTC_CR_ALRAE, RTC_FORMAT_BIN);
 8000922:	2300      	movs	r3, #0
 8000924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000928:	490e      	ldr	r1, [pc, #56]	; (8000964 <get_alarm+0x48>)
 800092a:	480f      	ldr	r0, [pc, #60]	; (8000968 <get_alarm+0x4c>)
 800092c:	f005 feca 	bl	80066c4 <HAL_RTC_GetAlarm>
	sprintf((char*)alarmTime, "%s %02d : %02d : %02d      ", ampm[aTime.AlarmTime.TimeFormat], aTime.AlarmTime.Hours, aTime.AlarmTime.Minutes, aTime.AlarmTime.Seconds);
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <get_alarm+0x48>)
 8000932:	78db      	ldrb	r3, [r3, #3]
 8000934:	461a      	mov	r2, r3
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	4a0b      	ldr	r2, [pc, #44]	; (800096c <get_alarm+0x50>)
 800093e:	441a      	add	r2, r3
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <get_alarm+0x48>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <get_alarm+0x48>)
 8000948:	785b      	ldrb	r3, [r3, #1]
 800094a:	4619      	mov	r1, r3
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <get_alarm+0x48>)
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	9100      	str	r1, [sp, #0]
 8000954:	4603      	mov	r3, r0
 8000956:	4906      	ldr	r1, [pc, #24]	; (8000970 <get_alarm+0x54>)
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <get_alarm+0x58>)
 800095a:	f007 fe45 	bl	80085e8 <siprintf>
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000758 	.word	0x20000758
 8000968:	20000600 	.word	0x20000600
 800096c:	20000240 	.word	0x20000240
 8000970:	080096bc 	.word	0x080096bc
 8000974:	20000718 	.word	0x20000718

08000978 <time_display>:

void time_display(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  if (current_state.mode == NORMAL_STATE) {
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <time_display+0xac>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d112      	bne.n	80009aa <time_display+0x32>
	  get_time();
 8000984:	f7ff ff96 	bl	80008b4 <get_time>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	204e      	movs	r0, #78	; 0x4e
 800098c:	f7ff fec8 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "CLOCK              ");
 8000990:	4925      	ldr	r1, [pc, #148]	; (8000a28 <time_display+0xb0>)
 8000992:	204e      	movs	r0, #78	; 0x4e
 8000994:	f7ff ff05 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000998:	21c0      	movs	r1, #192	; 0xc0
 800099a:	204e      	movs	r0, #78	; 0x4e
 800099c:	f7ff fec0 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 80009a0:	4922      	ldr	r1, [pc, #136]	; (8000a2c <time_display+0xb4>)
 80009a2:	204e      	movs	r0, #78	; 0x4e
 80009a4:	f7ff fefd 	bl	80007a2 <LCD_SendString>
  else if (current_state.mode == MUSIC_SELECT) {
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
	  LCD_SendString(LCD_ADDR, "Music Select       ");
	  music_select();
  }
}
 80009a8:	e039      	b.n	8000a1e <time_display+0xa6>
  else if (current_state.mode == TIME_SETTING){
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <time_display+0xac>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d110      	bne.n	80009d4 <time_display+0x5c>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	204e      	movs	r0, #78	; 0x4e
 80009b6:	f7ff feb3 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Time Setting      ");
 80009ba:	491d      	ldr	r1, [pc, #116]	; (8000a30 <time_display+0xb8>)
 80009bc:	204e      	movs	r0, #78	; 0x4e
 80009be:	f7ff fef0 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80009c2:	21c0      	movs	r1, #192	; 0xc0
 80009c4:	204e      	movs	r0, #78	; 0x4e
 80009c6:	f7ff feab 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 80009ca:	4918      	ldr	r1, [pc, #96]	; (8000a2c <time_display+0xb4>)
 80009cc:	204e      	movs	r0, #78	; 0x4e
 80009ce:	f7ff fee8 	bl	80007a2 <LCD_SendString>
}
 80009d2:	e024      	b.n	8000a1e <time_display+0xa6>
  else if (current_state.mode == ALARM_TIME_SETTING) {
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <time_display+0xac>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d112      	bne.n	8000a02 <time_display+0x8a>
	  get_alarm();
 80009dc:	f7ff ff9e 	bl	800091c <get_alarm>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	204e      	movs	r0, #78	; 0x4e
 80009e4:	f7ff fe9c 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Alarm Time       ");
 80009e8:	4912      	ldr	r1, [pc, #72]	; (8000a34 <time_display+0xbc>)
 80009ea:	204e      	movs	r0, #78	; 0x4e
 80009ec:	f7ff fed9 	bl	80007a2 <LCD_SendString>
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80009f0:	21c0      	movs	r1, #192	; 0xc0
 80009f2:	204e      	movs	r0, #78	; 0x4e
 80009f4:	f7ff fe94 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, alarmTime);
 80009f8:	490f      	ldr	r1, [pc, #60]	; (8000a38 <time_display+0xc0>)
 80009fa:	204e      	movs	r0, #78	; 0x4e
 80009fc:	f7ff fed1 	bl	80007a2 <LCD_SendString>
}
 8000a00:	e00d      	b.n	8000a1e <time_display+0xa6>
  else if (current_state.mode == MUSIC_SELECT) {
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <time_display+0xac>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d109      	bne.n	8000a1e <time_display+0xa6>
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	204e      	movs	r0, #78	; 0x4e
 8000a0e:	f7ff fe87 	bl	8000720 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, "Music Select       ");
 8000a12:	490a      	ldr	r1, [pc, #40]	; (8000a3c <time_display+0xc4>)
 8000a14:	204e      	movs	r0, #78	; 0x4e
 8000a16:	f7ff fec4 	bl	80007a2 <LCD_SendString>
	  music_select();
 8000a1a:	f000 fa41 	bl	8000ea0 <music_select>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200002d4 	.word	0x200002d4
 8000a28:	080096d8 	.word	0x080096d8
 8000a2c:	200006f8 	.word	0x200006f8
 8000a30:	080096ec 	.word	0x080096ec
 8000a34:	08009700 	.word	0x08009700
 8000a38:	20000718 	.word	0x20000718
 8000a3c:	08009714 	.word	0x08009714

08000a40 <HAL_GPIO_EXTI_Callback>:
	SECOND_PULL
} click_state;
enum CLICK_STATE click_state = NO_CLICK;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) {
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	2b80      	cmp	r3, #128	; 0x80
 8000a4e:	f040 8092 	bne.w	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
        level = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	4849      	ldr	r0, [pc, #292]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a56:	f003 fcd7 	bl	8004408 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a60:	601a      	str	r2, [r3, #0]
    	if (seq > 0) {
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x144>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d010      	beq.n	8000a8c <HAL_GPIO_EXTI_Callback+0x4c>
    		seq = alarm_music[current_state.music_num].music_length;
 8000a6a:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	4947      	ldr	r1, [pc, #284]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	440b      	add	r3, r1
 8000a7a:	3314      	adds	r3, #20
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x144>)
 8000a82:	701a      	strb	r2, [r3, #0]
    		if (level == 1) return;
 8000a84:	4b3e      	ldr	r3, [pc, #248]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	e074      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
    	}
    	else {
			currentTime = HAL_GetTick();
 8000a8c:	f001 fc0e 	bl	80022ac <HAL_GetTick>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a3f      	ldr	r2, [pc, #252]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x150>)
 8000a94:	6013      	str	r3, [r2, #0]
			interval = currentTime - lastTime;
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x150>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x154>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	4a3d      	ldr	r2, [pc, #244]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x158>)
 8000aa2:	6013      	str	r3, [r2, #0]
			lastTime = currentTime;
 8000aa4:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x150>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a3a      	ldr	r2, [pc, #232]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x154>)
 8000aaa:	6013      	str	r3, [r2, #0]

			if (interval > 50) {
 8000aac:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x158>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b32      	cmp	r3, #50	; 0x32
 8000ab2:	d960      	bls.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
				if (level == 0 && (click_state == NO_CLICK || click_state == SECOND_PULL)) {
 8000ab4:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d110      	bne.n	8000ade <HAL_GPIO_EXTI_Callback+0x9e>
 8000abc:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_EXTI_Callback+0x8c>
 8000ac4:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d108      	bne.n	8000ade <HAL_GPIO_EXTI_Callback+0x9e>
					click_state = FIRST_PUSH;
 8000acc:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
					ctime = HAL_GetTick();
 8000ad2:	f001 fbeb 	bl	80022ac <HAL_GetTick>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a31      	ldr	r2, [pc, #196]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x160>)
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	e04b      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
				}
				else if (level == 1 && click_state == FIRST_PUSH) {
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d121      	bne.n	8000b2a <HAL_GPIO_EXTI_Callback+0xea>
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d11d      	bne.n	8000b2a <HAL_GPIO_EXTI_Callback+0xea>
					click_state = FIRST_PULL;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	701a      	strb	r2, [r3, #0]
					ltime = HAL_GetTick();
 8000af4:	f001 fbda 	bl	80022ac <HAL_GetTick>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x164>)
 8000afc:	6013      	str	r3, [r2, #0]
					if (ltime - ctime > 1000 && current_state.mode == NORMAL_STATE) {
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x164>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x160>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b0c:	d932      	bls.n	8000b74 <HAL_GPIO_EXTI_Callback+0x134>
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d12e      	bne.n	8000b74 <HAL_GPIO_EXTI_Callback+0x134>
						printf("Long click~~~~~~~~\r\n");
 8000b16:	4824      	ldr	r0, [pc, #144]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0x168>)
 8000b18:	f007 fd2a 	bl	8008570 <puts>
						click_state = NO_CLICK;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
						current_state.mode = ALARM_TIME_SETTING;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	701a      	strb	r2, [r3, #0]
					if (ltime - ctime > 1000 && current_state.mode == NORMAL_STATE) {
 8000b28:	e024      	b.n	8000b74 <HAL_GPIO_EXTI_Callback+0x134>
					}
					else {
		//				printf("first pull \r\n");
					}
				}
				else if (level == 0 && click_state == FIRST_PULL) {
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d107      	bne.n	8000b42 <HAL_GPIO_EXTI_Callback+0x102>
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d103      	bne.n	8000b42 <HAL_GPIO_EXTI_Callback+0x102>
					click_state = SECOND_PUSH;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	e019      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
		//			printf("second_push \r\n");
				}
				else if (level == 1 && click_state == SECOND_PUSH) {
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x140>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d115      	bne.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d111      	bne.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
					click_state = SECOND_PULL;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	701a      	strb	r2, [r3, #0]
		//			printf("second_pull \r\n");
					printf("doubleeeeeeee \r\n");
 8000b58:	4814      	ldr	r0, [pc, #80]	; (8000bac <HAL_GPIO_EXTI_Callback+0x16c>)
 8000b5a:	f007 fd09 	bl	8008570 <puts>
					if (current_state.mode == NORMAL_STATE) {
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <HAL_GPIO_EXTI_Callback+0x12c>
						current_state.mode = MUSIC_SELECT;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b68:	2203      	movs	r2, #3
 8000b6a:	701a      	strb	r2, [r3, #0]
					}
					click_state = NO_CLICK;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e000      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x136>
					if (ltime - ctime > 1000 && current_state.mode == NORMAL_STATE) {
 8000b74:	bf00      	nop
				}
			}

    	}
    }
}
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021400 	.word	0x40021400
 8000b80:	2000078c 	.word	0x2000078c
 8000b84:	200002d0 	.word	0x200002d0
 8000b88:	200002d4 	.word	0x200002d4
 8000b8c:	20000210 	.word	0x20000210
 8000b90:	20000790 	.word	0x20000790
 8000b94:	20000794 	.word	0x20000794
 8000b98:	20000788 	.word	0x20000788
 8000b9c:	20000798 	.word	0x20000798
 8000ba0:	20000780 	.word	0x20000780
 8000ba4:	20000784 	.word	0x20000784
 8000ba8:	08009728 	.word	0x08009728
 8000bac:	0800973c 	.word	0x0800973c

08000bb0 <setTime_Position>:

void setTime_Position() {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
	char blink[30] = {0};
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	831a      	strh	r2, [r3, #24]
	RTC_TimeTypeDef* selectedTime;
	if (current_state.mode == TIME_SETTING) {
 8000bce:	4b93      	ldr	r3, [pc, #588]	; (8000e1c <setTime_Position+0x26c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d102      	bne.n	8000bdc <setTime_Position+0x2c>
		selectedTime = &sTime;
 8000bd6:	4b92      	ldr	r3, [pc, #584]	; (8000e20 <setTime_Position+0x270>)
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bda:	e001      	b.n	8000be0 <setTime_Position+0x30>
	} else {
		selectedTime = &(aTime.AlarmTime);
 8000bdc:	4b91      	ldr	r3, [pc, #580]	; (8000e24 <setTime_Position+0x274>)
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (XY[0] < 100) hourMinSec--;
 8000be0:	4b91      	ldr	r3, [pc, #580]	; (8000e28 <setTime_Position+0x278>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b63      	cmp	r3, #99	; 0x63
 8000be6:	d804      	bhi.n	8000bf2 <setTime_Position+0x42>
 8000be8:	4b90      	ldr	r3, [pc, #576]	; (8000e2c <setTime_Position+0x27c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	4a8f      	ldr	r2, [pc, #572]	; (8000e2c <setTime_Position+0x27c>)
 8000bf0:	6013      	str	r3, [r2, #0]
	if (XY[0] > 4000) hourMinSec++;
 8000bf2:	4b8d      	ldr	r3, [pc, #564]	; (8000e28 <setTime_Position+0x278>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000bfa:	d904      	bls.n	8000c06 <setTime_Position+0x56>
 8000bfc:	4b8b      	ldr	r3, [pc, #556]	; (8000e2c <setTime_Position+0x27c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a8a      	ldr	r2, [pc, #552]	; (8000e2c <setTime_Position+0x27c>)
 8000c04:	6013      	str	r3, [r2, #0]

	if (hourMinSec > 3) hourMinSec = 0;
 8000c06:	4b89      	ldr	r3, [pc, #548]	; (8000e2c <setTime_Position+0x27c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	dd02      	ble.n	8000c14 <setTime_Position+0x64>
 8000c0e:	4b87      	ldr	r3, [pc, #540]	; (8000e2c <setTime_Position+0x27c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	if (hourMinSec < 0) hourMinSec = 3;
 8000c14:	4b85      	ldr	r3, [pc, #532]	; (8000e2c <setTime_Position+0x27c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da02      	bge.n	8000c22 <setTime_Position+0x72>
 8000c1c:	4b83      	ldr	r3, [pc, #524]	; (8000e2c <setTime_Position+0x27c>)
 8000c1e:	2203      	movs	r2, #3
 8000c20:	601a      	str	r2, [r3, #0]

	printf("time_position : %d \r\n", hourMinSec);
 8000c22:	4b82      	ldr	r3, [pc, #520]	; (8000e2c <setTime_Position+0x27c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	4881      	ldr	r0, [pc, #516]	; (8000e30 <setTime_Position+0x280>)
 8000c2a:	f007 fc3b 	bl	80084a4 <iprintf>

	switch(hourMinSec) {
 8000c2e:	4b7f      	ldr	r3, [pc, #508]	; (8000e2c <setTime_Position+0x27c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	f200 80ce 	bhi.w	8000dd4 <setTime_Position+0x224>
 8000c38:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <setTime_Position+0x90>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000c51 	.word	0x08000c51
 8000c44:	08000ca1 	.word	0x08000ca1
 8000c48:	08000d03 	.word	0x08000d03
 8000c4c:	08000d65 	.word	0x08000d65
	case 0:
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000c50:	21c0      	movs	r1, #192	; 0xc0
 8000c52:	204e      	movs	r0, #78	; 0x4e
 8000c54:	f7ff fd64 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%s", ampm[selectedTime->TimeFormat]);
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	78db      	ldrb	r3, [r3, #3]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	4a73      	ldr	r2, [pc, #460]	; (8000e34 <setTime_Position+0x284>)
 8000c66:	441a      	add	r2, r3
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4973      	ldr	r1, [pc, #460]	; (8000e38 <setTime_Position+0x288>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f007 fcbb 	bl	80085e8 <siprintf>
		if (XY[1] < 100 ) selectedTime->TimeFormat++;
 8000c72:	4b6d      	ldr	r3, [pc, #436]	; (8000e28 <setTime_Position+0x278>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b63      	cmp	r3, #99	; 0x63
 8000c78:	d805      	bhi.n	8000c86 <setTime_Position+0xd6>
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	78db      	ldrb	r3, [r3, #3]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	70da      	strb	r2, [r3, #3]
		if (XY[1] > 4000)  selectedTime->TimeFormat--;
 8000c86:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <setTime_Position+0x278>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c8e:	f240 809a 	bls.w	8000dc6 <setTime_Position+0x216>
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	78db      	ldrb	r3, [r3, #3]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	70da      	strb	r2, [r3, #3]
		break;
 8000c9e:	e092      	b.n	8000dc6 <setTime_Position+0x216>
	case 1:
		LCD_SendCommand(LCD_ADDR, 0b11000011);
 8000ca0:	21c3      	movs	r1, #195	; 0xc3
 8000ca2:	204e      	movs	r0, #78	; 0x4e
 8000ca4:	f7ff fd3c 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%02d", selectedTime->Hours);
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4962      	ldr	r1, [pc, #392]	; (8000e3c <setTime_Position+0x28c>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f007 fc98 	bl	80085e8 <siprintf>
		if (XY[1] < 100) selectedTime->Hours++;
 8000cb8:	4b5b      	ldr	r3, [pc, #364]	; (8000e28 <setTime_Position+0x278>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b63      	cmp	r3, #99	; 0x63
 8000cbe:	d805      	bhi.n	8000ccc <setTime_Position+0x11c>
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	701a      	strb	r2, [r3, #0]
		if (XY[1] > 4000) selectedTime->Hours--;
 8000ccc:	4b56      	ldr	r3, [pc, #344]	; (8000e28 <setTime_Position+0x278>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000cd4:	d905      	bls.n	8000ce2 <setTime_Position+0x132>
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	701a      	strb	r2, [r3, #0]
		if (selectedTime -> Hours == 0)     selectedTime->Hours = 12;
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d103      	bne.n	8000cf2 <setTime_Position+0x142>
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	220c      	movs	r2, #12
 8000cee:	701a      	strb	r2, [r3, #0]
		else if (selectedTime-> Hours > 12 ) selectedTime->Hours = 1;
		break;
 8000cf0:	e06b      	b.n	8000dca <setTime_Position+0x21a>
		else if (selectedTime-> Hours > 12 ) selectedTime->Hours = 1;
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b0c      	cmp	r3, #12
 8000cf8:	d967      	bls.n	8000dca <setTime_Position+0x21a>
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
		break;
 8000d00:	e063      	b.n	8000dca <setTime_Position+0x21a>
	case 2:
		LCD_SendCommand(LCD_ADDR, 0b11001000);
 8000d02:	21c8      	movs	r1, #200	; 0xc8
 8000d04:	204e      	movs	r0, #78	; 0x4e
 8000d06:	f7ff fd0b 	bl	8000720 <LCD_SendCommand>
		sprintf(blink, "%02d", selectedTime->Minutes);
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	785b      	ldrb	r3, [r3, #1]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	494a      	ldr	r1, [pc, #296]	; (8000e3c <setTime_Position+0x28c>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f007 fc67 	bl	80085e8 <siprintf>
		if (XY[1] < 100) selectedTime->Minutes++;
 8000d1a:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <setTime_Position+0x278>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b63      	cmp	r3, #99	; 0x63
 8000d20:	d805      	bhi.n	8000d2e <setTime_Position+0x17e>
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	785b      	ldrb	r3, [r3, #1]
 8000d26:	3301      	adds	r3, #1
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	705a      	strb	r2, [r3, #1]
		if (XY[1] > 4000) selectedTime->Minutes--;
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <setTime_Position+0x278>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d36:	d905      	bls.n	8000d44 <setTime_Position+0x194>
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	785b      	ldrb	r3, [r3, #1]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	705a      	strb	r2, [r3, #1]
		if (selectedTime->Minutes > 250)     selectedTime->Minutes = 59;
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	2bfa      	cmp	r3, #250	; 0xfa
 8000d4a:	d903      	bls.n	8000d54 <setTime_Position+0x1a4>
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	223b      	movs	r2, #59	; 0x3b
 8000d50:	705a      	strb	r2, [r3, #1]
		else if (selectedTime->Minutes > 59) selectedTime->Minutes = 0;
		break;
 8000d52:	e03c      	b.n	8000dce <setTime_Position+0x21e>
		else if (selectedTime->Minutes > 59) selectedTime->Minutes = 0;
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	785b      	ldrb	r3, [r3, #1]
 8000d58:	2b3b      	cmp	r3, #59	; 0x3b
 8000d5a:	d938      	bls.n	8000dce <setTime_Position+0x21e>
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	2200      	movs	r2, #0
 8000d60:	705a      	strb	r2, [r3, #1]
		break;
 8000d62:	e034      	b.n	8000dce <setTime_Position+0x21e>
	case 3:
		LCD_SendCommand(LCD_ADDR, 0b11001101);
 8000d64:	21cd      	movs	r1, #205	; 0xcd
 8000d66:	204e      	movs	r0, #78	; 0x4e
 8000d68:	f7ff fcda 	bl	8000720 <LCD_SendCommand>
		 sprintf(blink, "%02d", selectedTime->Seconds);
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	789b      	ldrb	r3, [r3, #2]
 8000d70:	461a      	mov	r2, r3
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4931      	ldr	r1, [pc, #196]	; (8000e3c <setTime_Position+0x28c>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f007 fc36 	bl	80085e8 <siprintf>
		if (XY[1] < 100) selectedTime->Seconds++;
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <setTime_Position+0x278>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b63      	cmp	r3, #99	; 0x63
 8000d82:	d805      	bhi.n	8000d90 <setTime_Position+0x1e0>
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	789b      	ldrb	r3, [r3, #2]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	709a      	strb	r2, [r3, #2]
		if (XY[1] > 4000) selectedTime->Seconds--;
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <setTime_Position+0x278>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d98:	d905      	bls.n	8000da6 <setTime_Position+0x1f6>
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	789b      	ldrb	r3, [r3, #2]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	709a      	strb	r2, [r3, #2]
		if (selectedTime->Seconds > 250)     selectedTime->Seconds = 59;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	789b      	ldrb	r3, [r3, #2]
 8000daa:	2bfa      	cmp	r3, #250	; 0xfa
 8000dac:	d903      	bls.n	8000db6 <setTime_Position+0x206>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	223b      	movs	r2, #59	; 0x3b
 8000db2:	709a      	strb	r2, [r3, #2]
		else if (selectedTime->Seconds > 59) selectedTime->Seconds = 0;
		break;
 8000db4:	e00d      	b.n	8000dd2 <setTime_Position+0x222>
		else if (selectedTime->Seconds > 59) selectedTime->Seconds = 0;
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	789b      	ldrb	r3, [r3, #2]
 8000dba:	2b3b      	cmp	r3, #59	; 0x3b
 8000dbc:	d909      	bls.n	8000dd2 <setTime_Position+0x222>
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	709a      	strb	r2, [r3, #2]
		break;
 8000dc4:	e005      	b.n	8000dd2 <setTime_Position+0x222>
		break;
 8000dc6:	bf00      	nop
 8000dc8:	e004      	b.n	8000dd4 <setTime_Position+0x224>
		break;
 8000dca:	bf00      	nop
 8000dcc:	e002      	b.n	8000dd4 <setTime_Position+0x224>
		break;
 8000dce:	bf00      	nop
 8000dd0:	e000      	b.n	8000dd4 <setTime_Position+0x224>
		break;
 8000dd2:	bf00      	nop
	}

//	HAL_Delay(400);
	LCD_SendString(LCD_ADDR, "  ");
 8000dd4:	491a      	ldr	r1, [pc, #104]	; (8000e40 <setTime_Position+0x290>)
 8000dd6:	204e      	movs	r0, #78	; 0x4e
 8000dd8:	f7ff fce3 	bl	80007a2 <LCD_SendString>
	if (current_state.mode == TIME_SETTING) {
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <setTime_Position+0x26c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d133      	bne.n	8000e4c <setTime_Position+0x29c>
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000de4:	2200      	movs	r2, #0
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <setTime_Position+0x270>)
 8000de8:	4816      	ldr	r0, [pc, #88]	; (8000e44 <setTime_Position+0x294>)
 8000dea:	f005 f833 	bl	8005e54 <HAL_RTC_SetTime>
		default_nvitem.setting_time.TimeFormat = sTime.TimeFormat;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <setTime_Position+0x270>)
 8000df0:	78db      	ldrb	r3, [r3, #3]
 8000df2:	b25a      	sxtb	r2, r3
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <setTime_Position+0x298>)
 8000df6:	711a      	strb	r2, [r3, #4]
		default_nvitem.setting_time.Hours = sTime.Hours;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <setTime_Position+0x270>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25a      	sxtb	r2, r3
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <setTime_Position+0x298>)
 8000e00:	715a      	strb	r2, [r3, #5]
		default_nvitem.setting_time.Minutes = sTime.Minutes;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <setTime_Position+0x270>)
 8000e04:	785b      	ldrb	r3, [r3, #1]
 8000e06:	b25a      	sxtb	r2, r3
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <setTime_Position+0x298>)
 8000e0a:	719a      	strb	r2, [r3, #6]
		default_nvitem.setting_time.Seconds = sTime.Seconds;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <setTime_Position+0x270>)
 8000e0e:	789b      	ldrb	r3, [r3, #2]
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <setTime_Position+0x298>)
 8000e14:	71da      	strb	r2, [r3, #7]
		update_nvitems();
 8000e16:	f7ff fcf5 	bl	8000804 <update_nvitems>
 8000e1a:	e034      	b.n	8000e86 <setTime_Position+0x2d6>
 8000e1c:	200002d4 	.word	0x200002d4
 8000e20:	20000740 	.word	0x20000740
 8000e24:	20000758 	.word	0x20000758
 8000e28:	20000738 	.word	0x20000738
 8000e2c:	200006f4 	.word	0x200006f4
 8000e30:	0800974c 	.word	0x0800974c
 8000e34:	20000240 	.word	0x20000240
 8000e38:	08009764 	.word	0x08009764
 8000e3c:	08009768 	.word	0x08009768
 8000e40:	08009770 	.word	0x08009770
 8000e44:	20000600 	.word	0x20000600
 8000e48:	20000000 	.word	0x20000000
	}
	else {
		default_nvitem.alarm_time.TimeFormat = aTime.AlarmTime.TimeFormat;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <setTime_Position+0x2e4>)
 8000e4e:	78db      	ldrb	r3, [r3, #3]
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <setTime_Position+0x2e8>)
 8000e54:	721a      	strb	r2, [r3, #8]
		default_nvitem.alarm_time.Hours = aTime.AlarmTime.Hours;
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <setTime_Position+0x2e4>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25a      	sxtb	r2, r3
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <setTime_Position+0x2e8>)
 8000e5e:	725a      	strb	r2, [r3, #9]
		default_nvitem.alarm_time.Minutes = aTime.AlarmTime.Minutes;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <setTime_Position+0x2e4>)
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	b25a      	sxtb	r2, r3
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <setTime_Position+0x2e8>)
 8000e68:	729a      	strb	r2, [r3, #10]
		default_nvitem.alarm_time.Seconds = aTime.AlarmTime.Seconds;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <setTime_Position+0x2e4>)
 8000e6c:	789b      	ldrb	r3, [r3, #2]
 8000e6e:	b25a      	sxtb	r2, r3
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <setTime_Position+0x2e8>)
 8000e72:	72da      	strb	r2, [r3, #11]
		HAL_RTC_SetAlarm_IT(&hrtc, &aTime, RTC_FORMAT_BIN);
 8000e74:	2200      	movs	r2, #0
 8000e76:	4907      	ldr	r1, [pc, #28]	; (8000e94 <setTime_Position+0x2e4>)
 8000e78:	4808      	ldr	r0, [pc, #32]	; (8000e9c <setTime_Position+0x2ec>)
 8000e7a:	f005 fae1 	bl	8006440 <HAL_RTC_SetAlarm_IT>
		update_nvitems();
 8000e7e:	f7ff fcc1 	bl	8000804 <update_nvitems>
		get_alarm();
 8000e82:	f7ff fd4b 	bl	800091c <get_alarm>
	}
	update_nvitems();
 8000e86:	f7ff fcbd 	bl	8000804 <update_nvitems>
}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000758 	.word	0x20000758
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000600 	.word	0x20000600

08000ea0 <music_select>:

void music_select(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	unsigned int music_cnt = sizeof(alarm_music)/sizeof(alarm_music[0]); // total music cnt
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	607b      	str	r3, [r7, #4]

	if (XY[1] < 1500 ) current_state.music_num++;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <music_select+0x84>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f240 52db 	movw	r2, #1499	; 0x5db
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d804      	bhi.n	8000ec0 <music_select+0x20>
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <music_select+0x88>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a1a      	ldr	r2, [pc, #104]	; (8000f28 <music_select+0x88>)
 8000ebe:	6053      	str	r3, [r2, #4]
	if (XY[1] > 4000 ) current_state.music_num--;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <music_select+0x84>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000ec8:	d904      	bls.n	8000ed4 <music_select+0x34>
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <music_select+0x88>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <music_select+0x88>)
 8000ed2:	6053      	str	r3, [r2, #4]
	current_state.music_num %= music_cnt;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <music_select+0x88>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	fb01 f202 	mul.w	r2, r1, r2
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <music_select+0x88>)
 8000eea:	605a      	str	r2, [r3, #4]

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000eec:	21c0      	movs	r1, #192	; 0xc0
 8000eee:	204e      	movs	r0, #78	; 0x4e
 8000ef0:	f7ff fc16 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, alarm_music[current_state.music_num].music_title);
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <music_select+0x88>)
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <music_select+0x8c>)
 8000f02:	4413      	add	r3, r2
 8000f04:	3301      	adds	r3, #1
 8000f06:	4619      	mov	r1, r3
 8000f08:	204e      	movs	r0, #78	; 0x4e
 8000f0a:	f7ff fc4a 	bl	80007a2 <LCD_SendString>
	default_nvitem.alarm_music_num = current_state.music_num;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <music_select+0x88>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	b25a      	sxtb	r2, r3
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <music_select+0x90>)
 8000f16:	731a      	strb	r2, [r3, #12]
	update_nvitems();
 8000f18:	f7ff fc74 	bl	8000804 <update_nvitems>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000738 	.word	0x20000738
 8000f28:	200002d4 	.word	0x200002d4
 8000f2c:	20000210 	.word	0x20000210
 8000f30:	20000000 	.word	0x20000000

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f001 f952 	bl	80021e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f8e2 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f000 fbd6 	bl	80016f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f44:	f000 fbb4 	bl	80016b0 <MX_DMA_Init>
  MX_ETH_Init();
 8000f48:	f000 f9c4 	bl	80012d4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f4c:	f000 fb86 	bl	800165c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f50:	f000 fa0e 	bl	8001370 <MX_I2C1_Init>
  MX_RTC_Init();
 8000f54:	f000 fa4c 	bl	80013f0 <MX_RTC_Init>
  MX_ADC1_Init();
 8000f58:	f000 f95c 	bl	8001214 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f5c:	f000 fb26 	bl	80015ac <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f60:	f000 fad8 	bl	8001514 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f64:	f000 f93a 	bl	80011dc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 8000f68:	f7ff fb18 	bl	800059c <I2C_Scan>
  LCD_Init(LCD_ADDR);
 8000f6c:	204e      	movs	r0, #78	; 0x4e
 8000f6e:	f7ff fbfb 	bl	8000768 <LCD_Init>

  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000f72:	2202      	movs	r2, #2
 8000f74:	4949      	ldr	r1, [pc, #292]	; (800109c <main+0x168>)
 8000f76:	484a      	ldr	r0, [pc, #296]	; (80010a0 <main+0x16c>)
 8000f78:	f001 fa0c 	bl	8002394 <HAL_ADC_Start_DMA>

  current_state.mode = NORMAL_STATE;
 8000f7c:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <main+0x170>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
  click_state = NO_CLICK;
 8000f82:	4b49      	ldr	r3, [pc, #292]	; (80010a8 <main+0x174>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
  current_state.music_num = 0;
 8000f88:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <main+0x170>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]

  if(nv_items->magic_num == MAGIC_NUM) // get
 8000f8e:	4b47      	ldr	r3, [pc, #284]	; (80010ac <main+0x178>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a47      	ldr	r2, [pc, #284]	; (80010b0 <main+0x17c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d132      	bne.n	8000ffe <main+0xca>
  {
	  printf("1111111111");
 8000f98:	4846      	ldr	r0, [pc, #280]	; (80010b4 <main+0x180>)
 8000f9a:	f007 fa83 	bl	80084a4 <iprintf>
//	  memcpy(&default_nvitem,nv_items,sizeof(NVitemTypeDef));
//	  sTime.Hours = default_nvitem.setting_time.Hours;
//	  sTime.Minutes = default_nvitem.setting_time.Minutes;
//	  sTime.Seconds = default_nvitem.setting_time.Seconds;
	  sTime.TimeFormat = *(uint8_t *)(ADDR_FLASH_SECTOR_11 + 4);
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <main+0x184>)
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	4b46      	ldr	r3, [pc, #280]	; (80010bc <main+0x188>)
 8000fa4:	70da      	strb	r2, [r3, #3]
	  sTime.Hours = *(uint8_t *)(ADDR_FLASH_SECTOR_11 + 5);
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <main+0x18c>)
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <main+0x188>)
 8000fac:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = *(uint8_t *)(ADDR_FLASH_SECTOR_11 + 6);
 8000fae:	4b45      	ldr	r3, [pc, #276]	; (80010c4 <main+0x190>)
 8000fb0:	781a      	ldrb	r2, [r3, #0]
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <main+0x188>)
 8000fb4:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = *(uint8_t *)(ADDR_FLASH_SECTOR_11 + 7);
 8000fb6:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <main+0x194>)
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <main+0x188>)
 8000fbc:	709a      	strb	r2, [r3, #2]

	  aTime.AlarmTime.TimeFormat = *(uint8_t *)(ADDR_FLASH_SECTOR_11 + 8);
 8000fbe:	4b43      	ldr	r3, [pc, #268]	; (80010cc <main+0x198>)
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <main+0x19c>)
 8000fc4:	70da      	strb	r2, [r3, #3]
	  aTime.AlarmTime.Hours = *(uint8_t *)(ADDR_FLASH_SECTOR_11 + 9);
 8000fc6:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <main+0x1a0>)
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <main+0x19c>)
 8000fcc:	701a      	strb	r2, [r3, #0]
	  aTime.AlarmTime.Minutes = *(uint8_t *)(ADDR_FLASH_SECTOR_11 + 10);
 8000fce:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <main+0x1a4>)
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <main+0x19c>)
 8000fd4:	705a      	strb	r2, [r3, #1]
	  aTime.AlarmTime.Seconds = *(uint8_t *)(ADDR_FLASH_SECTOR_11 + 11);
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <main+0x1a8>)
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <main+0x19c>)
 8000fdc:	709a      	strb	r2, [r3, #2]

	  current_state.music_num = *(uint8_t *)(ADDR_FLASH_SECTOR_11 + 12);
 8000fde:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <main+0x1ac>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <main+0x170>)
 8000fe6:	605a      	str	r2, [r3, #4]

	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4934      	ldr	r1, [pc, #208]	; (80010bc <main+0x188>)
 8000fec:	483d      	ldr	r0, [pc, #244]	; (80010e4 <main+0x1b0>)
 8000fee:	f004 ff31 	bl	8005e54 <HAL_RTC_SetTime>
	  HAL_RTC_SetAlarm(&hrtc, &aTime, RTC_FORMAT_BIN);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4936      	ldr	r1, [pc, #216]	; (80010d0 <main+0x19c>)
 8000ff6:	483b      	ldr	r0, [pc, #236]	; (80010e4 <main+0x1b0>)
 8000ff8:	f005 f8f7 	bl	80061ea <HAL_RTC_SetAlarm>
 8000ffc:	e004      	b.n	8001008 <main+0xd4>
  }
  else // set
  {
	  printf("2222222222\r\n");
 8000ffe:	483a      	ldr	r0, [pc, #232]	; (80010e8 <main+0x1b4>)
 8001000:	f007 fab6 	bl	8008570 <puts>
	  update_nvitems();
 8001004:	f7ff fbfe 	bl	8000804 <update_nvitems>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 8001008:	f7ff fc54 	bl	80008b4 <get_time>
	  time_display();
 800100c:	f7ff fcb4 	bl	8000978 <time_display>
	  if (current_state.mode == TIME_SETTING || current_state.mode == ALARM_TIME_SETTING) {
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <main+0x170>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d003      	beq.n	8001020 <main+0xec>
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <main+0x170>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d10c      	bne.n	800103a <main+0x106>
		  setTime_Position();
 8001020:	f7ff fdc6 	bl	8000bb0 <setTime_Position>
		  printf("%d, %d \r\n", XY[0], XY[1]);
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <main+0x168>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <main+0x168>)
 800102a:	6852      	ldr	r2, [r2, #4]
 800102c:	4619      	mov	r1, r3
 800102e:	482f      	ldr	r0, [pc, #188]	; (80010ec <main+0x1b8>)
 8001030:	f007 fa38 	bl	80084a4 <iprintf>
		  printf("\r\n");
 8001034:	482e      	ldr	r0, [pc, #184]	; (80010f0 <main+0x1bc>)
 8001036:	f007 fa9b 	bl	8008570 <puts>
	  }

	  if (click_state == FIRST_PULL && (HAL_GetTick()-ltime) > 100) {
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <main+0x174>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d1e2      	bne.n	8001008 <main+0xd4>
 8001042:	f001 f933 	bl	80022ac <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <main+0x1c0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b64      	cmp	r3, #100	; 0x64
 8001050:	d9da      	bls.n	8001008 <main+0xd4>
		printf("one click \r\n");
 8001052:	4829      	ldr	r0, [pc, #164]	; (80010f8 <main+0x1c4>)
 8001054:	f007 fa8c 	bl	8008570 <puts>
		if (seq > 0 ) {
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <main+0x1c8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00d      	beq.n	800107c <main+0x148>
			seq = alarm_music[current_state.music_num].music_length;
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <main+0x170>)
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	4926      	ldr	r1, [pc, #152]	; (8001100 <main+0x1cc>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3314      	adds	r3, #20
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <main+0x1c8>)
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	e00a      	b.n	8001092 <main+0x15e>

		}
		else {
			if (current_state.mode == NORMAL_STATE) {
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <main+0x170>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <main+0x158>
				current_state.mode = TIME_SETTING;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <main+0x170>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	e002      	b.n	8001092 <main+0x15e>
			}
			else {
				current_state.mode = NORMAL_STATE;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <main+0x170>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
			}
		}

		click_state = NO_CLICK;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <main+0x174>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
	  get_time();
 8001098:	e7b6      	b.n	8001008 <main+0xd4>
 800109a:	bf00      	nop
 800109c:	20000738 	.word	0x20000738
 80010a0:	20000454 	.word	0x20000454
 80010a4:	200002d4 	.word	0x200002d4
 80010a8:	20000798 	.word	0x20000798
 80010ac:	080e0000 	.word	0x080e0000
 80010b0:	deadbeef 	.word	0xdeadbeef
 80010b4:	08009774 	.word	0x08009774
 80010b8:	080e0004 	.word	0x080e0004
 80010bc:	20000740 	.word	0x20000740
 80010c0:	080e0005 	.word	0x080e0005
 80010c4:	080e0006 	.word	0x080e0006
 80010c8:	080e0007 	.word	0x080e0007
 80010cc:	080e0008 	.word	0x080e0008
 80010d0:	20000758 	.word	0x20000758
 80010d4:	080e0009 	.word	0x080e0009
 80010d8:	080e000a 	.word	0x080e000a
 80010dc:	080e000b 	.word	0x080e000b
 80010e0:	080e000c 	.word	0x080e000c
 80010e4:	20000600 	.word	0x20000600
 80010e8:	08009780 	.word	0x08009780
 80010ec:	0800978c 	.word	0x0800978c
 80010f0:	08009798 	.word	0x08009798
 80010f4:	20000784 	.word	0x20000784
 80010f8:	0800979c 	.word	0x0800979c
 80010fc:	200002d0 	.word	0x200002d0
 8001100:	20000210 	.word	0x20000210

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	2230      	movs	r2, #48	; 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f007 fb60 	bl	80087d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <SystemClock_Config+0xd0>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a28      	ldr	r2, [pc, #160]	; (80011d4 <SystemClock_Config+0xd0>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <SystemClock_Config+0xd0>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <SystemClock_Config+0xd4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <SystemClock_Config+0xd4>)
 800114e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <SystemClock_Config+0xd4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001160:	2305      	movs	r3, #5
 8001162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001164:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800116a:	2301      	movs	r3, #1
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800117c:	23a8      	movs	r3, #168	; 0xa8
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001184:	2307      	movs	r3, #7
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f003 ff93 	bl	80050b8 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001198:	f000 fc5e 	bl	8001a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2105      	movs	r1, #5
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 f9f4 	bl	80055a8 <HAL_RCC_ClockConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011c6:	f000 fc47 	bl	8001a58 <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3750      	adds	r7, #80	; 0x50
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2017      	movs	r0, #23
 80011e6:	f001 fd8e 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011ea:	2017      	movs	r0, #23
 80011ec:	f001 fda7 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2009      	movs	r0, #9
 80011f6:	f001 fd86 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011fa:	2009      	movs	r0, #9
 80011fc:	f001 fd9f 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	201c      	movs	r0, #28
 8001206:	f001 fd7e 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800120a:	201c      	movs	r0, #28
 800120c:	f001 fd97 	bl	8002d3e <HAL_NVIC_EnableIRQ>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001226:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001228:	4a28      	ldr	r2, [pc, #160]	; (80012cc <MX_ADC1_Init+0xb8>)
 800122a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MX_ADC1_Init+0xb4>)
 800122e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001232:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_ADC1_Init+0xb4>)
 800123c:	2201      	movs	r2, #1
 800123e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001242:	2201      	movs	r2, #1
 8001244:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <MX_ADC1_Init+0xbc>)
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_ADC1_Init+0xb4>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001262:	2202      	movs	r2, #2
 8001264:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001270:	2201      	movs	r2, #1
 8001272:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001274:	4814      	ldr	r0, [pc, #80]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001276:	f001 f849 	bl	800230c <HAL_ADC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001280:	f000 fbea 	bl	8001a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001284:	230d      	movs	r3, #13
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800128c:	2304      	movs	r3, #4
 800128e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_ADC1_Init+0xb4>)
 8001296:	f001 f9ab 	bl	80025f0 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012a0:	f000 fbda 	bl	8001a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012a4:	230a      	movs	r3, #10
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_ADC1_Init+0xb4>)
 80012b2:	f001 f99d 	bl	80025f0 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012bc:	f000 fbcc 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000454 	.word	0x20000454
 80012cc:	40012000 	.word	0x40012000
 80012d0:	0f000001 	.word	0x0f000001

080012d4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_ETH_Init+0x84>)
 80012da:	4a20      	ldr	r2, [pc, #128]	; (800135c <MX_ETH_Init+0x88>)
 80012dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_ETH_Init+0x8c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_ETH_Init+0x8c>)
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_ETH_Init+0x8c>)
 80012ec:	22e1      	movs	r2, #225	; 0xe1
 80012ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_ETH_Init+0x8c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_ETH_Init+0x8c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_ETH_Init+0x8c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_ETH_Init+0x84>)
 8001304:	4a16      	ldr	r2, [pc, #88]	; (8001360 <MX_ETH_Init+0x8c>)
 8001306:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_ETH_Init+0x84>)
 800130a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800130e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_ETH_Init+0x84>)
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <MX_ETH_Init+0x90>)
 8001314:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_ETH_Init+0x84>)
 8001318:	4a13      	ldr	r2, [pc, #76]	; (8001368 <MX_ETH_Init+0x94>)
 800131a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_ETH_Init+0x84>)
 800131e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001322:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_ETH_Init+0x84>)
 8001326:	f002 f895 	bl	8003454 <HAL_ETH_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 fb92 	bl	8001a58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001334:	2238      	movs	r2, #56	; 0x38
 8001336:	2100      	movs	r1, #0
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_ETH_Init+0x98>)
 800133a:	f007 fa4d 	bl	80087d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_ETH_Init+0x98>)
 8001340:	2221      	movs	r2, #33	; 0x21
 8001342:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_ETH_Init+0x98>)
 8001346:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800134a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_ETH_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200004fc 	.word	0x200004fc
 800135c:	40028000 	.word	0x40028000
 8001360:	2000079c 	.word	0x2000079c
 8001364:	200003b4 	.word	0x200003b4
 8001368:	20000314 	.word	0x20000314
 800136c:	200002dc 	.word	0x200002dc

08001370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_I2C1_Init+0x74>)
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <MX_I2C1_Init+0x78>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_I2C1_Init+0x74>)
 800137c:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <MX_I2C1_Init+0x7c>)
 800137e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_I2C1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_I2C1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_I2C1_Init+0x74>)
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_I2C1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_I2C1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_I2C1_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_I2C1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_I2C1_Init+0x74>)
 80013ae:	f003 f88f 	bl	80044d0 <HAL_I2C_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b8:	f000 fb4e 	bl	8001a58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013bc:	2100      	movs	r1, #0
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MX_I2C1_Init+0x74>)
 80013c0:	f003 fdff 	bl	8004fc2 <HAL_I2CEx_ConfigAnalogFilter>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80013ca:	f000 fb45 	bl	8001a58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013ce:	2100      	movs	r1, #0
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_I2C1_Init+0x74>)
 80013d2:	f003 fe32 	bl	800503a <HAL_I2CEx_ConfigDigitalFilter>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80013dc:	f000 fb3c 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200005ac 	.word	0x200005ac
 80013e8:	40005400 	.word	0x40005400
 80013ec:	000186a0 	.word	0x000186a0

080013f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b090      	sub	sp, #64	; 0x40
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2228      	movs	r2, #40	; 0x28
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f007 f9e1 	bl	80087d8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <MX_RTC_Init+0x11c>)
 8001418:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <MX_RTC_Init+0x120>)
 800141a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800141c:	4b3b      	ldr	r3, [pc, #236]	; (800150c <MX_RTC_Init+0x11c>)
 800141e:	2240      	movs	r2, #64	; 0x40
 8001420:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <MX_RTC_Init+0x11c>)
 8001424:	227f      	movs	r2, #127	; 0x7f
 8001426:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001428:	4b38      	ldr	r3, [pc, #224]	; (800150c <MX_RTC_Init+0x11c>)
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <MX_RTC_Init+0x11c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001434:	4b35      	ldr	r3, [pc, #212]	; (800150c <MX_RTC_Init+0x11c>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <MX_RTC_Init+0x11c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001440:	4832      	ldr	r0, [pc, #200]	; (800150c <MX_RTC_Init+0x11c>)
 8001442:	f004 fc91 	bl	8005d68 <HAL_RTC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800144c:	f000 fb04 	bl	8001a58 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8001450:	2311      	movs	r3, #17
 8001452:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 8001456:	2359      	movs	r3, #89	; 0x59
 8001458:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x36;
 800145c:	2336      	movs	r3, #54	; 0x36
 800145e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001474:	2201      	movs	r2, #1
 8001476:	4619      	mov	r1, r3
 8001478:	4824      	ldr	r0, [pc, #144]	; (800150c <MX_RTC_Init+0x11c>)
 800147a:	f004 fceb 	bl	8005e54 <HAL_RTC_SetTime>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001484:	f000 fae8 	bl	8001a58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001488:	2301      	movs	r3, #1
 800148a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800148e:	2301      	movs	r3, #1
 8001490:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001494:	2301      	movs	r3, #1
 8001496:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800149a:	2300      	movs	r3, #0
 800149c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a4:	2201      	movs	r2, #1
 80014a6:	4619      	mov	r1, r3
 80014a8:	4818      	ldr	r0, [pc, #96]	; (800150c <MX_RTC_Init+0x11c>)
 80014aa:	f004 fdcb 	bl	8006044 <HAL_RTC_SetDate>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80014b4:	f000 fad0 	bl	8001a58 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80014bc:	2300      	movs	r3, #0
 80014be:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x45;
 80014c0:	2345      	movs	r3, #69	; 0x45
 80014c2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80014c8:	2300      	movs	r3, #0
 80014ca:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80014d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80014d8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80014e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_RTC_Init+0x11c>)
 80014f6:	f004 ffa3 	bl	8006440 <HAL_RTC_SetAlarm_IT>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001500:	f000 faaa 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3740      	adds	r7, #64	; 0x40
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000600 	.word	0x20000600
 8001510:	40002800 	.word	0x40002800

08001514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_TIM2_Init+0x94>)
 8001532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001536:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_TIM2_Init+0x94>)
 800153a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800153e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_TIM2_Init+0x94>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_TIM2_Init+0x94>)
 8001548:	2263      	movs	r2, #99	; 0x63
 800154a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_TIM2_Init+0x94>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_TIM2_Init+0x94>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001558:	4813      	ldr	r0, [pc, #76]	; (80015a8 <MX_TIM2_Init+0x94>)
 800155a:	f005 fa50 	bl	80069fe <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001564:	f000 fa78 	bl	8001a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM2_Init+0x94>)
 8001576:	f005 fe81 	bl	800727c <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001580:	f000 fa6a 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM2_Init+0x94>)
 8001592:	f006 fa73 	bl	8007a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800159c:	f000 fa5c 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000620 	.word	0x20000620

080015ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	615a      	str	r2, [r3, #20]
 80015cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_TIM3_Init+0xa8>)
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <MX_TIM3_Init+0xac>)
 80015d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_TIM3_Init+0xa8>)
 80015d6:	2253      	movs	r2, #83	; 0x53
 80015d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <MX_TIM3_Init+0xa8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_TIM3_Init+0xa8>)
 80015e2:	22c7      	movs	r2, #199	; 0xc7
 80015e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_TIM3_Init+0xa8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_TIM3_Init+0xa8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015f2:	4818      	ldr	r0, [pc, #96]	; (8001654 <MX_TIM3_Init+0xa8>)
 80015f4:	f005 faf1 	bl	8006bda <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80015fe:	f000 fa2b 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	4619      	mov	r1, r3
 8001610:	4810      	ldr	r0, [pc, #64]	; (8001654 <MX_TIM3_Init+0xa8>)
 8001612:	f006 fa33 	bl	8007a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800161c:	f000 fa1c 	bl	8001a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001620:	2360      	movs	r3, #96	; 0x60
 8001622:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8001624:	2331      	movs	r3, #49	; 0x31
 8001626:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2204      	movs	r2, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <MX_TIM3_Init+0xa8>)
 8001638:	f005 fd5e 	bl	80070f8 <HAL_TIM_PWM_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001642:	f000 fa09 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001646:	4803      	ldr	r0, [pc, #12]	; (8001654 <MX_TIM3_Init+0xa8>)
 8001648:	f000 fc2e 	bl	8001ea8 <HAL_TIM_MspPostInit>

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000668 	.word	0x20000668
 8001658:	40000400 	.word	0x40000400

0800165c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <MX_USART3_UART_Init+0x50>)
 8001664:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_USART3_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_USART3_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_USART3_UART_Init+0x4c>)
 8001694:	f006 fa82 	bl	8007b9c <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800169e:	f000 f9db 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200006b0 	.word	0x200006b0
 80016ac:	40004800 	.word	0x40004800

080016b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_DMA_Init+0x3c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <MX_DMA_Init+0x3c>)
 80016c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_DMA_Init+0x3c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2038      	movs	r0, #56	; 0x38
 80016d8:	f001 fb15 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016dc:	2038      	movs	r0, #56	; 0x38
 80016de:	f001 fb2e 	bl	8002d3e <HAL_NVIC_EnableIRQ>

}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	; 0x30
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	4b68      	ldr	r3, [pc, #416]	; (80018ac <MX_GPIO_Init+0x1bc>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a67      	ldr	r2, [pc, #412]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	4b61      	ldr	r3, [pc, #388]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a60      	ldr	r2, [pc, #384]	; (80018ac <MX_GPIO_Init+0x1bc>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a59      	ldr	r2, [pc, #356]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b57      	ldr	r3, [pc, #348]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b53      	ldr	r3, [pc, #332]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a52      	ldr	r2, [pc, #328]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b50      	ldr	r3, [pc, #320]	; (80018ac <MX_GPIO_Init+0x1bc>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <MX_GPIO_Init+0x1bc>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a4b      	ldr	r2, [pc, #300]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <MX_GPIO_Init+0x1bc>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a44      	ldr	r2, [pc, #272]	; (80018ac <MX_GPIO_Init+0x1bc>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <MX_GPIO_Init+0x1bc>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <MX_GPIO_Init+0x1bc>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a3d      	ldr	r2, [pc, #244]	; (80018ac <MX_GPIO_Init+0x1bc>)
 80017b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <MX_GPIO_Init+0x1bc>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80017d0:	4837      	ldr	r0, [pc, #220]	; (80018b0 <MX_GPIO_Init+0x1c0>)
 80017d2:	f002 fe31 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2140      	movs	r1, #64	; 0x40
 80017da:	4836      	ldr	r0, [pc, #216]	; (80018b4 <MX_GPIO_Init+0x1c4>)
 80017dc:	f002 fe2c 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4830      	ldr	r0, [pc, #192]	; (80018b8 <MX_GPIO_Init+0x1c8>)
 80017f8:	f002 fc5a 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 setBtn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|setBtn_Pin;
 80017fc:	2388      	movs	r3, #136	; 0x88
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001800:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001806:	2301      	movs	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	482a      	ldr	r0, [pc, #168]	; (80018bc <MX_GPIO_Init+0x1cc>)
 8001812:	f002 fc4d 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001816:	f244 0381 	movw	r3, #16513	; 0x4081
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	4820      	ldr	r0, [pc, #128]	; (80018b0 <MX_GPIO_Init+0x1c0>)
 8001830:	f002 fc3e 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001834:	2340      	movs	r3, #64	; 0x40
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	481a      	ldr	r0, [pc, #104]	; (80018b4 <MX_GPIO_Init+0x1c4>)
 800184c:	f002 fc30 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	4814      	ldr	r0, [pc, #80]	; (80018b4 <MX_GPIO_Init+0x1c4>)
 8001864:	f002 fc24 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001868:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800186c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800187a:	230a      	movs	r3, #10
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	480e      	ldr	r0, [pc, #56]	; (80018c0 <MX_GPIO_Init+0x1d0>)
 8001886:	f002 fc13 	bl	80040b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800188a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4619      	mov	r1, r3
 800189e:	4808      	ldr	r0, [pc, #32]	; (80018c0 <MX_GPIO_Init+0x1d0>)
 80018a0:	f002 fc06 	bl	80040b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a4:	bf00      	nop
 80018a6:	3730      	adds	r7, #48	; 0x30
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40021800 	.word	0x40021800
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40021400 	.word	0x40021400
 80018c0:	40020000 	.word	0x40020000

080018c4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&showTime, strlen(showTime), 1000);
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <HAL_RTC_AlarmAEventCallback+0x40>)
 80018ce:	f7fe fc8f 	bl	80001f0 <strlen>
 80018d2:	4603      	mov	r3, r0
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	490a      	ldr	r1, [pc, #40]	; (8001904 <HAL_RTC_AlarmAEventCallback+0x40>)
 80018dc:	480a      	ldr	r0, [pc, #40]	; (8001908 <HAL_RTC_AlarmAEventCallback+0x44>)
 80018de:	f006 f9aa 	bl	8007c36 <HAL_UART_Transmit>
	printf("Alarm Callback Occurred!! \r\n");
 80018e2:	480a      	ldr	r0, [pc, #40]	; (800190c <HAL_RTC_AlarmAEventCallback+0x48>)
 80018e4:	f006 fe44 	bl	8008570 <puts>
	seq = 0;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_RTC_AlarmAEventCallback+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 80018ee:	4809      	ldr	r0, [pc, #36]	; (8001914 <HAL_RTC_AlarmAEventCallback+0x50>)
 80018f0:	f005 f8d4 	bl	8006a9c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80018f4:	2101      	movs	r1, #1
 80018f6:	4808      	ldr	r0, [pc, #32]	; (8001918 <HAL_RTC_AlarmAEventCallback+0x54>)
 80018f8:	f002 fdb7 	bl	800446a <HAL_GPIO_TogglePin>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200006f8 	.word	0x200006f8
 8001908:	200006b0 	.word	0x200006b0
 800190c:	080097a8 	.word	0x080097a8
 8001910:	200002d0 	.word	0x200002d0
 8001914:	20000620 	.word	0x20000620
 8001918:	40020400 	.word	0x40020400

0800191c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	int selected_music_num = current_state.music_num;
 8001924:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60fb      	str	r3, [r7, #12]
	switch(selected_music_num) {
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_TIM_PeriodElapsedCallback+0x1c>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d004      	beq.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x24>
 8001936:	e007      	b.n	8001948 <HAL_TIM_PeriodElapsedCallback+0x2c>
	case 0 :
		buzzer = harry;
 8001938:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800193a:	4a3c      	ldr	r2, [pc, #240]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800193c:	601a      	str	r2, [r3, #0]
		break;
 800193e:	e003      	b.n	8001948 <HAL_TIM_PeriodElapsedCallback+0x2c>
	case 1 :
		buzzer = bell;
 8001940:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001942:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001944:	601a      	str	r2, [r3, #0]
		break;
 8001946:	bf00      	nop
	}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001948:	2104      	movs	r1, #4
 800194a:	483a      	ldr	r0, [pc, #232]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800194c:	f005 f994 	bl	8006c78 <HAL_TIM_PWM_Start>
	uint16_t melody = (uint16_t)(1000000 / buzzer[seq].freq);
 8001950:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001962:	fb93 f3f2 	sdiv	r3, r3, r2
 8001966:	817b      	strh	r3, [r7, #10]
	printf("music num : %d \r\n", current_state.music_num);
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4619      	mov	r1, r3
 800196e:	4834      	ldr	r0, [pc, #208]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001970:	f006 fd98 	bl	80084a4 <iprintf>
	if(stop == 1){
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d10c      	bne.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x7a>
		TIM2->ARR = 500;
 800197c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001980:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001984:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001986:	2104      	movs	r1, #4
 8001988:	482a      	ldr	r0, [pc, #168]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800198a:	f005 fa3d 	bl	8006e08 <HAL_TIM_PWM_Stop>
		stop = 0;
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e03d      	b.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0xf6>
	}
	else{
		if(seq == alarm_music[current_state.music_num].music_length){
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4929      	ldr	r1, [pc, #164]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	3314      	adds	r3, #20
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4298      	cmp	r0, r3
 80019b2:	d10a      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0xae>
			HAL_TIM_Base_Stop_IT(&htim2);
 80019b4:	4825      	ldr	r0, [pc, #148]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80019b6:	f005 f8e1 	bl	8006b7c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80019ba:	2104      	movs	r1, #4
 80019bc:	481d      	ldr	r0, [pc, #116]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019be:	f005 fa23 	bl	8006e08 <HAL_TIM_PWM_Stop>
			seq = 0;
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	e023      	b.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0xf6>
		}
		else{
			TIM3->ARR = melody;
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019cc:	897b      	ldrh	r3, [r7, #10]
 80019ce:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR2 = melody / 2;
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->ARR = buzzer[seq].delay * 1500;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	885b      	ldrh	r3, [r3, #2]
 80019e8:	461a      	mov	r2, r3
 80019ea:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80019ee:	fb03 f202 	mul.w	r2, r3, r2
 80019f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80019f8:	2104      	movs	r1, #4
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019fc:	f005 f93c 	bl	8006c78 <HAL_TIM_PWM_Start>
			stop = 1;
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
			seq++;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001a10:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001a12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a16:	480f      	ldr	r0, [pc, #60]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a18:	f002 fd27 	bl	800446a <HAL_GPIO_TogglePin>
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200002d4 	.word	0x200002d4
 8001a28:	200002cc 	.word	0x200002cc
 8001a2c:	20000110 	.word	0x20000110
 8001a30:	20000010 	.word	0x20000010
 8001a34:	20000668 	.word	0x20000668
 8001a38:	200002d0 	.word	0x200002d0
 8001a3c:	000f4240 	.word	0x000f4240
 8001a40:	080097c4 	.word	0x080097c4
 8001a44:	200002d1 	.word	0x200002d1
 8001a48:	20000210 	.word	0x20000210
 8001a4c:	20000620 	.word	0x20000620
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40020400 	.word	0x40020400

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <Error_Handler+0x8>
	...

08001a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a2f      	ldr	r2, [pc, #188]	; (8001b90 <HAL_ADC_MspInit+0xdc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d157      	bne.n	8001b86 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001b0e:	2309      	movs	r3, #9
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b12:	2303      	movs	r3, #3
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	481d      	ldr	r0, [pc, #116]	; (8001b98 <HAL_ADC_MspInit+0xe4>)
 8001b22:	f002 fac5 	bl	80040b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_ADC_MspInit+0xec>)
 8001b2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b6c:	f001 f902 	bl	8002d74 <HAL_DMA_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001b76:	f7ff ff6f 	bl	8001a58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40012000 	.word	0x40012000
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	2000049c 	.word	0x2000049c
 8001ba0:	40026410 	.word	0x40026410

08001ba4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08e      	sub	sp, #56	; 0x38
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a55      	ldr	r2, [pc, #340]	; (8001d18 <HAL_ETH_MspInit+0x174>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	f040 80a4 	bne.w	8001d10 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a52      	ldr	r2, [pc, #328]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd8:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	623b      	str	r3, [r7, #32]
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001bee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf4:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	4b45      	ldr	r3, [pc, #276]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	4a44      	ldr	r2, [pc, #272]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4a3d      	ldr	r2, [pc, #244]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a36      	ldr	r2, [pc, #216]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a2f      	ldr	r2, [pc, #188]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	4a28      	ldr	r2, [pc, #160]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c80:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_ETH_MspInit+0x178>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c8c:	2332      	movs	r3, #50	; 0x32
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c9c:	230b      	movs	r3, #11
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481e      	ldr	r0, [pc, #120]	; (8001d20 <HAL_ETH_MspInit+0x17c>)
 8001ca8:	f002 fa02 	bl	80040b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cac:	2386      	movs	r3, #134	; 0x86
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cbc:	230b      	movs	r3, #11
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4817      	ldr	r0, [pc, #92]	; (8001d24 <HAL_ETH_MspInit+0x180>)
 8001cc8:	f002 f9f2 	bl	80040b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cde:	230b      	movs	r3, #11
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480f      	ldr	r0, [pc, #60]	; (8001d28 <HAL_ETH_MspInit+0x184>)
 8001cea:	f002 f9e1 	bl	80040b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001cee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d00:	230b      	movs	r3, #11
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4808      	ldr	r0, [pc, #32]	; (8001d2c <HAL_ETH_MspInit+0x188>)
 8001d0c:	f002 f9d0 	bl	80040b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d10:	bf00      	nop
 8001d12:	3738      	adds	r7, #56	; 0x38
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40028000 	.word	0x40028000
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40021800 	.word	0x40021800

08001d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_I2C_MspInit+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12c      	bne.n	8001dac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d74:	2312      	movs	r3, #18
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d80:	2304      	movs	r3, #4
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <HAL_I2C_MspInit+0x8c>)
 8001d8c:	f002 f990 	bl	80040b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_I2C_MspInit+0x88>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40005400 	.word	0x40005400
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	; 0x38
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	2230      	movs	r2, #48	; 0x30
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 fd01 	bl	80087d8 <memset>
  if(hrtc->Instance==RTC)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <HAL_RTC_MspInit+0x5c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d119      	bne.n	8001e14 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001de0:	2320      	movs	r3, #32
 8001de2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fdfa 	bl	80059e8 <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001dfa:	f7ff fe2d 	bl	8001a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_RTC_MspInit+0x60>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	2029      	movs	r0, #41	; 0x29
 8001e0a:	f000 ff7c 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001e0e:	2029      	movs	r0, #41	; 0x29
 8001e10:	f000 ff95 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e14:	bf00      	nop
 8001e16:	3738      	adds	r7, #56	; 0x38
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40002800 	.word	0x40002800
 8001e20:	42470e3c 	.word	0x42470e3c

08001e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e34:	d10d      	bne.n	8001e52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_TIM_Base_MspInit+0x3c>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_TIM_Base_MspInit+0x3c>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_TIM_Base_MspInit+0x3c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10d      	bne.n	8001e92 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x40>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x40>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x40>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <HAL_TIM_MspPostInit+0x68>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d11d      	bne.n	8001f06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_TIM_MspPostInit+0x6c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_TIM_MspPostInit+0x6c>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_TIM_MspPostInit+0x6c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <HAL_TIM_MspPostInit+0x70>)
 8001f02:	f002 f8d5 	bl	80040b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3720      	adds	r7, #32
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020800 	.word	0x40020800

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_UART_MspInit+0x84>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d12c      	bne.n	8001f98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_UART_MspInit+0x8c>)
 8001f94:	f002 f88c 	bl	80040b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40004800 	.word	0x40004800
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020c00 	.word	0x40020c00

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f000 f944 	bl	8002284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002004:	2008      	movs	r0, #8
 8002006:	f002 fa4b 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}

0800200e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(setBtn_Pin);
 8002012:	2080      	movs	r0, #128	; 0x80
 8002014:	f002 fa44 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM2_IRQHandler+0x10>)
 8002022:	f004 ff61 	bl	8006ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000620 	.word	0x20000620

08002030 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <RTC_Alarm_IRQHandler+0x10>)
 8002036:	f004 fbd5 	bl	80067e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000600 	.word	0x20000600

08002044 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <DMA2_Stream0_IRQHandler+0x10>)
 800204a:	f000 ff99 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000049c 	.word	0x2000049c

08002058 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e00a      	b.n	8002080 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800206a:	f3af 8000 	nop.w
 800206e:	4601      	mov	r1, r0
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	60ba      	str	r2, [r7, #8]
 8002076:	b2ca      	uxtb	r2, r1
 8002078:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	dbf0      	blt.n	800206a <_read+0x12>
  }

  return len;
 8002088:	687b      	ldr	r3, [r7, #4]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ba:	605a      	str	r2, [r3, #4]
  return 0;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_isatty>:

int _isatty(int file)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800212c:	f006 fba2 	bl	8008874 <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20030000 	.word	0x20030000
 800215c:	00000400 	.word	0x00000400
 8002160:	200007a4 	.word	0x200007a4
 8002164:	20000918 	.word	0x20000918

08002168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <SystemInit+0x20>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <SystemInit+0x20>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002192:	490e      	ldr	r1, [pc, #56]	; (80021cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a8:	4c0b      	ldr	r4, [pc, #44]	; (80021d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021b6:	f7ff ffd7 	bl	8002168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ba:	f006 fb61 	bl	8008880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021be:	f7fe feb9 	bl	8000f34 <main>
  bx  lr    
 80021c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 80021d0:	0800983c 	.word	0x0800983c
  ldr r2, =_sbss
 80021d4:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 80021d8:	20000918 	.word	0x20000918

080021dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC_IRQHandler>
	...

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <HAL_Init+0x40>)
 80021ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <HAL_Init+0x40>)
 80021f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a07      	ldr	r2, [pc, #28]	; (8002220 <HAL_Init+0x40>)
 8002202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002208:	2003      	movs	r0, #3
 800220a:	f000 fd71 	bl	8002cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220e:	2000      	movs	r0, #0
 8002210:	f000 f808 	bl	8002224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002214:	f7ff fc26 	bl	8001a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023c00 	.word	0x40023c00

08002224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_InitTick+0x54>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_InitTick+0x58>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223a:	fbb3 f3f1 	udiv	r3, r3, r1
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fd89 	bl	8002d5a <HAL_SYSTICK_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e00e      	b.n	8002270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d80a      	bhi.n	800226e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002258:	2200      	movs	r2, #0
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f000 fd51 	bl	8002d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002264:	4a06      	ldr	r2, [pc, #24]	; (8002280 <HAL_InitTick+0x5c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000248 	.word	0x20000248
 800227c:	20000250 	.word	0x20000250
 8002280:	2000024c 	.word	0x2000024c

08002284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_IncTick+0x20>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_IncTick+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_IncTick+0x24>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000250 	.word	0x20000250
 80022a8:	200007a8 	.word	0x200007a8

080022ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	200007a8 	.word	0x200007a8

080022c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff ffee 	bl	80022ac <HAL_GetTick>
 80022d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d005      	beq.n	80022ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_Delay+0x44>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ea:	bf00      	nop
 80022ec:	f7ff ffde 	bl	80022ac <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d8f7      	bhi.n	80022ec <HAL_Delay+0x28>
  {
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000250 	.word	0x20000250

0800230c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e033      	b.n	800238a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fbc2 	bl	8001ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d118      	bne.n	800237c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002352:	f023 0302 	bic.w	r3, r3, #2
 8002356:	f043 0202 	orr.w	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa78 	bl	8002854 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
 800237a:	e001      	b.n	8002380 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_Start_DMA+0x1e>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e0e9      	b.n	8002586 <HAL_ADC_Start_DMA+0x1f2>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d018      	beq.n	80023fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023d8:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_ADC_Start_DMA+0x1fc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6d      	ldr	r2, [pc, #436]	; (8002594 <HAL_ADC_Start_DMA+0x200>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0c9a      	lsrs	r2, r3, #18
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f9      	bne.n	80023ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002408:	d107      	bne.n	800241a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002418:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 80a1 	bne.w	800256c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002454:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002468:	d106      	bne.n	8002478 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f023 0206 	bic.w	r2, r3, #6
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
 8002476:	e002      	b.n	800247e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002486:	4b44      	ldr	r3, [pc, #272]	; (8002598 <HAL_ADC_Start_DMA+0x204>)
 8002488:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	4a43      	ldr	r2, [pc, #268]	; (800259c <HAL_ADC_Start_DMA+0x208>)
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	4a42      	ldr	r2, [pc, #264]	; (80025a0 <HAL_ADC_Start_DMA+0x20c>)
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	4a41      	ldr	r2, [pc, #260]	; (80025a4 <HAL_ADC_Start_DMA+0x210>)
 80024a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	334c      	adds	r3, #76	; 0x4c
 80024d6:	4619      	mov	r1, r3
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f000 fcf8 	bl	8002ed0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d12a      	bne.n	8002542 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <HAL_ADC_Start_DMA+0x214>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d015      	beq.n	8002522 <HAL_ADC_Start_DMA+0x18e>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a2c      	ldr	r2, [pc, #176]	; (80025ac <HAL_ADC_Start_DMA+0x218>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d105      	bne.n	800250c <HAL_ADC_Start_DMA+0x178>
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_ADC_Start_DMA+0x204>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <HAL_ADC_Start_DMA+0x21c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d136      	bne.n	8002584 <HAL_ADC_Start_DMA+0x1f0>
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_ADC_Start_DMA+0x204>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d130      	bne.n	8002584 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d129      	bne.n	8002584 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	e020      	b.n	8002584 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <HAL_ADC_Start_DMA+0x214>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d11b      	bne.n	8002584 <HAL_ADC_Start_DMA+0x1f0>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d114      	bne.n	8002584 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	e00b      	b.n	8002584 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f043 0210 	orr.w	r2, r3, #16
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000248 	.word	0x20000248
 8002594:	431bde83 	.word	0x431bde83
 8002598:	40012300 	.word	0x40012300
 800259c:	08002a4d 	.word	0x08002a4d
 80025a0:	08002b07 	.word	0x08002b07
 80025a4:	08002b23 	.word	0x08002b23
 80025a8:	40012000 	.word	0x40012000
 80025ac:	40012100 	.word	0x40012100
 80025b0:	40012200 	.word	0x40012200

080025b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1c>
 8002608:	2302      	movs	r3, #2
 800260a:	e113      	b.n	8002834 <HAL_ADC_ConfigChannel+0x244>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b09      	cmp	r3, #9
 800261a:	d925      	bls.n	8002668 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68d9      	ldr	r1, [r3, #12]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	3b1e      	subs	r3, #30
 8002632:	2207      	movs	r2, #7
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43da      	mvns	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	400a      	ands	r2, r1
 8002640:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68d9      	ldr	r1, [r3, #12]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	4618      	mov	r0, r3
 8002654:	4603      	mov	r3, r0
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4403      	add	r3, r0
 800265a:	3b1e      	subs	r3, #30
 800265c:	409a      	lsls	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	e022      	b.n	80026ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6919      	ldr	r1, [r3, #16]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	2207      	movs	r2, #7
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	400a      	ands	r2, r1
 800268a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6919      	ldr	r1, [r3, #16]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	4618      	mov	r0, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4403      	add	r3, r0
 80026a4:	409a      	lsls	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d824      	bhi.n	8002700 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b05      	subs	r3, #5
 80026c8:	221f      	movs	r2, #31
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	400a      	ands	r2, r1
 80026d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	3b05      	subs	r3, #5
 80026f2:	fa00 f203 	lsl.w	r2, r0, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34
 80026fe:	e04c      	b.n	800279a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d824      	bhi.n	8002752 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	3b23      	subs	r3, #35	; 0x23
 800271a:	221f      	movs	r2, #31
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43da      	mvns	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	400a      	ands	r2, r1
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	4618      	mov	r0, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	3b23      	subs	r3, #35	; 0x23
 8002744:	fa00 f203 	lsl.w	r2, r0, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
 8002750:	e023      	b.n	800279a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	3b41      	subs	r3, #65	; 0x41
 8002764:	221f      	movs	r2, #31
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	400a      	ands	r2, r1
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4618      	mov	r0, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3b41      	subs	r3, #65	; 0x41
 800278e:	fa00 f203 	lsl.w	r2, r0, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_ADC_ConfigChannel+0x250>)
 800279c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a28      	ldr	r2, [pc, #160]	; (8002844 <HAL_ADC_ConfigChannel+0x254>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d10f      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d8>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b12      	cmp	r3, #18
 80027ae:	d10b      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <HAL_ADC_ConfigChannel+0x254>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d12b      	bne.n	800282a <HAL_ADC_ConfigChannel+0x23a>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_ADC_ConfigChannel+0x258>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d003      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0x1f4>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b11      	cmp	r3, #17
 80027e2:	d122      	bne.n	800282a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a11      	ldr	r2, [pc, #68]	; (8002848 <HAL_ADC_ConfigChannel+0x258>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d111      	bne.n	800282a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_ADC_ConfigChannel+0x25c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_ADC_ConfigChannel+0x260>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	0c9a      	lsrs	r2, r3, #18
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800281c:	e002      	b.n	8002824 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3b01      	subs	r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f9      	bne.n	800281e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40012300 	.word	0x40012300
 8002844:	40012000 	.word	0x40012000
 8002848:	10000012 	.word	0x10000012
 800284c:	20000248 	.word	0x20000248
 8002850:	431bde83 	.word	0x431bde83

08002854 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800285c:	4b79      	ldr	r3, [pc, #484]	; (8002a44 <ADC_Init+0x1f0>)
 800285e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	021a      	lsls	r2, r3, #8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <ADC_Init+0x1f4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d022      	beq.n	8002932 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6899      	ldr	r1, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800291c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	e00f      	b.n	8002952 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002950:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0202 	bic.w	r2, r2, #2
 8002960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7e1b      	ldrb	r3, [r3, #24]
 800296c:	005a      	lsls	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01b      	beq.n	80029b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800299e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	3b01      	subs	r3, #1
 80029ac:	035a      	lsls	r2, r3, #13
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	e007      	b.n	80029c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	051a      	lsls	r2, r3, #20
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a0a:	025a      	lsls	r2, r3, #9
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6899      	ldr	r1, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	029a      	lsls	r2, r3, #10
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40012300 	.word	0x40012300
 8002a48:	0f000001 	.word	0x0f000001

08002a4c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d13c      	bne.n	8002ae0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d12b      	bne.n	8002ad8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d127      	bne.n	8002ad8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d119      	bne.n	8002ad8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0220 	bic.w	r2, r2, #32
 8002ab2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff fd6b 	bl	80025b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ade:	e00e      	b.n	8002afe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fd75 	bl	80025dc <HAL_ADC_ErrorCallback>
}
 8002af2:	e004      	b.n	8002afe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fd57 	bl	80025c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2240      	movs	r2, #64	; 0x40
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f043 0204 	orr.w	r2, r3, #4
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff fd4a 	bl	80025dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <__NVIC_SetPriorityGrouping+0x44>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b82:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <__NVIC_SetPriorityGrouping+0x44>)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	60d3      	str	r3, [r2, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	f003 0307 	and.w	r3, r3, #7
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	db0b      	blt.n	8002bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	4907      	ldr	r1, [pc, #28]	; (8002bec <__NVIC_EnableIRQ+0x38>)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000e100 	.word	0xe000e100

08002bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	6039      	str	r1, [r7, #0]
 8002bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	db0a      	blt.n	8002c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	490c      	ldr	r1, [pc, #48]	; (8002c3c <__NVIC_SetPriority+0x4c>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	0112      	lsls	r2, r2, #4
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	440b      	add	r3, r1
 8002c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c18:	e00a      	b.n	8002c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4908      	ldr	r1, [pc, #32]	; (8002c40 <__NVIC_SetPriority+0x50>)
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	3b04      	subs	r3, #4
 8002c28:	0112      	lsls	r2, r2, #4
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	761a      	strb	r2, [r3, #24]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000e100 	.word	0xe000e100
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f1c3 0307 	rsb	r3, r3, #7
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	bf28      	it	cs
 8002c62:	2304      	movcs	r3, #4
 8002c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	2b06      	cmp	r3, #6
 8002c6c:	d902      	bls.n	8002c74 <NVIC_EncodePriority+0x30>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3b03      	subs	r3, #3
 8002c72:	e000      	b.n	8002c76 <NVIC_EncodePriority+0x32>
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	401a      	ands	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43d9      	mvns	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	4313      	orrs	r3, r2
         );
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3724      	adds	r7, #36	; 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbc:	d301      	bcc.n	8002cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00f      	b.n	8002ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <SysTick_Config+0x40>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cca:	210f      	movs	r1, #15
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	f7ff ff8e 	bl	8002bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <SysTick_Config+0x40>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SysTick_Config+0x40>)
 8002cdc:	2207      	movs	r2, #7
 8002cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	e000e010 	.word	0xe000e010

08002cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff29 	bl	8002b50 <__NVIC_SetPriorityGrouping>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d18:	f7ff ff3e 	bl	8002b98 <__NVIC_GetPriorityGrouping>
 8002d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff8e 	bl	8002c44 <NVIC_EncodePriority>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff5d 	bl	8002bf0 <__NVIC_SetPriority>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff31 	bl	8002bb4 <__NVIC_EnableIRQ>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffa2 	bl	8002cac <SysTick_Config>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff fa94 	bl	80022ac <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e099      	b.n	8002ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db0:	e00f      	b.n	8002dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db2:	f7ff fa7b 	bl	80022ac <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d908      	bls.n	8002dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e078      	b.n	8002ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e8      	bne.n	8002db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_DMA_Init+0x158>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d107      	bne.n	8002e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	4313      	orrs	r3, r2
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 0307 	bic.w	r3, r3, #7
 8002e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d117      	bne.n	8002e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00e      	beq.n	8002e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa6f 	bl	800335c <DMA_CheckFifoParam>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2240      	movs	r2, #64	; 0x40
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e92:	2301      	movs	r3, #1
 8002e94:	e016      	b.n	8002ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa26 	bl	80032f0 <DMA_CalcBaseAndBitshift>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	223f      	movs	r2, #63	; 0x3f
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	f010803f 	.word	0xf010803f

08002ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Start_IT+0x26>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e040      	b.n	8002f78 <HAL_DMA_Start_IT+0xa8>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d12f      	bne.n	8002f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f9b8 	bl	8003294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	223f      	movs	r2, #63	; 0x3f
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0216 	orr.w	r2, r2, #22
 8002f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0208 	orr.w	r2, r2, #8
 8002f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e005      	b.n	8002f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
 8002f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f8c:	4b8e      	ldr	r3, [pc, #568]	; (80031c8 <HAL_DMA_IRQHandler+0x248>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a8e      	ldr	r2, [pc, #568]	; (80031cc <HAL_DMA_IRQHandler+0x24c>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	2208      	movs	r2, #8
 8002fac:	409a      	lsls	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01a      	beq.n	8002fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0204 	bic.w	r2, r2, #4
 8002fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	2208      	movs	r2, #8
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d012      	beq.n	8003022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	2201      	movs	r2, #1
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2204      	movs	r2, #4
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d012      	beq.n	8003058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	2204      	movs	r2, #4
 8003046:	409a      	lsls	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	f043 0204 	orr.w	r2, r3, #4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	2210      	movs	r2, #16
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d043      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d03c      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2210      	movs	r2, #16
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d024      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
 80030ae:	e01f      	b.n	80030f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01b      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
 80030c0:	e016      	b.n	80030f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0208 	bic.w	r2, r2, #8
 80030de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	2220      	movs	r2, #32
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 808f 	beq.w	8003220 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8087 	beq.w	8003220 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	2220      	movs	r2, #32
 8003118:	409a      	lsls	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b05      	cmp	r3, #5
 8003128:	d136      	bne.n	8003198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0216 	bic.w	r2, r2, #22
 8003138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <HAL_DMA_IRQHandler+0x1da>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0208 	bic.w	r2, r2, #8
 8003168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	223f      	movs	r2, #63	; 0x3f
 8003170:	409a      	lsls	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	2b00      	cmp	r3, #0
 800318c:	d07e      	beq.n	800328c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
        }
        return;
 8003196:	e079      	b.n	800328c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01d      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10d      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d031      	beq.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
 80031c4:	e02c      	b.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
 80031c6:	bf00      	nop
 80031c8:	20000248 	.word	0x20000248
 80031cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d023      	beq.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
 80031e0:	e01e      	b.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10f      	bne.n	8003210 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0210 	bic.w	r2, r2, #16
 80031fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	2b00      	cmp	r3, #0
 8003226:	d032      	beq.n	800328e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d022      	beq.n	800327a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2205      	movs	r2, #5
 8003238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3301      	adds	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	429a      	cmp	r2, r3
 8003256:	d307      	bcc.n	8003268 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f2      	bne.n	800324c <HAL_DMA_IRQHandler+0x2cc>
 8003266:	e000      	b.n	800326a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003268:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
 800328a:	e000      	b.n	800328e <HAL_DMA_IRQHandler+0x30e>
        return;
 800328c:	bf00      	nop
    }
  }
}
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d108      	bne.n	80032d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032d2:	e007      	b.n	80032e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	3b10      	subs	r3, #16
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <DMA_CalcBaseAndBitshift+0x64>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <DMA_CalcBaseAndBitshift+0x68>)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d909      	bls.n	8003332 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	1d1a      	adds	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	659a      	str	r2, [r3, #88]	; 0x58
 8003330:	e007      	b.n	8003342 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	aaaaaaab 	.word	0xaaaaaaab
 8003358:	080097f0 	.word	0x080097f0

0800335c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11f      	bne.n	80033b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d856      	bhi.n	800342a <DMA_CheckFifoParam+0xce>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <DMA_CheckFifoParam+0x28>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	08003395 	.word	0x08003395
 8003388:	080033a7 	.word	0x080033a7
 800338c:	08003395 	.word	0x08003395
 8003390:	0800342b 	.word	0x0800342b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d046      	beq.n	800342e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a4:	e043      	b.n	800342e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ae:	d140      	bne.n	8003432 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b4:	e03d      	b.n	8003432 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033be:	d121      	bne.n	8003404 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d837      	bhi.n	8003436 <DMA_CheckFifoParam+0xda>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <DMA_CheckFifoParam+0x70>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	080033dd 	.word	0x080033dd
 80033d0:	080033e3 	.word	0x080033e3
 80033d4:	080033dd 	.word	0x080033dd
 80033d8:	080033f5 	.word	0x080033f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e030      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d025      	beq.n	800343a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f2:	e022      	b.n	800343a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033fc:	d11f      	bne.n	800343e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003402:	e01c      	b.n	800343e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d903      	bls.n	8003412 <DMA_CheckFifoParam+0xb6>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d003      	beq.n	8003418 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003410:	e018      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
      break;
 8003416:	e015      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00e      	beq.n	8003442 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      break;
 8003428:	e00b      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      break;
 800342a:	bf00      	nop
 800342c:	e00a      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 800342e:	bf00      	nop
 8003430:	e008      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 8003432:	bf00      	nop
 8003434:	e006      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e004      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e002      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;   
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
    }
  } 
  
  return status; 
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop

08003454 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06c      	b.n	8003540 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2223      	movs	r2, #35	; 0x23
 8003474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7fe fb93 	bl	8001ba4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_ETH_Init+0xf4>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_ETH_Init+0xf4>)
 8003488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800348c:	6453      	str	r3, [r2, #68]	; 0x44
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_ETH_Init+0xf4>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_ETH_Init+0xf8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a2b      	ldr	r2, [pc, #172]	; (800354c <HAL_ETH_Init+0xf8>)
 80034a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_ETH_Init+0xf8>)
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4927      	ldr	r1, [pc, #156]	; (800354c <HAL_ETH_Init+0xf8>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_ETH_Init+0xf8>)
 80034b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d0:	f7fe feec 	bl	80022ac <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034d6:	e011      	b.n	80034fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80034d8:	f7fe fee8 	bl	80022ac <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034e6:	d909      	bls.n	80034fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2204      	movs	r2, #4
 80034ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	22e0      	movs	r2, #224	; 0xe0
 80034f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e021      	b.n	8003540 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e4      	bne.n	80034d8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f958 	bl	80037c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f9ff 	bl	8003918 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa55 	bl	80039ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	461a      	mov	r2, r3
 8003526:	2100      	movs	r1, #0
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f9bd 	bl	80038a8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2210      	movs	r2, #16
 800353a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	40013800 	.word	0x40013800

08003550 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4b51      	ldr	r3, [pc, #324]	; (80036ac <ETH_SetMACConfig+0x15c>)
 8003566:	4013      	ands	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	7c1b      	ldrb	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <ETH_SetMACConfig+0x28>
 8003572:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003576:	e000      	b.n	800357a <ETH_SetMACConfig+0x2a>
 8003578:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	7c5b      	ldrb	r3, [r3, #17]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <ETH_SetMACConfig+0x38>
 8003582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003586:	e000      	b.n	800358a <ETH_SetMACConfig+0x3a>
 8003588:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800358a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003590:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	7fdb      	ldrb	r3, [r3, #31]
 8003596:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003598:	431a      	orrs	r2, r3
                        macconf->Speed |
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800359e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	7f92      	ldrb	r2, [r2, #30]
 80035a4:	2a00      	cmp	r2, #0
 80035a6:	d102      	bne.n	80035ae <ETH_SetMACConfig+0x5e>
 80035a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035ac:	e000      	b.n	80035b0 <ETH_SetMACConfig+0x60>
 80035ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80035b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	7f1b      	ldrb	r3, [r3, #28]
 80035b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80035b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80035be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	791b      	ldrb	r3, [r3, #4]
 80035c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80035c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80035ce:	2a00      	cmp	r2, #0
 80035d0:	d102      	bne.n	80035d8 <ETH_SetMACConfig+0x88>
 80035d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d6:	e000      	b.n	80035da <ETH_SetMACConfig+0x8a>
 80035d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	7bdb      	ldrb	r3, [r3, #15]
 80035e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035f2:	4313      	orrs	r3, r2
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800360a:	2001      	movs	r0, #1
 800360c:	f7fe fe5a 	bl	80022c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003626:	4013      	ands	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003636:	2a00      	cmp	r2, #0
 8003638:	d101      	bne.n	800363e <ETH_SetMACConfig+0xee>
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	e000      	b.n	8003640 <ETH_SetMACConfig+0xf0>
 800363e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003640:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003646:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800364e:	2a01      	cmp	r2, #1
 8003650:	d101      	bne.n	8003656 <ETH_SetMACConfig+0x106>
 8003652:	2208      	movs	r2, #8
 8003654:	e000      	b.n	8003658 <ETH_SetMACConfig+0x108>
 8003656:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003658:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003660:	2a01      	cmp	r2, #1
 8003662:	d101      	bne.n	8003668 <ETH_SetMACConfig+0x118>
 8003664:	2204      	movs	r2, #4
 8003666:	e000      	b.n	800366a <ETH_SetMACConfig+0x11a>
 8003668:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800366a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003672:	2a01      	cmp	r2, #1
 8003674:	d101      	bne.n	800367a <ETH_SetMACConfig+0x12a>
 8003676:	2202      	movs	r2, #2
 8003678:	e000      	b.n	800367c <ETH_SetMACConfig+0x12c>
 800367a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800367c:	4313      	orrs	r3, r2
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003694:	2001      	movs	r0, #1
 8003696:	f7fe fe15 	bl	80022c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	619a      	str	r2, [r3, #24]
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	ff20810f 	.word	0xff20810f

080036b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <ETH_SetDMAConfig+0x110>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	7b1b      	ldrb	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <ETH_SetDMAConfig+0x2c>
 80036d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036da:	e000      	b.n	80036de <ETH_SetDMAConfig+0x2e>
 80036dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	7b5b      	ldrb	r3, [r3, #13]
 80036e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	7f52      	ldrb	r2, [r2, #29]
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	d102      	bne.n	80036f4 <ETH_SetDMAConfig+0x44>
 80036ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036f2:	e000      	b.n	80036f6 <ETH_SetDMAConfig+0x46>
 80036f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	7b9b      	ldrb	r3, [r3, #14]
 80036fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003704:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	7f1b      	ldrb	r3, [r3, #28]
 800370a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800370c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	7f9b      	ldrb	r3, [r3, #30]
 8003712:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003714:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800371a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003722:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003724:	4313      	orrs	r3, r2
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003734:	461a      	mov	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003746:	2001      	movs	r0, #1
 8003748:	f7fe fdbc 	bl	80022c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003754:	461a      	mov	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	791b      	ldrb	r3, [r3, #4]
 800375e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003764:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800376a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003770:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003778:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800377a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003782:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003788:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003796:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037a4:	2001      	movs	r0, #1
 80037a6:	f7fe fd8d 	bl	80022c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b2:	461a      	mov	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	f8de3f23 	.word	0xf8de3f23

080037c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b0a6      	sub	sp, #152	; 0x98
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80037d8:	2300      	movs	r3, #0
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003800:	2300      	movs	r3, #0
 8003802:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003804:	2300      	movs	r3, #0
 8003806:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800380a:	2300      	movs	r3, #0
 800380c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800381a:	2300      	movs	r3, #0
 800381c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003820:	2300      	movs	r3, #0
 8003822:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800382a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800382c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003830:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003832:	2300      	movs	r3, #0
 8003834:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003838:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fe86 	bl	8003550 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003844:	2301      	movs	r3, #1
 8003846:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003848:	2301      	movs	r3, #1
 800384a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003852:	2301      	movs	r3, #1
 8003854:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003866:	2300      	movs	r3, #0
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003870:	2301      	movs	r3, #1
 8003872:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003878:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800387a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800387e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003884:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800388c:	2300      	movs	r3, #0
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003894:	f107 0308 	add.w	r3, r7, #8
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ff08 	bl	80036b0 <ETH_SetDMAConfig>
}
 80038a0:	bf00      	nop
 80038a2:	3798      	adds	r7, #152	; 0x98
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3305      	adds	r3, #5
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	3204      	adds	r2, #4
 80038c0:	7812      	ldrb	r2, [r2, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <ETH_MACAddressConfig+0x68>)
 80038ca:	4413      	add	r3, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3303      	adds	r3, #3
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	061a      	lsls	r2, r3, #24
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3302      	adds	r3, #2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3301      	adds	r3, #1
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	4313      	orrs	r3, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <ETH_MACAddressConfig+0x6c>)
 80038fa:	4413      	add	r3, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	6013      	str	r3, [r2, #0]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40028040 	.word	0x40028040
 8003914:	40028044 	.word	0x40028044

08003918 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e03e      	b.n	80039a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68d9      	ldr	r1, [r3, #12]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	440b      	add	r3, r1
 8003936:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2200      	movs	r2, #0
 8003942:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	3206      	adds	r2, #6
 8003958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d80c      	bhi.n	8003988 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68d9      	ldr	r1, [r3, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	440b      	add	r3, r1
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	e004      	b.n	8003992 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3301      	adds	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d9bd      	bls.n	8003926 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039bc:	611a      	str	r2, [r3, #16]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e046      	b.n	8003a66 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6919      	ldr	r1, [r3, #16]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	440b      	add	r3, r1
 80039e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2200      	movs	r2, #0
 8003a06:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a14:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003a1c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	3212      	adds	r2, #18
 8003a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d80c      	bhi.n	8003a56 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6919      	ldr	r1, [r3, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	440b      	add	r3, r1
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	e004      	b.n	8003a60 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d9b5      	bls.n	80039d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a96:	60da      	str	r2, [r3, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ab6:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <HAL_FLASH_Program+0xa0>)
 8003ab8:	7e1b      	ldrb	r3, [r3, #24]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_FLASH_Program+0x1e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e03b      	b.n	8003b3a <HAL_FLASH_Program+0x96>
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_FLASH_Program+0xa0>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ac8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003acc:	f000 f870 	bl	8003bb0 <FLASH_WaitForLastOperation>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d12b      	bne.n	8003b32 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003ae0:	783b      	ldrb	r3, [r7, #0]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	68b8      	ldr	r0, [r7, #8]
 8003ae6:	f000 f91b 	bl	8003d20 <FLASH_Program_Byte>
 8003aea:	e016      	b.n	8003b1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d105      	bne.n	8003afe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003af2:	883b      	ldrh	r3, [r7, #0]
 8003af4:	4619      	mov	r1, r3
 8003af6:	68b8      	ldr	r0, [r7, #8]
 8003af8:	f000 f8ee 	bl	8003cd8 <FLASH_Program_HalfWord>
 8003afc:	e00d      	b.n	8003b1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d105      	bne.n	8003b10 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	68b8      	ldr	r0, [r7, #8]
 8003b0a:	f000 f8c3 	bl	8003c94 <FLASH_Program_Word>
 8003b0e:	e004      	b.n	8003b1a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b14:	68b8      	ldr	r0, [r7, #8]
 8003b16:	f000 f88b 	bl	8003c30 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b1e:	f000 f847 	bl	8003bb0 <FLASH_WaitForLastOperation>
 8003b22:	4603      	mov	r3, r0
 8003b24:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_FLASH_Program+0xa4>)
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_FLASH_Program+0xa4>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <HAL_FLASH_Program+0xa0>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200007ac 	.word	0x200007ac
 8003b48:	40023c00 	.word	0x40023c00

08003b4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_FLASH_Unlock+0x38>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	da0b      	bge.n	8003b76 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_FLASH_Unlock+0x38>)
 8003b60:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <HAL_FLASH_Unlock+0x3c>)
 8003b62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b64:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <HAL_FLASH_Unlock+0x38>)
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <HAL_FLASH_Unlock+0x40>)
 8003b68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_FLASH_Unlock+0x38>)
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da01      	bge.n	8003b76 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003b76:	79fb      	ldrb	r3, [r7, #7]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	45670123 	.word	0x45670123
 8003b8c:	cdef89ab 	.word	0xcdef89ab

08003b90 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_FLASH_Lock+0x1c>)
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <HAL_FLASH_Lock+0x1c>)
 8003b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b9e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40023c00 	.word	0x40023c00

08003bb0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <FLASH_WaitForLastOperation+0x78>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003bc2:	f7fe fb73 	bl	80022ac <HAL_GetTick>
 8003bc6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003bc8:	e010      	b.n	8003bec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d00c      	beq.n	8003bec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <FLASH_WaitForLastOperation+0x38>
 8003bd8:	f7fe fb68 	bl	80022ac <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d201      	bcs.n	8003bec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e019      	b.n	8003c20 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <FLASH_WaitForLastOperation+0x7c>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e8      	bne.n	8003bca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <FLASH_WaitForLastOperation+0x7c>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <FLASH_WaitForLastOperation+0x7c>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <FLASH_WaitForLastOperation+0x7c>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003c16:	f000 f8a5 	bl	8003d64 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
  
}  
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	200007ac 	.word	0x200007ac
 8003c2c:	40023c00 	.word	0x40023c00

08003c30 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <FLASH_Program_DoubleWord+0x60>)
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	4a13      	ldr	r2, [pc, #76]	; (8003c90 <FLASH_Program_DoubleWord+0x60>)
 8003c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <FLASH_Program_DoubleWord+0x60>)
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <FLASH_Program_DoubleWord+0x60>)
 8003c4e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003c52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <FLASH_Program_DoubleWord+0x60>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <FLASH_Program_DoubleWord+0x60>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003c66:	f3bf 8f6f 	isb	sy
}
 8003c6a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003c6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	000a      	movs	r2, r1
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	68f9      	ldr	r1, [r7, #12]
 8003c7e:	3104      	adds	r1, #4
 8003c80:	4613      	mov	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40023c00 	.word	0x40023c00

08003c94 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <FLASH_Program_Word+0x40>)
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <FLASH_Program_Word+0x40>)
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <FLASH_Program_Word+0x40>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <FLASH_Program_Word+0x40>)
 8003cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <FLASH_Program_Word+0x40>)
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	4a06      	ldr	r2, [pc, #24]	; (8003cd4 <FLASH_Program_Word+0x40>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	601a      	str	r2, [r3, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40023c00 	.word	0x40023c00

08003cd8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <FLASH_Program_HalfWord+0x44>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <FLASH_Program_HalfWord+0x44>)
 8003cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <FLASH_Program_HalfWord+0x44>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <FLASH_Program_HalfWord+0x44>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <FLASH_Program_HalfWord+0x44>)
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	4a06      	ldr	r2, [pc, #24]	; (8003d1c <FLASH_Program_HalfWord+0x44>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	801a      	strh	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40023c00 	.word	0x40023c00

08003d20 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <FLASH_Program_Byte+0x40>)
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <FLASH_Program_Byte+0x40>)
 8003d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <FLASH_Program_Byte+0x40>)
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <FLASH_Program_Byte+0x40>)
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d40:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <FLASH_Program_Byte+0x40>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <FLASH_Program_Byte+0x40>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	701a      	strb	r2, [r3, #0]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40023c00 	.word	0x40023c00

08003d64 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003d68:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d74:	4b2d      	ldr	r3, [pc, #180]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f043 0310 	orr.w	r3, r3, #16
 8003d7c:	4a2b      	ldr	r2, [pc, #172]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003d7e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003d82:	2210      	movs	r2, #16
 8003d84:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003d86:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003d92:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f043 0308 	orr.w	r3, r3, #8
 8003d9a:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003d9c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003da0:	2220      	movs	r2, #32
 8003da2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003da4:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003db0:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003dba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003dbe:	2240      	movs	r2, #64	; 0x40
 8003dc0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003dc2:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003dce:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f043 0302 	orr.w	r3, r3, #2
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003dd8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003ddc:	2280      	movs	r2, #128	; 0x80
 8003dde:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003df6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dfe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f043 0320 	orr.w	r3, r3, #32
 8003e14:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <FLASH_SetErrorCode+0xc8>)
 8003e16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <FLASH_SetErrorCode+0xc4>)
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	60da      	str	r2, [r3, #12]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40023c00 	.word	0x40023c00
 8003e2c:	200007ac 	.word	0x200007ac

08003e30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e42:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <HAL_FLASHEx_Erase+0xdc>)
 8003e44:	7e1b      	ldrb	r3, [r3, #24]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_FLASHEx_Erase+0x1e>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e05a      	b.n	8003f04 <HAL_FLASHEx_Erase+0xd4>
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_FLASHEx_Erase+0xdc>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e58:	f7ff feaa 	bl	8003bb0 <FLASH_WaitForLastOperation>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d14a      	bne.n	8003efc <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d117      	bne.n	8003ea6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f000 f846 	bl	8003f14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e8c:	f7ff fe90 	bl	8003bb0 <FLASH_WaitForLastOperation>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003e94:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <HAL_FLASHEx_Erase+0xe0>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <HAL_FLASHEx_Erase+0xe0>)
 8003e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e9e:	f023 0304 	bic.w	r3, r3, #4
 8003ea2:	6113      	str	r3, [r2, #16]
 8003ea4:	e028      	b.n	8003ef8 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	e01c      	b.n	8003ee8 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	68b8      	ldr	r0, [r7, #8]
 8003eb8:	f000 f866 	bl	8003f88 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ebc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ec0:	f7ff fe76 	bl	8003bb0 <FLASH_WaitForLastOperation>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <HAL_FLASHEx_Erase+0xe0>)
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	4a10      	ldr	r2, [pc, #64]	; (8003f10 <HAL_FLASHEx_Erase+0xe0>)
 8003ece:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003ed2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	601a      	str	r2, [r3, #0]
          break;
 8003ee0:	e00a      	b.n	8003ef8 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d3da      	bcc.n	8003eae <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003ef8:	f000 f894 	bl	8004024 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_FLASHEx_Erase+0xdc>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	761a      	strb	r2, [r3, #24]

  return status;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200007ac 	.word	0x200007ac
 8003f10:	40023c00 	.word	0x40023c00

08003f14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f20:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d108      	bne.n	8003f44 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3c:	f043 0304 	orr.w	r3, r3, #4
 8003f40:	6113      	str	r3, [r2, #16]
 8003f42:	e00f      	b.n	8003f64 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d106      	bne.n	8003f58 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003f4a:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f50:	f043 0304 	orr.w	r3, r3, #4
 8003f54:	6113      	str	r3, [r2, #16]
 8003f56:	e005      	b.n	8003f64 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f62:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <FLASH_MassErase+0x70>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f74:	6113      	str	r3, [r2, #16]
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40023c00 	.word	0x40023c00

08003f88 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e010      	b.n	8003fc6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d103      	bne.n	8003fb2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e009      	b.n	8003fc6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d103      	bne.n	8003fc0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e002      	b.n	8003fc6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003fc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b0b      	cmp	r3, #11
 8003fca:	d902      	bls.n	8003fd2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <FLASH_Erase_Sector+0x98>)
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	4a12      	ldr	r2, [pc, #72]	; (8004020 <FLASH_Erase_Sector+0x98>)
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <FLASH_Erase_Sector+0x98>)
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	490f      	ldr	r1, [pc, #60]	; (8004020 <FLASH_Erase_Sector+0x98>)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <FLASH_Erase_Sector+0x98>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	4a0c      	ldr	r2, [pc, #48]	; (8004020 <FLASH_Erase_Sector+0x98>)
 8003ff0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ff4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <FLASH_Erase_Sector+0x98>)
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4313      	orrs	r3, r2
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <FLASH_Erase_Sector+0x98>)
 8004002:	f043 0302 	orr.w	r3, r3, #2
 8004006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <FLASH_Erase_Sector+0x98>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	4a04      	ldr	r2, [pc, #16]	; (8004020 <FLASH_Erase_Sector+0x98>)
 800400e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004012:	6113      	str	r3, [r2, #16]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40023c00 	.word	0x40023c00

08004024 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004028:	4b20      	ldr	r3, [pc, #128]	; (80040ac <FLASH_FlushCaches+0x88>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004030:	2b00      	cmp	r3, #0
 8004032:	d017      	beq.n	8004064 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <FLASH_FlushCaches+0x88>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <FLASH_FlushCaches+0x88>)
 800403a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800403e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <FLASH_FlushCaches+0x88>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <FLASH_FlushCaches+0x88>)
 8004046:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4b17      	ldr	r3, [pc, #92]	; (80040ac <FLASH_FlushCaches+0x88>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a16      	ldr	r2, [pc, #88]	; (80040ac <FLASH_FlushCaches+0x88>)
 8004052:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004056:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <FLASH_FlushCaches+0x88>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a13      	ldr	r2, [pc, #76]	; (80040ac <FLASH_FlushCaches+0x88>)
 800405e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004062:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <FLASH_FlushCaches+0x88>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d017      	beq.n	80040a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <FLASH_FlushCaches+0x88>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <FLASH_FlushCaches+0x88>)
 8004076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800407a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <FLASH_FlushCaches+0x88>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <FLASH_FlushCaches+0x88>)
 8004082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <FLASH_FlushCaches+0x88>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <FLASH_FlushCaches+0x88>)
 800408e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004092:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <FLASH_FlushCaches+0x88>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <FLASH_FlushCaches+0x88>)
 800409a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800409e:	6013      	str	r3, [r2, #0]
  }
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40023c00 	.word	0x40023c00

080040b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	e177      	b.n	80043bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040cc:	2201      	movs	r2, #1
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	f040 8166 	bne.w	80043b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d005      	beq.n	8004102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d130      	bne.n	8004164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	2203      	movs	r2, #3
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004138:	2201      	movs	r2, #1
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 0201 	and.w	r2, r3, #1
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b03      	cmp	r3, #3
 800416e:	d017      	beq.n	80041a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	2203      	movs	r2, #3
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4313      	orrs	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d123      	bne.n	80041f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	08da      	lsrs	r2, r3, #3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3208      	adds	r2, #8
 80041b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	220f      	movs	r2, #15
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	08da      	lsrs	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3208      	adds	r2, #8
 80041ee:	69b9      	ldr	r1, [r7, #24]
 80041f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	2203      	movs	r2, #3
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4013      	ands	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0203 	and.w	r2, r3, #3
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80c0 	beq.w	80043b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <HAL_GPIO_Init+0x324>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	4a65      	ldr	r2, [pc, #404]	; (80043d4 <HAL_GPIO_Init+0x324>)
 8004240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004244:	6453      	str	r3, [r2, #68]	; 0x44
 8004246:	4b63      	ldr	r3, [pc, #396]	; (80043d4 <HAL_GPIO_Init+0x324>)
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004252:	4a61      	ldr	r2, [pc, #388]	; (80043d8 <HAL_GPIO_Init+0x328>)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	089b      	lsrs	r3, r3, #2
 8004258:	3302      	adds	r3, #2
 800425a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	220f      	movs	r2, #15
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a58      	ldr	r2, [pc, #352]	; (80043dc <HAL_GPIO_Init+0x32c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d037      	beq.n	80042ee <HAL_GPIO_Init+0x23e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a57      	ldr	r2, [pc, #348]	; (80043e0 <HAL_GPIO_Init+0x330>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d031      	beq.n	80042ea <HAL_GPIO_Init+0x23a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a56      	ldr	r2, [pc, #344]	; (80043e4 <HAL_GPIO_Init+0x334>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d02b      	beq.n	80042e6 <HAL_GPIO_Init+0x236>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a55      	ldr	r2, [pc, #340]	; (80043e8 <HAL_GPIO_Init+0x338>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d025      	beq.n	80042e2 <HAL_GPIO_Init+0x232>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a54      	ldr	r2, [pc, #336]	; (80043ec <HAL_GPIO_Init+0x33c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01f      	beq.n	80042de <HAL_GPIO_Init+0x22e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a53      	ldr	r2, [pc, #332]	; (80043f0 <HAL_GPIO_Init+0x340>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d019      	beq.n	80042da <HAL_GPIO_Init+0x22a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a52      	ldr	r2, [pc, #328]	; (80043f4 <HAL_GPIO_Init+0x344>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_GPIO_Init+0x226>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a51      	ldr	r2, [pc, #324]	; (80043f8 <HAL_GPIO_Init+0x348>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00d      	beq.n	80042d2 <HAL_GPIO_Init+0x222>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a50      	ldr	r2, [pc, #320]	; (80043fc <HAL_GPIO_Init+0x34c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <HAL_GPIO_Init+0x21e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4f      	ldr	r2, [pc, #316]	; (8004400 <HAL_GPIO_Init+0x350>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_GPIO_Init+0x21a>
 80042c6:	2309      	movs	r3, #9
 80042c8:	e012      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042ca:	230a      	movs	r3, #10
 80042cc:	e010      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042ce:	2308      	movs	r3, #8
 80042d0:	e00e      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042d2:	2307      	movs	r3, #7
 80042d4:	e00c      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042d6:	2306      	movs	r3, #6
 80042d8:	e00a      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042da:	2305      	movs	r3, #5
 80042dc:	e008      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042de:	2304      	movs	r3, #4
 80042e0:	e006      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042e2:	2303      	movs	r3, #3
 80042e4:	e004      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e002      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_GPIO_Init+0x240>
 80042ee:	2300      	movs	r3, #0
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	f002 0203 	and.w	r2, r2, #3
 80042f6:	0092      	lsls	r2, r2, #2
 80042f8:	4093      	lsls	r3, r2
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004300:	4935      	ldr	r1, [pc, #212]	; (80043d8 <HAL_GPIO_Init+0x328>)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	3302      	adds	r3, #2
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800430e:	4b3d      	ldr	r3, [pc, #244]	; (8004404 <HAL_GPIO_Init+0x354>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004332:	4a34      	ldr	r2, [pc, #208]	; (8004404 <HAL_GPIO_Init+0x354>)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004338:	4b32      	ldr	r3, [pc, #200]	; (8004404 <HAL_GPIO_Init+0x354>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <HAL_GPIO_Init+0x354>)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004362:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_GPIO_Init+0x354>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004386:	4a1f      	ldr	r2, [pc, #124]	; (8004404 <HAL_GPIO_Init+0x354>)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_GPIO_Init+0x354>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043b0:	4a14      	ldr	r2, [pc, #80]	; (8004404 <HAL_GPIO_Init+0x354>)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3301      	adds	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	f67f ae84 	bls.w	80040cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3724      	adds	r7, #36	; 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40013800 	.word	0x40013800
 80043dc:	40020000 	.word	0x40020000
 80043e0:	40020400 	.word	0x40020400
 80043e4:	40020800 	.word	0x40020800
 80043e8:	40020c00 	.word	0x40020c00
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40021400 	.word	0x40021400
 80043f4:	40021800 	.word	0x40021800
 80043f8:	40021c00 	.word	0x40021c00
 80043fc:	40022000 	.word	0x40022000
 8004400:	40022400 	.word	0x40022400
 8004404:	40013c00 	.word	0x40013c00

08004408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
 8004424:	e001      	b.n	800442a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800442a:	7bfb      	ldrb	r3, [r7, #15]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	807b      	strh	r3, [r7, #2]
 8004444:	4613      	mov	r3, r2
 8004446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004448:	787b      	ldrb	r3, [r7, #1]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800444e:	887a      	ldrh	r2, [r7, #2]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004454:	e003      	b.n	800445e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004456:	887b      	ldrh	r3, [r7, #2]
 8004458:	041a      	lsls	r2, r3, #16
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	619a      	str	r2, [r3, #24]
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800446a:	b480      	push	{r7}
 800446c:	b085      	sub	sp, #20
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800447c:	887a      	ldrh	r2, [r7, #2]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4013      	ands	r3, r2
 8004482:	041a      	lsls	r2, r3, #16
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	43d9      	mvns	r1, r3
 8004488:	887b      	ldrh	r3, [r7, #2]
 800448a:	400b      	ands	r3, r1
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	619a      	str	r2, [r3, #24]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044b6:	4a05      	ldr	r2, [pc, #20]	; (80044cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc fabe 	bl	8000a40 <HAL_GPIO_EXTI_Callback>
  }
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40013c00 	.word	0x40013c00

080044d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e12b      	b.n	800473a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd fc1a 	bl	8001d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	; 0x24
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004534:	f001 fa30 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a81      	ldr	r2, [pc, #516]	; (8004744 <HAL_I2C_Init+0x274>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d807      	bhi.n	8004554 <HAL_I2C_Init+0x84>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a80      	ldr	r2, [pc, #512]	; (8004748 <HAL_I2C_Init+0x278>)
 8004548:	4293      	cmp	r3, r2
 800454a:	bf94      	ite	ls
 800454c:	2301      	movls	r3, #1
 800454e:	2300      	movhi	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e006      	b.n	8004562 <HAL_I2C_Init+0x92>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a7d      	ldr	r2, [pc, #500]	; (800474c <HAL_I2C_Init+0x27c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	bf94      	ite	ls
 800455c:	2301      	movls	r3, #1
 800455e:	2300      	movhi	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0e7      	b.n	800473a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a78      	ldr	r2, [pc, #480]	; (8004750 <HAL_I2C_Init+0x280>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0c9b      	lsrs	r3, r3, #18
 8004574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a6a      	ldr	r2, [pc, #424]	; (8004744 <HAL_I2C_Init+0x274>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d802      	bhi.n	80045a4 <HAL_I2C_Init+0xd4>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3301      	adds	r3, #1
 80045a2:	e009      	b.n	80045b8 <HAL_I2C_Init+0xe8>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	4a69      	ldr	r2, [pc, #420]	; (8004754 <HAL_I2C_Init+0x284>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	3301      	adds	r3, #1
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	430b      	orrs	r3, r1
 80045be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	495c      	ldr	r1, [pc, #368]	; (8004744 <HAL_I2C_Init+0x274>)
 80045d4:	428b      	cmp	r3, r1
 80045d6:	d819      	bhi.n	800460c <HAL_I2C_Init+0x13c>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1e59      	subs	r1, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045ec:	400b      	ands	r3, r1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_I2C_Init+0x138>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e59      	subs	r1, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004600:	3301      	adds	r3, #1
 8004602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004606:	e051      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 8004608:	2304      	movs	r3, #4
 800460a:	e04f      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d111      	bne.n	8004638 <HAL_I2C_Init+0x168>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e012      	b.n	800465e <HAL_I2C_Init+0x18e>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e58      	subs	r0, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	0099      	lsls	r1, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	3301      	adds	r3, #1
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_Init+0x196>
 8004662:	2301      	movs	r3, #1
 8004664:	e022      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10e      	bne.n	800468c <HAL_I2C_Init+0x1bc>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1e58      	subs	r0, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	440b      	add	r3, r1
 800467c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004680:	3301      	adds	r3, #1
 8004682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468a:	e00f      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1e58      	subs	r0, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	0099      	lsls	r1, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a2:	3301      	adds	r3, #1
 80046a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	6809      	ldr	r1, [r1, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6911      	ldr	r1, [r2, #16]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68d2      	ldr	r2, [r2, #12]
 80046e6:	4311      	orrs	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	000186a0 	.word	0x000186a0
 8004748:	001e847f 	.word	0x001e847f
 800474c:	003d08ff 	.word	0x003d08ff
 8004750:	431bde83 	.word	0x431bde83
 8004754:	10624dd3 	.word	0x10624dd3

08004758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	461a      	mov	r2, r3
 8004764:	460b      	mov	r3, r1
 8004766:	817b      	strh	r3, [r7, #10]
 8004768:	4613      	mov	r3, r2
 800476a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800476c:	f7fd fd9e 	bl	80022ac <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b20      	cmp	r3, #32
 800477c:	f040 80e0 	bne.w	8004940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2319      	movs	r3, #25
 8004786:	2201      	movs	r2, #1
 8004788:	4970      	ldr	r1, [pc, #448]	; (800494c <HAL_I2C_Master_Transmit+0x1f4>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fa92 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
 8004798:	e0d3      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_I2C_Master_Transmit+0x50>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e0cc      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d007      	beq.n	80047ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2221      	movs	r2, #33	; 0x21
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2210      	movs	r2, #16
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	893a      	ldrh	r2, [r7, #8]
 80047fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a50      	ldr	r2, [pc, #320]	; (8004950 <HAL_I2C_Master_Transmit+0x1f8>)
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004810:	8979      	ldrh	r1, [r7, #10]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f9ca 	bl	8004bb0 <I2C_MasterRequestWrite>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e08d      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004826:	2300      	movs	r3, #0
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800483c:	e066      	b.n	800490c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	6a39      	ldr	r1, [r7, #32]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fb0c 	bl	8004e60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b04      	cmp	r3, #4
 8004854:	d107      	bne.n	8004866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e06b      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	781a      	ldrb	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d11b      	bne.n	80048e0 <HAL_I2C_Master_Transmit+0x188>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d017      	beq.n	80048e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	6a39      	ldr	r1, [r7, #32]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fafc 	bl	8004ee2 <I2C_WaitOnBTFFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d107      	bne.n	8004908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e01a      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	2b00      	cmp	r3, #0
 8004912:	d194      	bne.n	800483e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e000      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004940:	2302      	movs	r3, #2
  }
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	00100002 	.word	0x00100002
 8004950:	ffff0000 	.word	0xffff0000

08004954 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	460b      	mov	r3, r1
 8004962:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004964:	f7fd fca2 	bl	80022ac <HAL_GetTick>
 8004968:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b20      	cmp	r3, #32
 8004978:	f040 8111 	bne.w	8004b9e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2319      	movs	r3, #25
 8004982:	2201      	movs	r2, #1
 8004984:	4988      	ldr	r1, [pc, #544]	; (8004ba8 <HAL_I2C_IsDeviceReady+0x254>)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f994 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
 8004994:	e104      	b.n	8004ba0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_I2C_IsDeviceReady+0x50>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e0fd      	b.n	8004ba0 <HAL_I2C_IsDeviceReady+0x24c>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d007      	beq.n	80049ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2224      	movs	r2, #36	; 0x24
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a70      	ldr	r2, [pc, #448]	; (8004bac <HAL_I2C_IsDeviceReady+0x258>)
 80049ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f952 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00d      	beq.n	8004a32 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a24:	d103      	bne.n	8004a2e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e0b6      	b.n	8004ba0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a32:	897b      	ldrh	r3, [r7, #10]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a40:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fd fc33 	bl	80022ac <HAL_GetTick>
 8004a46:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	bf0c      	ite	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	2300      	movne	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	bf0c      	ite	eq
 8004a6e:	2301      	moveq	r3, #1
 8004a70:	2300      	movne	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a76:	e025      	b.n	8004ac4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a78:	f7fd fc18 	bl	80022ac <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <HAL_I2C_IsDeviceReady+0x13a>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	22a0      	movs	r2, #160	; 0xa0
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2ba0      	cmp	r3, #160	; 0xa0
 8004ace:	d005      	beq.n	8004adc <HAL_I2C_IsDeviceReady+0x188>
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <HAL_I2C_IsDeviceReady+0x188>
 8004ad6:	7dbb      	ldrb	r3, [r7, #22]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0cd      	beq.n	8004a78 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d129      	bne.n	8004b46 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b00:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	2319      	movs	r3, #25
 8004b1e:	2201      	movs	r2, #1
 8004b20:	4921      	ldr	r1, [pc, #132]	; (8004ba8 <HAL_I2C_IsDeviceReady+0x254>)
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f8c6 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e036      	b.n	8004ba0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e02c      	b.n	8004ba0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b54:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b5e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2319      	movs	r3, #25
 8004b66:	2201      	movs	r2, #1
 8004b68:	490f      	ldr	r1, [pc, #60]	; (8004ba8 <HAL_I2C_IsDeviceReady+0x254>)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f8a2 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e012      	b.n	8004ba0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	f4ff af32 	bcc.w	80049ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3720      	adds	r7, #32
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	00100002 	.word	0x00100002
 8004bac:	ffff0000 	.word	0xffff0000

08004bb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d006      	beq.n	8004bda <I2C_MasterRequestWrite+0x2a>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d003      	beq.n	8004bda <I2C_MasterRequestWrite+0x2a>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bd8:	d108      	bne.n	8004bec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e00b      	b.n	8004c04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	2b12      	cmp	r3, #18
 8004bf2:	d107      	bne.n	8004c04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f84f 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00d      	beq.n	8004c38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2a:	d103      	bne.n	8004c34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e035      	b.n	8004ca4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c40:	d108      	bne.n	8004c54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c42:	897b      	ldrh	r3, [r7, #10]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c50:	611a      	str	r2, [r3, #16]
 8004c52:	e01b      	b.n	8004c8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c54:	897b      	ldrh	r3, [r7, #10]
 8004c56:	11db      	asrs	r3, r3, #7
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 0306 	and.w	r3, r3, #6
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f063 030f 	orn	r3, r3, #15
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	490e      	ldr	r1, [pc, #56]	; (8004cac <I2C_MasterRequestWrite+0xfc>)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f875 	bl	8004d62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e010      	b.n	8004ca4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c82:	897b      	ldrh	r3, [r7, #10]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4907      	ldr	r1, [pc, #28]	; (8004cb0 <I2C_MasterRequestWrite+0x100>)
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f865 	bl	8004d62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	00010008 	.word	0x00010008
 8004cb0:	00010002 	.word	0x00010002

08004cb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc4:	e025      	b.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d021      	beq.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fd faed 	bl	80022ac <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e023      	b.n	8004d5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d10d      	bne.n	8004d38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	43da      	mvns	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	2300      	movne	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	e00c      	b.n	8004d52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d0b6      	beq.n	8004cc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
 8004d6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d70:	e051      	b.n	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d80:	d123      	bne.n	8004dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e046      	b.n	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d021      	beq.n	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fd fa6b 	bl	80022ac <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d116      	bne.n	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e020      	b.n	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10c      	bne.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	43da      	mvns	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bf14      	ite	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	2300      	moveq	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	e00b      	b.n	8004e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	43da      	mvns	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4013      	ands	r3, r2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bf14      	ite	ne
 8004e4c:	2301      	movne	r3, #1
 8004e4e:	2300      	moveq	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d18d      	bne.n	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e6c:	e02d      	b.n	8004eca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f878 	bl	8004f64 <I2C_IsAcknowledgeFailed>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e02d      	b.n	8004eda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d021      	beq.n	8004eca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fd fa11 	bl	80022ac <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d116      	bne.n	8004eca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f043 0220 	orr.w	r2, r3, #32
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e007      	b.n	8004eda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d1ca      	bne.n	8004e6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eee:	e02d      	b.n	8004f4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f837 	bl	8004f64 <I2C_IsAcknowledgeFailed>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e02d      	b.n	8004f5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d021      	beq.n	8004f4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f08:	f7fd f9d0 	bl	80022ac <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d116      	bne.n	8004f4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e007      	b.n	8004f5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d1ca      	bne.n	8004ef0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7a:	d11b      	bne.n	8004fb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	f043 0204 	orr.w	r2, r3, #4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d129      	bne.n	800502c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	; 0x24
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0210 	bic.w	r2, r2, #16
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b20      	cmp	r3, #32
 8005052:	d12a      	bne.n	80050aa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2224      	movs	r2, #36	; 0x24
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005074:	89fb      	ldrh	r3, [r7, #14]
 8005076:	f023 030f 	bic.w	r3, r3, #15
 800507a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	b29a      	uxth	r2, r3
 8005080:	89fb      	ldrh	r3, [r7, #14]
 8005082:	4313      	orrs	r3, r2
 8005084:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	89fa      	ldrh	r2, [r7, #14]
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e000      	b.n	80050ac <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
  }
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e267      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d075      	beq.n	80051c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050d6:	4b88      	ldr	r3, [pc, #544]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d00c      	beq.n	80050fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e2:	4b85      	ldr	r3, [pc, #532]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d112      	bne.n	8005114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ee:	4b82      	ldr	r3, [pc, #520]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fa:	d10b      	bne.n	8005114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fc:	4b7e      	ldr	r3, [pc, #504]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05b      	beq.n	80051c0 <HAL_RCC_OscConfig+0x108>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d157      	bne.n	80051c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e242      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511c:	d106      	bne.n	800512c <HAL_RCC_OscConfig+0x74>
 800511e:	4b76      	ldr	r3, [pc, #472]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a75      	ldr	r2, [pc, #468]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e01d      	b.n	8005168 <HAL_RCC_OscConfig+0xb0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0x98>
 8005136:	4b70      	ldr	r3, [pc, #448]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a6f      	ldr	r2, [pc, #444]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800513c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	4b6d      	ldr	r3, [pc, #436]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a6c      	ldr	r2, [pc, #432]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e00b      	b.n	8005168 <HAL_RCC_OscConfig+0xb0>
 8005150:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a68      	ldr	r2, [pc, #416]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a65      	ldr	r2, [pc, #404]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d013      	beq.n	8005198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fd f89c 	bl	80022ac <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005178:	f7fd f898 	bl	80022ac <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	; 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e207      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518a:	4b5b      	ldr	r3, [pc, #364]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0xc0>
 8005196:	e014      	b.n	80051c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fd f888 	bl	80022ac <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a0:	f7fd f884 	bl	80022ac <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	; 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e1f3      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b2:	4b51      	ldr	r3, [pc, #324]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0xe8>
 80051be:	e000      	b.n	80051c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d063      	beq.n	8005296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ce:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d11c      	bne.n	8005220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051e6:	4b44      	ldr	r3, [pc, #272]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d116      	bne.n	8005220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	4b41      	ldr	r3, [pc, #260]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_RCC_OscConfig+0x152>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d001      	beq.n	800520a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e1c7      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520a:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4937      	ldr	r1, [pc, #220]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521e:	e03a      	b.n	8005296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d020      	beq.n	800526a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005228:	4b34      	ldr	r3, [pc, #208]	; (80052fc <HAL_RCC_OscConfig+0x244>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fd f83d 	bl	80022ac <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005236:	f7fd f839 	bl	80022ac <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e1a8      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b28      	ldr	r3, [pc, #160]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4925      	ldr	r1, [pc, #148]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005264:	4313      	orrs	r3, r2
 8005266:	600b      	str	r3, [r1, #0]
 8005268:	e015      	b.n	8005296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_RCC_OscConfig+0x244>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd f81c 	bl	80022ac <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005278:	f7fd f818 	bl	80022ac <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e187      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d036      	beq.n	8005310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <HAL_RCC_OscConfig+0x248>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fc fffc 	bl	80022ac <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b8:	f7fc fff8 	bl	80022ac <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e167      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80052cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x200>
 80052d6:	e01b      	b.n	8005310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCC_OscConfig+0x248>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052de:	f7fc ffe5 	bl	80022ac <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e4:	e00e      	b.n	8005304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e6:	f7fc ffe1 	bl	80022ac <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d907      	bls.n	8005304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e150      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
 80052f8:	40023800 	.word	0x40023800
 80052fc:	42470000 	.word	0x42470000
 8005300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005304:	4b88      	ldr	r3, [pc, #544]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ea      	bne.n	80052e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8097 	beq.w	800544c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005322:	4b81      	ldr	r3, [pc, #516]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10f      	bne.n	800534e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	4b7d      	ldr	r3, [pc, #500]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	4a7c      	ldr	r2, [pc, #496]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533c:	6413      	str	r3, [r2, #64]	; 0x40
 800533e:	4b7a      	ldr	r3, [pc, #488]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534a:	2301      	movs	r3, #1
 800534c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534e:	4b77      	ldr	r3, [pc, #476]	; (800552c <HAL_RCC_OscConfig+0x474>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d118      	bne.n	800538c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800535a:	4b74      	ldr	r3, [pc, #464]	; (800552c <HAL_RCC_OscConfig+0x474>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a73      	ldr	r2, [pc, #460]	; (800552c <HAL_RCC_OscConfig+0x474>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005366:	f7fc ffa1 	bl	80022ac <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536e:	f7fc ff9d 	bl	80022ac <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e10c      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005380:	4b6a      	ldr	r3, [pc, #424]	; (800552c <HAL_RCC_OscConfig+0x474>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x2ea>
 8005394:	4b64      	ldr	r3, [pc, #400]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	4a63      	ldr	r2, [pc, #396]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	6713      	str	r3, [r2, #112]	; 0x70
 80053a0:	e01c      	b.n	80053dc <HAL_RCC_OscConfig+0x324>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b05      	cmp	r3, #5
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x30c>
 80053aa:	4b5f      	ldr	r3, [pc, #380]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a5e      	ldr	r2, [pc, #376]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053b0:	f043 0304 	orr.w	r3, r3, #4
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
 80053b6:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	4a5b      	ldr	r2, [pc, #364]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	6713      	str	r3, [r2, #112]	; 0x70
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0x324>
 80053c4:	4b58      	ldr	r3, [pc, #352]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	4a57      	ldr	r2, [pc, #348]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	6713      	str	r3, [r2, #112]	; 0x70
 80053d0:	4b55      	ldr	r3, [pc, #340]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	4a54      	ldr	r2, [pc, #336]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053d6:	f023 0304 	bic.w	r3, r3, #4
 80053da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d015      	beq.n	8005410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fc ff62 	bl	80022ac <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f7fc ff5e 	bl	80022ac <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e0cb      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005402:	4b49      	ldr	r3, [pc, #292]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0ee      	beq.n	80053ec <HAL_RCC_OscConfig+0x334>
 800540e:	e014      	b.n	800543a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005410:	f7fc ff4c 	bl	80022ac <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005416:	e00a      	b.n	800542e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005418:	f7fc ff48 	bl	80022ac <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e0b5      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542e:	4b3e      	ldr	r3, [pc, #248]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ee      	bne.n	8005418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b39      	ldr	r3, [pc, #228]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	4a38      	ldr	r2, [pc, #224]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80a1 	beq.w	8005598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005456:	4b34      	ldr	r3, [pc, #208]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b08      	cmp	r3, #8
 8005460:	d05c      	beq.n	800551c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d141      	bne.n	80054ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546a:	4b31      	ldr	r3, [pc, #196]	; (8005530 <HAL_RCC_OscConfig+0x478>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fc ff1c 	bl	80022ac <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005478:	f7fc ff18 	bl	80022ac <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e087      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548a:	4b27      	ldr	r3, [pc, #156]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	019b      	lsls	r3, r3, #6
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	3b01      	subs	r3, #1
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	491b      	ldr	r1, [pc, #108]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c0:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <HAL_RCC_OscConfig+0x478>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c6:	f7fc fef1 	bl	80022ac <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ce:	f7fc feed 	bl	80022ac <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e05c      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e0:	4b11      	ldr	r3, [pc, #68]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x416>
 80054ec:	e054      	b.n	8005598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ee:	4b10      	ldr	r3, [pc, #64]	; (8005530 <HAL_RCC_OscConfig+0x478>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fc feda 	bl	80022ac <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054fc:	f7fc fed6 	bl	80022ac <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e045      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_RCC_OscConfig+0x444>
 800551a:	e03d      	b.n	8005598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d107      	bne.n	8005534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e038      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
 8005528:	40023800 	.word	0x40023800
 800552c:	40007000 	.word	0x40007000
 8005530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005534:	4b1b      	ldr	r3, [pc, #108]	; (80055a4 <HAL_RCC_OscConfig+0x4ec>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d028      	beq.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d121      	bne.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d11a      	bne.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005564:	4013      	ands	r3, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800556a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800556c:	4293      	cmp	r3, r2
 800556e:	d111      	bne.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	3b01      	subs	r3, #1
 800557e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d107      	bne.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40023800 	.word	0x40023800

080055a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0cc      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055bc:	4b68      	ldr	r3, [pc, #416]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d90c      	bls.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b65      	ldr	r3, [pc, #404]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b63      	ldr	r3, [pc, #396]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0b8      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d020      	beq.n	8005632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055fc:	4b59      	ldr	r3, [pc, #356]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4a58      	ldr	r2, [pc, #352]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005614:	4b53      	ldr	r3, [pc, #332]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a52      	ldr	r2, [pc, #328]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800561e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	4b50      	ldr	r3, [pc, #320]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	494d      	ldr	r1, [pc, #308]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d044      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005646:	4b47      	ldr	r3, [pc, #284]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d119      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e07f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d003      	beq.n	8005666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005662:	2b03      	cmp	r3, #3
 8005664:	d107      	bne.n	8005676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005666:	4b3f      	ldr	r3, [pc, #252]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e06f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005676:	4b3b      	ldr	r3, [pc, #236]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e067      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005686:	4b37      	ldr	r3, [pc, #220]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	4934      	ldr	r1, [pc, #208]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	4313      	orrs	r3, r2
 8005696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005698:	f7fc fe08 	bl	80022ac <HAL_GetTick>
 800569c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569e:	e00a      	b.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a0:	f7fc fe04 	bl	80022ac <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e04f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b6:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 020c 	and.w	r2, r3, #12
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d1eb      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c8:	4b25      	ldr	r3, [pc, #148]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d20c      	bcs.n	80056f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b22      	ldr	r3, [pc, #136]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b20      	ldr	r3, [pc, #128]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e032      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056fc:	4b19      	ldr	r3, [pc, #100]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4916      	ldr	r1, [pc, #88]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	4313      	orrs	r3, r2
 800570c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	490e      	ldr	r1, [pc, #56]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800572e:	f000 f821 	bl	8005774 <HAL_RCC_GetSysClockFreq>
 8005732:	4602      	mov	r2, r0
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	490a      	ldr	r1, [pc, #40]	; (8005768 <HAL_RCC_ClockConfig+0x1c0>)
 8005740:	5ccb      	ldrb	r3, [r1, r3]
 8005742:	fa22 f303 	lsr.w	r3, r2, r3
 8005746:	4a09      	ldr	r2, [pc, #36]	; (800576c <HAL_RCC_ClockConfig+0x1c4>)
 8005748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <HAL_RCC_ClockConfig+0x1c8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fc fd68 	bl	8002224 <HAL_InitTick>

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40023c00 	.word	0x40023c00
 8005764:	40023800 	.word	0x40023800
 8005768:	080097d8 	.word	0x080097d8
 800576c:	20000248 	.word	0x20000248
 8005770:	2000024c 	.word	0x2000024c

08005774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005778:	b094      	sub	sp, #80	; 0x50
 800577a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	647b      	str	r3, [r7, #68]	; 0x44
 8005780:	2300      	movs	r3, #0
 8005782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005784:	2300      	movs	r3, #0
 8005786:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800578c:	4b79      	ldr	r3, [pc, #484]	; (8005974 <HAL_RCC_GetSysClockFreq+0x200>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b08      	cmp	r3, #8
 8005796:	d00d      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005798:	2b08      	cmp	r3, #8
 800579a:	f200 80e1 	bhi.w	8005960 <HAL_RCC_GetSysClockFreq+0x1ec>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x34>
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d003      	beq.n	80057ae <HAL_RCC_GetSysClockFreq+0x3a>
 80057a6:	e0db      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057a8:	4b73      	ldr	r3, [pc, #460]	; (8005978 <HAL_RCC_GetSysClockFreq+0x204>)
 80057aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057ac:	e0db      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ae:	4b73      	ldr	r3, [pc, #460]	; (800597c <HAL_RCC_GetSysClockFreq+0x208>)
 80057b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057b2:	e0d8      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057b4:	4b6f      	ldr	r3, [pc, #444]	; (8005974 <HAL_RCC_GetSysClockFreq+0x200>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057be:	4b6d      	ldr	r3, [pc, #436]	; (8005974 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d063      	beq.n	8005892 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ca:	4b6a      	ldr	r3, [pc, #424]	; (8005974 <HAL_RCC_GetSysClockFreq+0x200>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	099b      	lsrs	r3, r3, #6
 80057d0:	2200      	movs	r2, #0
 80057d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
 80057de:	2300      	movs	r3, #0
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
 80057e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057e6:	4622      	mov	r2, r4
 80057e8:	462b      	mov	r3, r5
 80057ea:	f04f 0000 	mov.w	r0, #0
 80057ee:	f04f 0100 	mov.w	r1, #0
 80057f2:	0159      	lsls	r1, r3, #5
 80057f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057f8:	0150      	lsls	r0, r2, #5
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4621      	mov	r1, r4
 8005800:	1a51      	subs	r1, r2, r1
 8005802:	6139      	str	r1, [r7, #16]
 8005804:	4629      	mov	r1, r5
 8005806:	eb63 0301 	sbc.w	r3, r3, r1
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005818:	4659      	mov	r1, fp
 800581a:	018b      	lsls	r3, r1, #6
 800581c:	4651      	mov	r1, sl
 800581e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005822:	4651      	mov	r1, sl
 8005824:	018a      	lsls	r2, r1, #6
 8005826:	4651      	mov	r1, sl
 8005828:	ebb2 0801 	subs.w	r8, r2, r1
 800582c:	4659      	mov	r1, fp
 800582e:	eb63 0901 	sbc.w	r9, r3, r1
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800583e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005846:	4690      	mov	r8, r2
 8005848:	4699      	mov	r9, r3
 800584a:	4623      	mov	r3, r4
 800584c:	eb18 0303 	adds.w	r3, r8, r3
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	462b      	mov	r3, r5
 8005854:	eb49 0303 	adc.w	r3, r9, r3
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005866:	4629      	mov	r1, r5
 8005868:	024b      	lsls	r3, r1, #9
 800586a:	4621      	mov	r1, r4
 800586c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005870:	4621      	mov	r1, r4
 8005872:	024a      	lsls	r2, r1, #9
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587a:	2200      	movs	r2, #0
 800587c:	62bb      	str	r3, [r7, #40]	; 0x28
 800587e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005880:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005884:	f7fa fd0c 	bl	80002a0 <__aeabi_uldivmod>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4613      	mov	r3, r2
 800588e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005890:	e058      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005892:	4b38      	ldr	r3, [pc, #224]	; (8005974 <HAL_RCC_GetSysClockFreq+0x200>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	099b      	lsrs	r3, r3, #6
 8005898:	2200      	movs	r2, #0
 800589a:	4618      	mov	r0, r3
 800589c:	4611      	mov	r1, r2
 800589e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058a2:	623b      	str	r3, [r7, #32]
 80058a4:	2300      	movs	r3, #0
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
 80058a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058ac:	4642      	mov	r2, r8
 80058ae:	464b      	mov	r3, r9
 80058b0:	f04f 0000 	mov.w	r0, #0
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	0159      	lsls	r1, r3, #5
 80058ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058be:	0150      	lsls	r0, r2, #5
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4641      	mov	r1, r8
 80058c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80058ca:	4649      	mov	r1, r9
 80058cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058e4:	ebb2 040a 	subs.w	r4, r2, sl
 80058e8:	eb63 050b 	sbc.w	r5, r3, fp
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	00eb      	lsls	r3, r5, #3
 80058f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058fa:	00e2      	lsls	r2, r4, #3
 80058fc:	4614      	mov	r4, r2
 80058fe:	461d      	mov	r5, r3
 8005900:	4643      	mov	r3, r8
 8005902:	18e3      	adds	r3, r4, r3
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	464b      	mov	r3, r9
 8005908:	eb45 0303 	adc.w	r3, r5, r3
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800591a:	4629      	mov	r1, r5
 800591c:	028b      	lsls	r3, r1, #10
 800591e:	4621      	mov	r1, r4
 8005920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005924:	4621      	mov	r1, r4
 8005926:	028a      	lsls	r2, r1, #10
 8005928:	4610      	mov	r0, r2
 800592a:	4619      	mov	r1, r3
 800592c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592e:	2200      	movs	r2, #0
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	61fa      	str	r2, [r7, #28]
 8005934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005938:	f7fa fcb2 	bl	80002a0 <__aeabi_uldivmod>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4613      	mov	r3, r2
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <HAL_RCC_GetSysClockFreq+0x200>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	0c1b      	lsrs	r3, r3, #16
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	3301      	adds	r3, #1
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800595e:	e002      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <HAL_RCC_GetSysClockFreq+0x204>)
 8005962:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005968:	4618      	mov	r0, r3
 800596a:	3750      	adds	r7, #80	; 0x50
 800596c:	46bd      	mov	sp, r7
 800596e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005972:	bf00      	nop
 8005974:	40023800 	.word	0x40023800
 8005978:	00f42400 	.word	0x00f42400
 800597c:	007a1200 	.word	0x007a1200

08005980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005984:	4b03      	ldr	r3, [pc, #12]	; (8005994 <HAL_RCC_GetHCLKFreq+0x14>)
 8005986:	681b      	ldr	r3, [r3, #0]
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20000248 	.word	0x20000248

08005998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800599c:	f7ff fff0 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	0a9b      	lsrs	r3, r3, #10
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	4903      	ldr	r1, [pc, #12]	; (80059bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ae:	5ccb      	ldrb	r3, [r1, r3]
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40023800 	.word	0x40023800
 80059bc:	080097e8 	.word	0x080097e8

080059c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059c4:	f7ff ffdc 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	0b5b      	lsrs	r3, r3, #13
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4903      	ldr	r1, [pc, #12]	; (80059e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40023800 	.word	0x40023800
 80059e4:	080097e8 	.word	0x080097e8

080059e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d105      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d075      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a1c:	4b91      	ldr	r3, [pc, #580]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a22:	f7fc fc43 	bl	80022ac <HAL_GetTick>
 8005a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a2a:	f7fc fc3f 	bl	80022ac <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e189      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a3c:	4b8a      	ldr	r3, [pc, #552]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f0      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	019a      	lsls	r2, r3, #6
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	071b      	lsls	r3, r3, #28
 8005a60:	4981      	ldr	r1, [pc, #516]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01f      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a74:	4b7c      	ldr	r3, [pc, #496]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7a:	0f1b      	lsrs	r3, r3, #28
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	019a      	lsls	r2, r3, #6
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	071b      	lsls	r3, r3, #28
 8005a94:	4974      	ldr	r1, [pc, #464]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a9c:	4b72      	ldr	r3, [pc, #456]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa2:	f023 021f 	bic.w	r2, r3, #31
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	496e      	ldr	r1, [pc, #440]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	019a      	lsls	r2, r3, #6
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	071b      	lsls	r3, r3, #28
 8005ad4:	4964      	ldr	r1, [pc, #400]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005adc:	4b61      	ldr	r3, [pc, #388]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae2:	f7fc fbe3 	bl	80022ac <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005aea:	f7fc fbdf 	bl	80022ac <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e129      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005afc:	4b5a      	ldr	r3, [pc, #360]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d079      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b20:	4b52      	ldr	r3, [pc, #328]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b26:	f7fc fbc1 	bl	80022ac <HAL_GetTick>
 8005b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b2e:	f7fc fbbd 	bl	80022ac <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e107      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b40:	4b49      	ldr	r3, [pc, #292]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b4c:	d0ef      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d020      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b5a:	4b43      	ldr	r3, [pc, #268]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b60:	0f1b      	lsrs	r3, r3, #28
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	019a      	lsls	r2, r3, #6
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	061b      	lsls	r3, r3, #24
 8005b74:	431a      	orrs	r2, r3
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	071b      	lsls	r3, r3, #28
 8005b7a:	493b      	ldr	r1, [pc, #236]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b82:	4b39      	ldr	r3, [pc, #228]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	4934      	ldr	r1, [pc, #208]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01e      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ba8:	4b2f      	ldr	r3, [pc, #188]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bae:	0e1b      	lsrs	r3, r3, #24
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	019a      	lsls	r2, r3, #6
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	061b      	lsls	r3, r3, #24
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	071b      	lsls	r3, r3, #28
 8005bc8:	4927      	ldr	r1, [pc, #156]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bd0:	4b25      	ldr	r3, [pc, #148]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	4922      	ldr	r1, [pc, #136]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005be6:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bec:	f7fc fb5e 	bl	80022ac <HAL_GetTick>
 8005bf0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005bf4:	f7fc fb5a 	bl	80022ac <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e0a4      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c06:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c12:	d1ef      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 808b 	beq.w	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	4a0f      	ldr	r2, [pc, #60]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c30:	6413      	str	r3, [r2, #64]	; 0x40
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a0b      	ldr	r2, [pc, #44]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c4a:	f7fc fb2f 	bl	80022ac <HAL_GetTick>
 8005c4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c50:	e010      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c52:	f7fc fb2b 	bl	80022ac <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d909      	bls.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e075      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005c64:	42470068 	.word	0x42470068
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	42470070 	.word	0x42470070
 8005c70:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c74:	4b38      	ldr	r3, [pc, #224]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0e8      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c80:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d02f      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d028      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c9e:	4b2f      	ldr	r3, [pc, #188]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ca8:	4b2d      	ldr	r3, [pc, #180]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cae:	4b2c      	ldr	r3, [pc, #176]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cb4:	4a29      	ldr	r2, [pc, #164]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cba:	4b28      	ldr	r3, [pc, #160]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d114      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cc6:	f7fc faf1 	bl	80022ac <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ccc:	e00a      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cce:	f7fc faed 	bl	80022ac <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e035      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce4:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0ee      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cfc:	d10d      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005cfe:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d12:	4912      	ldr	r1, [pc, #72]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	608b      	str	r3, [r1, #8]
 8005d18:	e005      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	4a0f      	ldr	r2, [pc, #60]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d24:	6093      	str	r3, [r2, #8]
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d32:	490a      	ldr	r1, [pc, #40]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005d4c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40007000 	.word	0x40007000
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	42470e40 	.word	0x42470e40
 8005d64:	424711e0 	.word	0x424711e0

08005d68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e066      	b.n	8005e4c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	7f5b      	ldrb	r3, [r3, #29]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fc f816 	bl	8001dc0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	22ca      	movs	r2, #202	; 0xca
 8005da0:	625a      	str	r2, [r3, #36]	; 0x24
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2253      	movs	r2, #83	; 0x53
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fd88 	bl	80068c0 <RTC_EnterInitMode>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12c      	bne.n	8005e14 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dcc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6899      	ldr	r1, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	68d2      	ldr	r2, [r2, #12]
 8005df4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6919      	ldr	r1, [r3, #16]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	041a      	lsls	r2, r3, #16
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fd8f 	bl	800692e <RTC_ExitInitMode>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d113      	bne.n	8005e42 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e28:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	22ff      	movs	r2, #255	; 0xff
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e54:	b590      	push	{r4, r7, lr}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	7f1b      	ldrb	r3, [r3, #28]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_RTC_SetTime+0x1c>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e087      	b.n	8005f80 <HAL_RTC_SetTime+0x12c>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d126      	bne.n	8005ed0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2200      	movs	r2, #0
 8005e94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fd6c 	bl	8006978 <RTC_ByteToBcd2>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fd65 	bl	8006978 <RTC_ByteToBcd2>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005eb2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	789b      	ldrb	r3, [r3, #2]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fd5d 	bl	8006978 <RTC_ByteToBcd2>
 8005ebe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ec0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e018      	b.n	8005f02 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ef0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ef6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	78db      	ldrb	r3, [r3, #3]
 8005efc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	22ca      	movs	r2, #202	; 0xca
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2253      	movs	r2, #83	; 0x53
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fcd4 	bl	80068c0 <RTC_EnterInitMode>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f1c:	7cfb      	ldrb	r3, [r7, #19]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d120      	bne.n	8005f64 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f2c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f30:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6899      	ldr	r1, [r3, #8]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fce7 	bl	800692e <RTC_ExitInitMode>
 8005f60:	4603      	mov	r3, r0
 8005f62:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005f64:	7cfb      	ldrb	r3, [r7, #19]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d102      	bne.n	8005f70 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	22ff      	movs	r2, #255	; 0xff
 8005f76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	771a      	strb	r2, [r3, #28]

  return status;
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd90      	pop	{r4, r7, pc}

08005f88 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	0d9b      	lsrs	r3, r3, #22
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11a      	bne.n	800603a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fcd2 	bl	80069b2 <RTC_Bcd2ToByte>
 800600e:	4603      	mov	r3, r0
 8006010:	461a      	mov	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fcc9 	bl	80069b2 <RTC_Bcd2ToByte>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	789b      	ldrb	r3, [r3, #2]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fcc0 	bl	80069b2 <RTC_Bcd2ToByte>
 8006032:	4603      	mov	r3, r0
 8006034:	461a      	mov	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006044:	b590      	push	{r4, r7, lr}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	7f1b      	ldrb	r3, [r3, #28]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_RTC_SetDate+0x1c>
 800605c:	2302      	movs	r3, #2
 800605e:	e071      	b.n	8006144 <HAL_RTC_SetDate+0x100>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2202      	movs	r2, #2
 800606a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10e      	bne.n	8006090 <HAL_RTC_SetDate+0x4c>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	785b      	ldrb	r3, [r3, #1]
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	f023 0310 	bic.w	r3, r3, #16
 8006086:	b2db      	uxtb	r3, r3
 8006088:	330a      	adds	r3, #10
 800608a:	b2da      	uxtb	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d11c      	bne.n	80060d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	78db      	ldrb	r3, [r3, #3]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fc6c 	bl	8006978 <RTC_ByteToBcd2>
 80060a0:	4603      	mov	r3, r0
 80060a2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fc65 	bl	8006978 <RTC_ByteToBcd2>
 80060ae:	4603      	mov	r3, r0
 80060b0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060b2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	789b      	ldrb	r3, [r3, #2]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fc5d 	bl	8006978 <RTC_ByteToBcd2>
 80060be:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80060c0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	e00e      	b.n	80060ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	78db      	ldrb	r3, [r3, #3]
 80060d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060dc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	22ca      	movs	r2, #202	; 0xca
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2253      	movs	r2, #83	; 0x53
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fbde 	bl	80068c0 <RTC_EnterInitMode>
 8006104:	4603      	mov	r3, r0
 8006106:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10c      	bne.n	8006128 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006118:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800611c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fc05 	bl	800692e <RTC_ExitInitMode>
 8006124:	4603      	mov	r3, r0
 8006126:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006128:	7cfb      	ldrb	r3, [r7, #19]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	771a      	strb	r2, [r3, #28]

  return status;
 8006142:	7cfb      	ldrb	r3, [r7, #19]
}
 8006144:	4618      	mov	r0, r3
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	bd90      	pop	{r4, r7, pc}

0800614c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006166:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800616a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	0c1b      	lsrs	r3, r3, #16
 8006170:	b2da      	uxtb	r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	0a1b      	lsrs	r3, r3, #8
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	b2da      	uxtb	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800618e:	b2da      	uxtb	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	0b5b      	lsrs	r3, r3, #13
 8006198:	b2db      	uxtb	r3, r3
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d11a      	bne.n	80061e0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	78db      	ldrb	r3, [r3, #3]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fbff 	bl	80069b2 <RTC_Bcd2ToByte>
 80061b4:	4603      	mov	r3, r0
 80061b6:	461a      	mov	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fbf6 	bl	80069b2 <RTC_Bcd2ToByte>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	789b      	ldrb	r3, [r3, #2]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fbed 	bl	80069b2 <RTC_Bcd2ToByte>
 80061d8:	4603      	mov	r3, r0
 80061da:	461a      	mov	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80061ea:	b590      	push	{r4, r7, lr}
 80061ec:	b089      	sub	sp, #36	; 0x24
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	7f1b      	ldrb	r3, [r3, #28]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_RTC_SetAlarm+0x24>
 800620a:	2302      	movs	r3, #2
 800620c:	e113      	b.n	8006436 <HAL_RTC_SetAlarm+0x24c>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2202      	movs	r2, #2
 8006218:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d137      	bne.n	8006290 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2200      	movs	r2, #0
 8006232:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fb9d 	bl	8006978 <RTC_ByteToBcd2>
 800623e:	4603      	mov	r3, r0
 8006240:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fb96 	bl	8006978 <RTC_ByteToBcd2>
 800624c:	4603      	mov	r3, r0
 800624e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006250:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	789b      	ldrb	r3, [r3, #2]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fb8e 	bl	8006978 <RTC_ByteToBcd2>
 800625c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800625e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	78db      	ldrb	r3, [r3, #3]
 8006266:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006268:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fb80 	bl	8006978 <RTC_ByteToBcd2>
 8006278:	4603      	mov	r3, r0
 800627a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800627c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006284:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800628a:	4313      	orrs	r3, r2
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	e023      	b.n	80062d8 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2200      	movs	r2, #0
 80062a2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80062b0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80062b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	78db      	ldrb	r3, [r3, #3]
 80062bc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80062be:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062c6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80062c8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80062ce:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	22ca      	movs	r2, #202	; 0xca
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2253      	movs	r2, #83	; 0x53
 80062f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fc:	d148      	bne.n	8006390 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800630c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800631c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	b2da      	uxtb	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800632e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006330:	f7fb ffbc 	bl	80022ac <HAL_GetTick>
 8006334:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006336:	e013      	b.n	8006360 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006338:	f7fb ffb8 	bl	80022ac <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006346:	d90b      	bls.n	8006360 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	22ff      	movs	r2, #255	; 0xff
 800634e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2203      	movs	r2, #3
 8006354:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e06a      	b.n	8006436 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0e4      	beq.n	8006338 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800638c:	609a      	str	r2, [r3, #8]
 800638e:	e047      	b.n	8006420 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800639e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ae:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f462 7220 	orn	r2, r2, #640	; 0x280
 80063c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063c2:	f7fb ff73 	bl	80022ac <HAL_GetTick>
 80063c6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80063c8:	e013      	b.n	80063f2 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063ca:	f7fb ff6f 	bl	80022ac <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d8:	d90b      	bls.n	80063f2 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	22ff      	movs	r2, #255	; 0xff
 80063e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2203      	movs	r2, #3
 80063e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e021      	b.n	8006436 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0e4      	beq.n	80063ca <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	22ff      	movs	r2, #255	; 0xff
 8006426:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3724      	adds	r7, #36	; 0x24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd90      	pop	{r4, r7, pc}
	...

08006440 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006440:	b590      	push	{r4, r7, lr}
 8006442:	b089      	sub	sp, #36	; 0x24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800644c:	4b9a      	ldr	r3, [pc, #616]	; (80066b8 <HAL_RTC_SetAlarm_IT+0x278>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a9a      	ldr	r2, [pc, #616]	; (80066bc <HAL_RTC_SetAlarm_IT+0x27c>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	0adb      	lsrs	r3, r3, #11
 8006458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800645c:	fb02 f303 	mul.w	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	7f1b      	ldrb	r3, [r3, #28]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_RTC_SetAlarm_IT+0x36>
 8006472:	2302      	movs	r3, #2
 8006474:	e11c      	b.n	80066b0 <HAL_RTC_SetAlarm_IT+0x270>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2202      	movs	r2, #2
 8006480:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d137      	bne.n	80064f8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2200      	movs	r2, #0
 800649a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fa69 	bl	8006978 <RTC_ByteToBcd2>
 80064a6:	4603      	mov	r3, r0
 80064a8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fa62 	bl	8006978 <RTC_ByteToBcd2>
 80064b4:	4603      	mov	r3, r0
 80064b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80064b8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	789b      	ldrb	r3, [r3, #2]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fa5a 	bl	8006978 <RTC_ByteToBcd2>
 80064c4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80064c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	78db      	ldrb	r3, [r3, #3]
 80064ce:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80064d0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fa4c 	bl	8006978 <RTC_ByteToBcd2>
 80064e0:	4603      	mov	r3, r0
 80064e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80064e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80064ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80064f2:	4313      	orrs	r3, r2
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	e023      	b.n	8006540 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2200      	movs	r2, #0
 800650a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006518:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800651e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	78db      	ldrb	r3, [r3, #3]
 8006524:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006526:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800652e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006530:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006536:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800653c:	4313      	orrs	r3, r2
 800653e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006548:	4313      	orrs	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	22ca      	movs	r2, #202	; 0xca
 8006552:	625a      	str	r2, [r3, #36]	; 0x24
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2253      	movs	r2, #83	; 0x53
 800655a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006564:	d141      	bne.n	80065ea <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006574:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006586:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1e5a      	subs	r2, r3, #1
 800658c:	617a      	str	r2, [r7, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	22ff      	movs	r2, #255	; 0xff
 8006598:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2203      	movs	r2, #3
 800659e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e082      	b.n	80066b0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0e7      	beq.n	8006588 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065d6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065e6:	609a      	str	r2, [r3, #8]
 80065e8:	e04b      	b.n	8006682 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065f8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f462 7220 	orn	r2, r2, #640	; 0x280
 800660a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800660c:	4b2a      	ldr	r3, [pc, #168]	; (80066b8 <HAL_RTC_SetAlarm_IT+0x278>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <HAL_RTC_SetAlarm_IT+0x27c>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	0adb      	lsrs	r3, r3, #11
 8006618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800661c:	fb02 f303 	mul.w	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	1e5a      	subs	r2, r3, #1
 8006626:	617a      	str	r2, [r7, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	22ff      	movs	r2, #255	; 0xff
 8006632:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2203      	movs	r2, #3
 8006638:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e035      	b.n	80066b0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0e7      	beq.n	8006622 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006670:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006680:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006682:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a0e      	ldr	r2, [pc, #56]	; (80066c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8006688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800668c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800668e:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	4a0b      	ldr	r2, [pc, #44]	; (80066c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8006694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006698:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	22ff      	movs	r2, #255	; 0xff
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3724      	adds	r7, #36	; 0x24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd90      	pop	{r4, r7, pc}
 80066b8:	20000248 	.word	0x20000248
 80066bc:	10624dd3 	.word	0x10624dd3
 80066c0:	40013c00 	.word	0x40013c00

080066c4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e0:	d10e      	bne.n	8006700 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e00d      	b.n	800671c <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006706:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800671a:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	0c1b      	lsrs	r3, r3, #16
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006726:	b2da      	uxtb	r2, r3
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006744:	b2da      	uxtb	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	0d9b      	lsrs	r3, r3, #22
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	0e1b      	lsrs	r3, r3, #24
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800676a:	b2da      	uxtb	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d125      	bne.n	80067d8 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f90e 	bl	80069b2 <RTC_Bcd2ToByte>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 f905 	bl	80069b2 <RTC_Bcd2ToByte>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	789b      	ldrb	r3, [r3, #2]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 f8fc 	bl	80069b2 <RTC_Bcd2ToByte>
 80067ba:	4603      	mov	r3, r0
 80067bc:	461a      	mov	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 f8f2 	bl	80069b2 <RTC_Bcd2ToByte>
 80067ce:	4603      	mov	r3, r0
 80067d0:	461a      	mov	r2, r3
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d012      	beq.n	8006820 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fb f85b 	bl	80018c4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800681e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d012      	beq.n	8006854 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f8d4 	bl	80069ea <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006852:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <HAL_RTC_AlarmIRQHandler+0x88>)
 8006856:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800685a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	775a      	strb	r2, [r3, #29]
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40013c00 	.word	0x40013c00

08006870 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800688a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800688c:	f7fb fd0e 	bl	80022ac <HAL_GetTick>
 8006890:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006892:	e009      	b.n	80068a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006894:	f7fb fd0a 	bl	80022ac <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068a2:	d901      	bls.n	80068a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e007      	b.n	80068b8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0ee      	beq.n	8006894 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d122      	bne.n	8006924 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068ee:	f7fb fcdd 	bl	80022ac <HAL_GetTick>
 80068f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80068f4:	e00c      	b.n	8006910 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068f6:	f7fb fcd9 	bl	80022ac <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006904:	d904      	bls.n	8006910 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2204      	movs	r2, #4
 800690a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <RTC_EnterInitMode+0x64>
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d1e8      	bne.n	80068f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006948:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ff89 	bl	8006870 <HAL_RTC_WaitForSynchro>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d004      	beq.n	800696e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2204      	movs	r2, #4
 8006968:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006986:	e005      	b.n	8006994 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	3301      	adds	r3, #1
 800698c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	3b0a      	subs	r3, #10
 8006992:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	2b09      	cmp	r3, #9
 8006998:	d8f6      	bhi.n	8006988 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	b2db      	uxtb	r3, r3
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	4603      	mov	r3, r0
 80069ba:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	091b      	lsrs	r3, r3, #4
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	0092      	lsls	r2, r2, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	4413      	add	r3, r2
 80069dc:	b2db      	uxtb	r3, r3
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e041      	b.n	8006a94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fb f9fd 	bl	8001e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f000 fd0d 	bl	800745c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d001      	beq.n	8006ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e04e      	b.n	8006b52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d022      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ade:	d01d      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d018      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <HAL_TIM_Base_Start_IT+0xcc>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d013      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00e      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1b      	ldr	r2, [pc, #108]	; (8006b70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d009      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d004      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d111      	bne.n	8006b40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b06      	cmp	r3, #6
 8006b2c:	d010      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3e:	e007      	b.n	8006b50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40000c00 	.word	0x40000c00
 8006b70:	40010400 	.word	0x40010400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40001800 	.word	0x40001800

08006b7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10f      	bne.n	8006bc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	f240 4344 	movw	r3, #1092	; 0x444
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d107      	bne.n	8006bc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0201 	bic.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e041      	b.n	8006c70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fb f92f 	bl	8001e64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f000 fc1f 	bl	800745c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d109      	bne.n	8006c9c <HAL_TIM_PWM_Start+0x24>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	bf14      	ite	ne
 8006c94:	2301      	movne	r3, #1
 8006c96:	2300      	moveq	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	e022      	b.n	8006ce2 <HAL_TIM_PWM_Start+0x6a>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d109      	bne.n	8006cb6 <HAL_TIM_PWM_Start+0x3e>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	bf14      	ite	ne
 8006cae:	2301      	movne	r3, #1
 8006cb0:	2300      	moveq	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	e015      	b.n	8006ce2 <HAL_TIM_PWM_Start+0x6a>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d109      	bne.n	8006cd0 <HAL_TIM_PWM_Start+0x58>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	bf14      	ite	ne
 8006cc8:	2301      	movne	r3, #1
 8006cca:	2300      	moveq	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	e008      	b.n	8006ce2 <HAL_TIM_PWM_Start+0x6a>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	bf14      	ite	ne
 8006cdc:	2301      	movne	r3, #1
 8006cde:	2300      	moveq	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e07c      	b.n	8006de4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <HAL_TIM_PWM_Start+0x82>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf8:	e013      	b.n	8006d22 <HAL_TIM_PWM_Start+0xaa>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d104      	bne.n	8006d0a <HAL_TIM_PWM_Start+0x92>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d08:	e00b      	b.n	8006d22 <HAL_TIM_PWM_Start+0xaa>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d104      	bne.n	8006d1a <HAL_TIM_PWM_Start+0xa2>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d18:	e003      	b.n	8006d22 <HAL_TIM_PWM_Start+0xaa>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2201      	movs	r2, #1
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fe80 	bl	8007a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a2d      	ldr	r2, [pc, #180]	; (8006dec <HAL_TIM_PWM_Start+0x174>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <HAL_TIM_PWM_Start+0xcc>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a2c      	ldr	r2, [pc, #176]	; (8006df0 <HAL_TIM_PWM_Start+0x178>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d101      	bne.n	8006d48 <HAL_TIM_PWM_Start+0xd0>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <HAL_TIM_PWM_Start+0xd2>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a22      	ldr	r2, [pc, #136]	; (8006dec <HAL_TIM_PWM_Start+0x174>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d022      	beq.n	8006dae <HAL_TIM_PWM_Start+0x136>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d70:	d01d      	beq.n	8006dae <HAL_TIM_PWM_Start+0x136>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1f      	ldr	r2, [pc, #124]	; (8006df4 <HAL_TIM_PWM_Start+0x17c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d018      	beq.n	8006dae <HAL_TIM_PWM_Start+0x136>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <HAL_TIM_PWM_Start+0x180>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d013      	beq.n	8006dae <HAL_TIM_PWM_Start+0x136>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	; (8006dfc <HAL_TIM_PWM_Start+0x184>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00e      	beq.n	8006dae <HAL_TIM_PWM_Start+0x136>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a16      	ldr	r2, [pc, #88]	; (8006df0 <HAL_TIM_PWM_Start+0x178>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d009      	beq.n	8006dae <HAL_TIM_PWM_Start+0x136>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a18      	ldr	r2, [pc, #96]	; (8006e00 <HAL_TIM_PWM_Start+0x188>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d004      	beq.n	8006dae <HAL_TIM_PWM_Start+0x136>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a16      	ldr	r2, [pc, #88]	; (8006e04 <HAL_TIM_PWM_Start+0x18c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d111      	bne.n	8006dd2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b06      	cmp	r3, #6
 8006dbe:	d010      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd0:	e007      	b.n	8006de2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f042 0201 	orr.w	r2, r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40010000 	.word	0x40010000
 8006df0:	40010400 	.word	0x40010400
 8006df4:	40000400 	.word	0x40000400
 8006df8:	40000800 	.word	0x40000800
 8006dfc:	40000c00 	.word	0x40000c00
 8006e00:	40014000 	.word	0x40014000
 8006e04:	40001800 	.word	0x40001800

08006e08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2200      	movs	r2, #0
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fe08 	bl	8007a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a2e      	ldr	r2, [pc, #184]	; (8006ee0 <HAL_TIM_PWM_Stop+0xd8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d004      	beq.n	8006e34 <HAL_TIM_PWM_Stop+0x2c>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ee4 <HAL_TIM_PWM_Stop+0xdc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d101      	bne.n	8006e38 <HAL_TIM_PWM_Stop+0x30>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <HAL_TIM_PWM_Stop+0x32>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d017      	beq.n	8006e6e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10f      	bne.n	8006e6e <HAL_TIM_PWM_Stop+0x66>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6a1a      	ldr	r2, [r3, #32]
 8006e54:	f240 4344 	movw	r3, #1092	; 0x444
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d107      	bne.n	8006e6e <HAL_TIM_PWM_Stop+0x66>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6a1a      	ldr	r2, [r3, #32]
 8006e74:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10f      	bne.n	8006e9e <HAL_TIM_PWM_Stop+0x96>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6a1a      	ldr	r2, [r3, #32]
 8006e84:	f240 4344 	movw	r3, #1092	; 0x444
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d107      	bne.n	8006e9e <HAL_TIM_PWM_Stop+0x96>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0201 	bic.w	r2, r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_TIM_PWM_Stop+0xa6>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eac:	e013      	b.n	8006ed6 <HAL_TIM_PWM_Stop+0xce>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d104      	bne.n	8006ebe <HAL_TIM_PWM_Stop+0xb6>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ebc:	e00b      	b.n	8006ed6 <HAL_TIM_PWM_Stop+0xce>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d104      	bne.n	8006ece <HAL_TIM_PWM_Stop+0xc6>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ecc:	e003      	b.n	8006ed6 <HAL_TIM_PWM_Stop+0xce>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40010400 	.word	0x40010400

08006ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d122      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d11b      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f06f 0202 	mvn.w	r2, #2
 8006f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa77 	bl	800741e <HAL_TIM_IC_CaptureCallback>
 8006f30:	e005      	b.n	8006f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa69 	bl	800740a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fa7a 	bl	8007432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d122      	bne.n	8006f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d11b      	bne.n	8006f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0204 	mvn.w	r2, #4
 8006f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa4d 	bl	800741e <HAL_TIM_IC_CaptureCallback>
 8006f84:	e005      	b.n	8006f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa3f 	bl	800740a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fa50 	bl	8007432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d122      	bne.n	8006fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d11b      	bne.n	8006fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0208 	mvn.w	r2, #8
 8006fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa23 	bl	800741e <HAL_TIM_IC_CaptureCallback>
 8006fd8:	e005      	b.n	8006fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa15 	bl	800740a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa26 	bl	8007432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0310 	and.w	r3, r3, #16
 8006ff6:	2b10      	cmp	r3, #16
 8006ff8:	d122      	bne.n	8007040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b10      	cmp	r3, #16
 8007006:	d11b      	bne.n	8007040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0210 	mvn.w	r2, #16
 8007010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2208      	movs	r2, #8
 8007016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f9f9 	bl	800741e <HAL_TIM_IC_CaptureCallback>
 800702c:	e005      	b.n	800703a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f9eb 	bl	800740a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f9fc 	bl	8007432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b01      	cmp	r3, #1
 800704c:	d10e      	bne.n	800706c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b01      	cmp	r3, #1
 800705a:	d107      	bne.n	800706c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0201 	mvn.w	r2, #1
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fa fc58 	bl	800191c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b80      	cmp	r3, #128	; 0x80
 8007078:	d10e      	bne.n	8007098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007084:	2b80      	cmp	r3, #128	; 0x80
 8007086:	d107      	bne.n	8007098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fd78 	bl	8007b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d10e      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b40      	cmp	r3, #64	; 0x40
 80070b2:	d107      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9c1 	bl	8007446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d10e      	bne.n	80070f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d107      	bne.n	80070f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0220 	mvn.w	r2, #32
 80070e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fd42 	bl	8007b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007112:	2302      	movs	r3, #2
 8007114:	e0ae      	b.n	8007274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b0c      	cmp	r3, #12
 8007122:	f200 809f 	bhi.w	8007264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007161 	.word	0x08007161
 8007130:	08007265 	.word	0x08007265
 8007134:	08007265 	.word	0x08007265
 8007138:	08007265 	.word	0x08007265
 800713c:	080071a1 	.word	0x080071a1
 8007140:	08007265 	.word	0x08007265
 8007144:	08007265 	.word	0x08007265
 8007148:	08007265 	.word	0x08007265
 800714c:	080071e3 	.word	0x080071e3
 8007150:	08007265 	.word	0x08007265
 8007154:	08007265 	.word	0x08007265
 8007158:	08007265 	.word	0x08007265
 800715c:	08007223 	.word	0x08007223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fa18 	bl	800759c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0208 	orr.w	r2, r2, #8
 800717a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0204 	bic.w	r2, r2, #4
 800718a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6999      	ldr	r1, [r3, #24]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	619a      	str	r2, [r3, #24]
      break;
 800719e:	e064      	b.n	800726a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fa68 	bl	800767c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	021a      	lsls	r2, r3, #8
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	619a      	str	r2, [r3, #24]
      break;
 80071e0:	e043      	b.n	800726a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fabd 	bl	8007768 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0208 	orr.w	r2, r2, #8
 80071fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0204 	bic.w	r2, r2, #4
 800720c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69d9      	ldr	r1, [r3, #28]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	61da      	str	r2, [r3, #28]
      break;
 8007220:	e023      	b.n	800726a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fb11 	bl	8007850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800723c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69da      	ldr	r2, [r3, #28]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69d9      	ldr	r1, [r3, #28]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	021a      	lsls	r2, r3, #8
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	61da      	str	r2, [r3, #28]
      break;
 8007262:	e002      	b.n	800726a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
      break;
 8007268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007272:	7dfb      	ldrb	r3, [r7, #23]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_TIM_ConfigClockSource+0x1c>
 8007294:	2302      	movs	r3, #2
 8007296:	e0b4      	b.n	8007402 <HAL_TIM_ConfigClockSource+0x186>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d0:	d03e      	beq.n	8007350 <HAL_TIM_ConfigClockSource+0xd4>
 80072d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d6:	f200 8087 	bhi.w	80073e8 <HAL_TIM_ConfigClockSource+0x16c>
 80072da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072de:	f000 8086 	beq.w	80073ee <HAL_TIM_ConfigClockSource+0x172>
 80072e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e6:	d87f      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x16c>
 80072e8:	2b70      	cmp	r3, #112	; 0x70
 80072ea:	d01a      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0xa6>
 80072ec:	2b70      	cmp	r3, #112	; 0x70
 80072ee:	d87b      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f0:	2b60      	cmp	r3, #96	; 0x60
 80072f2:	d050      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x11a>
 80072f4:	2b60      	cmp	r3, #96	; 0x60
 80072f6:	d877      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f8:	2b50      	cmp	r3, #80	; 0x50
 80072fa:	d03c      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0xfa>
 80072fc:	2b50      	cmp	r3, #80	; 0x50
 80072fe:	d873      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007300:	2b40      	cmp	r3, #64	; 0x40
 8007302:	d058      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d86f      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b30      	cmp	r3, #48	; 0x30
 800730a:	d064      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x15a>
 800730c:	2b30      	cmp	r3, #48	; 0x30
 800730e:	d86b      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007310:	2b20      	cmp	r3, #32
 8007312:	d060      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007314:	2b20      	cmp	r3, #32
 8007316:	d867      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d05c      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x15a>
 800731c:	2b10      	cmp	r3, #16
 800731e:	d05a      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007320:	e062      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6899      	ldr	r1, [r3, #8]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f000 fb5d 	bl	80079f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	609a      	str	r2, [r3, #8]
      break;
 800734e:	e04f      	b.n	80073f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	6899      	ldr	r1, [r3, #8]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f000 fb46 	bl	80079f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007372:	609a      	str	r2, [r3, #8]
      break;
 8007374:	e03c      	b.n	80073f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6859      	ldr	r1, [r3, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	461a      	mov	r2, r3
 8007384:	f000 faba 	bl	80078fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2150      	movs	r1, #80	; 0x50
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fb13 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 8007394:	e02c      	b.n	80073f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6859      	ldr	r1, [r3, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f000 fad9 	bl	800795a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2160      	movs	r1, #96	; 0x60
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fb03 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 80073b4:	e01c      	b.n	80073f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	6859      	ldr	r1, [r3, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f000 fa9a 	bl	80078fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2140      	movs	r1, #64	; 0x40
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 faf3 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 80073d4:	e00c      	b.n	80073f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4619      	mov	r1, r3
 80073e0:	4610      	mov	r0, r2
 80073e2:	f000 faea 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 80073e6:	e003      	b.n	80073f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	73fb      	strb	r3, [r7, #15]
      break;
 80073ec:	e000      	b.n	80073f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
	...

0800745c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a40      	ldr	r2, [pc, #256]	; (8007570 <TIM_Base_SetConfig+0x114>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800747a:	d00f      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a3d      	ldr	r2, [pc, #244]	; (8007574 <TIM_Base_SetConfig+0x118>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00b      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a3c      	ldr	r2, [pc, #240]	; (8007578 <TIM_Base_SetConfig+0x11c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d007      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a3b      	ldr	r2, [pc, #236]	; (800757c <TIM_Base_SetConfig+0x120>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a3a      	ldr	r2, [pc, #232]	; (8007580 <TIM_Base_SetConfig+0x124>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d108      	bne.n	80074ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2f      	ldr	r2, [pc, #188]	; (8007570 <TIM_Base_SetConfig+0x114>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d02b      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074bc:	d027      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2c      	ldr	r2, [pc, #176]	; (8007574 <TIM_Base_SetConfig+0x118>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d023      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a2b      	ldr	r2, [pc, #172]	; (8007578 <TIM_Base_SetConfig+0x11c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01f      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a2a      	ldr	r2, [pc, #168]	; (800757c <TIM_Base_SetConfig+0x120>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01b      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a29      	ldr	r2, [pc, #164]	; (8007580 <TIM_Base_SetConfig+0x124>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d017      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a28      	ldr	r2, [pc, #160]	; (8007584 <TIM_Base_SetConfig+0x128>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a27      	ldr	r2, [pc, #156]	; (8007588 <TIM_Base_SetConfig+0x12c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00f      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a26      	ldr	r2, [pc, #152]	; (800758c <TIM_Base_SetConfig+0x130>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a25      	ldr	r2, [pc, #148]	; (8007590 <TIM_Base_SetConfig+0x134>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a24      	ldr	r2, [pc, #144]	; (8007594 <TIM_Base_SetConfig+0x138>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a23      	ldr	r2, [pc, #140]	; (8007598 <TIM_Base_SetConfig+0x13c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d108      	bne.n	8007520 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a0a      	ldr	r2, [pc, #40]	; (8007570 <TIM_Base_SetConfig+0x114>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <TIM_Base_SetConfig+0xf8>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a0c      	ldr	r2, [pc, #48]	; (8007580 <TIM_Base_SetConfig+0x124>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d103      	bne.n	800755c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	615a      	str	r2, [r3, #20]
}
 8007562:	bf00      	nop
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	40010000 	.word	0x40010000
 8007574:	40000400 	.word	0x40000400
 8007578:	40000800 	.word	0x40000800
 800757c:	40000c00 	.word	0x40000c00
 8007580:	40010400 	.word	0x40010400
 8007584:	40014000 	.word	0x40014000
 8007588:	40014400 	.word	0x40014400
 800758c:	40014800 	.word	0x40014800
 8007590:	40001800 	.word	0x40001800
 8007594:	40001c00 	.word	0x40001c00
 8007598:	40002000 	.word	0x40002000

0800759c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	f023 0201 	bic.w	r2, r3, #1
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0302 	bic.w	r3, r3, #2
 80075e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a20      	ldr	r2, [pc, #128]	; (8007674 <TIM_OC1_SetConfig+0xd8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_OC1_SetConfig+0x64>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a1f      	ldr	r2, [pc, #124]	; (8007678 <TIM_OC1_SetConfig+0xdc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d10c      	bne.n	800761a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f023 0308 	bic.w	r3, r3, #8
 8007606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f023 0304 	bic.w	r3, r3, #4
 8007618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a15      	ldr	r2, [pc, #84]	; (8007674 <TIM_OC1_SetConfig+0xd8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d003      	beq.n	800762a <TIM_OC1_SetConfig+0x8e>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a14      	ldr	r2, [pc, #80]	; (8007678 <TIM_OC1_SetConfig+0xdc>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d111      	bne.n	800764e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	621a      	str	r2, [r3, #32]
}
 8007668:	bf00      	nop
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	40010000 	.word	0x40010000
 8007678:	40010400 	.word	0x40010400

0800767c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f023 0210 	bic.w	r2, r3, #16
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 0320 	bic.w	r3, r3, #32
 80076c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a22      	ldr	r2, [pc, #136]	; (8007760 <TIM_OC2_SetConfig+0xe4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d003      	beq.n	80076e4 <TIM_OC2_SetConfig+0x68>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a21      	ldr	r2, [pc, #132]	; (8007764 <TIM_OC2_SetConfig+0xe8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d10d      	bne.n	8007700 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a17      	ldr	r2, [pc, #92]	; (8007760 <TIM_OC2_SetConfig+0xe4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_OC2_SetConfig+0x94>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a16      	ldr	r2, [pc, #88]	; (8007764 <TIM_OC2_SetConfig+0xe8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d113      	bne.n	8007738 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800771e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	621a      	str	r2, [r3, #32]
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40010000 	.word	0x40010000
 8007764:	40010400 	.word	0x40010400

08007768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0303 	bic.w	r3, r3, #3
 800779e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a21      	ldr	r2, [pc, #132]	; (8007848 <TIM_OC3_SetConfig+0xe0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d003      	beq.n	80077ce <TIM_OC3_SetConfig+0x66>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a20      	ldr	r2, [pc, #128]	; (800784c <TIM_OC3_SetConfig+0xe4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d10d      	bne.n	80077ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a16      	ldr	r2, [pc, #88]	; (8007848 <TIM_OC3_SetConfig+0xe0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d003      	beq.n	80077fa <TIM_OC3_SetConfig+0x92>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a15      	ldr	r2, [pc, #84]	; (800784c <TIM_OC3_SetConfig+0xe4>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d113      	bne.n	8007822 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	621a      	str	r2, [r3, #32]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	40010000 	.word	0x40010000
 800784c:	40010400 	.word	0x40010400

08007850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800789a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	031b      	lsls	r3, r3, #12
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a12      	ldr	r2, [pc, #72]	; (80078f4 <TIM_OC4_SetConfig+0xa4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_OC4_SetConfig+0x68>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a11      	ldr	r2, [pc, #68]	; (80078f8 <TIM_OC4_SetConfig+0xa8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d109      	bne.n	80078cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	019b      	lsls	r3, r3, #6
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	621a      	str	r2, [r3, #32]
}
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40010400 	.word	0x40010400

080078fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f023 0201 	bic.w	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f023 030a 	bic.w	r3, r3, #10
 8007938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800795a:	b480      	push	{r7}
 800795c:	b087      	sub	sp, #28
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0210 	bic.w	r2, r3, #16
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007996:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	621a      	str	r2, [r3, #32]
}
 80079ae:	bf00      	nop
 80079b0:	371c      	adds	r7, #28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f043 0307 	orr.w	r3, r3, #7
 80079dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	609a      	str	r2, [r3, #8]
}
 80079e4:	bf00      	nop
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	021a      	lsls	r2, r3, #8
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	431a      	orrs	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	609a      	str	r2, [r3, #8]
}
 8007a24:	bf00      	nop
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f003 031f 	and.w	r3, r3, #31
 8007a42:	2201      	movs	r2, #1
 8007a44:	fa02 f303 	lsl.w	r3, r2, r3
 8007a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1a      	ldr	r2, [r3, #32]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	43db      	mvns	r3, r3
 8007a52:	401a      	ands	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a1a      	ldr	r2, [r3, #32]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	fa01 f303 	lsl.w	r3, r1, r3
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	621a      	str	r2, [r3, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
	...

08007a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e05a      	b.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a21      	ldr	r2, [pc, #132]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d022      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae0:	d01d      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1d      	ldr	r2, [pc, #116]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d018      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1b      	ldr	r2, [pc, #108]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d013      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a1a      	ldr	r2, [pc, #104]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00e      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d009      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a17      	ldr	r2, [pc, #92]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d004      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a15      	ldr	r2, [pc, #84]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d10c      	bne.n	8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40010400 	.word	0x40010400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40001800 	.word	0x40001800

08007b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e03f      	b.n	8007c2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7fa f9aa 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2224      	movs	r2, #36	; 0x24
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f929 	bl	8007e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695a      	ldr	r2, [r3, #20]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b08a      	sub	sp, #40	; 0x28
 8007c3a:	af02      	add	r7, sp, #8
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	d17c      	bne.n	8007d50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_UART_Transmit+0x2c>
 8007c5c:	88fb      	ldrh	r3, [r7, #6]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e075      	b.n	8007d52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_UART_Transmit+0x3e>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e06e      	b.n	8007d52 <HAL_UART_Transmit+0x11c>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2221      	movs	r2, #33	; 0x21
 8007c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c8a:	f7fa fb0f 	bl	80022ac <HAL_GetTick>
 8007c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	88fa      	ldrh	r2, [r7, #6]
 8007c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	88fa      	ldrh	r2, [r7, #6]
 8007c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca4:	d108      	bne.n	8007cb8 <HAL_UART_Transmit+0x82>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	e003      	b.n	8007cc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007cc8:	e02a      	b.n	8007d20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2180      	movs	r1, #128	; 0x80
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f840 	bl	8007d5a <UART_WaitOnFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e036      	b.n	8007d52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	3302      	adds	r3, #2
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	e007      	b.n	8007d12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	781a      	ldrb	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1cf      	bne.n	8007cca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2200      	movs	r2, #0
 8007d32:	2140      	movs	r1, #64	; 0x40
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 f810 	bl	8007d5a <UART_WaitOnFlagUntilTimeout>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e006      	b.n	8007d52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e000      	b.n	8007d52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d50:	2302      	movs	r3, #2
  }
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3720      	adds	r7, #32
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b090      	sub	sp, #64	; 0x40
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	603b      	str	r3, [r7, #0]
 8007d66:	4613      	mov	r3, r2
 8007d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6a:	e050      	b.n	8007e0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d72:	d04c      	beq.n	8007e0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d007      	beq.n	8007d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8007d7a:	f7fa fa97 	bl	80022ac <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d241      	bcs.n	8007e0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	330c      	adds	r3, #12
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	e853 3f00 	ldrex	r3, [r3]
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	330c      	adds	r3, #12
 8007da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007daa:	637a      	str	r2, [r7, #52]	; 0x34
 8007dac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e5      	bne.n	8007d8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3314      	adds	r3, #20
 8007dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f023 0301 	bic.w	r3, r3, #1
 8007dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3314      	adds	r3, #20
 8007ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dde:	623a      	str	r2, [r7, #32]
 8007de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	69f9      	ldr	r1, [r7, #28]
 8007de4:	6a3a      	ldr	r2, [r7, #32]
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e5      	bne.n	8007dbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e00f      	b.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4013      	ands	r3, r2
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	bf0c      	ite	eq
 8007e1e:	2301      	moveq	r3, #1
 8007e20:	2300      	movne	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d09f      	beq.n	8007d6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3740      	adds	r7, #64	; 0x40
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e3c:	b0c0      	sub	sp, #256	; 0x100
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e54:	68d9      	ldr	r1, [r3, #12]
 8007e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	ea40 0301 	orr.w	r3, r0, r1
 8007e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e90:	f021 010c 	bic.w	r1, r1, #12
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb2:	6999      	ldr	r1, [r3, #24]
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	ea40 0301 	orr.w	r3, r0, r1
 8007ebe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	4b8f      	ldr	r3, [pc, #572]	; (8008104 <UART_SetConfig+0x2cc>)
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d005      	beq.n	8007ed8 <UART_SetConfig+0xa0>
 8007ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b8d      	ldr	r3, [pc, #564]	; (8008108 <UART_SetConfig+0x2d0>)
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d104      	bne.n	8007ee2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ed8:	f7fd fd72 	bl	80059c0 <HAL_RCC_GetPCLK2Freq>
 8007edc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ee0:	e003      	b.n	8007eea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ee2:	f7fd fd59 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8007ee6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef4:	f040 810c 	bne.w	8008110 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	1891      	adds	r1, r2, r2
 8007f10:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f12:	415b      	adcs	r3, r3
 8007f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	eb12 0801 	adds.w	r8, r2, r1
 8007f20:	4629      	mov	r1, r5
 8007f22:	eb43 0901 	adc.w	r9, r3, r1
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	f04f 0300 	mov.w	r3, #0
 8007f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f3a:	4690      	mov	r8, r2
 8007f3c:	4699      	mov	r9, r3
 8007f3e:	4623      	mov	r3, r4
 8007f40:	eb18 0303 	adds.w	r3, r8, r3
 8007f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f48:	462b      	mov	r3, r5
 8007f4a:	eb49 0303 	adc.w	r3, r9, r3
 8007f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f66:	460b      	mov	r3, r1
 8007f68:	18db      	adds	r3, r3, r3
 8007f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	eb42 0303 	adc.w	r3, r2, r3
 8007f72:	657b      	str	r3, [r7, #84]	; 0x54
 8007f74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f7c:	f7f8 f990 	bl	80002a0 <__aeabi_uldivmod>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4b61      	ldr	r3, [pc, #388]	; (800810c <UART_SetConfig+0x2d4>)
 8007f86:	fba3 2302 	umull	r2, r3, r3, r2
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	011c      	lsls	r4, r3, #4
 8007f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	1891      	adds	r1, r2, r2
 8007fa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007fa8:	415b      	adcs	r3, r3
 8007faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	eb12 0a01 	adds.w	sl, r2, r1
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	eb43 0b01 	adc.w	fp, r3, r1
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fd0:	4692      	mov	sl, r2
 8007fd2:	469b      	mov	fp, r3
 8007fd4:	4643      	mov	r3, r8
 8007fd6:	eb1a 0303 	adds.w	r3, sl, r3
 8007fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fde:	464b      	mov	r3, r9
 8007fe0:	eb4b 0303 	adc.w	r3, fp, r3
 8007fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ff4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ff8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	18db      	adds	r3, r3, r3
 8008000:	643b      	str	r3, [r7, #64]	; 0x40
 8008002:	4613      	mov	r3, r2
 8008004:	eb42 0303 	adc.w	r3, r2, r3
 8008008:	647b      	str	r3, [r7, #68]	; 0x44
 800800a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800800e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008012:	f7f8 f945 	bl	80002a0 <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4611      	mov	r1, r2
 800801c:	4b3b      	ldr	r3, [pc, #236]	; (800810c <UART_SetConfig+0x2d4>)
 800801e:	fba3 2301 	umull	r2, r3, r3, r1
 8008022:	095b      	lsrs	r3, r3, #5
 8008024:	2264      	movs	r2, #100	; 0x64
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	1acb      	subs	r3, r1, r3
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008032:	4b36      	ldr	r3, [pc, #216]	; (800810c <UART_SetConfig+0x2d4>)
 8008034:	fba3 2302 	umull	r2, r3, r3, r2
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008040:	441c      	add	r4, r3
 8008042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008046:	2200      	movs	r2, #0
 8008048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800804c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008050:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008054:	4642      	mov	r2, r8
 8008056:	464b      	mov	r3, r9
 8008058:	1891      	adds	r1, r2, r2
 800805a:	63b9      	str	r1, [r7, #56]	; 0x38
 800805c:	415b      	adcs	r3, r3
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008064:	4641      	mov	r1, r8
 8008066:	1851      	adds	r1, r2, r1
 8008068:	6339      	str	r1, [r7, #48]	; 0x30
 800806a:	4649      	mov	r1, r9
 800806c:	414b      	adcs	r3, r1
 800806e:	637b      	str	r3, [r7, #52]	; 0x34
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800807c:	4659      	mov	r1, fp
 800807e:	00cb      	lsls	r3, r1, #3
 8008080:	4651      	mov	r1, sl
 8008082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008086:	4651      	mov	r1, sl
 8008088:	00ca      	lsls	r2, r1, #3
 800808a:	4610      	mov	r0, r2
 800808c:	4619      	mov	r1, r3
 800808e:	4603      	mov	r3, r0
 8008090:	4642      	mov	r2, r8
 8008092:	189b      	adds	r3, r3, r2
 8008094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008098:	464b      	mov	r3, r9
 800809a:	460a      	mov	r2, r1
 800809c:	eb42 0303 	adc.w	r3, r2, r3
 80080a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80080b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80080b8:	460b      	mov	r3, r1
 80080ba:	18db      	adds	r3, r3, r3
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080be:	4613      	mov	r3, r2
 80080c0:	eb42 0303 	adc.w	r3, r2, r3
 80080c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80080ce:	f7f8 f8e7 	bl	80002a0 <__aeabi_uldivmod>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4b0d      	ldr	r3, [pc, #52]	; (800810c <UART_SetConfig+0x2d4>)
 80080d8:	fba3 1302 	umull	r1, r3, r3, r2
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	2164      	movs	r1, #100	; 0x64
 80080e0:	fb01 f303 	mul.w	r3, r1, r3
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	3332      	adds	r3, #50	; 0x32
 80080ea:	4a08      	ldr	r2, [pc, #32]	; (800810c <UART_SetConfig+0x2d4>)
 80080ec:	fba2 2303 	umull	r2, r3, r2, r3
 80080f0:	095b      	lsrs	r3, r3, #5
 80080f2:	f003 0207 	and.w	r2, r3, #7
 80080f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4422      	add	r2, r4
 80080fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008100:	e106      	b.n	8008310 <UART_SetConfig+0x4d8>
 8008102:	bf00      	nop
 8008104:	40011000 	.word	0x40011000
 8008108:	40011400 	.word	0x40011400
 800810c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008114:	2200      	movs	r2, #0
 8008116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800811a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800811e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008122:	4642      	mov	r2, r8
 8008124:	464b      	mov	r3, r9
 8008126:	1891      	adds	r1, r2, r2
 8008128:	6239      	str	r1, [r7, #32]
 800812a:	415b      	adcs	r3, r3
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
 800812e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008132:	4641      	mov	r1, r8
 8008134:	1854      	adds	r4, r2, r1
 8008136:	4649      	mov	r1, r9
 8008138:	eb43 0501 	adc.w	r5, r3, r1
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	00eb      	lsls	r3, r5, #3
 8008146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800814a:	00e2      	lsls	r2, r4, #3
 800814c:	4614      	mov	r4, r2
 800814e:	461d      	mov	r5, r3
 8008150:	4643      	mov	r3, r8
 8008152:	18e3      	adds	r3, r4, r3
 8008154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008158:	464b      	mov	r3, r9
 800815a:	eb45 0303 	adc.w	r3, r5, r3
 800815e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800816e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008172:	f04f 0200 	mov.w	r2, #0
 8008176:	f04f 0300 	mov.w	r3, #0
 800817a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800817e:	4629      	mov	r1, r5
 8008180:	008b      	lsls	r3, r1, #2
 8008182:	4621      	mov	r1, r4
 8008184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008188:	4621      	mov	r1, r4
 800818a:	008a      	lsls	r2, r1, #2
 800818c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008190:	f7f8 f886 	bl	80002a0 <__aeabi_uldivmod>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4b60      	ldr	r3, [pc, #384]	; (800831c <UART_SetConfig+0x4e4>)
 800819a:	fba3 2302 	umull	r2, r3, r3, r2
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	011c      	lsls	r4, r3, #4
 80081a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	1891      	adds	r1, r2, r2
 80081ba:	61b9      	str	r1, [r7, #24]
 80081bc:	415b      	adcs	r3, r3
 80081be:	61fb      	str	r3, [r7, #28]
 80081c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081c4:	4641      	mov	r1, r8
 80081c6:	1851      	adds	r1, r2, r1
 80081c8:	6139      	str	r1, [r7, #16]
 80081ca:	4649      	mov	r1, r9
 80081cc:	414b      	adcs	r3, r1
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	f04f 0200 	mov.w	r2, #0
 80081d4:	f04f 0300 	mov.w	r3, #0
 80081d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081dc:	4659      	mov	r1, fp
 80081de:	00cb      	lsls	r3, r1, #3
 80081e0:	4651      	mov	r1, sl
 80081e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081e6:	4651      	mov	r1, sl
 80081e8:	00ca      	lsls	r2, r1, #3
 80081ea:	4610      	mov	r0, r2
 80081ec:	4619      	mov	r1, r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	4642      	mov	r2, r8
 80081f2:	189b      	adds	r3, r3, r2
 80081f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081f8:	464b      	mov	r3, r9
 80081fa:	460a      	mov	r2, r1
 80081fc:	eb42 0303 	adc.w	r3, r2, r3
 8008200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	67bb      	str	r3, [r7, #120]	; 0x78
 800820e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008210:	f04f 0200 	mov.w	r2, #0
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800821c:	4649      	mov	r1, r9
 800821e:	008b      	lsls	r3, r1, #2
 8008220:	4641      	mov	r1, r8
 8008222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008226:	4641      	mov	r1, r8
 8008228:	008a      	lsls	r2, r1, #2
 800822a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800822e:	f7f8 f837 	bl	80002a0 <__aeabi_uldivmod>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4611      	mov	r1, r2
 8008238:	4b38      	ldr	r3, [pc, #224]	; (800831c <UART_SetConfig+0x4e4>)
 800823a:	fba3 2301 	umull	r2, r3, r3, r1
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	2264      	movs	r2, #100	; 0x64
 8008242:	fb02 f303 	mul.w	r3, r2, r3
 8008246:	1acb      	subs	r3, r1, r3
 8008248:	011b      	lsls	r3, r3, #4
 800824a:	3332      	adds	r3, #50	; 0x32
 800824c:	4a33      	ldr	r2, [pc, #204]	; (800831c <UART_SetConfig+0x4e4>)
 800824e:	fba2 2303 	umull	r2, r3, r2, r3
 8008252:	095b      	lsrs	r3, r3, #5
 8008254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008258:	441c      	add	r4, r3
 800825a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800825e:	2200      	movs	r2, #0
 8008260:	673b      	str	r3, [r7, #112]	; 0x70
 8008262:	677a      	str	r2, [r7, #116]	; 0x74
 8008264:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008268:	4642      	mov	r2, r8
 800826a:	464b      	mov	r3, r9
 800826c:	1891      	adds	r1, r2, r2
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	415b      	adcs	r3, r3
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008278:	4641      	mov	r1, r8
 800827a:	1851      	adds	r1, r2, r1
 800827c:	6039      	str	r1, [r7, #0]
 800827e:	4649      	mov	r1, r9
 8008280:	414b      	adcs	r3, r1
 8008282:	607b      	str	r3, [r7, #4]
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	f04f 0300 	mov.w	r3, #0
 800828c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008290:	4659      	mov	r1, fp
 8008292:	00cb      	lsls	r3, r1, #3
 8008294:	4651      	mov	r1, sl
 8008296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800829a:	4651      	mov	r1, sl
 800829c:	00ca      	lsls	r2, r1, #3
 800829e:	4610      	mov	r0, r2
 80082a0:	4619      	mov	r1, r3
 80082a2:	4603      	mov	r3, r0
 80082a4:	4642      	mov	r2, r8
 80082a6:	189b      	adds	r3, r3, r2
 80082a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80082aa:	464b      	mov	r3, r9
 80082ac:	460a      	mov	r2, r1
 80082ae:	eb42 0303 	adc.w	r3, r2, r3
 80082b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	663b      	str	r3, [r7, #96]	; 0x60
 80082be:	667a      	str	r2, [r7, #100]	; 0x64
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	f04f 0300 	mov.w	r3, #0
 80082c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80082cc:	4649      	mov	r1, r9
 80082ce:	008b      	lsls	r3, r1, #2
 80082d0:	4641      	mov	r1, r8
 80082d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082d6:	4641      	mov	r1, r8
 80082d8:	008a      	lsls	r2, r1, #2
 80082da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80082de:	f7f7 ffdf 	bl	80002a0 <__aeabi_uldivmod>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4b0d      	ldr	r3, [pc, #52]	; (800831c <UART_SetConfig+0x4e4>)
 80082e8:	fba3 1302 	umull	r1, r3, r3, r2
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	2164      	movs	r1, #100	; 0x64
 80082f0:	fb01 f303 	mul.w	r3, r1, r3
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	3332      	adds	r3, #50	; 0x32
 80082fa:	4a08      	ldr	r2, [pc, #32]	; (800831c <UART_SetConfig+0x4e4>)
 80082fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008300:	095b      	lsrs	r3, r3, #5
 8008302:	f003 020f 	and.w	r2, r3, #15
 8008306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4422      	add	r2, r4
 800830e:	609a      	str	r2, [r3, #8]
}
 8008310:	bf00      	nop
 8008312:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008316:	46bd      	mov	sp, r7
 8008318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800831c:	51eb851f 	.word	0x51eb851f

08008320 <std>:
 8008320:	2300      	movs	r3, #0
 8008322:	b510      	push	{r4, lr}
 8008324:	4604      	mov	r4, r0
 8008326:	e9c0 3300 	strd	r3, r3, [r0]
 800832a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800832e:	6083      	str	r3, [r0, #8]
 8008330:	8181      	strh	r1, [r0, #12]
 8008332:	6643      	str	r3, [r0, #100]	; 0x64
 8008334:	81c2      	strh	r2, [r0, #14]
 8008336:	6183      	str	r3, [r0, #24]
 8008338:	4619      	mov	r1, r3
 800833a:	2208      	movs	r2, #8
 800833c:	305c      	adds	r0, #92	; 0x5c
 800833e:	f000 fa4b 	bl	80087d8 <memset>
 8008342:	4b0d      	ldr	r3, [pc, #52]	; (8008378 <std+0x58>)
 8008344:	6263      	str	r3, [r4, #36]	; 0x24
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <std+0x5c>)
 8008348:	62a3      	str	r3, [r4, #40]	; 0x28
 800834a:	4b0d      	ldr	r3, [pc, #52]	; (8008380 <std+0x60>)
 800834c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800834e:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <std+0x64>)
 8008350:	6323      	str	r3, [r4, #48]	; 0x30
 8008352:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <std+0x68>)
 8008354:	6224      	str	r4, [r4, #32]
 8008356:	429c      	cmp	r4, r3
 8008358:	d006      	beq.n	8008368 <std+0x48>
 800835a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800835e:	4294      	cmp	r4, r2
 8008360:	d002      	beq.n	8008368 <std+0x48>
 8008362:	33d0      	adds	r3, #208	; 0xd0
 8008364:	429c      	cmp	r4, r3
 8008366:	d105      	bne.n	8008374 <std+0x54>
 8008368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008370:	f000 baaa 	b.w	80088c8 <__retarget_lock_init_recursive>
 8008374:	bd10      	pop	{r4, pc}
 8008376:	bf00      	nop
 8008378:	08008629 	.word	0x08008629
 800837c:	0800864b 	.word	0x0800864b
 8008380:	08008683 	.word	0x08008683
 8008384:	080086a7 	.word	0x080086a7
 8008388:	200007cc 	.word	0x200007cc

0800838c <stdio_exit_handler>:
 800838c:	4a02      	ldr	r2, [pc, #8]	; (8008398 <stdio_exit_handler+0xc>)
 800838e:	4903      	ldr	r1, [pc, #12]	; (800839c <stdio_exit_handler+0x10>)
 8008390:	4803      	ldr	r0, [pc, #12]	; (80083a0 <stdio_exit_handler+0x14>)
 8008392:	f000 b869 	b.w	8008468 <_fwalk_sglue>
 8008396:	bf00      	nop
 8008398:	20000254 	.word	0x20000254
 800839c:	08009425 	.word	0x08009425
 80083a0:	20000260 	.word	0x20000260

080083a4 <cleanup_stdio>:
 80083a4:	6841      	ldr	r1, [r0, #4]
 80083a6:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <cleanup_stdio+0x34>)
 80083a8:	4299      	cmp	r1, r3
 80083aa:	b510      	push	{r4, lr}
 80083ac:	4604      	mov	r4, r0
 80083ae:	d001      	beq.n	80083b4 <cleanup_stdio+0x10>
 80083b0:	f001 f838 	bl	8009424 <_fflush_r>
 80083b4:	68a1      	ldr	r1, [r4, #8]
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <cleanup_stdio+0x38>)
 80083b8:	4299      	cmp	r1, r3
 80083ba:	d002      	beq.n	80083c2 <cleanup_stdio+0x1e>
 80083bc:	4620      	mov	r0, r4
 80083be:	f001 f831 	bl	8009424 <_fflush_r>
 80083c2:	68e1      	ldr	r1, [r4, #12]
 80083c4:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <cleanup_stdio+0x3c>)
 80083c6:	4299      	cmp	r1, r3
 80083c8:	d004      	beq.n	80083d4 <cleanup_stdio+0x30>
 80083ca:	4620      	mov	r0, r4
 80083cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d0:	f001 b828 	b.w	8009424 <_fflush_r>
 80083d4:	bd10      	pop	{r4, pc}
 80083d6:	bf00      	nop
 80083d8:	200007cc 	.word	0x200007cc
 80083dc:	20000834 	.word	0x20000834
 80083e0:	2000089c 	.word	0x2000089c

080083e4 <global_stdio_init.part.0>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <global_stdio_init.part.0+0x30>)
 80083e8:	4c0b      	ldr	r4, [pc, #44]	; (8008418 <global_stdio_init.part.0+0x34>)
 80083ea:	4a0c      	ldr	r2, [pc, #48]	; (800841c <global_stdio_init.part.0+0x38>)
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	4620      	mov	r0, r4
 80083f0:	2200      	movs	r2, #0
 80083f2:	2104      	movs	r1, #4
 80083f4:	f7ff ff94 	bl	8008320 <std>
 80083f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80083fc:	2201      	movs	r2, #1
 80083fe:	2109      	movs	r1, #9
 8008400:	f7ff ff8e 	bl	8008320 <std>
 8008404:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008408:	2202      	movs	r2, #2
 800840a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800840e:	2112      	movs	r1, #18
 8008410:	f7ff bf86 	b.w	8008320 <std>
 8008414:	20000904 	.word	0x20000904
 8008418:	200007cc 	.word	0x200007cc
 800841c:	0800838d 	.word	0x0800838d

08008420 <__sfp_lock_acquire>:
 8008420:	4801      	ldr	r0, [pc, #4]	; (8008428 <__sfp_lock_acquire+0x8>)
 8008422:	f000 ba52 	b.w	80088ca <__retarget_lock_acquire_recursive>
 8008426:	bf00      	nop
 8008428:	2000090d 	.word	0x2000090d

0800842c <__sfp_lock_release>:
 800842c:	4801      	ldr	r0, [pc, #4]	; (8008434 <__sfp_lock_release+0x8>)
 800842e:	f000 ba4d 	b.w	80088cc <__retarget_lock_release_recursive>
 8008432:	bf00      	nop
 8008434:	2000090d 	.word	0x2000090d

08008438 <__sinit>:
 8008438:	b510      	push	{r4, lr}
 800843a:	4604      	mov	r4, r0
 800843c:	f7ff fff0 	bl	8008420 <__sfp_lock_acquire>
 8008440:	6a23      	ldr	r3, [r4, #32]
 8008442:	b11b      	cbz	r3, 800844c <__sinit+0x14>
 8008444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008448:	f7ff bff0 	b.w	800842c <__sfp_lock_release>
 800844c:	4b04      	ldr	r3, [pc, #16]	; (8008460 <__sinit+0x28>)
 800844e:	6223      	str	r3, [r4, #32]
 8008450:	4b04      	ldr	r3, [pc, #16]	; (8008464 <__sinit+0x2c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1f5      	bne.n	8008444 <__sinit+0xc>
 8008458:	f7ff ffc4 	bl	80083e4 <global_stdio_init.part.0>
 800845c:	e7f2      	b.n	8008444 <__sinit+0xc>
 800845e:	bf00      	nop
 8008460:	080083a5 	.word	0x080083a5
 8008464:	20000904 	.word	0x20000904

08008468 <_fwalk_sglue>:
 8008468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800846c:	4607      	mov	r7, r0
 800846e:	4688      	mov	r8, r1
 8008470:	4614      	mov	r4, r2
 8008472:	2600      	movs	r6, #0
 8008474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008478:	f1b9 0901 	subs.w	r9, r9, #1
 800847c:	d505      	bpl.n	800848a <_fwalk_sglue+0x22>
 800847e:	6824      	ldr	r4, [r4, #0]
 8008480:	2c00      	cmp	r4, #0
 8008482:	d1f7      	bne.n	8008474 <_fwalk_sglue+0xc>
 8008484:	4630      	mov	r0, r6
 8008486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800848a:	89ab      	ldrh	r3, [r5, #12]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d907      	bls.n	80084a0 <_fwalk_sglue+0x38>
 8008490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008494:	3301      	adds	r3, #1
 8008496:	d003      	beq.n	80084a0 <_fwalk_sglue+0x38>
 8008498:	4629      	mov	r1, r5
 800849a:	4638      	mov	r0, r7
 800849c:	47c0      	blx	r8
 800849e:	4306      	orrs	r6, r0
 80084a0:	3568      	adds	r5, #104	; 0x68
 80084a2:	e7e9      	b.n	8008478 <_fwalk_sglue+0x10>

080084a4 <iprintf>:
 80084a4:	b40f      	push	{r0, r1, r2, r3}
 80084a6:	b507      	push	{r0, r1, r2, lr}
 80084a8:	4906      	ldr	r1, [pc, #24]	; (80084c4 <iprintf+0x20>)
 80084aa:	ab04      	add	r3, sp, #16
 80084ac:	6808      	ldr	r0, [r1, #0]
 80084ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b2:	6881      	ldr	r1, [r0, #8]
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	f000 fc85 	bl	8008dc4 <_vfiprintf_r>
 80084ba:	b003      	add	sp, #12
 80084bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c0:	b004      	add	sp, #16
 80084c2:	4770      	bx	lr
 80084c4:	200002ac 	.word	0x200002ac

080084c8 <_puts_r>:
 80084c8:	6a03      	ldr	r3, [r0, #32]
 80084ca:	b570      	push	{r4, r5, r6, lr}
 80084cc:	6884      	ldr	r4, [r0, #8]
 80084ce:	4605      	mov	r5, r0
 80084d0:	460e      	mov	r6, r1
 80084d2:	b90b      	cbnz	r3, 80084d8 <_puts_r+0x10>
 80084d4:	f7ff ffb0 	bl	8008438 <__sinit>
 80084d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084da:	07db      	lsls	r3, r3, #31
 80084dc:	d405      	bmi.n	80084ea <_puts_r+0x22>
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	0598      	lsls	r0, r3, #22
 80084e2:	d402      	bmi.n	80084ea <_puts_r+0x22>
 80084e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084e6:	f000 f9f0 	bl	80088ca <__retarget_lock_acquire_recursive>
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	0719      	lsls	r1, r3, #28
 80084ee:	d513      	bpl.n	8008518 <_puts_r+0x50>
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	b18b      	cbz	r3, 8008518 <_puts_r+0x50>
 80084f4:	3e01      	subs	r6, #1
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084fc:	3b01      	subs	r3, #1
 80084fe:	60a3      	str	r3, [r4, #8]
 8008500:	b9e9      	cbnz	r1, 800853e <_puts_r+0x76>
 8008502:	2b00      	cmp	r3, #0
 8008504:	da2e      	bge.n	8008564 <_puts_r+0x9c>
 8008506:	4622      	mov	r2, r4
 8008508:	210a      	movs	r1, #10
 800850a:	4628      	mov	r0, r5
 800850c:	f000 f8cf 	bl	80086ae <__swbuf_r>
 8008510:	3001      	adds	r0, #1
 8008512:	d007      	beq.n	8008524 <_puts_r+0x5c>
 8008514:	250a      	movs	r5, #10
 8008516:	e007      	b.n	8008528 <_puts_r+0x60>
 8008518:	4621      	mov	r1, r4
 800851a:	4628      	mov	r0, r5
 800851c:	f000 f904 	bl	8008728 <__swsetup_r>
 8008520:	2800      	cmp	r0, #0
 8008522:	d0e7      	beq.n	80084f4 <_puts_r+0x2c>
 8008524:	f04f 35ff 	mov.w	r5, #4294967295
 8008528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800852a:	07da      	lsls	r2, r3, #31
 800852c:	d405      	bmi.n	800853a <_puts_r+0x72>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	059b      	lsls	r3, r3, #22
 8008532:	d402      	bmi.n	800853a <_puts_r+0x72>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f000 f9c9 	bl	80088cc <__retarget_lock_release_recursive>
 800853a:	4628      	mov	r0, r5
 800853c:	bd70      	pop	{r4, r5, r6, pc}
 800853e:	2b00      	cmp	r3, #0
 8008540:	da04      	bge.n	800854c <_puts_r+0x84>
 8008542:	69a2      	ldr	r2, [r4, #24]
 8008544:	429a      	cmp	r2, r3
 8008546:	dc06      	bgt.n	8008556 <_puts_r+0x8e>
 8008548:	290a      	cmp	r1, #10
 800854a:	d004      	beq.n	8008556 <_puts_r+0x8e>
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	6022      	str	r2, [r4, #0]
 8008552:	7019      	strb	r1, [r3, #0]
 8008554:	e7cf      	b.n	80084f6 <_puts_r+0x2e>
 8008556:	4622      	mov	r2, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f000 f8a8 	bl	80086ae <__swbuf_r>
 800855e:	3001      	adds	r0, #1
 8008560:	d1c9      	bne.n	80084f6 <_puts_r+0x2e>
 8008562:	e7df      	b.n	8008524 <_puts_r+0x5c>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	250a      	movs	r5, #10
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	6022      	str	r2, [r4, #0]
 800856c:	701d      	strb	r5, [r3, #0]
 800856e:	e7db      	b.n	8008528 <_puts_r+0x60>

08008570 <puts>:
 8008570:	4b02      	ldr	r3, [pc, #8]	; (800857c <puts+0xc>)
 8008572:	4601      	mov	r1, r0
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	f7ff bfa7 	b.w	80084c8 <_puts_r>
 800857a:	bf00      	nop
 800857c:	200002ac 	.word	0x200002ac

08008580 <sniprintf>:
 8008580:	b40c      	push	{r2, r3}
 8008582:	b530      	push	{r4, r5, lr}
 8008584:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <sniprintf+0x64>)
 8008586:	1e0c      	subs	r4, r1, #0
 8008588:	681d      	ldr	r5, [r3, #0]
 800858a:	b09d      	sub	sp, #116	; 0x74
 800858c:	da08      	bge.n	80085a0 <sniprintf+0x20>
 800858e:	238b      	movs	r3, #139	; 0x8b
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	f04f 30ff 	mov.w	r0, #4294967295
 8008596:	b01d      	add	sp, #116	; 0x74
 8008598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800859c:	b002      	add	sp, #8
 800859e:	4770      	bx	lr
 80085a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80085a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80085a8:	bf14      	ite	ne
 80085aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80085ae:	4623      	moveq	r3, r4
 80085b0:	9304      	str	r3, [sp, #16]
 80085b2:	9307      	str	r3, [sp, #28]
 80085b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80085b8:	9002      	str	r0, [sp, #8]
 80085ba:	9006      	str	r0, [sp, #24]
 80085bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80085c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80085c2:	ab21      	add	r3, sp, #132	; 0x84
 80085c4:	a902      	add	r1, sp, #8
 80085c6:	4628      	mov	r0, r5
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	f000 fad3 	bl	8008b74 <_svfiprintf_r>
 80085ce:	1c43      	adds	r3, r0, #1
 80085d0:	bfbc      	itt	lt
 80085d2:	238b      	movlt	r3, #139	; 0x8b
 80085d4:	602b      	strlt	r3, [r5, #0]
 80085d6:	2c00      	cmp	r4, #0
 80085d8:	d0dd      	beq.n	8008596 <sniprintf+0x16>
 80085da:	9b02      	ldr	r3, [sp, #8]
 80085dc:	2200      	movs	r2, #0
 80085de:	701a      	strb	r2, [r3, #0]
 80085e0:	e7d9      	b.n	8008596 <sniprintf+0x16>
 80085e2:	bf00      	nop
 80085e4:	200002ac 	.word	0x200002ac

080085e8 <siprintf>:
 80085e8:	b40e      	push	{r1, r2, r3}
 80085ea:	b500      	push	{lr}
 80085ec:	b09c      	sub	sp, #112	; 0x70
 80085ee:	ab1d      	add	r3, sp, #116	; 0x74
 80085f0:	9002      	str	r0, [sp, #8]
 80085f2:	9006      	str	r0, [sp, #24]
 80085f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085f8:	4809      	ldr	r0, [pc, #36]	; (8008620 <siprintf+0x38>)
 80085fa:	9107      	str	r1, [sp, #28]
 80085fc:	9104      	str	r1, [sp, #16]
 80085fe:	4909      	ldr	r1, [pc, #36]	; (8008624 <siprintf+0x3c>)
 8008600:	f853 2b04 	ldr.w	r2, [r3], #4
 8008604:	9105      	str	r1, [sp, #20]
 8008606:	6800      	ldr	r0, [r0, #0]
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	a902      	add	r1, sp, #8
 800860c:	f000 fab2 	bl	8008b74 <_svfiprintf_r>
 8008610:	9b02      	ldr	r3, [sp, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	b01c      	add	sp, #112	; 0x70
 8008618:	f85d eb04 	ldr.w	lr, [sp], #4
 800861c:	b003      	add	sp, #12
 800861e:	4770      	bx	lr
 8008620:	200002ac 	.word	0x200002ac
 8008624:	ffff0208 	.word	0xffff0208

08008628 <__sread>:
 8008628:	b510      	push	{r4, lr}
 800862a:	460c      	mov	r4, r1
 800862c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008630:	f000 f8fc 	bl	800882c <_read_r>
 8008634:	2800      	cmp	r0, #0
 8008636:	bfab      	itete	ge
 8008638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800863a:	89a3      	ldrhlt	r3, [r4, #12]
 800863c:	181b      	addge	r3, r3, r0
 800863e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008642:	bfac      	ite	ge
 8008644:	6563      	strge	r3, [r4, #84]	; 0x54
 8008646:	81a3      	strhlt	r3, [r4, #12]
 8008648:	bd10      	pop	{r4, pc}

0800864a <__swrite>:
 800864a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864e:	461f      	mov	r7, r3
 8008650:	898b      	ldrh	r3, [r1, #12]
 8008652:	05db      	lsls	r3, r3, #23
 8008654:	4605      	mov	r5, r0
 8008656:	460c      	mov	r4, r1
 8008658:	4616      	mov	r6, r2
 800865a:	d505      	bpl.n	8008668 <__swrite+0x1e>
 800865c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008660:	2302      	movs	r3, #2
 8008662:	2200      	movs	r2, #0
 8008664:	f000 f8d0 	bl	8008808 <_lseek_r>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800866e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	4632      	mov	r2, r6
 8008676:	463b      	mov	r3, r7
 8008678:	4628      	mov	r0, r5
 800867a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800867e:	f000 b8e7 	b.w	8008850 <_write_r>

08008682 <__sseek>:
 8008682:	b510      	push	{r4, lr}
 8008684:	460c      	mov	r4, r1
 8008686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868a:	f000 f8bd 	bl	8008808 <_lseek_r>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	bf15      	itete	ne
 8008694:	6560      	strne	r0, [r4, #84]	; 0x54
 8008696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800869a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800869e:	81a3      	strheq	r3, [r4, #12]
 80086a0:	bf18      	it	ne
 80086a2:	81a3      	strhne	r3, [r4, #12]
 80086a4:	bd10      	pop	{r4, pc}

080086a6 <__sclose>:
 80086a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086aa:	f000 b89d 	b.w	80087e8 <_close_r>

080086ae <__swbuf_r>:
 80086ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b0:	460e      	mov	r6, r1
 80086b2:	4614      	mov	r4, r2
 80086b4:	4605      	mov	r5, r0
 80086b6:	b118      	cbz	r0, 80086c0 <__swbuf_r+0x12>
 80086b8:	6a03      	ldr	r3, [r0, #32]
 80086ba:	b90b      	cbnz	r3, 80086c0 <__swbuf_r+0x12>
 80086bc:	f7ff febc 	bl	8008438 <__sinit>
 80086c0:	69a3      	ldr	r3, [r4, #24]
 80086c2:	60a3      	str	r3, [r4, #8]
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	071a      	lsls	r2, r3, #28
 80086c8:	d525      	bpl.n	8008716 <__swbuf_r+0x68>
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	b31b      	cbz	r3, 8008716 <__swbuf_r+0x68>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	6922      	ldr	r2, [r4, #16]
 80086d2:	1a98      	subs	r0, r3, r2
 80086d4:	6963      	ldr	r3, [r4, #20]
 80086d6:	b2f6      	uxtb	r6, r6
 80086d8:	4283      	cmp	r3, r0
 80086da:	4637      	mov	r7, r6
 80086dc:	dc04      	bgt.n	80086e8 <__swbuf_r+0x3a>
 80086de:	4621      	mov	r1, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	f000 fe9f 	bl	8009424 <_fflush_r>
 80086e6:	b9e0      	cbnz	r0, 8008722 <__swbuf_r+0x74>
 80086e8:	68a3      	ldr	r3, [r4, #8]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	60a3      	str	r3, [r4, #8]
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	6022      	str	r2, [r4, #0]
 80086f4:	701e      	strb	r6, [r3, #0]
 80086f6:	6962      	ldr	r2, [r4, #20]
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d004      	beq.n	8008708 <__swbuf_r+0x5a>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	07db      	lsls	r3, r3, #31
 8008702:	d506      	bpl.n	8008712 <__swbuf_r+0x64>
 8008704:	2e0a      	cmp	r6, #10
 8008706:	d104      	bne.n	8008712 <__swbuf_r+0x64>
 8008708:	4621      	mov	r1, r4
 800870a:	4628      	mov	r0, r5
 800870c:	f000 fe8a 	bl	8009424 <_fflush_r>
 8008710:	b938      	cbnz	r0, 8008722 <__swbuf_r+0x74>
 8008712:	4638      	mov	r0, r7
 8008714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 f805 	bl	8008728 <__swsetup_r>
 800871e:	2800      	cmp	r0, #0
 8008720:	d0d5      	beq.n	80086ce <__swbuf_r+0x20>
 8008722:	f04f 37ff 	mov.w	r7, #4294967295
 8008726:	e7f4      	b.n	8008712 <__swbuf_r+0x64>

08008728 <__swsetup_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4b2a      	ldr	r3, [pc, #168]	; (80087d4 <__swsetup_r+0xac>)
 800872c:	4605      	mov	r5, r0
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	460c      	mov	r4, r1
 8008732:	b118      	cbz	r0, 800873c <__swsetup_r+0x14>
 8008734:	6a03      	ldr	r3, [r0, #32]
 8008736:	b90b      	cbnz	r3, 800873c <__swsetup_r+0x14>
 8008738:	f7ff fe7e 	bl	8008438 <__sinit>
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008742:	0718      	lsls	r0, r3, #28
 8008744:	d422      	bmi.n	800878c <__swsetup_r+0x64>
 8008746:	06d9      	lsls	r1, r3, #27
 8008748:	d407      	bmi.n	800875a <__swsetup_r+0x32>
 800874a:	2309      	movs	r3, #9
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	f04f 30ff 	mov.w	r0, #4294967295
 8008758:	e034      	b.n	80087c4 <__swsetup_r+0x9c>
 800875a:	0758      	lsls	r0, r3, #29
 800875c:	d512      	bpl.n	8008784 <__swsetup_r+0x5c>
 800875e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008760:	b141      	cbz	r1, 8008774 <__swsetup_r+0x4c>
 8008762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008766:	4299      	cmp	r1, r3
 8008768:	d002      	beq.n	8008770 <__swsetup_r+0x48>
 800876a:	4628      	mov	r0, r5
 800876c:	f000 f8b0 	bl	80088d0 <_free_r>
 8008770:	2300      	movs	r3, #0
 8008772:	6363      	str	r3, [r4, #52]	; 0x34
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	2300      	movs	r3, #0
 800877e:	6063      	str	r3, [r4, #4]
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f043 0308 	orr.w	r3, r3, #8
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	b94b      	cbnz	r3, 80087a4 <__swsetup_r+0x7c>
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800879a:	d003      	beq.n	80087a4 <__swsetup_r+0x7c>
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 fe8e 	bl	80094c0 <__smakebuf_r>
 80087a4:	89a0      	ldrh	r0, [r4, #12]
 80087a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087aa:	f010 0301 	ands.w	r3, r0, #1
 80087ae:	d00a      	beq.n	80087c6 <__swsetup_r+0x9e>
 80087b0:	2300      	movs	r3, #0
 80087b2:	60a3      	str	r3, [r4, #8]
 80087b4:	6963      	ldr	r3, [r4, #20]
 80087b6:	425b      	negs	r3, r3
 80087b8:	61a3      	str	r3, [r4, #24]
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	b943      	cbnz	r3, 80087d0 <__swsetup_r+0xa8>
 80087be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087c2:	d1c4      	bne.n	800874e <__swsetup_r+0x26>
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	0781      	lsls	r1, r0, #30
 80087c8:	bf58      	it	pl
 80087ca:	6963      	ldrpl	r3, [r4, #20]
 80087cc:	60a3      	str	r3, [r4, #8]
 80087ce:	e7f4      	b.n	80087ba <__swsetup_r+0x92>
 80087d0:	2000      	movs	r0, #0
 80087d2:	e7f7      	b.n	80087c4 <__swsetup_r+0x9c>
 80087d4:	200002ac 	.word	0x200002ac

080087d8 <memset>:
 80087d8:	4402      	add	r2, r0
 80087da:	4603      	mov	r3, r0
 80087dc:	4293      	cmp	r3, r2
 80087de:	d100      	bne.n	80087e2 <memset+0xa>
 80087e0:	4770      	bx	lr
 80087e2:	f803 1b01 	strb.w	r1, [r3], #1
 80087e6:	e7f9      	b.n	80087dc <memset+0x4>

080087e8 <_close_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d06      	ldr	r5, [pc, #24]	; (8008804 <_close_r+0x1c>)
 80087ec:	2300      	movs	r3, #0
 80087ee:	4604      	mov	r4, r0
 80087f0:	4608      	mov	r0, r1
 80087f2:	602b      	str	r3, [r5, #0]
 80087f4:	f7f9 fc4d 	bl	8002092 <_close>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_close_r+0x1a>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_close_r+0x1a>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	20000908 	.word	0x20000908

08008808 <_lseek_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4d07      	ldr	r5, [pc, #28]	; (8008828 <_lseek_r+0x20>)
 800880c:	4604      	mov	r4, r0
 800880e:	4608      	mov	r0, r1
 8008810:	4611      	mov	r1, r2
 8008812:	2200      	movs	r2, #0
 8008814:	602a      	str	r2, [r5, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	f7f9 fc62 	bl	80020e0 <_lseek>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_lseek_r+0x1e>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_lseek_r+0x1e>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	20000908 	.word	0x20000908

0800882c <_read_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d07      	ldr	r5, [pc, #28]	; (800884c <_read_r+0x20>)
 8008830:	4604      	mov	r4, r0
 8008832:	4608      	mov	r0, r1
 8008834:	4611      	mov	r1, r2
 8008836:	2200      	movs	r2, #0
 8008838:	602a      	str	r2, [r5, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	f7f9 fc0c 	bl	8002058 <_read>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_read_r+0x1e>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_read_r+0x1e>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000908 	.word	0x20000908

08008850 <_write_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d07      	ldr	r5, [pc, #28]	; (8008870 <_write_r+0x20>)
 8008854:	4604      	mov	r4, r0
 8008856:	4608      	mov	r0, r1
 8008858:	4611      	mov	r1, r2
 800885a:	2200      	movs	r2, #0
 800885c:	602a      	str	r2, [r5, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	f7f7 ffba 	bl	80007d8 <_write>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_write_r+0x1e>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_write_r+0x1e>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	20000908 	.word	0x20000908

08008874 <__errno>:
 8008874:	4b01      	ldr	r3, [pc, #4]	; (800887c <__errno+0x8>)
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	200002ac 	.word	0x200002ac

08008880 <__libc_init_array>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	4d0d      	ldr	r5, [pc, #52]	; (80088b8 <__libc_init_array+0x38>)
 8008884:	4c0d      	ldr	r4, [pc, #52]	; (80088bc <__libc_init_array+0x3c>)
 8008886:	1b64      	subs	r4, r4, r5
 8008888:	10a4      	asrs	r4, r4, #2
 800888a:	2600      	movs	r6, #0
 800888c:	42a6      	cmp	r6, r4
 800888e:	d109      	bne.n	80088a4 <__libc_init_array+0x24>
 8008890:	4d0b      	ldr	r5, [pc, #44]	; (80088c0 <__libc_init_array+0x40>)
 8008892:	4c0c      	ldr	r4, [pc, #48]	; (80088c4 <__libc_init_array+0x44>)
 8008894:	f000 fee2 	bl	800965c <_init>
 8008898:	1b64      	subs	r4, r4, r5
 800889a:	10a4      	asrs	r4, r4, #2
 800889c:	2600      	movs	r6, #0
 800889e:	42a6      	cmp	r6, r4
 80088a0:	d105      	bne.n	80088ae <__libc_init_array+0x2e>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a8:	4798      	blx	r3
 80088aa:	3601      	adds	r6, #1
 80088ac:	e7ee      	b.n	800888c <__libc_init_array+0xc>
 80088ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b2:	4798      	blx	r3
 80088b4:	3601      	adds	r6, #1
 80088b6:	e7f2      	b.n	800889e <__libc_init_array+0x1e>
 80088b8:	08009834 	.word	0x08009834
 80088bc:	08009834 	.word	0x08009834
 80088c0:	08009834 	.word	0x08009834
 80088c4:	08009838 	.word	0x08009838

080088c8 <__retarget_lock_init_recursive>:
 80088c8:	4770      	bx	lr

080088ca <__retarget_lock_acquire_recursive>:
 80088ca:	4770      	bx	lr

080088cc <__retarget_lock_release_recursive>:
 80088cc:	4770      	bx	lr
	...

080088d0 <_free_r>:
 80088d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088d2:	2900      	cmp	r1, #0
 80088d4:	d044      	beq.n	8008960 <_free_r+0x90>
 80088d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088da:	9001      	str	r0, [sp, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f1a1 0404 	sub.w	r4, r1, #4
 80088e2:	bfb8      	it	lt
 80088e4:	18e4      	addlt	r4, r4, r3
 80088e6:	f000 f8df 	bl	8008aa8 <__malloc_lock>
 80088ea:	4a1e      	ldr	r2, [pc, #120]	; (8008964 <_free_r+0x94>)
 80088ec:	9801      	ldr	r0, [sp, #4]
 80088ee:	6813      	ldr	r3, [r2, #0]
 80088f0:	b933      	cbnz	r3, 8008900 <_free_r+0x30>
 80088f2:	6063      	str	r3, [r4, #4]
 80088f4:	6014      	str	r4, [r2, #0]
 80088f6:	b003      	add	sp, #12
 80088f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088fc:	f000 b8da 	b.w	8008ab4 <__malloc_unlock>
 8008900:	42a3      	cmp	r3, r4
 8008902:	d908      	bls.n	8008916 <_free_r+0x46>
 8008904:	6825      	ldr	r5, [r4, #0]
 8008906:	1961      	adds	r1, r4, r5
 8008908:	428b      	cmp	r3, r1
 800890a:	bf01      	itttt	eq
 800890c:	6819      	ldreq	r1, [r3, #0]
 800890e:	685b      	ldreq	r3, [r3, #4]
 8008910:	1949      	addeq	r1, r1, r5
 8008912:	6021      	streq	r1, [r4, #0]
 8008914:	e7ed      	b.n	80088f2 <_free_r+0x22>
 8008916:	461a      	mov	r2, r3
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	b10b      	cbz	r3, 8008920 <_free_r+0x50>
 800891c:	42a3      	cmp	r3, r4
 800891e:	d9fa      	bls.n	8008916 <_free_r+0x46>
 8008920:	6811      	ldr	r1, [r2, #0]
 8008922:	1855      	adds	r5, r2, r1
 8008924:	42a5      	cmp	r5, r4
 8008926:	d10b      	bne.n	8008940 <_free_r+0x70>
 8008928:	6824      	ldr	r4, [r4, #0]
 800892a:	4421      	add	r1, r4
 800892c:	1854      	adds	r4, r2, r1
 800892e:	42a3      	cmp	r3, r4
 8008930:	6011      	str	r1, [r2, #0]
 8008932:	d1e0      	bne.n	80088f6 <_free_r+0x26>
 8008934:	681c      	ldr	r4, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	6053      	str	r3, [r2, #4]
 800893a:	440c      	add	r4, r1
 800893c:	6014      	str	r4, [r2, #0]
 800893e:	e7da      	b.n	80088f6 <_free_r+0x26>
 8008940:	d902      	bls.n	8008948 <_free_r+0x78>
 8008942:	230c      	movs	r3, #12
 8008944:	6003      	str	r3, [r0, #0]
 8008946:	e7d6      	b.n	80088f6 <_free_r+0x26>
 8008948:	6825      	ldr	r5, [r4, #0]
 800894a:	1961      	adds	r1, r4, r5
 800894c:	428b      	cmp	r3, r1
 800894e:	bf04      	itt	eq
 8008950:	6819      	ldreq	r1, [r3, #0]
 8008952:	685b      	ldreq	r3, [r3, #4]
 8008954:	6063      	str	r3, [r4, #4]
 8008956:	bf04      	itt	eq
 8008958:	1949      	addeq	r1, r1, r5
 800895a:	6021      	streq	r1, [r4, #0]
 800895c:	6054      	str	r4, [r2, #4]
 800895e:	e7ca      	b.n	80088f6 <_free_r+0x26>
 8008960:	b003      	add	sp, #12
 8008962:	bd30      	pop	{r4, r5, pc}
 8008964:	20000910 	.word	0x20000910

08008968 <sbrk_aligned>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	4e0e      	ldr	r6, [pc, #56]	; (80089a4 <sbrk_aligned+0x3c>)
 800896c:	460c      	mov	r4, r1
 800896e:	6831      	ldr	r1, [r6, #0]
 8008970:	4605      	mov	r5, r0
 8008972:	b911      	cbnz	r1, 800897a <sbrk_aligned+0x12>
 8008974:	f000 fe1c 	bl	80095b0 <_sbrk_r>
 8008978:	6030      	str	r0, [r6, #0]
 800897a:	4621      	mov	r1, r4
 800897c:	4628      	mov	r0, r5
 800897e:	f000 fe17 	bl	80095b0 <_sbrk_r>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	d00a      	beq.n	800899c <sbrk_aligned+0x34>
 8008986:	1cc4      	adds	r4, r0, #3
 8008988:	f024 0403 	bic.w	r4, r4, #3
 800898c:	42a0      	cmp	r0, r4
 800898e:	d007      	beq.n	80089a0 <sbrk_aligned+0x38>
 8008990:	1a21      	subs	r1, r4, r0
 8008992:	4628      	mov	r0, r5
 8008994:	f000 fe0c 	bl	80095b0 <_sbrk_r>
 8008998:	3001      	adds	r0, #1
 800899a:	d101      	bne.n	80089a0 <sbrk_aligned+0x38>
 800899c:	f04f 34ff 	mov.w	r4, #4294967295
 80089a0:	4620      	mov	r0, r4
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	20000914 	.word	0x20000914

080089a8 <_malloc_r>:
 80089a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ac:	1ccd      	adds	r5, r1, #3
 80089ae:	f025 0503 	bic.w	r5, r5, #3
 80089b2:	3508      	adds	r5, #8
 80089b4:	2d0c      	cmp	r5, #12
 80089b6:	bf38      	it	cc
 80089b8:	250c      	movcc	r5, #12
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	4607      	mov	r7, r0
 80089be:	db01      	blt.n	80089c4 <_malloc_r+0x1c>
 80089c0:	42a9      	cmp	r1, r5
 80089c2:	d905      	bls.n	80089d0 <_malloc_r+0x28>
 80089c4:	230c      	movs	r3, #12
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	2600      	movs	r6, #0
 80089ca:	4630      	mov	r0, r6
 80089cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008aa4 <_malloc_r+0xfc>
 80089d4:	f000 f868 	bl	8008aa8 <__malloc_lock>
 80089d8:	f8d8 3000 	ldr.w	r3, [r8]
 80089dc:	461c      	mov	r4, r3
 80089de:	bb5c      	cbnz	r4, 8008a38 <_malloc_r+0x90>
 80089e0:	4629      	mov	r1, r5
 80089e2:	4638      	mov	r0, r7
 80089e4:	f7ff ffc0 	bl	8008968 <sbrk_aligned>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	4604      	mov	r4, r0
 80089ec:	d155      	bne.n	8008a9a <_malloc_r+0xf2>
 80089ee:	f8d8 4000 	ldr.w	r4, [r8]
 80089f2:	4626      	mov	r6, r4
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	d145      	bne.n	8008a84 <_malloc_r+0xdc>
 80089f8:	2c00      	cmp	r4, #0
 80089fa:	d048      	beq.n	8008a8e <_malloc_r+0xe6>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	4631      	mov	r1, r6
 8008a00:	4638      	mov	r0, r7
 8008a02:	eb04 0903 	add.w	r9, r4, r3
 8008a06:	f000 fdd3 	bl	80095b0 <_sbrk_r>
 8008a0a:	4581      	cmp	r9, r0
 8008a0c:	d13f      	bne.n	8008a8e <_malloc_r+0xe6>
 8008a0e:	6821      	ldr	r1, [r4, #0]
 8008a10:	1a6d      	subs	r5, r5, r1
 8008a12:	4629      	mov	r1, r5
 8008a14:	4638      	mov	r0, r7
 8008a16:	f7ff ffa7 	bl	8008968 <sbrk_aligned>
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	d037      	beq.n	8008a8e <_malloc_r+0xe6>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	442b      	add	r3, r5
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	f8d8 3000 	ldr.w	r3, [r8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d038      	beq.n	8008a9e <_malloc_r+0xf6>
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	42a2      	cmp	r2, r4
 8008a30:	d12b      	bne.n	8008a8a <_malloc_r+0xe2>
 8008a32:	2200      	movs	r2, #0
 8008a34:	605a      	str	r2, [r3, #4]
 8008a36:	e00f      	b.n	8008a58 <_malloc_r+0xb0>
 8008a38:	6822      	ldr	r2, [r4, #0]
 8008a3a:	1b52      	subs	r2, r2, r5
 8008a3c:	d41f      	bmi.n	8008a7e <_malloc_r+0xd6>
 8008a3e:	2a0b      	cmp	r2, #11
 8008a40:	d917      	bls.n	8008a72 <_malloc_r+0xca>
 8008a42:	1961      	adds	r1, r4, r5
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	6025      	str	r5, [r4, #0]
 8008a48:	bf18      	it	ne
 8008a4a:	6059      	strne	r1, [r3, #4]
 8008a4c:	6863      	ldr	r3, [r4, #4]
 8008a4e:	bf08      	it	eq
 8008a50:	f8c8 1000 	streq.w	r1, [r8]
 8008a54:	5162      	str	r2, [r4, r5]
 8008a56:	604b      	str	r3, [r1, #4]
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f104 060b 	add.w	r6, r4, #11
 8008a5e:	f000 f829 	bl	8008ab4 <__malloc_unlock>
 8008a62:	f026 0607 	bic.w	r6, r6, #7
 8008a66:	1d23      	adds	r3, r4, #4
 8008a68:	1af2      	subs	r2, r6, r3
 8008a6a:	d0ae      	beq.n	80089ca <_malloc_r+0x22>
 8008a6c:	1b9b      	subs	r3, r3, r6
 8008a6e:	50a3      	str	r3, [r4, r2]
 8008a70:	e7ab      	b.n	80089ca <_malloc_r+0x22>
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	6862      	ldr	r2, [r4, #4]
 8008a76:	d1dd      	bne.n	8008a34 <_malloc_r+0x8c>
 8008a78:	f8c8 2000 	str.w	r2, [r8]
 8008a7c:	e7ec      	b.n	8008a58 <_malloc_r+0xb0>
 8008a7e:	4623      	mov	r3, r4
 8008a80:	6864      	ldr	r4, [r4, #4]
 8008a82:	e7ac      	b.n	80089de <_malloc_r+0x36>
 8008a84:	4634      	mov	r4, r6
 8008a86:	6876      	ldr	r6, [r6, #4]
 8008a88:	e7b4      	b.n	80089f4 <_malloc_r+0x4c>
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	e7cc      	b.n	8008a28 <_malloc_r+0x80>
 8008a8e:	230c      	movs	r3, #12
 8008a90:	603b      	str	r3, [r7, #0]
 8008a92:	4638      	mov	r0, r7
 8008a94:	f000 f80e 	bl	8008ab4 <__malloc_unlock>
 8008a98:	e797      	b.n	80089ca <_malloc_r+0x22>
 8008a9a:	6025      	str	r5, [r4, #0]
 8008a9c:	e7dc      	b.n	8008a58 <_malloc_r+0xb0>
 8008a9e:	605b      	str	r3, [r3, #4]
 8008aa0:	deff      	udf	#255	; 0xff
 8008aa2:	bf00      	nop
 8008aa4:	20000910 	.word	0x20000910

08008aa8 <__malloc_lock>:
 8008aa8:	4801      	ldr	r0, [pc, #4]	; (8008ab0 <__malloc_lock+0x8>)
 8008aaa:	f7ff bf0e 	b.w	80088ca <__retarget_lock_acquire_recursive>
 8008aae:	bf00      	nop
 8008ab0:	2000090c 	.word	0x2000090c

08008ab4 <__malloc_unlock>:
 8008ab4:	4801      	ldr	r0, [pc, #4]	; (8008abc <__malloc_unlock+0x8>)
 8008ab6:	f7ff bf09 	b.w	80088cc <__retarget_lock_release_recursive>
 8008aba:	bf00      	nop
 8008abc:	2000090c 	.word	0x2000090c

08008ac0 <__ssputs_r>:
 8008ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	688e      	ldr	r6, [r1, #8]
 8008ac6:	461f      	mov	r7, r3
 8008ac8:	42be      	cmp	r6, r7
 8008aca:	680b      	ldr	r3, [r1, #0]
 8008acc:	4682      	mov	sl, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	4690      	mov	r8, r2
 8008ad2:	d82c      	bhi.n	8008b2e <__ssputs_r+0x6e>
 8008ad4:	898a      	ldrh	r2, [r1, #12]
 8008ad6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ada:	d026      	beq.n	8008b2a <__ssputs_r+0x6a>
 8008adc:	6965      	ldr	r5, [r4, #20]
 8008ade:	6909      	ldr	r1, [r1, #16]
 8008ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ae4:	eba3 0901 	sub.w	r9, r3, r1
 8008ae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008aec:	1c7b      	adds	r3, r7, #1
 8008aee:	444b      	add	r3, r9
 8008af0:	106d      	asrs	r5, r5, #1
 8008af2:	429d      	cmp	r5, r3
 8008af4:	bf38      	it	cc
 8008af6:	461d      	movcc	r5, r3
 8008af8:	0553      	lsls	r3, r2, #21
 8008afa:	d527      	bpl.n	8008b4c <__ssputs_r+0x8c>
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7ff ff53 	bl	80089a8 <_malloc_r>
 8008b02:	4606      	mov	r6, r0
 8008b04:	b360      	cbz	r0, 8008b60 <__ssputs_r+0xa0>
 8008b06:	6921      	ldr	r1, [r4, #16]
 8008b08:	464a      	mov	r2, r9
 8008b0a:	f000 fd61 	bl	80095d0 <memcpy>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b18:	81a3      	strh	r3, [r4, #12]
 8008b1a:	6126      	str	r6, [r4, #16]
 8008b1c:	6165      	str	r5, [r4, #20]
 8008b1e:	444e      	add	r6, r9
 8008b20:	eba5 0509 	sub.w	r5, r5, r9
 8008b24:	6026      	str	r6, [r4, #0]
 8008b26:	60a5      	str	r5, [r4, #8]
 8008b28:	463e      	mov	r6, r7
 8008b2a:	42be      	cmp	r6, r7
 8008b2c:	d900      	bls.n	8008b30 <__ssputs_r+0x70>
 8008b2e:	463e      	mov	r6, r7
 8008b30:	6820      	ldr	r0, [r4, #0]
 8008b32:	4632      	mov	r2, r6
 8008b34:	4641      	mov	r1, r8
 8008b36:	f000 fcff 	bl	8009538 <memmove>
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	1b9b      	subs	r3, r3, r6
 8008b3e:	60a3      	str	r3, [r4, #8]
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	4433      	add	r3, r6
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	2000      	movs	r0, #0
 8008b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4c:	462a      	mov	r2, r5
 8008b4e:	f000 fd4d 	bl	80095ec <_realloc_r>
 8008b52:	4606      	mov	r6, r0
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d1e0      	bne.n	8008b1a <__ssputs_r+0x5a>
 8008b58:	6921      	ldr	r1, [r4, #16]
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	f7ff feb8 	bl	80088d0 <_free_r>
 8008b60:	230c      	movs	r3, #12
 8008b62:	f8ca 3000 	str.w	r3, [sl]
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b72:	e7e9      	b.n	8008b48 <__ssputs_r+0x88>

08008b74 <_svfiprintf_r>:
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	4698      	mov	r8, r3
 8008b7a:	898b      	ldrh	r3, [r1, #12]
 8008b7c:	061b      	lsls	r3, r3, #24
 8008b7e:	b09d      	sub	sp, #116	; 0x74
 8008b80:	4607      	mov	r7, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	4614      	mov	r4, r2
 8008b86:	d50e      	bpl.n	8008ba6 <_svfiprintf_r+0x32>
 8008b88:	690b      	ldr	r3, [r1, #16]
 8008b8a:	b963      	cbnz	r3, 8008ba6 <_svfiprintf_r+0x32>
 8008b8c:	2140      	movs	r1, #64	; 0x40
 8008b8e:	f7ff ff0b 	bl	80089a8 <_malloc_r>
 8008b92:	6028      	str	r0, [r5, #0]
 8008b94:	6128      	str	r0, [r5, #16]
 8008b96:	b920      	cbnz	r0, 8008ba2 <_svfiprintf_r+0x2e>
 8008b98:	230c      	movs	r3, #12
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	e0d0      	b.n	8008d44 <_svfiprintf_r+0x1d0>
 8008ba2:	2340      	movs	r3, #64	; 0x40
 8008ba4:	616b      	str	r3, [r5, #20]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8008baa:	2320      	movs	r3, #32
 8008bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb4:	2330      	movs	r3, #48	; 0x30
 8008bb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d5c <_svfiprintf_r+0x1e8>
 8008bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bbe:	f04f 0901 	mov.w	r9, #1
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	469a      	mov	sl, r3
 8008bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bca:	b10a      	cbz	r2, 8008bd0 <_svfiprintf_r+0x5c>
 8008bcc:	2a25      	cmp	r2, #37	; 0x25
 8008bce:	d1f9      	bne.n	8008bc4 <_svfiprintf_r+0x50>
 8008bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd4:	d00b      	beq.n	8008bee <_svfiprintf_r+0x7a>
 8008bd6:	465b      	mov	r3, fp
 8008bd8:	4622      	mov	r2, r4
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4638      	mov	r0, r7
 8008bde:	f7ff ff6f 	bl	8008ac0 <__ssputs_r>
 8008be2:	3001      	adds	r0, #1
 8008be4:	f000 80a9 	beq.w	8008d3a <_svfiprintf_r+0x1c6>
 8008be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bea:	445a      	add	r2, fp
 8008bec:	9209      	str	r2, [sp, #36]	; 0x24
 8008bee:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 80a1 	beq.w	8008d3a <_svfiprintf_r+0x1c6>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c02:	f10a 0a01 	add.w	sl, sl, #1
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	9307      	str	r3, [sp, #28]
 8008c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c10:	4654      	mov	r4, sl
 8008c12:	2205      	movs	r2, #5
 8008c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c18:	4850      	ldr	r0, [pc, #320]	; (8008d5c <_svfiprintf_r+0x1e8>)
 8008c1a:	f7f7 faf1 	bl	8000200 <memchr>
 8008c1e:	9a04      	ldr	r2, [sp, #16]
 8008c20:	b9d8      	cbnz	r0, 8008c5a <_svfiprintf_r+0xe6>
 8008c22:	06d0      	lsls	r0, r2, #27
 8008c24:	bf44      	itt	mi
 8008c26:	2320      	movmi	r3, #32
 8008c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c2c:	0711      	lsls	r1, r2, #28
 8008c2e:	bf44      	itt	mi
 8008c30:	232b      	movmi	r3, #43	; 0x2b
 8008c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c36:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c3c:	d015      	beq.n	8008c6a <_svfiprintf_r+0xf6>
 8008c3e:	9a07      	ldr	r2, [sp, #28]
 8008c40:	4654      	mov	r4, sl
 8008c42:	2000      	movs	r0, #0
 8008c44:	f04f 0c0a 	mov.w	ip, #10
 8008c48:	4621      	mov	r1, r4
 8008c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c4e:	3b30      	subs	r3, #48	; 0x30
 8008c50:	2b09      	cmp	r3, #9
 8008c52:	d94d      	bls.n	8008cf0 <_svfiprintf_r+0x17c>
 8008c54:	b1b0      	cbz	r0, 8008c84 <_svfiprintf_r+0x110>
 8008c56:	9207      	str	r2, [sp, #28]
 8008c58:	e014      	b.n	8008c84 <_svfiprintf_r+0x110>
 8008c5a:	eba0 0308 	sub.w	r3, r0, r8
 8008c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c62:	4313      	orrs	r3, r2
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	46a2      	mov	sl, r4
 8008c68:	e7d2      	b.n	8008c10 <_svfiprintf_r+0x9c>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	1d19      	adds	r1, r3, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	9103      	str	r1, [sp, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfbb      	ittet	lt
 8008c76:	425b      	neglt	r3, r3
 8008c78:	f042 0202 	orrlt.w	r2, r2, #2
 8008c7c:	9307      	strge	r3, [sp, #28]
 8008c7e:	9307      	strlt	r3, [sp, #28]
 8008c80:	bfb8      	it	lt
 8008c82:	9204      	strlt	r2, [sp, #16]
 8008c84:	7823      	ldrb	r3, [r4, #0]
 8008c86:	2b2e      	cmp	r3, #46	; 0x2e
 8008c88:	d10c      	bne.n	8008ca4 <_svfiprintf_r+0x130>
 8008c8a:	7863      	ldrb	r3, [r4, #1]
 8008c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8e:	d134      	bne.n	8008cfa <_svfiprintf_r+0x186>
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	9203      	str	r2, [sp, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bfb8      	it	lt
 8008c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca0:	3402      	adds	r4, #2
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008d6c <_svfiprintf_r+0x1f8>
 8008ca8:	7821      	ldrb	r1, [r4, #0]
 8008caa:	2203      	movs	r2, #3
 8008cac:	4650      	mov	r0, sl
 8008cae:	f7f7 faa7 	bl	8000200 <memchr>
 8008cb2:	b138      	cbz	r0, 8008cc4 <_svfiprintf_r+0x150>
 8008cb4:	9b04      	ldr	r3, [sp, #16]
 8008cb6:	eba0 000a 	sub.w	r0, r0, sl
 8008cba:	2240      	movs	r2, #64	; 0x40
 8008cbc:	4082      	lsls	r2, r0
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	3401      	adds	r4, #1
 8008cc2:	9304      	str	r3, [sp, #16]
 8008cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc8:	4825      	ldr	r0, [pc, #148]	; (8008d60 <_svfiprintf_r+0x1ec>)
 8008cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cce:	2206      	movs	r2, #6
 8008cd0:	f7f7 fa96 	bl	8000200 <memchr>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d038      	beq.n	8008d4a <_svfiprintf_r+0x1d6>
 8008cd8:	4b22      	ldr	r3, [pc, #136]	; (8008d64 <_svfiprintf_r+0x1f0>)
 8008cda:	bb1b      	cbnz	r3, 8008d24 <_svfiprintf_r+0x1b0>
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	3307      	adds	r3, #7
 8008ce0:	f023 0307 	bic.w	r3, r3, #7
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cea:	4433      	add	r3, r6
 8008cec:	9309      	str	r3, [sp, #36]	; 0x24
 8008cee:	e768      	b.n	8008bc2 <_svfiprintf_r+0x4e>
 8008cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	e7a6      	b.n	8008c48 <_svfiprintf_r+0xd4>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	3401      	adds	r4, #1
 8008cfe:	9305      	str	r3, [sp, #20]
 8008d00:	4619      	mov	r1, r3
 8008d02:	f04f 0c0a 	mov.w	ip, #10
 8008d06:	4620      	mov	r0, r4
 8008d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0c:	3a30      	subs	r2, #48	; 0x30
 8008d0e:	2a09      	cmp	r2, #9
 8008d10:	d903      	bls.n	8008d1a <_svfiprintf_r+0x1a6>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0c6      	beq.n	8008ca4 <_svfiprintf_r+0x130>
 8008d16:	9105      	str	r1, [sp, #20]
 8008d18:	e7c4      	b.n	8008ca4 <_svfiprintf_r+0x130>
 8008d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d1e:	4604      	mov	r4, r0
 8008d20:	2301      	movs	r3, #1
 8008d22:	e7f0      	b.n	8008d06 <_svfiprintf_r+0x192>
 8008d24:	ab03      	add	r3, sp, #12
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	462a      	mov	r2, r5
 8008d2a:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <_svfiprintf_r+0x1f4>)
 8008d2c:	a904      	add	r1, sp, #16
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f3af 8000 	nop.w
 8008d34:	1c42      	adds	r2, r0, #1
 8008d36:	4606      	mov	r6, r0
 8008d38:	d1d6      	bne.n	8008ce8 <_svfiprintf_r+0x174>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	065b      	lsls	r3, r3, #25
 8008d3e:	f53f af2d 	bmi.w	8008b9c <_svfiprintf_r+0x28>
 8008d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d44:	b01d      	add	sp, #116	; 0x74
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	ab03      	add	r3, sp, #12
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	462a      	mov	r2, r5
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <_svfiprintf_r+0x1f4>)
 8008d52:	a904      	add	r1, sp, #16
 8008d54:	4638      	mov	r0, r7
 8008d56:	f000 f9bd 	bl	80090d4 <_printf_i>
 8008d5a:	e7eb      	b.n	8008d34 <_svfiprintf_r+0x1c0>
 8008d5c:	080097f8 	.word	0x080097f8
 8008d60:	08009802 	.word	0x08009802
 8008d64:	00000000 	.word	0x00000000
 8008d68:	08008ac1 	.word	0x08008ac1
 8008d6c:	080097fe 	.word	0x080097fe

08008d70 <__sfputc_r>:
 8008d70:	6893      	ldr	r3, [r2, #8]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	b410      	push	{r4}
 8008d78:	6093      	str	r3, [r2, #8]
 8008d7a:	da08      	bge.n	8008d8e <__sfputc_r+0x1e>
 8008d7c:	6994      	ldr	r4, [r2, #24]
 8008d7e:	42a3      	cmp	r3, r4
 8008d80:	db01      	blt.n	8008d86 <__sfputc_r+0x16>
 8008d82:	290a      	cmp	r1, #10
 8008d84:	d103      	bne.n	8008d8e <__sfputc_r+0x1e>
 8008d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8a:	f7ff bc90 	b.w	80086ae <__swbuf_r>
 8008d8e:	6813      	ldr	r3, [r2, #0]
 8008d90:	1c58      	adds	r0, r3, #1
 8008d92:	6010      	str	r0, [r2, #0]
 8008d94:	7019      	strb	r1, [r3, #0]
 8008d96:	4608      	mov	r0, r1
 8008d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <__sfputs_r>:
 8008d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da0:	4606      	mov	r6, r0
 8008da2:	460f      	mov	r7, r1
 8008da4:	4614      	mov	r4, r2
 8008da6:	18d5      	adds	r5, r2, r3
 8008da8:	42ac      	cmp	r4, r5
 8008daa:	d101      	bne.n	8008db0 <__sfputs_r+0x12>
 8008dac:	2000      	movs	r0, #0
 8008dae:	e007      	b.n	8008dc0 <__sfputs_r+0x22>
 8008db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db4:	463a      	mov	r2, r7
 8008db6:	4630      	mov	r0, r6
 8008db8:	f7ff ffda 	bl	8008d70 <__sfputc_r>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d1f3      	bne.n	8008da8 <__sfputs_r+0xa>
 8008dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dc4 <_vfiprintf_r>:
 8008dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	460d      	mov	r5, r1
 8008dca:	b09d      	sub	sp, #116	; 0x74
 8008dcc:	4614      	mov	r4, r2
 8008dce:	4698      	mov	r8, r3
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	b118      	cbz	r0, 8008ddc <_vfiprintf_r+0x18>
 8008dd4:	6a03      	ldr	r3, [r0, #32]
 8008dd6:	b90b      	cbnz	r3, 8008ddc <_vfiprintf_r+0x18>
 8008dd8:	f7ff fb2e 	bl	8008438 <__sinit>
 8008ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dde:	07d9      	lsls	r1, r3, #31
 8008de0:	d405      	bmi.n	8008dee <_vfiprintf_r+0x2a>
 8008de2:	89ab      	ldrh	r3, [r5, #12]
 8008de4:	059a      	lsls	r2, r3, #22
 8008de6:	d402      	bmi.n	8008dee <_vfiprintf_r+0x2a>
 8008de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dea:	f7ff fd6e 	bl	80088ca <__retarget_lock_acquire_recursive>
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	071b      	lsls	r3, r3, #28
 8008df2:	d501      	bpl.n	8008df8 <_vfiprintf_r+0x34>
 8008df4:	692b      	ldr	r3, [r5, #16]
 8008df6:	b99b      	cbnz	r3, 8008e20 <_vfiprintf_r+0x5c>
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7ff fc94 	bl	8008728 <__swsetup_r>
 8008e00:	b170      	cbz	r0, 8008e20 <_vfiprintf_r+0x5c>
 8008e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e04:	07dc      	lsls	r4, r3, #31
 8008e06:	d504      	bpl.n	8008e12 <_vfiprintf_r+0x4e>
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	b01d      	add	sp, #116	; 0x74
 8008e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	0598      	lsls	r0, r3, #22
 8008e16:	d4f7      	bmi.n	8008e08 <_vfiprintf_r+0x44>
 8008e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e1a:	f7ff fd57 	bl	80088cc <__retarget_lock_release_recursive>
 8008e1e:	e7f3      	b.n	8008e08 <_vfiprintf_r+0x44>
 8008e20:	2300      	movs	r3, #0
 8008e22:	9309      	str	r3, [sp, #36]	; 0x24
 8008e24:	2320      	movs	r3, #32
 8008e26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e2e:	2330      	movs	r3, #48	; 0x30
 8008e30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008fe4 <_vfiprintf_r+0x220>
 8008e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e38:	f04f 0901 	mov.w	r9, #1
 8008e3c:	4623      	mov	r3, r4
 8008e3e:	469a      	mov	sl, r3
 8008e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e44:	b10a      	cbz	r2, 8008e4a <_vfiprintf_r+0x86>
 8008e46:	2a25      	cmp	r2, #37	; 0x25
 8008e48:	d1f9      	bne.n	8008e3e <_vfiprintf_r+0x7a>
 8008e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e4e:	d00b      	beq.n	8008e68 <_vfiprintf_r+0xa4>
 8008e50:	465b      	mov	r3, fp
 8008e52:	4622      	mov	r2, r4
 8008e54:	4629      	mov	r1, r5
 8008e56:	4630      	mov	r0, r6
 8008e58:	f7ff ffa1 	bl	8008d9e <__sfputs_r>
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	f000 80a9 	beq.w	8008fb4 <_vfiprintf_r+0x1f0>
 8008e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e64:	445a      	add	r2, fp
 8008e66:	9209      	str	r2, [sp, #36]	; 0x24
 8008e68:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 80a1 	beq.w	8008fb4 <_vfiprintf_r+0x1f0>
 8008e72:	2300      	movs	r3, #0
 8008e74:	f04f 32ff 	mov.w	r2, #4294967295
 8008e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e7c:	f10a 0a01 	add.w	sl, sl, #1
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	9307      	str	r3, [sp, #28]
 8008e84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e88:	931a      	str	r3, [sp, #104]	; 0x68
 8008e8a:	4654      	mov	r4, sl
 8008e8c:	2205      	movs	r2, #5
 8008e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e92:	4854      	ldr	r0, [pc, #336]	; (8008fe4 <_vfiprintf_r+0x220>)
 8008e94:	f7f7 f9b4 	bl	8000200 <memchr>
 8008e98:	9a04      	ldr	r2, [sp, #16]
 8008e9a:	b9d8      	cbnz	r0, 8008ed4 <_vfiprintf_r+0x110>
 8008e9c:	06d1      	lsls	r1, r2, #27
 8008e9e:	bf44      	itt	mi
 8008ea0:	2320      	movmi	r3, #32
 8008ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea6:	0713      	lsls	r3, r2, #28
 8008ea8:	bf44      	itt	mi
 8008eaa:	232b      	movmi	r3, #43	; 0x2b
 8008eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb6:	d015      	beq.n	8008ee4 <_vfiprintf_r+0x120>
 8008eb8:	9a07      	ldr	r2, [sp, #28]
 8008eba:	4654      	mov	r4, sl
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f04f 0c0a 	mov.w	ip, #10
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ec8:	3b30      	subs	r3, #48	; 0x30
 8008eca:	2b09      	cmp	r3, #9
 8008ecc:	d94d      	bls.n	8008f6a <_vfiprintf_r+0x1a6>
 8008ece:	b1b0      	cbz	r0, 8008efe <_vfiprintf_r+0x13a>
 8008ed0:	9207      	str	r2, [sp, #28]
 8008ed2:	e014      	b.n	8008efe <_vfiprintf_r+0x13a>
 8008ed4:	eba0 0308 	sub.w	r3, r0, r8
 8008ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8008edc:	4313      	orrs	r3, r2
 8008ede:	9304      	str	r3, [sp, #16]
 8008ee0:	46a2      	mov	sl, r4
 8008ee2:	e7d2      	b.n	8008e8a <_vfiprintf_r+0xc6>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	1d19      	adds	r1, r3, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	9103      	str	r1, [sp, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bfbb      	ittet	lt
 8008ef0:	425b      	neglt	r3, r3
 8008ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ef6:	9307      	strge	r3, [sp, #28]
 8008ef8:	9307      	strlt	r3, [sp, #28]
 8008efa:	bfb8      	it	lt
 8008efc:	9204      	strlt	r2, [sp, #16]
 8008efe:	7823      	ldrb	r3, [r4, #0]
 8008f00:	2b2e      	cmp	r3, #46	; 0x2e
 8008f02:	d10c      	bne.n	8008f1e <_vfiprintf_r+0x15a>
 8008f04:	7863      	ldrb	r3, [r4, #1]
 8008f06:	2b2a      	cmp	r3, #42	; 0x2a
 8008f08:	d134      	bne.n	8008f74 <_vfiprintf_r+0x1b0>
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	1d1a      	adds	r2, r3, #4
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	9203      	str	r2, [sp, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	bfb8      	it	lt
 8008f16:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f1a:	3402      	adds	r4, #2
 8008f1c:	9305      	str	r3, [sp, #20]
 8008f1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ff4 <_vfiprintf_r+0x230>
 8008f22:	7821      	ldrb	r1, [r4, #0]
 8008f24:	2203      	movs	r2, #3
 8008f26:	4650      	mov	r0, sl
 8008f28:	f7f7 f96a 	bl	8000200 <memchr>
 8008f2c:	b138      	cbz	r0, 8008f3e <_vfiprintf_r+0x17a>
 8008f2e:	9b04      	ldr	r3, [sp, #16]
 8008f30:	eba0 000a 	sub.w	r0, r0, sl
 8008f34:	2240      	movs	r2, #64	; 0x40
 8008f36:	4082      	lsls	r2, r0
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	3401      	adds	r4, #1
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f42:	4829      	ldr	r0, [pc, #164]	; (8008fe8 <_vfiprintf_r+0x224>)
 8008f44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f48:	2206      	movs	r2, #6
 8008f4a:	f7f7 f959 	bl	8000200 <memchr>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d03f      	beq.n	8008fd2 <_vfiprintf_r+0x20e>
 8008f52:	4b26      	ldr	r3, [pc, #152]	; (8008fec <_vfiprintf_r+0x228>)
 8008f54:	bb1b      	cbnz	r3, 8008f9e <_vfiprintf_r+0x1da>
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	3307      	adds	r3, #7
 8008f5a:	f023 0307 	bic.w	r3, r3, #7
 8008f5e:	3308      	adds	r3, #8
 8008f60:	9303      	str	r3, [sp, #12]
 8008f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f64:	443b      	add	r3, r7
 8008f66:	9309      	str	r3, [sp, #36]	; 0x24
 8008f68:	e768      	b.n	8008e3c <_vfiprintf_r+0x78>
 8008f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f6e:	460c      	mov	r4, r1
 8008f70:	2001      	movs	r0, #1
 8008f72:	e7a6      	b.n	8008ec2 <_vfiprintf_r+0xfe>
 8008f74:	2300      	movs	r3, #0
 8008f76:	3401      	adds	r4, #1
 8008f78:	9305      	str	r3, [sp, #20]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	f04f 0c0a 	mov.w	ip, #10
 8008f80:	4620      	mov	r0, r4
 8008f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f86:	3a30      	subs	r2, #48	; 0x30
 8008f88:	2a09      	cmp	r2, #9
 8008f8a:	d903      	bls.n	8008f94 <_vfiprintf_r+0x1d0>
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d0c6      	beq.n	8008f1e <_vfiprintf_r+0x15a>
 8008f90:	9105      	str	r1, [sp, #20]
 8008f92:	e7c4      	b.n	8008f1e <_vfiprintf_r+0x15a>
 8008f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f98:	4604      	mov	r4, r0
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e7f0      	b.n	8008f80 <_vfiprintf_r+0x1bc>
 8008f9e:	ab03      	add	r3, sp, #12
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	462a      	mov	r2, r5
 8008fa4:	4b12      	ldr	r3, [pc, #72]	; (8008ff0 <_vfiprintf_r+0x22c>)
 8008fa6:	a904      	add	r1, sp, #16
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f3af 8000 	nop.w
 8008fae:	4607      	mov	r7, r0
 8008fb0:	1c78      	adds	r0, r7, #1
 8008fb2:	d1d6      	bne.n	8008f62 <_vfiprintf_r+0x19e>
 8008fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fb6:	07d9      	lsls	r1, r3, #31
 8008fb8:	d405      	bmi.n	8008fc6 <_vfiprintf_r+0x202>
 8008fba:	89ab      	ldrh	r3, [r5, #12]
 8008fbc:	059a      	lsls	r2, r3, #22
 8008fbe:	d402      	bmi.n	8008fc6 <_vfiprintf_r+0x202>
 8008fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fc2:	f7ff fc83 	bl	80088cc <__retarget_lock_release_recursive>
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	065b      	lsls	r3, r3, #25
 8008fca:	f53f af1d 	bmi.w	8008e08 <_vfiprintf_r+0x44>
 8008fce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fd0:	e71c      	b.n	8008e0c <_vfiprintf_r+0x48>
 8008fd2:	ab03      	add	r3, sp, #12
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	462a      	mov	r2, r5
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <_vfiprintf_r+0x22c>)
 8008fda:	a904      	add	r1, sp, #16
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f000 f879 	bl	80090d4 <_printf_i>
 8008fe2:	e7e4      	b.n	8008fae <_vfiprintf_r+0x1ea>
 8008fe4:	080097f8 	.word	0x080097f8
 8008fe8:	08009802 	.word	0x08009802
 8008fec:	00000000 	.word	0x00000000
 8008ff0:	08008d9f 	.word	0x08008d9f
 8008ff4:	080097fe 	.word	0x080097fe

08008ff8 <_printf_common>:
 8008ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ffc:	4616      	mov	r6, r2
 8008ffe:	4699      	mov	r9, r3
 8009000:	688a      	ldr	r2, [r1, #8]
 8009002:	690b      	ldr	r3, [r1, #16]
 8009004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009008:	4293      	cmp	r3, r2
 800900a:	bfb8      	it	lt
 800900c:	4613      	movlt	r3, r2
 800900e:	6033      	str	r3, [r6, #0]
 8009010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009014:	4607      	mov	r7, r0
 8009016:	460c      	mov	r4, r1
 8009018:	b10a      	cbz	r2, 800901e <_printf_common+0x26>
 800901a:	3301      	adds	r3, #1
 800901c:	6033      	str	r3, [r6, #0]
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	0699      	lsls	r1, r3, #26
 8009022:	bf42      	ittt	mi
 8009024:	6833      	ldrmi	r3, [r6, #0]
 8009026:	3302      	addmi	r3, #2
 8009028:	6033      	strmi	r3, [r6, #0]
 800902a:	6825      	ldr	r5, [r4, #0]
 800902c:	f015 0506 	ands.w	r5, r5, #6
 8009030:	d106      	bne.n	8009040 <_printf_common+0x48>
 8009032:	f104 0a19 	add.w	sl, r4, #25
 8009036:	68e3      	ldr	r3, [r4, #12]
 8009038:	6832      	ldr	r2, [r6, #0]
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	42ab      	cmp	r3, r5
 800903e:	dc26      	bgt.n	800908e <_printf_common+0x96>
 8009040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009044:	1e13      	subs	r3, r2, #0
 8009046:	6822      	ldr	r2, [r4, #0]
 8009048:	bf18      	it	ne
 800904a:	2301      	movne	r3, #1
 800904c:	0692      	lsls	r2, r2, #26
 800904e:	d42b      	bmi.n	80090a8 <_printf_common+0xb0>
 8009050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009054:	4649      	mov	r1, r9
 8009056:	4638      	mov	r0, r7
 8009058:	47c0      	blx	r8
 800905a:	3001      	adds	r0, #1
 800905c:	d01e      	beq.n	800909c <_printf_common+0xa4>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	6922      	ldr	r2, [r4, #16]
 8009062:	f003 0306 	and.w	r3, r3, #6
 8009066:	2b04      	cmp	r3, #4
 8009068:	bf02      	ittt	eq
 800906a:	68e5      	ldreq	r5, [r4, #12]
 800906c:	6833      	ldreq	r3, [r6, #0]
 800906e:	1aed      	subeq	r5, r5, r3
 8009070:	68a3      	ldr	r3, [r4, #8]
 8009072:	bf0c      	ite	eq
 8009074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009078:	2500      	movne	r5, #0
 800907a:	4293      	cmp	r3, r2
 800907c:	bfc4      	itt	gt
 800907e:	1a9b      	subgt	r3, r3, r2
 8009080:	18ed      	addgt	r5, r5, r3
 8009082:	2600      	movs	r6, #0
 8009084:	341a      	adds	r4, #26
 8009086:	42b5      	cmp	r5, r6
 8009088:	d11a      	bne.n	80090c0 <_printf_common+0xc8>
 800908a:	2000      	movs	r0, #0
 800908c:	e008      	b.n	80090a0 <_printf_common+0xa8>
 800908e:	2301      	movs	r3, #1
 8009090:	4652      	mov	r2, sl
 8009092:	4649      	mov	r1, r9
 8009094:	4638      	mov	r0, r7
 8009096:	47c0      	blx	r8
 8009098:	3001      	adds	r0, #1
 800909a:	d103      	bne.n	80090a4 <_printf_common+0xac>
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a4:	3501      	adds	r5, #1
 80090a6:	e7c6      	b.n	8009036 <_printf_common+0x3e>
 80090a8:	18e1      	adds	r1, r4, r3
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	2030      	movs	r0, #48	; 0x30
 80090ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090b2:	4422      	add	r2, r4
 80090b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090bc:	3302      	adds	r3, #2
 80090be:	e7c7      	b.n	8009050 <_printf_common+0x58>
 80090c0:	2301      	movs	r3, #1
 80090c2:	4622      	mov	r2, r4
 80090c4:	4649      	mov	r1, r9
 80090c6:	4638      	mov	r0, r7
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d0e6      	beq.n	800909c <_printf_common+0xa4>
 80090ce:	3601      	adds	r6, #1
 80090d0:	e7d9      	b.n	8009086 <_printf_common+0x8e>
	...

080090d4 <_printf_i>:
 80090d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d8:	7e0f      	ldrb	r7, [r1, #24]
 80090da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090dc:	2f78      	cmp	r7, #120	; 0x78
 80090de:	4691      	mov	r9, r2
 80090e0:	4680      	mov	r8, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	469a      	mov	sl, r3
 80090e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090ea:	d807      	bhi.n	80090fc <_printf_i+0x28>
 80090ec:	2f62      	cmp	r7, #98	; 0x62
 80090ee:	d80a      	bhi.n	8009106 <_printf_i+0x32>
 80090f0:	2f00      	cmp	r7, #0
 80090f2:	f000 80d4 	beq.w	800929e <_printf_i+0x1ca>
 80090f6:	2f58      	cmp	r7, #88	; 0x58
 80090f8:	f000 80c0 	beq.w	800927c <_printf_i+0x1a8>
 80090fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009104:	e03a      	b.n	800917c <_printf_i+0xa8>
 8009106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800910a:	2b15      	cmp	r3, #21
 800910c:	d8f6      	bhi.n	80090fc <_printf_i+0x28>
 800910e:	a101      	add	r1, pc, #4	; (adr r1, 8009114 <_printf_i+0x40>)
 8009110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009114:	0800916d 	.word	0x0800916d
 8009118:	08009181 	.word	0x08009181
 800911c:	080090fd 	.word	0x080090fd
 8009120:	080090fd 	.word	0x080090fd
 8009124:	080090fd 	.word	0x080090fd
 8009128:	080090fd 	.word	0x080090fd
 800912c:	08009181 	.word	0x08009181
 8009130:	080090fd 	.word	0x080090fd
 8009134:	080090fd 	.word	0x080090fd
 8009138:	080090fd 	.word	0x080090fd
 800913c:	080090fd 	.word	0x080090fd
 8009140:	08009285 	.word	0x08009285
 8009144:	080091ad 	.word	0x080091ad
 8009148:	0800923f 	.word	0x0800923f
 800914c:	080090fd 	.word	0x080090fd
 8009150:	080090fd 	.word	0x080090fd
 8009154:	080092a7 	.word	0x080092a7
 8009158:	080090fd 	.word	0x080090fd
 800915c:	080091ad 	.word	0x080091ad
 8009160:	080090fd 	.word	0x080090fd
 8009164:	080090fd 	.word	0x080090fd
 8009168:	08009247 	.word	0x08009247
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	1d1a      	adds	r2, r3, #4
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	602a      	str	r2, [r5, #0]
 8009174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800917c:	2301      	movs	r3, #1
 800917e:	e09f      	b.n	80092c0 <_printf_i+0x1ec>
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	682b      	ldr	r3, [r5, #0]
 8009184:	0607      	lsls	r7, r0, #24
 8009186:	f103 0104 	add.w	r1, r3, #4
 800918a:	6029      	str	r1, [r5, #0]
 800918c:	d501      	bpl.n	8009192 <_printf_i+0xbe>
 800918e:	681e      	ldr	r6, [r3, #0]
 8009190:	e003      	b.n	800919a <_printf_i+0xc6>
 8009192:	0646      	lsls	r6, r0, #25
 8009194:	d5fb      	bpl.n	800918e <_printf_i+0xba>
 8009196:	f9b3 6000 	ldrsh.w	r6, [r3]
 800919a:	2e00      	cmp	r6, #0
 800919c:	da03      	bge.n	80091a6 <_printf_i+0xd2>
 800919e:	232d      	movs	r3, #45	; 0x2d
 80091a0:	4276      	negs	r6, r6
 80091a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091a6:	485a      	ldr	r0, [pc, #360]	; (8009310 <_printf_i+0x23c>)
 80091a8:	230a      	movs	r3, #10
 80091aa:	e012      	b.n	80091d2 <_printf_i+0xfe>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	6820      	ldr	r0, [r4, #0]
 80091b0:	1d19      	adds	r1, r3, #4
 80091b2:	6029      	str	r1, [r5, #0]
 80091b4:	0605      	lsls	r5, r0, #24
 80091b6:	d501      	bpl.n	80091bc <_printf_i+0xe8>
 80091b8:	681e      	ldr	r6, [r3, #0]
 80091ba:	e002      	b.n	80091c2 <_printf_i+0xee>
 80091bc:	0641      	lsls	r1, r0, #25
 80091be:	d5fb      	bpl.n	80091b8 <_printf_i+0xe4>
 80091c0:	881e      	ldrh	r6, [r3, #0]
 80091c2:	4853      	ldr	r0, [pc, #332]	; (8009310 <_printf_i+0x23c>)
 80091c4:	2f6f      	cmp	r7, #111	; 0x6f
 80091c6:	bf0c      	ite	eq
 80091c8:	2308      	moveq	r3, #8
 80091ca:	230a      	movne	r3, #10
 80091cc:	2100      	movs	r1, #0
 80091ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091d2:	6865      	ldr	r5, [r4, #4]
 80091d4:	60a5      	str	r5, [r4, #8]
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	bfa2      	ittt	ge
 80091da:	6821      	ldrge	r1, [r4, #0]
 80091dc:	f021 0104 	bicge.w	r1, r1, #4
 80091e0:	6021      	strge	r1, [r4, #0]
 80091e2:	b90e      	cbnz	r6, 80091e8 <_printf_i+0x114>
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	d04b      	beq.n	8009280 <_printf_i+0x1ac>
 80091e8:	4615      	mov	r5, r2
 80091ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80091ee:	fb03 6711 	mls	r7, r3, r1, r6
 80091f2:	5dc7      	ldrb	r7, [r0, r7]
 80091f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091f8:	4637      	mov	r7, r6
 80091fa:	42bb      	cmp	r3, r7
 80091fc:	460e      	mov	r6, r1
 80091fe:	d9f4      	bls.n	80091ea <_printf_i+0x116>
 8009200:	2b08      	cmp	r3, #8
 8009202:	d10b      	bne.n	800921c <_printf_i+0x148>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	07de      	lsls	r6, r3, #31
 8009208:	d508      	bpl.n	800921c <_printf_i+0x148>
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	6861      	ldr	r1, [r4, #4]
 800920e:	4299      	cmp	r1, r3
 8009210:	bfde      	ittt	le
 8009212:	2330      	movle	r3, #48	; 0x30
 8009214:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009218:	f105 35ff 	addle.w	r5, r5, #4294967295
 800921c:	1b52      	subs	r2, r2, r5
 800921e:	6122      	str	r2, [r4, #16]
 8009220:	f8cd a000 	str.w	sl, [sp]
 8009224:	464b      	mov	r3, r9
 8009226:	aa03      	add	r2, sp, #12
 8009228:	4621      	mov	r1, r4
 800922a:	4640      	mov	r0, r8
 800922c:	f7ff fee4 	bl	8008ff8 <_printf_common>
 8009230:	3001      	adds	r0, #1
 8009232:	d14a      	bne.n	80092ca <_printf_i+0x1f6>
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	b004      	add	sp, #16
 800923a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	f043 0320 	orr.w	r3, r3, #32
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	4833      	ldr	r0, [pc, #204]	; (8009314 <_printf_i+0x240>)
 8009248:	2778      	movs	r7, #120	; 0x78
 800924a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	6829      	ldr	r1, [r5, #0]
 8009252:	061f      	lsls	r7, r3, #24
 8009254:	f851 6b04 	ldr.w	r6, [r1], #4
 8009258:	d402      	bmi.n	8009260 <_printf_i+0x18c>
 800925a:	065f      	lsls	r7, r3, #25
 800925c:	bf48      	it	mi
 800925e:	b2b6      	uxthmi	r6, r6
 8009260:	07df      	lsls	r7, r3, #31
 8009262:	bf48      	it	mi
 8009264:	f043 0320 	orrmi.w	r3, r3, #32
 8009268:	6029      	str	r1, [r5, #0]
 800926a:	bf48      	it	mi
 800926c:	6023      	strmi	r3, [r4, #0]
 800926e:	b91e      	cbnz	r6, 8009278 <_printf_i+0x1a4>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	f023 0320 	bic.w	r3, r3, #32
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	2310      	movs	r3, #16
 800927a:	e7a7      	b.n	80091cc <_printf_i+0xf8>
 800927c:	4824      	ldr	r0, [pc, #144]	; (8009310 <_printf_i+0x23c>)
 800927e:	e7e4      	b.n	800924a <_printf_i+0x176>
 8009280:	4615      	mov	r5, r2
 8009282:	e7bd      	b.n	8009200 <_printf_i+0x12c>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	6826      	ldr	r6, [r4, #0]
 8009288:	6961      	ldr	r1, [r4, #20]
 800928a:	1d18      	adds	r0, r3, #4
 800928c:	6028      	str	r0, [r5, #0]
 800928e:	0635      	lsls	r5, r6, #24
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	d501      	bpl.n	8009298 <_printf_i+0x1c4>
 8009294:	6019      	str	r1, [r3, #0]
 8009296:	e002      	b.n	800929e <_printf_i+0x1ca>
 8009298:	0670      	lsls	r0, r6, #25
 800929a:	d5fb      	bpl.n	8009294 <_printf_i+0x1c0>
 800929c:	8019      	strh	r1, [r3, #0]
 800929e:	2300      	movs	r3, #0
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	4615      	mov	r5, r2
 80092a4:	e7bc      	b.n	8009220 <_printf_i+0x14c>
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	1d1a      	adds	r2, r3, #4
 80092aa:	602a      	str	r2, [r5, #0]
 80092ac:	681d      	ldr	r5, [r3, #0]
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	2100      	movs	r1, #0
 80092b2:	4628      	mov	r0, r5
 80092b4:	f7f6 ffa4 	bl	8000200 <memchr>
 80092b8:	b108      	cbz	r0, 80092be <_printf_i+0x1ea>
 80092ba:	1b40      	subs	r0, r0, r5
 80092bc:	6060      	str	r0, [r4, #4]
 80092be:	6863      	ldr	r3, [r4, #4]
 80092c0:	6123      	str	r3, [r4, #16]
 80092c2:	2300      	movs	r3, #0
 80092c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c8:	e7aa      	b.n	8009220 <_printf_i+0x14c>
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	462a      	mov	r2, r5
 80092ce:	4649      	mov	r1, r9
 80092d0:	4640      	mov	r0, r8
 80092d2:	47d0      	blx	sl
 80092d4:	3001      	adds	r0, #1
 80092d6:	d0ad      	beq.n	8009234 <_printf_i+0x160>
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	079b      	lsls	r3, r3, #30
 80092dc:	d413      	bmi.n	8009306 <_printf_i+0x232>
 80092de:	68e0      	ldr	r0, [r4, #12]
 80092e0:	9b03      	ldr	r3, [sp, #12]
 80092e2:	4298      	cmp	r0, r3
 80092e4:	bfb8      	it	lt
 80092e6:	4618      	movlt	r0, r3
 80092e8:	e7a6      	b.n	8009238 <_printf_i+0x164>
 80092ea:	2301      	movs	r3, #1
 80092ec:	4632      	mov	r2, r6
 80092ee:	4649      	mov	r1, r9
 80092f0:	4640      	mov	r0, r8
 80092f2:	47d0      	blx	sl
 80092f4:	3001      	adds	r0, #1
 80092f6:	d09d      	beq.n	8009234 <_printf_i+0x160>
 80092f8:	3501      	adds	r5, #1
 80092fa:	68e3      	ldr	r3, [r4, #12]
 80092fc:	9903      	ldr	r1, [sp, #12]
 80092fe:	1a5b      	subs	r3, r3, r1
 8009300:	42ab      	cmp	r3, r5
 8009302:	dcf2      	bgt.n	80092ea <_printf_i+0x216>
 8009304:	e7eb      	b.n	80092de <_printf_i+0x20a>
 8009306:	2500      	movs	r5, #0
 8009308:	f104 0619 	add.w	r6, r4, #25
 800930c:	e7f5      	b.n	80092fa <_printf_i+0x226>
 800930e:	bf00      	nop
 8009310:	08009809 	.word	0x08009809
 8009314:	0800981a 	.word	0x0800981a

08009318 <__sflush_r>:
 8009318:	898a      	ldrh	r2, [r1, #12]
 800931a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931e:	4605      	mov	r5, r0
 8009320:	0710      	lsls	r0, r2, #28
 8009322:	460c      	mov	r4, r1
 8009324:	d458      	bmi.n	80093d8 <__sflush_r+0xc0>
 8009326:	684b      	ldr	r3, [r1, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	dc05      	bgt.n	8009338 <__sflush_r+0x20>
 800932c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	dc02      	bgt.n	8009338 <__sflush_r+0x20>
 8009332:	2000      	movs	r0, #0
 8009334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800933a:	2e00      	cmp	r6, #0
 800933c:	d0f9      	beq.n	8009332 <__sflush_r+0x1a>
 800933e:	2300      	movs	r3, #0
 8009340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009344:	682f      	ldr	r7, [r5, #0]
 8009346:	6a21      	ldr	r1, [r4, #32]
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	d032      	beq.n	80093b2 <__sflush_r+0x9a>
 800934c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	075a      	lsls	r2, r3, #29
 8009352:	d505      	bpl.n	8009360 <__sflush_r+0x48>
 8009354:	6863      	ldr	r3, [r4, #4]
 8009356:	1ac0      	subs	r0, r0, r3
 8009358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800935a:	b10b      	cbz	r3, 8009360 <__sflush_r+0x48>
 800935c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800935e:	1ac0      	subs	r0, r0, r3
 8009360:	2300      	movs	r3, #0
 8009362:	4602      	mov	r2, r0
 8009364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009366:	6a21      	ldr	r1, [r4, #32]
 8009368:	4628      	mov	r0, r5
 800936a:	47b0      	blx	r6
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	d106      	bne.n	8009380 <__sflush_r+0x68>
 8009372:	6829      	ldr	r1, [r5, #0]
 8009374:	291d      	cmp	r1, #29
 8009376:	d82b      	bhi.n	80093d0 <__sflush_r+0xb8>
 8009378:	4a29      	ldr	r2, [pc, #164]	; (8009420 <__sflush_r+0x108>)
 800937a:	410a      	asrs	r2, r1
 800937c:	07d6      	lsls	r6, r2, #31
 800937e:	d427      	bmi.n	80093d0 <__sflush_r+0xb8>
 8009380:	2200      	movs	r2, #0
 8009382:	6062      	str	r2, [r4, #4]
 8009384:	04d9      	lsls	r1, r3, #19
 8009386:	6922      	ldr	r2, [r4, #16]
 8009388:	6022      	str	r2, [r4, #0]
 800938a:	d504      	bpl.n	8009396 <__sflush_r+0x7e>
 800938c:	1c42      	adds	r2, r0, #1
 800938e:	d101      	bne.n	8009394 <__sflush_r+0x7c>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b903      	cbnz	r3, 8009396 <__sflush_r+0x7e>
 8009394:	6560      	str	r0, [r4, #84]	; 0x54
 8009396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009398:	602f      	str	r7, [r5, #0]
 800939a:	2900      	cmp	r1, #0
 800939c:	d0c9      	beq.n	8009332 <__sflush_r+0x1a>
 800939e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093a2:	4299      	cmp	r1, r3
 80093a4:	d002      	beq.n	80093ac <__sflush_r+0x94>
 80093a6:	4628      	mov	r0, r5
 80093a8:	f7ff fa92 	bl	80088d0 <_free_r>
 80093ac:	2000      	movs	r0, #0
 80093ae:	6360      	str	r0, [r4, #52]	; 0x34
 80093b0:	e7c0      	b.n	8009334 <__sflush_r+0x1c>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4628      	mov	r0, r5
 80093b6:	47b0      	blx	r6
 80093b8:	1c41      	adds	r1, r0, #1
 80093ba:	d1c8      	bne.n	800934e <__sflush_r+0x36>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0c5      	beq.n	800934e <__sflush_r+0x36>
 80093c2:	2b1d      	cmp	r3, #29
 80093c4:	d001      	beq.n	80093ca <__sflush_r+0xb2>
 80093c6:	2b16      	cmp	r3, #22
 80093c8:	d101      	bne.n	80093ce <__sflush_r+0xb6>
 80093ca:	602f      	str	r7, [r5, #0]
 80093cc:	e7b1      	b.n	8009332 <__sflush_r+0x1a>
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	e7ad      	b.n	8009334 <__sflush_r+0x1c>
 80093d8:	690f      	ldr	r7, [r1, #16]
 80093da:	2f00      	cmp	r7, #0
 80093dc:	d0a9      	beq.n	8009332 <__sflush_r+0x1a>
 80093de:	0793      	lsls	r3, r2, #30
 80093e0:	680e      	ldr	r6, [r1, #0]
 80093e2:	bf08      	it	eq
 80093e4:	694b      	ldreq	r3, [r1, #20]
 80093e6:	600f      	str	r7, [r1, #0]
 80093e8:	bf18      	it	ne
 80093ea:	2300      	movne	r3, #0
 80093ec:	eba6 0807 	sub.w	r8, r6, r7
 80093f0:	608b      	str	r3, [r1, #8]
 80093f2:	f1b8 0f00 	cmp.w	r8, #0
 80093f6:	dd9c      	ble.n	8009332 <__sflush_r+0x1a>
 80093f8:	6a21      	ldr	r1, [r4, #32]
 80093fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093fc:	4643      	mov	r3, r8
 80093fe:	463a      	mov	r2, r7
 8009400:	4628      	mov	r0, r5
 8009402:	47b0      	blx	r6
 8009404:	2800      	cmp	r0, #0
 8009406:	dc06      	bgt.n	8009416 <__sflush_r+0xfe>
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	e78e      	b.n	8009334 <__sflush_r+0x1c>
 8009416:	4407      	add	r7, r0
 8009418:	eba8 0800 	sub.w	r8, r8, r0
 800941c:	e7e9      	b.n	80093f2 <__sflush_r+0xda>
 800941e:	bf00      	nop
 8009420:	dfbffffe 	.word	0xdfbffffe

08009424 <_fflush_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	690b      	ldr	r3, [r1, #16]
 8009428:	4605      	mov	r5, r0
 800942a:	460c      	mov	r4, r1
 800942c:	b913      	cbnz	r3, 8009434 <_fflush_r+0x10>
 800942e:	2500      	movs	r5, #0
 8009430:	4628      	mov	r0, r5
 8009432:	bd38      	pop	{r3, r4, r5, pc}
 8009434:	b118      	cbz	r0, 800943e <_fflush_r+0x1a>
 8009436:	6a03      	ldr	r3, [r0, #32]
 8009438:	b90b      	cbnz	r3, 800943e <_fflush_r+0x1a>
 800943a:	f7fe fffd 	bl	8008438 <__sinit>
 800943e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0f3      	beq.n	800942e <_fflush_r+0xa>
 8009446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009448:	07d0      	lsls	r0, r2, #31
 800944a:	d404      	bmi.n	8009456 <_fflush_r+0x32>
 800944c:	0599      	lsls	r1, r3, #22
 800944e:	d402      	bmi.n	8009456 <_fflush_r+0x32>
 8009450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009452:	f7ff fa3a 	bl	80088ca <__retarget_lock_acquire_recursive>
 8009456:	4628      	mov	r0, r5
 8009458:	4621      	mov	r1, r4
 800945a:	f7ff ff5d 	bl	8009318 <__sflush_r>
 800945e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009460:	07da      	lsls	r2, r3, #31
 8009462:	4605      	mov	r5, r0
 8009464:	d4e4      	bmi.n	8009430 <_fflush_r+0xc>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	059b      	lsls	r3, r3, #22
 800946a:	d4e1      	bmi.n	8009430 <_fflush_r+0xc>
 800946c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800946e:	f7ff fa2d 	bl	80088cc <__retarget_lock_release_recursive>
 8009472:	e7dd      	b.n	8009430 <_fflush_r+0xc>

08009474 <__swhatbuf_r>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	2900      	cmp	r1, #0
 800947e:	b096      	sub	sp, #88	; 0x58
 8009480:	4615      	mov	r5, r2
 8009482:	461e      	mov	r6, r3
 8009484:	da0d      	bge.n	80094a2 <__swhatbuf_r+0x2e>
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f013 0f80 	tst.w	r3, #128	; 0x80
 800948c:	f04f 0100 	mov.w	r1, #0
 8009490:	bf0c      	ite	eq
 8009492:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009496:	2340      	movne	r3, #64	; 0x40
 8009498:	2000      	movs	r0, #0
 800949a:	6031      	str	r1, [r6, #0]
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	b016      	add	sp, #88	; 0x58
 80094a0:	bd70      	pop	{r4, r5, r6, pc}
 80094a2:	466a      	mov	r2, sp
 80094a4:	f000 f862 	bl	800956c <_fstat_r>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	dbec      	blt.n	8009486 <__swhatbuf_r+0x12>
 80094ac:	9901      	ldr	r1, [sp, #4]
 80094ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80094b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80094b6:	4259      	negs	r1, r3
 80094b8:	4159      	adcs	r1, r3
 80094ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094be:	e7eb      	b.n	8009498 <__swhatbuf_r+0x24>

080094c0 <__smakebuf_r>:
 80094c0:	898b      	ldrh	r3, [r1, #12]
 80094c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094c4:	079d      	lsls	r5, r3, #30
 80094c6:	4606      	mov	r6, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	d507      	bpl.n	80094dc <__smakebuf_r+0x1c>
 80094cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	6123      	str	r3, [r4, #16]
 80094d4:	2301      	movs	r3, #1
 80094d6:	6163      	str	r3, [r4, #20]
 80094d8:	b002      	add	sp, #8
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	ab01      	add	r3, sp, #4
 80094de:	466a      	mov	r2, sp
 80094e0:	f7ff ffc8 	bl	8009474 <__swhatbuf_r>
 80094e4:	9900      	ldr	r1, [sp, #0]
 80094e6:	4605      	mov	r5, r0
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7ff fa5d 	bl	80089a8 <_malloc_r>
 80094ee:	b948      	cbnz	r0, 8009504 <__smakebuf_r+0x44>
 80094f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f4:	059a      	lsls	r2, r3, #22
 80094f6:	d4ef      	bmi.n	80094d8 <__smakebuf_r+0x18>
 80094f8:	f023 0303 	bic.w	r3, r3, #3
 80094fc:	f043 0302 	orr.w	r3, r3, #2
 8009500:	81a3      	strh	r3, [r4, #12]
 8009502:	e7e3      	b.n	80094cc <__smakebuf_r+0xc>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	6020      	str	r0, [r4, #0]
 8009508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	9b00      	ldr	r3, [sp, #0]
 8009510:	6163      	str	r3, [r4, #20]
 8009512:	9b01      	ldr	r3, [sp, #4]
 8009514:	6120      	str	r0, [r4, #16]
 8009516:	b15b      	cbz	r3, 8009530 <__smakebuf_r+0x70>
 8009518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800951c:	4630      	mov	r0, r6
 800951e:	f000 f837 	bl	8009590 <_isatty_r>
 8009522:	b128      	cbz	r0, 8009530 <__smakebuf_r+0x70>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f023 0303 	bic.w	r3, r3, #3
 800952a:	f043 0301 	orr.w	r3, r3, #1
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	431d      	orrs	r5, r3
 8009534:	81a5      	strh	r5, [r4, #12]
 8009536:	e7cf      	b.n	80094d8 <__smakebuf_r+0x18>

08009538 <memmove>:
 8009538:	4288      	cmp	r0, r1
 800953a:	b510      	push	{r4, lr}
 800953c:	eb01 0402 	add.w	r4, r1, r2
 8009540:	d902      	bls.n	8009548 <memmove+0x10>
 8009542:	4284      	cmp	r4, r0
 8009544:	4623      	mov	r3, r4
 8009546:	d807      	bhi.n	8009558 <memmove+0x20>
 8009548:	1e43      	subs	r3, r0, #1
 800954a:	42a1      	cmp	r1, r4
 800954c:	d008      	beq.n	8009560 <memmove+0x28>
 800954e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009556:	e7f8      	b.n	800954a <memmove+0x12>
 8009558:	4402      	add	r2, r0
 800955a:	4601      	mov	r1, r0
 800955c:	428a      	cmp	r2, r1
 800955e:	d100      	bne.n	8009562 <memmove+0x2a>
 8009560:	bd10      	pop	{r4, pc}
 8009562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800956a:	e7f7      	b.n	800955c <memmove+0x24>

0800956c <_fstat_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	; (800958c <_fstat_r+0x20>)
 8009570:	2300      	movs	r3, #0
 8009572:	4604      	mov	r4, r0
 8009574:	4608      	mov	r0, r1
 8009576:	4611      	mov	r1, r2
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	f7f8 fd96 	bl	80020aa <_fstat>
 800957e:	1c43      	adds	r3, r0, #1
 8009580:	d102      	bne.n	8009588 <_fstat_r+0x1c>
 8009582:	682b      	ldr	r3, [r5, #0]
 8009584:	b103      	cbz	r3, 8009588 <_fstat_r+0x1c>
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	bd38      	pop	{r3, r4, r5, pc}
 800958a:	bf00      	nop
 800958c:	20000908 	.word	0x20000908

08009590 <_isatty_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d06      	ldr	r5, [pc, #24]	; (80095ac <_isatty_r+0x1c>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	602b      	str	r3, [r5, #0]
 800959c:	f7f8 fd95 	bl	80020ca <_isatty>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_isatty_r+0x1a>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_isatty_r+0x1a>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	20000908 	.word	0x20000908

080095b0 <_sbrk_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4d06      	ldr	r5, [pc, #24]	; (80095cc <_sbrk_r+0x1c>)
 80095b4:	2300      	movs	r3, #0
 80095b6:	4604      	mov	r4, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	602b      	str	r3, [r5, #0]
 80095bc:	f7f8 fd9e 	bl	80020fc <_sbrk>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_sbrk_r+0x1a>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_sbrk_r+0x1a>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	20000908 	.word	0x20000908

080095d0 <memcpy>:
 80095d0:	440a      	add	r2, r1
 80095d2:	4291      	cmp	r1, r2
 80095d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095d8:	d100      	bne.n	80095dc <memcpy+0xc>
 80095da:	4770      	bx	lr
 80095dc:	b510      	push	{r4, lr}
 80095de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e6:	4291      	cmp	r1, r2
 80095e8:	d1f9      	bne.n	80095de <memcpy+0xe>
 80095ea:	bd10      	pop	{r4, pc}

080095ec <_realloc_r>:
 80095ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f0:	4680      	mov	r8, r0
 80095f2:	4614      	mov	r4, r2
 80095f4:	460e      	mov	r6, r1
 80095f6:	b921      	cbnz	r1, 8009602 <_realloc_r+0x16>
 80095f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095fc:	4611      	mov	r1, r2
 80095fe:	f7ff b9d3 	b.w	80089a8 <_malloc_r>
 8009602:	b92a      	cbnz	r2, 8009610 <_realloc_r+0x24>
 8009604:	f7ff f964 	bl	80088d0 <_free_r>
 8009608:	4625      	mov	r5, r4
 800960a:	4628      	mov	r0, r5
 800960c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009610:	f000 f81b 	bl	800964a <_malloc_usable_size_r>
 8009614:	4284      	cmp	r4, r0
 8009616:	4607      	mov	r7, r0
 8009618:	d802      	bhi.n	8009620 <_realloc_r+0x34>
 800961a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800961e:	d812      	bhi.n	8009646 <_realloc_r+0x5a>
 8009620:	4621      	mov	r1, r4
 8009622:	4640      	mov	r0, r8
 8009624:	f7ff f9c0 	bl	80089a8 <_malloc_r>
 8009628:	4605      	mov	r5, r0
 800962a:	2800      	cmp	r0, #0
 800962c:	d0ed      	beq.n	800960a <_realloc_r+0x1e>
 800962e:	42bc      	cmp	r4, r7
 8009630:	4622      	mov	r2, r4
 8009632:	4631      	mov	r1, r6
 8009634:	bf28      	it	cs
 8009636:	463a      	movcs	r2, r7
 8009638:	f7ff ffca 	bl	80095d0 <memcpy>
 800963c:	4631      	mov	r1, r6
 800963e:	4640      	mov	r0, r8
 8009640:	f7ff f946 	bl	80088d0 <_free_r>
 8009644:	e7e1      	b.n	800960a <_realloc_r+0x1e>
 8009646:	4635      	mov	r5, r6
 8009648:	e7df      	b.n	800960a <_realloc_r+0x1e>

0800964a <_malloc_usable_size_r>:
 800964a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800964e:	1f18      	subs	r0, r3, #4
 8009650:	2b00      	cmp	r3, #0
 8009652:	bfbc      	itt	lt
 8009654:	580b      	ldrlt	r3, [r1, r0]
 8009656:	18c0      	addlt	r0, r0, r3
 8009658:	4770      	bx	lr
	...

0800965c <_init>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr

08009668 <_fini>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	bf00      	nop
 800966c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966e:	bc08      	pop	{r3}
 8009670:	469e      	mov	lr, r3
 8009672:	4770      	bx	lr
