
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b4  080046b4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046bc  080046bc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080046c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000002d0  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000032c  2000032c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fdec  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027f5  00000000  00000000  0002febb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e78  00000000  00000000  000326b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b3b  00000000  00000000  00033528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024e4c  00000000  00000000  00034063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012cf6  00000000  00000000  00058eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dff98  00000000  00000000  0006bba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004048  00000000  00000000  0014bb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0014fb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004644 	.word	0x08004644

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08004644 	.word	0x08004644

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a26      	ldr	r2, [pc, #152]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b24      	ldr	r3, [pc, #144]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_GPIO_Init+0xd4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <MX_GPIO_Init+0xd4>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_GPIO_Init+0xd4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_GPIO_Init+0xd4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <MX_GPIO_Init+0xd4>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_GPIO_Init+0xd4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f244 0181 	movw	r1, #16513	; 0x4081
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <MX_GPIO_Init+0xd8>)
 8000636:	f000 fff1 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800063a:	f244 0381 	movw	r3, #16513	; 0x4081
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_GPIO_Init+0xd8>)
 8000654:	f000 fe36 	bl	80012c4 <HAL_GPIO_Init>

}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40020400 	.word	0x40020400

08000668 <HAL_SYSTICK_Callback>:
////		flag = 1;
//		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
//	}
//}
//
void HAL_SYSTICK_Callback(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	if ((timer_cnt % 1000) == 0) {
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_SYSTICK_Callback+0x68>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_SYSTICK_Callback+0x6c>)
 8000672:	fb83 1302 	smull	r1, r3, r3, r2
 8000676:	1199      	asrs	r1, r3, #6
 8000678:	17d3      	asrs	r3, r2, #31
 800067a:	1acb      	subs	r3, r1, r3
 800067c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000680:	fb01 f303 	mul.w	r3, r1, r3
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d11b      	bne.n	80006c2 <HAL_SYSTICK_Callback+0x5a>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800068a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <HAL_SYSTICK_Callback+0x70>)
 8000690:	f000 ffdd 	bl	800164e <HAL_GPIO_TogglePin>
		memset(uart_buf, 0, sizeof(uart_buf));
 8000694:	221e      	movs	r2, #30
 8000696:	2100      	movs	r1, #0
 8000698:	4810      	ldr	r0, [pc, #64]	; (80006dc <HAL_SYSTICK_Callback+0x74>)
 800069a:	f003 fb4f 	bl	8003d3c <memset>
		sprintf(uart_buf, "%d, %d \r\n", second_cnt, timer_cnt);
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <HAL_SYSTICK_Callback+0x78>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <HAL_SYSTICK_Callback+0x68>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	490f      	ldr	r1, [pc, #60]	; (80006e4 <HAL_SYSTICK_Callback+0x7c>)
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <HAL_SYSTICK_Callback+0x74>)
 80006aa:	f003 fb27 	bl	8003cfc <siprintf>
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)&uart_buf, sizeof(uart_buf));
 80006ae:	221e      	movs	r2, #30
 80006b0:	490a      	ldr	r1, [pc, #40]	; (80006dc <HAL_SYSTICK_Callback+0x74>)
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <HAL_SYSTICK_Callback+0x80>)
 80006b4:	f002 fc17 	bl	8002ee6 <HAL_UART_Transmit_IT>
		second_cnt++;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_SYSTICK_Callback+0x78>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_SYSTICK_Callback+0x78>)
 80006c0:	6013      	str	r3, [r2, #0]
	}
	timer_cnt++;
 80006c2:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <HAL_SYSTICK_Callback+0x68>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	4a01      	ldr	r2, [pc, #4]	; (80006d0 <HAL_SYSTICK_Callback+0x68>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000009c 	.word	0x2000009c
 80006d4:	10624dd3 	.word	0x10624dd3
 80006d8:	40020400 	.word	0x40020400
 80006dc:	20000078 	.word	0x20000078
 80006e0:	20000098 	.word	0x20000098
 80006e4:	0800465c 	.word	0x0800465c
 80006e8:	2000019c 	.word	0x2000019c

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 fbcc 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f81e 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f7ff ff48 	bl	800058c <MX_GPIO_Init>
  MX_RTC_Init();
 80006fc:	f000 f8e0 	bl	80008c0 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000700:	f000 fb28 	bl	8000d54 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000704:	f000 fa3e 	bl	8000b84 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000708:	f000 f9ee 	bl	8000ae8 <MX_TIM2_Init>
  MX_TIM4_Init();
 800070c:	f000 fa88 	bl	8000c20 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000710:	f000 f882 	bl	8000818 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <main+0x3c>)
 8000716:	f001 ff67 	bl	80025e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <main+0x40>)
 800071c:	f001 ff64 	bl	80025e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <main+0x44>)
 8000722:	f001 ff61 	bl	80025e8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000726:	e7fe      	b.n	8000726 <main+0x3a>
 8000728:	200000c4 	.word	0x200000c4
 800072c:	2000010c 	.word	0x2000010c
 8000730:	20000154 	.word	0x20000154

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fafa 	bl	8003d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <SystemClock_Config+0xdc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <SystemClock_Config+0xdc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SystemClock_Config+0xdc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xe0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a25      	ldr	r2, [pc, #148]	; (8000814 <SystemClock_Config+0xe0>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000790:	2306      	movs	r3, #6
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a8:	2308      	movs	r3, #8
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007ac:	23b4      	movs	r3, #180	; 0xb4
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ffb1 	bl	8001724 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c8:	f000 f874 	bl	80008b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007cc:	f000 ff5a 	bl	8001684 <HAL_PWREx_EnableOverDrive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007d6:	f000 f86d 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2105      	movs	r1, #5
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fa0b 	bl	8001c14 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000804:	f000 f856 	bl	80008b4 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3750      	adds	r7, #80	; 0x50
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2027      	movs	r0, #39	; 0x27
 8000822:	f000 fc80 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000826:	2027      	movs	r0, #39	; 0x27
 8000828:	f000 fc99 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	201d      	movs	r0, #29
 8000832:	f000 fc78 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000836:	201d      	movs	r0, #29
 8000838:	f000 fc91 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	201e      	movs	r0, #30
 8000842:	f000 fc70 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000846:	201e      	movs	r0, #30
 8000848:	f000 fc89 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	201c      	movs	r0, #28
 8000852:	f000 fc68 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000856:	201c      	movs	r0, #28
 8000858:	f000 fc81 	bl	800115e <HAL_NVIC_EnableIRQ>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d103      	bne.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x18>
 8000870:	2101      	movs	r1, #1
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000874:	f000 feeb 	bl	800164e <HAL_GPIO_TogglePin>
	if (htim == &htim3) HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d103      	bne.n	8000888 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000884:	f000 fee3 	bl	800164e <HAL_GPIO_TogglePin>
	if (htim == &htim4) HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d104      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x3a>
 8000890:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000896:	f000 feda 	bl	800164e <HAL_GPIO_TogglePin>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000c4 	.word	0x200000c4
 80008a8:	40020400 	.word	0x40020400
 80008ac:	2000010c 	.word	0x2000010c
 80008b0:	20000154 	.word	0x20000154

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_RTC_Init+0x44>)
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <MX_RTC_Init+0x48>)
 80008c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_RTC_Init+0x44>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_RTC_Init+0x44>)
 80008d2:	227f      	movs	r2, #127	; 0x7f
 80008d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_RTC_Init+0x44>)
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_RTC_Init+0x44>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_RTC_Init+0x44>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_RTC_Init+0x44>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_RTC_Init+0x44>)
 80008f0:	f001 fd30 	bl	8002354 <HAL_RTC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80008fa:	f7ff ffdb 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000a0 	.word	0x200000a0
 8000908:	40002800 	.word	0x40002800

0800090c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	; 0x38
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2230      	movs	r2, #48	; 0x30
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f003 fa0d 	bl	8003d3c <memset>
  if(rtcHandle->Instance==RTC)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <HAL_RTC_MspInit+0x4c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d111      	bne.n	8000950 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800092c:	2320      	movs	r3, #32
 800092e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fb4a 	bl	8001fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000946:	f7ff ffb5 	bl	80008b4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <HAL_RTC_MspInit+0x50>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000950:	bf00      	nop
 8000952:	3738      	adds	r7, #56	; 0x38
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40002800 	.word	0x40002800
 800095c:	42470e3c 	.word	0x42470e3c

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_SYSTICK_IRQHandler();
 80009fc:	f000 fbc9 	bl	8001192 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 fa96 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <TIM2_IRQHandler+0x10>)
 8000a0e:	f001 fe5b 	bl	80026c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000c4 	.word	0x200000c4

08000a1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <TIM3_IRQHandler+0x10>)
 8000a22:	f001 fe51 	bl	80026c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000010c 	.word	0x2000010c

08000a30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <TIM4_IRQHandler+0x10>)
 8000a36:	f001 fe47 	bl	80026c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000154 	.word	0x20000154

08000a44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <USART3_IRQHandler+0x10>)
 8000a4a:	f002 fa91 	bl	8002f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000019c 	.word	0x2000019c

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f003 f960 	bl	8003d4c <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20030000 	.word	0x20030000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	200000c0 	.word	0x200000c0
 8000ac0:	20000330 	.word	0x20000330

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	463b      	mov	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_TIM2_Init+0x98>)
 8000b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_TIM2_Init+0x98>)
 8000b0e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_TIM2_Init+0x98>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_TIM2_Init+0x98>)
 8000b1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_TIM2_Init+0x98>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_TIM2_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b2e:	4814      	ldr	r0, [pc, #80]	; (8000b80 <MX_TIM2_Init+0x98>)
 8000b30:	f001 fd0a 	bl	8002548 <HAL_TIM_Base_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b3a:	f7ff febb 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_TIM2_Init+0x98>)
 8000b4c:	f001 fec4 	bl	80028d8 <HAL_TIM_ConfigClockSource>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b56:	f7ff fead 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_TIM2_Init+0x98>)
 8000b68:	f002 f8e0 	bl	8002d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b72:	f7ff fe9f 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000c4 	.word	0x200000c4

08000b84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_TIM3_Init+0x94>)
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <MX_TIM3_Init+0x98>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_TIM3_Init+0x94>)
 8000ba8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000bac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_TIM3_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_TIM3_Init+0x94>)
 8000bb6:	f241 3287 	movw	r2, #4999	; 0x1387
 8000bba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_TIM3_Init+0x94>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_TIM3_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <MX_TIM3_Init+0x94>)
 8000bca:	f001 fcbd 	bl	8002548 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bd4:	f7ff fe6e 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_TIM3_Init+0x94>)
 8000be6:	f001 fe77 	bl	80028d8 <HAL_TIM_ConfigClockSource>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bf0:	f7ff fe60 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_TIM3_Init+0x94>)
 8000c02:	f002 f893 	bl	8002d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c0c:	f7ff fe52 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000010c 	.word	0x2000010c
 8000c1c:	40000400 	.word	0x40000400

08000c20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <MX_TIM4_Init+0x98>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c44:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c52:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c66:	f001 fc6f 	bl	8002548 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000c70:	f7ff fe20 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c82:	f001 fe29 	bl	80028d8 <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c8c:	f7ff fe12 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c9e:	f002 f845 	bl	8002d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ca8:	f7ff fe04 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000154 	.word	0x20000154
 8000cb8:	40000800 	.word	0x40000800

08000cbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ccc:	d10e      	bne.n	8000cec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000cea:	e026      	b.n	8000d3a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_TIM_Base_MspInit+0x90>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10e      	bne.n	8000d14 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
}
 8000d12:	e012      	b.n	8000d3a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10d      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
}
 8000d3a:	bf00      	nop
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40000400 	.word	0x40000400
 8000d50:	40000800 	.word	0x40000800

08000d54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_USART3_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d8c:	f002 f85e 	bl	8002e4c <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f7ff fd8d 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000019c 	.word	0x2000019c
 8000da4:	40004800 	.word	0x40004800

08000da8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_UART_MspInit+0x84>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12c      	bne.n	8000e24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e14:	2307      	movs	r3, #7
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_UART_MspInit+0x8c>)
 8000e20:	f000 fa50 	bl	80012c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40004800 	.word	0x40004800
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3e:	490e      	ldr	r1, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e54:	4c0b      	ldr	r4, [pc, #44]	; (8000e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e62:	f7ff fe2f 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f002 ff77 	bl	8003d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fc3f 	bl	80006ec <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e70:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e7c:	080046c4 	.word	0x080046c4
  ldr r2, =_sbss
 8000e80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e84:	2000032c 	.word	0x2000032c

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f92b 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fd4e 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f943 	bl	800117a <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f90b 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	200001e0 	.word	0x200001e0

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200001e0 	.word	0x200001e0

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff3e 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff8e 	bl	8001064 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5d 	bl	8001010 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff31 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa2 	bl	80010cc <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001196:	f7ff fa67 	bl	8000668 <HAL_SYSTICK_Callback>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff fed4 	bl	8000f58 <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d008      	beq.n	80011d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e052      	b.n	8001276 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0216 	bic.w	r2, r2, #22
 80011de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d103      	bne.n	8001200 <HAL_DMA_Abort+0x62>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0208 	bic.w	r2, r2, #8
 800120e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001220:	e013      	b.n	800124a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001222:	f7ff fe99 	bl	8000f58 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b05      	cmp	r3, #5
 800122e:	d90c      	bls.n	800124a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2220      	movs	r2, #32
 8001234:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e015      	b.n	8001276 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e4      	bne.n	8001222 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	223f      	movs	r2, #63	; 0x3f
 800125e:	409a      	lsls	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d004      	beq.n	800129c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e00c      	b.n	80012b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2205      	movs	r2, #5
 80012a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0201 	bic.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e177      	b.n	80015d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 8166 	bne.w	80015ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d005      	beq.n	8001316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	2b02      	cmp	r3, #2
 8001314:	d130      	bne.n	8001378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 0201 	and.w	r2, r3, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b03      	cmp	r3, #3
 8001382:	d017      	beq.n	80013b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d123      	bne.n	8001408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	69b9      	ldr	r1, [r7, #24]
 8001404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80c0 	beq.w	80015ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_GPIO_Init+0x324>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001466:	4a61      	ldr	r2, [pc, #388]	; (80015ec <HAL_GPIO_Init+0x328>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_GPIO_Init+0x32c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d037      	beq.n	8001502 <HAL_GPIO_Init+0x23e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a57      	ldr	r2, [pc, #348]	; (80015f4 <HAL_GPIO_Init+0x330>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d031      	beq.n	80014fe <HAL_GPIO_Init+0x23a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <HAL_GPIO_Init+0x334>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d02b      	beq.n	80014fa <HAL_GPIO_Init+0x236>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a55      	ldr	r2, [pc, #340]	; (80015fc <HAL_GPIO_Init+0x338>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d025      	beq.n	80014f6 <HAL_GPIO_Init+0x232>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a54      	ldr	r2, [pc, #336]	; (8001600 <HAL_GPIO_Init+0x33c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01f      	beq.n	80014f2 <HAL_GPIO_Init+0x22e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a53      	ldr	r2, [pc, #332]	; (8001604 <HAL_GPIO_Init+0x340>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0x22a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_GPIO_Init+0x344>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x226>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_GPIO_Init+0x348>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00d      	beq.n	80014e6 <HAL_GPIO_Init+0x222>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a50      	ldr	r2, [pc, #320]	; (8001610 <HAL_GPIO_Init+0x34c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_GPIO_Init+0x21e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <HAL_GPIO_Init+0x350>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x21a>
 80014da:	2309      	movs	r3, #9
 80014dc:	e012      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014de:	230a      	movs	r3, #10
 80014e0:	e010      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014e2:	2308      	movs	r3, #8
 80014e4:	e00e      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e00c      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014ea:	2306      	movs	r3, #6
 80014ec:	e00a      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e008      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x240>
 8001502:	2300      	movs	r3, #0
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	f002 0203 	and.w	r2, r2, #3
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	4093      	lsls	r3, r2
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001514:	4935      	ldr	r1, [pc, #212]	; (80015ec <HAL_GPIO_Init+0x328>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001546:	4a34      	ldr	r2, [pc, #208]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154c:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HAL_GPIO_Init+0x354>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001570:	4a29      	ldr	r2, [pc, #164]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <HAL_GPIO_Init+0x354>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_GPIO_Init+0x354>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <HAL_GPIO_Init+0x354>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	f67f ae84 	bls.w	80012e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40013800 	.word	0x40013800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40021000 	.word	0x40021000
 8001604:	40021400 	.word	0x40021400
 8001608:	40021800 	.word	0x40021800
 800160c:	40021c00 	.word	0x40021c00
 8001610:	40022000 	.word	0x40022000
 8001614:	40022400 	.word	0x40022400
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001638:	e003      	b.n	8001642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001660:	887a      	ldrh	r2, [r7, #2]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	041a      	lsls	r2, r3, #16
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43d9      	mvns	r1, r3
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	400b      	ands	r3, r1
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_PWREx_EnableOverDrive+0x90>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_PWREx_EnableOverDrive+0x90>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_PWREx_EnableOverDrive+0x90>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_PWREx_EnableOverDrive+0x94>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b0:	f7ff fc52 	bl	8000f58 <HAL_GetTick>
 80016b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016b6:	e009      	b.n	80016cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016b8:	f7ff fc4e 	bl	8000f58 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016c6:	d901      	bls.n	80016cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e01f      	b.n	800170c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_PWREx_EnableOverDrive+0x98>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d1ee      	bne.n	80016b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e0:	f7ff fc3a 	bl	8000f58 <HAL_GetTick>
 80016e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016e6:	e009      	b.n	80016fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016e8:	f7ff fc36 	bl	8000f58 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016f6:	d901      	bls.n	80016fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e007      	b.n	800170c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_PWREx_EnableOverDrive+0x98>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001708:	d1ee      	bne.n	80016e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	420e0040 	.word	0x420e0040
 800171c:	40007000 	.word	0x40007000
 8001720:	420e0044 	.word	0x420e0044

08001724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e267      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d075      	beq.n	800182e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b04      	cmp	r3, #4
 800174c:	d00c      	beq.n	8001768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001756:	2b08      	cmp	r3, #8
 8001758:	d112      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175a:	4b82      	ldr	r3, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001766:	d10b      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	4b7e      	ldr	r3, [pc, #504]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d05b      	beq.n	800182c <HAL_RCC_OscConfig+0x108>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d157      	bne.n	800182c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e242      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d106      	bne.n	8001798 <HAL_RCC_OscConfig+0x74>
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a75      	ldr	r2, [pc, #468]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e01d      	b.n	80017d4 <HAL_RCC_OscConfig+0xb0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x98>
 80017a2:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6f      	ldr	r2, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6d      	ldr	r3, [pc, #436]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6c      	ldr	r2, [pc, #432]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0xb0>
 80017bc:	4b69      	ldr	r3, [pc, #420]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a68      	ldr	r2, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a65      	ldr	r2, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fbbc 	bl	8000f58 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fbb8 	bl	8000f58 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e207      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b5b      	ldr	r3, [pc, #364]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0xc0>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fba8 	bl	8000f58 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fba4 	bl	8000f58 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1f3      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	4b51      	ldr	r3, [pc, #324]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0xe8>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d063      	beq.n	8001902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184e:	2b08      	cmp	r3, #8
 8001850:	d11c      	bne.n	800188c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001852:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x152>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1c7      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4937      	ldr	r1, [pc, #220]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e03a      	b.n	8001902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001894:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_RCC_OscConfig+0x244>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff fb5d 	bl	8000f58 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff fb59 	bl	8000f58 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1a8      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4925      	ldr	r1, [pc, #148]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_OscConfig+0x244>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb3c 	bl	8000f58 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fb38 	bl	8000f58 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e187      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d036      	beq.n	800197c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d016      	beq.n	8001944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_RCC_OscConfig+0x248>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fb1c 	bl	8000f58 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fb18 	bl	8000f58 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e167      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x200>
 8001942:	e01b      	b.n	800197c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x248>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fb05 	bl	8000f58 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	e00e      	b.n	8001970 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff fb01 	bl	8000f58 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d907      	bls.n	8001970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e150      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
 8001964:	40023800 	.word	0x40023800
 8001968:	42470000 	.word	0x42470000
 800196c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ea      	bne.n	8001952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8097 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10f      	bne.n	80019ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a7c      	ldr	r2, [pc, #496]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a73      	ldr	r2, [pc, #460]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fac1 	bl	8000f58 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff fabd 	bl	8000f58 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e10c      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2ea>
 8001a00:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a63      	ldr	r2, [pc, #396]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	e01c      	b.n	8001a48 <HAL_RCC_OscConfig+0x324>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x30c>
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a5e      	ldr	r2, [pc, #376]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0x324>
 8001a30:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	4a57      	ldr	r2, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3c:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a42:	f023 0304 	bic.w	r3, r3, #4
 8001a46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff fa82 	bl	8000f58 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff fa7e 	bl	8000f58 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0cb      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0ee      	beq.n	8001a58 <HAL_RCC_OscConfig+0x334>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fa6c 	bl	8000f58 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff fa68 	bl	8000f58 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0b5      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	4a38      	ldr	r2, [pc, #224]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80a1 	beq.w	8001c04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d05c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d141      	bne.n	8001b5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fa3c 	bl	8000f58 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff fa38 	bl	8000f58 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e087      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fa11 	bl	8000f58 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff fa0d 	bl	8000f58 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e05c      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x416>
 8001b58:	e054      	b.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f9fa 	bl	8000f58 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff f9f6 	bl	8000f58 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e045      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x444>
 8001b86:	e03d      	b.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e038      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4ec>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d028      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d121      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d11a      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	3b01      	subs	r3, #1
 8001bea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0cc      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d90c      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d044      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d119      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e067      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f023 0203 	bic.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4934      	ldr	r1, [pc, #208]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7ff f928 	bl	8000f58 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f7ff f924 	bl	8000f58 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e04f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 020c 	and.w	r2, r3, #12
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1eb      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d20c      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f821 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f888 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023c00 	.word	0x40023c00
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08004668 	.word	0x08004668
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000004 	.word	0x20000004

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de4:	b090      	sub	sp, #64	; 0x40
 8001de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df8:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d00d      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x40>
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	f200 80a1 	bhi.w	8001f4c <HAL_RCC_GetSysClockFreq+0x16c>
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e12:	e09b      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e18:	e09b      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1a:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e1e:	e098      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e20:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d028      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	627a      	str	r2, [r7, #36]	; 0x24
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e4c:	fb03 f201 	mul.w	r2, r3, r1
 8001e50:	2300      	movs	r3, #0
 8001e52:	fb00 f303 	mul.w	r3, r0, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	4a43      	ldr	r2, [pc, #268]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e5a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e60:	460a      	mov	r2, r1
 8001e62:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e66:	4413      	add	r3, r2
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	61fa      	str	r2, [r7, #28]
 8001e72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e7a:	f7fe fa09 	bl	8000290 <__aeabi_uldivmod>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4613      	mov	r3, r2
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e86:	e053      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e88:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	2200      	movs	r2, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	617a      	str	r2, [r7, #20]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e9a:	f04f 0b00 	mov.w	fp, #0
 8001e9e:	4652      	mov	r2, sl
 8001ea0:	465b      	mov	r3, fp
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb0:	0150      	lsls	r0, r2, #5
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	ebb2 080a 	subs.w	r8, r2, sl
 8001eba:	eb63 090b 	sbc.w	r9, r3, fp
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ece:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ed2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ed6:	eb63 0509 	sbc.w	r5, r3, r9
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	00eb      	lsls	r3, r5, #3
 8001ee4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee8:	00e2      	lsls	r2, r4, #3
 8001eea:	4614      	mov	r4, r2
 8001eec:	461d      	mov	r5, r3
 8001eee:	eb14 030a 	adds.w	r3, r4, sl
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	eb45 030b 	adc.w	r3, r5, fp
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f06:	4629      	mov	r1, r5
 8001f08:	028b      	lsls	r3, r1, #10
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f10:	4621      	mov	r1, r4
 8001f12:	028a      	lsls	r2, r1, #10
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	60fa      	str	r2, [r7, #12]
 8001f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f24:	f7fe f9b4 	bl	8000290 <__aeabi_uldivmod>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3740      	adds	r7, #64	; 0x40
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	017d7840 	.word	0x017d7840

08001f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000000 	.word	0x20000000

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08004678 	.word	0x08004678

08001fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fb0:	f7ff ffdc 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4903      	ldr	r1, [pc, #12]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	08004678 	.word	0x08004678

08001fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10b      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002004:	2b00      	cmp	r3, #0
 8002006:	d075      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002008:	4b91      	ldr	r3, [pc, #580]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800200e:	f7fe ffa3 	bl	8000f58 <HAL_GetTick>
 8002012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002016:	f7fe ff9f 	bl	8000f58 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e189      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002028:	4b8a      	ldr	r3, [pc, #552]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	019a      	lsls	r2, r3, #6
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	071b      	lsls	r3, r3, #28
 800204c:	4981      	ldr	r1, [pc, #516]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01f      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002060:	4b7c      	ldr	r3, [pc, #496]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002066:	0f1b      	lsrs	r3, r3, #28
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	019a      	lsls	r2, r3, #6
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	431a      	orrs	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	071b      	lsls	r3, r3, #28
 8002080:	4974      	ldr	r1, [pc, #464]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002088:	4b72      	ldr	r3, [pc, #456]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800208a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800208e:	f023 021f 	bic.w	r2, r3, #31
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	3b01      	subs	r3, #1
 8002098:	496e      	ldr	r1, [pc, #440]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	019a      	lsls	r2, r3, #6
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	061b      	lsls	r3, r3, #24
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	071b      	lsls	r3, r3, #28
 80020c0:	4964      	ldr	r1, [pc, #400]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020c8:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020ce:	f7fe ff43 	bl	8000f58 <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020d6:	f7fe ff3f 	bl	8000f58 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e129      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020e8:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002108:	2b00      	cmp	r3, #0
 800210a:	d079      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800210c:	4b52      	ldr	r3, [pc, #328]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002112:	f7fe ff21 	bl	8000f58 <HAL_GetTick>
 8002116:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002118:	e008      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800211a:	f7fe ff1d 	bl	8000f58 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e107      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800212c:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002138:	d0ef      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d020      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	0f1b      	lsrs	r3, r3, #28
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	019a      	lsls	r2, r3, #6
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	061b      	lsls	r3, r3, #24
 8002160:	431a      	orrs	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	071b      	lsls	r3, r3, #28
 8002166:	493b      	ldr	r1, [pc, #236]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002174:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	3b01      	subs	r3, #1
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	4934      	ldr	r1, [pc, #208]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01e      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002194:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	0e1b      	lsrs	r3, r3, #24
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	019a      	lsls	r2, r3, #6
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	061b      	lsls	r3, r3, #24
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	071b      	lsls	r3, r3, #28
 80021b4:	4927      	ldr	r1, [pc, #156]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	4922      	ldr	r1, [pc, #136]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80021d2:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021d8:	f7fe febe 	bl	8000f58 <HAL_GetTick>
 80021dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80021e0:	f7fe feba 	bl	8000f58 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0a4      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021fe:	d1ef      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 808b 	beq.w	8002324 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002236:	f7fe fe8f 	bl	8000f58 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800223c:	e010      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800223e:	f7fe fe8b 	bl	8000f58 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d909      	bls.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e075      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002250:	42470068 	.word	0x42470068
 8002254:	40023800 	.word	0x40023800
 8002258:	42470070 	.word	0x42470070
 800225c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002260:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0e8      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800226c:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002274:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d02f      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	429a      	cmp	r2, r3
 8002288:	d028      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002292:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002294:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800229a:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80022a0:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022a6:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d114      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022b2:	f7fe fe51 	bl	8000f58 <HAL_GetTick>
 80022b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fe4d 	bl	8000f58 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e035      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ee      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022e8:	d10d      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fe:	4912      	ldr	r1, [pc, #72]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
 8002304:	e005      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800230c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002310:	6093      	str	r3, [r2, #8]
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002314:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231e:	490a      	ldr	r1, [pc, #40]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002320:	4313      	orrs	r3, r2
 8002322:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002338:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40007000 	.word	0x40007000
 8002348:	40023800 	.word	0x40023800
 800234c:	42470e40 	.word	0x42470e40
 8002350:	424711e0 	.word	0x424711e0

08002354 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e066      	b.n	8002438 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7f5b      	ldrb	r3, [r3, #29]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fac6 	bl	800090c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	22ca      	movs	r2, #202	; 0xca
 800238c:	625a      	str	r2, [r3, #36]	; 0x24
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2253      	movs	r2, #83	; 0x53
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f87a 	bl	8002490 <RTC_EnterInitMode>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d12c      	bne.n	8002400 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80023b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023b8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68d2      	ldr	r2, [r2, #12]
 80023e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6919      	ldr	r1, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f881 	bl	80024fe <RTC_ExitInitMode>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d113      	bne.n	800242e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800245a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800245c:	f7fe fd7c 	bl	8000f58 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002462:	e009      	b.n	8002478 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002464:	f7fe fd78 	bl	8000f58 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002472:	d901      	bls.n	8002478 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e007      	b.n	8002488 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ee      	beq.n	8002464 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d122      	bne.n	80024f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024be:	f7fe fd4b 	bl	8000f58 <HAL_GetTick>
 80024c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80024c4:	e00c      	b.n	80024e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024c6:	f7fe fd47 	bl	8000f58 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024d4:	d904      	bls.n	80024e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2204      	movs	r2, #4
 80024da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <RTC_EnterInitMode+0x64>
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d1e8      	bne.n	80024c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002518:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff89 	bl	8002440 <HAL_RTC_WaitForSynchro>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e041      	b.n	80025de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fba4 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3304      	adds	r3, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f000 fa96 	bl	8002ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e04e      	b.n	800269e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_TIM_Base_Start_IT+0xc4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d022      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d01d      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d018      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00e      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <HAL_TIM_Base_Start_IT+0xd4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d111      	bne.n	800268c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b06      	cmp	r3, #6
 8002678:	d010      	beq.n	800269c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268a:	e007      	b.n	800269c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40010000 	.word	0x40010000
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40000800 	.word	0x40000800
 80026b8:	40000c00 	.word	0x40000c00
 80026bc:	40010400 	.word	0x40010400
 80026c0:	40014000 	.word	0x40014000
 80026c4:	40001800 	.word	0x40001800

080026c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d122      	bne.n	8002724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d11b      	bne.n	8002724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0202 	mvn.w	r2, #2
 80026f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f9b5 	bl	8002a7a <HAL_TIM_IC_CaptureCallback>
 8002710:	e005      	b.n	800271e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f9a7 	bl	8002a66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f9b8 	bl	8002a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b04      	cmp	r3, #4
 8002730:	d122      	bne.n	8002778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b04      	cmp	r3, #4
 800273e:	d11b      	bne.n	8002778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0204 	mvn.w	r2, #4
 8002748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2202      	movs	r2, #2
 800274e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f98b 	bl	8002a7a <HAL_TIM_IC_CaptureCallback>
 8002764:	e005      	b.n	8002772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f97d 	bl	8002a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f98e 	bl	8002a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d122      	bne.n	80027cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b08      	cmp	r3, #8
 8002792:	d11b      	bne.n	80027cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0208 	mvn.w	r2, #8
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2204      	movs	r2, #4
 80027a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f961 	bl	8002a7a <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f953 	bl	8002a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f964 	bl	8002a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d122      	bne.n	8002820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d11b      	bne.n	8002820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0210 	mvn.w	r2, #16
 80027f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2208      	movs	r2, #8
 80027f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f937 	bl	8002a7a <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f929 	bl	8002a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f93a 	bl	8002a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b01      	cmp	r3, #1
 800282c:	d10e      	bne.n	800284c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0201 	mvn.w	r2, #1
 8002844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe f80a 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	2b80      	cmp	r3, #128	; 0x80
 8002858:	d10e      	bne.n	8002878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d107      	bne.n	8002878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fae0 	bl	8002e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d10e      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d107      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800289c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8ff 	bl	8002aa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d10e      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d107      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0220 	mvn.w	r2, #32
 80028c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 faaa 	bl	8002e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e0b4      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x186>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800291a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292c:	d03e      	beq.n	80029ac <HAL_TIM_ConfigClockSource+0xd4>
 800292e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002932:	f200 8087 	bhi.w	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293a:	f000 8086 	beq.w	8002a4a <HAL_TIM_ConfigClockSource+0x172>
 800293e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002942:	d87f      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002944:	2b70      	cmp	r3, #112	; 0x70
 8002946:	d01a      	beq.n	800297e <HAL_TIM_ConfigClockSource+0xa6>
 8002948:	2b70      	cmp	r3, #112	; 0x70
 800294a:	d87b      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 800294c:	2b60      	cmp	r3, #96	; 0x60
 800294e:	d050      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002950:	2b60      	cmp	r3, #96	; 0x60
 8002952:	d877      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002954:	2b50      	cmp	r3, #80	; 0x50
 8002956:	d03c      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002958:	2b50      	cmp	r3, #80	; 0x50
 800295a:	d873      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 800295c:	2b40      	cmp	r3, #64	; 0x40
 800295e:	d058      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0x13a>
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d86f      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002964:	2b30      	cmp	r3, #48	; 0x30
 8002966:	d064      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x15a>
 8002968:	2b30      	cmp	r3, #48	; 0x30
 800296a:	d86b      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b20      	cmp	r3, #32
 800296e:	d060      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x15a>
 8002970:	2b20      	cmp	r3, #32
 8002972:	d867      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d05c      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x15a>
 8002978:	2b10      	cmp	r3, #16
 800297a:	d05a      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x15a>
 800297c:	e062      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f000 f9ad 	bl	8002cec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	609a      	str	r2, [r3, #8]
      break;
 80029aa:	e04f      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6899      	ldr	r1, [r3, #8]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f000 f996 	bl	8002cec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ce:	609a      	str	r2, [r3, #8]
      break;
 80029d0:	e03c      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	461a      	mov	r2, r3
 80029e0:	f000 f90a 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2150      	movs	r1, #80	; 0x50
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f963 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 80029f0:	e02c      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6859      	ldr	r1, [r3, #4]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f000 f929 	bl	8002c56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2160      	movs	r1, #96	; 0x60
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f953 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002a10:	e01c      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f000 f8ea 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2140      	movs	r1, #64	; 0x40
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f943 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002a30:	e00c      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f000 f93a 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002a42:	e003      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	e000      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a40      	ldr	r2, [pc, #256]	; (8002bcc <TIM_Base_SetConfig+0x114>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d013      	beq.n	8002af8 <TIM_Base_SetConfig+0x40>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d00f      	beq.n	8002af8 <TIM_Base_SetConfig+0x40>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3d      	ldr	r2, [pc, #244]	; (8002bd0 <TIM_Base_SetConfig+0x118>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00b      	beq.n	8002af8 <TIM_Base_SetConfig+0x40>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a3c      	ldr	r2, [pc, #240]	; (8002bd4 <TIM_Base_SetConfig+0x11c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d007      	beq.n	8002af8 <TIM_Base_SetConfig+0x40>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3b      	ldr	r2, [pc, #236]	; (8002bd8 <TIM_Base_SetConfig+0x120>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d003      	beq.n	8002af8 <TIM_Base_SetConfig+0x40>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a3a      	ldr	r2, [pc, #232]	; (8002bdc <TIM_Base_SetConfig+0x124>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d108      	bne.n	8002b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2f      	ldr	r2, [pc, #188]	; (8002bcc <TIM_Base_SetConfig+0x114>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02b      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b18:	d027      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a2c      	ldr	r2, [pc, #176]	; (8002bd0 <TIM_Base_SetConfig+0x118>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d023      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <TIM_Base_SetConfig+0x11c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01f      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a2a      	ldr	r2, [pc, #168]	; (8002bd8 <TIM_Base_SetConfig+0x120>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01b      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <TIM_Base_SetConfig+0x124>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d017      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a28      	ldr	r2, [pc, #160]	; (8002be0 <TIM_Base_SetConfig+0x128>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <TIM_Base_SetConfig+0x12c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00f      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <TIM_Base_SetConfig+0x130>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00b      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a25      	ldr	r2, [pc, #148]	; (8002bec <TIM_Base_SetConfig+0x134>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <TIM_Base_SetConfig+0x138>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d003      	beq.n	8002b6a <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a23      	ldr	r2, [pc, #140]	; (8002bf4 <TIM_Base_SetConfig+0x13c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d108      	bne.n	8002b7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <TIM_Base_SetConfig+0x114>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <TIM_Base_SetConfig+0xf8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <TIM_Base_SetConfig+0x124>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d103      	bne.n	8002bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	615a      	str	r2, [r3, #20]
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	40000800 	.word	0x40000800
 8002bd8:	40000c00 	.word	0x40000c00
 8002bdc:	40010400 	.word	0x40010400
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800
 8002bec:	40001800 	.word	0x40001800
 8002bf0:	40001c00 	.word	0x40001c00
 8002bf4:	40002000 	.word	0x40002000

08002bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f023 0201 	bic.w	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 030a 	bic.w	r3, r3, #10
 8002c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b087      	sub	sp, #28
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f023 0210 	bic.w	r2, r3, #16
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	031b      	lsls	r3, r3, #12
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f043 0307 	orr.w	r3, r3, #7
 8002cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	021a      	lsls	r2, r3, #8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e05a      	b.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a21      	ldr	r2, [pc, #132]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d022      	beq.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d01d      	beq.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d018      	beq.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00e      	beq.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10c      	bne.n	8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800
 8002e14:	40000c00 	.word	0x40000c00
 8002e18:	40010400 	.word	0x40010400
 8002e1c:	40014000 	.word	0x40014000
 8002e20:	40001800 	.word	0x40001800

08002e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e03f      	b.n	8002ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd ff98 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2224      	movs	r2, #36	; 0x24
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fcbf 	bl	8003814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d130      	bne.n	8002f62 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_UART_Transmit_IT+0x26>
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e029      	b.n	8002f64 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Transmit_IT+0x38>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e022      	b.n	8002f64 <HAL_UART_Transmit_IT+0x7e>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2221      	movs	r2, #33	; 0x21
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f5c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0ba      	sub	sp, #232	; 0xe8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x66>
 8002fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fb65 	bl	800369e <UART_Receive_IT>
      return;
 8002fd4:	e256      	b.n	8003484 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80de 	beq.w	800319c <HAL_UART_IRQHandler+0x22c>
 8002fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80d1 	beq.w	800319c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_UART_IRQHandler+0xae>
 8003006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800301e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_UART_IRQHandler+0xd2>
 800302a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f043 0202 	orr.w	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_UART_IRQHandler+0xf6>
 800304e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d011      	beq.n	8003096 <HAL_UART_IRQHandler+0x126>
 8003072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d105      	bne.n	800308a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800307e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0208 	orr.w	r2, r3, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 81ed 	beq.w	800347a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_UART_IRQHandler+0x14e>
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 faf0 	bl	800369e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <HAL_UART_IRQHandler+0x17a>
 80030e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d04f      	beq.n	800318a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f9f8 	bl	80034e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d141      	bne.n	8003182 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3314      	adds	r3, #20
 8003126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800312a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1d9      	bne.n	80030fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	2b00      	cmp	r3, #0
 8003150:	d013      	beq.n	800317a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	4a7d      	ldr	r2, [pc, #500]	; (800334c <HAL_UART_IRQHandler+0x3dc>)
 8003158:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe f88d 	bl	800127e <HAL_DMA_Abort_IT>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003174:	4610      	mov	r0, r2
 8003176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e00e      	b.n	8003198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f99a 	bl	80034b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	e00a      	b.n	8003198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f996 	bl	80034b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	e006      	b.n	8003198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f992 	bl	80034b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003196:	e170      	b.n	800347a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	bf00      	nop
    return;
 800319a:	e16e      	b.n	800347a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	f040 814a 	bne.w	800343a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8143 	beq.w	800343a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 813c 	beq.w	800343a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	f040 80b4 	bne.w	8003350 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8140 	beq.w	800347e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003206:	429a      	cmp	r2, r3
 8003208:	f080 8139 	bcs.w	800347e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003212:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321e:	f000 8088 	beq.w	8003332 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	330c      	adds	r3, #12
 8003228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800323c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	330c      	adds	r3, #12
 800324a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800324e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800325a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1d9      	bne.n	8003222 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800327e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3314      	adds	r3, #20
 800328e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003292:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003296:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003298:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800329a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e1      	bne.n	800326e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3314      	adds	r3, #20
 80032b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3314      	adds	r3, #20
 80032ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032d6:	e841 2300 	strex	r3, r2, [r1]
 80032da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e3      	bne.n	80032aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003302:	f023 0310 	bic.w	r3, r3, #16
 8003306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003314:	65ba      	str	r2, [r7, #88]	; 0x58
 8003316:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003318:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800331a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800331c:	e841 2300 	strex	r3, r2, [r1]
 8003320:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e3      	bne.n	80032f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd ff36 	bl	800119e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333a:	b29b      	uxth	r3, r3
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8c0 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003348:	e099      	b.n	800347e <HAL_UART_IRQHandler+0x50e>
 800334a:	bf00      	nop
 800334c:	080035a7 	.word	0x080035a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003358:	b29b      	uxth	r3, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 808b 	beq.w	8003482 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800336c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8086 	beq.w	8003482 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800338c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800339a:	647a      	str	r2, [r7, #68]	; 0x44
 800339c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e3      	bne.n	8003376 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3314      	adds	r3, #20
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	623b      	str	r3, [r7, #32]
   return(result);
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033d2:	633a      	str	r2, [r7, #48]	; 0x30
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e3      	bne.n	80033ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	60fb      	str	r3, [r7, #12]
   return(result);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0310 	bic.w	r3, r3, #16
 800340a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003418:	61fa      	str	r2, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	617b      	str	r3, [r7, #20]
   return(result);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e3      	bne.n	80033f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800342c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f848 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003438:	e023      	b.n	8003482 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_UART_IRQHandler+0x4ea>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8bb 	bl	80035ce <UART_Transmit_IT>
    return;
 8003458:	e014      	b.n	8003484 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00e      	beq.n	8003484 <HAL_UART_IRQHandler+0x514>
 8003466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8fb 	bl	800366e <UART_EndTransmit_IT>
    return;
 8003478:	e004      	b.n	8003484 <HAL_UART_IRQHandler+0x514>
    return;
 800347a:	bf00      	nop
 800347c:	e002      	b.n	8003484 <HAL_UART_IRQHandler+0x514>
      return;
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <HAL_UART_IRQHandler+0x514>
      return;
 8003482:	bf00      	nop
  }
}
 8003484:	37e8      	adds	r7, #232	; 0xe8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop

0800348c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b095      	sub	sp, #84	; 0x54
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003508:	643a      	str	r2, [r7, #64]	; 0x40
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800350e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e5      	bne.n	80034e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3314      	adds	r3, #20
 8003522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	61fb      	str	r3, [r7, #28]
   return(result);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	64bb      	str	r3, [r7, #72]	; 0x48
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3314      	adds	r3, #20
 800353a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800353c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e5      	bne.n	800351c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	2b01      	cmp	r3, #1
 8003556:	d119      	bne.n	800358c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	60bb      	str	r3, [r7, #8]
   return(result);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f023 0310 	bic.w	r3, r3, #16
 800356e:	647b      	str	r3, [r7, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003578:	61ba      	str	r2, [r7, #24]
 800357a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	6979      	ldr	r1, [r7, #20]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	613b      	str	r3, [r7, #16]
   return(result);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e5      	bne.n	8003558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800359a:	bf00      	nop
 800359c:	3754      	adds	r7, #84	; 0x54
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff ff77 	bl	80034b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b21      	cmp	r3, #33	; 0x21
 80035e0:	d13e      	bne.n	8003660 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	d114      	bne.n	8003616 <UART_Transmit_IT+0x48>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d110      	bne.n	8003616 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003608:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	1c9a      	adds	r2, r3, #2
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	621a      	str	r2, [r3, #32]
 8003614:	e008      	b.n	8003628 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	1c59      	adds	r1, r3, #1
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6211      	str	r1, [r2, #32]
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29b      	uxth	r3, r3
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4619      	mov	r1, r3
 8003636:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10f      	bne.n	800365c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800364a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800365a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003684:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fefc 	bl	800348c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b08c      	sub	sp, #48	; 0x30
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b22      	cmp	r3, #34	; 0x22
 80036b0:	f040 80ab 	bne.w	800380a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	d117      	bne.n	80036ee <UART_Receive_IT+0x50>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d113      	bne.n	80036ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	1c9a      	adds	r2, r3, #2
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
 80036ec:	e026      	b.n	800373c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	d007      	beq.n	8003712 <UART_Receive_IT+0x74>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <UART_Receive_IT+0x82>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e008      	b.n	8003732 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372c:	b2da      	uxtb	r2, r3
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4619      	mov	r1, r3
 800374a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800374c:	2b00      	cmp	r3, #0
 800374e:	d15a      	bne.n	8003806 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0220 	bic.w	r2, r2, #32
 800375e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800376e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	2b01      	cmp	r3, #1
 800378e:	d135      	bne.n	80037fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	613b      	str	r3, [r7, #16]
   return(result);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f023 0310 	bic.w	r3, r3, #16
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	623a      	str	r2, [r7, #32]
 80037b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	69f9      	ldr	r1, [r7, #28]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e5      	bne.n	8003796 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d10a      	bne.n	80037ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fe67 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
 80037fa:	e002      	b.n	8003802 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fe4f 	bl	80034a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e002      	b.n	800380c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3730      	adds	r7, #48	; 0x30
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003818:	b0c0      	sub	sp, #256	; 0x100
 800381a:	af00      	add	r7, sp, #0
 800381c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	68d9      	ldr	r1, [r3, #12]
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	ea40 0301 	orr.w	r3, r0, r1
 800383c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	431a      	orrs	r2, r3
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	431a      	orrs	r2, r3
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800386c:	f021 010c 	bic.w	r1, r1, #12
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800387a:	430b      	orrs	r3, r1
 800387c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388e:	6999      	ldr	r1, [r3, #24]
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	ea40 0301 	orr.w	r3, r0, r1
 800389a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b8f      	ldr	r3, [pc, #572]	; (8003ae0 <UART_SetConfig+0x2cc>)
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d005      	beq.n	80038b4 <UART_SetConfig+0xa0>
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b8d      	ldr	r3, [pc, #564]	; (8003ae4 <UART_SetConfig+0x2d0>)
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d104      	bne.n	80038be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7fe fb7a 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 80038b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038bc:	e003      	b.n	80038c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038be:	f7fe fb61 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 80038c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d0:	f040 810c 	bne.w	8003aec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d8:	2200      	movs	r2, #0
 80038da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	1891      	adds	r1, r2, r2
 80038ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80038ee:	415b      	adcs	r3, r3
 80038f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038f6:	4621      	mov	r1, r4
 80038f8:	eb12 0801 	adds.w	r8, r2, r1
 80038fc:	4629      	mov	r1, r5
 80038fe:	eb43 0901 	adc.w	r9, r3, r1
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800390e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003916:	4690      	mov	r8, r2
 8003918:	4699      	mov	r9, r3
 800391a:	4623      	mov	r3, r4
 800391c:	eb18 0303 	adds.w	r3, r8, r3
 8003920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003924:	462b      	mov	r3, r5
 8003926:	eb49 0303 	adc.w	r3, r9, r3
 800392a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800393a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800393e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003942:	460b      	mov	r3, r1
 8003944:	18db      	adds	r3, r3, r3
 8003946:	653b      	str	r3, [r7, #80]	; 0x50
 8003948:	4613      	mov	r3, r2
 800394a:	eb42 0303 	adc.w	r3, r2, r3
 800394e:	657b      	str	r3, [r7, #84]	; 0x54
 8003950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003958:	f7fc fc9a 	bl	8000290 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003962:	fba3 2302 	umull	r2, r3, r3, r2
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	011c      	lsls	r4, r3, #4
 800396a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003974:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	1891      	adds	r1, r2, r2
 8003982:	64b9      	str	r1, [r7, #72]	; 0x48
 8003984:	415b      	adcs	r3, r3
 8003986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800398c:	4641      	mov	r1, r8
 800398e:	eb12 0a01 	adds.w	sl, r2, r1
 8003992:	4649      	mov	r1, r9
 8003994:	eb43 0b01 	adc.w	fp, r3, r1
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ac:	4692      	mov	sl, r2
 80039ae:	469b      	mov	fp, r3
 80039b0:	4643      	mov	r3, r8
 80039b2:	eb1a 0303 	adds.w	r3, sl, r3
 80039b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ba:	464b      	mov	r3, r9
 80039bc:	eb4b 0303 	adc.w	r3, fp, r3
 80039c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039d8:	460b      	mov	r3, r1
 80039da:	18db      	adds	r3, r3, r3
 80039dc:	643b      	str	r3, [r7, #64]	; 0x40
 80039de:	4613      	mov	r3, r2
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
 80039e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039ee:	f7fc fc4f 	bl	8000290 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <UART_SetConfig+0x2d4>)
 80039fa:	fba3 2301 	umull	r2, r3, r3, r1
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2264      	movs	r2, #100	; 0x64
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	1acb      	subs	r3, r1, r3
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a0e:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003a10:	fba3 2302 	umull	r2, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a1c:	441c      	add	r4, r3
 8003a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	1891      	adds	r1, r2, r2
 8003a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a38:	415b      	adcs	r3, r3
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a40:	4641      	mov	r1, r8
 8003a42:	1851      	adds	r1, r2, r1
 8003a44:	6339      	str	r1, [r7, #48]	; 0x30
 8003a46:	4649      	mov	r1, r9
 8003a48:	414b      	adcs	r3, r1
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a58:	4659      	mov	r1, fp
 8003a5a:	00cb      	lsls	r3, r1, #3
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a62:	4651      	mov	r1, sl
 8003a64:	00ca      	lsls	r2, r1, #3
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a74:	464b      	mov	r3, r9
 8003a76:	460a      	mov	r2, r1
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a94:	460b      	mov	r3, r1
 8003a96:	18db      	adds	r3, r3, r3
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	eb42 0303 	adc.w	r3, r2, r3
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003aaa:	f7fc fbf1 	bl	8000290 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	2164      	movs	r1, #100	; 0x64
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	3332      	adds	r3, #50	; 0x32
 8003ac6:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	f003 0207 	and.w	r2, r3, #7
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4422      	add	r2, r4
 8003ada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003adc:	e106      	b.n	8003cec <UART_SetConfig+0x4d8>
 8003ade:	bf00      	nop
 8003ae0:	40011000 	.word	0x40011000
 8003ae4:	40011400 	.word	0x40011400
 8003ae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003af6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003afa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003afe:	4642      	mov	r2, r8
 8003b00:	464b      	mov	r3, r9
 8003b02:	1891      	adds	r1, r2, r2
 8003b04:	6239      	str	r1, [r7, #32]
 8003b06:	415b      	adcs	r3, r3
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b0e:	4641      	mov	r1, r8
 8003b10:	1854      	adds	r4, r2, r1
 8003b12:	4649      	mov	r1, r9
 8003b14:	eb43 0501 	adc.w	r5, r3, r1
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	00eb      	lsls	r3, r5, #3
 8003b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4643      	mov	r3, r8
 8003b2e:	18e3      	adds	r3, r4, r3
 8003b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b34:	464b      	mov	r3, r9
 8003b36:	eb45 0303 	adc.w	r3, r5, r3
 8003b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	008b      	lsls	r3, r1, #2
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b64:	4621      	mov	r1, r4
 8003b66:	008a      	lsls	r2, r1, #2
 8003b68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b6c:	f7fc fb90 	bl	8000290 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4b60      	ldr	r3, [pc, #384]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003b76:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	011c      	lsls	r4, r3, #4
 8003b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	61b9      	str	r1, [r7, #24]
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	1851      	adds	r1, r2, r1
 8003ba4:	6139      	str	r1, [r7, #16]
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	414b      	adcs	r3, r1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb8:	4659      	mov	r1, fp
 8003bba:	00cb      	lsls	r3, r1, #3
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	00ca      	lsls	r2, r1, #3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4642      	mov	r2, r8
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	eb42 0303 	adc.w	r3, r2, r3
 8003bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	008b      	lsls	r3, r1, #2
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c02:	4641      	mov	r1, r8
 8003c04:	008a      	lsls	r2, r1, #2
 8003c06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c0a:	f7fc fb41 	bl	8000290 <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003c16:	fba3 2301 	umull	r2, r3, r3, r1
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2264      	movs	r2, #100	; 0x64
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	1acb      	subs	r3, r1, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	4a33      	ldr	r2, [pc, #204]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c34:	441c      	add	r4, r3
 8003c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	673b      	str	r3, [r7, #112]	; 0x70
 8003c3e:	677a      	str	r2, [r7, #116]	; 0x74
 8003c40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c44:	4642      	mov	r2, r8
 8003c46:	464b      	mov	r3, r9
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c54:	4641      	mov	r1, r8
 8003c56:	1851      	adds	r1, r2, r1
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	414b      	adcs	r3, r1
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	00cb      	lsls	r3, r1, #3
 8003c70:	4651      	mov	r1, sl
 8003c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c76:	4651      	mov	r1, sl
 8003c78:	00ca      	lsls	r2, r1, #3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4642      	mov	r2, r8
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c86:	464b      	mov	r3, r9
 8003c88:	460a      	mov	r2, r1
 8003c8a:	eb42 0303 	adc.w	r3, r2, r3
 8003c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	663b      	str	r3, [r7, #96]	; 0x60
 8003c9a:	667a      	str	r2, [r7, #100]	; 0x64
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ca8:	4649      	mov	r1, r9
 8003caa:	008b      	lsls	r3, r1, #2
 8003cac:	4641      	mov	r1, r8
 8003cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	008a      	lsls	r2, r1, #2
 8003cb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cba:	f7fc fae9 	bl	8000290 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	; 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	3332      	adds	r3, #50	; 0x32
 8003cd6:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 020f 	and.w	r2, r3, #15
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4422      	add	r2, r4
 8003cea:	609a      	str	r2, [r3, #8]
}
 8003cec:	bf00      	nop
 8003cee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf8:	51eb851f 	.word	0x51eb851f

08003cfc <siprintf>:
 8003cfc:	b40e      	push	{r1, r2, r3}
 8003cfe:	b500      	push	{lr}
 8003d00:	b09c      	sub	sp, #112	; 0x70
 8003d02:	ab1d      	add	r3, sp, #116	; 0x74
 8003d04:	9002      	str	r0, [sp, #8]
 8003d06:	9006      	str	r0, [sp, #24]
 8003d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d0c:	4809      	ldr	r0, [pc, #36]	; (8003d34 <siprintf+0x38>)
 8003d0e:	9107      	str	r1, [sp, #28]
 8003d10:	9104      	str	r1, [sp, #16]
 8003d12:	4909      	ldr	r1, [pc, #36]	; (8003d38 <siprintf+0x3c>)
 8003d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d18:	9105      	str	r1, [sp, #20]
 8003d1a:	6800      	ldr	r0, [r0, #0]
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	a902      	add	r1, sp, #8
 8003d20:	f000 f992 	bl	8004048 <_svfiprintf_r>
 8003d24:	9b02      	ldr	r3, [sp, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	b01c      	add	sp, #112	; 0x70
 8003d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d30:	b003      	add	sp, #12
 8003d32:	4770      	bx	lr
 8003d34:	20000058 	.word	0x20000058
 8003d38:	ffff0208 	.word	0xffff0208

08003d3c <memset>:
 8003d3c:	4402      	add	r2, r0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d100      	bne.n	8003d46 <memset+0xa>
 8003d44:	4770      	bx	lr
 8003d46:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4a:	e7f9      	b.n	8003d40 <memset+0x4>

08003d4c <__errno>:
 8003d4c:	4b01      	ldr	r3, [pc, #4]	; (8003d54 <__errno+0x8>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000058 	.word	0x20000058

08003d58 <__libc_init_array>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	4d0d      	ldr	r5, [pc, #52]	; (8003d90 <__libc_init_array+0x38>)
 8003d5c:	4c0d      	ldr	r4, [pc, #52]	; (8003d94 <__libc_init_array+0x3c>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	2600      	movs	r6, #0
 8003d64:	42a6      	cmp	r6, r4
 8003d66:	d109      	bne.n	8003d7c <__libc_init_array+0x24>
 8003d68:	4d0b      	ldr	r5, [pc, #44]	; (8003d98 <__libc_init_array+0x40>)
 8003d6a:	4c0c      	ldr	r4, [pc, #48]	; (8003d9c <__libc_init_array+0x44>)
 8003d6c:	f000 fc6a 	bl	8004644 <_init>
 8003d70:	1b64      	subs	r4, r4, r5
 8003d72:	10a4      	asrs	r4, r4, #2
 8003d74:	2600      	movs	r6, #0
 8003d76:	42a6      	cmp	r6, r4
 8003d78:	d105      	bne.n	8003d86 <__libc_init_array+0x2e>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d80:	4798      	blx	r3
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7ee      	b.n	8003d64 <__libc_init_array+0xc>
 8003d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8a:	4798      	blx	r3
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	e7f2      	b.n	8003d76 <__libc_init_array+0x1e>
 8003d90:	080046bc 	.word	0x080046bc
 8003d94:	080046bc 	.word	0x080046bc
 8003d98:	080046bc 	.word	0x080046bc
 8003d9c:	080046c0 	.word	0x080046c0

08003da0 <__retarget_lock_acquire_recursive>:
 8003da0:	4770      	bx	lr

08003da2 <__retarget_lock_release_recursive>:
 8003da2:	4770      	bx	lr

08003da4 <_free_r>:
 8003da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003da6:	2900      	cmp	r1, #0
 8003da8:	d044      	beq.n	8003e34 <_free_r+0x90>
 8003daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dae:	9001      	str	r0, [sp, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f1a1 0404 	sub.w	r4, r1, #4
 8003db6:	bfb8      	it	lt
 8003db8:	18e4      	addlt	r4, r4, r3
 8003dba:	f000 f8df 	bl	8003f7c <__malloc_lock>
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <_free_r+0x94>)
 8003dc0:	9801      	ldr	r0, [sp, #4]
 8003dc2:	6813      	ldr	r3, [r2, #0]
 8003dc4:	b933      	cbnz	r3, 8003dd4 <_free_r+0x30>
 8003dc6:	6063      	str	r3, [r4, #4]
 8003dc8:	6014      	str	r4, [r2, #0]
 8003dca:	b003      	add	sp, #12
 8003dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dd0:	f000 b8da 	b.w	8003f88 <__malloc_unlock>
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	d908      	bls.n	8003dea <_free_r+0x46>
 8003dd8:	6825      	ldr	r5, [r4, #0]
 8003dda:	1961      	adds	r1, r4, r5
 8003ddc:	428b      	cmp	r3, r1
 8003dde:	bf01      	itttt	eq
 8003de0:	6819      	ldreq	r1, [r3, #0]
 8003de2:	685b      	ldreq	r3, [r3, #4]
 8003de4:	1949      	addeq	r1, r1, r5
 8003de6:	6021      	streq	r1, [r4, #0]
 8003de8:	e7ed      	b.n	8003dc6 <_free_r+0x22>
 8003dea:	461a      	mov	r2, r3
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	b10b      	cbz	r3, 8003df4 <_free_r+0x50>
 8003df0:	42a3      	cmp	r3, r4
 8003df2:	d9fa      	bls.n	8003dea <_free_r+0x46>
 8003df4:	6811      	ldr	r1, [r2, #0]
 8003df6:	1855      	adds	r5, r2, r1
 8003df8:	42a5      	cmp	r5, r4
 8003dfa:	d10b      	bne.n	8003e14 <_free_r+0x70>
 8003dfc:	6824      	ldr	r4, [r4, #0]
 8003dfe:	4421      	add	r1, r4
 8003e00:	1854      	adds	r4, r2, r1
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	6011      	str	r1, [r2, #0]
 8003e06:	d1e0      	bne.n	8003dca <_free_r+0x26>
 8003e08:	681c      	ldr	r4, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	6053      	str	r3, [r2, #4]
 8003e0e:	440c      	add	r4, r1
 8003e10:	6014      	str	r4, [r2, #0]
 8003e12:	e7da      	b.n	8003dca <_free_r+0x26>
 8003e14:	d902      	bls.n	8003e1c <_free_r+0x78>
 8003e16:	230c      	movs	r3, #12
 8003e18:	6003      	str	r3, [r0, #0]
 8003e1a:	e7d6      	b.n	8003dca <_free_r+0x26>
 8003e1c:	6825      	ldr	r5, [r4, #0]
 8003e1e:	1961      	adds	r1, r4, r5
 8003e20:	428b      	cmp	r3, r1
 8003e22:	bf04      	itt	eq
 8003e24:	6819      	ldreq	r1, [r3, #0]
 8003e26:	685b      	ldreq	r3, [r3, #4]
 8003e28:	6063      	str	r3, [r4, #4]
 8003e2a:	bf04      	itt	eq
 8003e2c:	1949      	addeq	r1, r1, r5
 8003e2e:	6021      	streq	r1, [r4, #0]
 8003e30:	6054      	str	r4, [r2, #4]
 8003e32:	e7ca      	b.n	8003dca <_free_r+0x26>
 8003e34:	b003      	add	sp, #12
 8003e36:	bd30      	pop	{r4, r5, pc}
 8003e38:	20000324 	.word	0x20000324

08003e3c <sbrk_aligned>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4e0e      	ldr	r6, [pc, #56]	; (8003e78 <sbrk_aligned+0x3c>)
 8003e40:	460c      	mov	r4, r1
 8003e42:	6831      	ldr	r1, [r6, #0]
 8003e44:	4605      	mov	r5, r0
 8003e46:	b911      	cbnz	r1, 8003e4e <sbrk_aligned+0x12>
 8003e48:	f000 fba6 	bl	8004598 <_sbrk_r>
 8003e4c:	6030      	str	r0, [r6, #0]
 8003e4e:	4621      	mov	r1, r4
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 fba1 	bl	8004598 <_sbrk_r>
 8003e56:	1c43      	adds	r3, r0, #1
 8003e58:	d00a      	beq.n	8003e70 <sbrk_aligned+0x34>
 8003e5a:	1cc4      	adds	r4, r0, #3
 8003e5c:	f024 0403 	bic.w	r4, r4, #3
 8003e60:	42a0      	cmp	r0, r4
 8003e62:	d007      	beq.n	8003e74 <sbrk_aligned+0x38>
 8003e64:	1a21      	subs	r1, r4, r0
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 fb96 	bl	8004598 <_sbrk_r>
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d101      	bne.n	8003e74 <sbrk_aligned+0x38>
 8003e70:	f04f 34ff 	mov.w	r4, #4294967295
 8003e74:	4620      	mov	r0, r4
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	20000328 	.word	0x20000328

08003e7c <_malloc_r>:
 8003e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e80:	1ccd      	adds	r5, r1, #3
 8003e82:	f025 0503 	bic.w	r5, r5, #3
 8003e86:	3508      	adds	r5, #8
 8003e88:	2d0c      	cmp	r5, #12
 8003e8a:	bf38      	it	cc
 8003e8c:	250c      	movcc	r5, #12
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	4607      	mov	r7, r0
 8003e92:	db01      	blt.n	8003e98 <_malloc_r+0x1c>
 8003e94:	42a9      	cmp	r1, r5
 8003e96:	d905      	bls.n	8003ea4 <_malloc_r+0x28>
 8003e98:	230c      	movs	r3, #12
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	2600      	movs	r6, #0
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ea4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f78 <_malloc_r+0xfc>
 8003ea8:	f000 f868 	bl	8003f7c <__malloc_lock>
 8003eac:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb0:	461c      	mov	r4, r3
 8003eb2:	bb5c      	cbnz	r4, 8003f0c <_malloc_r+0x90>
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	f7ff ffc0 	bl	8003e3c <sbrk_aligned>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	d155      	bne.n	8003f6e <_malloc_r+0xf2>
 8003ec2:	f8d8 4000 	ldr.w	r4, [r8]
 8003ec6:	4626      	mov	r6, r4
 8003ec8:	2e00      	cmp	r6, #0
 8003eca:	d145      	bne.n	8003f58 <_malloc_r+0xdc>
 8003ecc:	2c00      	cmp	r4, #0
 8003ece:	d048      	beq.n	8003f62 <_malloc_r+0xe6>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	eb04 0903 	add.w	r9, r4, r3
 8003eda:	f000 fb5d 	bl	8004598 <_sbrk_r>
 8003ede:	4581      	cmp	r9, r0
 8003ee0:	d13f      	bne.n	8003f62 <_malloc_r+0xe6>
 8003ee2:	6821      	ldr	r1, [r4, #0]
 8003ee4:	1a6d      	subs	r5, r5, r1
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	4638      	mov	r0, r7
 8003eea:	f7ff ffa7 	bl	8003e3c <sbrk_aligned>
 8003eee:	3001      	adds	r0, #1
 8003ef0:	d037      	beq.n	8003f62 <_malloc_r+0xe6>
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	442b      	add	r3, r5
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d038      	beq.n	8003f72 <_malloc_r+0xf6>
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	42a2      	cmp	r2, r4
 8003f04:	d12b      	bne.n	8003f5e <_malloc_r+0xe2>
 8003f06:	2200      	movs	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	e00f      	b.n	8003f2c <_malloc_r+0xb0>
 8003f0c:	6822      	ldr	r2, [r4, #0]
 8003f0e:	1b52      	subs	r2, r2, r5
 8003f10:	d41f      	bmi.n	8003f52 <_malloc_r+0xd6>
 8003f12:	2a0b      	cmp	r2, #11
 8003f14:	d917      	bls.n	8003f46 <_malloc_r+0xca>
 8003f16:	1961      	adds	r1, r4, r5
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	6025      	str	r5, [r4, #0]
 8003f1c:	bf18      	it	ne
 8003f1e:	6059      	strne	r1, [r3, #4]
 8003f20:	6863      	ldr	r3, [r4, #4]
 8003f22:	bf08      	it	eq
 8003f24:	f8c8 1000 	streq.w	r1, [r8]
 8003f28:	5162      	str	r2, [r4, r5]
 8003f2a:	604b      	str	r3, [r1, #4]
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	f104 060b 	add.w	r6, r4, #11
 8003f32:	f000 f829 	bl	8003f88 <__malloc_unlock>
 8003f36:	f026 0607 	bic.w	r6, r6, #7
 8003f3a:	1d23      	adds	r3, r4, #4
 8003f3c:	1af2      	subs	r2, r6, r3
 8003f3e:	d0ae      	beq.n	8003e9e <_malloc_r+0x22>
 8003f40:	1b9b      	subs	r3, r3, r6
 8003f42:	50a3      	str	r3, [r4, r2]
 8003f44:	e7ab      	b.n	8003e9e <_malloc_r+0x22>
 8003f46:	42a3      	cmp	r3, r4
 8003f48:	6862      	ldr	r2, [r4, #4]
 8003f4a:	d1dd      	bne.n	8003f08 <_malloc_r+0x8c>
 8003f4c:	f8c8 2000 	str.w	r2, [r8]
 8003f50:	e7ec      	b.n	8003f2c <_malloc_r+0xb0>
 8003f52:	4623      	mov	r3, r4
 8003f54:	6864      	ldr	r4, [r4, #4]
 8003f56:	e7ac      	b.n	8003eb2 <_malloc_r+0x36>
 8003f58:	4634      	mov	r4, r6
 8003f5a:	6876      	ldr	r6, [r6, #4]
 8003f5c:	e7b4      	b.n	8003ec8 <_malloc_r+0x4c>
 8003f5e:	4613      	mov	r3, r2
 8003f60:	e7cc      	b.n	8003efc <_malloc_r+0x80>
 8003f62:	230c      	movs	r3, #12
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4638      	mov	r0, r7
 8003f68:	f000 f80e 	bl	8003f88 <__malloc_unlock>
 8003f6c:	e797      	b.n	8003e9e <_malloc_r+0x22>
 8003f6e:	6025      	str	r5, [r4, #0]
 8003f70:	e7dc      	b.n	8003f2c <_malloc_r+0xb0>
 8003f72:	605b      	str	r3, [r3, #4]
 8003f74:	deff      	udf	#255	; 0xff
 8003f76:	bf00      	nop
 8003f78:	20000324 	.word	0x20000324

08003f7c <__malloc_lock>:
 8003f7c:	4801      	ldr	r0, [pc, #4]	; (8003f84 <__malloc_lock+0x8>)
 8003f7e:	f7ff bf0f 	b.w	8003da0 <__retarget_lock_acquire_recursive>
 8003f82:	bf00      	nop
 8003f84:	20000320 	.word	0x20000320

08003f88 <__malloc_unlock>:
 8003f88:	4801      	ldr	r0, [pc, #4]	; (8003f90 <__malloc_unlock+0x8>)
 8003f8a:	f7ff bf0a 	b.w	8003da2 <__retarget_lock_release_recursive>
 8003f8e:	bf00      	nop
 8003f90:	20000320 	.word	0x20000320

08003f94 <__ssputs_r>:
 8003f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	688e      	ldr	r6, [r1, #8]
 8003f9a:	461f      	mov	r7, r3
 8003f9c:	42be      	cmp	r6, r7
 8003f9e:	680b      	ldr	r3, [r1, #0]
 8003fa0:	4682      	mov	sl, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	4690      	mov	r8, r2
 8003fa6:	d82c      	bhi.n	8004002 <__ssputs_r+0x6e>
 8003fa8:	898a      	ldrh	r2, [r1, #12]
 8003faa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fae:	d026      	beq.n	8003ffe <__ssputs_r+0x6a>
 8003fb0:	6965      	ldr	r5, [r4, #20]
 8003fb2:	6909      	ldr	r1, [r1, #16]
 8003fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fb8:	eba3 0901 	sub.w	r9, r3, r1
 8003fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fc0:	1c7b      	adds	r3, r7, #1
 8003fc2:	444b      	add	r3, r9
 8003fc4:	106d      	asrs	r5, r5, #1
 8003fc6:	429d      	cmp	r5, r3
 8003fc8:	bf38      	it	cc
 8003fca:	461d      	movcc	r5, r3
 8003fcc:	0553      	lsls	r3, r2, #21
 8003fce:	d527      	bpl.n	8004020 <__ssputs_r+0x8c>
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	f7ff ff53 	bl	8003e7c <_malloc_r>
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	b360      	cbz	r0, 8004034 <__ssputs_r+0xa0>
 8003fda:	6921      	ldr	r1, [r4, #16]
 8003fdc:	464a      	mov	r2, r9
 8003fde:	f000 faeb 	bl	80045b8 <memcpy>
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	6126      	str	r6, [r4, #16]
 8003ff0:	6165      	str	r5, [r4, #20]
 8003ff2:	444e      	add	r6, r9
 8003ff4:	eba5 0509 	sub.w	r5, r5, r9
 8003ff8:	6026      	str	r6, [r4, #0]
 8003ffa:	60a5      	str	r5, [r4, #8]
 8003ffc:	463e      	mov	r6, r7
 8003ffe:	42be      	cmp	r6, r7
 8004000:	d900      	bls.n	8004004 <__ssputs_r+0x70>
 8004002:	463e      	mov	r6, r7
 8004004:	6820      	ldr	r0, [r4, #0]
 8004006:	4632      	mov	r2, r6
 8004008:	4641      	mov	r1, r8
 800400a:	f000 faab 	bl	8004564 <memmove>
 800400e:	68a3      	ldr	r3, [r4, #8]
 8004010:	1b9b      	subs	r3, r3, r6
 8004012:	60a3      	str	r3, [r4, #8]
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	4433      	add	r3, r6
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	2000      	movs	r0, #0
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004020:	462a      	mov	r2, r5
 8004022:	f000 fad7 	bl	80045d4 <_realloc_r>
 8004026:	4606      	mov	r6, r0
 8004028:	2800      	cmp	r0, #0
 800402a:	d1e0      	bne.n	8003fee <__ssputs_r+0x5a>
 800402c:	6921      	ldr	r1, [r4, #16]
 800402e:	4650      	mov	r0, sl
 8004030:	f7ff feb8 	bl	8003da4 <_free_r>
 8004034:	230c      	movs	r3, #12
 8004036:	f8ca 3000 	str.w	r3, [sl]
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	f04f 30ff 	mov.w	r0, #4294967295
 8004046:	e7e9      	b.n	800401c <__ssputs_r+0x88>

08004048 <_svfiprintf_r>:
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	4698      	mov	r8, r3
 800404e:	898b      	ldrh	r3, [r1, #12]
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	b09d      	sub	sp, #116	; 0x74
 8004054:	4607      	mov	r7, r0
 8004056:	460d      	mov	r5, r1
 8004058:	4614      	mov	r4, r2
 800405a:	d50e      	bpl.n	800407a <_svfiprintf_r+0x32>
 800405c:	690b      	ldr	r3, [r1, #16]
 800405e:	b963      	cbnz	r3, 800407a <_svfiprintf_r+0x32>
 8004060:	2140      	movs	r1, #64	; 0x40
 8004062:	f7ff ff0b 	bl	8003e7c <_malloc_r>
 8004066:	6028      	str	r0, [r5, #0]
 8004068:	6128      	str	r0, [r5, #16]
 800406a:	b920      	cbnz	r0, 8004076 <_svfiprintf_r+0x2e>
 800406c:	230c      	movs	r3, #12
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	e0d0      	b.n	8004218 <_svfiprintf_r+0x1d0>
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	616b      	str	r3, [r5, #20]
 800407a:	2300      	movs	r3, #0
 800407c:	9309      	str	r3, [sp, #36]	; 0x24
 800407e:	2320      	movs	r3, #32
 8004080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004084:	f8cd 800c 	str.w	r8, [sp, #12]
 8004088:	2330      	movs	r3, #48	; 0x30
 800408a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004230 <_svfiprintf_r+0x1e8>
 800408e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004092:	f04f 0901 	mov.w	r9, #1
 8004096:	4623      	mov	r3, r4
 8004098:	469a      	mov	sl, r3
 800409a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800409e:	b10a      	cbz	r2, 80040a4 <_svfiprintf_r+0x5c>
 80040a0:	2a25      	cmp	r2, #37	; 0x25
 80040a2:	d1f9      	bne.n	8004098 <_svfiprintf_r+0x50>
 80040a4:	ebba 0b04 	subs.w	fp, sl, r4
 80040a8:	d00b      	beq.n	80040c2 <_svfiprintf_r+0x7a>
 80040aa:	465b      	mov	r3, fp
 80040ac:	4622      	mov	r2, r4
 80040ae:	4629      	mov	r1, r5
 80040b0:	4638      	mov	r0, r7
 80040b2:	f7ff ff6f 	bl	8003f94 <__ssputs_r>
 80040b6:	3001      	adds	r0, #1
 80040b8:	f000 80a9 	beq.w	800420e <_svfiprintf_r+0x1c6>
 80040bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040be:	445a      	add	r2, fp
 80040c0:	9209      	str	r2, [sp, #36]	; 0x24
 80040c2:	f89a 3000 	ldrb.w	r3, [sl]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80a1 	beq.w	800420e <_svfiprintf_r+0x1c6>
 80040cc:	2300      	movs	r3, #0
 80040ce:	f04f 32ff 	mov.w	r2, #4294967295
 80040d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040d6:	f10a 0a01 	add.w	sl, sl, #1
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	9307      	str	r3, [sp, #28]
 80040de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040e2:	931a      	str	r3, [sp, #104]	; 0x68
 80040e4:	4654      	mov	r4, sl
 80040e6:	2205      	movs	r2, #5
 80040e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ec:	4850      	ldr	r0, [pc, #320]	; (8004230 <_svfiprintf_r+0x1e8>)
 80040ee:	f7fc f87f 	bl	80001f0 <memchr>
 80040f2:	9a04      	ldr	r2, [sp, #16]
 80040f4:	b9d8      	cbnz	r0, 800412e <_svfiprintf_r+0xe6>
 80040f6:	06d0      	lsls	r0, r2, #27
 80040f8:	bf44      	itt	mi
 80040fa:	2320      	movmi	r3, #32
 80040fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004100:	0711      	lsls	r1, r2, #28
 8004102:	bf44      	itt	mi
 8004104:	232b      	movmi	r3, #43	; 0x2b
 8004106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800410a:	f89a 3000 	ldrb.w	r3, [sl]
 800410e:	2b2a      	cmp	r3, #42	; 0x2a
 8004110:	d015      	beq.n	800413e <_svfiprintf_r+0xf6>
 8004112:	9a07      	ldr	r2, [sp, #28]
 8004114:	4654      	mov	r4, sl
 8004116:	2000      	movs	r0, #0
 8004118:	f04f 0c0a 	mov.w	ip, #10
 800411c:	4621      	mov	r1, r4
 800411e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004122:	3b30      	subs	r3, #48	; 0x30
 8004124:	2b09      	cmp	r3, #9
 8004126:	d94d      	bls.n	80041c4 <_svfiprintf_r+0x17c>
 8004128:	b1b0      	cbz	r0, 8004158 <_svfiprintf_r+0x110>
 800412a:	9207      	str	r2, [sp, #28]
 800412c:	e014      	b.n	8004158 <_svfiprintf_r+0x110>
 800412e:	eba0 0308 	sub.w	r3, r0, r8
 8004132:	fa09 f303 	lsl.w	r3, r9, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	46a2      	mov	sl, r4
 800413c:	e7d2      	b.n	80040e4 <_svfiprintf_r+0x9c>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	1d19      	adds	r1, r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	9103      	str	r1, [sp, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfbb      	ittet	lt
 800414a:	425b      	neglt	r3, r3
 800414c:	f042 0202 	orrlt.w	r2, r2, #2
 8004150:	9307      	strge	r3, [sp, #28]
 8004152:	9307      	strlt	r3, [sp, #28]
 8004154:	bfb8      	it	lt
 8004156:	9204      	strlt	r2, [sp, #16]
 8004158:	7823      	ldrb	r3, [r4, #0]
 800415a:	2b2e      	cmp	r3, #46	; 0x2e
 800415c:	d10c      	bne.n	8004178 <_svfiprintf_r+0x130>
 800415e:	7863      	ldrb	r3, [r4, #1]
 8004160:	2b2a      	cmp	r3, #42	; 0x2a
 8004162:	d134      	bne.n	80041ce <_svfiprintf_r+0x186>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	9203      	str	r2, [sp, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	bfb8      	it	lt
 8004170:	f04f 33ff 	movlt.w	r3, #4294967295
 8004174:	3402      	adds	r4, #2
 8004176:	9305      	str	r3, [sp, #20]
 8004178:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004240 <_svfiprintf_r+0x1f8>
 800417c:	7821      	ldrb	r1, [r4, #0]
 800417e:	2203      	movs	r2, #3
 8004180:	4650      	mov	r0, sl
 8004182:	f7fc f835 	bl	80001f0 <memchr>
 8004186:	b138      	cbz	r0, 8004198 <_svfiprintf_r+0x150>
 8004188:	9b04      	ldr	r3, [sp, #16]
 800418a:	eba0 000a 	sub.w	r0, r0, sl
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	4082      	lsls	r2, r0
 8004192:	4313      	orrs	r3, r2
 8004194:	3401      	adds	r4, #1
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800419c:	4825      	ldr	r0, [pc, #148]	; (8004234 <_svfiprintf_r+0x1ec>)
 800419e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041a2:	2206      	movs	r2, #6
 80041a4:	f7fc f824 	bl	80001f0 <memchr>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d038      	beq.n	800421e <_svfiprintf_r+0x1d6>
 80041ac:	4b22      	ldr	r3, [pc, #136]	; (8004238 <_svfiprintf_r+0x1f0>)
 80041ae:	bb1b      	cbnz	r3, 80041f8 <_svfiprintf_r+0x1b0>
 80041b0:	9b03      	ldr	r3, [sp, #12]
 80041b2:	3307      	adds	r3, #7
 80041b4:	f023 0307 	bic.w	r3, r3, #7
 80041b8:	3308      	adds	r3, #8
 80041ba:	9303      	str	r3, [sp, #12]
 80041bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041be:	4433      	add	r3, r6
 80041c0:	9309      	str	r3, [sp, #36]	; 0x24
 80041c2:	e768      	b.n	8004096 <_svfiprintf_r+0x4e>
 80041c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80041c8:	460c      	mov	r4, r1
 80041ca:	2001      	movs	r0, #1
 80041cc:	e7a6      	b.n	800411c <_svfiprintf_r+0xd4>
 80041ce:	2300      	movs	r3, #0
 80041d0:	3401      	adds	r4, #1
 80041d2:	9305      	str	r3, [sp, #20]
 80041d4:	4619      	mov	r1, r3
 80041d6:	f04f 0c0a 	mov.w	ip, #10
 80041da:	4620      	mov	r0, r4
 80041dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041e0:	3a30      	subs	r2, #48	; 0x30
 80041e2:	2a09      	cmp	r2, #9
 80041e4:	d903      	bls.n	80041ee <_svfiprintf_r+0x1a6>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0c6      	beq.n	8004178 <_svfiprintf_r+0x130>
 80041ea:	9105      	str	r1, [sp, #20]
 80041ec:	e7c4      	b.n	8004178 <_svfiprintf_r+0x130>
 80041ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80041f2:	4604      	mov	r4, r0
 80041f4:	2301      	movs	r3, #1
 80041f6:	e7f0      	b.n	80041da <_svfiprintf_r+0x192>
 80041f8:	ab03      	add	r3, sp, #12
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	462a      	mov	r2, r5
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <_svfiprintf_r+0x1f4>)
 8004200:	a904      	add	r1, sp, #16
 8004202:	4638      	mov	r0, r7
 8004204:	f3af 8000 	nop.w
 8004208:	1c42      	adds	r2, r0, #1
 800420a:	4606      	mov	r6, r0
 800420c:	d1d6      	bne.n	80041bc <_svfiprintf_r+0x174>
 800420e:	89ab      	ldrh	r3, [r5, #12]
 8004210:	065b      	lsls	r3, r3, #25
 8004212:	f53f af2d 	bmi.w	8004070 <_svfiprintf_r+0x28>
 8004216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004218:	b01d      	add	sp, #116	; 0x74
 800421a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421e:	ab03      	add	r3, sp, #12
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	462a      	mov	r2, r5
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <_svfiprintf_r+0x1f4>)
 8004226:	a904      	add	r1, sp, #16
 8004228:	4638      	mov	r0, r7
 800422a:	f000 f879 	bl	8004320 <_printf_i>
 800422e:	e7eb      	b.n	8004208 <_svfiprintf_r+0x1c0>
 8004230:	08004680 	.word	0x08004680
 8004234:	0800468a 	.word	0x0800468a
 8004238:	00000000 	.word	0x00000000
 800423c:	08003f95 	.word	0x08003f95
 8004240:	08004686 	.word	0x08004686

08004244 <_printf_common>:
 8004244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	4616      	mov	r6, r2
 800424a:	4699      	mov	r9, r3
 800424c:	688a      	ldr	r2, [r1, #8]
 800424e:	690b      	ldr	r3, [r1, #16]
 8004250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004254:	4293      	cmp	r3, r2
 8004256:	bfb8      	it	lt
 8004258:	4613      	movlt	r3, r2
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004260:	4607      	mov	r7, r0
 8004262:	460c      	mov	r4, r1
 8004264:	b10a      	cbz	r2, 800426a <_printf_common+0x26>
 8004266:	3301      	adds	r3, #1
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	0699      	lsls	r1, r3, #26
 800426e:	bf42      	ittt	mi
 8004270:	6833      	ldrmi	r3, [r6, #0]
 8004272:	3302      	addmi	r3, #2
 8004274:	6033      	strmi	r3, [r6, #0]
 8004276:	6825      	ldr	r5, [r4, #0]
 8004278:	f015 0506 	ands.w	r5, r5, #6
 800427c:	d106      	bne.n	800428c <_printf_common+0x48>
 800427e:	f104 0a19 	add.w	sl, r4, #25
 8004282:	68e3      	ldr	r3, [r4, #12]
 8004284:	6832      	ldr	r2, [r6, #0]
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	42ab      	cmp	r3, r5
 800428a:	dc26      	bgt.n	80042da <_printf_common+0x96>
 800428c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004290:	1e13      	subs	r3, r2, #0
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	bf18      	it	ne
 8004296:	2301      	movne	r3, #1
 8004298:	0692      	lsls	r2, r2, #26
 800429a:	d42b      	bmi.n	80042f4 <_printf_common+0xb0>
 800429c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a0:	4649      	mov	r1, r9
 80042a2:	4638      	mov	r0, r7
 80042a4:	47c0      	blx	r8
 80042a6:	3001      	adds	r0, #1
 80042a8:	d01e      	beq.n	80042e8 <_printf_common+0xa4>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	6922      	ldr	r2, [r4, #16]
 80042ae:	f003 0306 	and.w	r3, r3, #6
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	bf02      	ittt	eq
 80042b6:	68e5      	ldreq	r5, [r4, #12]
 80042b8:	6833      	ldreq	r3, [r6, #0]
 80042ba:	1aed      	subeq	r5, r5, r3
 80042bc:	68a3      	ldr	r3, [r4, #8]
 80042be:	bf0c      	ite	eq
 80042c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042c4:	2500      	movne	r5, #0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	bfc4      	itt	gt
 80042ca:	1a9b      	subgt	r3, r3, r2
 80042cc:	18ed      	addgt	r5, r5, r3
 80042ce:	2600      	movs	r6, #0
 80042d0:	341a      	adds	r4, #26
 80042d2:	42b5      	cmp	r5, r6
 80042d4:	d11a      	bne.n	800430c <_printf_common+0xc8>
 80042d6:	2000      	movs	r0, #0
 80042d8:	e008      	b.n	80042ec <_printf_common+0xa8>
 80042da:	2301      	movs	r3, #1
 80042dc:	4652      	mov	r2, sl
 80042de:	4649      	mov	r1, r9
 80042e0:	4638      	mov	r0, r7
 80042e2:	47c0      	blx	r8
 80042e4:	3001      	adds	r0, #1
 80042e6:	d103      	bne.n	80042f0 <_printf_common+0xac>
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f0:	3501      	adds	r5, #1
 80042f2:	e7c6      	b.n	8004282 <_printf_common+0x3e>
 80042f4:	18e1      	adds	r1, r4, r3
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	2030      	movs	r0, #48	; 0x30
 80042fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042fe:	4422      	add	r2, r4
 8004300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004308:	3302      	adds	r3, #2
 800430a:	e7c7      	b.n	800429c <_printf_common+0x58>
 800430c:	2301      	movs	r3, #1
 800430e:	4622      	mov	r2, r4
 8004310:	4649      	mov	r1, r9
 8004312:	4638      	mov	r0, r7
 8004314:	47c0      	blx	r8
 8004316:	3001      	adds	r0, #1
 8004318:	d0e6      	beq.n	80042e8 <_printf_common+0xa4>
 800431a:	3601      	adds	r6, #1
 800431c:	e7d9      	b.n	80042d2 <_printf_common+0x8e>
	...

08004320 <_printf_i>:
 8004320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	7e0f      	ldrb	r7, [r1, #24]
 8004326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004328:	2f78      	cmp	r7, #120	; 0x78
 800432a:	4691      	mov	r9, r2
 800432c:	4680      	mov	r8, r0
 800432e:	460c      	mov	r4, r1
 8004330:	469a      	mov	sl, r3
 8004332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004336:	d807      	bhi.n	8004348 <_printf_i+0x28>
 8004338:	2f62      	cmp	r7, #98	; 0x62
 800433a:	d80a      	bhi.n	8004352 <_printf_i+0x32>
 800433c:	2f00      	cmp	r7, #0
 800433e:	f000 80d4 	beq.w	80044ea <_printf_i+0x1ca>
 8004342:	2f58      	cmp	r7, #88	; 0x58
 8004344:	f000 80c0 	beq.w	80044c8 <_printf_i+0x1a8>
 8004348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800434c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004350:	e03a      	b.n	80043c8 <_printf_i+0xa8>
 8004352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004356:	2b15      	cmp	r3, #21
 8004358:	d8f6      	bhi.n	8004348 <_printf_i+0x28>
 800435a:	a101      	add	r1, pc, #4	; (adr r1, 8004360 <_printf_i+0x40>)
 800435c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043cd 	.word	0x080043cd
 8004368:	08004349 	.word	0x08004349
 800436c:	08004349 	.word	0x08004349
 8004370:	08004349 	.word	0x08004349
 8004374:	08004349 	.word	0x08004349
 8004378:	080043cd 	.word	0x080043cd
 800437c:	08004349 	.word	0x08004349
 8004380:	08004349 	.word	0x08004349
 8004384:	08004349 	.word	0x08004349
 8004388:	08004349 	.word	0x08004349
 800438c:	080044d1 	.word	0x080044d1
 8004390:	080043f9 	.word	0x080043f9
 8004394:	0800448b 	.word	0x0800448b
 8004398:	08004349 	.word	0x08004349
 800439c:	08004349 	.word	0x08004349
 80043a0:	080044f3 	.word	0x080044f3
 80043a4:	08004349 	.word	0x08004349
 80043a8:	080043f9 	.word	0x080043f9
 80043ac:	08004349 	.word	0x08004349
 80043b0:	08004349 	.word	0x08004349
 80043b4:	08004493 	.word	0x08004493
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	602a      	str	r2, [r5, #0]
 80043c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043c8:	2301      	movs	r3, #1
 80043ca:	e09f      	b.n	800450c <_printf_i+0x1ec>
 80043cc:	6820      	ldr	r0, [r4, #0]
 80043ce:	682b      	ldr	r3, [r5, #0]
 80043d0:	0607      	lsls	r7, r0, #24
 80043d2:	f103 0104 	add.w	r1, r3, #4
 80043d6:	6029      	str	r1, [r5, #0]
 80043d8:	d501      	bpl.n	80043de <_printf_i+0xbe>
 80043da:	681e      	ldr	r6, [r3, #0]
 80043dc:	e003      	b.n	80043e6 <_printf_i+0xc6>
 80043de:	0646      	lsls	r6, r0, #25
 80043e0:	d5fb      	bpl.n	80043da <_printf_i+0xba>
 80043e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80043e6:	2e00      	cmp	r6, #0
 80043e8:	da03      	bge.n	80043f2 <_printf_i+0xd2>
 80043ea:	232d      	movs	r3, #45	; 0x2d
 80043ec:	4276      	negs	r6, r6
 80043ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f2:	485a      	ldr	r0, [pc, #360]	; (800455c <_printf_i+0x23c>)
 80043f4:	230a      	movs	r3, #10
 80043f6:	e012      	b.n	800441e <_printf_i+0xfe>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	6820      	ldr	r0, [r4, #0]
 80043fc:	1d19      	adds	r1, r3, #4
 80043fe:	6029      	str	r1, [r5, #0]
 8004400:	0605      	lsls	r5, r0, #24
 8004402:	d501      	bpl.n	8004408 <_printf_i+0xe8>
 8004404:	681e      	ldr	r6, [r3, #0]
 8004406:	e002      	b.n	800440e <_printf_i+0xee>
 8004408:	0641      	lsls	r1, r0, #25
 800440a:	d5fb      	bpl.n	8004404 <_printf_i+0xe4>
 800440c:	881e      	ldrh	r6, [r3, #0]
 800440e:	4853      	ldr	r0, [pc, #332]	; (800455c <_printf_i+0x23c>)
 8004410:	2f6f      	cmp	r7, #111	; 0x6f
 8004412:	bf0c      	ite	eq
 8004414:	2308      	moveq	r3, #8
 8004416:	230a      	movne	r3, #10
 8004418:	2100      	movs	r1, #0
 800441a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800441e:	6865      	ldr	r5, [r4, #4]
 8004420:	60a5      	str	r5, [r4, #8]
 8004422:	2d00      	cmp	r5, #0
 8004424:	bfa2      	ittt	ge
 8004426:	6821      	ldrge	r1, [r4, #0]
 8004428:	f021 0104 	bicge.w	r1, r1, #4
 800442c:	6021      	strge	r1, [r4, #0]
 800442e:	b90e      	cbnz	r6, 8004434 <_printf_i+0x114>
 8004430:	2d00      	cmp	r5, #0
 8004432:	d04b      	beq.n	80044cc <_printf_i+0x1ac>
 8004434:	4615      	mov	r5, r2
 8004436:	fbb6 f1f3 	udiv	r1, r6, r3
 800443a:	fb03 6711 	mls	r7, r3, r1, r6
 800443e:	5dc7      	ldrb	r7, [r0, r7]
 8004440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004444:	4637      	mov	r7, r6
 8004446:	42bb      	cmp	r3, r7
 8004448:	460e      	mov	r6, r1
 800444a:	d9f4      	bls.n	8004436 <_printf_i+0x116>
 800444c:	2b08      	cmp	r3, #8
 800444e:	d10b      	bne.n	8004468 <_printf_i+0x148>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	07de      	lsls	r6, r3, #31
 8004454:	d508      	bpl.n	8004468 <_printf_i+0x148>
 8004456:	6923      	ldr	r3, [r4, #16]
 8004458:	6861      	ldr	r1, [r4, #4]
 800445a:	4299      	cmp	r1, r3
 800445c:	bfde      	ittt	le
 800445e:	2330      	movle	r3, #48	; 0x30
 8004460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004464:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004468:	1b52      	subs	r2, r2, r5
 800446a:	6122      	str	r2, [r4, #16]
 800446c:	f8cd a000 	str.w	sl, [sp]
 8004470:	464b      	mov	r3, r9
 8004472:	aa03      	add	r2, sp, #12
 8004474:	4621      	mov	r1, r4
 8004476:	4640      	mov	r0, r8
 8004478:	f7ff fee4 	bl	8004244 <_printf_common>
 800447c:	3001      	adds	r0, #1
 800447e:	d14a      	bne.n	8004516 <_printf_i+0x1f6>
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	b004      	add	sp, #16
 8004486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	f043 0320 	orr.w	r3, r3, #32
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	4833      	ldr	r0, [pc, #204]	; (8004560 <_printf_i+0x240>)
 8004494:	2778      	movs	r7, #120	; 0x78
 8004496:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	6829      	ldr	r1, [r5, #0]
 800449e:	061f      	lsls	r7, r3, #24
 80044a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80044a4:	d402      	bmi.n	80044ac <_printf_i+0x18c>
 80044a6:	065f      	lsls	r7, r3, #25
 80044a8:	bf48      	it	mi
 80044aa:	b2b6      	uxthmi	r6, r6
 80044ac:	07df      	lsls	r7, r3, #31
 80044ae:	bf48      	it	mi
 80044b0:	f043 0320 	orrmi.w	r3, r3, #32
 80044b4:	6029      	str	r1, [r5, #0]
 80044b6:	bf48      	it	mi
 80044b8:	6023      	strmi	r3, [r4, #0]
 80044ba:	b91e      	cbnz	r6, 80044c4 <_printf_i+0x1a4>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	f023 0320 	bic.w	r3, r3, #32
 80044c2:	6023      	str	r3, [r4, #0]
 80044c4:	2310      	movs	r3, #16
 80044c6:	e7a7      	b.n	8004418 <_printf_i+0xf8>
 80044c8:	4824      	ldr	r0, [pc, #144]	; (800455c <_printf_i+0x23c>)
 80044ca:	e7e4      	b.n	8004496 <_printf_i+0x176>
 80044cc:	4615      	mov	r5, r2
 80044ce:	e7bd      	b.n	800444c <_printf_i+0x12c>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	6826      	ldr	r6, [r4, #0]
 80044d4:	6961      	ldr	r1, [r4, #20]
 80044d6:	1d18      	adds	r0, r3, #4
 80044d8:	6028      	str	r0, [r5, #0]
 80044da:	0635      	lsls	r5, r6, #24
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	d501      	bpl.n	80044e4 <_printf_i+0x1c4>
 80044e0:	6019      	str	r1, [r3, #0]
 80044e2:	e002      	b.n	80044ea <_printf_i+0x1ca>
 80044e4:	0670      	lsls	r0, r6, #25
 80044e6:	d5fb      	bpl.n	80044e0 <_printf_i+0x1c0>
 80044e8:	8019      	strh	r1, [r3, #0]
 80044ea:	2300      	movs	r3, #0
 80044ec:	6123      	str	r3, [r4, #16]
 80044ee:	4615      	mov	r5, r2
 80044f0:	e7bc      	b.n	800446c <_printf_i+0x14c>
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	1d1a      	adds	r2, r3, #4
 80044f6:	602a      	str	r2, [r5, #0]
 80044f8:	681d      	ldr	r5, [r3, #0]
 80044fa:	6862      	ldr	r2, [r4, #4]
 80044fc:	2100      	movs	r1, #0
 80044fe:	4628      	mov	r0, r5
 8004500:	f7fb fe76 	bl	80001f0 <memchr>
 8004504:	b108      	cbz	r0, 800450a <_printf_i+0x1ea>
 8004506:	1b40      	subs	r0, r0, r5
 8004508:	6060      	str	r0, [r4, #4]
 800450a:	6863      	ldr	r3, [r4, #4]
 800450c:	6123      	str	r3, [r4, #16]
 800450e:	2300      	movs	r3, #0
 8004510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004514:	e7aa      	b.n	800446c <_printf_i+0x14c>
 8004516:	6923      	ldr	r3, [r4, #16]
 8004518:	462a      	mov	r2, r5
 800451a:	4649      	mov	r1, r9
 800451c:	4640      	mov	r0, r8
 800451e:	47d0      	blx	sl
 8004520:	3001      	adds	r0, #1
 8004522:	d0ad      	beq.n	8004480 <_printf_i+0x160>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	079b      	lsls	r3, r3, #30
 8004528:	d413      	bmi.n	8004552 <_printf_i+0x232>
 800452a:	68e0      	ldr	r0, [r4, #12]
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	4298      	cmp	r0, r3
 8004530:	bfb8      	it	lt
 8004532:	4618      	movlt	r0, r3
 8004534:	e7a6      	b.n	8004484 <_printf_i+0x164>
 8004536:	2301      	movs	r3, #1
 8004538:	4632      	mov	r2, r6
 800453a:	4649      	mov	r1, r9
 800453c:	4640      	mov	r0, r8
 800453e:	47d0      	blx	sl
 8004540:	3001      	adds	r0, #1
 8004542:	d09d      	beq.n	8004480 <_printf_i+0x160>
 8004544:	3501      	adds	r5, #1
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	9903      	ldr	r1, [sp, #12]
 800454a:	1a5b      	subs	r3, r3, r1
 800454c:	42ab      	cmp	r3, r5
 800454e:	dcf2      	bgt.n	8004536 <_printf_i+0x216>
 8004550:	e7eb      	b.n	800452a <_printf_i+0x20a>
 8004552:	2500      	movs	r5, #0
 8004554:	f104 0619 	add.w	r6, r4, #25
 8004558:	e7f5      	b.n	8004546 <_printf_i+0x226>
 800455a:	bf00      	nop
 800455c:	08004691 	.word	0x08004691
 8004560:	080046a2 	.word	0x080046a2

08004564 <memmove>:
 8004564:	4288      	cmp	r0, r1
 8004566:	b510      	push	{r4, lr}
 8004568:	eb01 0402 	add.w	r4, r1, r2
 800456c:	d902      	bls.n	8004574 <memmove+0x10>
 800456e:	4284      	cmp	r4, r0
 8004570:	4623      	mov	r3, r4
 8004572:	d807      	bhi.n	8004584 <memmove+0x20>
 8004574:	1e43      	subs	r3, r0, #1
 8004576:	42a1      	cmp	r1, r4
 8004578:	d008      	beq.n	800458c <memmove+0x28>
 800457a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800457e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004582:	e7f8      	b.n	8004576 <memmove+0x12>
 8004584:	4402      	add	r2, r0
 8004586:	4601      	mov	r1, r0
 8004588:	428a      	cmp	r2, r1
 800458a:	d100      	bne.n	800458e <memmove+0x2a>
 800458c:	bd10      	pop	{r4, pc}
 800458e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004596:	e7f7      	b.n	8004588 <memmove+0x24>

08004598 <_sbrk_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	4d06      	ldr	r5, [pc, #24]	; (80045b4 <_sbrk_r+0x1c>)
 800459c:	2300      	movs	r3, #0
 800459e:	4604      	mov	r4, r0
 80045a0:	4608      	mov	r0, r1
 80045a2:	602b      	str	r3, [r5, #0]
 80045a4:	f7fc fa58 	bl	8000a58 <_sbrk>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d102      	bne.n	80045b2 <_sbrk_r+0x1a>
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	b103      	cbz	r3, 80045b2 <_sbrk_r+0x1a>
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	bd38      	pop	{r3, r4, r5, pc}
 80045b4:	2000031c 	.word	0x2000031c

080045b8 <memcpy>:
 80045b8:	440a      	add	r2, r1
 80045ba:	4291      	cmp	r1, r2
 80045bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80045c0:	d100      	bne.n	80045c4 <memcpy+0xc>
 80045c2:	4770      	bx	lr
 80045c4:	b510      	push	{r4, lr}
 80045c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ce:	4291      	cmp	r1, r2
 80045d0:	d1f9      	bne.n	80045c6 <memcpy+0xe>
 80045d2:	bd10      	pop	{r4, pc}

080045d4 <_realloc_r>:
 80045d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d8:	4680      	mov	r8, r0
 80045da:	4614      	mov	r4, r2
 80045dc:	460e      	mov	r6, r1
 80045de:	b921      	cbnz	r1, 80045ea <_realloc_r+0x16>
 80045e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045e4:	4611      	mov	r1, r2
 80045e6:	f7ff bc49 	b.w	8003e7c <_malloc_r>
 80045ea:	b92a      	cbnz	r2, 80045f8 <_realloc_r+0x24>
 80045ec:	f7ff fbda 	bl	8003da4 <_free_r>
 80045f0:	4625      	mov	r5, r4
 80045f2:	4628      	mov	r0, r5
 80045f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f8:	f000 f81b 	bl	8004632 <_malloc_usable_size_r>
 80045fc:	4284      	cmp	r4, r0
 80045fe:	4607      	mov	r7, r0
 8004600:	d802      	bhi.n	8004608 <_realloc_r+0x34>
 8004602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004606:	d812      	bhi.n	800462e <_realloc_r+0x5a>
 8004608:	4621      	mov	r1, r4
 800460a:	4640      	mov	r0, r8
 800460c:	f7ff fc36 	bl	8003e7c <_malloc_r>
 8004610:	4605      	mov	r5, r0
 8004612:	2800      	cmp	r0, #0
 8004614:	d0ed      	beq.n	80045f2 <_realloc_r+0x1e>
 8004616:	42bc      	cmp	r4, r7
 8004618:	4622      	mov	r2, r4
 800461a:	4631      	mov	r1, r6
 800461c:	bf28      	it	cs
 800461e:	463a      	movcs	r2, r7
 8004620:	f7ff ffca 	bl	80045b8 <memcpy>
 8004624:	4631      	mov	r1, r6
 8004626:	4640      	mov	r0, r8
 8004628:	f7ff fbbc 	bl	8003da4 <_free_r>
 800462c:	e7e1      	b.n	80045f2 <_realloc_r+0x1e>
 800462e:	4635      	mov	r5, r6
 8004630:	e7df      	b.n	80045f2 <_realloc_r+0x1e>

08004632 <_malloc_usable_size_r>:
 8004632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004636:	1f18      	subs	r0, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	bfbc      	itt	lt
 800463c:	580b      	ldrlt	r3, [r1, r0]
 800463e:	18c0      	addlt	r0, r0, r3
 8004640:	4770      	bx	lr
	...

08004644 <_init>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	bf00      	nop
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr

08004650 <_fini>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	bf00      	nop
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr
