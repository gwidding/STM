
lcd_time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006718  08006718  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006720  08006720  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000a14  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a78  20000a78  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001808f  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bd9  00000000  00000000  00038166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013b8  00000000  00000000  0003bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f35  00000000  00000000  0003d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028d2d  00000000  00000000  0003e02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c4c9  00000000  00000000  00066d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f129c  00000000  00000000  00083223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000573c  00000000  00000000  001744c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00179bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006644 	.word	0x08006644

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08006644 	.word	0x08006644

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b21      	ldr	r3, [pc, #132]	; (8000634 <MX_ADC1_Init+0x98>)
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <MX_ADC1_Init+0x98>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_ADC1_Init+0x98>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_ADC1_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_ADC1_Init+0x98>)
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <MX_ADC1_Init+0xa0>)
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_ADC1_Init+0x98>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_ADC1_Init+0x98>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <MX_ADC1_Init+0x98>)
 80005fe:	f001 f987 	bl	8001910 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f000 fe62 	bl	80012d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800060c:	2303      	movs	r3, #3
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_ADC1_Init+0x98>)
 800061e:	f001 f9bb 	bl	8001998 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f000 fe52 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000080 	.word	0x20000080
 8000638:	40012000 	.word	0x40012000
 800063c:	0f000001 	.word	0x0f000001

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <HAL_ADC_MspInit+0x7c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d127      	bne.n	80006b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000670:	6453      	str	r3, [r2, #68]	; 0x44
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800069a:	2308      	movs	r3, #8
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <HAL_ADC_MspInit+0x84>)
 80006ae:	f002 f84b 	bl	8002748 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40012000 	.word	0x40012000
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000

080006c8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_DAC_Init+0x60>)
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <MX_DAC_Init+0x64>)
 80006da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_DAC_Init+0x60>)
 80006de:	f001 fc9a 	bl	8002016 <HAL_DAC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006e8:	f000 fdf2 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <MX_DAC_Init+0x60>)
 80006fc:	f001 fcad 	bl	800205a <HAL_DAC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000706:	f000 fde3 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2210      	movs	r2, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_DAC_Init+0x60>)
 8000712:	f001 fca2 	bl	800205a <HAL_DAC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800071c:	f000 fdd8 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000c8 	.word	0x200000c8
 800072c:	40007400 	.word	0x40007400

08000730 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_DAC_MspInit+0x7c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d127      	bne.n	80007a2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 800075c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800078a:	2330      	movs	r3, #48	; 0x30
 800078c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078e:	2303      	movs	r3, #3
 8000790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <HAL_DAC_MspInit+0x84>)
 800079e:	f001 ffd3 	bl	8002748 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40007400 	.word	0x40007400
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000

080007b8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ETH_Init+0x84>)
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <MX_ETH_Init+0x88>)
 80007c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_ETH_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_ETH_Init+0x8c>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ETH_Init+0x8c>)
 80007d0:	22e1      	movs	r2, #225	; 0xe1
 80007d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ETH_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ETH_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_ETH_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_ETH_Init+0x84>)
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <MX_ETH_Init+0x8c>)
 80007ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_ETH_Init+0x84>)
 80007ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_ETH_Init+0x84>)
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <MX_ETH_Init+0x90>)
 80007f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_ETH_Init+0x84>)
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_ETH_Init+0x94>)
 80007fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_ETH_Init+0x84>)
 8000802:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000806:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_ETH_Init+0x84>)
 800080a:	f001 fc75 	bl	80020f8 <HAL_ETH_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 fd5c 	bl	80012d0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000818:	2238      	movs	r2, #56	; 0x38
 800081a:	2100      	movs	r1, #0
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_ETH_Init+0x98>)
 800081e:	f005 fa8d 	bl	8005d3c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_ETH_Init+0x98>)
 8000824:	2221      	movs	r2, #33	; 0x21
 8000826:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_ETH_Init+0x98>)
 800082a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800082e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_ETH_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000254 	.word	0x20000254
 8000840:	40028000 	.word	0x40028000
 8000844:	20000304 	.word	0x20000304
 8000848:	2000017c 	.word	0x2000017c
 800084c:	200000dc 	.word	0x200000dc
 8000850:	2000021c 	.word	0x2000021c

08000854 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08e      	sub	sp, #56	; 0x38
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a55      	ldr	r2, [pc, #340]	; (80009c8 <HAL_ETH_MspInit+0x174>)
 8000872:	4293      	cmp	r3, r2
 8000874:	f040 80a4 	bne.w	80009c0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	4b53      	ldr	r3, [pc, #332]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a52      	ldr	r2, [pc, #328]	; (80009cc <HAL_ETH_MspInit+0x178>)
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b50      	ldr	r3, [pc, #320]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	4b4c      	ldr	r3, [pc, #304]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a4b      	ldr	r2, [pc, #300]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800089e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b49      	ldr	r3, [pc, #292]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	4b45      	ldr	r3, [pc, #276]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a44      	ldr	r2, [pc, #272]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
 80008c0:	4b42      	ldr	r3, [pc, #264]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	4a3d      	ldr	r2, [pc, #244]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6313      	str	r3, [r2, #48]	; 0x30
 80008dc:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4a36      	ldr	r2, [pc, #216]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6313      	str	r3, [r2, #48]	; 0x30
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	4b30      	ldr	r3, [pc, #192]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <HAL_ETH_MspInit+0x178>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <HAL_ETH_MspInit+0x178>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a28      	ldr	r2, [pc, #160]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800092a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <HAL_ETH_MspInit+0x178>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800093c:	2332      	movs	r3, #50	; 0x32
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094c:	230b      	movs	r3, #11
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	481e      	ldr	r0, [pc, #120]	; (80009d0 <HAL_ETH_MspInit+0x17c>)
 8000958:	f001 fef6 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800095c:	2386      	movs	r3, #134	; 0x86
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800096c:	230b      	movs	r3, #11
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <HAL_ETH_MspInit+0x180>)
 8000978:	f001 fee6 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098e:	230b      	movs	r3, #11
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	480f      	ldr	r0, [pc, #60]	; (80009d8 <HAL_ETH_MspInit+0x184>)
 800099a:	f001 fed5 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800099e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b0:	230b      	movs	r3, #11
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <HAL_ETH_MspInit+0x188>)
 80009bc:	f001 fec4 	bl	8002748 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009c0:	bf00      	nop
 80009c2:	3738      	adds	r7, #56	; 0x38
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40028000 	.word	0x40028000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40021800 	.word	0x40021800

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <MX_GPIO_Init+0x180>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a58      	ldr	r2, [pc, #352]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a51      	ldr	r2, [pc, #324]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a1c:	f043 0320 	orr.w	r3, r3, #32
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b4f      	ldr	r3, [pc, #316]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a4a      	ldr	r2, [pc, #296]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b48      	ldr	r3, [pc, #288]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a43      	ldr	r2, [pc, #268]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b41      	ldr	r3, [pc, #260]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b3d      	ldr	r3, [pc, #244]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a3c      	ldr	r2, [pc, #240]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a35      	ldr	r2, [pc, #212]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a2e      	ldr	r2, [pc, #184]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ac0:	4828      	ldr	r0, [pc, #160]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000ac2:	f002 f805 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	4827      	ldr	r0, [pc, #156]	; (8000b68 <MX_GPIO_Init+0x188>)
 8000acc:	f002 f800 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4821      	ldr	r0, [pc, #132]	; (8000b6c <MX_GPIO_Init+0x18c>)
 8000ae8:	f001 fe2e 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = setBtn_Pin|upBtn_Pin;
 8000aec:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	481b      	ldr	r0, [pc, #108]	; (8000b70 <MX_GPIO_Init+0x190>)
 8000b02:	f001 fe21 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b06:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000b20:	f001 fe12 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b24:	2340      	movs	r3, #64	; 0x40
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <MX_GPIO_Init+0x188>)
 8000b3c:	f001 fe04 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_GPIO_Init+0x188>)
 8000b54:	f001 fdf8 	bl	8002748 <HAL_GPIO_Init>

}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40021800 	.word	0x40021800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40021400 	.word	0x40021400

08000b74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_I2C1_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <MX_I2C1_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000bb2:	f001 ffa7 	bl	8002b04 <HAL_I2C_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f000 fb88 	bl	80012d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000bc4:	f002 fd17 	bl	80035f6 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bce:	f000 fb7f 	bl	80012d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000bd6:	f002 fd4a 	bl	800366e <HAL_I2CEx_ConfigDigitalFilter>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000be0:	f000 fb76 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000030c 	.word	0x2000030c
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	000186a0 	.word	0x000186a0

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_I2C_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12c      	bne.n	8000c70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c44:	2304      	movs	r3, #4
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <HAL_I2C_MspInit+0x8c>)
 8000c50:	f001 fd7a 	bl	8002748 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400

08000c84 <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 8000c84:	b5b0      	push	{r4, r5, r7, lr}
 8000c86:	b098      	sub	sp, #96	; 0x60
 8000c88:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <I2C_Scan+0xc0>)
 8000c8c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000c90:	461d      	mov	r5, r3
 8000c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c9a:	6020      	str	r0, [r4, #0]
 8000c9c:	3404      	adds	r4, #4
 8000c9e:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000ca0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff faa3 	bl	80001f0 <strlen>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	4824      	ldr	r0, [pc, #144]	; (8000d48 <I2C_Scan+0xc4>)
 8000cb8:	f004 f976 	bl	8004fa8 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000cc2:	e02f      	b.n	8000d24 <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000cc4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	230a      	movs	r3, #10
 8000cce:	2201      	movs	r2, #1
 8000cd0:	481e      	ldr	r0, [pc, #120]	; (8000d4c <I2C_Scan+0xc8>)
 8000cd2:	f002 f959 	bl	8002f88 <HAL_I2C_IsDeviceReady>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 8000cdc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d113      	bne.n	8000d0c <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8000ce4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000ce8:	1d38      	adds	r0, r7, #4
 8000cea:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <I2C_Scan+0xcc>)
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	f004 ffd1 	bl	8005c94 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fa7b 	bl	80001f0 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	1d39      	adds	r1, r7, #4
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	4810      	ldr	r0, [pc, #64]	; (8000d48 <I2C_Scan+0xc4>)
 8000d06:	f004 f94f 	bl	8004fa8 <HAL_UART_Transmit>
 8000d0a:	e006      	b.n	8000d1a <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	2201      	movs	r2, #1
 8000d12:	4910      	ldr	r1, [pc, #64]	; (8000d54 <I2C_Scan+0xd0>)
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <I2C_Scan+0xc4>)
 8000d16:	f004 f947 	bl	8004fa8 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000d1a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000d1e:	3301      	adds	r3, #1
 8000d20:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000d24:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000d28:	2b7f      	cmp	r3, #127	; 0x7f
 8000d2a:	d9cb      	bls.n	8000cc4 <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d30:	2202      	movs	r2, #2
 8000d32:	4909      	ldr	r1, [pc, #36]	; (8000d58 <I2C_Scan+0xd4>)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <I2C_Scan+0xc4>)
 8000d36:	f004 f937 	bl	8004fa8 <HAL_UART_Transmit>
}
 8000d3a:	bf00      	nop
 8000d3c:	3760      	adds	r7, #96	; 0x60
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bdb0      	pop	{r4, r5, r7, pc}
 8000d42:	bf00      	nop
 8000d44:	0800666c 	.word	0x0800666c
 8000d48:	200003dc 	.word	0x200003dc
 8000d4c:	2000030c 	.word	0x2000030c
 8000d50:	0800665c 	.word	0x0800665c
 8000d54:	08006664 	.word	0x08006664
 8000d58:	08006668 	.word	0x08006668

08000d5c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	460b      	mov	r3, r1
 8000d68:	71bb      	strb	r3, [r7, #6]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	b299      	uxth	r1, r3
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	2201      	movs	r2, #1
 8000d78:	4822      	ldr	r0, [pc, #136]	; (8000e04 <LCD_SendInternal+0xa8>)
 8000d7a:	f002 f905 	bl	8002f88 <HAL_I2C_IsDeviceReady>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d000      	beq.n	8000d8a <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000d88:	e7f1      	b.n	8000d6e <LCD_SendInternal+0x12>
            break;
 8000d8a:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	f023 030f 	bic.w	r3, r3, #15
 8000d92:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000d9a:	7bba      	ldrb	r2, [r7, #14]
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f043 030c 	orr.w	r3, r3, #12
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000daa:	7bba      	ldrb	r2, [r7, #14]
 8000dac:	797b      	ldrb	r3, [r7, #5]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000dba:	7b7a      	ldrb	r2, [r7, #13]
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f043 030c 	orr.w	r3, r3, #12
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000dca:	7b7a      	ldrb	r2, [r7, #13]
 8000dcc:	797b      	ldrb	r3, [r7, #5]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	b299      	uxth	r1, r3
 8000dde:	f107 0208 	add.w	r2, r7, #8
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2304      	movs	r3, #4
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <LCD_SendInternal+0xa8>)
 8000dec:	f001 ffce 	bl	8002d8c <HAL_I2C_Master_Transmit>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000df4:	2005      	movs	r0, #5
 8000df6:	f000 fd67 	bl	80018c8 <HAL_Delay>
    return res;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000030c 	.word	0x2000030c

08000e08 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000e18:	79b9      	ldrb	r1, [r7, #6]
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff9c 	bl	8000d5c <LCD_SendInternal>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000e3c:	79b9      	ldrb	r1, [r7, #6]
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff8a 	bl	8000d5c <LCD_SendInternal>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2130      	movs	r1, #48	; 0x30
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffd2 	bl	8000e08 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2102      	movs	r1, #2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffcd 	bl	8000e08 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	210c      	movs	r1, #12
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffc8 	bl	8000e08 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ffc3 	bl	8000e08 <LCD_SendCommand>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	6039      	str	r1, [r7, #0]
 8000e94:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8000e96:	e009      	b.n	8000eac <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ffc3 	bl	8000e2c <LCD_SendData>
        str++;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f1      	bne.n	8000e98 <LCD_SendString+0xe>
    }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <get_time>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af02      	add	r7, sp, #8
//	RTC_DateTypeDef sDate;
//	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4918      	ldr	r1, [pc, #96]	; (8000f2c <get_time+0x6c>)
 8000eca:	4819      	ldr	r0, [pc, #100]	; (8000f30 <get_time+0x70>)
 8000ecc:	f003 fc94 	bl	80047f8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4918      	ldr	r1, [pc, #96]	; (8000f34 <get_time+0x74>)
 8000ed4:	4816      	ldr	r0, [pc, #88]	; (8000f30 <get_time+0x70>)
 8000ed6:	f003 fd71 	bl	80049bc <HAL_RTC_GetDate>

	sprintf((char *)showTime, "%s %02d : %02d : %02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <get_time+0x6c>)
 8000edc:	78db      	ldrb	r3, [r3, #3]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <get_time+0x78>)
 8000ee8:	441a      	add	r2, r3
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <get_time+0x6c>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <get_time+0x6c>)
 8000ef2:	785b      	ldrb	r3, [r3, #1]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <get_time+0x6c>)
 8000ef8:	789b      	ldrb	r3, [r3, #2]
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	9100      	str	r1, [sp, #0]
 8000efe:	4603      	mov	r3, r0
 8000f00:	490e      	ldr	r1, [pc, #56]	; (8000f3c <get_time+0x7c>)
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <get_time+0x80>)
 8000f04:	f004 fefa 	bl	8005cfc <siprintf>
	sprintf((char *)showDate, "%04d-%02d-%02d", 2000 + sDate.Year, sDate.Month, sDate.Date);
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <get_time+0x74>)
 8000f0a:	78db      	ldrb	r3, [r3, #3]
 8000f0c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <get_time+0x74>)
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <get_time+0x74>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4909      	ldr	r1, [pc, #36]	; (8000f44 <get_time+0x84>)
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <get_time+0x88>)
 8000f22:	f004 feeb 	bl	8005cfc <siprintf>
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000364 	.word	0x20000364
 8000f30:	200003b8 	.word	0x200003b8
 8000f34:	20000360 	.word	0x20000360
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	080066a4 	.word	0x080066a4
 8000f40:	20000378 	.word	0x20000378
 8000f44:	080066bc 	.word	0x080066bc
 8000f48:	20000398 	.word	0x20000398

08000f4c <set_Date>:
//	sTime.Seconds = ss; // set seconds
//
//	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
//}

void set_Date(uint8_t ww, uint8_t mm, uint8_t dd, uint8_t yy) {
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	4611      	mov	r1, r2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71bb      	strb	r3, [r7, #6]
 8000f62:	460b      	mov	r3, r1
 8000f64:	717b      	strb	r3, [r7, #5]
 8000f66:	4613      	mov	r3, r2
 8000f68:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate;

	sDate.WeekDay = ww; // date RTC_WEEKDAY_THURSDAY
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	733b      	strb	r3, [r7, #12]
	sDate.Month = mm; // month RTC_MONTH_FEBRUARY
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	737b      	strb	r3, [r7, #13]
	sDate.Date = dd; // date
 8000f72:	797b      	ldrb	r3, [r7, #5]
 8000f74:	73bb      	strb	r3, [r7, #14]
	sDate.Year = yy; // year
 8000f76:	793b      	ldrb	r3, [r7, #4]
 8000f78:	73fb      	strb	r3, [r7, #15]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <set_Date+0x44>)
 8000f84:	f003 fc96 	bl	80048b4 <HAL_RTC_SetDate>
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	200003b8 	.word	0x200003b8

08000f94 <setModeCheck.0>:
	uint32_t current_tick_1;
	uint32_t current_tick_2;
	uint32_t old_tick_1;
	uint32_t old_tick_2;

	void setModeCheck(int n) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	f8c7 c000 	str.w	ip, [r7]
		if (n == 1) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d110      	bne.n	8000fc8 <setModeCheck.0+0x34>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4820      	ldr	r0, [pc, #128]	; (800102c <setModeCheck.0+0x98>)
 8000fac:	f001 fd90 	bl	8002ad0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	481d      	ldr	r0, [pc, #116]	; (800102c <setModeCheck.0+0x98>)
 8000fb6:	f001 fd8b 	bl	8002ad0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc0:	481a      	ldr	r0, [pc, #104]	; (800102c <setModeCheck.0+0x98>)
 8000fc2:	f001 fd85 	bl	8002ad0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
		}
		else {
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
		}
	}
 8000fc6:	e02d      	b.n	8001024 <setModeCheck.0+0x90>
		else if (n == 2) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d110      	bne.n	8000ff0 <setModeCheck.0+0x5c>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4816      	ldr	r0, [pc, #88]	; (800102c <setModeCheck.0+0x98>)
 8000fd4:	f001 fd7c 	bl	8002ad0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <setModeCheck.0+0x98>)
 8000fde:	f001 fd77 	bl	8002ad0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <setModeCheck.0+0x98>)
 8000fea:	f001 fd71 	bl	8002ad0 <HAL_GPIO_WritePin>
	}
 8000fee:	e019      	b.n	8001024 <setModeCheck.0+0x90>
		else if (n == 3) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d110      	bne.n	8001018 <setModeCheck.0+0x84>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	480c      	ldr	r0, [pc, #48]	; (800102c <setModeCheck.0+0x98>)
 8000ffc:	f001 fd68 	bl	8002ad0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <setModeCheck.0+0x98>)
 8001006:	f001 fd63 	bl	8002ad0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001010:	4806      	ldr	r0, [pc, #24]	; (800102c <setModeCheck.0+0x98>)
 8001012:	f001 fd5d 	bl	8002ad0 <HAL_GPIO_WritePin>
	}
 8001016:	e005      	b.n	8001024 <setModeCheck.0+0x90>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <setModeCheck.0+0x98>)
 8001020:	f001 fd56 	bl	8002ad0 <HAL_GPIO_WritePin>
	}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020400 	.word	0x40020400

08001030 <main>:
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
int main(void)
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	603b      	str	r3, [r7, #0]
  HAL_Init();
 800103c:	f000 fbd2 	bl	80017e4 <HAL_Init>
  SystemClock_Config();
 8001040:	f000 f8ce 	bl	80011e0 <SystemClock_Config>
  MX_GPIO_Init();
 8001044:	f7ff fccc 	bl	80009e0 <MX_GPIO_Init>
  MX_ETH_Init();
 8001048:	f7ff fbb6 	bl	80007b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800104c:	f000 faa6 	bl	800159c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001050:	f000 fb16 	bl	8001680 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001054:	f7ff fd8e 	bl	8000b74 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001058:	f7ff faa0 	bl	800059c <MX_ADC1_Init>
  MX_DAC_Init();
 800105c:	f7ff fb34 	bl	80006c8 <MX_DAC_Init>
  MX_RTC_Init();
 8001060:	f000 f93c 	bl	80012dc <MX_RTC_Init>
  MX_NVIC_Init();
 8001064:	f000 f928 	bl	80012b8 <MX_NVIC_Init>
  set_Date(RTC_WEEKDAY_MONDAY, 10, 27, 23);
 8001068:	2317      	movs	r3, #23
 800106a:	221b      	movs	r2, #27
 800106c:	210a      	movs	r1, #10
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff ff6c 	bl	8000f4c <set_Date>
	I2C_Scan();
 8001074:	f7ff fe06 	bl	8000c84 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8001078:	204e      	movs	r0, #78	; 0x4e
 800107a:	f7ff fee9 	bl	8000e50 <LCD_Init>
	int setmode = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	setModeCheck(setmode);
 8001082:	463b      	mov	r3, r7
 8001084:	469c      	mov	ip, r3
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff84 	bl	8000f94 <setModeCheck.0>
	get_time();
 800108c:	f7ff ff18 	bl	8000ec0 <get_time>
	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	204e      	movs	r0, #78	; 0x4e
 8001094:	f7ff feb8 	bl	8000e08 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, showDate);
 8001098:	494a      	ldr	r1, [pc, #296]	; (80011c4 <main+0x194>)
 800109a:	204e      	movs	r0, #78	; 0x4e
 800109c:	f7ff fef5 	bl	8000e8a <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80010a0:	21c0      	movs	r1, #192	; 0xc0
 80010a2:	204e      	movs	r0, #78	; 0x4e
 80010a4:	f7ff feb0 	bl	8000e08 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, showTime);
 80010a8:	4947      	ldr	r1, [pc, #284]	; (80011c8 <main+0x198>)
 80010aa:	204e      	movs	r0, #78	; 0x4e
 80010ac:	f7ff feed 	bl	8000e8a <LCD_SendString>


	if (HAL_GPIO_ReadPin(GPIOF, setBtn_Pin) == 0) {
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	4846      	ldr	r0, [pc, #280]	; (80011cc <main+0x19c>)
 80010b4:	f001 fcf4 	bl	8002aa0 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <main+0x94>
		current_tick_1 = HAL_GetTick();
 80010be:	f000 fbf7 	bl	80018b0 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]
	}
	if (HAL_GPIO_ReadPin(GPIOF, upBtn_Pin) == 0) {
 80010c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c8:	4840      	ldr	r0, [pc, #256]	; (80011cc <main+0x19c>)
 80010ca:	f001 fce9 	bl	8002aa0 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <main+0xaa>
		current_tick_2 = HAL_GetTick();
 80010d4:	f000 fbec 	bl	80018b0 <HAL_GetTick>
 80010d8:	60f8      	str	r0, [r7, #12]
	}

	if (HAL_GPIO_ReadPin(GPIOF, setBtn_Pin) == 0 && (current_tick_1 - old_tick_1 > 300) ) {
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	483b      	ldr	r0, [pc, #236]	; (80011cc <main+0x19c>)
 80010de:	f001 fcdf 	bl	8002aa0 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10f      	bne.n	8001108 <main+0xd8>
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010f2:	d909      	bls.n	8001108 <main+0xd8>
		  setmode++;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
		  if (setmode == 4) setmode = 0;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d101      	bne.n	8001104 <main+0xd4>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
		  old_tick_1 = current_tick_1;
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	60bb      	str	r3, [r7, #8]
	}

	if (setmode == 0) {
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d104      	bne.n	8001118 <main+0xe8>
		HAL_Delay(1000);
 800110e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001112:	f000 fbd9 	bl	80018c8 <HAL_Delay>
 8001116:	e7b4      	b.n	8001082 <main+0x52>
	}
	else if (HAL_GPIO_ReadPin(GPIOF, upBtn_Pin) == 0 && (current_tick_2 - old_tick_2 > 300)) {
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	482b      	ldr	r0, [pc, #172]	; (80011cc <main+0x19c>)
 800111e:	f001 fcbf 	bl	8002aa0 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1ac      	bne.n	8001082 <main+0x52>
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001132:	d9a6      	bls.n	8001082 <main+0x52>
		if (setmode == 1) sTime.Hours = (sTime.Hours + 1) % 13;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d111      	bne.n	800115e <main+0x12e>
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <main+0x1a0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	1c59      	adds	r1, r3, #1
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <main+0x1a4>)
 8001142:	fb83 2301 	smull	r2, r3, r3, r1
 8001146:	109a      	asrs	r2, r3, #2
 8001148:	17cb      	asrs	r3, r1, #31
 800114a:	1ad2      	subs	r2, r2, r3
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	1aca      	subs	r2, r1, r3
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <main+0x1a0>)
 800115c:	701a      	strb	r2, [r3, #0]
		if (setmode == 2) sTime.Minutes = (sTime.Minutes + 1) % 60;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d111      	bne.n	8001188 <main+0x158>
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <main+0x1a0>)
 8001166:	785b      	ldrb	r3, [r3, #1]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <main+0x1a8>)
 800116c:	fb83 1302 	smull	r1, r3, r3, r2
 8001170:	4413      	add	r3, r2
 8001172:	1159      	asrs	r1, r3, #5
 8001174:	17d3      	asrs	r3, r2, #31
 8001176:	1ac9      	subs	r1, r1, r3
 8001178:	460b      	mov	r3, r1
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	1a5b      	subs	r3, r3, r1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	1ad1      	subs	r1, r2, r3
 8001182:	b2ca      	uxtb	r2, r1
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <main+0x1a0>)
 8001186:	705a      	strb	r2, [r3, #1]
		if (setmode == 3) sTime.Seconds = (sTime.Seconds + 1) % 60;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d111      	bne.n	80011b2 <main+0x182>
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <main+0x1a0>)
 8001190:	789b      	ldrb	r3, [r3, #2]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <main+0x1a8>)
 8001196:	fb83 1302 	smull	r1, r3, r3, r2
 800119a:	4413      	add	r3, r2
 800119c:	1159      	asrs	r1, r3, #5
 800119e:	17d3      	asrs	r3, r2, #31
 80011a0:	1ac9      	subs	r1, r1, r3
 80011a2:	460b      	mov	r3, r1
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	1a5b      	subs	r3, r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	1ad1      	subs	r1, r2, r3
 80011ac:	b2ca      	uxtb	r2, r1
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <main+0x1a0>)
 80011b0:	709a      	strb	r2, [r3, #2]

		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80011b2:	2200      	movs	r2, #0
 80011b4:	4906      	ldr	r1, [pc, #24]	; (80011d0 <main+0x1a0>)
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <main+0x1ac>)
 80011b8:	f003 fa84 	bl	80046c4 <HAL_RTC_SetTime>
		old_tick_2 = current_tick_2;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	607b      	str	r3, [r7, #4]
  {
 80011c0:	e75f      	b.n	8001082 <main+0x52>
 80011c2:	bf00      	nop
 80011c4:	20000398 	.word	0x20000398
 80011c8:	20000378 	.word	0x20000378
 80011cc:	40021400 	.word	0x40021400
 80011d0:	20000364 	.word	0x20000364
 80011d4:	4ec4ec4f 	.word	0x4ec4ec4f
 80011d8:	88888889 	.word	0x88888889
 80011dc:	200003b8 	.word	0x200003b8

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b094      	sub	sp, #80	; 0x50
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0320 	add.w	r3, r7, #32
 80011ea:	2230      	movs	r2, #48	; 0x30
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 fda4 	bl	8005d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <SystemClock_Config+0xd0>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <SystemClock_Config+0xd0>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <SystemClock_Config+0xd0>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <SystemClock_Config+0xd4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <SystemClock_Config+0xd4>)
 800122a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SystemClock_Config+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800123c:	2309      	movs	r3, #9
 800123e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001240:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001246:	2301      	movs	r3, #1
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124a:	2302      	movs	r3, #2
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001254:	2304      	movs	r3, #4
 8001256:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001258:	23a8      	movs	r3, #168	; 0xa8
 800125a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001260:	2307      	movs	r3, #7
 8001262:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fb5d 	bl	8003928 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001274:	f000 f82c 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001284:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2105      	movs	r1, #5
 8001296:	4618      	mov	r0, r3
 8001298:	f002 fdbe 	bl	8003e18 <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012a2:	f000 f815 	bl	80012d0 <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	; 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2029      	movs	r0, #41	; 0x29
 80012c2:	f000 fe72 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80012c6:	2029      	movs	r0, #41	; 0x29
 80012c8:	f000 fe8b 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b090      	sub	sp, #64	; 0x40
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2228      	movs	r2, #40	; 0x28
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f004 fd1d 	bl	8005d3c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <MX_RTC_Init+0x11c>)
 8001304:	4a3d      	ldr	r2, [pc, #244]	; (80013fc <MX_RTC_Init+0x120>)
 8001306:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001308:	4b3b      	ldr	r3, [pc, #236]	; (80013f8 <MX_RTC_Init+0x11c>)
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800130e:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <MX_RTC_Init+0x11c>)
 8001310:	227f      	movs	r2, #127	; 0x7f
 8001312:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001314:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <MX_RTC_Init+0x11c>)
 8001316:	22ff      	movs	r2, #255	; 0xff
 8001318:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <MX_RTC_Init+0x11c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001320:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <MX_RTC_Init+0x11c>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <MX_RTC_Init+0x11c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800132c:	4832      	ldr	r0, [pc, #200]	; (80013f8 <MX_RTC_Init+0x11c>)
 800132e:	f003 f953 	bl	80045d8 <HAL_RTC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001338:	f7ff ffca 	bl	80012d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800133c:	2312      	movs	r3, #18
 800133e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001342:	2300      	movs	r3, #0
 8001344:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800134e:	2300      	movs	r3, #0
 8001350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001354:	2300      	movs	r3, #0
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800135c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001360:	2201      	movs	r2, #1
 8001362:	4619      	mov	r1, r3
 8001364:	4824      	ldr	r0, [pc, #144]	; (80013f8 <MX_RTC_Init+0x11c>)
 8001366:	f003 f9ad 	bl	80046c4 <HAL_RTC_SetTime>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001370:	f7ff ffae 	bl	80012d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001374:	2301      	movs	r3, #1
 8001376:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800137a:	2301      	movs	r3, #1
 800137c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001380:	2301      	movs	r3, #1
 8001382:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 8001386:	2323      	movs	r3, #35	; 0x23
 8001388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800138c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001390:	2201      	movs	r2, #1
 8001392:	4619      	mov	r1, r3
 8001394:	4818      	ldr	r0, [pc, #96]	; (80013f8 <MX_RTC_Init+0x11c>)
 8001396:	f003 fa8d 	bl	80048b4 <HAL_RTC_SetDate>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80013a0:	f7ff ff96 	bl	80012d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80013b4:	2300      	movs	r3, #0
 80013b6:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80013d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	2201      	movs	r2, #1
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_RTC_Init+0x11c>)
 80013e0:	f003 fb3c 	bl	8004a5c <HAL_RTC_SetAlarm_IT>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_RTC_Init+0x112>
  {
    Error_Handler();
 80013ea:	f7ff ff71 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3740      	adds	r7, #64	; 0x40
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200003b8 	.word	0x200003b8
 80013fc:	40002800 	.word	0x40002800

08001400 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08e      	sub	sp, #56	; 0x38
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	2230      	movs	r2, #48	; 0x30
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f004 fc93 	bl	8005d3c <memset>
  if(rtcHandle->Instance==RTC)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_RTC_MspInit+0x4c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d111      	bne.n	8001444 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001420:	2320      	movs	r3, #32
 8001422:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4618      	mov	r0, r3
 8001430:	f002 ff12 	bl	8004258 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800143a:	f7ff ff49 	bl	80012d0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <HAL_RTC_MspInit+0x50>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001444:	bf00      	nop
 8001446:	3738      	adds	r7, #56	; 0x38
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40002800 	.word	0x40002800
 8001450:	42470e3c 	.word	0x42470e3c

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <HAL_MspInit+0x4c>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_MspInit+0x4c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f0:	f000 f9ca 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <RTC_Alarm_IRQHandler+0x10>)
 80014fe:	f003 fbef 	bl	8004ce0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200003b8 	.word	0x200003b8

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f004 fc06 	bl	8005d4c <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20030000 	.word	0x20030000
 800156c:	00000400 	.word	0x00000400
 8001570:	200003d8 	.word	0x200003d8
 8001574:	20000a78 	.word	0x20000a78

08001578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <MX_USART3_UART_Init+0x50>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015d4:	f003 fc9b 	bl	8004f0e <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015de:	f7ff fe77 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200003dc 	.word	0x200003dc
 80015ec:	40004800 	.word	0x40004800

080015f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <HAL_UART_MspInit+0x84>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d12c      	bne.n	800166c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_UART_MspInit+0x88>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800164a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800165c:	2307      	movs	r3, #7
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <HAL_UART_MspInit+0x8c>)
 8001668:	f001 f86e 	bl	8002748 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40004800 	.word	0x40004800
 8001678:	40023800 	.word	0x40023800
 800167c:	40020c00 	.word	0x40020c00

08001680 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001686:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800168a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168e:	2204      	movs	r2, #4
 8001690:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001694:	2202      	movs	r2, #2
 8001696:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a0:	2202      	movs	r2, #2
 80016a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c4:	f002 f812 	bl	80036ec <HAL_PCD_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016ce:	f7ff fdff 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000420 	.word	0x20000420

080016dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fc:	d13f      	bne.n	800177e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_PCD_MspInit+0xac>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_PCD_MspInit+0xac>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <HAL_PCD_MspInit+0xac>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800171a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800172c:	230a      	movs	r3, #10
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4815      	ldr	r0, [pc, #84]	; (800178c <HAL_PCD_MspInit+0xb0>)
 8001738:	f001 f806 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800173c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	480e      	ldr	r0, [pc, #56]	; (800178c <HAL_PCD_MspInit+0xb0>)
 8001752:	f000 fff9 	bl	8002748 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_PCD_MspInit+0xac>)
 8001758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_PCD_MspInit+0xac>)
 800175c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001760:	6353      	str	r3, [r2, #52]	; 0x34
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_PCD_MspInit+0xac>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_PCD_MspInit+0xac>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_PCD_MspInit+0xac>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017ac:	4c0b      	ldr	r4, [pc, #44]	; (80017dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ba:	f7ff fedd 	bl	8001578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017be:	f004 facb 	bl	8005d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7ff fc35 	bl	8001030 <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017d4:	08006728 	.word	0x08006728
  ldr r2, =_sbss
 80017d8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80017dc:	20000a78 	.word	0x20000a78

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_Init+0x40>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_Init+0x40>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_Init+0x40>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 fbc1 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fe1c 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fbd9 	bl	8001ffe <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 fba1 	bl	8001faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000008 	.word	0x20000008
 8001880:	20000010 	.word	0x20000010
 8001884:	2000000c 	.word	0x2000000c

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000010 	.word	0x20000010
 80018ac:	2000092c 	.word	0x2000092c

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000092c 	.word	0x2000092c

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000010 	.word	0x20000010

08001910 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e033      	b.n	800198e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7fe fe86 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001956:	f023 0302 	bic.w	r3, r3, #2
 800195a:	f043 0202 	orr.w	r2, r3, #2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f94a 	bl	8001bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
 800197e:	e001      	b.n	8001984 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1c>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e113      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x244>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	d925      	bls.n	8001a10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68d9      	ldr	r1, [r3, #12]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	3b1e      	subs	r3, #30
 80019da:	2207      	movs	r2, #7
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68d9      	ldr	r1, [r3, #12]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	4603      	mov	r3, r0
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4403      	add	r3, r0
 8001a02:	3b1e      	subs	r3, #30
 8001a04:	409a      	lsls	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	e022      	b.n	8001a56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	2207      	movs	r2, #7
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4403      	add	r3, r0
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d824      	bhi.n	8001aa8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b05      	subs	r3, #5
 8001a70:	221f      	movs	r2, #31
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b05      	subs	r3, #5
 8001a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa6:	e04c      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	d824      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b23      	subs	r3, #35	; 0x23
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	400a      	ands	r2, r1
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b23      	subs	r3, #35	; 0x23
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
 8001af8:	e023      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b41      	subs	r3, #65	; 0x41
 8001b0c:	221f      	movs	r2, #31
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	400a      	ands	r2, r1
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3b41      	subs	r3, #65	; 0x41
 8001b36:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_ADC_ConfigChannel+0x250>)
 8001b44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_ADC_ConfigChannel+0x254>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10f      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1d8>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b12      	cmp	r3, #18
 8001b56:	d10b      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_ADC_ConfigChannel+0x254>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12b      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <HAL_ADC_ConfigChannel+0x258>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d003      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x1f4>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b11      	cmp	r3, #17
 8001b8a:	d122      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_ADC_ConfigChannel+0x258>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d111      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_ADC_ConfigChannel+0x25c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_ADC_ConfigChannel+0x260>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	0c9a      	lsrs	r2, r3, #18
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bc4:	e002      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f9      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40012300 	.word	0x40012300
 8001bec:	40012000 	.word	0x40012000
 8001bf0:	10000012 	.word	0x10000012
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c04:	4b79      	ldr	r3, [pc, #484]	; (8001dec <ADC_Init+0x1f0>)
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	021a      	lsls	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6899      	ldr	r1, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <ADC_Init+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6899      	ldr	r1, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	e00f      	b.n	8001cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0202 	bic.w	r2, r2, #2
 8001d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7e1b      	ldrb	r3, [r3, #24]
 8001d14:	005a      	lsls	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	3b01      	subs	r3, #1
 8001d54:	035a      	lsls	r2, r3, #13
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e007      	b.n	8001d70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	051a      	lsls	r2, r3, #20
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6899      	ldr	r1, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db2:	025a      	lsls	r2, r3, #9
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	029a      	lsls	r2, r3, #10
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40012300 	.word	0x40012300
 8001df0:	0f000001 	.word	0x0f000001

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f7ff ff8e 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff29 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff3e 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff8e 	bl	8001ee8 <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5d 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff31 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa2 	bl	8001f50 <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e014      	b.n	8002052 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	791b      	ldrb	r3, [r3, #4]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7fe fb79 	bl	8000730 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800205a:	b480      	push	{r7}
 800205c:	b087      	sub	sp, #28
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	795b      	ldrb	r3, [r3, #5]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_DAC_ConfigChannel+0x18>
 800206e:	2302      	movs	r3, #2
 8002070:	e03c      	b.n	80020ec <HAL_DAC_ConfigChannel+0x92>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2202      	movs	r2, #2
 800207c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6819      	ldr	r1, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	22c0      	movs	r2, #192	; 0xc0
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43da      	mvns	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	400a      	ands	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06c      	b.n	80021e4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2223      	movs	r2, #35	; 0x23
 8002118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7fe fb99 	bl	8000854 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_ETH_Init+0xf4>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a30      	ldr	r2, [pc, #192]	; (80021ec <HAL_ETH_Init+0xf4>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <HAL_ETH_Init+0xf4>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800213e:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <HAL_ETH_Init+0xf8>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <HAL_ETH_Init+0xf8>)
 8002144:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002148:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800214a:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <HAL_ETH_Init+0xf8>)
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4927      	ldr	r1, [pc, #156]	; (80021f0 <HAL_ETH_Init+0xf8>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_ETH_Init+0xf8>)
 800215a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002172:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002174:	f7ff fb9c 	bl	80018b0 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800217a:	e011      	b.n	80021a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800217c:	f7ff fb98 	bl	80018b0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800218a:	d909      	bls.n	80021a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2204      	movs	r2, #4
 8002190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	22e0      	movs	r2, #224	; 0xe0
 8002198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e021      	b.n	80021e4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1e4      	bne.n	800217c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f958 	bl	8002468 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f9ff 	bl	80025bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa55 	bl	800266e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	461a      	mov	r2, r3
 80021ca:	2100      	movs	r1, #0
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f9bd 	bl	800254c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2210      	movs	r2, #16
 80021de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40013800 	.word	0x40013800

080021f4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4b51      	ldr	r3, [pc, #324]	; (8002350 <ETH_SetMACConfig+0x15c>)
 800220a:	4013      	ands	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7c1b      	ldrb	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <ETH_SetMACConfig+0x28>
 8002216:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800221a:	e000      	b.n	800221e <ETH_SetMACConfig+0x2a>
 800221c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	7c5b      	ldrb	r3, [r3, #17]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <ETH_SetMACConfig+0x38>
 8002226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800222a:	e000      	b.n	800222e <ETH_SetMACConfig+0x3a>
 800222c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800222e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002234:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	7fdb      	ldrb	r3, [r3, #31]
 800223a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800223c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002242:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	7f92      	ldrb	r2, [r2, #30]
 8002248:	2a00      	cmp	r2, #0
 800224a:	d102      	bne.n	8002252 <ETH_SetMACConfig+0x5e>
 800224c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002250:	e000      	b.n	8002254 <ETH_SetMACConfig+0x60>
 8002252:	2200      	movs	r2, #0
                        macconf->Speed |
 8002254:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	7f1b      	ldrb	r3, [r3, #28]
 800225a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800225c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002262:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	791b      	ldrb	r3, [r3, #4]
 8002268:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800226a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002272:	2a00      	cmp	r2, #0
 8002274:	d102      	bne.n	800227c <ETH_SetMACConfig+0x88>
 8002276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227a:	e000      	b.n	800227e <ETH_SetMACConfig+0x8a>
 800227c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800227e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	7bdb      	ldrb	r3, [r3, #15]
 8002284:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002286:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800228c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002294:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002296:	4313      	orrs	r3, r2
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7ff fb0a 	bl	80018c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022ca:	4013      	ands	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022da:	2a00      	cmp	r2, #0
 80022dc:	d101      	bne.n	80022e2 <ETH_SetMACConfig+0xee>
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	e000      	b.n	80022e4 <ETH_SetMACConfig+0xf0>
 80022e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80022f2:	2a01      	cmp	r2, #1
 80022f4:	d101      	bne.n	80022fa <ETH_SetMACConfig+0x106>
 80022f6:	2208      	movs	r2, #8
 80022f8:	e000      	b.n	80022fc <ETH_SetMACConfig+0x108>
 80022fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002304:	2a01      	cmp	r2, #1
 8002306:	d101      	bne.n	800230c <ETH_SetMACConfig+0x118>
 8002308:	2204      	movs	r2, #4
 800230a:	e000      	b.n	800230e <ETH_SetMACConfig+0x11a>
 800230c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800230e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002316:	2a01      	cmp	r2, #1
 8002318:	d101      	bne.n	800231e <ETH_SetMACConfig+0x12a>
 800231a:	2202      	movs	r2, #2
 800231c:	e000      	b.n	8002320 <ETH_SetMACConfig+0x12c>
 800231e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002320:	4313      	orrs	r3, r2
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002338:	2001      	movs	r0, #1
 800233a:	f7ff fac5 	bl	80018c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	ff20810f 	.word	0xff20810f

08002354 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <ETH_SetDMAConfig+0x110>)
 800236e:	4013      	ands	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	7b1b      	ldrb	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <ETH_SetDMAConfig+0x2c>
 800237a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800237e:	e000      	b.n	8002382 <ETH_SetDMAConfig+0x2e>
 8002380:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	7b5b      	ldrb	r3, [r3, #13]
 8002386:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002388:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	7f52      	ldrb	r2, [r2, #29]
 800238e:	2a00      	cmp	r2, #0
 8002390:	d102      	bne.n	8002398 <ETH_SetDMAConfig+0x44>
 8002392:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002396:	e000      	b.n	800239a <ETH_SetDMAConfig+0x46>
 8002398:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800239a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	7b9b      	ldrb	r3, [r3, #14]
 80023a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	7f1b      	ldrb	r3, [r3, #28]
 80023ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	7f9b      	ldrb	r3, [r3, #30]
 80023b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023c8:	4313      	orrs	r3, r2
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d8:	461a      	mov	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7ff fa6c 	bl	80018c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f8:	461a      	mov	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	791b      	ldrb	r3, [r3, #4]
 8002402:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002408:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800240e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002414:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800241c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800241e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002426:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800242c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800243a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002448:	2001      	movs	r0, #1
 800244a:	f7ff fa3d 	bl	80018c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	f8de3f23 	.word	0xf8de3f23

08002468 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0a6      	sub	sp, #152	; 0x98
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800247c:	2300      	movs	r3, #0
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002492:	2301      	movs	r3, #1
 8002494:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024a4:	2300      	movs	r3, #0
 80024a6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fe86 	bl	80021f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024e8:	2301      	movs	r3, #1
 80024ea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002514:	2301      	movs	r3, #1
 8002516:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800251c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800251e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002522:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002528:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800252a:	2301      	movs	r3, #1
 800252c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002530:	2300      	movs	r3, #0
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff08 	bl	8002354 <ETH_SetDMAConfig>
}
 8002544:	bf00      	nop
 8002546:	3798      	adds	r7, #152	; 0x98
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3305      	adds	r3, #5
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	3204      	adds	r2, #4
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <ETH_MACAddressConfig+0x68>)
 800256e:	4413      	add	r3, r2
 8002570:	461a      	mov	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3303      	adds	r3, #3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	061a      	lsls	r2, r3, #24
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3302      	adds	r3, #2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3301      	adds	r3, #1
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	4313      	orrs	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <ETH_MACAddressConfig+0x6c>)
 800259e:	4413      	add	r3, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6013      	str	r3, [r2, #0]
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40028040 	.word	0x40028040
 80025b8:	40028044 	.word	0x40028044

080025bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e03e      	b.n	8002648 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68d9      	ldr	r1, [r3, #12]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	440b      	add	r3, r1
 80025da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	3206      	adds	r2, #6
 80025fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d80c      	bhi.n	800262c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68d9      	ldr	r1, [r3, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	e004      	b.n	8002636 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3301      	adds	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d9bd      	bls.n	80025ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002660:	611a      	str	r2, [r3, #16]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	e046      	b.n	800270a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80026c0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	3212      	adds	r2, #18
 80026d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d80c      	bhi.n	80026fa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6919      	ldr	r1, [r3, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	e004      	b.n	8002704 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3301      	adds	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d9b5      	bls.n	800267c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273a:	60da      	str	r2, [r3, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e177      	b.n	8002a54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 8166 	bne.w	8002a4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d005      	beq.n	800279a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002796:	2b02      	cmp	r3, #2
 8002798:	d130      	bne.n	80027fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 0201 	and.w	r2, r3, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d017      	beq.n	8002838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d123      	bne.n	800288c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80c0 	beq.w	8002a4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <HAL_GPIO_Init+0x324>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a65      	ldr	r2, [pc, #404]	; (8002a6c <HAL_GPIO_Init+0x324>)
 80028d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_GPIO_Init+0x324>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ea:	4a61      	ldr	r2, [pc, #388]	; (8002a70 <HAL_GPIO_Init+0x328>)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	3302      	adds	r3, #2
 80028f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <HAL_GPIO_Init+0x32c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d037      	beq.n	8002986 <HAL_GPIO_Init+0x23e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_GPIO_Init+0x330>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d031      	beq.n	8002982 <HAL_GPIO_Init+0x23a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_GPIO_Init+0x334>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d02b      	beq.n	800297e <HAL_GPIO_Init+0x236>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a55      	ldr	r2, [pc, #340]	; (8002a80 <HAL_GPIO_Init+0x338>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d025      	beq.n	800297a <HAL_GPIO_Init+0x232>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a54      	ldr	r2, [pc, #336]	; (8002a84 <HAL_GPIO_Init+0x33c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01f      	beq.n	8002976 <HAL_GPIO_Init+0x22e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a53      	ldr	r2, [pc, #332]	; (8002a88 <HAL_GPIO_Init+0x340>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0x22a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_GPIO_Init+0x344>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x226>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a51      	ldr	r2, [pc, #324]	; (8002a90 <HAL_GPIO_Init+0x348>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x222>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_GPIO_Init+0x34c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x21e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <HAL_GPIO_Init+0x350>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x21a>
 800295e:	2309      	movs	r3, #9
 8002960:	e012      	b.n	8002988 <HAL_GPIO_Init+0x240>
 8002962:	230a      	movs	r3, #10
 8002964:	e010      	b.n	8002988 <HAL_GPIO_Init+0x240>
 8002966:	2308      	movs	r3, #8
 8002968:	e00e      	b.n	8002988 <HAL_GPIO_Init+0x240>
 800296a:	2307      	movs	r3, #7
 800296c:	e00c      	b.n	8002988 <HAL_GPIO_Init+0x240>
 800296e:	2306      	movs	r3, #6
 8002970:	e00a      	b.n	8002988 <HAL_GPIO_Init+0x240>
 8002972:	2305      	movs	r3, #5
 8002974:	e008      	b.n	8002988 <HAL_GPIO_Init+0x240>
 8002976:	2304      	movs	r3, #4
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x240>
 800297a:	2303      	movs	r3, #3
 800297c:	e004      	b.n	8002988 <HAL_GPIO_Init+0x240>
 800297e:	2302      	movs	r3, #2
 8002980:	e002      	b.n	8002988 <HAL_GPIO_Init+0x240>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_GPIO_Init+0x240>
 8002986:	2300      	movs	r3, #0
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f002 0203 	and.w	r2, r2, #3
 800298e:	0092      	lsls	r2, r2, #2
 8002990:	4093      	lsls	r3, r2
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002998:	4935      	ldr	r1, [pc, #212]	; (8002a70 <HAL_GPIO_Init+0x328>)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	3302      	adds	r3, #2
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a6:	4b3d      	ldr	r3, [pc, #244]	; (8002a9c <HAL_GPIO_Init+0x354>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ca:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <HAL_GPIO_Init+0x354>)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d0:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <HAL_GPIO_Init+0x354>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f4:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <HAL_GPIO_Init+0x354>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_GPIO_Init+0x354>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <HAL_GPIO_Init+0x354>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_GPIO_Init+0x354>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <HAL_GPIO_Init+0x354>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	f67f ae84 	bls.w	8002764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3724      	adds	r7, #36	; 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40013800 	.word	0x40013800
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40020c00 	.word	0x40020c00
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40021400 	.word	0x40021400
 8002a8c:	40021800 	.word	0x40021800
 8002a90:	40021c00 	.word	0x40021c00
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40022400 	.word	0x40022400
 8002a9c:	40013c00 	.word	0x40013c00

08002aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e001      	b.n	8002ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e12b      	b.n	8002d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe f862 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	; 0x24
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b68:	f001 fb4e 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a81      	ldr	r2, [pc, #516]	; (8002d78 <HAL_I2C_Init+0x274>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d807      	bhi.n	8002b88 <HAL_I2C_Init+0x84>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a80      	ldr	r2, [pc, #512]	; (8002d7c <HAL_I2C_Init+0x278>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	bf94      	ite	ls
 8002b80:	2301      	movls	r3, #1
 8002b82:	2300      	movhi	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e006      	b.n	8002b96 <HAL_I2C_Init+0x92>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4a7d      	ldr	r2, [pc, #500]	; (8002d80 <HAL_I2C_Init+0x27c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	bf94      	ite	ls
 8002b90:	2301      	movls	r3, #1
 8002b92:	2300      	movhi	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0e7      	b.n	8002d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a78      	ldr	r2, [pc, #480]	; (8002d84 <HAL_I2C_Init+0x280>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0c9b      	lsrs	r3, r3, #18
 8002ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a6a      	ldr	r2, [pc, #424]	; (8002d78 <HAL_I2C_Init+0x274>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d802      	bhi.n	8002bd8 <HAL_I2C_Init+0xd4>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	e009      	b.n	8002bec <HAL_I2C_Init+0xe8>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	4a69      	ldr	r2, [pc, #420]	; (8002d88 <HAL_I2C_Init+0x284>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	3301      	adds	r3, #1
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	495c      	ldr	r1, [pc, #368]	; (8002d78 <HAL_I2C_Init+0x274>)
 8002c08:	428b      	cmp	r3, r1
 8002c0a:	d819      	bhi.n	8002c40 <HAL_I2C_Init+0x13c>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e59      	subs	r1, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c20:	400b      	ands	r3, r1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_I2C_Init+0x138>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1e59      	subs	r1, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3a:	e051      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	e04f      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d111      	bne.n	8002c6c <HAL_I2C_Init+0x168>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e58      	subs	r0, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	440b      	add	r3, r1
 8002c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e012      	b.n	8002c92 <HAL_I2C_Init+0x18e>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e58      	subs	r0, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	0099      	lsls	r1, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Init+0x196>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e022      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_I2C_Init+0x1bc>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1e58      	subs	r0, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	440b      	add	r3, r1
 8002cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cbe:	e00f      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e58      	subs	r0, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	0099      	lsls	r1, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	6809      	ldr	r1, [r1, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6911      	ldr	r1, [r2, #16]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68d2      	ldr	r2, [r2, #12]
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	000186a0 	.word	0x000186a0
 8002d7c:	001e847f 	.word	0x001e847f
 8002d80:	003d08ff 	.word	0x003d08ff
 8002d84:	431bde83 	.word	0x431bde83
 8002d88:	10624dd3 	.word	0x10624dd3

08002d8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	460b      	mov	r3, r1
 8002d9a:	817b      	strh	r3, [r7, #10]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7fe fd86 	bl	80018b0 <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	f040 80e0 	bne.w	8002f74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2319      	movs	r3, #25
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4970      	ldr	r1, [pc, #448]	; (8002f80 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fa92 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0d3      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_I2C_Master_Transmit+0x50>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0cc      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x1ea>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d007      	beq.n	8002e02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2221      	movs	r2, #33	; 0x21
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	893a      	ldrh	r2, [r7, #8]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a50      	ldr	r2, [pc, #320]	; (8002f84 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	6a3a      	ldr	r2, [r7, #32]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f9ca 	bl	80031e4 <I2C_MasterRequestWrite>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e08d      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e70:	e066      	b.n	8002f40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	6a39      	ldr	r1, [r7, #32]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fb0c 	bl	8003494 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d107      	bne.n	8002e9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e06b      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d11b      	bne.n	8002f14 <HAL_I2C_Master_Transmit+0x188>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	6a39      	ldr	r1, [r7, #32]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fafc 	bl	8003516 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d107      	bne.n	8002f3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e01a      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d194      	bne.n	8002e72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	00100002 	.word	0x00100002
 8002f84:	ffff0000 	.word	0xffff0000

08002f88 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	460b      	mov	r3, r1
 8002f96:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7fe fc8a 	bl	80018b0 <HAL_GetTick>
 8002f9c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	f040 8111 	bne.w	80031d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2319      	movs	r3, #25
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4988      	ldr	r1, [pc, #544]	; (80031dc <HAL_I2C_IsDeviceReady+0x254>)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f994 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e104      	b.n	80031d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_I2C_IsDeviceReady+0x50>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e0fd      	b.n	80031d4 <HAL_I2C_IsDeviceReady+0x24c>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d007      	beq.n	8002ffe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800300c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2224      	movs	r2, #36	; 0x24
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a70      	ldr	r2, [pc, #448]	; (80031e0 <HAL_I2C_IsDeviceReady+0x258>)
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003030:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2200      	movs	r2, #0
 800303a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f952 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003058:	d103      	bne.n	8003062 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0b6      	b.n	80031d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003066:	897b      	ldrh	r3, [r7, #10]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003074:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003076:	f7fe fc1b 	bl	80018b0 <HAL_GetTick>
 800307a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b02      	cmp	r3, #2
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030aa:	e025      	b.n	80030f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ac:	f7fe fc00 	bl	80018b0 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d302      	bcc.n	80030c2 <HAL_I2C_IsDeviceReady+0x13a>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	22a0      	movs	r2, #160	; 0xa0
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2ba0      	cmp	r3, #160	; 0xa0
 8003102:	d005      	beq.n	8003110 <HAL_I2C_IsDeviceReady+0x188>
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_I2C_IsDeviceReady+0x188>
 800310a:	7dbb      	ldrb	r3, [r7, #22]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0cd      	beq.n	80030ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	d129      	bne.n	800317a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003134:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2319      	movs	r3, #25
 8003152:	2201      	movs	r2, #1
 8003154:	4921      	ldr	r1, [pc, #132]	; (80031dc <HAL_I2C_IsDeviceReady+0x254>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f8c6 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e036      	b.n	80031d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e02c      	b.n	80031d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003188:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003192:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2319      	movs	r3, #25
 800319a:	2201      	movs	r2, #1
 800319c:	490f      	ldr	r1, [pc, #60]	; (80031dc <HAL_I2C_IsDeviceReady+0x254>)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f8a2 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e012      	b.n	80031d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	3301      	adds	r3, #1
 80031b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	f4ff af32 	bcc.w	8003022 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	00100002 	.word	0x00100002
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	460b      	mov	r3, r1
 80031f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d006      	beq.n	800320e <I2C_MasterRequestWrite+0x2a>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d003      	beq.n	800320e <I2C_MasterRequestWrite+0x2a>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800320c:	d108      	bne.n	8003220 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e00b      	b.n	8003238 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	2b12      	cmp	r3, #18
 8003226:	d107      	bne.n	8003238 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003236:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f84f 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325e:	d103      	bne.n	8003268 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e035      	b.n	80032d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003274:	d108      	bne.n	8003288 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003276:	897b      	ldrh	r3, [r7, #10]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	e01b      	b.n	80032c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003288:	897b      	ldrh	r3, [r7, #10]
 800328a:	11db      	asrs	r3, r3, #7
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 0306 	and.w	r3, r3, #6
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f063 030f 	orn	r3, r3, #15
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	490e      	ldr	r1, [pc, #56]	; (80032e0 <I2C_MasterRequestWrite+0xfc>)
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f875 	bl	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e010      	b.n	80032d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4907      	ldr	r1, [pc, #28]	; (80032e4 <I2C_MasterRequestWrite+0x100>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f865 	bl	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	00010008 	.word	0x00010008
 80032e4:	00010002 	.word	0x00010002

080032e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f8:	e025      	b.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d021      	beq.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7fe fad5 	bl	80018b0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d116      	bne.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e023      	b.n	800338e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d10d      	bne.n	800336c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	43da      	mvns	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4013      	ands	r3, r2
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	e00c      	b.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	43da      	mvns	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	429a      	cmp	r2, r3
 800338a:	d0b6      	beq.n	80032fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033a4:	e051      	b.n	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b4:	d123      	bne.n	80033fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f043 0204 	orr.w	r2, r3, #4
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e046      	b.n	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d021      	beq.n	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003406:	f7fe fa53 	bl	80018b0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d116      	bne.n	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f043 0220 	orr.w	r2, r3, #32
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e020      	b.n	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10c      	bne.n	800346e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e00b      	b.n	8003486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d18d      	bne.n	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a0:	e02d      	b.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f878 	bl	8003598 <I2C_IsAcknowledgeFailed>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e02d      	b.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d021      	beq.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe f9f9 	bl	80018b0 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d116      	bne.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e007      	b.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b80      	cmp	r3, #128	; 0x80
 800350a:	d1ca      	bne.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003522:	e02d      	b.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f837 	bl	8003598 <I2C_IsAcknowledgeFailed>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e02d      	b.n	8003590 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d021      	beq.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353c:	f7fe f9b8 	bl	80018b0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d302      	bcc.n	8003552 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d116      	bne.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e007      	b.n	8003590 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b04      	cmp	r3, #4
 800358c:	d1ca      	bne.n	8003524 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ae:	d11b      	bne.n	80035e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f043 0204 	orr.w	r2, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b20      	cmp	r3, #32
 800360a:	d129      	bne.n	8003660 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	; 0x24
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0210 	bic.w	r2, r2, #16
 8003632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b20      	cmp	r3, #32
 8003686:	d12a      	bne.n	80036de <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80036a8:	89fb      	ldrh	r3, [r7, #14]
 80036aa:	f023 030f 	bic.w	r3, r3, #15
 80036ae:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	89fb      	ldrh	r3, [r7, #14]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	89fa      	ldrh	r2, [r7, #14]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80036de:	2302      	movs	r3, #2
  }
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ee:	b08f      	sub	sp, #60	; 0x3c
 80036f0:	af0a      	add	r7, sp, #40	; 0x28
 80036f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e10f      	b.n	800391e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fd ffdf 	bl	80016dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2203      	movs	r2, #3
 8003722:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f002 f808 	bl	8005752 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	687e      	ldr	r6, [r7, #4]
 800374a:	466d      	mov	r5, sp
 800374c:	f106 0410 	add.w	r4, r6, #16
 8003750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800375c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003760:	1d33      	adds	r3, r6, #4
 8003762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003764:	6838      	ldr	r0, [r7, #0]
 8003766:	f001 ff93 	bl	8005690 <USB_CoreInit>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0d0      	b.n	800391e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f001 fff6 	bl	8005774 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	e04a      	b.n	8003824 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	333d      	adds	r3, #61	; 0x3d
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	333c      	adds	r3, #60	; 0x3c
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	b298      	uxth	r0, r3
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3344      	adds	r3, #68	; 0x44
 80037ca:	4602      	mov	r2, r0
 80037cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	3340      	adds	r3, #64	; 0x40
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3348      	adds	r3, #72	; 0x48
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	334c      	adds	r3, #76	; 0x4c
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3354      	adds	r3, #84	; 0x54
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	3301      	adds	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	7bfa      	ldrb	r2, [r7, #15]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	d3af      	bcc.n	800378e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e044      	b.n	80038be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038a2:	7bfa      	ldrb	r2, [r7, #15]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	3301      	adds	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d3b5      	bcc.n	8003834 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	687e      	ldr	r6, [r7, #4]
 80038d0:	466d      	mov	r5, sp
 80038d2:	f106 0410 	add.w	r4, r6, #16
 80038d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80038e6:	1d33      	adds	r3, r6, #4
 80038e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038ea:	6838      	ldr	r0, [r7, #0]
 80038ec:	f001 ff8e 	bl	800580c <USB_DevInit>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e00d      	b.n	800391e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f002 f959 	bl	8005bce <USB_DevDisconnect>

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e267      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d075      	beq.n	8003a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003946:	4b88      	ldr	r3, [pc, #544]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b04      	cmp	r3, #4
 8003950:	d00c      	beq.n	800396c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003952:	4b85      	ldr	r3, [pc, #532]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395a:	2b08      	cmp	r3, #8
 800395c:	d112      	bne.n	8003984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800395e:	4b82      	ldr	r3, [pc, #520]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800396a:	d10b      	bne.n	8003984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	4b7e      	ldr	r3, [pc, #504]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d05b      	beq.n	8003a30 <HAL_RCC_OscConfig+0x108>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d157      	bne.n	8003a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e242      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398c:	d106      	bne.n	800399c <HAL_RCC_OscConfig+0x74>
 800398e:	4b76      	ldr	r3, [pc, #472]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a75      	ldr	r2, [pc, #468]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e01d      	b.n	80039d8 <HAL_RCC_OscConfig+0xb0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x98>
 80039a6:	4b70      	ldr	r3, [pc, #448]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6f      	ldr	r2, [pc, #444]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	4b6d      	ldr	r3, [pc, #436]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6c      	ldr	r2, [pc, #432]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e00b      	b.n	80039d8 <HAL_RCC_OscConfig+0xb0>
 80039c0:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a68      	ldr	r2, [pc, #416]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4b66      	ldr	r3, [pc, #408]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a65      	ldr	r2, [pc, #404]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d013      	beq.n	8003a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fd ff66 	bl	80018b0 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fd ff62 	bl	80018b0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e207      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b5b      	ldr	r3, [pc, #364]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0xc0>
 8003a06:	e014      	b.n	8003a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fd ff52 	bl	80018b0 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd ff4e 	bl	80018b0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1f3      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	4b51      	ldr	r3, [pc, #324]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0xe8>
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d063      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d11c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a56:	4b44      	ldr	r3, [pc, #272]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d116      	bne.n	8003a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a62:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_RCC_OscConfig+0x152>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e1c7      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7a:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4937      	ldr	r1, [pc, #220]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	e03a      	b.n	8003b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a98:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <HAL_RCC_OscConfig+0x244>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fd ff07 	bl	80018b0 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa6:	f7fd ff03 	bl	80018b0 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e1a8      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac4:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4925      	ldr	r1, [pc, #148]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]
 8003ad8:	e015      	b.n	8003b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_OscConfig+0x244>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fee6 	bl	80018b0 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fd fee2 	bl	80018b0 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e187      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d036      	beq.n	8003b80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_RCC_OscConfig+0x248>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fd fec6 	bl	80018b0 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b28:	f7fd fec2 	bl	80018b0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e167      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x200>
 8003b46:	e01b      	b.n	8003b80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_RCC_OscConfig+0x248>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4e:	f7fd feaf 	bl	80018b0 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	e00e      	b.n	8003b74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fd feab 	bl	80018b0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d907      	bls.n	8003b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e150      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	42470000 	.word	0x42470000
 8003b70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b74:	4b88      	ldr	r3, [pc, #544]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ea      	bne.n	8003b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8097 	beq.w	8003cbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b92:	4b81      	ldr	r3, [pc, #516]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	4b7d      	ldr	r3, [pc, #500]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	4a7c      	ldr	r2, [pc, #496]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6413      	str	r3, [r2, #64]	; 0x40
 8003bae:	4b7a      	ldr	r3, [pc, #488]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbe:	4b77      	ldr	r3, [pc, #476]	; (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d118      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bca:	4b74      	ldr	r3, [pc, #464]	; (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a73      	ldr	r2, [pc, #460]	; (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd6:	f7fd fe6b 	bl	80018b0 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bde:	f7fd fe67 	bl	80018b0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e10c      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	4b6a      	ldr	r3, [pc, #424]	; (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x2ea>
 8003c04:	4b64      	ldr	r3, [pc, #400]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a63      	ldr	r2, [pc, #396]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	e01c      	b.n	8003c4c <HAL_RCC_OscConfig+0x324>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x30c>
 8003c1a:	4b5f      	ldr	r3, [pc, #380]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a5e      	ldr	r2, [pc, #376]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	4b5c      	ldr	r3, [pc, #368]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a5b      	ldr	r2, [pc, #364]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0x324>
 8003c34:	4b58      	ldr	r3, [pc, #352]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a57      	ldr	r2, [pc, #348]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c40:	4b55      	ldr	r3, [pc, #340]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a54      	ldr	r2, [pc, #336]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c46:	f023 0304 	bic.w	r3, r3, #4
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fd fe2c 	bl	80018b0 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fe28 	bl	80018b0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0cb      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c72:	4b49      	ldr	r3, [pc, #292]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ee      	beq.n	8003c5c <HAL_RCC_OscConfig+0x334>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c80:	f7fd fe16 	bl	80018b0 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fd fe12 	bl	80018b0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0b5      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9e:	4b3e      	ldr	r3, [pc, #248]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ee      	bne.n	8003c88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	4a38      	ldr	r2, [pc, #224]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80a1 	beq.w	8003e08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cc6:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d05c      	beq.n	8003d8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d141      	bne.n	8003d5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCC_OscConfig+0x478>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fde6 	bl	80018b0 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd fde2 	bl	80018b0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e087      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	019b      	lsls	r3, r3, #6
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	491b      	ldr	r1, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCC_OscConfig+0x478>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fd fdbb 	bl	80018b0 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fd fdb7 	bl	80018b0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e05c      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x416>
 8003d5c:	e054      	b.n	8003e08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <HAL_RCC_OscConfig+0x478>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fd fda4 	bl	80018b0 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fd fda0 	bl	80018b0 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e045      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x444>
 8003d8a:	e03d      	b.n	8003e08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e038      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCC_OscConfig+0x4ec>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d028      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d121      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d11a      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d111      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	3b01      	subs	r3, #1
 8003dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d107      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800

08003e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0cc      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d90c      	bls.n	8003e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b65      	ldr	r3, [pc, #404]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e42:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0b8      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e6c:	4b59      	ldr	r3, [pc, #356]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a58      	ldr	r2, [pc, #352]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e84:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4a52      	ldr	r2, [pc, #328]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e90:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	494d      	ldr	r1, [pc, #308]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d044      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b47      	ldr	r3, [pc, #284]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d119      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e07f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b3f      	ldr	r3, [pc, #252]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e06f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e067      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ef6:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4934      	ldr	r1, [pc, #208]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f08:	f7fd fcd2 	bl	80018b0 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7fd fcce 	bl	80018b0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e04f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b2b      	ldr	r3, [pc, #172]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 020c 	and.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1eb      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d20c      	bcs.n	8003f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e032      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4916      	ldr	r1, [pc, #88]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8a:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	490e      	ldr	r1, [pc, #56]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f9e:	f000 f821 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	490a      	ldr	r1, [pc, #40]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	5ccb      	ldrb	r3, [r1, r3]
 8003fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb6:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd fc32 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023c00 	.word	0x40023c00
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	080066cc 	.word	0x080066cc
 8003fdc:	20000008 	.word	0x20000008
 8003fe0:	2000000c 	.word	0x2000000c

08003fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe8:	b094      	sub	sp, #80	; 0x50
 8003fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ffc:	4b79      	ldr	r3, [pc, #484]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b08      	cmp	r3, #8
 8004006:	d00d      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x40>
 8004008:	2b08      	cmp	r3, #8
 800400a:	f200 80e1 	bhi.w	80041d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x34>
 8004012:	2b04      	cmp	r3, #4
 8004014:	d003      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0x3a>
 8004016:	e0db      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4b73      	ldr	r3, [pc, #460]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800401c:	e0db      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800401e:	4b73      	ldr	r3, [pc, #460]	; (80041ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004020:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004022:	e0d8      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004024:	4b6f      	ldr	r3, [pc, #444]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800402c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800402e:	4b6d      	ldr	r3, [pc, #436]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d063      	beq.n	8004102 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403a:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	099b      	lsrs	r3, r3, #6
 8004040:	2200      	movs	r2, #0
 8004042:	63bb      	str	r3, [r7, #56]	; 0x38
 8004044:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
 800404e:	2300      	movs	r3, #0
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
 8004052:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004056:	4622      	mov	r2, r4
 8004058:	462b      	mov	r3, r5
 800405a:	f04f 0000 	mov.w	r0, #0
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	0159      	lsls	r1, r3, #5
 8004064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004068:	0150      	lsls	r0, r2, #5
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4621      	mov	r1, r4
 8004070:	1a51      	subs	r1, r2, r1
 8004072:	6139      	str	r1, [r7, #16]
 8004074:	4629      	mov	r1, r5
 8004076:	eb63 0301 	sbc.w	r3, r3, r1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004088:	4659      	mov	r1, fp
 800408a:	018b      	lsls	r3, r1, #6
 800408c:	4651      	mov	r1, sl
 800408e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004092:	4651      	mov	r1, sl
 8004094:	018a      	lsls	r2, r1, #6
 8004096:	4651      	mov	r1, sl
 8004098:	ebb2 0801 	subs.w	r8, r2, r1
 800409c:	4659      	mov	r1, fp
 800409e:	eb63 0901 	sbc.w	r9, r3, r1
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b6:	4690      	mov	r8, r2
 80040b8:	4699      	mov	r9, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	eb18 0303 	adds.w	r3, r8, r3
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	462b      	mov	r3, r5
 80040c4:	eb49 0303 	adc.w	r3, r9, r3
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040d6:	4629      	mov	r1, r5
 80040d8:	024b      	lsls	r3, r1, #9
 80040da:	4621      	mov	r1, r4
 80040dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040e0:	4621      	mov	r1, r4
 80040e2:	024a      	lsls	r2, r1, #9
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ea:	2200      	movs	r2, #0
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f4:	f7fc f8d4 	bl	80002a0 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4613      	mov	r3, r2
 80040fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004100:	e058      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004102:	4b38      	ldr	r3, [pc, #224]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	099b      	lsrs	r3, r3, #6
 8004108:	2200      	movs	r2, #0
 800410a:	4618      	mov	r0, r3
 800410c:	4611      	mov	r1, r2
 800410e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004112:	623b      	str	r3, [r7, #32]
 8004114:	2300      	movs	r3, #0
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
 8004118:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800411c:	4642      	mov	r2, r8
 800411e:	464b      	mov	r3, r9
 8004120:	f04f 0000 	mov.w	r0, #0
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	0159      	lsls	r1, r3, #5
 800412a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412e:	0150      	lsls	r0, r2, #5
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4641      	mov	r1, r8
 8004136:	ebb2 0a01 	subs.w	sl, r2, r1
 800413a:	4649      	mov	r1, r9
 800413c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800414c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004150:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004154:	ebb2 040a 	subs.w	r4, r2, sl
 8004158:	eb63 050b 	sbc.w	r5, r3, fp
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	00eb      	lsls	r3, r5, #3
 8004166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800416a:	00e2      	lsls	r2, r4, #3
 800416c:	4614      	mov	r4, r2
 800416e:	461d      	mov	r5, r3
 8004170:	4643      	mov	r3, r8
 8004172:	18e3      	adds	r3, r4, r3
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	464b      	mov	r3, r9
 8004178:	eb45 0303 	adc.w	r3, r5, r3
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800418a:	4629      	mov	r1, r5
 800418c:	028b      	lsls	r3, r1, #10
 800418e:	4621      	mov	r1, r4
 8004190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004194:	4621      	mov	r1, r4
 8004196:	028a      	lsls	r2, r1, #10
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419e:	2200      	movs	r2, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a8:	f7fc f87a 	bl	80002a0 <__aeabi_uldivmod>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4613      	mov	r3, r2
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ce:	e002      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3750      	adds	r7, #80	; 0x50
 80041dc:	46bd      	mov	sp, r7
 80041de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	007a1200 	.word	0x007a1200

080041f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000008 	.word	0x20000008

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800420c:	f7ff fff0 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0a9b      	lsrs	r3, r3, #10
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4903      	ldr	r1, [pc, #12]	; (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40023800 	.word	0x40023800
 800422c:	080066dc 	.word	0x080066dc

08004230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004234:	f7ff ffdc 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	0b5b      	lsrs	r3, r3, #13
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4903      	ldr	r1, [pc, #12]	; (8004254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40023800 	.word	0x40023800
 8004254:	080066dc 	.word	0x080066dc

08004258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004288:	2b00      	cmp	r3, #0
 800428a:	d075      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800428c:	4b91      	ldr	r3, [pc, #580]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004292:	f7fd fb0d 	bl	80018b0 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800429a:	f7fd fb09 	bl	80018b0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e189      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042ac:	4b8a      	ldr	r3, [pc, #552]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f0      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	019a      	lsls	r2, r3, #6
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	071b      	lsls	r3, r3, #28
 80042d0:	4981      	ldr	r1, [pc, #516]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01f      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042e4:	4b7c      	ldr	r3, [pc, #496]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ea:	0f1b      	lsrs	r3, r3, #28
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	019a      	lsls	r2, r3, #6
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	061b      	lsls	r3, r3, #24
 80042fe:	431a      	orrs	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	071b      	lsls	r3, r3, #28
 8004304:	4974      	ldr	r1, [pc, #464]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800430c:	4b72      	ldr	r3, [pc, #456]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800430e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004312:	f023 021f 	bic.w	r2, r3, #31
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	3b01      	subs	r3, #1
 800431c:	496e      	ldr	r1, [pc, #440]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	019a      	lsls	r2, r3, #6
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	071b      	lsls	r3, r3, #28
 8004344:	4964      	ldr	r1, [pc, #400]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800434c:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004352:	f7fd faad 	bl	80018b0 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800435a:	f7fd faa9 	bl	80018b0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e129      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800436c:	4b5a      	ldr	r3, [pc, #360]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800438c:	2b00      	cmp	r3, #0
 800438e:	d079      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004390:	4b52      	ldr	r3, [pc, #328]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004396:	f7fd fa8b 	bl	80018b0 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800439e:	f7fd fa87 	bl	80018b0 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e107      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043b0:	4b49      	ldr	r3, [pc, #292]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043bc:	d0ef      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d020      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043ca:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	0f1b      	lsrs	r3, r3, #28
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	019a      	lsls	r2, r3, #6
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	061b      	lsls	r3, r3, #24
 80043e4:	431a      	orrs	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	493b      	ldr	r1, [pc, #236]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043f2:	4b39      	ldr	r3, [pc, #228]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	3b01      	subs	r3, #1
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	4934      	ldr	r1, [pc, #208]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01e      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004418:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	0e1b      	lsrs	r3, r3, #24
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	019a      	lsls	r2, r3, #6
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	061b      	lsls	r3, r3, #24
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	071b      	lsls	r3, r3, #28
 8004438:	4927      	ldr	r1, [pc, #156]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004440:	4b25      	ldr	r3, [pc, #148]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	4922      	ldr	r1, [pc, #136]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800445c:	f7fd fa28 	bl	80018b0 <HAL_GetTick>
 8004460:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004464:	f7fd fa24 	bl	80018b0 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0a4      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004476:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800447e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004482:	d1ef      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 808b 	beq.w	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a0f      	ldr	r2, [pc, #60]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ba:	f7fd f9f9 	bl	80018b0 <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c0:	e010      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fd f9f5 	bl	80018b0 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d909      	bls.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e075      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80044d4:	42470068 	.word	0x42470068
 80044d8:	40023800 	.word	0x40023800
 80044dc:	42470070 	.word	0x42470070
 80044e0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044e4:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0e8      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044f0:	4b36      	ldr	r3, [pc, #216]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02f      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	429a      	cmp	r2, r3
 800450c:	d028      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004518:	4b2d      	ldr	r3, [pc, #180]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800451e:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004524:	4a29      	ldr	r2, [pc, #164]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800452a:	4b28      	ldr	r3, [pc, #160]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b01      	cmp	r3, #1
 8004534:	d114      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004536:	f7fd f9bb 	bl	80018b0 <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fd f9b7 	bl	80018b0 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e035      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ee      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456c:	d10d      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800456e:	4b17      	ldr	r3, [pc, #92]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800457e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004582:	4912      	ldr	r1, [pc, #72]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004584:	4313      	orrs	r3, r2
 8004586:	608b      	str	r3, [r1, #8]
 8004588:	e005      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800458a:	4b10      	ldr	r3, [pc, #64]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004590:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004594:	6093      	str	r3, [r2, #8]
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004598:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a2:	490a      	ldr	r1, [pc, #40]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80045bc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40007000 	.word	0x40007000
 80045cc:	40023800 	.word	0x40023800
 80045d0:	42470e40 	.word	0x42470e40
 80045d4:	424711e0 	.word	0x424711e0

080045d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e066      	b.n	80046bc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	7f5b      	ldrb	r3, [r3, #29]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d105      	bne.n	8004604 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc fefe 	bl	8001400 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	22ca      	movs	r2, #202	; 0xca
 8004610:	625a      	str	r2, [r3, #36]	; 0x24
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2253      	movs	r2, #83	; 0x53
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fbd8 	bl	8004dd0 <RTC_EnterInitMode>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d12c      	bne.n	8004684 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68d2      	ldr	r2, [r2, #12]
 8004664:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6919      	ldr	r1, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	041a      	lsls	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fbdf 	bl	8004e3e <RTC_ExitInitMode>
 8004680:	4603      	mov	r3, r0
 8004682:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d113      	bne.n	80046b2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699a      	ldr	r2, [r3, #24]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	7f1b      	ldrb	r3, [r3, #28]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_RTC_SetTime+0x1c>
 80046dc:	2302      	movs	r3, #2
 80046de:	e087      	b.n	80047f0 <HAL_RTC_SetTime+0x12c>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2202      	movs	r2, #2
 80046ea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d126      	bne.n	8004740 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fbbc 	bl	8004e88 <RTC_ByteToBcd2>
 8004710:	4603      	mov	r3, r0
 8004712:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fbb5 	bl	8004e88 <RTC_ByteToBcd2>
 800471e:	4603      	mov	r3, r0
 8004720:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004722:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	789b      	ldrb	r3, [r3, #2]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fbad 	bl	8004e88 <RTC_ByteToBcd2>
 800472e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004730:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	78db      	ldrb	r3, [r3, #3]
 8004738:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e018      	b.n	8004772 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2200      	movs	r2, #0
 8004752:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004760:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004766:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	78db      	ldrb	r3, [r3, #3]
 800476c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	22ca      	movs	r2, #202	; 0xca
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2253      	movs	r2, #83	; 0x53
 8004780:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fb24 	bl	8004dd0 <RTC_EnterInitMode>
 8004788:	4603      	mov	r3, r0
 800478a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d120      	bne.n	80047d4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800479c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047a0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fb37 	bl	8004e3e <RTC_ExitInitMode>
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	22ff      	movs	r2, #255	; 0xff
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	771a      	strb	r2, [r3, #28]

  return status;
 80047ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd90      	pop	{r4, r7, pc}

080047f8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800482a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800482e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	0c1b      	lsrs	r3, r3, #16
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483a:	b2da      	uxtb	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	b2db      	uxtb	r3, r3
 8004846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	0d9b      	lsrs	r3, r3, #22
 8004862:	b2db      	uxtb	r3, r3
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d11a      	bne.n	80048aa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fb22 	bl	8004ec2 <RTC_Bcd2ToByte>
 800487e:	4603      	mov	r3, r0
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fb19 	bl	8004ec2 <RTC_Bcd2ToByte>
 8004890:	4603      	mov	r3, r0
 8004892:	461a      	mov	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	789b      	ldrb	r3, [r3, #2]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fb10 	bl	8004ec2 <RTC_Bcd2ToByte>
 80048a2:	4603      	mov	r3, r0
 80048a4:	461a      	mov	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048b4:	b590      	push	{r4, r7, lr}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	7f1b      	ldrb	r3, [r3, #28]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_RTC_SetDate+0x1c>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e071      	b.n	80049b4 <HAL_RTC_SetDate+0x100>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2202      	movs	r2, #2
 80048da:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10e      	bne.n	8004900 <HAL_RTC_SetDate+0x4c>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	785b      	ldrb	r3, [r3, #1]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	f023 0310 	bic.w	r3, r3, #16
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	330a      	adds	r3, #10
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11c      	bne.n	8004940 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	78db      	ldrb	r3, [r3, #3]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fabc 	bl	8004e88 <RTC_ByteToBcd2>
 8004910:	4603      	mov	r3, r0
 8004912:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fab5 	bl	8004e88 <RTC_ByteToBcd2>
 800491e:	4603      	mov	r3, r0
 8004920:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004922:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	789b      	ldrb	r3, [r3, #2]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 faad 	bl	8004e88 <RTC_ByteToBcd2>
 800492e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004930:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e00e      	b.n	800495e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	78db      	ldrb	r3, [r3, #3]
 8004944:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800494c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004952:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	22ca      	movs	r2, #202	; 0xca
 8004964:	625a      	str	r2, [r3, #36]	; 0x24
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2253      	movs	r2, #83	; 0x53
 800496c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fa2e 	bl	8004dd0 <RTC_EnterInitMode>
 8004974:	4603      	mov	r3, r0
 8004976:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004978:	7cfb      	ldrb	r3, [r7, #19]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10c      	bne.n	8004998 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800498c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fa55 	bl	8004e3e <RTC_ExitInitMode>
 8004994:	4603      	mov	r3, r0
 8004996:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	22ff      	movs	r2, #255	; 0xff
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]

  return status;
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}

080049bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	0b5b      	lsrs	r3, r3, #13
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11a      	bne.n	8004a50 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	78db      	ldrb	r3, [r3, #3]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fa4f 	bl	8004ec2 <RTC_Bcd2ToByte>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fa46 	bl	8004ec2 <RTC_Bcd2ToByte>
 8004a36:	4603      	mov	r3, r0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	789b      	ldrb	r3, [r3, #2]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fa3d 	bl	8004ec2 <RTC_Bcd2ToByte>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b089      	sub	sp, #36	; 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004a68:	4b9a      	ldr	r3, [pc, #616]	; (8004cd4 <HAL_RTC_SetAlarm_IT+0x278>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a9a      	ldr	r2, [pc, #616]	; (8004cd8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	0adb      	lsrs	r3, r3, #11
 8004a74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	7f1b      	ldrb	r3, [r3, #28]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_RTC_SetAlarm_IT+0x36>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e11c      	b.n	8004ccc <HAL_RTC_SetAlarm_IT+0x270>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d137      	bne.n	8004b14 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f9e3 	bl	8004e88 <RTC_ByteToBcd2>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f9dc 	bl	8004e88 <RTC_ByteToBcd2>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004ad4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	789b      	ldrb	r3, [r3, #2]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f9d4 	bl	8004e88 <RTC_ByteToBcd2>
 8004ae0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ae2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	78db      	ldrb	r3, [r3, #3]
 8004aea:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004aec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f9c6 	bl	8004e88 <RTC_ByteToBcd2>
 8004afc:	4603      	mov	r3, r0
 8004afe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004b00:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004b08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	e023      	b.n	8004b5c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2200      	movs	r2, #0
 8004b26:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004b34:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004b3a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	78db      	ldrb	r3, [r3, #3]
 8004b40:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004b42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b4a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004b4c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004b52:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	22ca      	movs	r2, #202	; 0xca
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2253      	movs	r2, #83	; 0x53
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b80:	d141      	bne.n	8004c06 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b90:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004ba2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1e5a      	subs	r2, r3, #1
 8004ba8:	617a      	str	r2, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	22ff      	movs	r2, #255	; 0xff
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e082      	b.n	8004ccc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0e7      	beq.n	8004ba4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	e04b      	b.n	8004c9e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c14:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004c26:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004c28:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <HAL_RTC_SetAlarm_IT+0x278>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	0adb      	lsrs	r3, r3, #11
 8004c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1e5a      	subs	r2, r3, #1
 8004c42:	617a      	str	r2, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	22ff      	movs	r2, #255	; 0xff
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2203      	movs	r2, #3
 8004c54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e035      	b.n	8004ccc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0e7      	beq.n	8004c3e <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c9c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <HAL_RTC_SetAlarm_IT+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a0e      	ldr	r2, [pc, #56]	; (8004cdc <HAL_RTC_SetAlarm_IT+0x280>)
 8004ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004caa:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <HAL_RTC_SetAlarm_IT+0x280>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4a0b      	ldr	r2, [pc, #44]	; (8004cdc <HAL_RTC_SetAlarm_IT+0x280>)
 8004cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	22ff      	movs	r2, #255	; 0xff
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3724      	adds	r7, #36	; 0x24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd90      	pop	{r4, r7, pc}
 8004cd4:	20000008 	.word	0x20000008
 8004cd8:	10624dd3 	.word	0x10624dd3
 8004cdc:	40013c00 	.word	0x40013c00

08004ce0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d012      	beq.n	8004d1c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f831 	bl	8004d6c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004d1a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d012      	beq.n	8004d50 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8de 	bl	8004efa <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004d4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004d52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d56:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	775a      	strb	r2, [r3, #29]
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40013c00 	.word	0x40013c00

08004d6c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d9a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d9c:	f7fc fd88 	bl	80018b0 <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004da2:	e009      	b.n	8004db8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004da4:	f7fc fd84 	bl	80018b0 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004db2:	d901      	bls.n	8004db8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e007      	b.n	8004dc8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0ee      	beq.n	8004da4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d122      	bne.n	8004e34 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dfc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dfe:	f7fc fd57 	bl	80018b0 <HAL_GetTick>
 8004e02:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e04:	e00c      	b.n	8004e20 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e06:	f7fc fd53 	bl	80018b0 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e14:	d904      	bls.n	8004e20 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2204      	movs	r2, #4
 8004e1a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <RTC_EnterInitMode+0x64>
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d1e8      	bne.n	8004e06 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e58:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ff89 	bl	8004d80 <HAL_RTC_WaitForSynchro>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d004      	beq.n	8004e7e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2204      	movs	r2, #4
 8004e78:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004e96:	e005      	b.n	8004ea4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	3b0a      	subs	r3, #10
 8004ea2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	2b09      	cmp	r3, #9
 8004ea8:	d8f6      	bhi.n	8004e98 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b2db      	uxtb	r3, r3
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	4603      	mov	r3, r0
 8004eca:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	091b      	lsrs	r3, r3, #4
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	0092      	lsls	r2, r2, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	4413      	add	r3, r2
 8004eec:	b2db      	uxtb	r3, r3
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e03f      	b.n	8004fa0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fc fb5b 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2224      	movs	r2, #36	; 0x24
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f50:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f928 	bl	80051a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d17c      	bne.n	80050c2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_UART_Transmit+0x2c>
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e075      	b.n	80050c4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Transmit+0x3e>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e06e      	b.n	80050c4 <HAL_UART_Transmit+0x11c>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2221      	movs	r2, #33	; 0x21
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ffc:	f7fc fc58 	bl	80018b0 <HAL_GetTick>
 8005000:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	88fa      	ldrh	r2, [r7, #6]
 8005006:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005016:	d108      	bne.n	800502a <HAL_UART_Transmit+0x82>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	e003      	b.n	8005032 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800503a:	e02a      	b.n	8005092 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f840 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e036      	b.n	80050c4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800506a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	3302      	adds	r3, #2
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e007      	b.n	8005084 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	781a      	ldrb	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1cf      	bne.n	800503c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2200      	movs	r2, #0
 80050a4:	2140      	movs	r1, #64	; 0x40
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f810 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e006      	b.n	80050c4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	e000      	b.n	80050c4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
  }
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b090      	sub	sp, #64	; 0x40
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050dc:	e050      	b.n	8005180 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d04c      	beq.n	8005180 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <UART_WaitOnFlagUntilTimeout+0x30>
 80050ec:	f7fc fbe0 	bl	80018b0 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d241      	bcs.n	8005180 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800511c:	637a      	str	r2, [r7, #52]	; 0x34
 800511e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	613b      	str	r3, [r7, #16]
   return(result);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	63bb      	str	r3, [r7, #56]	; 0x38
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005150:	623a      	str	r2, [r7, #32]
 8005152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69f9      	ldr	r1, [r7, #28]
 8005156:	6a3a      	ldr	r2, [r7, #32]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	61bb      	str	r3, [r7, #24]
   return(result);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e00f      	b.n	80051a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4013      	ands	r3, r2
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	429a      	cmp	r2, r3
 800519c:	d09f      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3740      	adds	r7, #64	; 0x40
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051ac:	b0c0      	sub	sp, #256	; 0x100
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c4:	68d9      	ldr	r1, [r3, #12]
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	ea40 0301 	orr.w	r3, r0, r1
 80051d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	431a      	orrs	r2, r3
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005200:	f021 010c 	bic.w	r1, r1, #12
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800520e:	430b      	orrs	r3, r1
 8005210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	6999      	ldr	r1, [r3, #24]
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	ea40 0301 	orr.w	r3, r0, r1
 800522e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b8f      	ldr	r3, [pc, #572]	; (8005474 <UART_SetConfig+0x2cc>)
 8005238:	429a      	cmp	r2, r3
 800523a:	d005      	beq.n	8005248 <UART_SetConfig+0xa0>
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b8d      	ldr	r3, [pc, #564]	; (8005478 <UART_SetConfig+0x2d0>)
 8005244:	429a      	cmp	r2, r3
 8005246:	d104      	bne.n	8005252 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005248:	f7fe fff2 	bl	8004230 <HAL_RCC_GetPCLK2Freq>
 800524c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005250:	e003      	b.n	800525a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005252:	f7fe ffd9 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8005256:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005264:	f040 810c 	bne.w	8005480 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005272:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005276:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800527a:	4622      	mov	r2, r4
 800527c:	462b      	mov	r3, r5
 800527e:	1891      	adds	r1, r2, r2
 8005280:	65b9      	str	r1, [r7, #88]	; 0x58
 8005282:	415b      	adcs	r3, r3
 8005284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005286:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800528a:	4621      	mov	r1, r4
 800528c:	eb12 0801 	adds.w	r8, r2, r1
 8005290:	4629      	mov	r1, r5
 8005292:	eb43 0901 	adc.w	r9, r3, r1
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052aa:	4690      	mov	r8, r2
 80052ac:	4699      	mov	r9, r3
 80052ae:	4623      	mov	r3, r4
 80052b0:	eb18 0303 	adds.w	r3, r8, r3
 80052b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052b8:	462b      	mov	r3, r5
 80052ba:	eb49 0303 	adc.w	r3, r9, r3
 80052be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052d6:	460b      	mov	r3, r1
 80052d8:	18db      	adds	r3, r3, r3
 80052da:	653b      	str	r3, [r7, #80]	; 0x50
 80052dc:	4613      	mov	r3, r2
 80052de:	eb42 0303 	adc.w	r3, r2, r3
 80052e2:	657b      	str	r3, [r7, #84]	; 0x54
 80052e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052ec:	f7fa ffd8 	bl	80002a0 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4b61      	ldr	r3, [pc, #388]	; (800547c <UART_SetConfig+0x2d4>)
 80052f6:	fba3 2302 	umull	r2, r3, r3, r2
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	011c      	lsls	r4, r3, #4
 80052fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005302:	2200      	movs	r2, #0
 8005304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005308:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800530c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005310:	4642      	mov	r2, r8
 8005312:	464b      	mov	r3, r9
 8005314:	1891      	adds	r1, r2, r2
 8005316:	64b9      	str	r1, [r7, #72]	; 0x48
 8005318:	415b      	adcs	r3, r3
 800531a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800531c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005320:	4641      	mov	r1, r8
 8005322:	eb12 0a01 	adds.w	sl, r2, r1
 8005326:	4649      	mov	r1, r9
 8005328:	eb43 0b01 	adc.w	fp, r3, r1
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005338:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800533c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005340:	4692      	mov	sl, r2
 8005342:	469b      	mov	fp, r3
 8005344:	4643      	mov	r3, r8
 8005346:	eb1a 0303 	adds.w	r3, sl, r3
 800534a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800534e:	464b      	mov	r3, r9
 8005350:	eb4b 0303 	adc.w	r3, fp, r3
 8005354:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005364:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005368:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800536c:	460b      	mov	r3, r1
 800536e:	18db      	adds	r3, r3, r3
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
 8005372:	4613      	mov	r3, r2
 8005374:	eb42 0303 	adc.w	r3, r2, r3
 8005378:	647b      	str	r3, [r7, #68]	; 0x44
 800537a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800537e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005382:	f7fa ff8d 	bl	80002a0 <__aeabi_uldivmod>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4611      	mov	r1, r2
 800538c:	4b3b      	ldr	r3, [pc, #236]	; (800547c <UART_SetConfig+0x2d4>)
 800538e:	fba3 2301 	umull	r2, r3, r3, r1
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2264      	movs	r2, #100	; 0x64
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	1acb      	subs	r3, r1, r3
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053a2:	4b36      	ldr	r3, [pc, #216]	; (800547c <UART_SetConfig+0x2d4>)
 80053a4:	fba3 2302 	umull	r2, r3, r3, r2
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053b0:	441c      	add	r4, r3
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	1891      	adds	r1, r2, r2
 80053ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80053cc:	415b      	adcs	r3, r3
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053d4:	4641      	mov	r1, r8
 80053d6:	1851      	adds	r1, r2, r1
 80053d8:	6339      	str	r1, [r7, #48]	; 0x30
 80053da:	4649      	mov	r1, r9
 80053dc:	414b      	adcs	r3, r1
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053ec:	4659      	mov	r1, fp
 80053ee:	00cb      	lsls	r3, r1, #3
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f6:	4651      	mov	r1, sl
 80053f8:	00ca      	lsls	r2, r1, #3
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	4642      	mov	r2, r8
 8005402:	189b      	adds	r3, r3, r2
 8005404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005408:	464b      	mov	r3, r9
 800540a:	460a      	mov	r2, r1
 800540c:	eb42 0303 	adc.w	r3, r2, r3
 8005410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005420:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005424:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005428:	460b      	mov	r3, r1
 800542a:	18db      	adds	r3, r3, r3
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
 800542e:	4613      	mov	r3, r2
 8005430:	eb42 0303 	adc.w	r3, r2, r3
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800543a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800543e:	f7fa ff2f 	bl	80002a0 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <UART_SetConfig+0x2d4>)
 8005448:	fba3 1302 	umull	r1, r3, r3, r2
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	2164      	movs	r1, #100	; 0x64
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	3332      	adds	r3, #50	; 0x32
 800545a:	4a08      	ldr	r2, [pc, #32]	; (800547c <UART_SetConfig+0x2d4>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f003 0207 	and.w	r2, r3, #7
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4422      	add	r2, r4
 800546e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005470:	e106      	b.n	8005680 <UART_SetConfig+0x4d8>
 8005472:	bf00      	nop
 8005474:	40011000 	.word	0x40011000
 8005478:	40011400 	.word	0x40011400
 800547c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005484:	2200      	movs	r2, #0
 8005486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800548a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800548e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005492:	4642      	mov	r2, r8
 8005494:	464b      	mov	r3, r9
 8005496:	1891      	adds	r1, r2, r2
 8005498:	6239      	str	r1, [r7, #32]
 800549a:	415b      	adcs	r3, r3
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
 800549e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054a2:	4641      	mov	r1, r8
 80054a4:	1854      	adds	r4, r2, r1
 80054a6:	4649      	mov	r1, r9
 80054a8:	eb43 0501 	adc.w	r5, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	00eb      	lsls	r3, r5, #3
 80054b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ba:	00e2      	lsls	r2, r4, #3
 80054bc:	4614      	mov	r4, r2
 80054be:	461d      	mov	r5, r3
 80054c0:	4643      	mov	r3, r8
 80054c2:	18e3      	adds	r3, r4, r3
 80054c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054c8:	464b      	mov	r3, r9
 80054ca:	eb45 0303 	adc.w	r3, r5, r3
 80054ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054ee:	4629      	mov	r1, r5
 80054f0:	008b      	lsls	r3, r1, #2
 80054f2:	4621      	mov	r1, r4
 80054f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054f8:	4621      	mov	r1, r4
 80054fa:	008a      	lsls	r2, r1, #2
 80054fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005500:	f7fa fece 	bl	80002a0 <__aeabi_uldivmod>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4b60      	ldr	r3, [pc, #384]	; (800568c <UART_SetConfig+0x4e4>)
 800550a:	fba3 2302 	umull	r2, r3, r3, r2
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	011c      	lsls	r4, r3, #4
 8005512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005516:	2200      	movs	r2, #0
 8005518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800551c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005520:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005524:	4642      	mov	r2, r8
 8005526:	464b      	mov	r3, r9
 8005528:	1891      	adds	r1, r2, r2
 800552a:	61b9      	str	r1, [r7, #24]
 800552c:	415b      	adcs	r3, r3
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005534:	4641      	mov	r1, r8
 8005536:	1851      	adds	r1, r2, r1
 8005538:	6139      	str	r1, [r7, #16]
 800553a:	4649      	mov	r1, r9
 800553c:	414b      	adcs	r3, r1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800554c:	4659      	mov	r1, fp
 800554e:	00cb      	lsls	r3, r1, #3
 8005550:	4651      	mov	r1, sl
 8005552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005556:	4651      	mov	r1, sl
 8005558:	00ca      	lsls	r2, r1, #3
 800555a:	4610      	mov	r0, r2
 800555c:	4619      	mov	r1, r3
 800555e:	4603      	mov	r3, r0
 8005560:	4642      	mov	r2, r8
 8005562:	189b      	adds	r3, r3, r2
 8005564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005568:	464b      	mov	r3, r9
 800556a:	460a      	mov	r2, r1
 800556c:	eb42 0303 	adc.w	r3, r2, r3
 8005570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	67bb      	str	r3, [r7, #120]	; 0x78
 800557e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800558c:	4649      	mov	r1, r9
 800558e:	008b      	lsls	r3, r1, #2
 8005590:	4641      	mov	r1, r8
 8005592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005596:	4641      	mov	r1, r8
 8005598:	008a      	lsls	r2, r1, #2
 800559a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800559e:	f7fa fe7f 	bl	80002a0 <__aeabi_uldivmod>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4611      	mov	r1, r2
 80055a8:	4b38      	ldr	r3, [pc, #224]	; (800568c <UART_SetConfig+0x4e4>)
 80055aa:	fba3 2301 	umull	r2, r3, r3, r1
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	2264      	movs	r2, #100	; 0x64
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	1acb      	subs	r3, r1, r3
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	3332      	adds	r3, #50	; 0x32
 80055bc:	4a33      	ldr	r2, [pc, #204]	; (800568c <UART_SetConfig+0x4e4>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c8:	441c      	add	r4, r3
 80055ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ce:	2200      	movs	r2, #0
 80055d0:	673b      	str	r3, [r7, #112]	; 0x70
 80055d2:	677a      	str	r2, [r7, #116]	; 0x74
 80055d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	1891      	adds	r1, r2, r2
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	415b      	adcs	r3, r3
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055e8:	4641      	mov	r1, r8
 80055ea:	1851      	adds	r1, r2, r1
 80055ec:	6039      	str	r1, [r7, #0]
 80055ee:	4649      	mov	r1, r9
 80055f0:	414b      	adcs	r3, r1
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005600:	4659      	mov	r1, fp
 8005602:	00cb      	lsls	r3, r1, #3
 8005604:	4651      	mov	r1, sl
 8005606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800560a:	4651      	mov	r1, sl
 800560c:	00ca      	lsls	r2, r1, #3
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	4603      	mov	r3, r0
 8005614:	4642      	mov	r2, r8
 8005616:	189b      	adds	r3, r3, r2
 8005618:	66bb      	str	r3, [r7, #104]	; 0x68
 800561a:	464b      	mov	r3, r9
 800561c:	460a      	mov	r2, r1
 800561e:	eb42 0303 	adc.w	r3, r2, r3
 8005622:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	663b      	str	r3, [r7, #96]	; 0x60
 800562e:	667a      	str	r2, [r7, #100]	; 0x64
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800563c:	4649      	mov	r1, r9
 800563e:	008b      	lsls	r3, r1, #2
 8005640:	4641      	mov	r1, r8
 8005642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005646:	4641      	mov	r1, r8
 8005648:	008a      	lsls	r2, r1, #2
 800564a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800564e:	f7fa fe27 	bl	80002a0 <__aeabi_uldivmod>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <UART_SetConfig+0x4e4>)
 8005658:	fba3 1302 	umull	r1, r3, r3, r2
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	2164      	movs	r1, #100	; 0x64
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	3332      	adds	r3, #50	; 0x32
 800566a:	4a08      	ldr	r2, [pc, #32]	; (800568c <UART_SetConfig+0x4e4>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	f003 020f 	and.w	r2, r3, #15
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4422      	add	r2, r4
 800567e:	609a      	str	r2, [r3, #8]
}
 8005680:	bf00      	nop
 8005682:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005686:	46bd      	mov	sp, r7
 8005688:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800568c:	51eb851f 	.word	0x51eb851f

08005690 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005690:	b084      	sub	sp, #16
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	f107 001c 	add.w	r0, r7, #28
 800569e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d122      	bne.n	80056ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d105      	bne.n	80056e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 faa2 	bl	8005c2c <USB_CoreReset>
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
 80056ec:	e01a      	b.n	8005724 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa96 	bl	8005c2c <USB_CoreReset>
 8005700:	4603      	mov	r3, r0
 8005702:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
 8005716:	e005      	b.n	8005724 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10b      	bne.n	8005742 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f043 0206 	orr.w	r2, r3, #6
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800574e:	b004      	add	sp, #16
 8005750:	4770      	bx	lr

08005752 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d115      	bne.n	80057c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057a2:	2001      	movs	r0, #1
 80057a4:	f7fc f890 	bl	80018c8 <HAL_Delay>
      ms++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa2e 	bl	8005c10 <USB_GetMode>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d01e      	beq.n	80057f8 <USB_SetCurrentMode+0x84>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b31      	cmp	r3, #49	; 0x31
 80057be:	d9f0      	bls.n	80057a2 <USB_SetCurrentMode+0x2e>
 80057c0:	e01a      	b.n	80057f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d115      	bne.n	80057f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057d4:	2001      	movs	r0, #1
 80057d6:	f7fc f877 	bl	80018c8 <HAL_Delay>
      ms++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3301      	adds	r3, #1
 80057de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fa15 	bl	8005c10 <USB_GetMode>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <USB_SetCurrentMode+0x84>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b31      	cmp	r3, #49	; 0x31
 80057f0:	d9f0      	bls.n	80057d4 <USB_SetCurrentMode+0x60>
 80057f2:	e001      	b.n	80057f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e005      	b.n	8005804 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b32      	cmp	r3, #50	; 0x32
 80057fc:	d101      	bne.n	8005802 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800580c:	b084      	sub	sp, #16
 800580e:	b580      	push	{r7, lr}
 8005810:	b086      	sub	sp, #24
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800581a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	e009      	b.n	8005840 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3340      	adds	r3, #64	; 0x40
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	2200      	movs	r2, #0
 8005838:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3301      	adds	r3, #1
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b0e      	cmp	r3, #14
 8005844:	d9f2      	bls.n	800582c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11c      	bne.n	8005886 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585a:	f043 0302 	orr.w	r3, r3, #2
 800585e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38
 8005884:	e00b      	b.n	800589e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058a4:	461a      	mov	r2, r3
 80058a6:	2300      	movs	r3, #0
 80058a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	4619      	mov	r1, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b8:	461a      	mov	r2, r3
 80058ba:	680b      	ldr	r3, [r1, #0]
 80058bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d10c      	bne.n	80058de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058ca:	2100      	movs	r1, #0
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f965 	bl	8005b9c <USB_SetDevSpeed>
 80058d2:	e008      	b.n	80058e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058d4:	2101      	movs	r1, #1
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f960 	bl	8005b9c <USB_SetDevSpeed>
 80058dc:	e003      	b.n	80058e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058de:	2103      	movs	r1, #3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f95b 	bl	8005b9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058e6:	2110      	movs	r1, #16
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f8f3 	bl	8005ad4 <USB_FlushTxFifo>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f91f 	bl	8005b3c <USB_FlushRxFifo>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	461a      	mov	r2, r3
 8005910:	2300      	movs	r3, #0
 8005912:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	461a      	mov	r2, r3
 800591c:	2300      	movs	r3, #0
 800591e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	461a      	mov	r2, r3
 8005928:	2300      	movs	r3, #0
 800592a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	e043      	b.n	80059ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005948:	d118      	bne.n	800597c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	461a      	mov	r2, r3
 800595e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	e013      	b.n	800598e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005972:	461a      	mov	r2, r3
 8005974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e008      	b.n	800598e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	461a      	mov	r2, r3
 800598a:	2300      	movs	r3, #0
 800598c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	461a      	mov	r2, r3
 800599c:	2300      	movs	r3, #0
 800599e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	461a      	mov	r2, r3
 80059ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3301      	adds	r3, #1
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d3b7      	bcc.n	8005932 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	e043      	b.n	8005a50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059de:	d118      	bne.n	8005a12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	461a      	mov	r2, r3
 80059f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e013      	b.n	8005a24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	e008      	b.n	8005a24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	461a      	mov	r2, r3
 8005a44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d3b7      	bcc.n	80059c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f043 0210 	orr.w	r2, r3, #16
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <USB_DevInit+0x2c4>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f043 0208 	orr.w	r2, r3, #8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d107      	bne.n	8005ac0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ab8:	f043 0304 	orr.w	r3, r3, #4
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005acc:	b004      	add	sp, #16
 8005ace:	4770      	bx	lr
 8005ad0:	803c3800 	.word	0x803c3800

08005ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <USB_FlushTxFifo+0x64>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e01b      	b.n	8005b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	daf2      	bge.n	8005ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	019b      	lsls	r3, r3, #6
 8005b04:	f043 0220 	orr.w	r2, r3, #32
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a08      	ldr	r2, [pc, #32]	; (8005b38 <USB_FlushTxFifo+0x64>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e006      	b.n	8005b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d0f0      	beq.n	8005b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	00030d40 	.word	0x00030d40

08005b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <USB_FlushRxFifo+0x5c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e018      	b.n	8005b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	daf2      	bge.n	8005b48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2210      	movs	r2, #16
 8005b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <USB_FlushRxFifo+0x5c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e006      	b.n	8005b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b10      	cmp	r3, #16
 8005b88:	d0f0      	beq.n	8005b6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	00030d40 	.word	0x00030d40

08005b9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	68f9      	ldr	r1, [r7, #12]
 8005bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005be8:	f023 0303 	bic.w	r3, r3, #3
 8005bec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bfc:	f043 0302 	orr.w	r3, r3, #2
 8005c00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <USB_CoreReset+0x64>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e01b      	b.n	8005c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	daf2      	bge.n	8005c38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f043 0201 	orr.w	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <USB_CoreReset+0x64>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e006      	b.n	8005c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d0f0      	beq.n	8005c62 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	00030d40 	.word	0x00030d40

08005c94 <sniprintf>:
 8005c94:	b40c      	push	{r2, r3}
 8005c96:	b530      	push	{r4, r5, lr}
 8005c98:	4b17      	ldr	r3, [pc, #92]	; (8005cf8 <sniprintf+0x64>)
 8005c9a:	1e0c      	subs	r4, r1, #0
 8005c9c:	681d      	ldr	r5, [r3, #0]
 8005c9e:	b09d      	sub	sp, #116	; 0x74
 8005ca0:	da08      	bge.n	8005cb4 <sniprintf+0x20>
 8005ca2:	238b      	movs	r3, #139	; 0x8b
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	b01d      	add	sp, #116	; 0x74
 8005cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cb0:	b002      	add	sp, #8
 8005cb2:	4770      	bx	lr
 8005cb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005cbc:	bf14      	ite	ne
 8005cbe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005cc2:	4623      	moveq	r3, r4
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	9307      	str	r3, [sp, #28]
 8005cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ccc:	9002      	str	r0, [sp, #8]
 8005cce:	9006      	str	r0, [sp, #24]
 8005cd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005cd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cd6:	ab21      	add	r3, sp, #132	; 0x84
 8005cd8:	a902      	add	r1, sp, #8
 8005cda:	4628      	mov	r0, r5
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	f000 f9b3 	bl	8006048 <_svfiprintf_r>
 8005ce2:	1c43      	adds	r3, r0, #1
 8005ce4:	bfbc      	itt	lt
 8005ce6:	238b      	movlt	r3, #139	; 0x8b
 8005ce8:	602b      	strlt	r3, [r5, #0]
 8005cea:	2c00      	cmp	r4, #0
 8005cec:	d0dd      	beq.n	8005caa <sniprintf+0x16>
 8005cee:	9b02      	ldr	r3, [sp, #8]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e7d9      	b.n	8005caa <sniprintf+0x16>
 8005cf6:	bf00      	nop
 8005cf8:	20000060 	.word	0x20000060

08005cfc <siprintf>:
 8005cfc:	b40e      	push	{r1, r2, r3}
 8005cfe:	b500      	push	{lr}
 8005d00:	b09c      	sub	sp, #112	; 0x70
 8005d02:	ab1d      	add	r3, sp, #116	; 0x74
 8005d04:	9002      	str	r0, [sp, #8]
 8005d06:	9006      	str	r0, [sp, #24]
 8005d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d0c:	4809      	ldr	r0, [pc, #36]	; (8005d34 <siprintf+0x38>)
 8005d0e:	9107      	str	r1, [sp, #28]
 8005d10:	9104      	str	r1, [sp, #16]
 8005d12:	4909      	ldr	r1, [pc, #36]	; (8005d38 <siprintf+0x3c>)
 8005d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d18:	9105      	str	r1, [sp, #20]
 8005d1a:	6800      	ldr	r0, [r0, #0]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	a902      	add	r1, sp, #8
 8005d20:	f000 f992 	bl	8006048 <_svfiprintf_r>
 8005d24:	9b02      	ldr	r3, [sp, #8]
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	b01c      	add	sp, #112	; 0x70
 8005d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d30:	b003      	add	sp, #12
 8005d32:	4770      	bx	lr
 8005d34:	20000060 	.word	0x20000060
 8005d38:	ffff0208 	.word	0xffff0208

08005d3c <memset>:
 8005d3c:	4402      	add	r2, r0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d100      	bne.n	8005d46 <memset+0xa>
 8005d44:	4770      	bx	lr
 8005d46:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4a:	e7f9      	b.n	8005d40 <memset+0x4>

08005d4c <__errno>:
 8005d4c:	4b01      	ldr	r3, [pc, #4]	; (8005d54 <__errno+0x8>)
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20000060 	.word	0x20000060

08005d58 <__libc_init_array>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	4d0d      	ldr	r5, [pc, #52]	; (8005d90 <__libc_init_array+0x38>)
 8005d5c:	4c0d      	ldr	r4, [pc, #52]	; (8005d94 <__libc_init_array+0x3c>)
 8005d5e:	1b64      	subs	r4, r4, r5
 8005d60:	10a4      	asrs	r4, r4, #2
 8005d62:	2600      	movs	r6, #0
 8005d64:	42a6      	cmp	r6, r4
 8005d66:	d109      	bne.n	8005d7c <__libc_init_array+0x24>
 8005d68:	4d0b      	ldr	r5, [pc, #44]	; (8005d98 <__libc_init_array+0x40>)
 8005d6a:	4c0c      	ldr	r4, [pc, #48]	; (8005d9c <__libc_init_array+0x44>)
 8005d6c:	f000 fc6a 	bl	8006644 <_init>
 8005d70:	1b64      	subs	r4, r4, r5
 8005d72:	10a4      	asrs	r4, r4, #2
 8005d74:	2600      	movs	r6, #0
 8005d76:	42a6      	cmp	r6, r4
 8005d78:	d105      	bne.n	8005d86 <__libc_init_array+0x2e>
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d80:	4798      	blx	r3
 8005d82:	3601      	adds	r6, #1
 8005d84:	e7ee      	b.n	8005d64 <__libc_init_array+0xc>
 8005d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8a:	4798      	blx	r3
 8005d8c:	3601      	adds	r6, #1
 8005d8e:	e7f2      	b.n	8005d76 <__libc_init_array+0x1e>
 8005d90:	08006720 	.word	0x08006720
 8005d94:	08006720 	.word	0x08006720
 8005d98:	08006720 	.word	0x08006720
 8005d9c:	08006724 	.word	0x08006724

08005da0 <__retarget_lock_acquire_recursive>:
 8005da0:	4770      	bx	lr

08005da2 <__retarget_lock_release_recursive>:
 8005da2:	4770      	bx	lr

08005da4 <_free_r>:
 8005da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005da6:	2900      	cmp	r1, #0
 8005da8:	d044      	beq.n	8005e34 <_free_r+0x90>
 8005daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dae:	9001      	str	r0, [sp, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f1a1 0404 	sub.w	r4, r1, #4
 8005db6:	bfb8      	it	lt
 8005db8:	18e4      	addlt	r4, r4, r3
 8005dba:	f000 f8df 	bl	8005f7c <__malloc_lock>
 8005dbe:	4a1e      	ldr	r2, [pc, #120]	; (8005e38 <_free_r+0x94>)
 8005dc0:	9801      	ldr	r0, [sp, #4]
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	b933      	cbnz	r3, 8005dd4 <_free_r+0x30>
 8005dc6:	6063      	str	r3, [r4, #4]
 8005dc8:	6014      	str	r4, [r2, #0]
 8005dca:	b003      	add	sp, #12
 8005dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dd0:	f000 b8da 	b.w	8005f88 <__malloc_unlock>
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	d908      	bls.n	8005dea <_free_r+0x46>
 8005dd8:	6825      	ldr	r5, [r4, #0]
 8005dda:	1961      	adds	r1, r4, r5
 8005ddc:	428b      	cmp	r3, r1
 8005dde:	bf01      	itttt	eq
 8005de0:	6819      	ldreq	r1, [r3, #0]
 8005de2:	685b      	ldreq	r3, [r3, #4]
 8005de4:	1949      	addeq	r1, r1, r5
 8005de6:	6021      	streq	r1, [r4, #0]
 8005de8:	e7ed      	b.n	8005dc6 <_free_r+0x22>
 8005dea:	461a      	mov	r2, r3
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	b10b      	cbz	r3, 8005df4 <_free_r+0x50>
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	d9fa      	bls.n	8005dea <_free_r+0x46>
 8005df4:	6811      	ldr	r1, [r2, #0]
 8005df6:	1855      	adds	r5, r2, r1
 8005df8:	42a5      	cmp	r5, r4
 8005dfa:	d10b      	bne.n	8005e14 <_free_r+0x70>
 8005dfc:	6824      	ldr	r4, [r4, #0]
 8005dfe:	4421      	add	r1, r4
 8005e00:	1854      	adds	r4, r2, r1
 8005e02:	42a3      	cmp	r3, r4
 8005e04:	6011      	str	r1, [r2, #0]
 8005e06:	d1e0      	bne.n	8005dca <_free_r+0x26>
 8005e08:	681c      	ldr	r4, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	6053      	str	r3, [r2, #4]
 8005e0e:	440c      	add	r4, r1
 8005e10:	6014      	str	r4, [r2, #0]
 8005e12:	e7da      	b.n	8005dca <_free_r+0x26>
 8005e14:	d902      	bls.n	8005e1c <_free_r+0x78>
 8005e16:	230c      	movs	r3, #12
 8005e18:	6003      	str	r3, [r0, #0]
 8005e1a:	e7d6      	b.n	8005dca <_free_r+0x26>
 8005e1c:	6825      	ldr	r5, [r4, #0]
 8005e1e:	1961      	adds	r1, r4, r5
 8005e20:	428b      	cmp	r3, r1
 8005e22:	bf04      	itt	eq
 8005e24:	6819      	ldreq	r1, [r3, #0]
 8005e26:	685b      	ldreq	r3, [r3, #4]
 8005e28:	6063      	str	r3, [r4, #4]
 8005e2a:	bf04      	itt	eq
 8005e2c:	1949      	addeq	r1, r1, r5
 8005e2e:	6021      	streq	r1, [r4, #0]
 8005e30:	6054      	str	r4, [r2, #4]
 8005e32:	e7ca      	b.n	8005dca <_free_r+0x26>
 8005e34:	b003      	add	sp, #12
 8005e36:	bd30      	pop	{r4, r5, pc}
 8005e38:	20000a70 	.word	0x20000a70

08005e3c <sbrk_aligned>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	4e0e      	ldr	r6, [pc, #56]	; (8005e78 <sbrk_aligned+0x3c>)
 8005e40:	460c      	mov	r4, r1
 8005e42:	6831      	ldr	r1, [r6, #0]
 8005e44:	4605      	mov	r5, r0
 8005e46:	b911      	cbnz	r1, 8005e4e <sbrk_aligned+0x12>
 8005e48:	f000 fba6 	bl	8006598 <_sbrk_r>
 8005e4c:	6030      	str	r0, [r6, #0]
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4628      	mov	r0, r5
 8005e52:	f000 fba1 	bl	8006598 <_sbrk_r>
 8005e56:	1c43      	adds	r3, r0, #1
 8005e58:	d00a      	beq.n	8005e70 <sbrk_aligned+0x34>
 8005e5a:	1cc4      	adds	r4, r0, #3
 8005e5c:	f024 0403 	bic.w	r4, r4, #3
 8005e60:	42a0      	cmp	r0, r4
 8005e62:	d007      	beq.n	8005e74 <sbrk_aligned+0x38>
 8005e64:	1a21      	subs	r1, r4, r0
 8005e66:	4628      	mov	r0, r5
 8005e68:	f000 fb96 	bl	8006598 <_sbrk_r>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d101      	bne.n	8005e74 <sbrk_aligned+0x38>
 8005e70:	f04f 34ff 	mov.w	r4, #4294967295
 8005e74:	4620      	mov	r0, r4
 8005e76:	bd70      	pop	{r4, r5, r6, pc}
 8005e78:	20000a74 	.word	0x20000a74

08005e7c <_malloc_r>:
 8005e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e80:	1ccd      	adds	r5, r1, #3
 8005e82:	f025 0503 	bic.w	r5, r5, #3
 8005e86:	3508      	adds	r5, #8
 8005e88:	2d0c      	cmp	r5, #12
 8005e8a:	bf38      	it	cc
 8005e8c:	250c      	movcc	r5, #12
 8005e8e:	2d00      	cmp	r5, #0
 8005e90:	4607      	mov	r7, r0
 8005e92:	db01      	blt.n	8005e98 <_malloc_r+0x1c>
 8005e94:	42a9      	cmp	r1, r5
 8005e96:	d905      	bls.n	8005ea4 <_malloc_r+0x28>
 8005e98:	230c      	movs	r3, #12
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	2600      	movs	r6, #0
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f78 <_malloc_r+0xfc>
 8005ea8:	f000 f868 	bl	8005f7c <__malloc_lock>
 8005eac:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb0:	461c      	mov	r4, r3
 8005eb2:	bb5c      	cbnz	r4, 8005f0c <_malloc_r+0x90>
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f7ff ffc0 	bl	8005e3c <sbrk_aligned>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	d155      	bne.n	8005f6e <_malloc_r+0xf2>
 8005ec2:	f8d8 4000 	ldr.w	r4, [r8]
 8005ec6:	4626      	mov	r6, r4
 8005ec8:	2e00      	cmp	r6, #0
 8005eca:	d145      	bne.n	8005f58 <_malloc_r+0xdc>
 8005ecc:	2c00      	cmp	r4, #0
 8005ece:	d048      	beq.n	8005f62 <_malloc_r+0xe6>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	eb04 0903 	add.w	r9, r4, r3
 8005eda:	f000 fb5d 	bl	8006598 <_sbrk_r>
 8005ede:	4581      	cmp	r9, r0
 8005ee0:	d13f      	bne.n	8005f62 <_malloc_r+0xe6>
 8005ee2:	6821      	ldr	r1, [r4, #0]
 8005ee4:	1a6d      	subs	r5, r5, r1
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f7ff ffa7 	bl	8005e3c <sbrk_aligned>
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d037      	beq.n	8005f62 <_malloc_r+0xe6>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	442b      	add	r3, r5
 8005ef6:	6023      	str	r3, [r4, #0]
 8005ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d038      	beq.n	8005f72 <_malloc_r+0xf6>
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	42a2      	cmp	r2, r4
 8005f04:	d12b      	bne.n	8005f5e <_malloc_r+0xe2>
 8005f06:	2200      	movs	r2, #0
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	e00f      	b.n	8005f2c <_malloc_r+0xb0>
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	1b52      	subs	r2, r2, r5
 8005f10:	d41f      	bmi.n	8005f52 <_malloc_r+0xd6>
 8005f12:	2a0b      	cmp	r2, #11
 8005f14:	d917      	bls.n	8005f46 <_malloc_r+0xca>
 8005f16:	1961      	adds	r1, r4, r5
 8005f18:	42a3      	cmp	r3, r4
 8005f1a:	6025      	str	r5, [r4, #0]
 8005f1c:	bf18      	it	ne
 8005f1e:	6059      	strne	r1, [r3, #4]
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	bf08      	it	eq
 8005f24:	f8c8 1000 	streq.w	r1, [r8]
 8005f28:	5162      	str	r2, [r4, r5]
 8005f2a:	604b      	str	r3, [r1, #4]
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f104 060b 	add.w	r6, r4, #11
 8005f32:	f000 f829 	bl	8005f88 <__malloc_unlock>
 8005f36:	f026 0607 	bic.w	r6, r6, #7
 8005f3a:	1d23      	adds	r3, r4, #4
 8005f3c:	1af2      	subs	r2, r6, r3
 8005f3e:	d0ae      	beq.n	8005e9e <_malloc_r+0x22>
 8005f40:	1b9b      	subs	r3, r3, r6
 8005f42:	50a3      	str	r3, [r4, r2]
 8005f44:	e7ab      	b.n	8005e9e <_malloc_r+0x22>
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	6862      	ldr	r2, [r4, #4]
 8005f4a:	d1dd      	bne.n	8005f08 <_malloc_r+0x8c>
 8005f4c:	f8c8 2000 	str.w	r2, [r8]
 8005f50:	e7ec      	b.n	8005f2c <_malloc_r+0xb0>
 8005f52:	4623      	mov	r3, r4
 8005f54:	6864      	ldr	r4, [r4, #4]
 8005f56:	e7ac      	b.n	8005eb2 <_malloc_r+0x36>
 8005f58:	4634      	mov	r4, r6
 8005f5a:	6876      	ldr	r6, [r6, #4]
 8005f5c:	e7b4      	b.n	8005ec8 <_malloc_r+0x4c>
 8005f5e:	4613      	mov	r3, r2
 8005f60:	e7cc      	b.n	8005efc <_malloc_r+0x80>
 8005f62:	230c      	movs	r3, #12
 8005f64:	603b      	str	r3, [r7, #0]
 8005f66:	4638      	mov	r0, r7
 8005f68:	f000 f80e 	bl	8005f88 <__malloc_unlock>
 8005f6c:	e797      	b.n	8005e9e <_malloc_r+0x22>
 8005f6e:	6025      	str	r5, [r4, #0]
 8005f70:	e7dc      	b.n	8005f2c <_malloc_r+0xb0>
 8005f72:	605b      	str	r3, [r3, #4]
 8005f74:	deff      	udf	#255	; 0xff
 8005f76:	bf00      	nop
 8005f78:	20000a70 	.word	0x20000a70

08005f7c <__malloc_lock>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__malloc_lock+0x8>)
 8005f7e:	f7ff bf0f 	b.w	8005da0 <__retarget_lock_acquire_recursive>
 8005f82:	bf00      	nop
 8005f84:	20000a6c 	.word	0x20000a6c

08005f88 <__malloc_unlock>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__malloc_unlock+0x8>)
 8005f8a:	f7ff bf0a 	b.w	8005da2 <__retarget_lock_release_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000a6c 	.word	0x20000a6c

08005f94 <__ssputs_r>:
 8005f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	688e      	ldr	r6, [r1, #8]
 8005f9a:	461f      	mov	r7, r3
 8005f9c:	42be      	cmp	r6, r7
 8005f9e:	680b      	ldr	r3, [r1, #0]
 8005fa0:	4682      	mov	sl, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	4690      	mov	r8, r2
 8005fa6:	d82c      	bhi.n	8006002 <__ssputs_r+0x6e>
 8005fa8:	898a      	ldrh	r2, [r1, #12]
 8005faa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fae:	d026      	beq.n	8005ffe <__ssputs_r+0x6a>
 8005fb0:	6965      	ldr	r5, [r4, #20]
 8005fb2:	6909      	ldr	r1, [r1, #16]
 8005fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fb8:	eba3 0901 	sub.w	r9, r3, r1
 8005fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fc0:	1c7b      	adds	r3, r7, #1
 8005fc2:	444b      	add	r3, r9
 8005fc4:	106d      	asrs	r5, r5, #1
 8005fc6:	429d      	cmp	r5, r3
 8005fc8:	bf38      	it	cc
 8005fca:	461d      	movcc	r5, r3
 8005fcc:	0553      	lsls	r3, r2, #21
 8005fce:	d527      	bpl.n	8006020 <__ssputs_r+0x8c>
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7ff ff53 	bl	8005e7c <_malloc_r>
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	b360      	cbz	r0, 8006034 <__ssputs_r+0xa0>
 8005fda:	6921      	ldr	r1, [r4, #16]
 8005fdc:	464a      	mov	r2, r9
 8005fde:	f000 faeb 	bl	80065b8 <memcpy>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fec:	81a3      	strh	r3, [r4, #12]
 8005fee:	6126      	str	r6, [r4, #16]
 8005ff0:	6165      	str	r5, [r4, #20]
 8005ff2:	444e      	add	r6, r9
 8005ff4:	eba5 0509 	sub.w	r5, r5, r9
 8005ff8:	6026      	str	r6, [r4, #0]
 8005ffa:	60a5      	str	r5, [r4, #8]
 8005ffc:	463e      	mov	r6, r7
 8005ffe:	42be      	cmp	r6, r7
 8006000:	d900      	bls.n	8006004 <__ssputs_r+0x70>
 8006002:	463e      	mov	r6, r7
 8006004:	6820      	ldr	r0, [r4, #0]
 8006006:	4632      	mov	r2, r6
 8006008:	4641      	mov	r1, r8
 800600a:	f000 faab 	bl	8006564 <memmove>
 800600e:	68a3      	ldr	r3, [r4, #8]
 8006010:	1b9b      	subs	r3, r3, r6
 8006012:	60a3      	str	r3, [r4, #8]
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	4433      	add	r3, r6
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	2000      	movs	r0, #0
 800601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006020:	462a      	mov	r2, r5
 8006022:	f000 fad7 	bl	80065d4 <_realloc_r>
 8006026:	4606      	mov	r6, r0
 8006028:	2800      	cmp	r0, #0
 800602a:	d1e0      	bne.n	8005fee <__ssputs_r+0x5a>
 800602c:	6921      	ldr	r1, [r4, #16]
 800602e:	4650      	mov	r0, sl
 8006030:	f7ff feb8 	bl	8005da4 <_free_r>
 8006034:	230c      	movs	r3, #12
 8006036:	f8ca 3000 	str.w	r3, [sl]
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	f04f 30ff 	mov.w	r0, #4294967295
 8006046:	e7e9      	b.n	800601c <__ssputs_r+0x88>

08006048 <_svfiprintf_r>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	4698      	mov	r8, r3
 800604e:	898b      	ldrh	r3, [r1, #12]
 8006050:	061b      	lsls	r3, r3, #24
 8006052:	b09d      	sub	sp, #116	; 0x74
 8006054:	4607      	mov	r7, r0
 8006056:	460d      	mov	r5, r1
 8006058:	4614      	mov	r4, r2
 800605a:	d50e      	bpl.n	800607a <_svfiprintf_r+0x32>
 800605c:	690b      	ldr	r3, [r1, #16]
 800605e:	b963      	cbnz	r3, 800607a <_svfiprintf_r+0x32>
 8006060:	2140      	movs	r1, #64	; 0x40
 8006062:	f7ff ff0b 	bl	8005e7c <_malloc_r>
 8006066:	6028      	str	r0, [r5, #0]
 8006068:	6128      	str	r0, [r5, #16]
 800606a:	b920      	cbnz	r0, 8006076 <_svfiprintf_r+0x2e>
 800606c:	230c      	movs	r3, #12
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e0d0      	b.n	8006218 <_svfiprintf_r+0x1d0>
 8006076:	2340      	movs	r3, #64	; 0x40
 8006078:	616b      	str	r3, [r5, #20]
 800607a:	2300      	movs	r3, #0
 800607c:	9309      	str	r3, [sp, #36]	; 0x24
 800607e:	2320      	movs	r3, #32
 8006080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006084:	f8cd 800c 	str.w	r8, [sp, #12]
 8006088:	2330      	movs	r3, #48	; 0x30
 800608a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006230 <_svfiprintf_r+0x1e8>
 800608e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006092:	f04f 0901 	mov.w	r9, #1
 8006096:	4623      	mov	r3, r4
 8006098:	469a      	mov	sl, r3
 800609a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800609e:	b10a      	cbz	r2, 80060a4 <_svfiprintf_r+0x5c>
 80060a0:	2a25      	cmp	r2, #37	; 0x25
 80060a2:	d1f9      	bne.n	8006098 <_svfiprintf_r+0x50>
 80060a4:	ebba 0b04 	subs.w	fp, sl, r4
 80060a8:	d00b      	beq.n	80060c2 <_svfiprintf_r+0x7a>
 80060aa:	465b      	mov	r3, fp
 80060ac:	4622      	mov	r2, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff ff6f 	bl	8005f94 <__ssputs_r>
 80060b6:	3001      	adds	r0, #1
 80060b8:	f000 80a9 	beq.w	800620e <_svfiprintf_r+0x1c6>
 80060bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060be:	445a      	add	r2, fp
 80060c0:	9209      	str	r2, [sp, #36]	; 0x24
 80060c2:	f89a 3000 	ldrb.w	r3, [sl]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 80a1 	beq.w	800620e <_svfiprintf_r+0x1c6>
 80060cc:	2300      	movs	r3, #0
 80060ce:	f04f 32ff 	mov.w	r2, #4294967295
 80060d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060d6:	f10a 0a01 	add.w	sl, sl, #1
 80060da:	9304      	str	r3, [sp, #16]
 80060dc:	9307      	str	r3, [sp, #28]
 80060de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060e2:	931a      	str	r3, [sp, #104]	; 0x68
 80060e4:	4654      	mov	r4, sl
 80060e6:	2205      	movs	r2, #5
 80060e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ec:	4850      	ldr	r0, [pc, #320]	; (8006230 <_svfiprintf_r+0x1e8>)
 80060ee:	f7fa f887 	bl	8000200 <memchr>
 80060f2:	9a04      	ldr	r2, [sp, #16]
 80060f4:	b9d8      	cbnz	r0, 800612e <_svfiprintf_r+0xe6>
 80060f6:	06d0      	lsls	r0, r2, #27
 80060f8:	bf44      	itt	mi
 80060fa:	2320      	movmi	r3, #32
 80060fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006100:	0711      	lsls	r1, r2, #28
 8006102:	bf44      	itt	mi
 8006104:	232b      	movmi	r3, #43	; 0x2b
 8006106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800610a:	f89a 3000 	ldrb.w	r3, [sl]
 800610e:	2b2a      	cmp	r3, #42	; 0x2a
 8006110:	d015      	beq.n	800613e <_svfiprintf_r+0xf6>
 8006112:	9a07      	ldr	r2, [sp, #28]
 8006114:	4654      	mov	r4, sl
 8006116:	2000      	movs	r0, #0
 8006118:	f04f 0c0a 	mov.w	ip, #10
 800611c:	4621      	mov	r1, r4
 800611e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006122:	3b30      	subs	r3, #48	; 0x30
 8006124:	2b09      	cmp	r3, #9
 8006126:	d94d      	bls.n	80061c4 <_svfiprintf_r+0x17c>
 8006128:	b1b0      	cbz	r0, 8006158 <_svfiprintf_r+0x110>
 800612a:	9207      	str	r2, [sp, #28]
 800612c:	e014      	b.n	8006158 <_svfiprintf_r+0x110>
 800612e:	eba0 0308 	sub.w	r3, r0, r8
 8006132:	fa09 f303 	lsl.w	r3, r9, r3
 8006136:	4313      	orrs	r3, r2
 8006138:	9304      	str	r3, [sp, #16]
 800613a:	46a2      	mov	sl, r4
 800613c:	e7d2      	b.n	80060e4 <_svfiprintf_r+0x9c>
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	1d19      	adds	r1, r3, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	9103      	str	r1, [sp, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	bfbb      	ittet	lt
 800614a:	425b      	neglt	r3, r3
 800614c:	f042 0202 	orrlt.w	r2, r2, #2
 8006150:	9307      	strge	r3, [sp, #28]
 8006152:	9307      	strlt	r3, [sp, #28]
 8006154:	bfb8      	it	lt
 8006156:	9204      	strlt	r2, [sp, #16]
 8006158:	7823      	ldrb	r3, [r4, #0]
 800615a:	2b2e      	cmp	r3, #46	; 0x2e
 800615c:	d10c      	bne.n	8006178 <_svfiprintf_r+0x130>
 800615e:	7863      	ldrb	r3, [r4, #1]
 8006160:	2b2a      	cmp	r3, #42	; 0x2a
 8006162:	d134      	bne.n	80061ce <_svfiprintf_r+0x186>
 8006164:	9b03      	ldr	r3, [sp, #12]
 8006166:	1d1a      	adds	r2, r3, #4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	9203      	str	r2, [sp, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	bfb8      	it	lt
 8006170:	f04f 33ff 	movlt.w	r3, #4294967295
 8006174:	3402      	adds	r4, #2
 8006176:	9305      	str	r3, [sp, #20]
 8006178:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006240 <_svfiprintf_r+0x1f8>
 800617c:	7821      	ldrb	r1, [r4, #0]
 800617e:	2203      	movs	r2, #3
 8006180:	4650      	mov	r0, sl
 8006182:	f7fa f83d 	bl	8000200 <memchr>
 8006186:	b138      	cbz	r0, 8006198 <_svfiprintf_r+0x150>
 8006188:	9b04      	ldr	r3, [sp, #16]
 800618a:	eba0 000a 	sub.w	r0, r0, sl
 800618e:	2240      	movs	r2, #64	; 0x40
 8006190:	4082      	lsls	r2, r0
 8006192:	4313      	orrs	r3, r2
 8006194:	3401      	adds	r4, #1
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800619c:	4825      	ldr	r0, [pc, #148]	; (8006234 <_svfiprintf_r+0x1ec>)
 800619e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061a2:	2206      	movs	r2, #6
 80061a4:	f7fa f82c 	bl	8000200 <memchr>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d038      	beq.n	800621e <_svfiprintf_r+0x1d6>
 80061ac:	4b22      	ldr	r3, [pc, #136]	; (8006238 <_svfiprintf_r+0x1f0>)
 80061ae:	bb1b      	cbnz	r3, 80061f8 <_svfiprintf_r+0x1b0>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	3307      	adds	r3, #7
 80061b4:	f023 0307 	bic.w	r3, r3, #7
 80061b8:	3308      	adds	r3, #8
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061be:	4433      	add	r3, r6
 80061c0:	9309      	str	r3, [sp, #36]	; 0x24
 80061c2:	e768      	b.n	8006096 <_svfiprintf_r+0x4e>
 80061c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061c8:	460c      	mov	r4, r1
 80061ca:	2001      	movs	r0, #1
 80061cc:	e7a6      	b.n	800611c <_svfiprintf_r+0xd4>
 80061ce:	2300      	movs	r3, #0
 80061d0:	3401      	adds	r4, #1
 80061d2:	9305      	str	r3, [sp, #20]
 80061d4:	4619      	mov	r1, r3
 80061d6:	f04f 0c0a 	mov.w	ip, #10
 80061da:	4620      	mov	r0, r4
 80061dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061e0:	3a30      	subs	r2, #48	; 0x30
 80061e2:	2a09      	cmp	r2, #9
 80061e4:	d903      	bls.n	80061ee <_svfiprintf_r+0x1a6>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0c6      	beq.n	8006178 <_svfiprintf_r+0x130>
 80061ea:	9105      	str	r1, [sp, #20]
 80061ec:	e7c4      	b.n	8006178 <_svfiprintf_r+0x130>
 80061ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80061f2:	4604      	mov	r4, r0
 80061f4:	2301      	movs	r3, #1
 80061f6:	e7f0      	b.n	80061da <_svfiprintf_r+0x192>
 80061f8:	ab03      	add	r3, sp, #12
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	462a      	mov	r2, r5
 80061fe:	4b0f      	ldr	r3, [pc, #60]	; (800623c <_svfiprintf_r+0x1f4>)
 8006200:	a904      	add	r1, sp, #16
 8006202:	4638      	mov	r0, r7
 8006204:	f3af 8000 	nop.w
 8006208:	1c42      	adds	r2, r0, #1
 800620a:	4606      	mov	r6, r0
 800620c:	d1d6      	bne.n	80061bc <_svfiprintf_r+0x174>
 800620e:	89ab      	ldrh	r3, [r5, #12]
 8006210:	065b      	lsls	r3, r3, #25
 8006212:	f53f af2d 	bmi.w	8006070 <_svfiprintf_r+0x28>
 8006216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006218:	b01d      	add	sp, #116	; 0x74
 800621a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621e:	ab03      	add	r3, sp, #12
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	462a      	mov	r2, r5
 8006224:	4b05      	ldr	r3, [pc, #20]	; (800623c <_svfiprintf_r+0x1f4>)
 8006226:	a904      	add	r1, sp, #16
 8006228:	4638      	mov	r0, r7
 800622a:	f000 f879 	bl	8006320 <_printf_i>
 800622e:	e7eb      	b.n	8006208 <_svfiprintf_r+0x1c0>
 8006230:	080066e4 	.word	0x080066e4
 8006234:	080066ee 	.word	0x080066ee
 8006238:	00000000 	.word	0x00000000
 800623c:	08005f95 	.word	0x08005f95
 8006240:	080066ea 	.word	0x080066ea

08006244 <_printf_common>:
 8006244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006248:	4616      	mov	r6, r2
 800624a:	4699      	mov	r9, r3
 800624c:	688a      	ldr	r2, [r1, #8]
 800624e:	690b      	ldr	r3, [r1, #16]
 8006250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006254:	4293      	cmp	r3, r2
 8006256:	bfb8      	it	lt
 8006258:	4613      	movlt	r3, r2
 800625a:	6033      	str	r3, [r6, #0]
 800625c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006260:	4607      	mov	r7, r0
 8006262:	460c      	mov	r4, r1
 8006264:	b10a      	cbz	r2, 800626a <_printf_common+0x26>
 8006266:	3301      	adds	r3, #1
 8006268:	6033      	str	r3, [r6, #0]
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	0699      	lsls	r1, r3, #26
 800626e:	bf42      	ittt	mi
 8006270:	6833      	ldrmi	r3, [r6, #0]
 8006272:	3302      	addmi	r3, #2
 8006274:	6033      	strmi	r3, [r6, #0]
 8006276:	6825      	ldr	r5, [r4, #0]
 8006278:	f015 0506 	ands.w	r5, r5, #6
 800627c:	d106      	bne.n	800628c <_printf_common+0x48>
 800627e:	f104 0a19 	add.w	sl, r4, #25
 8006282:	68e3      	ldr	r3, [r4, #12]
 8006284:	6832      	ldr	r2, [r6, #0]
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	42ab      	cmp	r3, r5
 800628a:	dc26      	bgt.n	80062da <_printf_common+0x96>
 800628c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006290:	1e13      	subs	r3, r2, #0
 8006292:	6822      	ldr	r2, [r4, #0]
 8006294:	bf18      	it	ne
 8006296:	2301      	movne	r3, #1
 8006298:	0692      	lsls	r2, r2, #26
 800629a:	d42b      	bmi.n	80062f4 <_printf_common+0xb0>
 800629c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062a0:	4649      	mov	r1, r9
 80062a2:	4638      	mov	r0, r7
 80062a4:	47c0      	blx	r8
 80062a6:	3001      	adds	r0, #1
 80062a8:	d01e      	beq.n	80062e8 <_printf_common+0xa4>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	6922      	ldr	r2, [r4, #16]
 80062ae:	f003 0306 	and.w	r3, r3, #6
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	bf02      	ittt	eq
 80062b6:	68e5      	ldreq	r5, [r4, #12]
 80062b8:	6833      	ldreq	r3, [r6, #0]
 80062ba:	1aed      	subeq	r5, r5, r3
 80062bc:	68a3      	ldr	r3, [r4, #8]
 80062be:	bf0c      	ite	eq
 80062c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062c4:	2500      	movne	r5, #0
 80062c6:	4293      	cmp	r3, r2
 80062c8:	bfc4      	itt	gt
 80062ca:	1a9b      	subgt	r3, r3, r2
 80062cc:	18ed      	addgt	r5, r5, r3
 80062ce:	2600      	movs	r6, #0
 80062d0:	341a      	adds	r4, #26
 80062d2:	42b5      	cmp	r5, r6
 80062d4:	d11a      	bne.n	800630c <_printf_common+0xc8>
 80062d6:	2000      	movs	r0, #0
 80062d8:	e008      	b.n	80062ec <_printf_common+0xa8>
 80062da:	2301      	movs	r3, #1
 80062dc:	4652      	mov	r2, sl
 80062de:	4649      	mov	r1, r9
 80062e0:	4638      	mov	r0, r7
 80062e2:	47c0      	blx	r8
 80062e4:	3001      	adds	r0, #1
 80062e6:	d103      	bne.n	80062f0 <_printf_common+0xac>
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f0:	3501      	adds	r5, #1
 80062f2:	e7c6      	b.n	8006282 <_printf_common+0x3e>
 80062f4:	18e1      	adds	r1, r4, r3
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	2030      	movs	r0, #48	; 0x30
 80062fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062fe:	4422      	add	r2, r4
 8006300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006308:	3302      	adds	r3, #2
 800630a:	e7c7      	b.n	800629c <_printf_common+0x58>
 800630c:	2301      	movs	r3, #1
 800630e:	4622      	mov	r2, r4
 8006310:	4649      	mov	r1, r9
 8006312:	4638      	mov	r0, r7
 8006314:	47c0      	blx	r8
 8006316:	3001      	adds	r0, #1
 8006318:	d0e6      	beq.n	80062e8 <_printf_common+0xa4>
 800631a:	3601      	adds	r6, #1
 800631c:	e7d9      	b.n	80062d2 <_printf_common+0x8e>
	...

08006320 <_printf_i>:
 8006320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	7e0f      	ldrb	r7, [r1, #24]
 8006326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006328:	2f78      	cmp	r7, #120	; 0x78
 800632a:	4691      	mov	r9, r2
 800632c:	4680      	mov	r8, r0
 800632e:	460c      	mov	r4, r1
 8006330:	469a      	mov	sl, r3
 8006332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006336:	d807      	bhi.n	8006348 <_printf_i+0x28>
 8006338:	2f62      	cmp	r7, #98	; 0x62
 800633a:	d80a      	bhi.n	8006352 <_printf_i+0x32>
 800633c:	2f00      	cmp	r7, #0
 800633e:	f000 80d4 	beq.w	80064ea <_printf_i+0x1ca>
 8006342:	2f58      	cmp	r7, #88	; 0x58
 8006344:	f000 80c0 	beq.w	80064c8 <_printf_i+0x1a8>
 8006348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800634c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006350:	e03a      	b.n	80063c8 <_printf_i+0xa8>
 8006352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006356:	2b15      	cmp	r3, #21
 8006358:	d8f6      	bhi.n	8006348 <_printf_i+0x28>
 800635a:	a101      	add	r1, pc, #4	; (adr r1, 8006360 <_printf_i+0x40>)
 800635c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006360:	080063b9 	.word	0x080063b9
 8006364:	080063cd 	.word	0x080063cd
 8006368:	08006349 	.word	0x08006349
 800636c:	08006349 	.word	0x08006349
 8006370:	08006349 	.word	0x08006349
 8006374:	08006349 	.word	0x08006349
 8006378:	080063cd 	.word	0x080063cd
 800637c:	08006349 	.word	0x08006349
 8006380:	08006349 	.word	0x08006349
 8006384:	08006349 	.word	0x08006349
 8006388:	08006349 	.word	0x08006349
 800638c:	080064d1 	.word	0x080064d1
 8006390:	080063f9 	.word	0x080063f9
 8006394:	0800648b 	.word	0x0800648b
 8006398:	08006349 	.word	0x08006349
 800639c:	08006349 	.word	0x08006349
 80063a0:	080064f3 	.word	0x080064f3
 80063a4:	08006349 	.word	0x08006349
 80063a8:	080063f9 	.word	0x080063f9
 80063ac:	08006349 	.word	0x08006349
 80063b0:	08006349 	.word	0x08006349
 80063b4:	08006493 	.word	0x08006493
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	1d1a      	adds	r2, r3, #4
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	602a      	str	r2, [r5, #0]
 80063c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063c8:	2301      	movs	r3, #1
 80063ca:	e09f      	b.n	800650c <_printf_i+0x1ec>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	0607      	lsls	r7, r0, #24
 80063d2:	f103 0104 	add.w	r1, r3, #4
 80063d6:	6029      	str	r1, [r5, #0]
 80063d8:	d501      	bpl.n	80063de <_printf_i+0xbe>
 80063da:	681e      	ldr	r6, [r3, #0]
 80063dc:	e003      	b.n	80063e6 <_printf_i+0xc6>
 80063de:	0646      	lsls	r6, r0, #25
 80063e0:	d5fb      	bpl.n	80063da <_printf_i+0xba>
 80063e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	da03      	bge.n	80063f2 <_printf_i+0xd2>
 80063ea:	232d      	movs	r3, #45	; 0x2d
 80063ec:	4276      	negs	r6, r6
 80063ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f2:	485a      	ldr	r0, [pc, #360]	; (800655c <_printf_i+0x23c>)
 80063f4:	230a      	movs	r3, #10
 80063f6:	e012      	b.n	800641e <_printf_i+0xfe>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	6820      	ldr	r0, [r4, #0]
 80063fc:	1d19      	adds	r1, r3, #4
 80063fe:	6029      	str	r1, [r5, #0]
 8006400:	0605      	lsls	r5, r0, #24
 8006402:	d501      	bpl.n	8006408 <_printf_i+0xe8>
 8006404:	681e      	ldr	r6, [r3, #0]
 8006406:	e002      	b.n	800640e <_printf_i+0xee>
 8006408:	0641      	lsls	r1, r0, #25
 800640a:	d5fb      	bpl.n	8006404 <_printf_i+0xe4>
 800640c:	881e      	ldrh	r6, [r3, #0]
 800640e:	4853      	ldr	r0, [pc, #332]	; (800655c <_printf_i+0x23c>)
 8006410:	2f6f      	cmp	r7, #111	; 0x6f
 8006412:	bf0c      	ite	eq
 8006414:	2308      	moveq	r3, #8
 8006416:	230a      	movne	r3, #10
 8006418:	2100      	movs	r1, #0
 800641a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800641e:	6865      	ldr	r5, [r4, #4]
 8006420:	60a5      	str	r5, [r4, #8]
 8006422:	2d00      	cmp	r5, #0
 8006424:	bfa2      	ittt	ge
 8006426:	6821      	ldrge	r1, [r4, #0]
 8006428:	f021 0104 	bicge.w	r1, r1, #4
 800642c:	6021      	strge	r1, [r4, #0]
 800642e:	b90e      	cbnz	r6, 8006434 <_printf_i+0x114>
 8006430:	2d00      	cmp	r5, #0
 8006432:	d04b      	beq.n	80064cc <_printf_i+0x1ac>
 8006434:	4615      	mov	r5, r2
 8006436:	fbb6 f1f3 	udiv	r1, r6, r3
 800643a:	fb03 6711 	mls	r7, r3, r1, r6
 800643e:	5dc7      	ldrb	r7, [r0, r7]
 8006440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006444:	4637      	mov	r7, r6
 8006446:	42bb      	cmp	r3, r7
 8006448:	460e      	mov	r6, r1
 800644a:	d9f4      	bls.n	8006436 <_printf_i+0x116>
 800644c:	2b08      	cmp	r3, #8
 800644e:	d10b      	bne.n	8006468 <_printf_i+0x148>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	07de      	lsls	r6, r3, #31
 8006454:	d508      	bpl.n	8006468 <_printf_i+0x148>
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	6861      	ldr	r1, [r4, #4]
 800645a:	4299      	cmp	r1, r3
 800645c:	bfde      	ittt	le
 800645e:	2330      	movle	r3, #48	; 0x30
 8006460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006464:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006468:	1b52      	subs	r2, r2, r5
 800646a:	6122      	str	r2, [r4, #16]
 800646c:	f8cd a000 	str.w	sl, [sp]
 8006470:	464b      	mov	r3, r9
 8006472:	aa03      	add	r2, sp, #12
 8006474:	4621      	mov	r1, r4
 8006476:	4640      	mov	r0, r8
 8006478:	f7ff fee4 	bl	8006244 <_printf_common>
 800647c:	3001      	adds	r0, #1
 800647e:	d14a      	bne.n	8006516 <_printf_i+0x1f6>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	b004      	add	sp, #16
 8006486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	f043 0320 	orr.w	r3, r3, #32
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	4833      	ldr	r0, [pc, #204]	; (8006560 <_printf_i+0x240>)
 8006494:	2778      	movs	r7, #120	; 0x78
 8006496:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	6829      	ldr	r1, [r5, #0]
 800649e:	061f      	lsls	r7, r3, #24
 80064a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80064a4:	d402      	bmi.n	80064ac <_printf_i+0x18c>
 80064a6:	065f      	lsls	r7, r3, #25
 80064a8:	bf48      	it	mi
 80064aa:	b2b6      	uxthmi	r6, r6
 80064ac:	07df      	lsls	r7, r3, #31
 80064ae:	bf48      	it	mi
 80064b0:	f043 0320 	orrmi.w	r3, r3, #32
 80064b4:	6029      	str	r1, [r5, #0]
 80064b6:	bf48      	it	mi
 80064b8:	6023      	strmi	r3, [r4, #0]
 80064ba:	b91e      	cbnz	r6, 80064c4 <_printf_i+0x1a4>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	f023 0320 	bic.w	r3, r3, #32
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	2310      	movs	r3, #16
 80064c6:	e7a7      	b.n	8006418 <_printf_i+0xf8>
 80064c8:	4824      	ldr	r0, [pc, #144]	; (800655c <_printf_i+0x23c>)
 80064ca:	e7e4      	b.n	8006496 <_printf_i+0x176>
 80064cc:	4615      	mov	r5, r2
 80064ce:	e7bd      	b.n	800644c <_printf_i+0x12c>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	6826      	ldr	r6, [r4, #0]
 80064d4:	6961      	ldr	r1, [r4, #20]
 80064d6:	1d18      	adds	r0, r3, #4
 80064d8:	6028      	str	r0, [r5, #0]
 80064da:	0635      	lsls	r5, r6, #24
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	d501      	bpl.n	80064e4 <_printf_i+0x1c4>
 80064e0:	6019      	str	r1, [r3, #0]
 80064e2:	e002      	b.n	80064ea <_printf_i+0x1ca>
 80064e4:	0670      	lsls	r0, r6, #25
 80064e6:	d5fb      	bpl.n	80064e0 <_printf_i+0x1c0>
 80064e8:	8019      	strh	r1, [r3, #0]
 80064ea:	2300      	movs	r3, #0
 80064ec:	6123      	str	r3, [r4, #16]
 80064ee:	4615      	mov	r5, r2
 80064f0:	e7bc      	b.n	800646c <_printf_i+0x14c>
 80064f2:	682b      	ldr	r3, [r5, #0]
 80064f4:	1d1a      	adds	r2, r3, #4
 80064f6:	602a      	str	r2, [r5, #0]
 80064f8:	681d      	ldr	r5, [r3, #0]
 80064fa:	6862      	ldr	r2, [r4, #4]
 80064fc:	2100      	movs	r1, #0
 80064fe:	4628      	mov	r0, r5
 8006500:	f7f9 fe7e 	bl	8000200 <memchr>
 8006504:	b108      	cbz	r0, 800650a <_printf_i+0x1ea>
 8006506:	1b40      	subs	r0, r0, r5
 8006508:	6060      	str	r0, [r4, #4]
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	6123      	str	r3, [r4, #16]
 800650e:	2300      	movs	r3, #0
 8006510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006514:	e7aa      	b.n	800646c <_printf_i+0x14c>
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	462a      	mov	r2, r5
 800651a:	4649      	mov	r1, r9
 800651c:	4640      	mov	r0, r8
 800651e:	47d0      	blx	sl
 8006520:	3001      	adds	r0, #1
 8006522:	d0ad      	beq.n	8006480 <_printf_i+0x160>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	079b      	lsls	r3, r3, #30
 8006528:	d413      	bmi.n	8006552 <_printf_i+0x232>
 800652a:	68e0      	ldr	r0, [r4, #12]
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	4298      	cmp	r0, r3
 8006530:	bfb8      	it	lt
 8006532:	4618      	movlt	r0, r3
 8006534:	e7a6      	b.n	8006484 <_printf_i+0x164>
 8006536:	2301      	movs	r3, #1
 8006538:	4632      	mov	r2, r6
 800653a:	4649      	mov	r1, r9
 800653c:	4640      	mov	r0, r8
 800653e:	47d0      	blx	sl
 8006540:	3001      	adds	r0, #1
 8006542:	d09d      	beq.n	8006480 <_printf_i+0x160>
 8006544:	3501      	adds	r5, #1
 8006546:	68e3      	ldr	r3, [r4, #12]
 8006548:	9903      	ldr	r1, [sp, #12]
 800654a:	1a5b      	subs	r3, r3, r1
 800654c:	42ab      	cmp	r3, r5
 800654e:	dcf2      	bgt.n	8006536 <_printf_i+0x216>
 8006550:	e7eb      	b.n	800652a <_printf_i+0x20a>
 8006552:	2500      	movs	r5, #0
 8006554:	f104 0619 	add.w	r6, r4, #25
 8006558:	e7f5      	b.n	8006546 <_printf_i+0x226>
 800655a:	bf00      	nop
 800655c:	080066f5 	.word	0x080066f5
 8006560:	08006706 	.word	0x08006706

08006564 <memmove>:
 8006564:	4288      	cmp	r0, r1
 8006566:	b510      	push	{r4, lr}
 8006568:	eb01 0402 	add.w	r4, r1, r2
 800656c:	d902      	bls.n	8006574 <memmove+0x10>
 800656e:	4284      	cmp	r4, r0
 8006570:	4623      	mov	r3, r4
 8006572:	d807      	bhi.n	8006584 <memmove+0x20>
 8006574:	1e43      	subs	r3, r0, #1
 8006576:	42a1      	cmp	r1, r4
 8006578:	d008      	beq.n	800658c <memmove+0x28>
 800657a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800657e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006582:	e7f8      	b.n	8006576 <memmove+0x12>
 8006584:	4402      	add	r2, r0
 8006586:	4601      	mov	r1, r0
 8006588:	428a      	cmp	r2, r1
 800658a:	d100      	bne.n	800658e <memmove+0x2a>
 800658c:	bd10      	pop	{r4, pc}
 800658e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006596:	e7f7      	b.n	8006588 <memmove+0x24>

08006598 <_sbrk_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d06      	ldr	r5, [pc, #24]	; (80065b4 <_sbrk_r+0x1c>)
 800659c:	2300      	movs	r3, #0
 800659e:	4604      	mov	r4, r0
 80065a0:	4608      	mov	r0, r1
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	f7fa ffb2 	bl	800150c <_sbrk>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_sbrk_r+0x1a>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_sbrk_r+0x1a>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	20000a68 	.word	0x20000a68

080065b8 <memcpy>:
 80065b8:	440a      	add	r2, r1
 80065ba:	4291      	cmp	r1, r2
 80065bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80065c0:	d100      	bne.n	80065c4 <memcpy+0xc>
 80065c2:	4770      	bx	lr
 80065c4:	b510      	push	{r4, lr}
 80065c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ce:	4291      	cmp	r1, r2
 80065d0:	d1f9      	bne.n	80065c6 <memcpy+0xe>
 80065d2:	bd10      	pop	{r4, pc}

080065d4 <_realloc_r>:
 80065d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d8:	4680      	mov	r8, r0
 80065da:	4614      	mov	r4, r2
 80065dc:	460e      	mov	r6, r1
 80065de:	b921      	cbnz	r1, 80065ea <_realloc_r+0x16>
 80065e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065e4:	4611      	mov	r1, r2
 80065e6:	f7ff bc49 	b.w	8005e7c <_malloc_r>
 80065ea:	b92a      	cbnz	r2, 80065f8 <_realloc_r+0x24>
 80065ec:	f7ff fbda 	bl	8005da4 <_free_r>
 80065f0:	4625      	mov	r5, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f8:	f000 f81b 	bl	8006632 <_malloc_usable_size_r>
 80065fc:	4284      	cmp	r4, r0
 80065fe:	4607      	mov	r7, r0
 8006600:	d802      	bhi.n	8006608 <_realloc_r+0x34>
 8006602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006606:	d812      	bhi.n	800662e <_realloc_r+0x5a>
 8006608:	4621      	mov	r1, r4
 800660a:	4640      	mov	r0, r8
 800660c:	f7ff fc36 	bl	8005e7c <_malloc_r>
 8006610:	4605      	mov	r5, r0
 8006612:	2800      	cmp	r0, #0
 8006614:	d0ed      	beq.n	80065f2 <_realloc_r+0x1e>
 8006616:	42bc      	cmp	r4, r7
 8006618:	4622      	mov	r2, r4
 800661a:	4631      	mov	r1, r6
 800661c:	bf28      	it	cs
 800661e:	463a      	movcs	r2, r7
 8006620:	f7ff ffca 	bl	80065b8 <memcpy>
 8006624:	4631      	mov	r1, r6
 8006626:	4640      	mov	r0, r8
 8006628:	f7ff fbbc 	bl	8005da4 <_free_r>
 800662c:	e7e1      	b.n	80065f2 <_realloc_r+0x1e>
 800662e:	4635      	mov	r5, r6
 8006630:	e7df      	b.n	80065f2 <_realloc_r+0x1e>

08006632 <_malloc_usable_size_r>:
 8006632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006636:	1f18      	subs	r0, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	bfbc      	itt	lt
 800663c:	580b      	ldrlt	r3, [r1, r0]
 800663e:	18c0      	addlt	r0, r0, r3
 8006640:	4770      	bx	lr
	...

08006644 <_init>:
 8006644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006646:	bf00      	nop
 8006648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664a:	bc08      	pop	{r3}
 800664c:	469e      	mov	lr, r3
 800664e:	4770      	bx	lr

08006650 <_fini>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr
