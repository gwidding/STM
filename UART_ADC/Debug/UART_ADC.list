
UART_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005944  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b58  08005b58  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b60  08005b60  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b64  08005b64  00015b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000970  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009d8  200009d8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011bfa  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000275e  00000000  00000000  00031cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e38  00000000  00000000  00034438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000af7  00000000  00000000  00035270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000266e6  00000000  00000000  00035d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010fb5  00000000  00000000  0005c44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8cee  00000000  00000000  0006d402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000432c  00000000  00000000  001560f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0015a41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005adc 	.word	0x08005adc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08005adc 	.word	0x08005adc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <_write>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_ADC1_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <_write+0x28>)
 80005a4:	f003 f899 	bl	80036da <HAL_UART_Transmit>
	return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200002f4 	.word	0x200002f4

080005b8 <HAL_GPIO_EXTI_Callback>:
uint32_t old_tick_2;

char uart_buf[30];
int adc_value;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2) {
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d104      	bne.n	80005d2 <HAL_GPIO_EXTI_Callback+0x1a>
		current_tick_1 = HAL_GetTick();
 80005c8:	f000 fe62 	bl	8001290 <HAL_GetTick>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <HAL_GPIO_EXTI_Callback+0x84>)
 80005d0:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == GPIO_PIN_4) {
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	2b10      	cmp	r3, #16
 80005d6:	d104      	bne.n	80005e2 <HAL_GPIO_EXTI_Callback+0x2a>
		current_tick_2 = HAL_GetTick();
 80005d8:	f000 fe5a 	bl	8001290 <HAL_GetTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_GPIO_EXTI_Callback+0x88>)
 80005e0:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == GPIO_PIN_2 && (current_tick_1 - old_tick_1 > 300)) {
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	d110      	bne.n	800060a <HAL_GPIO_EXTI_Callback+0x52>
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <HAL_GPIO_EXTI_Callback+0x84>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_GPIO_EXTI_Callback+0x8c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80005f6:	d908      	bls.n	800060a <HAL_GPIO_EXTI_Callback+0x52>
			count++;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <HAL_GPIO_EXTI_Callback+0x90>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <HAL_GPIO_EXTI_Callback+0x90>)
 8000600:	6013      	str	r3, [r2, #0]
			old_tick_1 = current_tick_1;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_GPIO_EXTI_Callback+0x84>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000608:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == GPIO_PIN_4 && (current_tick_2 - old_tick_2 > 300)) {
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	2b10      	cmp	r3, #16
 800060e:	d110      	bne.n	8000632 <HAL_GPIO_EXTI_Callback+0x7a>
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <HAL_GPIO_EXTI_Callback+0x88>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <HAL_GPIO_EXTI_Callback+0x94>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800061e:	d908      	bls.n	8000632 <HAL_GPIO_EXTI_Callback+0x7a>
		count--;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_GPIO_EXTI_Callback+0x90>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3b01      	subs	r3, #1
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <HAL_GPIO_EXTI_Callback+0x90>)
 8000628:	6013      	str	r3, [r2, #0]
		old_tick_2 = current_tick_2;
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_GPIO_EXTI_Callback+0x88>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_GPIO_EXTI_Callback+0x94>)
 8000630:	6013      	str	r3, [r2, #0]
	}
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000848 	.word	0x20000848
 8000640:	2000084c 	.word	0x2000084c
 8000644:	20000850 	.word	0x20000850
 8000648:	20000844 	.word	0x20000844
 800064c:	20000854 	.word	0x20000854

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fdb6 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f87a 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f9f6 	bl	8000a4c <MX_GPIO_Init>
  MX_ETH_Init();
 8000660:	f000 f94e 	bl	8000900 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000664:	f000 f99a 	bl	800099c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000668:	f000 f9c2 	bl	80009f0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800066c:	f000 f8f6 	bl	800085c <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000670:	f000 f8d8 	bl	8000824 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000674:	482f      	ldr	r0, [pc, #188]	; (8000734 <main+0xe4>)
 8000676:	f000 fe7f 	bl	8001378 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800067a:	210a      	movs	r1, #10
 800067c:	482d      	ldr	r0, [pc, #180]	; (8000734 <main+0xe4>)
 800067e:	f000 ff80 	bl	8001582 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000682:	482c      	ldr	r0, [pc, #176]	; (8000734 <main+0xe4>)
 8000684:	f001 f918 	bl	80018b8 <HAL_ADC_GetValue>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <main+0xe8>)
 800068e:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000690:	4828      	ldr	r0, [pc, #160]	; (8000734 <main+0xe4>)
 8000692:	f000 ff43 	bl	800151c <HAL_ADC_Stop>

	  printf("count : %d, ADC : %d \r\n", count, adc_value);
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <main+0xec>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a27      	ldr	r2, [pc, #156]	; (8000738 <main+0xe8>)
 800069c:	6812      	ldr	r2, [r2, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	4827      	ldr	r0, [pc, #156]	; (8000740 <main+0xf0>)
 80006a2:	f004 fba5 	bl	8004df0 <iprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, sizeof(uart_buf), 100);
 80006a6:	2364      	movs	r3, #100	; 0x64
 80006a8:	221e      	movs	r2, #30
 80006aa:	4926      	ldr	r1, [pc, #152]	; (8000744 <main+0xf4>)
 80006ac:	4826      	ldr	r0, [pc, #152]	; (8000748 <main+0xf8>)
 80006ae:	f003 f814 	bl	80036da <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80006b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b6:	f000 fdf7 	bl	80012a8 <HAL_Delay>


	  if (adc_value <= 1000) {
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <main+0xe8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006c2:	dc10      	bgt.n	80006e6 <main+0x96>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	4820      	ldr	r0, [pc, #128]	; (800074c <main+0xfc>)
 80006ca:	f002 f9d1 	bl	8002a70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	481e      	ldr	r0, [pc, #120]	; (800074c <main+0xfc>)
 80006d4:	f002 f9cc 	bl	8002a70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006de:	481b      	ldr	r0, [pc, #108]	; (800074c <main+0xfc>)
 80006e0:	f002 f9c6 	bl	8002a70 <HAL_GPIO_WritePin>
 80006e4:	e7c6      	b.n	8000674 <main+0x24>

	  }
	  else if (adc_value <= 2000) {
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <main+0xe8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006ee:	dc10      	bgt.n	8000712 <main+0xc2>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	4815      	ldr	r0, [pc, #84]	; (800074c <main+0xfc>)
 80006f6:	f002 f9bb 	bl	8002a70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4813      	ldr	r0, [pc, #76]	; (800074c <main+0xfc>)
 8000700:	f002 f9b6 	bl	8002a70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <main+0xfc>)
 800070c:	f002 f9b0 	bl	8002a70 <HAL_GPIO_WritePin>
 8000710:	e7b0      	b.n	8000674 <main+0x24>

	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <main+0xfc>)
 8000718:	f002 f9aa 	bl	8002a70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	480a      	ldr	r0, [pc, #40]	; (800074c <main+0xfc>)
 8000722:	f002 f9a5 	bl	8002a70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	4807      	ldr	r0, [pc, #28]	; (800074c <main+0xfc>)
 800072e:	f002 f99f 	bl	8002a70 <HAL_GPIO_WritePin>
  {
 8000732:	e79f      	b.n	8000674 <main+0x24>
 8000734:	200001fc 	.word	0x200001fc
 8000738:	20000878 	.word	0x20000878
 800073c:	20000844 	.word	0x20000844
 8000740:	08005af4 	.word	0x08005af4
 8000744:	20000858 	.word	0x20000858
 8000748:	200002f4 	.word	0x200002f4
 800074c:	40020400 	.word	0x40020400

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f004 fb9b 	bl	8004e9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a27      	ldr	r2, [pc, #156]	; (800081c <SystemClock_Config+0xcc>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a21      	ldr	r2, [pc, #132]	; (8000820 <SystemClock_Config+0xd0>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007c4:	23a8      	movs	r3, #168	; 0xa8
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007cc:	2307      	movs	r3, #7
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fa9b 	bl	8002d10 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e0:	f000 f9fe 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2302      	movs	r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2105      	movs	r1, #5
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fcfc 	bl	8003200 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080e:	f000 f9e7 	bl	8000be0 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3750      	adds	r7, #80	; 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2008      	movs	r0, #8
 800082e:	f001 fb82 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000832:	2008      	movs	r0, #8
 8000834:	f001 fb9b 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	200a      	movs	r0, #10
 800083e:	f001 fb7a 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000842:	200a      	movs	r0, #10
 8000844:	f001 fb93 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2012      	movs	r0, #18
 800084e:	f001 fb72 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000852:	2012      	movs	r0, #18
 8000854:	f001 fb8b 	bl	8001f6e <HAL_NVIC_EnableIRQ>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_ADC1_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_ADC1_Init+0x98>)
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_ADC1_Init+0xa0>)
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008be:	f000 fd17 	bl	80012f0 <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 f98a 	bl	8000be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008cc:	2303      	movs	r3, #3
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008de:	f001 f817 	bl	8001910 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 f97a 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001fc 	.word	0x200001fc
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_ETH_Init+0x84>)
 8000906:	4a20      	ldr	r2, [pc, #128]	; (8000988 <MX_ETH_Init+0x88>)
 8000908:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_ETH_Init+0x8c>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_ETH_Init+0x8c>)
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_ETH_Init+0x8c>)
 8000918:	22e1      	movs	r2, #225	; 0xe1
 800091a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_ETH_Init+0x8c>)
 800091e:	2200      	movs	r2, #0
 8000920:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_ETH_Init+0x8c>)
 8000924:	2200      	movs	r2, #0
 8000926:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_ETH_Init+0x8c>)
 800092a:	2200      	movs	r2, #0
 800092c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_ETH_Init+0x84>)
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <MX_ETH_Init+0x8c>)
 8000932:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_ETH_Init+0x84>)
 8000936:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800093a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_ETH_Init+0x84>)
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <MX_ETH_Init+0x90>)
 8000940:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_ETH_Init+0x84>)
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <MX_ETH_Init+0x94>)
 8000946:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_ETH_Init+0x84>)
 800094a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800094e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_ETH_Init+0x84>)
 8000952:	f001 fbb9 	bl	80020c8 <HAL_ETH_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 f940 	bl	8000be0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000960:	2238      	movs	r2, #56	; 0x38
 8000962:	2100      	movs	r1, #0
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_ETH_Init+0x98>)
 8000966:	f004 fa98 	bl	8004e9a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_ETH_Init+0x98>)
 800096c:	2221      	movs	r2, #33	; 0x21
 800096e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_ETH_Init+0x98>)
 8000972:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000976:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_ETH_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000244 	.word	0x20000244
 8000988:	40028000 	.word	0x40028000
 800098c:	2000087c 	.word	0x2000087c
 8000990:	2000015c 	.word	0x2000015c
 8000994:	200000bc 	.word	0x200000bc
 8000998:	20000084 	.word	0x20000084

0800099c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART3_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009d4:	f002 fe34 	bl	8003640 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f8ff 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200002f4 	.word	0x200002f4
 80009ec:	40004800 	.word	0x40004800

080009f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2202      	movs	r2, #2
 8000a06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	f002 f84e 	bl	8002ad4 <HAL_PCD_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a3e:	f000 f8cf 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000338 	.word	0x20000338

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b59      	ldr	r3, [pc, #356]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a58      	ldr	r2, [pc, #352]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b56      	ldr	r3, [pc, #344]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b4f      	ldr	r3, [pc, #316]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a4a      	ldr	r2, [pc, #296]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a43      	ldr	r2, [pc, #268]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a35      	ldr	r2, [pc, #212]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <MX_GPIO_Init+0x180>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b2c:	4828      	ldr	r0, [pc, #160]	; (8000bd0 <MX_GPIO_Init+0x184>)
 8000b2e:	f001 ff9f 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	4827      	ldr	r0, [pc, #156]	; (8000bd4 <MX_GPIO_Init+0x188>)
 8000b38:	f001 ff9a 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000b3c:	2314      	movs	r3, #20
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4821      	ldr	r0, [pc, #132]	; (8000bd8 <MX_GPIO_Init+0x18c>)
 8000b52:	f001 fde1 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481b      	ldr	r0, [pc, #108]	; (8000bdc <MX_GPIO_Init+0x190>)
 8000b6e:	f001 fdd3 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b72:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <MX_GPIO_Init+0x184>)
 8000b8c:	f001 fdc4 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b90:	2340      	movs	r3, #64	; 0x40
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <MX_GPIO_Init+0x188>)
 8000ba8:	f001 fdb6 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_GPIO_Init+0x188>)
 8000bc0:	f001 fdaa 	bl	8002718 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40021800 	.word	0x40021800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40020800 	.word	0x40020800

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_ADC_MspInit+0x7c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d127      	bne.n	8000cae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c96:	2308      	movs	r3, #8
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <HAL_ADC_MspInit+0x84>)
 8000caa:	f001 fd35 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40012000 	.word	0x40012000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	; 0x38
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a55      	ldr	r2, [pc, #340]	; (8000e38 <HAL_ETH_MspInit+0x174>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	f040 80a4 	bne.w	8000e30 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	4a52      	ldr	r2, [pc, #328]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000cf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf8:	4b50      	ldr	r3, [pc, #320]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d00:	623b      	str	r3, [r7, #32]
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	4a4b      	ldr	r2, [pc, #300]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d12:	6313      	str	r3, [r2, #48]	; 0x30
 8000d14:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a44      	ldr	r2, [pc, #272]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d38:	61bb      	str	r3, [r7, #24]
 8000d3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a3d      	ldr	r2, [pc, #244]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a36      	ldr	r2, [pc, #216]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a2f      	ldr	r2, [pc, #188]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_ETH_MspInit+0x178>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dac:	2332      	movs	r3, #50	; 0x32
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481e      	ldr	r0, [pc, #120]	; (8000e40 <HAL_ETH_MspInit+0x17c>)
 8000dc8:	f001 fca6 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dcc:	2386      	movs	r3, #134	; 0x86
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ddc:	230b      	movs	r3, #11
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4817      	ldr	r0, [pc, #92]	; (8000e44 <HAL_ETH_MspInit+0x180>)
 8000de8:	f001 fc96 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfe:	230b      	movs	r3, #11
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	480f      	ldr	r0, [pc, #60]	; (8000e48 <HAL_ETH_MspInit+0x184>)
 8000e0a:	f001 fc85 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e20:	230b      	movs	r3, #11
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <HAL_ETH_MspInit+0x188>)
 8000e2c:	f001 fc74 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3738      	adds	r7, #56	; 0x38
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40028000 	.word	0x40028000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40021800 	.word	0x40021800

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_UART_MspInit+0x94>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d134      	bne.n	8000edc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_UART_MspInit+0x98>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_UART_MspInit+0x98>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0x98>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_UART_MspInit+0x98>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_UART_MspInit+0x98>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_UART_MspInit+0x98>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <HAL_UART_MspInit+0x9c>)
 8000ec8:	f001 fc26 	bl	8002718 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2027      	movs	r0, #39	; 0x27
 8000ed2:	f001 f830 	bl	8001f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ed6:	2027      	movs	r0, #39	; 0x27
 8000ed8:	f001 f849 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40004800 	.word	0x40004800
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020c00 	.word	0x40020c00

08000ef0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f10:	d13f      	bne.n	8000f92 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <HAL_PCD_MspInit+0xac>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <HAL_PCD_MspInit+0xac>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_PCD_MspInit+0xac>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f2e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f40:	230a      	movs	r3, #10
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <HAL_PCD_MspInit+0xb0>)
 8000f4c:	f001 fbe4 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <HAL_PCD_MspInit+0xb0>)
 8000f66:	f001 fbd7 	bl	8002718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_PCD_MspInit+0xac>)
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_PCD_MspInit+0xac>)
 8000f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f74:	6353      	str	r3, [r2, #52]	; 0x34
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_PCD_MspInit+0xac>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_PCD_MspInit+0xac>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_PCD_MspInit+0xac>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f93a 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ffc:	2004      	movs	r0, #4
 8000ffe:	f001 fd51 	bl	8002aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}

08001006 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800100a:	2010      	movs	r0, #16
 800100c:	f001 fd4a 	bl	8002aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <ADC_IRQHandler+0x10>)
 800101a:	f000 fb3d 	bl	8001698 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001fc 	.word	0x200001fc

08001028 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <USART3_IRQHandler+0x10>)
 800102e:	f002 fbe7 	bl	8003800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002f4 	.word	0x200002f4

0800103c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e00a      	b.n	8001064 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104e:	f3af 8000 	nop.w
 8001052:	4601      	mov	r1, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf0      	blt.n	800104e <_read+0x12>
  }

  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109e:	605a      	str	r2, [r3, #4]
  return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_isatty>:

int _isatty(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f003 ff12 	bl	8004f38 <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20030000 	.word	0x20030000
 8001140:	00000400 	.word	0x00000400
 8001144:	20000884 	.word	0x20000884
 8001148:	200009d8 	.word	0x200009d8

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800118c:	4c0b      	ldr	r4, [pc, #44]	; (80011bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119a:	f7ff ffd7 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119e:	f003 fed1 	bl	8004f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fa55 	bl	8000650 <main>
  bx  lr    
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011b4:	08005b68 	.word	0x08005b68
  ldr r2, =_sbss
 80011b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011bc:	200009d8 	.word	0x200009d8

080011c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <CAN1_RX0_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 fe97 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fcf8 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 feaf 	bl	8001f8a <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 fe77 	bl	8001f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008
 800128c:	20000888 	.word	0x20000888

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000888 	.word	0x20000888

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008

080012f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e033      	b.n	800136e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fc94 	bl	8000c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001336:	f023 0302 	bic.w	r3, r3, #2
 800133a:	f043 0202 	orr.w	r2, r3, #2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fc16 	bl	8001b74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f023 0303 	bic.w	r3, r3, #3
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
 800135e:	e001      	b.n	8001364 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_ADC_Start+0x1a>
 800138e:	2302      	movs	r3, #2
 8001390:	e0b2      	b.n	80014f8 <HAL_ADC_Start+0x180>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d018      	beq.n	80013da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b8:	4b52      	ldr	r3, [pc, #328]	; (8001504 <HAL_ADC_Start+0x18c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_ADC_Start+0x190>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0c9a      	lsrs	r2, r3, #18
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d17a      	bne.n	80014de <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001412:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001426:	d106      	bne.n	8001436 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f023 0206 	bic.w	r2, r3, #6
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
 8001434:	e002      	b.n	800143c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_ADC_Start+0x194>)
 8001446:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001450:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	2b00      	cmp	r3, #0
 800145c:	d12a      	bne.n	80014b4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <HAL_ADC_Start+0x198>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d015      	beq.n	8001494 <HAL_ADC_Start+0x11c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_ADC_Start+0x19c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d105      	bne.n	800147e <HAL_ADC_Start+0x106>
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_ADC_Start+0x194>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00a      	beq.n	8001494 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <HAL_ADC_Start+0x1a0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d136      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_ADC_Start+0x194>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d130      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d129      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	e020      	b.n	80014f6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_ADC_Start+0x198>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11b      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d114      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	e00b      	b.n	80014f6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83
 800150c:	40012300 	.word	0x40012300
 8001510:	40012000 	.word	0x40012000
 8001514:	40012100 	.word	0x40012100
 8001518:	40012200 	.word	0x40012200

0800151c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_ADC_Stop+0x16>
 800152e:	2302      	movs	r3, #2
 8001530:	e021      	b.n	8001576 <HAL_ADC_Stop+0x5a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159e:	d113      	bne.n	80015c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ae:	d10b      	bne.n	80015c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e063      	b.n	8001690 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015c8:	f7ff fe62 	bl	8001290 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015ce:	e021      	b.n	8001614 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d6:	d01d      	beq.n	8001614 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <HAL_ADC_PollForConversion+0x6c>
 80015de:	f7ff fe57 	bl	8001290 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d212      	bcs.n	8001614 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d00b      	beq.n	8001614 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f043 0204 	orr.w	r2, r3, #4
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e03d      	b.n	8001690 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b02      	cmp	r3, #2
 8001620:	d1d6      	bne.n	80015d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f06f 0212 	mvn.w	r2, #18
 800162a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d123      	bne.n	800168e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11f      	bne.n	800168e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001666:	2b00      	cmp	r3, #0
 8001668:	d111      	bne.n	800168e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d105      	bne.n	800168e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f043 0201 	orr.w	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d049      	beq.n	8001762 <HAL_ADC_IRQHandler+0xca>
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d046      	beq.n	8001762 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d12b      	bne.n	8001752 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d127      	bne.n	8001752 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0220 	bic.w	r2, r2, #32
 800172c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d105      	bne.n	8001752 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f8bd 	bl	80018d2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 0212 	mvn.w	r2, #18
 8001760:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001770:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d057      	beq.n	8001828 <HAL_ADC_IRQHandler+0x190>
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d054      	beq.n	8001828 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d139      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d12b      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d124      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d11d      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d119      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 faa7 	bl	8001d6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f06f 020c 	mvn.w	r2, #12
 8001826:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001836:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d017      	beq.n	800186e <HAL_ADC_IRQHandler+0x1d6>
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d014      	beq.n	800186e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10d      	bne.n	800186e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f841 	bl	80018e6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0201 	mvn.w	r2, #1
 800186c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800187c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d015      	beq.n	80018b0 <HAL_ADC_IRQHandler+0x218>
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d012      	beq.n	80018b0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f06f 0220 	mvn.w	r2, #32
 800189e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f82a 	bl	80018fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f06f 0220 	mvn.w	r2, #32
 80018ae:	601a      	str	r2, [r3, #0]
  }
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_ADC_ConfigChannel+0x1c>
 8001928:	2302      	movs	r3, #2
 800192a:	e113      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x244>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b09      	cmp	r3, #9
 800193a:	d925      	bls.n	8001988 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68d9      	ldr	r1, [r3, #12]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	3b1e      	subs	r3, #30
 8001952:	2207      	movs	r2, #7
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43da      	mvns	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	400a      	ands	r2, r1
 8001960:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68d9      	ldr	r1, [r3, #12]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b29b      	uxth	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	4603      	mov	r3, r0
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4403      	add	r3, r0
 800197a:	3b1e      	subs	r3, #30
 800197c:	409a      	lsls	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	e022      	b.n	80019ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6919      	ldr	r1, [r3, #16]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	2207      	movs	r2, #7
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	400a      	ands	r2, r1
 80019aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6919      	ldr	r1, [r3, #16]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	4603      	mov	r3, r0
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4403      	add	r3, r0
 80019c4:	409a      	lsls	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d824      	bhi.n	8001a20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b05      	subs	r3, #5
 80019e8:	221f      	movs	r2, #31
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	400a      	ands	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	3b05      	subs	r3, #5
 8001a12:	fa00 f203 	lsl.w	r2, r0, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1e:	e04c      	b.n	8001aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	d824      	bhi.n	8001a72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b23      	subs	r3, #35	; 0x23
 8001a3a:	221f      	movs	r2, #31
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43da      	mvns	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	400a      	ands	r2, r1
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3b23      	subs	r3, #35	; 0x23
 8001a64:	fa00 f203 	lsl.w	r2, r0, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a70:	e023      	b.n	8001aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b41      	subs	r3, #65	; 0x41
 8001a84:	221f      	movs	r2, #31
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	400a      	ands	r2, r1
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b41      	subs	r3, #65	; 0x41
 8001aae:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_ADC_ConfigChannel+0x250>)
 8001abc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a28      	ldr	r2, [pc, #160]	; (8001b64 <HAL_ADC_ConfigChannel+0x254>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d10f      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1d8>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b12      	cmp	r3, #18
 8001ace:	d10b      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <HAL_ADC_ConfigChannel+0x254>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d12b      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x23a>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_ADC_ConfigChannel+0x258>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d003      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0x1f4>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b11      	cmp	r3, #17
 8001b02:	d122      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_ADC_ConfigChannel+0x258>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d111      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_ADC_ConfigChannel+0x25c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_ADC_ConfigChannel+0x260>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	0c9a      	lsrs	r2, r3, #18
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40012300 	.word	0x40012300
 8001b64:	40012000 	.word	0x40012000
 8001b68:	10000012 	.word	0x10000012
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83

08001b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b7c:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <ADC_Init+0x1f0>)
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	021a      	lsls	r2, r3, #8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6899      	ldr	r1, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <ADC_Init+0x1f4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d022      	beq.n	8001c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6899      	ldr	r1, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6899      	ldr	r1, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	e00f      	b.n	8001c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0202 	bic.w	r2, r2, #2
 8001c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
 8001c8c:	005a      	lsls	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	035a      	lsls	r2, r3, #13
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	e007      	b.n	8001ce8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	051a      	lsls	r2, r3, #20
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d2a:	025a      	lsls	r2, r3, #9
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	029a      	lsls	r2, r3, #10
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40012300 	.word	0x40012300
 8001d68:	0f000001 	.word	0x0f000001

08001d6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4907      	ldr	r1, [pc, #28]	; (8001e1c <__NVIC_EnableIRQ+0x38>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	; (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f7ff ff8e 	bl	8001e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff29 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff3e 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff8e 	bl	8001e74 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5d 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff31 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa2 	bl	8001edc <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff f96e 	bl	8001290 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d008      	beq.n	8001fd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e052      	b.n	800207a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0216 	bic.w	r2, r2, #22
 8001fe2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d103      	bne.n	8002004 <HAL_DMA_Abort+0x62>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0208 	bic.w	r2, r2, #8
 8002012:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	e013      	b.n	800204e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002026:	f7ff f933 	bl	8001290 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b05      	cmp	r3, #5
 8002032:	d90c      	bls.n	800204e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2203      	movs	r2, #3
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e015      	b.n	800207a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1e4      	bne.n	8002026 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	223f      	movs	r2, #63	; 0x3f
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d004      	beq.n	80020a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e00c      	b.n	80020ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2205      	movs	r2, #5
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06c      	b.n	80021b4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2223      	movs	r2, #35	; 0x23
 80020e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe fde9 	bl	8000cc4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_ETH_Init+0xf4>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a30      	ldr	r2, [pc, #192]	; (80021bc <HAL_ETH_Init+0xf4>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_ETH_Init+0xf4>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <HAL_ETH_Init+0xf8>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_ETH_Init+0xf8>)
 8002114:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002118:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_ETH_Init+0xf8>)
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4927      	ldr	r1, [pc, #156]	; (80021c0 <HAL_ETH_Init+0xf8>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_ETH_Init+0xf8>)
 800212a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002142:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002144:	f7ff f8a4 	bl	8001290 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800214a:	e011      	b.n	8002170 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800214c:	f7ff f8a0 	bl	8001290 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800215a:	d909      	bls.n	8002170 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2204      	movs	r2, #4
 8002160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	22e0      	movs	r2, #224	; 0xe0
 8002168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e021      	b.n	80021b4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1e4      	bne.n	800214c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f958 	bl	8002438 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f9ff 	bl	800258c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fa55 	bl	800263e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	461a      	mov	r2, r3
 800219a:	2100      	movs	r1, #0
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f9bd 	bl	800251c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2210      	movs	r2, #16
 80021ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40013800 	.word	0x40013800

080021c4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4b51      	ldr	r3, [pc, #324]	; (8002320 <ETH_SetMACConfig+0x15c>)
 80021da:	4013      	ands	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	7c1b      	ldrb	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <ETH_SetMACConfig+0x28>
 80021e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021ea:	e000      	b.n	80021ee <ETH_SetMACConfig+0x2a>
 80021ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	7c5b      	ldrb	r3, [r3, #17]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <ETH_SetMACConfig+0x38>
 80021f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021fa:	e000      	b.n	80021fe <ETH_SetMACConfig+0x3a>
 80021fc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002204:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	7fdb      	ldrb	r3, [r3, #31]
 800220a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800220c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002212:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	7f92      	ldrb	r2, [r2, #30]
 8002218:	2a00      	cmp	r2, #0
 800221a:	d102      	bne.n	8002222 <ETH_SetMACConfig+0x5e>
 800221c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002220:	e000      	b.n	8002224 <ETH_SetMACConfig+0x60>
 8002222:	2200      	movs	r2, #0
                        macconf->Speed |
 8002224:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	7f1b      	ldrb	r3, [r3, #28]
 800222a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800222c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002232:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	791b      	ldrb	r3, [r3, #4]
 8002238:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800223a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002242:	2a00      	cmp	r2, #0
 8002244:	d102      	bne.n	800224c <ETH_SetMACConfig+0x88>
 8002246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800224a:	e000      	b.n	800224e <ETH_SetMACConfig+0x8a>
 800224c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800224e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	7bdb      	ldrb	r3, [r3, #15]
 8002254:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002256:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800225c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002264:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002266:	4313      	orrs	r3, r2
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800227e:	2001      	movs	r0, #1
 8002280:	f7ff f812 	bl	80012a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	f64f 7341 	movw	r3, #65345	; 0xff41
 800229a:	4013      	ands	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d101      	bne.n	80022b2 <ETH_SetMACConfig+0xee>
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	e000      	b.n	80022b4 <ETH_SetMACConfig+0xf0>
 80022b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80022c2:	2a01      	cmp	r2, #1
 80022c4:	d101      	bne.n	80022ca <ETH_SetMACConfig+0x106>
 80022c6:	2208      	movs	r2, #8
 80022c8:	e000      	b.n	80022cc <ETH_SetMACConfig+0x108>
 80022ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80022d4:	2a01      	cmp	r2, #1
 80022d6:	d101      	bne.n	80022dc <ETH_SetMACConfig+0x118>
 80022d8:	2204      	movs	r2, #4
 80022da:	e000      	b.n	80022de <ETH_SetMACConfig+0x11a>
 80022dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80022e6:	2a01      	cmp	r2, #1
 80022e8:	d101      	bne.n	80022ee <ETH_SetMACConfig+0x12a>
 80022ea:	2202      	movs	r2, #2
 80022ec:	e000      	b.n	80022f0 <ETH_SetMACConfig+0x12c>
 80022ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022f0:	4313      	orrs	r3, r2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002308:	2001      	movs	r0, #1
 800230a:	f7fe ffcd 	bl	80012a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	619a      	str	r2, [r3, #24]
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	ff20810f 	.word	0xff20810f

08002324 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <ETH_SetDMAConfig+0x110>)
 800233e:	4013      	ands	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	7b1b      	ldrb	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <ETH_SetDMAConfig+0x2c>
 800234a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800234e:	e000      	b.n	8002352 <ETH_SetDMAConfig+0x2e>
 8002350:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	7b5b      	ldrb	r3, [r3, #13]
 8002356:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002358:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	7f52      	ldrb	r2, [r2, #29]
 800235e:	2a00      	cmp	r2, #0
 8002360:	d102      	bne.n	8002368 <ETH_SetDMAConfig+0x44>
 8002362:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002366:	e000      	b.n	800236a <ETH_SetDMAConfig+0x46>
 8002368:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800236a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	7b9b      	ldrb	r3, [r3, #14]
 8002370:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002372:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002378:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	7f1b      	ldrb	r3, [r3, #28]
 800237e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002380:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	7f9b      	ldrb	r3, [r3, #30]
 8002386:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002388:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800238e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002396:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002398:	4313      	orrs	r3, r2
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a8:	461a      	mov	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7fe ff74 	bl	80012a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c8:	461a      	mov	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	791b      	ldrb	r3, [r3, #4]
 80023d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002406:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800240a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002418:	2001      	movs	r0, #1
 800241a:	f7fe ff45 	bl	80012a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	f8de3f23 	.word	0xf8de3f23

08002438 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0a6      	sub	sp, #152	; 0x98
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002440:	2301      	movs	r3, #1
 8002442:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800244c:	2300      	movs	r3, #0
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002474:	2300      	movs	r3, #0
 8002476:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800247e:	2300      	movs	r3, #0
 8002480:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800249a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024b0:	4619      	mov	r1, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fe86 	bl	80021c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024b8:	2301      	movs	r3, #1
 80024ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024bc:	2301      	movs	r3, #1
 80024be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024da:	2300      	movs	r3, #0
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff08 	bl	8002324 <ETH_SetDMAConfig>
}
 8002514:	bf00      	nop
 8002516:	3798      	adds	r7, #152	; 0x98
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3305      	adds	r3, #5
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	3204      	adds	r2, #4
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <ETH_MACAddressConfig+0x68>)
 800253e:	4413      	add	r3, r2
 8002540:	461a      	mov	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3303      	adds	r3, #3
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	061a      	lsls	r2, r3, #24
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3302      	adds	r3, #2
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	041b      	lsls	r3, r3, #16
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3301      	adds	r3, #1
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	4313      	orrs	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <ETH_MACAddressConfig+0x6c>)
 800256e:	4413      	add	r3, r2
 8002570:	461a      	mov	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6013      	str	r3, [r2, #0]
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40028040 	.word	0x40028040
 8002588:	40028044 	.word	0x40028044

0800258c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e03e      	b.n	8002618 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68d9      	ldr	r1, [r3, #12]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2200      	movs	r2, #0
 80025b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	3206      	adds	r2, #6
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d80c      	bhi.n	80025fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68d9      	ldr	r1, [r3, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	e004      	b.n	8002606 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3301      	adds	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d9bd      	bls.n	800259a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002630:	611a      	str	r2, [r3, #16]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e046      	b.n	80026da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6919      	ldr	r1, [r3, #16]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2200      	movs	r2, #0
 8002668:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002688:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002690:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	3212      	adds	r2, #18
 80026a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d80c      	bhi.n	80026ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6919      	ldr	r1, [r3, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	461a      	mov	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	e004      	b.n	80026d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d9b5      	bls.n	800264c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270a:	60da      	str	r2, [r3, #12]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	e177      	b.n	8002a24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	f040 8166 	bne.w	8002a1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d005      	beq.n	800276a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002766:	2b02      	cmp	r3, #2
 8002768:	d130      	bne.n	80027cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	2203      	movs	r2, #3
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 0201 	and.w	r2, r3, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d017      	beq.n	8002808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d123      	bne.n	800285c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	08da      	lsrs	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3208      	adds	r2, #8
 800281c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	220f      	movs	r2, #15
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	08da      	lsrs	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3208      	adds	r2, #8
 8002856:	69b9      	ldr	r1, [r7, #24]
 8002858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80c0 	beq.w	8002a1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_GPIO_Init+0x324>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a65      	ldr	r2, [pc, #404]	; (8002a3c <HAL_GPIO_Init+0x324>)
 80028a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b63      	ldr	r3, [pc, #396]	; (8002a3c <HAL_GPIO_Init+0x324>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ba:	4a61      	ldr	r2, [pc, #388]	; (8002a40 <HAL_GPIO_Init+0x328>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a58      	ldr	r2, [pc, #352]	; (8002a44 <HAL_GPIO_Init+0x32c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d037      	beq.n	8002956 <HAL_GPIO_Init+0x23e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <HAL_GPIO_Init+0x330>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d031      	beq.n	8002952 <HAL_GPIO_Init+0x23a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a56      	ldr	r2, [pc, #344]	; (8002a4c <HAL_GPIO_Init+0x334>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02b      	beq.n	800294e <HAL_GPIO_Init+0x236>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a55      	ldr	r2, [pc, #340]	; (8002a50 <HAL_GPIO_Init+0x338>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d025      	beq.n	800294a <HAL_GPIO_Init+0x232>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a54      	ldr	r2, [pc, #336]	; (8002a54 <HAL_GPIO_Init+0x33c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <HAL_GPIO_Init+0x22e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a53      	ldr	r2, [pc, #332]	; (8002a58 <HAL_GPIO_Init+0x340>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d019      	beq.n	8002942 <HAL_GPIO_Init+0x22a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <HAL_GPIO_Init+0x344>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0x226>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a51      	ldr	r2, [pc, #324]	; (8002a60 <HAL_GPIO_Init+0x348>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00d      	beq.n	800293a <HAL_GPIO_Init+0x222>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a50      	ldr	r2, [pc, #320]	; (8002a64 <HAL_GPIO_Init+0x34c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <HAL_GPIO_Init+0x21e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4f      	ldr	r2, [pc, #316]	; (8002a68 <HAL_GPIO_Init+0x350>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_GPIO_Init+0x21a>
 800292e:	2309      	movs	r3, #9
 8002930:	e012      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002932:	230a      	movs	r3, #10
 8002934:	e010      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002936:	2308      	movs	r3, #8
 8002938:	e00e      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800293a:	2307      	movs	r3, #7
 800293c:	e00c      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800293e:	2306      	movs	r3, #6
 8002940:	e00a      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002942:	2305      	movs	r3, #5
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002946:	2304      	movs	r3, #4
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002968:	4935      	ldr	r1, [pc, #212]	; (8002a40 <HAL_GPIO_Init+0x328>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_GPIO_Init+0x354>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299a:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <HAL_GPIO_Init+0x354>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a0:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c4:	4a29      	ldr	r2, [pc, #164]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ca:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ee:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_GPIO_Init+0x354>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f ae84 	bls.w	8002734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40021400 	.word	0x40021400
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40021c00 	.word	0x40021c00
 8002a64:	40022000 	.word	0x40022000
 8002a68:	40022400 	.word	0x40022400
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fd78 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40013c00 	.word	0x40013c00

08002ad4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad6:	b08f      	sub	sp, #60	; 0x3c
 8002ad8:	af0a      	add	r7, sp, #40	; 0x28
 8002ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e10f      	b.n	8002d06 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7fe f9f5 	bl	8000ef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 fe00 	bl	800472a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	687e      	ldr	r6, [r7, #4]
 8002b32:	466d      	mov	r5, sp
 8002b34:	f106 0410 	add.w	r4, r6, #16
 8002b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b44:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b48:	1d33      	adds	r3, r6, #4
 8002b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b4c:	6838      	ldr	r0, [r7, #0]
 8002b4e:	f001 fd8b 	bl	8004668 <USB_CoreInit>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d0      	b.n	8002d06 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fdee 	bl	800474c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e04a      	b.n	8002c0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	333d      	adds	r3, #61	; 0x3d
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	333c      	adds	r3, #60	; 0x3c
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	b298      	uxth	r0, r3
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3344      	adds	r3, #68	; 0x44
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3340      	adds	r3, #64	; 0x40
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3348      	adds	r3, #72	; 0x48
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	334c      	adds	r3, #76	; 0x4c
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3354      	adds	r3, #84	; 0x54
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d3af      	bcc.n	8002b76 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	e044      	b.n	8002ca6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d3b5      	bcc.n	8002c1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	687e      	ldr	r6, [r7, #4]
 8002cb8:	466d      	mov	r5, sp
 8002cba:	f106 0410 	add.w	r4, r6, #16
 8002cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cca:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cce:	1d33      	adds	r3, r6, #4
 8002cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd2:	6838      	ldr	r0, [r7, #0]
 8002cd4:	f001 fd86 	bl	80047e4 <USB_DevInit>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00d      	b.n	8002d06 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 ff51 	bl	8004ba6 <USB_DevDisconnect>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e267      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d075      	beq.n	8002e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2e:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d00c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d112      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d46:	4b82      	ldr	r3, [pc, #520]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	4b7e      	ldr	r3, [pc, #504]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d05b      	beq.n	8002e18 <HAL_RCC_OscConfig+0x108>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d157      	bne.n	8002e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e242      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x74>
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a75      	ldr	r2, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x98>
 8002d8e:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6f      	ldr	r2, [pc, #444]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6c      	ldr	r2, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002da8:	4b69      	ldr	r3, [pc, #420]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a68      	ldr	r2, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fa62 	bl	8001290 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fa5e 	bl	8001290 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e207      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xc0>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fa4e 	bl	8001290 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe fa4a 	bl	8001290 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1f3      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b51      	ldr	r3, [pc, #324]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0xe8>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e32:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d11c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3e:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x152>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1c7      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4937      	ldr	r1, [pc, #220]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e03a      	b.n	8002eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_RCC_OscConfig+0x244>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe fa03 	bl	8001290 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fe f9ff 	bl	8001290 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1a8      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4925      	ldr	r1, [pc, #148]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_OscConfig+0x244>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f9e2 	bl	8001290 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe f9de 	bl	8001290 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e187      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d036      	beq.n	8002f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_RCC_OscConfig+0x248>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe f9c2 	bl	8001290 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f10:	f7fe f9be 	bl	8001290 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e167      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x200>
 8002f2e:	e01b      	b.n	8002f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_OscConfig+0x248>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe f9ab 	bl	8001290 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	e00e      	b.n	8002f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe f9a7 	bl	8001290 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d907      	bls.n	8002f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e150      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	42470000 	.word	0x42470000
 8002f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5c:	4b88      	ldr	r3, [pc, #544]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ea      	bne.n	8002f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8097 	beq.w	80030a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	4b81      	ldr	r3, [pc, #516]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	4b7d      	ldr	r3, [pc, #500]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a7c      	ldr	r2, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa6:	4b77      	ldr	r3, [pc, #476]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d118      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a73      	ldr	r2, [pc, #460]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe f967 	bl	8001290 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe f963 	bl	8001290 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e10c      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x2ea>
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a63      	ldr	r2, [pc, #396]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	e01c      	b.n	8003034 <HAL_RCC_OscConfig+0x324>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x30c>
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0x324>
 800301c:	4b58      	ldr	r3, [pc, #352]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	4b55      	ldr	r3, [pc, #340]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a54      	ldr	r2, [pc, #336]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe f928 	bl	8001290 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe f924 	bl	8001290 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e0cb      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ee      	beq.n	8003044 <HAL_RCC_OscConfig+0x334>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003068:	f7fe f912 	bl	8001290 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fe f90e 	bl	8001290 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0b5      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003086:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1ee      	bne.n	8003070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003098:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	4a38      	ldr	r2, [pc, #224]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800309e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a1 	beq.w	80031f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d05c      	beq.n	8003174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d141      	bne.n	8003146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe f8e2 	bl	8001290 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe f8de 	bl	8001290 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e087      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	3b01      	subs	r3, #1
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	491b      	ldr	r1, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe f8b7 	bl	8001290 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003126:	f7fe f8b3 	bl	8001290 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e05c      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x416>
 8003144:	e054      	b.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe f8a0 	bl	8001290 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe f89c 	bl	8001290 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e045      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x444>
 8003172:	e03d      	b.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e038      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
 8003180:	40023800 	.word	0x40023800
 8003184:	40007000 	.word	0x40007000
 8003188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x4ec>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d028      	beq.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d121      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d11a      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d111      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0cc      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d90c      	bls.n	800323c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0b8      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003254:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800325e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b50      	ldr	r3, [pc, #320]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	494d      	ldr	r1, [pc, #308]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d044      	beq.n	8003320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d119      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d003      	beq.n	80032be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ce:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e067      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4934      	ldr	r1, [pc, #208]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f0:	f7fd ffce 	bl	8001290 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7fd ffca 	bl	8001290 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 020c 	and.w	r2, r3, #12
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	429a      	cmp	r2, r3
 800331e:	d1eb      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d20c      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e032      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4916      	ldr	r1, [pc, #88]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	490e      	ldr	r1, [pc, #56]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003386:	f000 f821 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	490a      	ldr	r1, [pc, #40]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	5ccb      	ldrb	r3, [r1, r3]
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd ff2e 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023c00 	.word	0x40023c00
 80033bc:	40023800 	.word	0x40023800
 80033c0:	08005b0c 	.word	0x08005b0c
 80033c4:	20000000 	.word	0x20000000
 80033c8:	20000004 	.word	0x20000004

080033cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d0:	b094      	sub	sp, #80	; 0x50
 80033d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	647b      	str	r3, [r7, #68]	; 0x44
 80033d8:	2300      	movs	r3, #0
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033dc:	2300      	movs	r3, #0
 80033de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033e4:	4b79      	ldr	r3, [pc, #484]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d00d      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x40>
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	f200 80e1 	bhi.w	80035b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x34>
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x3a>
 80033fe:	e0db      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b73      	ldr	r3, [pc, #460]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003404:	e0db      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003406:	4b73      	ldr	r3, [pc, #460]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800340a:	e0d8      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800340c:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003414:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003416:	4b6d      	ldr	r3, [pc, #436]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d063      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003422:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	2200      	movs	r2, #0
 800342a:	63bb      	str	r3, [r7, #56]	; 0x38
 800342c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
 8003436:	2300      	movs	r3, #0
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
 800343a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800343e:	4622      	mov	r2, r4
 8003440:	462b      	mov	r3, r5
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	0159      	lsls	r1, r3, #5
 800344c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003450:	0150      	lsls	r0, r2, #5
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4621      	mov	r1, r4
 8003458:	1a51      	subs	r1, r2, r1
 800345a:	6139      	str	r1, [r7, #16]
 800345c:	4629      	mov	r1, r5
 800345e:	eb63 0301 	sbc.w	r3, r3, r1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003470:	4659      	mov	r1, fp
 8003472:	018b      	lsls	r3, r1, #6
 8003474:	4651      	mov	r1, sl
 8003476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800347a:	4651      	mov	r1, sl
 800347c:	018a      	lsls	r2, r1, #6
 800347e:	4651      	mov	r1, sl
 8003480:	ebb2 0801 	subs.w	r8, r2, r1
 8003484:	4659      	mov	r1, fp
 8003486:	eb63 0901 	sbc.w	r9, r3, r1
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800349a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800349e:	4690      	mov	r8, r2
 80034a0:	4699      	mov	r9, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	eb18 0303 	adds.w	r3, r8, r3
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	462b      	mov	r3, r5
 80034ac:	eb49 0303 	adc.w	r3, r9, r3
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034be:	4629      	mov	r1, r5
 80034c0:	024b      	lsls	r3, r1, #9
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c8:	4621      	mov	r1, r4
 80034ca:	024a      	lsls	r2, r1, #9
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d2:	2200      	movs	r2, #0
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034dc:	f7fc fed8 	bl	8000290 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e8:	e058      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b38      	ldr	r3, [pc, #224]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	2200      	movs	r2, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	4611      	mov	r1, r2
 80034f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034fa:	623b      	str	r3, [r7, #32]
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	f04f 0000 	mov.w	r0, #0
 800350c:	f04f 0100 	mov.w	r1, #0
 8003510:	0159      	lsls	r1, r3, #5
 8003512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003516:	0150      	lsls	r0, r2, #5
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4641      	mov	r1, r8
 800351e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003522:	4649      	mov	r1, r9
 8003524:	eb63 0b01 	sbc.w	fp, r3, r1
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800353c:	ebb2 040a 	subs.w	r4, r2, sl
 8003540:	eb63 050b 	sbc.w	r5, r3, fp
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	00eb      	lsls	r3, r5, #3
 800354e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003552:	00e2      	lsls	r2, r4, #3
 8003554:	4614      	mov	r4, r2
 8003556:	461d      	mov	r5, r3
 8003558:	4643      	mov	r3, r8
 800355a:	18e3      	adds	r3, r4, r3
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	464b      	mov	r3, r9
 8003560:	eb45 0303 	adc.w	r3, r5, r3
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003572:	4629      	mov	r1, r5
 8003574:	028b      	lsls	r3, r1, #10
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800357c:	4621      	mov	r1, r4
 800357e:	028a      	lsls	r2, r1, #10
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003586:	2200      	movs	r2, #0
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	61fa      	str	r2, [r7, #28]
 800358c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003590:	f7fc fe7e 	bl	8000290 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	3301      	adds	r3, #1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3750      	adds	r7, #80	; 0x50
 80035c4:	46bd      	mov	sp, r7
 80035c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	007a1200 	.word	0x007a1200

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_GetHCLKFreq+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000000 	.word	0x20000000

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035f4:	f7ff fff0 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	08005b1c 	.word	0x08005b1c

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800361c:	f7ff ffdc 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	08005b1c 	.word	0x08005b1c

08003640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e03f      	b.n	80036d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fbf2 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fd7b 	bl	8004180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b08a      	sub	sp, #40	; 0x28
 80036de:	af02      	add	r7, sp, #8
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d17c      	bne.n	80037f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_UART_Transmit+0x2c>
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e075      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UART_Transmit+0x3e>
 8003714:	2302      	movs	r3, #2
 8003716:	e06e      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2221      	movs	r2, #33	; 0x21
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372e:	f7fd fdaf 	bl	8001290 <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d108      	bne.n	800375c <HAL_UART_Transmit+0x82>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e003      	b.n	8003764 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800376c:	e02a      	b.n	80037c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 faf9 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e036      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3302      	adds	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	e007      	b.n	80037b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1cf      	bne.n	800376e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2140      	movs	r1, #64	; 0x40
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fac9 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e006      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b0ba      	sub	sp, #232	; 0xe8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800383e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_UART_IRQHandler+0x66>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fbd3 	bl	800400a <UART_Receive_IT>
      return;
 8003864:	e256      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80de 	beq.w	8003a2c <HAL_UART_IRQHandler+0x22c>
 8003870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003880:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80d1 	beq.w	8003a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
 80038ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0202 	orr.w	r2, r3, #2
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_UART_IRQHandler+0xf6>
 80038de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d011      	beq.n	8003926 <HAL_UART_IRQHandler+0x126>
 8003902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800390e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0208 	orr.w	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 81ed 	beq.w	8003d0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_UART_IRQHandler+0x14e>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fb5e 	bl	800400a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_UART_IRQHandler+0x17a>
 8003972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d04f      	beq.n	8003a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa66 	bl	8003e4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d141      	bne.n	8003a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3314      	adds	r3, #20
 8003994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3314      	adds	r3, #20
 80039b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1d9      	bne.n	800398e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d013      	beq.n	8003a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	4a7d      	ldr	r2, [pc, #500]	; (8003bdc <HAL_UART_IRQHandler+0x3dc>)
 80039e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fb47 	bl	8002082 <HAL_DMA_Abort_IT>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a04:	4610      	mov	r0, r2
 8003a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e00e      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f99a 	bl	8003d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	e00a      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f996 	bl	8003d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e006      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f992 	bl	8003d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a26:	e170      	b.n	8003d0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	bf00      	nop
    return;
 8003a2a:	e16e      	b.n	8003d0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f040 814a 	bne.w	8003cca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8143 	beq.w	8003cca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 813c 	beq.w	8003cca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	f040 80b4 	bne.w	8003be0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8140 	beq.w	8003d0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a96:	429a      	cmp	r2, r3
 8003a98:	f080 8139 	bcs.w	8003d0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aae:	f000 8088 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1d9      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3314      	adds	r3, #20
 8003b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e1      	bne.n	8003afe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e3      	bne.n	8003b3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ba6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e3      	bne.n	8003b80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe f9f0 	bl	8001fa2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f8c0 	bl	8003d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bd8:	e099      	b.n	8003d0e <HAL_UART_IRQHandler+0x50e>
 8003bda:	bf00      	nop
 8003bdc:	08003f13 	.word	0x08003f13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 808b 	beq.w	8003d12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8086 	beq.w	8003d12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c2a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e3      	bne.n	8003c06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3314      	adds	r3, #20
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c62:	633a      	str	r2, [r7, #48]	; 0x30
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e3      	bne.n	8003c3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0310 	bic.w	r3, r3, #16
 8003c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ca8:	61fa      	str	r2, [r7, #28]
 8003caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	69b9      	ldr	r1, [r7, #24]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e3      	bne.n	8003c84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f848 	bl	8003d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cc8:	e023      	b.n	8003d12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_UART_IRQHandler+0x4ea>
 8003cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f929 	bl	8003f3a <UART_Transmit_IT>
    return;
 8003ce8:	e014      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00e      	beq.n	8003d14 <HAL_UART_IRQHandler+0x514>
 8003cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f969 	bl	8003fda <UART_EndTransmit_IT>
    return;
 8003d08:	e004      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
    return;
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
      return;
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
      return;
 8003d12:	bf00      	nop
  }
}
 8003d14:	37e8      	adds	r7, #232	; 0xe8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop

08003d1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b090      	sub	sp, #64	; 0x40
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d80:	e050      	b.n	8003e24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d04c      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d90:	f7fd fa7e 	bl	8001290 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d241      	bcs.n	8003e24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc0:	637a      	str	r2, [r7, #52]	; 0x34
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	613b      	str	r3, [r7, #16]
   return(result);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df4:	623a      	str	r2, [r7, #32]
 8003df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	69f9      	ldr	r1, [r7, #28]
 8003dfa:	6a3a      	ldr	r2, [r7, #32]
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e5      	bne.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e00f      	b.n	8003e44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d09f      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3740      	adds	r7, #64	; 0x40
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b095      	sub	sp, #84	; 0x54
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e74:	643a      	str	r2, [r7, #64]	; 0x40
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e5      	bne.n	8003e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d119      	bne.n	8003ef8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0310 	bic.w	r3, r3, #16
 8003eda:	647b      	str	r3, [r7, #68]	; 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ee4:	61ba      	str	r2, [r7, #24]
 8003ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6979      	ldr	r1, [r7, #20]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f06:	bf00      	nop
 8003f08:	3754      	adds	r7, #84	; 0x54
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff ff09 	bl	8003d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b21      	cmp	r3, #33	; 0x21
 8003f4c:	d13e      	bne.n	8003fcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f56:	d114      	bne.n	8003f82 <UART_Transmit_IT+0x48>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d110      	bne.n	8003f82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	1c9a      	adds	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	621a      	str	r2, [r3, #32]
 8003f80:	e008      	b.n	8003f94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	1c59      	adds	r1, r3, #1
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6211      	str	r1, [r2, #32]
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10f      	bne.n	8003fc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fe8e 	bl	8003d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b08c      	sub	sp, #48	; 0x30
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b22      	cmp	r3, #34	; 0x22
 800401c:	f040 80ab 	bne.w	8004176 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004028:	d117      	bne.n	800405a <UART_Receive_IT+0x50>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d113      	bne.n	800405a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	b29b      	uxth	r3, r3
 8004044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004048:	b29a      	uxth	r2, r3
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
 8004058:	e026      	b.n	80040a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	d007      	beq.n	800407e <UART_Receive_IT+0x74>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <UART_Receive_IT+0x82>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	e008      	b.n	800409e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004098:	b2da      	uxtb	r2, r3
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4619      	mov	r1, r3
 80040b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d15a      	bne.n	8004172 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0220 	bic.w	r2, r2, #32
 80040ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d135      	bne.n	8004168 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	613b      	str	r3, [r7, #16]
   return(result);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f023 0310 	bic.w	r3, r3, #16
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004122:	623a      	str	r2, [r7, #32]
 8004124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	69f9      	ldr	r1, [r7, #28]
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b10      	cmp	r3, #16
 8004142:	d10a      	bne.n	800415a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff fdf9 	bl	8003d58 <HAL_UARTEx_RxEventCallback>
 8004166:	e002      	b.n	800416e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fde1 	bl	8003d30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e002      	b.n	8004178 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3730      	adds	r7, #48	; 0x30
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b0c0      	sub	sp, #256	; 0x100
 8004186:	af00      	add	r7, sp, #0
 8004188:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	68d9      	ldr	r1, [r3, #12]
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	ea40 0301 	orr.w	r3, r0, r1
 80041a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	431a      	orrs	r2, r3
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041d8:	f021 010c 	bic.w	r1, r1, #12
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041e6:	430b      	orrs	r3, r1
 80041e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	6999      	ldr	r1, [r3, #24]
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	ea40 0301 	orr.w	r3, r0, r1
 8004206:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b8f      	ldr	r3, [pc, #572]	; (800444c <UART_SetConfig+0x2cc>)
 8004210:	429a      	cmp	r2, r3
 8004212:	d005      	beq.n	8004220 <UART_SetConfig+0xa0>
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b8d      	ldr	r3, [pc, #564]	; (8004450 <UART_SetConfig+0x2d0>)
 800421c:	429a      	cmp	r2, r3
 800421e:	d104      	bne.n	800422a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004220:	f7ff f9fa 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8004224:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004228:	e003      	b.n	8004232 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800422a:	f7ff f9e1 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 800422e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423c:	f040 810c 	bne.w	8004458 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004244:	2200      	movs	r2, #0
 8004246:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800424a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800424e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004252:	4622      	mov	r2, r4
 8004254:	462b      	mov	r3, r5
 8004256:	1891      	adds	r1, r2, r2
 8004258:	65b9      	str	r1, [r7, #88]	; 0x58
 800425a:	415b      	adcs	r3, r3
 800425c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800425e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004262:	4621      	mov	r1, r4
 8004264:	eb12 0801 	adds.w	r8, r2, r1
 8004268:	4629      	mov	r1, r5
 800426a:	eb43 0901 	adc.w	r9, r3, r1
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800427a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800427e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004282:	4690      	mov	r8, r2
 8004284:	4699      	mov	r9, r3
 8004286:	4623      	mov	r3, r4
 8004288:	eb18 0303 	adds.w	r3, r8, r3
 800428c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004290:	462b      	mov	r3, r5
 8004292:	eb49 0303 	adc.w	r3, r9, r3
 8004296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042ae:	460b      	mov	r3, r1
 80042b0:	18db      	adds	r3, r3, r3
 80042b2:	653b      	str	r3, [r7, #80]	; 0x50
 80042b4:	4613      	mov	r3, r2
 80042b6:	eb42 0303 	adc.w	r3, r2, r3
 80042ba:	657b      	str	r3, [r7, #84]	; 0x54
 80042bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042c4:	f7fb ffe4 	bl	8000290 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4b61      	ldr	r3, [pc, #388]	; (8004454 <UART_SetConfig+0x2d4>)
 80042ce:	fba3 2302 	umull	r2, r3, r3, r2
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	011c      	lsls	r4, r3, #4
 80042d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042e8:	4642      	mov	r2, r8
 80042ea:	464b      	mov	r3, r9
 80042ec:	1891      	adds	r1, r2, r2
 80042ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80042f0:	415b      	adcs	r3, r3
 80042f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042f8:	4641      	mov	r1, r8
 80042fa:	eb12 0a01 	adds.w	sl, r2, r1
 80042fe:	4649      	mov	r1, r9
 8004300:	eb43 0b01 	adc.w	fp, r3, r1
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004310:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004318:	4692      	mov	sl, r2
 800431a:	469b      	mov	fp, r3
 800431c:	4643      	mov	r3, r8
 800431e:	eb1a 0303 	adds.w	r3, sl, r3
 8004322:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004326:	464b      	mov	r3, r9
 8004328:	eb4b 0303 	adc.w	r3, fp, r3
 800432c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800433c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004340:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004344:	460b      	mov	r3, r1
 8004346:	18db      	adds	r3, r3, r3
 8004348:	643b      	str	r3, [r7, #64]	; 0x40
 800434a:	4613      	mov	r3, r2
 800434c:	eb42 0303 	adc.w	r3, r2, r3
 8004350:	647b      	str	r3, [r7, #68]	; 0x44
 8004352:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004356:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800435a:	f7fb ff99 	bl	8000290 <__aeabi_uldivmod>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4611      	mov	r1, r2
 8004364:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <UART_SetConfig+0x2d4>)
 8004366:	fba3 2301 	umull	r2, r3, r3, r1
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2264      	movs	r2, #100	; 0x64
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	1acb      	subs	r3, r1, r3
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800437a:	4b36      	ldr	r3, [pc, #216]	; (8004454 <UART_SetConfig+0x2d4>)
 800437c:	fba3 2302 	umull	r2, r3, r3, r2
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004388:	441c      	add	r4, r3
 800438a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004394:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004398:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80043a4:	415b      	adcs	r3, r3
 80043a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043ac:	4641      	mov	r1, r8
 80043ae:	1851      	adds	r1, r2, r1
 80043b0:	6339      	str	r1, [r7, #48]	; 0x30
 80043b2:	4649      	mov	r1, r9
 80043b4:	414b      	adcs	r3, r1
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043c4:	4659      	mov	r1, fp
 80043c6:	00cb      	lsls	r3, r1, #3
 80043c8:	4651      	mov	r1, sl
 80043ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ce:	4651      	mov	r1, sl
 80043d0:	00ca      	lsls	r2, r1, #3
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	4642      	mov	r2, r8
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043e0:	464b      	mov	r3, r9
 80043e2:	460a      	mov	r2, r1
 80043e4:	eb42 0303 	adc.w	r3, r2, r3
 80043e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004400:	460b      	mov	r3, r1
 8004402:	18db      	adds	r3, r3, r3
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
 8004406:	4613      	mov	r3, r2
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004412:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004416:	f7fb ff3b 	bl	8000290 <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <UART_SetConfig+0x2d4>)
 8004420:	fba3 1302 	umull	r1, r3, r3, r2
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	2164      	movs	r1, #100	; 0x64
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	3332      	adds	r3, #50	; 0x32
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <UART_SetConfig+0x2d4>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	f003 0207 	and.w	r2, r3, #7
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4422      	add	r2, r4
 8004446:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004448:	e106      	b.n	8004658 <UART_SetConfig+0x4d8>
 800444a:	bf00      	nop
 800444c:	40011000 	.word	0x40011000
 8004450:	40011400 	.word	0x40011400
 8004454:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800445c:	2200      	movs	r2, #0
 800445e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004462:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004466:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800446a:	4642      	mov	r2, r8
 800446c:	464b      	mov	r3, r9
 800446e:	1891      	adds	r1, r2, r2
 8004470:	6239      	str	r1, [r7, #32]
 8004472:	415b      	adcs	r3, r3
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800447a:	4641      	mov	r1, r8
 800447c:	1854      	adds	r4, r2, r1
 800447e:	4649      	mov	r1, r9
 8004480:	eb43 0501 	adc.w	r5, r3, r1
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	00eb      	lsls	r3, r5, #3
 800448e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004492:	00e2      	lsls	r2, r4, #3
 8004494:	4614      	mov	r4, r2
 8004496:	461d      	mov	r5, r3
 8004498:	4643      	mov	r3, r8
 800449a:	18e3      	adds	r3, r4, r3
 800449c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044a0:	464b      	mov	r3, r9
 80044a2:	eb45 0303 	adc.w	r3, r5, r3
 80044a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044c6:	4629      	mov	r1, r5
 80044c8:	008b      	lsls	r3, r1, #2
 80044ca:	4621      	mov	r1, r4
 80044cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d0:	4621      	mov	r1, r4
 80044d2:	008a      	lsls	r2, r1, #2
 80044d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044d8:	f7fb feda 	bl	8000290 <__aeabi_uldivmod>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4b60      	ldr	r3, [pc, #384]	; (8004664 <UART_SetConfig+0x4e4>)
 80044e2:	fba3 2302 	umull	r2, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	011c      	lsls	r4, r3, #4
 80044ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	1891      	adds	r1, r2, r2
 8004502:	61b9      	str	r1, [r7, #24]
 8004504:	415b      	adcs	r3, r3
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800450c:	4641      	mov	r1, r8
 800450e:	1851      	adds	r1, r2, r1
 8004510:	6139      	str	r1, [r7, #16]
 8004512:	4649      	mov	r1, r9
 8004514:	414b      	adcs	r3, r1
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004524:	4659      	mov	r1, fp
 8004526:	00cb      	lsls	r3, r1, #3
 8004528:	4651      	mov	r1, sl
 800452a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800452e:	4651      	mov	r1, sl
 8004530:	00ca      	lsls	r2, r1, #3
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	4603      	mov	r3, r0
 8004538:	4642      	mov	r2, r8
 800453a:	189b      	adds	r3, r3, r2
 800453c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004540:	464b      	mov	r3, r9
 8004542:	460a      	mov	r2, r1
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	67bb      	str	r3, [r7, #120]	; 0x78
 8004556:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004564:	4649      	mov	r1, r9
 8004566:	008b      	lsls	r3, r1, #2
 8004568:	4641      	mov	r1, r8
 800456a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800456e:	4641      	mov	r1, r8
 8004570:	008a      	lsls	r2, r1, #2
 8004572:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004576:	f7fb fe8b 	bl	8000290 <__aeabi_uldivmod>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4611      	mov	r1, r2
 8004580:	4b38      	ldr	r3, [pc, #224]	; (8004664 <UART_SetConfig+0x4e4>)
 8004582:	fba3 2301 	umull	r2, r3, r3, r1
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	2264      	movs	r2, #100	; 0x64
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	1acb      	subs	r3, r1, r3
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	3332      	adds	r3, #50	; 0x32
 8004594:	4a33      	ldr	r2, [pc, #204]	; (8004664 <UART_SetConfig+0x4e4>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a0:	441c      	add	r4, r3
 80045a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a6:	2200      	movs	r2, #0
 80045a8:	673b      	str	r3, [r7, #112]	; 0x70
 80045aa:	677a      	str	r2, [r7, #116]	; 0x74
 80045ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	415b      	adcs	r3, r3
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c0:	4641      	mov	r1, r8
 80045c2:	1851      	adds	r1, r2, r1
 80045c4:	6039      	str	r1, [r7, #0]
 80045c6:	4649      	mov	r1, r9
 80045c8:	414b      	adcs	r3, r1
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045d8:	4659      	mov	r1, fp
 80045da:	00cb      	lsls	r3, r1, #3
 80045dc:	4651      	mov	r1, sl
 80045de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e2:	4651      	mov	r1, sl
 80045e4:	00ca      	lsls	r2, r1, #3
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	4642      	mov	r2, r8
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045f2:	464b      	mov	r3, r9
 80045f4:	460a      	mov	r2, r1
 80045f6:	eb42 0303 	adc.w	r3, r2, r3
 80045fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	663b      	str	r3, [r7, #96]	; 0x60
 8004606:	667a      	str	r2, [r7, #100]	; 0x64
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004614:	4649      	mov	r1, r9
 8004616:	008b      	lsls	r3, r1, #2
 8004618:	4641      	mov	r1, r8
 800461a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800461e:	4641      	mov	r1, r8
 8004620:	008a      	lsls	r2, r1, #2
 8004622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004626:	f7fb fe33 	bl	8000290 <__aeabi_uldivmod>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <UART_SetConfig+0x4e4>)
 8004630:	fba3 1302 	umull	r1, r3, r3, r2
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	2164      	movs	r1, #100	; 0x64
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	3332      	adds	r3, #50	; 0x32
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <UART_SetConfig+0x4e4>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	f003 020f 	and.w	r2, r3, #15
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4422      	add	r2, r4
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800465e:	46bd      	mov	sp, r7
 8004660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004664:	51eb851f 	.word	0x51eb851f

08004668 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004668:	b084      	sub	sp, #16
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	f107 001c 	add.w	r0, r7, #28
 8004676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	2b01      	cmp	r3, #1
 800467e:	d122      	bne.n	80046c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 faa2 	bl	8004c04 <USB_CoreReset>
 80046c0:	4603      	mov	r3, r0
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e01a      	b.n	80046fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fa96 	bl	8004c04 <USB_CoreReset>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
 80046ee:	e005      	b.n	80046fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10b      	bne.n	800471a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f043 0206 	orr.w	r2, r3, #6
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004726:	b004      	add	sp, #16
 8004728:	4770      	bx	lr

0800472a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 0201 	bic.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d115      	bne.n	800479a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800477a:	2001      	movs	r0, #1
 800477c:	f7fc fd94 	bl	80012a8 <HAL_Delay>
      ms++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa2e 	bl	8004be8 <USB_GetMode>
 800478c:	4603      	mov	r3, r0
 800478e:	2b01      	cmp	r3, #1
 8004790:	d01e      	beq.n	80047d0 <USB_SetCurrentMode+0x84>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b31      	cmp	r3, #49	; 0x31
 8004796:	d9f0      	bls.n	800477a <USB_SetCurrentMode+0x2e>
 8004798:	e01a      	b.n	80047d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d115      	bne.n	80047cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047ac:	2001      	movs	r0, #1
 80047ae:	f7fc fd7b 	bl	80012a8 <HAL_Delay>
      ms++;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3301      	adds	r3, #1
 80047b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fa15 	bl	8004be8 <USB_GetMode>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <USB_SetCurrentMode+0x84>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b31      	cmp	r3, #49	; 0x31
 80047c8:	d9f0      	bls.n	80047ac <USB_SetCurrentMode+0x60>
 80047ca:	e001      	b.n	80047d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e005      	b.n	80047dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b32      	cmp	r3, #50	; 0x32
 80047d4:	d101      	bne.n	80047da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047e4:	b084      	sub	sp, #16
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	e009      	b.n	8004818 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3340      	adds	r3, #64	; 0x40
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	2200      	movs	r2, #0
 8004810:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	3301      	adds	r3, #1
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b0e      	cmp	r3, #14
 800481c:	d9f2      	bls.n	8004804 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800481e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d11c      	bne.n	800485e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004832:	f043 0302 	orr.w	r3, r3, #2
 8004836:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
 800485c:	e00b      	b.n	8004876 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800487c:	461a      	mov	r2, r3
 800487e:	2300      	movs	r3, #0
 8004880:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	4619      	mov	r1, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	461a      	mov	r2, r3
 8004892:	680b      	ldr	r3, [r1, #0]
 8004894:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10c      	bne.n	80048b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048a2:	2100      	movs	r1, #0
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f965 	bl	8004b74 <USB_SetDevSpeed>
 80048aa:	e008      	b.n	80048be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048ac:	2101      	movs	r1, #1
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f960 	bl	8004b74 <USB_SetDevSpeed>
 80048b4:	e003      	b.n	80048be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048b6:	2103      	movs	r1, #3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f95b 	bl	8004b74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048be:	2110      	movs	r1, #16
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8f3 	bl	8004aac <USB_FlushTxFifo>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f91f 	bl	8004b14 <USB_FlushRxFifo>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e6:	461a      	mov	r2, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f2:	461a      	mov	r2, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e043      	b.n	8004992 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800491c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004920:	d118      	bne.n	8004954 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	461a      	mov	r2, r3
 8004936:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e013      	b.n	8004966 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494a:	461a      	mov	r2, r3
 800494c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e008      	b.n	8004966 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	461a      	mov	r2, r3
 8004962:	2300      	movs	r3, #0
 8004964:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004972:	461a      	mov	r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800498a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	3301      	adds	r3, #1
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	d3b7      	bcc.n	800490a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e043      	b.n	8004a28 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b6:	d118      	bne.n	80049ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e013      	b.n	80049fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	461a      	mov	r2, r3
 80049e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e008      	b.n	80049fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	461a      	mov	r2, r3
 80049f8:	2300      	movs	r3, #0
 80049fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d3b7      	bcc.n	80049a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f043 0210 	orr.w	r2, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699a      	ldr	r2, [r3, #24]
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <USB_DevInit+0x2c4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f043 0208 	orr.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d107      	bne.n	8004a98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aa4:	b004      	add	sp, #16
 8004aa6:	4770      	bx	lr
 8004aa8:	803c3800 	.word	0x803c3800

08004aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3301      	adds	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <USB_FlushTxFifo+0x64>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d901      	bls.n	8004acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e01b      	b.n	8004b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	daf2      	bge.n	8004aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	019b      	lsls	r3, r3, #6
 8004adc:	f043 0220 	orr.w	r2, r3, #32
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <USB_FlushTxFifo+0x64>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e006      	b.n	8004b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d0f0      	beq.n	8004ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	00030d40 	.word	0x00030d40

08004b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a11      	ldr	r2, [pc, #68]	; (8004b70 <USB_FlushRxFifo+0x5c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e018      	b.n	8004b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	daf2      	bge.n	8004b20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2210      	movs	r2, #16
 8004b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <USB_FlushRxFifo+0x5c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e006      	b.n	8004b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d0f0      	beq.n	8004b44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	00030d40 	.word	0x00030d40

08004b74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bc0:	f023 0303 	bic.w	r3, r3, #3
 8004bc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3301      	adds	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <USB_CoreReset+0x64>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e01b      	b.n	8004c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	daf2      	bge.n	8004c10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <USB_CoreReset+0x64>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e006      	b.n	8004c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d0f0      	beq.n	8004c3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	00030d40 	.word	0x00030d40

08004c6c <std>:
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	4604      	mov	r4, r0
 8004c72:	e9c0 3300 	strd	r3, r3, [r0]
 8004c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c7a:	6083      	str	r3, [r0, #8]
 8004c7c:	8181      	strh	r1, [r0, #12]
 8004c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c80:	81c2      	strh	r2, [r0, #14]
 8004c82:	6183      	str	r3, [r0, #24]
 8004c84:	4619      	mov	r1, r3
 8004c86:	2208      	movs	r2, #8
 8004c88:	305c      	adds	r0, #92	; 0x5c
 8004c8a:	f000 f906 	bl	8004e9a <memset>
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <std+0x58>)
 8004c90:	6263      	str	r3, [r4, #36]	; 0x24
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <std+0x5c>)
 8004c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <std+0x60>)
 8004c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <std+0x64>)
 8004c9c:	6323      	str	r3, [r4, #48]	; 0x30
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <std+0x68>)
 8004ca0:	6224      	str	r4, [r4, #32]
 8004ca2:	429c      	cmp	r4, r3
 8004ca4:	d006      	beq.n	8004cb4 <std+0x48>
 8004ca6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004caa:	4294      	cmp	r4, r2
 8004cac:	d002      	beq.n	8004cb4 <std+0x48>
 8004cae:	33d0      	adds	r3, #208	; 0xd0
 8004cb0:	429c      	cmp	r4, r3
 8004cb2:	d105      	bne.n	8004cc0 <std+0x54>
 8004cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cbc:	f000 b966 	b.w	8004f8c <__retarget_lock_init_recursive>
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08004e15 	.word	0x08004e15
 8004cc8:	08004e37 	.word	0x08004e37
 8004ccc:	08004e6f 	.word	0x08004e6f
 8004cd0:	08004e93 	.word	0x08004e93
 8004cd4:	2000088c 	.word	0x2000088c

08004cd8 <stdio_exit_handler>:
 8004cd8:	4a02      	ldr	r2, [pc, #8]	; (8004ce4 <stdio_exit_handler+0xc>)
 8004cda:	4903      	ldr	r1, [pc, #12]	; (8004ce8 <stdio_exit_handler+0x10>)
 8004cdc:	4803      	ldr	r0, [pc, #12]	; (8004cec <stdio_exit_handler+0x14>)
 8004cde:	f000 b869 	b.w	8004db4 <_fwalk_sglue>
 8004ce2:	bf00      	nop
 8004ce4:	2000000c 	.word	0x2000000c
 8004ce8:	08005839 	.word	0x08005839
 8004cec:	20000018 	.word	0x20000018

08004cf0 <cleanup_stdio>:
 8004cf0:	6841      	ldr	r1, [r0, #4]
 8004cf2:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <cleanup_stdio+0x34>)
 8004cf4:	4299      	cmp	r1, r3
 8004cf6:	b510      	push	{r4, lr}
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	d001      	beq.n	8004d00 <cleanup_stdio+0x10>
 8004cfc:	f000 fd9c 	bl	8005838 <_fflush_r>
 8004d00:	68a1      	ldr	r1, [r4, #8]
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <cleanup_stdio+0x38>)
 8004d04:	4299      	cmp	r1, r3
 8004d06:	d002      	beq.n	8004d0e <cleanup_stdio+0x1e>
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 fd95 	bl	8005838 <_fflush_r>
 8004d0e:	68e1      	ldr	r1, [r4, #12]
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <cleanup_stdio+0x3c>)
 8004d12:	4299      	cmp	r1, r3
 8004d14:	d004      	beq.n	8004d20 <cleanup_stdio+0x30>
 8004d16:	4620      	mov	r0, r4
 8004d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d1c:	f000 bd8c 	b.w	8005838 <_fflush_r>
 8004d20:	bd10      	pop	{r4, pc}
 8004d22:	bf00      	nop
 8004d24:	2000088c 	.word	0x2000088c
 8004d28:	200008f4 	.word	0x200008f4
 8004d2c:	2000095c 	.word	0x2000095c

08004d30 <global_stdio_init.part.0>:
 8004d30:	b510      	push	{r4, lr}
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <global_stdio_init.part.0+0x30>)
 8004d34:	4c0b      	ldr	r4, [pc, #44]	; (8004d64 <global_stdio_init.part.0+0x34>)
 8004d36:	4a0c      	ldr	r2, [pc, #48]	; (8004d68 <global_stdio_init.part.0+0x38>)
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2104      	movs	r1, #4
 8004d40:	f7ff ff94 	bl	8004c6c <std>
 8004d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d48:	2201      	movs	r2, #1
 8004d4a:	2109      	movs	r1, #9
 8004d4c:	f7ff ff8e 	bl	8004c6c <std>
 8004d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d54:	2202      	movs	r2, #2
 8004d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d5a:	2112      	movs	r1, #18
 8004d5c:	f7ff bf86 	b.w	8004c6c <std>
 8004d60:	200009c4 	.word	0x200009c4
 8004d64:	2000088c 	.word	0x2000088c
 8004d68:	08004cd9 	.word	0x08004cd9

08004d6c <__sfp_lock_acquire>:
 8004d6c:	4801      	ldr	r0, [pc, #4]	; (8004d74 <__sfp_lock_acquire+0x8>)
 8004d6e:	f000 b90e 	b.w	8004f8e <__retarget_lock_acquire_recursive>
 8004d72:	bf00      	nop
 8004d74:	200009cd 	.word	0x200009cd

08004d78 <__sfp_lock_release>:
 8004d78:	4801      	ldr	r0, [pc, #4]	; (8004d80 <__sfp_lock_release+0x8>)
 8004d7a:	f000 b909 	b.w	8004f90 <__retarget_lock_release_recursive>
 8004d7e:	bf00      	nop
 8004d80:	200009cd 	.word	0x200009cd

08004d84 <__sinit>:
 8004d84:	b510      	push	{r4, lr}
 8004d86:	4604      	mov	r4, r0
 8004d88:	f7ff fff0 	bl	8004d6c <__sfp_lock_acquire>
 8004d8c:	6a23      	ldr	r3, [r4, #32]
 8004d8e:	b11b      	cbz	r3, 8004d98 <__sinit+0x14>
 8004d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d94:	f7ff bff0 	b.w	8004d78 <__sfp_lock_release>
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <__sinit+0x28>)
 8004d9a:	6223      	str	r3, [r4, #32]
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <__sinit+0x2c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f5      	bne.n	8004d90 <__sinit+0xc>
 8004da4:	f7ff ffc4 	bl	8004d30 <global_stdio_init.part.0>
 8004da8:	e7f2      	b.n	8004d90 <__sinit+0xc>
 8004daa:	bf00      	nop
 8004dac:	08004cf1 	.word	0x08004cf1
 8004db0:	200009c4 	.word	0x200009c4

08004db4 <_fwalk_sglue>:
 8004db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db8:	4607      	mov	r7, r0
 8004dba:	4688      	mov	r8, r1
 8004dbc:	4614      	mov	r4, r2
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8004dc8:	d505      	bpl.n	8004dd6 <_fwalk_sglue+0x22>
 8004dca:	6824      	ldr	r4, [r4, #0]
 8004dcc:	2c00      	cmp	r4, #0
 8004dce:	d1f7      	bne.n	8004dc0 <_fwalk_sglue+0xc>
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dd6:	89ab      	ldrh	r3, [r5, #12]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d907      	bls.n	8004dec <_fwalk_sglue+0x38>
 8004ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004de0:	3301      	adds	r3, #1
 8004de2:	d003      	beq.n	8004dec <_fwalk_sglue+0x38>
 8004de4:	4629      	mov	r1, r5
 8004de6:	4638      	mov	r0, r7
 8004de8:	47c0      	blx	r8
 8004dea:	4306      	orrs	r6, r0
 8004dec:	3568      	adds	r5, #104	; 0x68
 8004dee:	e7e9      	b.n	8004dc4 <_fwalk_sglue+0x10>

08004df0 <iprintf>:
 8004df0:	b40f      	push	{r0, r1, r2, r3}
 8004df2:	b507      	push	{r0, r1, r2, lr}
 8004df4:	4906      	ldr	r1, [pc, #24]	; (8004e10 <iprintf+0x20>)
 8004df6:	ab04      	add	r3, sp, #16
 8004df8:	6808      	ldr	r0, [r1, #0]
 8004dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dfe:	6881      	ldr	r1, [r0, #8]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	f000 f9e9 	bl	80051d8 <_vfiprintf_r>
 8004e06:	b003      	add	sp, #12
 8004e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e0c:	b004      	add	sp, #16
 8004e0e:	4770      	bx	lr
 8004e10:	20000064 	.word	0x20000064

08004e14 <__sread>:
 8004e14:	b510      	push	{r4, lr}
 8004e16:	460c      	mov	r4, r1
 8004e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1c:	f000 f868 	bl	8004ef0 <_read_r>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	bfab      	itete	ge
 8004e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e26:	89a3      	ldrhlt	r3, [r4, #12]
 8004e28:	181b      	addge	r3, r3, r0
 8004e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e2e:	bfac      	ite	ge
 8004e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e32:	81a3      	strhlt	r3, [r4, #12]
 8004e34:	bd10      	pop	{r4, pc}

08004e36 <__swrite>:
 8004e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3a:	461f      	mov	r7, r3
 8004e3c:	898b      	ldrh	r3, [r1, #12]
 8004e3e:	05db      	lsls	r3, r3, #23
 8004e40:	4605      	mov	r5, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	4616      	mov	r6, r2
 8004e46:	d505      	bpl.n	8004e54 <__swrite+0x1e>
 8004e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f000 f83c 	bl	8004ecc <_lseek_r>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e5e:	81a3      	strh	r3, [r4, #12]
 8004e60:	4632      	mov	r2, r6
 8004e62:	463b      	mov	r3, r7
 8004e64:	4628      	mov	r0, r5
 8004e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6a:	f000 b853 	b.w	8004f14 <_write_r>

08004e6e <__sseek>:
 8004e6e:	b510      	push	{r4, lr}
 8004e70:	460c      	mov	r4, r1
 8004e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e76:	f000 f829 	bl	8004ecc <_lseek_r>
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	bf15      	itete	ne
 8004e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e8a:	81a3      	strheq	r3, [r4, #12]
 8004e8c:	bf18      	it	ne
 8004e8e:	81a3      	strhne	r3, [r4, #12]
 8004e90:	bd10      	pop	{r4, pc}

08004e92 <__sclose>:
 8004e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e96:	f000 b809 	b.w	8004eac <_close_r>

08004e9a <memset>:
 8004e9a:	4402      	add	r2, r0
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d100      	bne.n	8004ea4 <memset+0xa>
 8004ea2:	4770      	bx	lr
 8004ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea8:	e7f9      	b.n	8004e9e <memset+0x4>
	...

08004eac <_close_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4d06      	ldr	r5, [pc, #24]	; (8004ec8 <_close_r+0x1c>)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	f7fc f8dd 	bl	8001076 <_close>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_close_r+0x1a>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_close_r+0x1a>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	200009c8 	.word	0x200009c8

08004ecc <_lseek_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4d07      	ldr	r5, [pc, #28]	; (8004eec <_lseek_r+0x20>)
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	4608      	mov	r0, r1
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	602a      	str	r2, [r5, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f7fc f8f2 	bl	80010c4 <_lseek>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_lseek_r+0x1e>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_lseek_r+0x1e>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	200009c8 	.word	0x200009c8

08004ef0 <_read_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4d07      	ldr	r5, [pc, #28]	; (8004f10 <_read_r+0x20>)
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	4608      	mov	r0, r1
 8004ef8:	4611      	mov	r1, r2
 8004efa:	2200      	movs	r2, #0
 8004efc:	602a      	str	r2, [r5, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f7fc f89c 	bl	800103c <_read>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_read_r+0x1e>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_read_r+0x1e>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	200009c8 	.word	0x200009c8

08004f14 <_write_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d07      	ldr	r5, [pc, #28]	; (8004f34 <_write_r+0x20>)
 8004f18:	4604      	mov	r4, r0
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	602a      	str	r2, [r5, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7fb fb32 	bl	800058c <_write>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_write_r+0x1e>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_write_r+0x1e>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200009c8 	.word	0x200009c8

08004f38 <__errno>:
 8004f38:	4b01      	ldr	r3, [pc, #4]	; (8004f40 <__errno+0x8>)
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000064 	.word	0x20000064

08004f44 <__libc_init_array>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	4d0d      	ldr	r5, [pc, #52]	; (8004f7c <__libc_init_array+0x38>)
 8004f48:	4c0d      	ldr	r4, [pc, #52]	; (8004f80 <__libc_init_array+0x3c>)
 8004f4a:	1b64      	subs	r4, r4, r5
 8004f4c:	10a4      	asrs	r4, r4, #2
 8004f4e:	2600      	movs	r6, #0
 8004f50:	42a6      	cmp	r6, r4
 8004f52:	d109      	bne.n	8004f68 <__libc_init_array+0x24>
 8004f54:	4d0b      	ldr	r5, [pc, #44]	; (8004f84 <__libc_init_array+0x40>)
 8004f56:	4c0c      	ldr	r4, [pc, #48]	; (8004f88 <__libc_init_array+0x44>)
 8004f58:	f000 fdc0 	bl	8005adc <_init>
 8004f5c:	1b64      	subs	r4, r4, r5
 8004f5e:	10a4      	asrs	r4, r4, #2
 8004f60:	2600      	movs	r6, #0
 8004f62:	42a6      	cmp	r6, r4
 8004f64:	d105      	bne.n	8004f72 <__libc_init_array+0x2e>
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6c:	4798      	blx	r3
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7ee      	b.n	8004f50 <__libc_init_array+0xc>
 8004f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f76:	4798      	blx	r3
 8004f78:	3601      	adds	r6, #1
 8004f7a:	e7f2      	b.n	8004f62 <__libc_init_array+0x1e>
 8004f7c:	08005b60 	.word	0x08005b60
 8004f80:	08005b60 	.word	0x08005b60
 8004f84:	08005b60 	.word	0x08005b60
 8004f88:	08005b64 	.word	0x08005b64

08004f8c <__retarget_lock_init_recursive>:
 8004f8c:	4770      	bx	lr

08004f8e <__retarget_lock_acquire_recursive>:
 8004f8e:	4770      	bx	lr

08004f90 <__retarget_lock_release_recursive>:
 8004f90:	4770      	bx	lr
	...

08004f94 <_free_r>:
 8004f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f96:	2900      	cmp	r1, #0
 8004f98:	d044      	beq.n	8005024 <_free_r+0x90>
 8004f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f9e:	9001      	str	r0, [sp, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8004fa6:	bfb8      	it	lt
 8004fa8:	18e4      	addlt	r4, r4, r3
 8004faa:	f000 f8df 	bl	800516c <__malloc_lock>
 8004fae:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <_free_r+0x94>)
 8004fb0:	9801      	ldr	r0, [sp, #4]
 8004fb2:	6813      	ldr	r3, [r2, #0]
 8004fb4:	b933      	cbnz	r3, 8004fc4 <_free_r+0x30>
 8004fb6:	6063      	str	r3, [r4, #4]
 8004fb8:	6014      	str	r4, [r2, #0]
 8004fba:	b003      	add	sp, #12
 8004fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc0:	f000 b8da 	b.w	8005178 <__malloc_unlock>
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	d908      	bls.n	8004fda <_free_r+0x46>
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	1961      	adds	r1, r4, r5
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	bf01      	itttt	eq
 8004fd0:	6819      	ldreq	r1, [r3, #0]
 8004fd2:	685b      	ldreq	r3, [r3, #4]
 8004fd4:	1949      	addeq	r1, r1, r5
 8004fd6:	6021      	streq	r1, [r4, #0]
 8004fd8:	e7ed      	b.n	8004fb6 <_free_r+0x22>
 8004fda:	461a      	mov	r2, r3
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	b10b      	cbz	r3, 8004fe4 <_free_r+0x50>
 8004fe0:	42a3      	cmp	r3, r4
 8004fe2:	d9fa      	bls.n	8004fda <_free_r+0x46>
 8004fe4:	6811      	ldr	r1, [r2, #0]
 8004fe6:	1855      	adds	r5, r2, r1
 8004fe8:	42a5      	cmp	r5, r4
 8004fea:	d10b      	bne.n	8005004 <_free_r+0x70>
 8004fec:	6824      	ldr	r4, [r4, #0]
 8004fee:	4421      	add	r1, r4
 8004ff0:	1854      	adds	r4, r2, r1
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	6011      	str	r1, [r2, #0]
 8004ff6:	d1e0      	bne.n	8004fba <_free_r+0x26>
 8004ff8:	681c      	ldr	r4, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	6053      	str	r3, [r2, #4]
 8004ffe:	440c      	add	r4, r1
 8005000:	6014      	str	r4, [r2, #0]
 8005002:	e7da      	b.n	8004fba <_free_r+0x26>
 8005004:	d902      	bls.n	800500c <_free_r+0x78>
 8005006:	230c      	movs	r3, #12
 8005008:	6003      	str	r3, [r0, #0]
 800500a:	e7d6      	b.n	8004fba <_free_r+0x26>
 800500c:	6825      	ldr	r5, [r4, #0]
 800500e:	1961      	adds	r1, r4, r5
 8005010:	428b      	cmp	r3, r1
 8005012:	bf04      	itt	eq
 8005014:	6819      	ldreq	r1, [r3, #0]
 8005016:	685b      	ldreq	r3, [r3, #4]
 8005018:	6063      	str	r3, [r4, #4]
 800501a:	bf04      	itt	eq
 800501c:	1949      	addeq	r1, r1, r5
 800501e:	6021      	streq	r1, [r4, #0]
 8005020:	6054      	str	r4, [r2, #4]
 8005022:	e7ca      	b.n	8004fba <_free_r+0x26>
 8005024:	b003      	add	sp, #12
 8005026:	bd30      	pop	{r4, r5, pc}
 8005028:	200009d0 	.word	0x200009d0

0800502c <sbrk_aligned>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4e0e      	ldr	r6, [pc, #56]	; (8005068 <sbrk_aligned+0x3c>)
 8005030:	460c      	mov	r4, r1
 8005032:	6831      	ldr	r1, [r6, #0]
 8005034:	4605      	mov	r5, r0
 8005036:	b911      	cbnz	r1, 800503e <sbrk_aligned+0x12>
 8005038:	f000 fcbc 	bl	80059b4 <_sbrk_r>
 800503c:	6030      	str	r0, [r6, #0]
 800503e:	4621      	mov	r1, r4
 8005040:	4628      	mov	r0, r5
 8005042:	f000 fcb7 	bl	80059b4 <_sbrk_r>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d00a      	beq.n	8005060 <sbrk_aligned+0x34>
 800504a:	1cc4      	adds	r4, r0, #3
 800504c:	f024 0403 	bic.w	r4, r4, #3
 8005050:	42a0      	cmp	r0, r4
 8005052:	d007      	beq.n	8005064 <sbrk_aligned+0x38>
 8005054:	1a21      	subs	r1, r4, r0
 8005056:	4628      	mov	r0, r5
 8005058:	f000 fcac 	bl	80059b4 <_sbrk_r>
 800505c:	3001      	adds	r0, #1
 800505e:	d101      	bne.n	8005064 <sbrk_aligned+0x38>
 8005060:	f04f 34ff 	mov.w	r4, #4294967295
 8005064:	4620      	mov	r0, r4
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	200009d4 	.word	0x200009d4

0800506c <_malloc_r>:
 800506c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005070:	1ccd      	adds	r5, r1, #3
 8005072:	f025 0503 	bic.w	r5, r5, #3
 8005076:	3508      	adds	r5, #8
 8005078:	2d0c      	cmp	r5, #12
 800507a:	bf38      	it	cc
 800507c:	250c      	movcc	r5, #12
 800507e:	2d00      	cmp	r5, #0
 8005080:	4607      	mov	r7, r0
 8005082:	db01      	blt.n	8005088 <_malloc_r+0x1c>
 8005084:	42a9      	cmp	r1, r5
 8005086:	d905      	bls.n	8005094 <_malloc_r+0x28>
 8005088:	230c      	movs	r3, #12
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	2600      	movs	r6, #0
 800508e:	4630      	mov	r0, r6
 8005090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005094:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005168 <_malloc_r+0xfc>
 8005098:	f000 f868 	bl	800516c <__malloc_lock>
 800509c:	f8d8 3000 	ldr.w	r3, [r8]
 80050a0:	461c      	mov	r4, r3
 80050a2:	bb5c      	cbnz	r4, 80050fc <_malloc_r+0x90>
 80050a4:	4629      	mov	r1, r5
 80050a6:	4638      	mov	r0, r7
 80050a8:	f7ff ffc0 	bl	800502c <sbrk_aligned>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	4604      	mov	r4, r0
 80050b0:	d155      	bne.n	800515e <_malloc_r+0xf2>
 80050b2:	f8d8 4000 	ldr.w	r4, [r8]
 80050b6:	4626      	mov	r6, r4
 80050b8:	2e00      	cmp	r6, #0
 80050ba:	d145      	bne.n	8005148 <_malloc_r+0xdc>
 80050bc:	2c00      	cmp	r4, #0
 80050be:	d048      	beq.n	8005152 <_malloc_r+0xe6>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	4631      	mov	r1, r6
 80050c4:	4638      	mov	r0, r7
 80050c6:	eb04 0903 	add.w	r9, r4, r3
 80050ca:	f000 fc73 	bl	80059b4 <_sbrk_r>
 80050ce:	4581      	cmp	r9, r0
 80050d0:	d13f      	bne.n	8005152 <_malloc_r+0xe6>
 80050d2:	6821      	ldr	r1, [r4, #0]
 80050d4:	1a6d      	subs	r5, r5, r1
 80050d6:	4629      	mov	r1, r5
 80050d8:	4638      	mov	r0, r7
 80050da:	f7ff ffa7 	bl	800502c <sbrk_aligned>
 80050de:	3001      	adds	r0, #1
 80050e0:	d037      	beq.n	8005152 <_malloc_r+0xe6>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	442b      	add	r3, r5
 80050e6:	6023      	str	r3, [r4, #0]
 80050e8:	f8d8 3000 	ldr.w	r3, [r8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d038      	beq.n	8005162 <_malloc_r+0xf6>
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	42a2      	cmp	r2, r4
 80050f4:	d12b      	bne.n	800514e <_malloc_r+0xe2>
 80050f6:	2200      	movs	r2, #0
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	e00f      	b.n	800511c <_malloc_r+0xb0>
 80050fc:	6822      	ldr	r2, [r4, #0]
 80050fe:	1b52      	subs	r2, r2, r5
 8005100:	d41f      	bmi.n	8005142 <_malloc_r+0xd6>
 8005102:	2a0b      	cmp	r2, #11
 8005104:	d917      	bls.n	8005136 <_malloc_r+0xca>
 8005106:	1961      	adds	r1, r4, r5
 8005108:	42a3      	cmp	r3, r4
 800510a:	6025      	str	r5, [r4, #0]
 800510c:	bf18      	it	ne
 800510e:	6059      	strne	r1, [r3, #4]
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	bf08      	it	eq
 8005114:	f8c8 1000 	streq.w	r1, [r8]
 8005118:	5162      	str	r2, [r4, r5]
 800511a:	604b      	str	r3, [r1, #4]
 800511c:	4638      	mov	r0, r7
 800511e:	f104 060b 	add.w	r6, r4, #11
 8005122:	f000 f829 	bl	8005178 <__malloc_unlock>
 8005126:	f026 0607 	bic.w	r6, r6, #7
 800512a:	1d23      	adds	r3, r4, #4
 800512c:	1af2      	subs	r2, r6, r3
 800512e:	d0ae      	beq.n	800508e <_malloc_r+0x22>
 8005130:	1b9b      	subs	r3, r3, r6
 8005132:	50a3      	str	r3, [r4, r2]
 8005134:	e7ab      	b.n	800508e <_malloc_r+0x22>
 8005136:	42a3      	cmp	r3, r4
 8005138:	6862      	ldr	r2, [r4, #4]
 800513a:	d1dd      	bne.n	80050f8 <_malloc_r+0x8c>
 800513c:	f8c8 2000 	str.w	r2, [r8]
 8005140:	e7ec      	b.n	800511c <_malloc_r+0xb0>
 8005142:	4623      	mov	r3, r4
 8005144:	6864      	ldr	r4, [r4, #4]
 8005146:	e7ac      	b.n	80050a2 <_malloc_r+0x36>
 8005148:	4634      	mov	r4, r6
 800514a:	6876      	ldr	r6, [r6, #4]
 800514c:	e7b4      	b.n	80050b8 <_malloc_r+0x4c>
 800514e:	4613      	mov	r3, r2
 8005150:	e7cc      	b.n	80050ec <_malloc_r+0x80>
 8005152:	230c      	movs	r3, #12
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4638      	mov	r0, r7
 8005158:	f000 f80e 	bl	8005178 <__malloc_unlock>
 800515c:	e797      	b.n	800508e <_malloc_r+0x22>
 800515e:	6025      	str	r5, [r4, #0]
 8005160:	e7dc      	b.n	800511c <_malloc_r+0xb0>
 8005162:	605b      	str	r3, [r3, #4]
 8005164:	deff      	udf	#255	; 0xff
 8005166:	bf00      	nop
 8005168:	200009d0 	.word	0x200009d0

0800516c <__malloc_lock>:
 800516c:	4801      	ldr	r0, [pc, #4]	; (8005174 <__malloc_lock+0x8>)
 800516e:	f7ff bf0e 	b.w	8004f8e <__retarget_lock_acquire_recursive>
 8005172:	bf00      	nop
 8005174:	200009cc 	.word	0x200009cc

08005178 <__malloc_unlock>:
 8005178:	4801      	ldr	r0, [pc, #4]	; (8005180 <__malloc_unlock+0x8>)
 800517a:	f7ff bf09 	b.w	8004f90 <__retarget_lock_release_recursive>
 800517e:	bf00      	nop
 8005180:	200009cc 	.word	0x200009cc

08005184 <__sfputc_r>:
 8005184:	6893      	ldr	r3, [r2, #8]
 8005186:	3b01      	subs	r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	b410      	push	{r4}
 800518c:	6093      	str	r3, [r2, #8]
 800518e:	da08      	bge.n	80051a2 <__sfputc_r+0x1e>
 8005190:	6994      	ldr	r4, [r2, #24]
 8005192:	42a3      	cmp	r3, r4
 8005194:	db01      	blt.n	800519a <__sfputc_r+0x16>
 8005196:	290a      	cmp	r1, #10
 8005198:	d103      	bne.n	80051a2 <__sfputc_r+0x1e>
 800519a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800519e:	f000 bb73 	b.w	8005888 <__swbuf_r>
 80051a2:	6813      	ldr	r3, [r2, #0]
 80051a4:	1c58      	adds	r0, r3, #1
 80051a6:	6010      	str	r0, [r2, #0]
 80051a8:	7019      	strb	r1, [r3, #0]
 80051aa:	4608      	mov	r0, r1
 80051ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <__sfputs_r>:
 80051b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b4:	4606      	mov	r6, r0
 80051b6:	460f      	mov	r7, r1
 80051b8:	4614      	mov	r4, r2
 80051ba:	18d5      	adds	r5, r2, r3
 80051bc:	42ac      	cmp	r4, r5
 80051be:	d101      	bne.n	80051c4 <__sfputs_r+0x12>
 80051c0:	2000      	movs	r0, #0
 80051c2:	e007      	b.n	80051d4 <__sfputs_r+0x22>
 80051c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c8:	463a      	mov	r2, r7
 80051ca:	4630      	mov	r0, r6
 80051cc:	f7ff ffda 	bl	8005184 <__sfputc_r>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d1f3      	bne.n	80051bc <__sfputs_r+0xa>
 80051d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051d8 <_vfiprintf_r>:
 80051d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051dc:	460d      	mov	r5, r1
 80051de:	b09d      	sub	sp, #116	; 0x74
 80051e0:	4614      	mov	r4, r2
 80051e2:	4698      	mov	r8, r3
 80051e4:	4606      	mov	r6, r0
 80051e6:	b118      	cbz	r0, 80051f0 <_vfiprintf_r+0x18>
 80051e8:	6a03      	ldr	r3, [r0, #32]
 80051ea:	b90b      	cbnz	r3, 80051f0 <_vfiprintf_r+0x18>
 80051ec:	f7ff fdca 	bl	8004d84 <__sinit>
 80051f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f2:	07d9      	lsls	r1, r3, #31
 80051f4:	d405      	bmi.n	8005202 <_vfiprintf_r+0x2a>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	059a      	lsls	r2, r3, #22
 80051fa:	d402      	bmi.n	8005202 <_vfiprintf_r+0x2a>
 80051fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051fe:	f7ff fec6 	bl	8004f8e <__retarget_lock_acquire_recursive>
 8005202:	89ab      	ldrh	r3, [r5, #12]
 8005204:	071b      	lsls	r3, r3, #28
 8005206:	d501      	bpl.n	800520c <_vfiprintf_r+0x34>
 8005208:	692b      	ldr	r3, [r5, #16]
 800520a:	b99b      	cbnz	r3, 8005234 <_vfiprintf_r+0x5c>
 800520c:	4629      	mov	r1, r5
 800520e:	4630      	mov	r0, r6
 8005210:	f000 fb78 	bl	8005904 <__swsetup_r>
 8005214:	b170      	cbz	r0, 8005234 <_vfiprintf_r+0x5c>
 8005216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005218:	07dc      	lsls	r4, r3, #31
 800521a:	d504      	bpl.n	8005226 <_vfiprintf_r+0x4e>
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	b01d      	add	sp, #116	; 0x74
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	89ab      	ldrh	r3, [r5, #12]
 8005228:	0598      	lsls	r0, r3, #22
 800522a:	d4f7      	bmi.n	800521c <_vfiprintf_r+0x44>
 800522c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800522e:	f7ff feaf 	bl	8004f90 <__retarget_lock_release_recursive>
 8005232:	e7f3      	b.n	800521c <_vfiprintf_r+0x44>
 8005234:	2300      	movs	r3, #0
 8005236:	9309      	str	r3, [sp, #36]	; 0x24
 8005238:	2320      	movs	r3, #32
 800523a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800523e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005242:	2330      	movs	r3, #48	; 0x30
 8005244:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80053f8 <_vfiprintf_r+0x220>
 8005248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800524c:	f04f 0901 	mov.w	r9, #1
 8005250:	4623      	mov	r3, r4
 8005252:	469a      	mov	sl, r3
 8005254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005258:	b10a      	cbz	r2, 800525e <_vfiprintf_r+0x86>
 800525a:	2a25      	cmp	r2, #37	; 0x25
 800525c:	d1f9      	bne.n	8005252 <_vfiprintf_r+0x7a>
 800525e:	ebba 0b04 	subs.w	fp, sl, r4
 8005262:	d00b      	beq.n	800527c <_vfiprintf_r+0xa4>
 8005264:	465b      	mov	r3, fp
 8005266:	4622      	mov	r2, r4
 8005268:	4629      	mov	r1, r5
 800526a:	4630      	mov	r0, r6
 800526c:	f7ff ffa1 	bl	80051b2 <__sfputs_r>
 8005270:	3001      	adds	r0, #1
 8005272:	f000 80a9 	beq.w	80053c8 <_vfiprintf_r+0x1f0>
 8005276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005278:	445a      	add	r2, fp
 800527a:	9209      	str	r2, [sp, #36]	; 0x24
 800527c:	f89a 3000 	ldrb.w	r3, [sl]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80a1 	beq.w	80053c8 <_vfiprintf_r+0x1f0>
 8005286:	2300      	movs	r3, #0
 8005288:	f04f 32ff 	mov.w	r2, #4294967295
 800528c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005290:	f10a 0a01 	add.w	sl, sl, #1
 8005294:	9304      	str	r3, [sp, #16]
 8005296:	9307      	str	r3, [sp, #28]
 8005298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800529c:	931a      	str	r3, [sp, #104]	; 0x68
 800529e:	4654      	mov	r4, sl
 80052a0:	2205      	movs	r2, #5
 80052a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a6:	4854      	ldr	r0, [pc, #336]	; (80053f8 <_vfiprintf_r+0x220>)
 80052a8:	f7fa ffa2 	bl	80001f0 <memchr>
 80052ac:	9a04      	ldr	r2, [sp, #16]
 80052ae:	b9d8      	cbnz	r0, 80052e8 <_vfiprintf_r+0x110>
 80052b0:	06d1      	lsls	r1, r2, #27
 80052b2:	bf44      	itt	mi
 80052b4:	2320      	movmi	r3, #32
 80052b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ba:	0713      	lsls	r3, r2, #28
 80052bc:	bf44      	itt	mi
 80052be:	232b      	movmi	r3, #43	; 0x2b
 80052c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c4:	f89a 3000 	ldrb.w	r3, [sl]
 80052c8:	2b2a      	cmp	r3, #42	; 0x2a
 80052ca:	d015      	beq.n	80052f8 <_vfiprintf_r+0x120>
 80052cc:	9a07      	ldr	r2, [sp, #28]
 80052ce:	4654      	mov	r4, sl
 80052d0:	2000      	movs	r0, #0
 80052d2:	f04f 0c0a 	mov.w	ip, #10
 80052d6:	4621      	mov	r1, r4
 80052d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052dc:	3b30      	subs	r3, #48	; 0x30
 80052de:	2b09      	cmp	r3, #9
 80052e0:	d94d      	bls.n	800537e <_vfiprintf_r+0x1a6>
 80052e2:	b1b0      	cbz	r0, 8005312 <_vfiprintf_r+0x13a>
 80052e4:	9207      	str	r2, [sp, #28]
 80052e6:	e014      	b.n	8005312 <_vfiprintf_r+0x13a>
 80052e8:	eba0 0308 	sub.w	r3, r0, r8
 80052ec:	fa09 f303 	lsl.w	r3, r9, r3
 80052f0:	4313      	orrs	r3, r2
 80052f2:	9304      	str	r3, [sp, #16]
 80052f4:	46a2      	mov	sl, r4
 80052f6:	e7d2      	b.n	800529e <_vfiprintf_r+0xc6>
 80052f8:	9b03      	ldr	r3, [sp, #12]
 80052fa:	1d19      	adds	r1, r3, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	9103      	str	r1, [sp, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	bfbb      	ittet	lt
 8005304:	425b      	neglt	r3, r3
 8005306:	f042 0202 	orrlt.w	r2, r2, #2
 800530a:	9307      	strge	r3, [sp, #28]
 800530c:	9307      	strlt	r3, [sp, #28]
 800530e:	bfb8      	it	lt
 8005310:	9204      	strlt	r2, [sp, #16]
 8005312:	7823      	ldrb	r3, [r4, #0]
 8005314:	2b2e      	cmp	r3, #46	; 0x2e
 8005316:	d10c      	bne.n	8005332 <_vfiprintf_r+0x15a>
 8005318:	7863      	ldrb	r3, [r4, #1]
 800531a:	2b2a      	cmp	r3, #42	; 0x2a
 800531c:	d134      	bne.n	8005388 <_vfiprintf_r+0x1b0>
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	1d1a      	adds	r2, r3, #4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	9203      	str	r2, [sp, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	bfb8      	it	lt
 800532a:	f04f 33ff 	movlt.w	r3, #4294967295
 800532e:	3402      	adds	r4, #2
 8005330:	9305      	str	r3, [sp, #20]
 8005332:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005408 <_vfiprintf_r+0x230>
 8005336:	7821      	ldrb	r1, [r4, #0]
 8005338:	2203      	movs	r2, #3
 800533a:	4650      	mov	r0, sl
 800533c:	f7fa ff58 	bl	80001f0 <memchr>
 8005340:	b138      	cbz	r0, 8005352 <_vfiprintf_r+0x17a>
 8005342:	9b04      	ldr	r3, [sp, #16]
 8005344:	eba0 000a 	sub.w	r0, r0, sl
 8005348:	2240      	movs	r2, #64	; 0x40
 800534a:	4082      	lsls	r2, r0
 800534c:	4313      	orrs	r3, r2
 800534e:	3401      	adds	r4, #1
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005356:	4829      	ldr	r0, [pc, #164]	; (80053fc <_vfiprintf_r+0x224>)
 8005358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800535c:	2206      	movs	r2, #6
 800535e:	f7fa ff47 	bl	80001f0 <memchr>
 8005362:	2800      	cmp	r0, #0
 8005364:	d03f      	beq.n	80053e6 <_vfiprintf_r+0x20e>
 8005366:	4b26      	ldr	r3, [pc, #152]	; (8005400 <_vfiprintf_r+0x228>)
 8005368:	bb1b      	cbnz	r3, 80053b2 <_vfiprintf_r+0x1da>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	3307      	adds	r3, #7
 800536e:	f023 0307 	bic.w	r3, r3, #7
 8005372:	3308      	adds	r3, #8
 8005374:	9303      	str	r3, [sp, #12]
 8005376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005378:	443b      	add	r3, r7
 800537a:	9309      	str	r3, [sp, #36]	; 0x24
 800537c:	e768      	b.n	8005250 <_vfiprintf_r+0x78>
 800537e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005382:	460c      	mov	r4, r1
 8005384:	2001      	movs	r0, #1
 8005386:	e7a6      	b.n	80052d6 <_vfiprintf_r+0xfe>
 8005388:	2300      	movs	r3, #0
 800538a:	3401      	adds	r4, #1
 800538c:	9305      	str	r3, [sp, #20]
 800538e:	4619      	mov	r1, r3
 8005390:	f04f 0c0a 	mov.w	ip, #10
 8005394:	4620      	mov	r0, r4
 8005396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800539a:	3a30      	subs	r2, #48	; 0x30
 800539c:	2a09      	cmp	r2, #9
 800539e:	d903      	bls.n	80053a8 <_vfiprintf_r+0x1d0>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0c6      	beq.n	8005332 <_vfiprintf_r+0x15a>
 80053a4:	9105      	str	r1, [sp, #20]
 80053a6:	e7c4      	b.n	8005332 <_vfiprintf_r+0x15a>
 80053a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ac:	4604      	mov	r4, r0
 80053ae:	2301      	movs	r3, #1
 80053b0:	e7f0      	b.n	8005394 <_vfiprintf_r+0x1bc>
 80053b2:	ab03      	add	r3, sp, #12
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	462a      	mov	r2, r5
 80053b8:	4b12      	ldr	r3, [pc, #72]	; (8005404 <_vfiprintf_r+0x22c>)
 80053ba:	a904      	add	r1, sp, #16
 80053bc:	4630      	mov	r0, r6
 80053be:	f3af 8000 	nop.w
 80053c2:	4607      	mov	r7, r0
 80053c4:	1c78      	adds	r0, r7, #1
 80053c6:	d1d6      	bne.n	8005376 <_vfiprintf_r+0x19e>
 80053c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053ca:	07d9      	lsls	r1, r3, #31
 80053cc:	d405      	bmi.n	80053da <_vfiprintf_r+0x202>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	059a      	lsls	r2, r3, #22
 80053d2:	d402      	bmi.n	80053da <_vfiprintf_r+0x202>
 80053d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053d6:	f7ff fddb 	bl	8004f90 <__retarget_lock_release_recursive>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	065b      	lsls	r3, r3, #25
 80053de:	f53f af1d 	bmi.w	800521c <_vfiprintf_r+0x44>
 80053e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053e4:	e71c      	b.n	8005220 <_vfiprintf_r+0x48>
 80053e6:	ab03      	add	r3, sp, #12
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	462a      	mov	r2, r5
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <_vfiprintf_r+0x22c>)
 80053ee:	a904      	add	r1, sp, #16
 80053f0:	4630      	mov	r0, r6
 80053f2:	f000 f879 	bl	80054e8 <_printf_i>
 80053f6:	e7e4      	b.n	80053c2 <_vfiprintf_r+0x1ea>
 80053f8:	08005b24 	.word	0x08005b24
 80053fc:	08005b2e 	.word	0x08005b2e
 8005400:	00000000 	.word	0x00000000
 8005404:	080051b3 	.word	0x080051b3
 8005408:	08005b2a 	.word	0x08005b2a

0800540c <_printf_common>:
 800540c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005410:	4616      	mov	r6, r2
 8005412:	4699      	mov	r9, r3
 8005414:	688a      	ldr	r2, [r1, #8]
 8005416:	690b      	ldr	r3, [r1, #16]
 8005418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800541c:	4293      	cmp	r3, r2
 800541e:	bfb8      	it	lt
 8005420:	4613      	movlt	r3, r2
 8005422:	6033      	str	r3, [r6, #0]
 8005424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005428:	4607      	mov	r7, r0
 800542a:	460c      	mov	r4, r1
 800542c:	b10a      	cbz	r2, 8005432 <_printf_common+0x26>
 800542e:	3301      	adds	r3, #1
 8005430:	6033      	str	r3, [r6, #0]
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	0699      	lsls	r1, r3, #26
 8005436:	bf42      	ittt	mi
 8005438:	6833      	ldrmi	r3, [r6, #0]
 800543a:	3302      	addmi	r3, #2
 800543c:	6033      	strmi	r3, [r6, #0]
 800543e:	6825      	ldr	r5, [r4, #0]
 8005440:	f015 0506 	ands.w	r5, r5, #6
 8005444:	d106      	bne.n	8005454 <_printf_common+0x48>
 8005446:	f104 0a19 	add.w	sl, r4, #25
 800544a:	68e3      	ldr	r3, [r4, #12]
 800544c:	6832      	ldr	r2, [r6, #0]
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	42ab      	cmp	r3, r5
 8005452:	dc26      	bgt.n	80054a2 <_printf_common+0x96>
 8005454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005458:	1e13      	subs	r3, r2, #0
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	bf18      	it	ne
 800545e:	2301      	movne	r3, #1
 8005460:	0692      	lsls	r2, r2, #26
 8005462:	d42b      	bmi.n	80054bc <_printf_common+0xb0>
 8005464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005468:	4649      	mov	r1, r9
 800546a:	4638      	mov	r0, r7
 800546c:	47c0      	blx	r8
 800546e:	3001      	adds	r0, #1
 8005470:	d01e      	beq.n	80054b0 <_printf_common+0xa4>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	6922      	ldr	r2, [r4, #16]
 8005476:	f003 0306 	and.w	r3, r3, #6
 800547a:	2b04      	cmp	r3, #4
 800547c:	bf02      	ittt	eq
 800547e:	68e5      	ldreq	r5, [r4, #12]
 8005480:	6833      	ldreq	r3, [r6, #0]
 8005482:	1aed      	subeq	r5, r5, r3
 8005484:	68a3      	ldr	r3, [r4, #8]
 8005486:	bf0c      	ite	eq
 8005488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800548c:	2500      	movne	r5, #0
 800548e:	4293      	cmp	r3, r2
 8005490:	bfc4      	itt	gt
 8005492:	1a9b      	subgt	r3, r3, r2
 8005494:	18ed      	addgt	r5, r5, r3
 8005496:	2600      	movs	r6, #0
 8005498:	341a      	adds	r4, #26
 800549a:	42b5      	cmp	r5, r6
 800549c:	d11a      	bne.n	80054d4 <_printf_common+0xc8>
 800549e:	2000      	movs	r0, #0
 80054a0:	e008      	b.n	80054b4 <_printf_common+0xa8>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4652      	mov	r2, sl
 80054a6:	4649      	mov	r1, r9
 80054a8:	4638      	mov	r0, r7
 80054aa:	47c0      	blx	r8
 80054ac:	3001      	adds	r0, #1
 80054ae:	d103      	bne.n	80054b8 <_printf_common+0xac>
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b8:	3501      	adds	r5, #1
 80054ba:	e7c6      	b.n	800544a <_printf_common+0x3e>
 80054bc:	18e1      	adds	r1, r4, r3
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	2030      	movs	r0, #48	; 0x30
 80054c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054c6:	4422      	add	r2, r4
 80054c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054d0:	3302      	adds	r3, #2
 80054d2:	e7c7      	b.n	8005464 <_printf_common+0x58>
 80054d4:	2301      	movs	r3, #1
 80054d6:	4622      	mov	r2, r4
 80054d8:	4649      	mov	r1, r9
 80054da:	4638      	mov	r0, r7
 80054dc:	47c0      	blx	r8
 80054de:	3001      	adds	r0, #1
 80054e0:	d0e6      	beq.n	80054b0 <_printf_common+0xa4>
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7d9      	b.n	800549a <_printf_common+0x8e>
	...

080054e8 <_printf_i>:
 80054e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054ec:	7e0f      	ldrb	r7, [r1, #24]
 80054ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054f0:	2f78      	cmp	r7, #120	; 0x78
 80054f2:	4691      	mov	r9, r2
 80054f4:	4680      	mov	r8, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	469a      	mov	sl, r3
 80054fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054fe:	d807      	bhi.n	8005510 <_printf_i+0x28>
 8005500:	2f62      	cmp	r7, #98	; 0x62
 8005502:	d80a      	bhi.n	800551a <_printf_i+0x32>
 8005504:	2f00      	cmp	r7, #0
 8005506:	f000 80d4 	beq.w	80056b2 <_printf_i+0x1ca>
 800550a:	2f58      	cmp	r7, #88	; 0x58
 800550c:	f000 80c0 	beq.w	8005690 <_printf_i+0x1a8>
 8005510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005518:	e03a      	b.n	8005590 <_printf_i+0xa8>
 800551a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800551e:	2b15      	cmp	r3, #21
 8005520:	d8f6      	bhi.n	8005510 <_printf_i+0x28>
 8005522:	a101      	add	r1, pc, #4	; (adr r1, 8005528 <_printf_i+0x40>)
 8005524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005528:	08005581 	.word	0x08005581
 800552c:	08005595 	.word	0x08005595
 8005530:	08005511 	.word	0x08005511
 8005534:	08005511 	.word	0x08005511
 8005538:	08005511 	.word	0x08005511
 800553c:	08005511 	.word	0x08005511
 8005540:	08005595 	.word	0x08005595
 8005544:	08005511 	.word	0x08005511
 8005548:	08005511 	.word	0x08005511
 800554c:	08005511 	.word	0x08005511
 8005550:	08005511 	.word	0x08005511
 8005554:	08005699 	.word	0x08005699
 8005558:	080055c1 	.word	0x080055c1
 800555c:	08005653 	.word	0x08005653
 8005560:	08005511 	.word	0x08005511
 8005564:	08005511 	.word	0x08005511
 8005568:	080056bb 	.word	0x080056bb
 800556c:	08005511 	.word	0x08005511
 8005570:	080055c1 	.word	0x080055c1
 8005574:	08005511 	.word	0x08005511
 8005578:	08005511 	.word	0x08005511
 800557c:	0800565b 	.word	0x0800565b
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	1d1a      	adds	r2, r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	602a      	str	r2, [r5, #0]
 8005588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800558c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005590:	2301      	movs	r3, #1
 8005592:	e09f      	b.n	80056d4 <_printf_i+0x1ec>
 8005594:	6820      	ldr	r0, [r4, #0]
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	0607      	lsls	r7, r0, #24
 800559a:	f103 0104 	add.w	r1, r3, #4
 800559e:	6029      	str	r1, [r5, #0]
 80055a0:	d501      	bpl.n	80055a6 <_printf_i+0xbe>
 80055a2:	681e      	ldr	r6, [r3, #0]
 80055a4:	e003      	b.n	80055ae <_printf_i+0xc6>
 80055a6:	0646      	lsls	r6, r0, #25
 80055a8:	d5fb      	bpl.n	80055a2 <_printf_i+0xba>
 80055aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	da03      	bge.n	80055ba <_printf_i+0xd2>
 80055b2:	232d      	movs	r3, #45	; 0x2d
 80055b4:	4276      	negs	r6, r6
 80055b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ba:	485a      	ldr	r0, [pc, #360]	; (8005724 <_printf_i+0x23c>)
 80055bc:	230a      	movs	r3, #10
 80055be:	e012      	b.n	80055e6 <_printf_i+0xfe>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	6820      	ldr	r0, [r4, #0]
 80055c4:	1d19      	adds	r1, r3, #4
 80055c6:	6029      	str	r1, [r5, #0]
 80055c8:	0605      	lsls	r5, r0, #24
 80055ca:	d501      	bpl.n	80055d0 <_printf_i+0xe8>
 80055cc:	681e      	ldr	r6, [r3, #0]
 80055ce:	e002      	b.n	80055d6 <_printf_i+0xee>
 80055d0:	0641      	lsls	r1, r0, #25
 80055d2:	d5fb      	bpl.n	80055cc <_printf_i+0xe4>
 80055d4:	881e      	ldrh	r6, [r3, #0]
 80055d6:	4853      	ldr	r0, [pc, #332]	; (8005724 <_printf_i+0x23c>)
 80055d8:	2f6f      	cmp	r7, #111	; 0x6f
 80055da:	bf0c      	ite	eq
 80055dc:	2308      	moveq	r3, #8
 80055de:	230a      	movne	r3, #10
 80055e0:	2100      	movs	r1, #0
 80055e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055e6:	6865      	ldr	r5, [r4, #4]
 80055e8:	60a5      	str	r5, [r4, #8]
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	bfa2      	ittt	ge
 80055ee:	6821      	ldrge	r1, [r4, #0]
 80055f0:	f021 0104 	bicge.w	r1, r1, #4
 80055f4:	6021      	strge	r1, [r4, #0]
 80055f6:	b90e      	cbnz	r6, 80055fc <_printf_i+0x114>
 80055f8:	2d00      	cmp	r5, #0
 80055fa:	d04b      	beq.n	8005694 <_printf_i+0x1ac>
 80055fc:	4615      	mov	r5, r2
 80055fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005602:	fb03 6711 	mls	r7, r3, r1, r6
 8005606:	5dc7      	ldrb	r7, [r0, r7]
 8005608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800560c:	4637      	mov	r7, r6
 800560e:	42bb      	cmp	r3, r7
 8005610:	460e      	mov	r6, r1
 8005612:	d9f4      	bls.n	80055fe <_printf_i+0x116>
 8005614:	2b08      	cmp	r3, #8
 8005616:	d10b      	bne.n	8005630 <_printf_i+0x148>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	07de      	lsls	r6, r3, #31
 800561c:	d508      	bpl.n	8005630 <_printf_i+0x148>
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	6861      	ldr	r1, [r4, #4]
 8005622:	4299      	cmp	r1, r3
 8005624:	bfde      	ittt	le
 8005626:	2330      	movle	r3, #48	; 0x30
 8005628:	f805 3c01 	strble.w	r3, [r5, #-1]
 800562c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005630:	1b52      	subs	r2, r2, r5
 8005632:	6122      	str	r2, [r4, #16]
 8005634:	f8cd a000 	str.w	sl, [sp]
 8005638:	464b      	mov	r3, r9
 800563a:	aa03      	add	r2, sp, #12
 800563c:	4621      	mov	r1, r4
 800563e:	4640      	mov	r0, r8
 8005640:	f7ff fee4 	bl	800540c <_printf_common>
 8005644:	3001      	adds	r0, #1
 8005646:	d14a      	bne.n	80056de <_printf_i+0x1f6>
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	b004      	add	sp, #16
 800564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	f043 0320 	orr.w	r3, r3, #32
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	4833      	ldr	r0, [pc, #204]	; (8005728 <_printf_i+0x240>)
 800565c:	2778      	movs	r7, #120	; 0x78
 800565e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	6829      	ldr	r1, [r5, #0]
 8005666:	061f      	lsls	r7, r3, #24
 8005668:	f851 6b04 	ldr.w	r6, [r1], #4
 800566c:	d402      	bmi.n	8005674 <_printf_i+0x18c>
 800566e:	065f      	lsls	r7, r3, #25
 8005670:	bf48      	it	mi
 8005672:	b2b6      	uxthmi	r6, r6
 8005674:	07df      	lsls	r7, r3, #31
 8005676:	bf48      	it	mi
 8005678:	f043 0320 	orrmi.w	r3, r3, #32
 800567c:	6029      	str	r1, [r5, #0]
 800567e:	bf48      	it	mi
 8005680:	6023      	strmi	r3, [r4, #0]
 8005682:	b91e      	cbnz	r6, 800568c <_printf_i+0x1a4>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	f023 0320 	bic.w	r3, r3, #32
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	2310      	movs	r3, #16
 800568e:	e7a7      	b.n	80055e0 <_printf_i+0xf8>
 8005690:	4824      	ldr	r0, [pc, #144]	; (8005724 <_printf_i+0x23c>)
 8005692:	e7e4      	b.n	800565e <_printf_i+0x176>
 8005694:	4615      	mov	r5, r2
 8005696:	e7bd      	b.n	8005614 <_printf_i+0x12c>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	6826      	ldr	r6, [r4, #0]
 800569c:	6961      	ldr	r1, [r4, #20]
 800569e:	1d18      	adds	r0, r3, #4
 80056a0:	6028      	str	r0, [r5, #0]
 80056a2:	0635      	lsls	r5, r6, #24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	d501      	bpl.n	80056ac <_printf_i+0x1c4>
 80056a8:	6019      	str	r1, [r3, #0]
 80056aa:	e002      	b.n	80056b2 <_printf_i+0x1ca>
 80056ac:	0670      	lsls	r0, r6, #25
 80056ae:	d5fb      	bpl.n	80056a8 <_printf_i+0x1c0>
 80056b0:	8019      	strh	r1, [r3, #0]
 80056b2:	2300      	movs	r3, #0
 80056b4:	6123      	str	r3, [r4, #16]
 80056b6:	4615      	mov	r5, r2
 80056b8:	e7bc      	b.n	8005634 <_printf_i+0x14c>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	1d1a      	adds	r2, r3, #4
 80056be:	602a      	str	r2, [r5, #0]
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	6862      	ldr	r2, [r4, #4]
 80056c4:	2100      	movs	r1, #0
 80056c6:	4628      	mov	r0, r5
 80056c8:	f7fa fd92 	bl	80001f0 <memchr>
 80056cc:	b108      	cbz	r0, 80056d2 <_printf_i+0x1ea>
 80056ce:	1b40      	subs	r0, r0, r5
 80056d0:	6060      	str	r0, [r4, #4]
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	2300      	movs	r3, #0
 80056d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056dc:	e7aa      	b.n	8005634 <_printf_i+0x14c>
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	462a      	mov	r2, r5
 80056e2:	4649      	mov	r1, r9
 80056e4:	4640      	mov	r0, r8
 80056e6:	47d0      	blx	sl
 80056e8:	3001      	adds	r0, #1
 80056ea:	d0ad      	beq.n	8005648 <_printf_i+0x160>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	079b      	lsls	r3, r3, #30
 80056f0:	d413      	bmi.n	800571a <_printf_i+0x232>
 80056f2:	68e0      	ldr	r0, [r4, #12]
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	4298      	cmp	r0, r3
 80056f8:	bfb8      	it	lt
 80056fa:	4618      	movlt	r0, r3
 80056fc:	e7a6      	b.n	800564c <_printf_i+0x164>
 80056fe:	2301      	movs	r3, #1
 8005700:	4632      	mov	r2, r6
 8005702:	4649      	mov	r1, r9
 8005704:	4640      	mov	r0, r8
 8005706:	47d0      	blx	sl
 8005708:	3001      	adds	r0, #1
 800570a:	d09d      	beq.n	8005648 <_printf_i+0x160>
 800570c:	3501      	adds	r5, #1
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	9903      	ldr	r1, [sp, #12]
 8005712:	1a5b      	subs	r3, r3, r1
 8005714:	42ab      	cmp	r3, r5
 8005716:	dcf2      	bgt.n	80056fe <_printf_i+0x216>
 8005718:	e7eb      	b.n	80056f2 <_printf_i+0x20a>
 800571a:	2500      	movs	r5, #0
 800571c:	f104 0619 	add.w	r6, r4, #25
 8005720:	e7f5      	b.n	800570e <_printf_i+0x226>
 8005722:	bf00      	nop
 8005724:	08005b35 	.word	0x08005b35
 8005728:	08005b46 	.word	0x08005b46

0800572c <__sflush_r>:
 800572c:	898a      	ldrh	r2, [r1, #12]
 800572e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005732:	4605      	mov	r5, r0
 8005734:	0710      	lsls	r0, r2, #28
 8005736:	460c      	mov	r4, r1
 8005738:	d458      	bmi.n	80057ec <__sflush_r+0xc0>
 800573a:	684b      	ldr	r3, [r1, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	dc05      	bgt.n	800574c <__sflush_r+0x20>
 8005740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	dc02      	bgt.n	800574c <__sflush_r+0x20>
 8005746:	2000      	movs	r0, #0
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574e:	2e00      	cmp	r6, #0
 8005750:	d0f9      	beq.n	8005746 <__sflush_r+0x1a>
 8005752:	2300      	movs	r3, #0
 8005754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005758:	682f      	ldr	r7, [r5, #0]
 800575a:	6a21      	ldr	r1, [r4, #32]
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	d032      	beq.n	80057c6 <__sflush_r+0x9a>
 8005760:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	075a      	lsls	r2, r3, #29
 8005766:	d505      	bpl.n	8005774 <__sflush_r+0x48>
 8005768:	6863      	ldr	r3, [r4, #4]
 800576a:	1ac0      	subs	r0, r0, r3
 800576c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800576e:	b10b      	cbz	r3, 8005774 <__sflush_r+0x48>
 8005770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005772:	1ac0      	subs	r0, r0, r3
 8005774:	2300      	movs	r3, #0
 8005776:	4602      	mov	r2, r0
 8005778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800577a:	6a21      	ldr	r1, [r4, #32]
 800577c:	4628      	mov	r0, r5
 800577e:	47b0      	blx	r6
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	d106      	bne.n	8005794 <__sflush_r+0x68>
 8005786:	6829      	ldr	r1, [r5, #0]
 8005788:	291d      	cmp	r1, #29
 800578a:	d82b      	bhi.n	80057e4 <__sflush_r+0xb8>
 800578c:	4a29      	ldr	r2, [pc, #164]	; (8005834 <__sflush_r+0x108>)
 800578e:	410a      	asrs	r2, r1
 8005790:	07d6      	lsls	r6, r2, #31
 8005792:	d427      	bmi.n	80057e4 <__sflush_r+0xb8>
 8005794:	2200      	movs	r2, #0
 8005796:	6062      	str	r2, [r4, #4]
 8005798:	04d9      	lsls	r1, r3, #19
 800579a:	6922      	ldr	r2, [r4, #16]
 800579c:	6022      	str	r2, [r4, #0]
 800579e:	d504      	bpl.n	80057aa <__sflush_r+0x7e>
 80057a0:	1c42      	adds	r2, r0, #1
 80057a2:	d101      	bne.n	80057a8 <__sflush_r+0x7c>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b903      	cbnz	r3, 80057aa <__sflush_r+0x7e>
 80057a8:	6560      	str	r0, [r4, #84]	; 0x54
 80057aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ac:	602f      	str	r7, [r5, #0]
 80057ae:	2900      	cmp	r1, #0
 80057b0:	d0c9      	beq.n	8005746 <__sflush_r+0x1a>
 80057b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b6:	4299      	cmp	r1, r3
 80057b8:	d002      	beq.n	80057c0 <__sflush_r+0x94>
 80057ba:	4628      	mov	r0, r5
 80057bc:	f7ff fbea 	bl	8004f94 <_free_r>
 80057c0:	2000      	movs	r0, #0
 80057c2:	6360      	str	r0, [r4, #52]	; 0x34
 80057c4:	e7c0      	b.n	8005748 <__sflush_r+0x1c>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b0      	blx	r6
 80057cc:	1c41      	adds	r1, r0, #1
 80057ce:	d1c8      	bne.n	8005762 <__sflush_r+0x36>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0c5      	beq.n	8005762 <__sflush_r+0x36>
 80057d6:	2b1d      	cmp	r3, #29
 80057d8:	d001      	beq.n	80057de <__sflush_r+0xb2>
 80057da:	2b16      	cmp	r3, #22
 80057dc:	d101      	bne.n	80057e2 <__sflush_r+0xb6>
 80057de:	602f      	str	r7, [r5, #0]
 80057e0:	e7b1      	b.n	8005746 <__sflush_r+0x1a>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	e7ad      	b.n	8005748 <__sflush_r+0x1c>
 80057ec:	690f      	ldr	r7, [r1, #16]
 80057ee:	2f00      	cmp	r7, #0
 80057f0:	d0a9      	beq.n	8005746 <__sflush_r+0x1a>
 80057f2:	0793      	lsls	r3, r2, #30
 80057f4:	680e      	ldr	r6, [r1, #0]
 80057f6:	bf08      	it	eq
 80057f8:	694b      	ldreq	r3, [r1, #20]
 80057fa:	600f      	str	r7, [r1, #0]
 80057fc:	bf18      	it	ne
 80057fe:	2300      	movne	r3, #0
 8005800:	eba6 0807 	sub.w	r8, r6, r7
 8005804:	608b      	str	r3, [r1, #8]
 8005806:	f1b8 0f00 	cmp.w	r8, #0
 800580a:	dd9c      	ble.n	8005746 <__sflush_r+0x1a>
 800580c:	6a21      	ldr	r1, [r4, #32]
 800580e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005810:	4643      	mov	r3, r8
 8005812:	463a      	mov	r2, r7
 8005814:	4628      	mov	r0, r5
 8005816:	47b0      	blx	r6
 8005818:	2800      	cmp	r0, #0
 800581a:	dc06      	bgt.n	800582a <__sflush_r+0xfe>
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	e78e      	b.n	8005748 <__sflush_r+0x1c>
 800582a:	4407      	add	r7, r0
 800582c:	eba8 0800 	sub.w	r8, r8, r0
 8005830:	e7e9      	b.n	8005806 <__sflush_r+0xda>
 8005832:	bf00      	nop
 8005834:	dfbffffe 	.word	0xdfbffffe

08005838 <_fflush_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	690b      	ldr	r3, [r1, #16]
 800583c:	4605      	mov	r5, r0
 800583e:	460c      	mov	r4, r1
 8005840:	b913      	cbnz	r3, 8005848 <_fflush_r+0x10>
 8005842:	2500      	movs	r5, #0
 8005844:	4628      	mov	r0, r5
 8005846:	bd38      	pop	{r3, r4, r5, pc}
 8005848:	b118      	cbz	r0, 8005852 <_fflush_r+0x1a>
 800584a:	6a03      	ldr	r3, [r0, #32]
 800584c:	b90b      	cbnz	r3, 8005852 <_fflush_r+0x1a>
 800584e:	f7ff fa99 	bl	8004d84 <__sinit>
 8005852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f3      	beq.n	8005842 <_fflush_r+0xa>
 800585a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800585c:	07d0      	lsls	r0, r2, #31
 800585e:	d404      	bmi.n	800586a <_fflush_r+0x32>
 8005860:	0599      	lsls	r1, r3, #22
 8005862:	d402      	bmi.n	800586a <_fflush_r+0x32>
 8005864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005866:	f7ff fb92 	bl	8004f8e <__retarget_lock_acquire_recursive>
 800586a:	4628      	mov	r0, r5
 800586c:	4621      	mov	r1, r4
 800586e:	f7ff ff5d 	bl	800572c <__sflush_r>
 8005872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005874:	07da      	lsls	r2, r3, #31
 8005876:	4605      	mov	r5, r0
 8005878:	d4e4      	bmi.n	8005844 <_fflush_r+0xc>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	059b      	lsls	r3, r3, #22
 800587e:	d4e1      	bmi.n	8005844 <_fflush_r+0xc>
 8005880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005882:	f7ff fb85 	bl	8004f90 <__retarget_lock_release_recursive>
 8005886:	e7dd      	b.n	8005844 <_fflush_r+0xc>

08005888 <__swbuf_r>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	460e      	mov	r6, r1
 800588c:	4614      	mov	r4, r2
 800588e:	4605      	mov	r5, r0
 8005890:	b118      	cbz	r0, 800589a <__swbuf_r+0x12>
 8005892:	6a03      	ldr	r3, [r0, #32]
 8005894:	b90b      	cbnz	r3, 800589a <__swbuf_r+0x12>
 8005896:	f7ff fa75 	bl	8004d84 <__sinit>
 800589a:	69a3      	ldr	r3, [r4, #24]
 800589c:	60a3      	str	r3, [r4, #8]
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	071a      	lsls	r2, r3, #28
 80058a2:	d525      	bpl.n	80058f0 <__swbuf_r+0x68>
 80058a4:	6923      	ldr	r3, [r4, #16]
 80058a6:	b31b      	cbz	r3, 80058f0 <__swbuf_r+0x68>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	6922      	ldr	r2, [r4, #16]
 80058ac:	1a98      	subs	r0, r3, r2
 80058ae:	6963      	ldr	r3, [r4, #20]
 80058b0:	b2f6      	uxtb	r6, r6
 80058b2:	4283      	cmp	r3, r0
 80058b4:	4637      	mov	r7, r6
 80058b6:	dc04      	bgt.n	80058c2 <__swbuf_r+0x3a>
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7ff ffbc 	bl	8005838 <_fflush_r>
 80058c0:	b9e0      	cbnz	r0, 80058fc <__swbuf_r+0x74>
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	60a3      	str	r3, [r4, #8]
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	6022      	str	r2, [r4, #0]
 80058ce:	701e      	strb	r6, [r3, #0]
 80058d0:	6962      	ldr	r2, [r4, #20]
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d004      	beq.n	80058e2 <__swbuf_r+0x5a>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	07db      	lsls	r3, r3, #31
 80058dc:	d506      	bpl.n	80058ec <__swbuf_r+0x64>
 80058de:	2e0a      	cmp	r6, #10
 80058e0:	d104      	bne.n	80058ec <__swbuf_r+0x64>
 80058e2:	4621      	mov	r1, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f7ff ffa7 	bl	8005838 <_fflush_r>
 80058ea:	b938      	cbnz	r0, 80058fc <__swbuf_r+0x74>
 80058ec:	4638      	mov	r0, r7
 80058ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f0:	4621      	mov	r1, r4
 80058f2:	4628      	mov	r0, r5
 80058f4:	f000 f806 	bl	8005904 <__swsetup_r>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d0d5      	beq.n	80058a8 <__swbuf_r+0x20>
 80058fc:	f04f 37ff 	mov.w	r7, #4294967295
 8005900:	e7f4      	b.n	80058ec <__swbuf_r+0x64>
	...

08005904 <__swsetup_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <__swsetup_r+0xac>)
 8005908:	4605      	mov	r5, r0
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	460c      	mov	r4, r1
 800590e:	b118      	cbz	r0, 8005918 <__swsetup_r+0x14>
 8005910:	6a03      	ldr	r3, [r0, #32]
 8005912:	b90b      	cbnz	r3, 8005918 <__swsetup_r+0x14>
 8005914:	f7ff fa36 	bl	8004d84 <__sinit>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800591e:	0718      	lsls	r0, r3, #28
 8005920:	d422      	bmi.n	8005968 <__swsetup_r+0x64>
 8005922:	06d9      	lsls	r1, r3, #27
 8005924:	d407      	bmi.n	8005936 <__swsetup_r+0x32>
 8005926:	2309      	movs	r3, #9
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	e034      	b.n	80059a0 <__swsetup_r+0x9c>
 8005936:	0758      	lsls	r0, r3, #29
 8005938:	d512      	bpl.n	8005960 <__swsetup_r+0x5c>
 800593a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800593c:	b141      	cbz	r1, 8005950 <__swsetup_r+0x4c>
 800593e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005942:	4299      	cmp	r1, r3
 8005944:	d002      	beq.n	800594c <__swsetup_r+0x48>
 8005946:	4628      	mov	r0, r5
 8005948:	f7ff fb24 	bl	8004f94 <_free_r>
 800594c:	2300      	movs	r3, #0
 800594e:	6363      	str	r3, [r4, #52]	; 0x34
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	2300      	movs	r3, #0
 800595a:	6063      	str	r3, [r4, #4]
 800595c:	6923      	ldr	r3, [r4, #16]
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	f043 0308 	orr.w	r3, r3, #8
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	6923      	ldr	r3, [r4, #16]
 800596a:	b94b      	cbnz	r3, 8005980 <__swsetup_r+0x7c>
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005976:	d003      	beq.n	8005980 <__swsetup_r+0x7c>
 8005978:	4621      	mov	r1, r4
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f850 	bl	8005a20 <__smakebuf_r>
 8005980:	89a0      	ldrh	r0, [r4, #12]
 8005982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005986:	f010 0301 	ands.w	r3, r0, #1
 800598a:	d00a      	beq.n	80059a2 <__swsetup_r+0x9e>
 800598c:	2300      	movs	r3, #0
 800598e:	60a3      	str	r3, [r4, #8]
 8005990:	6963      	ldr	r3, [r4, #20]
 8005992:	425b      	negs	r3, r3
 8005994:	61a3      	str	r3, [r4, #24]
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	b943      	cbnz	r3, 80059ac <__swsetup_r+0xa8>
 800599a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800599e:	d1c4      	bne.n	800592a <__swsetup_r+0x26>
 80059a0:	bd38      	pop	{r3, r4, r5, pc}
 80059a2:	0781      	lsls	r1, r0, #30
 80059a4:	bf58      	it	pl
 80059a6:	6963      	ldrpl	r3, [r4, #20]
 80059a8:	60a3      	str	r3, [r4, #8]
 80059aa:	e7f4      	b.n	8005996 <__swsetup_r+0x92>
 80059ac:	2000      	movs	r0, #0
 80059ae:	e7f7      	b.n	80059a0 <__swsetup_r+0x9c>
 80059b0:	20000064 	.word	0x20000064

080059b4 <_sbrk_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d06      	ldr	r5, [pc, #24]	; (80059d0 <_sbrk_r+0x1c>)
 80059b8:	2300      	movs	r3, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	f7fb fb8e 	bl	80010e0 <_sbrk>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_sbrk_r+0x1a>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_sbrk_r+0x1a>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	200009c8 	.word	0x200009c8

080059d4 <__swhatbuf_r>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	460c      	mov	r4, r1
 80059d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059dc:	2900      	cmp	r1, #0
 80059de:	b096      	sub	sp, #88	; 0x58
 80059e0:	4615      	mov	r5, r2
 80059e2:	461e      	mov	r6, r3
 80059e4:	da0d      	bge.n	8005a02 <__swhatbuf_r+0x2e>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	bf0c      	ite	eq
 80059f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80059f6:	2340      	movne	r3, #64	; 0x40
 80059f8:	2000      	movs	r0, #0
 80059fa:	6031      	str	r1, [r6, #0]
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	b016      	add	sp, #88	; 0x58
 8005a00:	bd70      	pop	{r4, r5, r6, pc}
 8005a02:	466a      	mov	r2, sp
 8005a04:	f000 f848 	bl	8005a98 <_fstat_r>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	dbec      	blt.n	80059e6 <__swhatbuf_r+0x12>
 8005a0c:	9901      	ldr	r1, [sp, #4]
 8005a0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005a12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005a16:	4259      	negs	r1, r3
 8005a18:	4159      	adcs	r1, r3
 8005a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a1e:	e7eb      	b.n	80059f8 <__swhatbuf_r+0x24>

08005a20 <__smakebuf_r>:
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a24:	079d      	lsls	r5, r3, #30
 8005a26:	4606      	mov	r6, r0
 8005a28:	460c      	mov	r4, r1
 8005a2a:	d507      	bpl.n	8005a3c <__smakebuf_r+0x1c>
 8005a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	2301      	movs	r3, #1
 8005a36:	6163      	str	r3, [r4, #20]
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	ab01      	add	r3, sp, #4
 8005a3e:	466a      	mov	r2, sp
 8005a40:	f7ff ffc8 	bl	80059d4 <__swhatbuf_r>
 8005a44:	9900      	ldr	r1, [sp, #0]
 8005a46:	4605      	mov	r5, r0
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f7ff fb0f 	bl	800506c <_malloc_r>
 8005a4e:	b948      	cbnz	r0, 8005a64 <__smakebuf_r+0x44>
 8005a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a54:	059a      	lsls	r2, r3, #22
 8005a56:	d4ef      	bmi.n	8005a38 <__smakebuf_r+0x18>
 8005a58:	f023 0303 	bic.w	r3, r3, #3
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	e7e3      	b.n	8005a2c <__smakebuf_r+0xc>
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	6020      	str	r0, [r4, #0]
 8005a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	9b00      	ldr	r3, [sp, #0]
 8005a70:	6163      	str	r3, [r4, #20]
 8005a72:	9b01      	ldr	r3, [sp, #4]
 8005a74:	6120      	str	r0, [r4, #16]
 8005a76:	b15b      	cbz	r3, 8005a90 <__smakebuf_r+0x70>
 8005a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f000 f81d 	bl	8005abc <_isatty_r>
 8005a82:	b128      	cbz	r0, 8005a90 <__smakebuf_r+0x70>
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	f043 0301 	orr.w	r3, r3, #1
 8005a8e:	81a3      	strh	r3, [r4, #12]
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	431d      	orrs	r5, r3
 8005a94:	81a5      	strh	r5, [r4, #12]
 8005a96:	e7cf      	b.n	8005a38 <__smakebuf_r+0x18>

08005a98 <_fstat_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d07      	ldr	r5, [pc, #28]	; (8005ab8 <_fstat_r+0x20>)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	602b      	str	r3, [r5, #0]
 8005aa6:	f7fb faf2 	bl	800108e <_fstat>
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	d102      	bne.n	8005ab4 <_fstat_r+0x1c>
 8005aae:	682b      	ldr	r3, [r5, #0]
 8005ab0:	b103      	cbz	r3, 8005ab4 <_fstat_r+0x1c>
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	bd38      	pop	{r3, r4, r5, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200009c8 	.word	0x200009c8

08005abc <_isatty_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d06      	ldr	r5, [pc, #24]	; (8005ad8 <_isatty_r+0x1c>)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	f7fb faf1 	bl	80010ae <_isatty>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_isatty_r+0x1a>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_isatty_r+0x1a>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	200009c8 	.word	0x200009c8

08005adc <_init>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr

08005ae8 <_fini>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr
