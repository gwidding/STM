
flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d70  08003d70  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d78  08003d78  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000008ec  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000948  20000948  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dfe2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d19  00000000  00000000  0002e0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b30  00000000  00000000  0002fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008a2  00000000  00000000  00030900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f4a  00000000  00000000  000311a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cf9f  00000000  00000000  000550ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9bf2  00000000  00000000  0006208b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003434  00000000  00000000  0013bc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0013f0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003cf4 	.word	0x08003cf4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003cf4 	.word	0x08003cf4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fc29 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f837 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f945 	bl	8000828 <MX_GPIO_Init>
  MX_ETH_Init();
 800059e:	f000 f89d 	bl	80006dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a2:	f000 f8e9 	bl	8000778 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a6:	f000 f911 	bl	80007cc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  addr = 0x08000000;
 80005aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 10; i++) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005b4:	e020      	b.n	80005f8 <main+0x6c>
		value = *((unsigned int*) (addr + i*4));
 80005b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b8:	009a      	lsls	r2, r3, #2
 80005ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005bc:	4413      	add	r3, r2
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(buf, "addr[%08x] = 0x%08x \r\n", (addr+4*i), value);
 80005c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c4:	009a      	lsls	r2, r3, #2
 80005c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c8:	441a      	add	r2, r3
 80005ca:	1d38      	adds	r0, r7, #4
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	490c      	ldr	r1, [pc, #48]	; (8000600 <main+0x74>)
 80005d0:	f002 feec 	bl	80033ac <siprintf>
		error = HAL_UART_Transmit(&huart3, buf, sizeof(buf), 0xFFFF);
 80005d4:	1d39      	adds	r1, r7, #4
 80005d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005da:	221e      	movs	r2, #30
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <main+0x78>)
 80005de:	f002 f86e 	bl	80026be <HAL_UART_Transmit>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (error != HAL_OK) {
 80005e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d000      	beq.n	80005f2 <main+0x66>
			while(1);
 80005f0:	e7fe      	b.n	80005f0 <main+0x64>
	for (i = 0; i < 10; i++) {
 80005f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f4:	3301      	adds	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fa:	2b09      	cmp	r3, #9
 80005fc:	d9db      	bls.n	80005b6 <main+0x2a>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x72>
 8000600:	08003d0c 	.word	0x08003d0c
 8000604:	200002a0 	.word	0x200002a0

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fee8 	bl	80033ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800067c:	23a8      	movs	r3, #168	; 0xa8
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fb31 	bl	8001cf4 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f974 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fd92 	bl	80021e4 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f95d 	bl	8000984 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_ETH_Init+0x84>)
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <MX_ETH_Init+0x88>)
 80006e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_ETH_Init+0x8c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_ETH_Init+0x8c>)
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_ETH_Init+0x8c>)
 80006f4:	22e1      	movs	r2, #225	; 0xe1
 80006f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_ETH_Init+0x8c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_ETH_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_ETH_Init+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_ETH_Init+0x84>)
 800070c:	4a16      	ldr	r2, [pc, #88]	; (8000768 <MX_ETH_Init+0x8c>)
 800070e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_ETH_Init+0x84>)
 8000712:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000716:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_ETH_Init+0x84>)
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <MX_ETH_Init+0x90>)
 800071c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_ETH_Init+0x84>)
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <MX_ETH_Init+0x94>)
 8000722:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_ETH_Init+0x84>)
 8000726:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800072a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_ETH_Init+0x84>)
 800072e:	f000 fcd7 	bl	80010e0 <HAL_ETH_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f924 	bl	8000984 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800073c:	2238      	movs	r2, #56	; 0x38
 800073e:	2100      	movs	r1, #0
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <MX_ETH_Init+0x98>)
 8000742:	f002 fe53 	bl	80033ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_ETH_Init+0x98>)
 8000748:	2221      	movs	r2, #33	; 0x21
 800074a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_ETH_Init+0x98>)
 800074e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000752:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_ETH_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200001f0 	.word	0x200001f0
 8000764:	40028000 	.word	0x40028000
 8000768:	200007f0 	.word	0x200007f0
 800076c:	20000150 	.word	0x20000150
 8000770:	200000b0 	.word	0x200000b0
 8000774:	20000078 	.word	0x20000078

08000778 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART3_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 80007b0:	f001 ff38 	bl	8002624 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f8e3 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200002a0 	.word	0x200002a0
 80007c8:	40004800 	.word	0x40004800

080007cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2204      	movs	r2, #4
 80007dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	2202      	movs	r2, #2
 80007ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2201      	movs	r2, #1
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	f001 f953 	bl	8001aba <HAL_PCD_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800081a:	f000 f8b3 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200002e4 	.word	0x200002e4

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4b4c      	ldr	r3, [pc, #304]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a4b      	ldr	r2, [pc, #300]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b49      	ldr	r3, [pc, #292]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b45      	ldr	r3, [pc, #276]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a44      	ldr	r2, [pc, #272]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b42      	ldr	r3, [pc, #264]	; (8000974 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a3d      	ldr	r2, [pc, #244]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a36      	ldr	r2, [pc, #216]	; (8000974 <MX_GPIO_Init+0x14c>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a2f      	ldr	r2, [pc, #188]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a28      	ldr	r2, [pc, #160]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008ec:	4822      	ldr	r0, [pc, #136]	; (8000978 <MX_GPIO_Init+0x150>)
 80008ee:	f001 f8cb 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	4821      	ldr	r0, [pc, #132]	; (800097c <MX_GPIO_Init+0x154>)
 80008f8:	f001 f8c6 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <MX_GPIO_Init+0x158>)
 8000914:	f000 ff0c 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000918:	f244 0381 	movw	r3, #16513	; 0x4081
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <MX_GPIO_Init+0x150>)
 8000932:	f000 fefd 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <MX_GPIO_Init+0x154>)
 800094e:	f000 feef 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_GPIO_Init+0x154>)
 8000966:	f000 fee3 	bl	8001730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020400 	.word	0x40020400
 800097c:	40021800 	.word	0x40021800
 8000980:	40020800 	.word	0x40020800

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a55      	ldr	r2, [pc, #340]	; (8000b54 <HAL_ETH_MspInit+0x174>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	f040 80a4 	bne.w	8000b4c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
 8000a08:	4b53      	ldr	r3, [pc, #332]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	4a52      	ldr	r2, [pc, #328]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
 8000a14:	4b50      	ldr	r3, [pc, #320]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a1c:	623b      	str	r3, [r7, #32]
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
 8000a24:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4a4b      	ldr	r2, [pc, #300]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a30:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a38:	61fb      	str	r3, [r7, #28]
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	4b45      	ldr	r3, [pc, #276]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	4a44      	ldr	r2, [pc, #272]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4c:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a3d      	ldr	r2, [pc, #244]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
 8000a68:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ac8:	2332      	movs	r3, #50	; 0x32
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481e      	ldr	r0, [pc, #120]	; (8000b5c <HAL_ETH_MspInit+0x17c>)
 8000ae4:	f000 fe24 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ae8:	2386      	movs	r3, #134	; 0x86
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af8:	230b      	movs	r3, #11
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4817      	ldr	r0, [pc, #92]	; (8000b60 <HAL_ETH_MspInit+0x180>)
 8000b04:	f000 fe14 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <HAL_ETH_MspInit+0x184>)
 8000b26:	f000 fe03 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <HAL_ETH_MspInit+0x188>)
 8000b48:	f000 fdf2 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3738      	adds	r7, #56	; 0x38
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40028000 	.word	0x40028000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40021800 	.word	0x40021800

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_UART_MspInit+0x84>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12c      	bne.n	8000be8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_UART_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_UART_MspInit+0x8c>)
 8000be4:	f000 fda4 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40004800 	.word	0x40004800
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c1c:	d13f      	bne.n	8000c9e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_PCD_MspInit+0xac>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <HAL_PCD_MspInit+0xac>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <HAL_PCD_MspInit+0xac>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4815      	ldr	r0, [pc, #84]	; (8000cac <HAL_PCD_MspInit+0xb0>)
 8000c58:	f000 fd6a 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480e      	ldr	r0, [pc, #56]	; (8000cac <HAL_PCD_MspInit+0xb0>)
 8000c72:	f000 fd5d 	bl	8001730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_PCD_MspInit+0xac>)
 8000c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <HAL_PCD_MspInit+0xac>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6353      	str	r3, [r2, #52]	; 0x34
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_PCD_MspInit+0xac>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_PCD_MspInit+0xac>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_PCD_MspInit+0xac>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f8c6 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f002 fb62 	bl	80033fc <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20030000 	.word	0x20030000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	200007f8 	.word	0x200007f8
 8000d6c:	20000948 	.word	0x20000948

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f002 fb21 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbe1 	bl	800058c <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dcc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dd8:	08003d80 	.word	0x08003d80
  ldr r2, =_sbss
 8000ddc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000de0:	20000948 	.word	0x20000948

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f931 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fdb8 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f93b 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f911 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200007fc 	.word	0x200007fc

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200007fc 	.word	0x200007fc

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff47 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff5c 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff8e 	bl	8000fcc <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5d 	bl	8000f78 <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffb0 	bl	8001034 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e06c      	b.n	80011cc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d106      	bne.n	800110a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2223      	movs	r2, #35	; 0x23
 8001100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff fc6b 	bl	80009e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <HAL_ETH_Init+0xf4>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <HAL_ETH_Init+0xf4>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_ETH_Init+0xf4>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <HAL_ETH_Init+0xf8>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a2b      	ldr	r2, [pc, #172]	; (80011d8 <HAL_ETH_Init+0xf8>)
 800112c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001130:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <HAL_ETH_Init+0xf8>)
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	4927      	ldr	r1, [pc, #156]	; (80011d8 <HAL_ETH_Init+0xf8>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <HAL_ETH_Init+0xf8>)
 8001142:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800115a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff feaa 	bl	8000eb4 <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001162:	e011      	b.n	8001188 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001164:	f7ff fea6 	bl	8000eb4 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001172:	d909      	bls.n	8001188 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2204      	movs	r2, #4
 8001178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	22e0      	movs	r2, #224	; 0xe0
 8001180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e021      	b.n	80011cc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e4      	bne.n	8001164 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f958 	bl	8001450 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f9ff 	bl	80015a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fa55 	bl	8001656 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	461a      	mov	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f9bd 	bl	8001534 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2210      	movs	r2, #16
 80011c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800

080011dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4b51      	ldr	r3, [pc, #324]	; (8001338 <ETH_SetMACConfig+0x15c>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	7c1b      	ldrb	r3, [r3, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <ETH_SetMACConfig+0x28>
 80011fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001202:	e000      	b.n	8001206 <ETH_SetMACConfig+0x2a>
 8001204:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	7c5b      	ldrb	r3, [r3, #17]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <ETH_SetMACConfig+0x38>
 800120e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001212:	e000      	b.n	8001216 <ETH_SetMACConfig+0x3a>
 8001214:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001216:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800121c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	7fdb      	ldrb	r3, [r3, #31]
 8001222:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001224:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800122a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	7f92      	ldrb	r2, [r2, #30]
 8001230:	2a00      	cmp	r2, #0
 8001232:	d102      	bne.n	800123a <ETH_SetMACConfig+0x5e>
 8001234:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001238:	e000      	b.n	800123c <ETH_SetMACConfig+0x60>
 800123a:	2200      	movs	r2, #0
                        macconf->Speed |
 800123c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	7f1b      	ldrb	r3, [r3, #28]
 8001242:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001244:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800124a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	791b      	ldrb	r3, [r3, #4]
 8001250:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001252:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	f892 2020 	ldrb.w	r2, [r2, #32]
 800125a:	2a00      	cmp	r2, #0
 800125c:	d102      	bne.n	8001264 <ETH_SetMACConfig+0x88>
 800125e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001262:	e000      	b.n	8001266 <ETH_SetMACConfig+0x8a>
 8001264:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001266:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	7bdb      	ldrb	r3, [r3, #15]
 800126c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800126e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001274:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800127c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800127e:	4313      	orrs	r3, r2
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fe18 	bl	8000ecc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	f64f 7341 	movw	r3, #65345	; 0xff41
 80012b2:	4013      	ands	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d101      	bne.n	80012ca <ETH_SetMACConfig+0xee>
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	e000      	b.n	80012cc <ETH_SetMACConfig+0xf0>
 80012ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80012da:	2a01      	cmp	r2, #1
 80012dc:	d101      	bne.n	80012e2 <ETH_SetMACConfig+0x106>
 80012de:	2208      	movs	r2, #8
 80012e0:	e000      	b.n	80012e4 <ETH_SetMACConfig+0x108>
 80012e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80012e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80012ec:	2a01      	cmp	r2, #1
 80012ee:	d101      	bne.n	80012f4 <ETH_SetMACConfig+0x118>
 80012f0:	2204      	movs	r2, #4
 80012f2:	e000      	b.n	80012f6 <ETH_SetMACConfig+0x11a>
 80012f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80012fe:	2a01      	cmp	r2, #1
 8001300:	d101      	bne.n	8001306 <ETH_SetMACConfig+0x12a>
 8001302:	2202      	movs	r2, #2
 8001304:	e000      	b.n	8001308 <ETH_SetMACConfig+0x12c>
 8001306:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001308:	4313      	orrs	r3, r2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff fdd3 	bl	8000ecc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	ff20810f 	.word	0xff20810f

0800133c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <ETH_SetDMAConfig+0x110>)
 8001356:	4013      	ands	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	7b1b      	ldrb	r3, [r3, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <ETH_SetDMAConfig+0x2c>
 8001362:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001366:	e000      	b.n	800136a <ETH_SetDMAConfig+0x2e>
 8001368:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	7b5b      	ldrb	r3, [r3, #13]
 800136e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001370:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	7f52      	ldrb	r2, [r2, #29]
 8001376:	2a00      	cmp	r2, #0
 8001378:	d102      	bne.n	8001380 <ETH_SetDMAConfig+0x44>
 800137a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800137e:	e000      	b.n	8001382 <ETH_SetDMAConfig+0x46>
 8001380:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001382:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	7b9b      	ldrb	r3, [r3, #14]
 8001388:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800138a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001390:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	7f1b      	ldrb	r3, [r3, #28]
 8001396:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001398:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	7f9b      	ldrb	r3, [r3, #30]
 800139e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013b0:	4313      	orrs	r3, r2
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fd7a 	bl	8000ecc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80013f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80013fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001404:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001406:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800140e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001414:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800141e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001422:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff fd4b 	bl	8000ecc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	f8de3f23 	.word	0xf8de3f23

08001450 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0a6      	sub	sp, #152	; 0x98
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001458:	2301      	movs	r3, #1
 800145a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800145e:	2301      	movs	r3, #1
 8001460:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001464:	2300      	movs	r3, #0
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800147a:	2301      	movs	r3, #1
 800147c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800148c:	2300      	movs	r3, #0
 800148e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001496:	2300      	movs	r3, #0
 8001498:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80014b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80014c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fe86 	bl	80011dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80014d4:	2301      	movs	r3, #1
 80014d6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80014d8:	2301      	movs	r3, #1
 80014da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80014de:	2301      	movs	r3, #1
 80014e0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001506:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001510:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001512:	2301      	movs	r3, #1
 8001514:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001518:	2300      	movs	r3, #0
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ff08 	bl	800133c <ETH_SetDMAConfig>
}
 800152c:	bf00      	nop
 800152e:	3798      	adds	r7, #152	; 0x98
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3305      	adds	r3, #5
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	3204      	adds	r2, #4
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	4313      	orrs	r3, r2
 8001550:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <ETH_MACAddressConfig+0x68>)
 8001556:	4413      	add	r3, r2
 8001558:	461a      	mov	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3303      	adds	r3, #3
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	061a      	lsls	r2, r3, #24
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3302      	adds	r3, #2
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3301      	adds	r3, #1
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	4313      	orrs	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <ETH_MACAddressConfig+0x6c>)
 8001586:	4413      	add	r3, r2
 8001588:	461a      	mov	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	6013      	str	r3, [r2, #0]
}
 800158e:	bf00      	nop
 8001590:	371c      	adds	r7, #28
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40028040 	.word	0x40028040
 80015a0:	40028044 	.word	0x40028044

080015a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e03e      	b.n	8001630 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68d9      	ldr	r1, [r3, #12]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	3206      	adds	r2, #6
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d80c      	bhi.n	8001614 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	461a      	mov	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	e004      	b.n	800161e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	461a      	mov	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3301      	adds	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d9bd      	bls.n	80015b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001648:	611a      	str	r2, [r3, #16]
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e046      	b.n	80016f2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6919      	ldr	r1, [r3, #16]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80016a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	3212      	adds	r2, #18
 80016be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d80c      	bhi.n	80016e2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6919      	ldr	r1, [r3, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	440b      	add	r3, r1
 80016da:	461a      	mov	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	e004      	b.n	80016ec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d9b5      	bls.n	8001664 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001722:	60da      	str	r2, [r3, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e177      	b.n	8001a3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	f040 8166 	bne.w	8001a36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d005      	beq.n	8001782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177e:	2b02      	cmp	r3, #2
 8001780:	d130      	bne.n	80017e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d017      	beq.n	8001820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d123      	bne.n	8001874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	69b9      	ldr	r1, [r7, #24]
 8001870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80c0 	beq.w	8001a36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a65      	ldr	r2, [pc, #404]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d2:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <HAL_GPIO_Init+0x328>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_GPIO_Init+0x32c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d037      	beq.n	800196e <HAL_GPIO_Init+0x23e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_GPIO_Init+0x330>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d031      	beq.n	800196a <HAL_GPIO_Init+0x23a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a56      	ldr	r2, [pc, #344]	; (8001a64 <HAL_GPIO_Init+0x334>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d02b      	beq.n	8001966 <HAL_GPIO_Init+0x236>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a55      	ldr	r2, [pc, #340]	; (8001a68 <HAL_GPIO_Init+0x338>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x232>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a54      	ldr	r2, [pc, #336]	; (8001a6c <HAL_GPIO_Init+0x33c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x22e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a53      	ldr	r2, [pc, #332]	; (8001a70 <HAL_GPIO_Init+0x340>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x22a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <HAL_GPIO_Init+0x344>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x226>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_GPIO_Init+0x348>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x222>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a50      	ldr	r2, [pc, #320]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x21e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4f      	ldr	r2, [pc, #316]	; (8001a80 <HAL_GPIO_Init+0x350>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x21a>
 8001946:	2309      	movs	r3, #9
 8001948:	e012      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800194a:	230a      	movs	r3, #10
 800194c:	e010      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800194e:	2308      	movs	r3, #8
 8001950:	e00e      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001952:	2307      	movs	r3, #7
 8001954:	e00c      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001956:	2306      	movs	r3, #6
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800195a:	2305      	movs	r3, #5
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800196e:	2300      	movs	r3, #0
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001980:	4935      	ldr	r1, [pc, #212]	; (8001a58 <HAL_GPIO_Init+0x328>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b2:	4a34      	ldr	r2, [pc, #208]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b8:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019dc:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a06:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	f67f ae84 	bls.w	800174c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40021c00 	.word	0x40021c00
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	40022400 	.word	0x40022400
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abc:	b08f      	sub	sp, #60	; 0x3c
 8001abe:	af0a      	add	r7, sp, #40	; 0x28
 8001ac0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e10f      	b.n	8001cec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff f888 	bl	8000bfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 f9ad 	bl	8002e6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	687e      	ldr	r6, [r7, #4]
 8001b18:	466d      	mov	r5, sp
 8001b1a:	f106 0410 	add.w	r4, r6, #16
 8001b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b2e:	1d33      	adds	r3, r6, #4
 8001b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f001 f938 	bl	8002da8 <USB_CoreInit>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0d0      	b.n	8001cec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 f99b 	bl	8002e8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e04a      	b.n	8001bf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	333d      	adds	r3, #61	; 0x3d
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333c      	adds	r3, #60	; 0x3c
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	b298      	uxth	r0, r3
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3344      	adds	r3, #68	; 0x44
 8001b98:	4602      	mov	r2, r0
 8001b9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3340      	adds	r3, #64	; 0x40
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3348      	adds	r3, #72	; 0x48
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	334c      	adds	r3, #76	; 0x4c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3354      	adds	r3, #84	; 0x54
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3af      	bcc.n	8001b5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e044      	b.n	8001c8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3b5      	bcc.n	8001c02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	687e      	ldr	r6, [r7, #4]
 8001c9e:	466d      	mov	r5, sp
 8001ca0:	f106 0410 	add.w	r4, r6, #16
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb4:	1d33      	adds	r3, r6, #4
 8001cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f001 f933 	bl	8002f24 <USB_DevInit>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e00d      	b.n	8001cec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 fafe 	bl	80032e6 <USB_DevDisconnect>

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e267      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d075      	beq.n	8001dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d12:	4b88      	ldr	r3, [pc, #544]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d00c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1e:	4b85      	ldr	r3, [pc, #532]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d112      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b82      	ldr	r3, [pc, #520]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d36:	d10b      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	4b7e      	ldr	r3, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d05b      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d157      	bne.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e242      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d106      	bne.n	8001d68 <HAL_RCC_OscConfig+0x74>
 8001d5a:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a75      	ldr	r2, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e01d      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4b70      	ldr	r3, [pc, #448]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6f      	ldr	r2, [pc, #444]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6c      	ldr	r2, [pc, #432]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d8c:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a68      	ldr	r2, [pc, #416]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a65      	ldr	r2, [pc, #404]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff f882 	bl	8000eb4 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff f87e 	bl	8000eb4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e207      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b5b      	ldr	r3, [pc, #364]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f86e 	bl	8000eb4 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff f86a 	bl	8000eb4 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1f3      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d063      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d11c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b44      	ldr	r3, [pc, #272]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e1c7      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4937      	ldr	r1, [pc, #220]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	e03a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_RCC_OscConfig+0x244>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f823 	bl	8000eb4 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff f81f 	bl	8000eb4 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e1a8      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4925      	ldr	r1, [pc, #148]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_OscConfig+0x244>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff f802 	bl	8000eb4 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7fe fffe 	bl	8000eb4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e187      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d036      	beq.n	8001f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d016      	beq.n	8001f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_RCC_OscConfig+0x248>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7fe ffe2 	bl	8000eb4 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7fe ffde 	bl	8000eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e167      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x200>
 8001f12:	e01b      	b.n	8001f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x248>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe ffcb 	bl	8000eb4 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	e00e      	b.n	8001f40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f22:	f7fe ffc7 	bl	8000eb4 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d907      	bls.n	8001f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e150      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
 8001f34:	40023800 	.word	0x40023800
 8001f38:	42470000 	.word	0x42470000
 8001f3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b88      	ldr	r3, [pc, #544]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ea      	bne.n	8001f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8097 	beq.w	8002088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a7c      	ldr	r2, [pc, #496]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b77      	ldr	r3, [pc, #476]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4b74      	ldr	r3, [pc, #464]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a73      	ldr	r2, [pc, #460]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe ff87 	bl	8000eb4 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe ff83 	bl	8000eb4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e10c      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x2ea>
 8001fd0:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a63      	ldr	r2, [pc, #396]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x324>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x30c>
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a5e      	ldr	r2, [pc, #376]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a5b      	ldr	r2, [pc, #364]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x324>
 8002000:	4b58      	ldr	r3, [pc, #352]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a57      	ldr	r2, [pc, #348]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	4b55      	ldr	r3, [pc, #340]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a54      	ldr	r2, [pc, #336]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7fe ff48 	bl	8000eb4 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe ff44 	bl	8000eb4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0cb      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <HAL_RCC_OscConfig+0x334>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7fe ff32 	bl	8000eb4 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7fe ff2e 	bl	8000eb4 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e0b5      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206a:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ee      	bne.n	8002054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207c:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a38      	ldr	r2, [pc, #224]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a1 	beq.w	80021d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002092:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b08      	cmp	r3, #8
 800209c:	d05c      	beq.n	8002158 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d141      	bne.n	800212a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RCC_OscConfig+0x478>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe ff02 	bl	8000eb4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fefe 	bl	8000eb4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e087      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	085b      	lsrs	r3, r3, #1
 80020ea:	3b01      	subs	r3, #1
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	491b      	ldr	r1, [pc, #108]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x478>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe fed7 	bl	8000eb4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe fed3 	bl	8000eb4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e05c      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x416>
 8002128:	e054      	b.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_RCC_OscConfig+0x478>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fec0 	bl	8000eb4 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe febc 	bl	8000eb4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e045      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x444>
 8002156:	e03d      	b.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e038      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
 8002164:	40023800 	.word	0x40023800
 8002168:	40007000 	.word	0x40007000
 800216c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_RCC_OscConfig+0x4ec>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d028      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d121      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d11a      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d111      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0cc      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b68      	ldr	r3, [pc, #416]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d90c      	bls.n	8002220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0b8      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002238:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800225a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	494d      	ldr	r1, [pc, #308]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d044      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d119      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e067      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4934      	ldr	r1, [pc, #208]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fdee 	bl	8000eb4 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fdea 	bl	8000eb4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e04f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d20c      	bcs.n	800232c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e032      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4916      	ldr	r1, [pc, #88]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	490e      	ldr	r1, [pc, #56]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236a:	f000 f821 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	490a      	ldr	r1, [pc, #40]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	5ccb      	ldrb	r3, [r1, r3]
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fd4e 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08003d24 	.word	0x08003d24
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b4:	b094      	sub	sp, #80	; 0x50
 80023b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	647b      	str	r3, [r7, #68]	; 0x44
 80023bc:	2300      	movs	r3, #0
 80023be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c0:	2300      	movs	r3, #0
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c8:	4b79      	ldr	r3, [pc, #484]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d00d      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x40>
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	f200 80e1 	bhi.w	800259c <HAL_RCC_GetSysClockFreq+0x1ec>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x34>
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x3a>
 80023e2:	e0db      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b73      	ldr	r3, [pc, #460]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80023e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023e8:	e0db      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ea:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80023ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ee:	e0d8      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f0:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fa:	4b6d      	ldr	r3, [pc, #436]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d063      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002406:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	2200      	movs	r2, #0
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002410:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
 800241e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002422:	4622      	mov	r2, r4
 8002424:	462b      	mov	r3, r5
 8002426:	f04f 0000 	mov.w	r0, #0
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	0159      	lsls	r1, r3, #5
 8002430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002434:	0150      	lsls	r0, r2, #5
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4621      	mov	r1, r4
 800243c:	1a51      	subs	r1, r2, r1
 800243e:	6139      	str	r1, [r7, #16]
 8002440:	4629      	mov	r1, r5
 8002442:	eb63 0301 	sbc.w	r3, r3, r1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002454:	4659      	mov	r1, fp
 8002456:	018b      	lsls	r3, r1, #6
 8002458:	4651      	mov	r1, sl
 800245a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800245e:	4651      	mov	r1, sl
 8002460:	018a      	lsls	r2, r1, #6
 8002462:	4651      	mov	r1, sl
 8002464:	ebb2 0801 	subs.w	r8, r2, r1
 8002468:	4659      	mov	r1, fp
 800246a:	eb63 0901 	sbc.w	r9, r3, r1
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800247e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002482:	4690      	mov	r8, r2
 8002484:	4699      	mov	r9, r3
 8002486:	4623      	mov	r3, r4
 8002488:	eb18 0303 	adds.w	r3, r8, r3
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	462b      	mov	r3, r5
 8002490:	eb49 0303 	adc.w	r3, r9, r3
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024a2:	4629      	mov	r1, r5
 80024a4:	024b      	lsls	r3, r1, #9
 80024a6:	4621      	mov	r1, r4
 80024a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024ac:	4621      	mov	r1, r4
 80024ae:	024a      	lsls	r2, r1, #9
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b6:	2200      	movs	r2, #0
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c0:	f7fd fee6 	bl	8000290 <__aeabi_uldivmod>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4613      	mov	r3, r2
 80024ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024cc:	e058      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ce:	4b38      	ldr	r3, [pc, #224]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	2200      	movs	r2, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	4611      	mov	r1, r2
 80024da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
 80024e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024e8:	4642      	mov	r2, r8
 80024ea:	464b      	mov	r3, r9
 80024ec:	f04f 0000 	mov.w	r0, #0
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	0159      	lsls	r1, r3, #5
 80024f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fa:	0150      	lsls	r0, r2, #5
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4641      	mov	r1, r8
 8002502:	ebb2 0a01 	subs.w	sl, r2, r1
 8002506:	4649      	mov	r1, r9
 8002508:	eb63 0b01 	sbc.w	fp, r3, r1
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002518:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800251c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002520:	ebb2 040a 	subs.w	r4, r2, sl
 8002524:	eb63 050b 	sbc.w	r5, r3, fp
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	00eb      	lsls	r3, r5, #3
 8002532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002536:	00e2      	lsls	r2, r4, #3
 8002538:	4614      	mov	r4, r2
 800253a:	461d      	mov	r5, r3
 800253c:	4643      	mov	r3, r8
 800253e:	18e3      	adds	r3, r4, r3
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	464b      	mov	r3, r9
 8002544:	eb45 0303 	adc.w	r3, r5, r3
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002556:	4629      	mov	r1, r5
 8002558:	028b      	lsls	r3, r1, #10
 800255a:	4621      	mov	r1, r4
 800255c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002560:	4621      	mov	r1, r4
 8002562:	028a      	lsls	r2, r1, #10
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256a:	2200      	movs	r2, #0
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	61fa      	str	r2, [r7, #28]
 8002570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002574:	f7fd fe8c 	bl	8000290 <__aeabi_uldivmod>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4613      	mov	r3, r2
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800259a:	e002      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800259e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3750      	adds	r7, #80	; 0x50
 80025a8:	46bd      	mov	sp, r7
 80025aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	00f42400 	.word	0x00f42400
 80025b8:	007a1200 	.word	0x007a1200

080025bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000000 	.word	0x20000000

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025d8:	f7ff fff0 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0a9b      	lsrs	r3, r3, #10
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	08003d34 	.word	0x08003d34

080025fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002600:	f7ff ffdc 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	0b5b      	lsrs	r3, r3, #13
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	08003d34 	.word	0x08003d34

08002624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e03f      	b.n	80026b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fa8e 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f929 	bl	80028c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800267c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800268c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800269c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b08a      	sub	sp, #40	; 0x28
 80026c2:	af02      	add	r7, sp, #8
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d17c      	bne.n	80027d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_UART_Transmit+0x2c>
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e075      	b.n	80027da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_UART_Transmit+0x3e>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e06e      	b.n	80027da <HAL_UART_Transmit+0x11c>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2221      	movs	r2, #33	; 0x21
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002712:	f7fe fbcf 	bl	8000eb4 <HAL_GetTick>
 8002716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272c:	d108      	bne.n	8002740 <HAL_UART_Transmit+0x82>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d104      	bne.n	8002740 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e003      	b.n	8002748 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002750:	e02a      	b.n	80027a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2200      	movs	r2, #0
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f840 	bl	80027e2 <UART_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e036      	b.n	80027da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10b      	bne.n	800278a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	3302      	adds	r3, #2
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	e007      	b.n	800279a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	3301      	adds	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1cf      	bne.n	8002752 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2200      	movs	r2, #0
 80027ba:	2140      	movs	r1, #64	; 0x40
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f810 	bl	80027e2 <UART_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e006      	b.n	80027da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b090      	sub	sp, #64	; 0x40
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f2:	e050      	b.n	8002896 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d04c      	beq.n	8002896 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <UART_WaitOnFlagUntilTimeout+0x30>
 8002802:	f7fe fb57 	bl	8000eb4 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800280e:	429a      	cmp	r2, r3
 8002810:	d241      	bcs.n	8002896 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002832:	637a      	str	r2, [r7, #52]	; 0x34
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283a:	e841 2300 	strex	r3, r2, [r1]
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e5      	bne.n	8002812 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	3314      	adds	r3, #20
 800284c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	e853 3f00 	ldrex	r3, [r3]
 8002854:	613b      	str	r3, [r7, #16]
   return(result);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	63bb      	str	r3, [r7, #56]	; 0x38
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3314      	adds	r3, #20
 8002864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002866:	623a      	str	r2, [r7, #32]
 8002868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	69f9      	ldr	r1, [r7, #28]
 800286c:	6a3a      	ldr	r2, [r7, #32]
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	61bb      	str	r3, [r7, #24]
   return(result);
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e5      	bne.n	8002846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e00f      	b.n	80028b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4013      	ands	r3, r2
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d09f      	beq.n	80027f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3740      	adds	r7, #64	; 0x40
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c4:	b0c0      	sub	sp, #256	; 0x100
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028dc:	68d9      	ldr	r1, [r3, #12]
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	ea40 0301 	orr.w	r3, r0, r1
 80028e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	431a      	orrs	r2, r3
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002918:	f021 010c 	bic.w	r1, r1, #12
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002926:	430b      	orrs	r3, r1
 8002928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800292a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293a:	6999      	ldr	r1, [r3, #24]
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	ea40 0301 	orr.w	r3, r0, r1
 8002946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b8f      	ldr	r3, [pc, #572]	; (8002b8c <UART_SetConfig+0x2cc>)
 8002950:	429a      	cmp	r2, r3
 8002952:	d005      	beq.n	8002960 <UART_SetConfig+0xa0>
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4b8d      	ldr	r3, [pc, #564]	; (8002b90 <UART_SetConfig+0x2d0>)
 800295c:	429a      	cmp	r2, r3
 800295e:	d104      	bne.n	800296a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002960:	f7ff fe4c 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 8002964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002968:	e003      	b.n	8002972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800296a:	f7ff fe33 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 800296e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800297c:	f040 810c 	bne.w	8002b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800298a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800298e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002992:	4622      	mov	r2, r4
 8002994:	462b      	mov	r3, r5
 8002996:	1891      	adds	r1, r2, r2
 8002998:	65b9      	str	r1, [r7, #88]	; 0x58
 800299a:	415b      	adcs	r3, r3
 800299c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800299e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029a2:	4621      	mov	r1, r4
 80029a4:	eb12 0801 	adds.w	r8, r2, r1
 80029a8:	4629      	mov	r1, r5
 80029aa:	eb43 0901 	adc.w	r9, r3, r1
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c2:	4690      	mov	r8, r2
 80029c4:	4699      	mov	r9, r3
 80029c6:	4623      	mov	r3, r4
 80029c8:	eb18 0303 	adds.w	r3, r8, r3
 80029cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029d0:	462b      	mov	r3, r5
 80029d2:	eb49 0303 	adc.w	r3, r9, r3
 80029d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029ee:	460b      	mov	r3, r1
 80029f0:	18db      	adds	r3, r3, r3
 80029f2:	653b      	str	r3, [r7, #80]	; 0x50
 80029f4:	4613      	mov	r3, r2
 80029f6:	eb42 0303 	adc.w	r3, r2, r3
 80029fa:	657b      	str	r3, [r7, #84]	; 0x54
 80029fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a04:	f7fd fc44 	bl	8000290 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4b61      	ldr	r3, [pc, #388]	; (8002b94 <UART_SetConfig+0x2d4>)
 8002a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	011c      	lsls	r4, r3, #4
 8002a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a28:	4642      	mov	r2, r8
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	1891      	adds	r1, r2, r2
 8002a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a30:	415b      	adcs	r3, r3
 8002a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a38:	4641      	mov	r1, r8
 8002a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a3e:	4649      	mov	r1, r9
 8002a40:	eb43 0b01 	adc.w	fp, r3, r1
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a58:	4692      	mov	sl, r2
 8002a5a:	469b      	mov	fp, r3
 8002a5c:	4643      	mov	r3, r8
 8002a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a66:	464b      	mov	r3, r9
 8002a68:	eb4b 0303 	adc.w	r3, fp, r3
 8002a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a84:	460b      	mov	r3, r1
 8002a86:	18db      	adds	r3, r3, r3
 8002a88:	643b      	str	r3, [r7, #64]	; 0x40
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	eb42 0303 	adc.w	r3, r2, r3
 8002a90:	647b      	str	r3, [r7, #68]	; 0x44
 8002a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a9a:	f7fd fbf9 	bl	8000290 <__aeabi_uldivmod>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <UART_SetConfig+0x2d4>)
 8002aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2264      	movs	r2, #100	; 0x64
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	1acb      	subs	r3, r1, r3
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <UART_SetConfig+0x2d4>)
 8002abc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ac8:	441c      	add	r4, r3
 8002aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	1891      	adds	r1, r2, r2
 8002ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ae4:	415b      	adcs	r3, r3
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002aec:	4641      	mov	r1, r8
 8002aee:	1851      	adds	r1, r2, r1
 8002af0:	6339      	str	r1, [r7, #48]	; 0x30
 8002af2:	4649      	mov	r1, r9
 8002af4:	414b      	adcs	r3, r1
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b04:	4659      	mov	r1, fp
 8002b06:	00cb      	lsls	r3, r1, #3
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0e:	4651      	mov	r1, sl
 8002b10:	00ca      	lsls	r2, r1, #3
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	4642      	mov	r2, r8
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b20:	464b      	mov	r3, r9
 8002b22:	460a      	mov	r2, r1
 8002b24:	eb42 0303 	adc.w	r3, r2, r3
 8002b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b40:	460b      	mov	r3, r1
 8002b42:	18db      	adds	r3, r3, r3
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b46:	4613      	mov	r3, r2
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b56:	f7fd fb9b 	bl	8000290 <__aeabi_uldivmod>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <UART_SetConfig+0x2d4>)
 8002b60:	fba3 1302 	umull	r1, r3, r3, r2
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	2164      	movs	r1, #100	; 0x64
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	3332      	adds	r3, #50	; 0x32
 8002b72:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <UART_SetConfig+0x2d4>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	f003 0207 	and.w	r2, r3, #7
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4422      	add	r2, r4
 8002b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b88:	e106      	b.n	8002d98 <UART_SetConfig+0x4d8>
 8002b8a:	bf00      	nop
 8002b8c:	40011000 	.word	0x40011000
 8002b90:	40011400 	.word	0x40011400
 8002b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002baa:	4642      	mov	r2, r8
 8002bac:	464b      	mov	r3, r9
 8002bae:	1891      	adds	r1, r2, r2
 8002bb0:	6239      	str	r1, [r7, #32]
 8002bb2:	415b      	adcs	r3, r3
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bba:	4641      	mov	r1, r8
 8002bbc:	1854      	adds	r4, r2, r1
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	eb43 0501 	adc.w	r5, r3, r1
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	00eb      	lsls	r3, r5, #3
 8002bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bd2:	00e2      	lsls	r2, r4, #3
 8002bd4:	4614      	mov	r4, r2
 8002bd6:	461d      	mov	r5, r3
 8002bd8:	4643      	mov	r3, r8
 8002bda:	18e3      	adds	r3, r4, r3
 8002bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002be0:	464b      	mov	r3, r9
 8002be2:	eb45 0303 	adc.w	r3, r5, r3
 8002be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c06:	4629      	mov	r1, r5
 8002c08:	008b      	lsls	r3, r1, #2
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c10:	4621      	mov	r1, r4
 8002c12:	008a      	lsls	r2, r1, #2
 8002c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c18:	f7fd fb3a 	bl	8000290 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4b60      	ldr	r3, [pc, #384]	; (8002da4 <UART_SetConfig+0x4e4>)
 8002c22:	fba3 2302 	umull	r2, r3, r3, r2
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	011c      	lsls	r4, r3, #4
 8002c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	1891      	adds	r1, r2, r2
 8002c42:	61b9      	str	r1, [r7, #24]
 8002c44:	415b      	adcs	r3, r3
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	1851      	adds	r1, r2, r1
 8002c50:	6139      	str	r1, [r7, #16]
 8002c52:	4649      	mov	r1, r9
 8002c54:	414b      	adcs	r3, r1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c64:	4659      	mov	r1, fp
 8002c66:	00cb      	lsls	r3, r1, #3
 8002c68:	4651      	mov	r1, sl
 8002c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c6e:	4651      	mov	r1, sl
 8002c70:	00ca      	lsls	r2, r1, #3
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	4642      	mov	r2, r8
 8002c7a:	189b      	adds	r3, r3, r2
 8002c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c80:	464b      	mov	r3, r9
 8002c82:	460a      	mov	r2, r1
 8002c84:	eb42 0303 	adc.w	r3, r2, r3
 8002c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	008b      	lsls	r3, r1, #2
 8002ca8:	4641      	mov	r1, r8
 8002caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cae:	4641      	mov	r1, r8
 8002cb0:	008a      	lsls	r2, r1, #2
 8002cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cb6:	f7fd faeb 	bl	8000290 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4b38      	ldr	r3, [pc, #224]	; (8002da4 <UART_SetConfig+0x4e4>)
 8002cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2264      	movs	r2, #100	; 0x64
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	1acb      	subs	r3, r1, r3
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	3332      	adds	r3, #50	; 0x32
 8002cd4:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <UART_SetConfig+0x4e4>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce0:	441c      	add	r4, r3
 8002ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	673b      	str	r3, [r7, #112]	; 0x70
 8002cea:	677a      	str	r2, [r7, #116]	; 0x74
 8002cec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d00:	4641      	mov	r1, r8
 8002d02:	1851      	adds	r1, r2, r1
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	4649      	mov	r1, r9
 8002d08:	414b      	adcs	r3, r1
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d18:	4659      	mov	r1, fp
 8002d1a:	00cb      	lsls	r3, r1, #3
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d22:	4651      	mov	r1, sl
 8002d24:	00ca      	lsls	r2, r1, #3
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d32:	464b      	mov	r3, r9
 8002d34:	460a      	mov	r2, r1
 8002d36:	eb42 0303 	adc.w	r3, r2, r3
 8002d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	663b      	str	r3, [r7, #96]	; 0x60
 8002d46:	667a      	str	r2, [r7, #100]	; 0x64
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d54:	4649      	mov	r1, r9
 8002d56:	008b      	lsls	r3, r1, #2
 8002d58:	4641      	mov	r1, r8
 8002d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d5e:	4641      	mov	r1, r8
 8002d60:	008a      	lsls	r2, r1, #2
 8002d62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d66:	f7fd fa93 	bl	8000290 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <UART_SetConfig+0x4e4>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	; 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	3332      	adds	r3, #50	; 0x32
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <UART_SetConfig+0x4e4>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4422      	add	r2, r4
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da4:	51eb851f 	.word	0x51eb851f

08002da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002da8:	b084      	sub	sp, #16
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	f107 001c 	add.w	r0, r7, #28
 8002db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d122      	bne.n	8002e06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 faa2 	bl	8003344 <USB_CoreReset>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e01a      	b.n	8002e3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa96 	bl	8003344 <USB_CoreReset>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e2e:	e005      	b.n	8002e3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10b      	bne.n	8002e5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f043 0206 	orr.w	r2, r3, #6
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e66:	b004      	add	sp, #16
 8002e68:	4770      	bx	lr

08002e6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 0201 	bic.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d115      	bne.n	8002eda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f7fe f806 	bl	8000ecc <HAL_Delay>
      ms++;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa2e 	bl	8003328 <USB_GetMode>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d01e      	beq.n	8002f10 <USB_SetCurrentMode+0x84>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b31      	cmp	r3, #49	; 0x31
 8002ed6:	d9f0      	bls.n	8002eba <USB_SetCurrentMode+0x2e>
 8002ed8:	e01a      	b.n	8002f10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002eec:	2001      	movs	r0, #1
 8002eee:	f7fd ffed 	bl	8000ecc <HAL_Delay>
      ms++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa15 	bl	8003328 <USB_GetMode>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <USB_SetCurrentMode+0x84>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b31      	cmp	r3, #49	; 0x31
 8002f08:	d9f0      	bls.n	8002eec <USB_SetCurrentMode+0x60>
 8002f0a:	e001      	b.n	8002f10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e005      	b.n	8002f1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b32      	cmp	r3, #50	; 0x32
 8002f14:	d101      	bne.n	8002f1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f24:	b084      	sub	sp, #16
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	e009      	b.n	8002f58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3340      	adds	r3, #64	; 0x40
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	2200      	movs	r2, #0
 8002f50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	3301      	adds	r3, #1
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b0e      	cmp	r3, #14
 8002f5c:	d9f2      	bls.n	8002f44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11c      	bne.n	8002f9e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f9c:	e00b      	b.n	8002fb6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc8:	4619      	mov	r1, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	680b      	ldr	r3, [r1, #0]
 8002fd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10c      	bne.n	8002ff6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d104      	bne.n	8002fec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f965 	bl	80032b4 <USB_SetDevSpeed>
 8002fea:	e008      	b.n	8002ffe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fec:	2101      	movs	r1, #1
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f960 	bl	80032b4 <USB_SetDevSpeed>
 8002ff4:	e003      	b.n	8002ffe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f95b 	bl	80032b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ffe:	2110      	movs	r1, #16
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f8f3 	bl	80031ec <USB_FlushTxFifo>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f91f 	bl	8003254 <USB_FlushRxFifo>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	461a      	mov	r2, r3
 8003028:	2300      	movs	r3, #0
 800302a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	461a      	mov	r2, r3
 8003034:	2300      	movs	r3, #0
 8003036:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303e:	461a      	mov	r2, r3
 8003040:	2300      	movs	r3, #0
 8003042:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	e043      	b.n	80030d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800305c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003060:	d118      	bne.n	8003094 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003074:	461a      	mov	r2, r3
 8003076:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	e013      	b.n	80030a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308a:	461a      	mov	r2, r3
 800308c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e008      	b.n	80030a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	461a      	mov	r2, r3
 80030a2:	2300      	movs	r3, #0
 80030a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c4:	461a      	mov	r2, r3
 80030c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	3301      	adds	r3, #1
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d3b7      	bcc.n	800304a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	e043      	b.n	8003168 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f6:	d118      	bne.n	800312a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	461a      	mov	r2, r3
 800310c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e013      	b.n	800313c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003120:	461a      	mov	r2, r3
 8003122:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e008      	b.n	800313c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	461a      	mov	r2, r3
 8003138:	2300      	movs	r3, #0
 800313a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003148:	461a      	mov	r2, r3
 800314a:	2300      	movs	r3, #0
 800314c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	461a      	mov	r2, r3
 800315c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003160:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	3301      	adds	r3, #1
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d3b7      	bcc.n	80030e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003182:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003190:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f043 0210 	orr.w	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <USB_DevInit+0x2c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031e4:	b004      	add	sp, #16
 80031e6:	4770      	bx	lr
 80031e8:	803c3800 	.word	0x803c3800

080031ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3301      	adds	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <USB_FlushTxFifo+0x64>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e01b      	b.n	8003244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	daf2      	bge.n	80031fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	019b      	lsls	r3, r3, #6
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3301      	adds	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a08      	ldr	r2, [pc, #32]	; (8003250 <USB_FlushTxFifo+0x64>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e006      	b.n	8003244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b20      	cmp	r3, #32
 8003240:	d0f0      	beq.n	8003224 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	00030d40 	.word	0x00030d40

08003254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3301      	adds	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <USB_FlushRxFifo+0x5c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e018      	b.n	80032a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	daf2      	bge.n	8003260 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2210      	movs	r2, #16
 8003282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <USB_FlushRxFifo+0x5c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e006      	b.n	80032a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d0f0      	beq.n	8003284 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	00030d40 	.word	0x00030d40

080032b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003300:	f023 0303 	bic.w	r3, r3, #3
 8003304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003314:	f043 0302 	orr.w	r3, r3, #2
 8003318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0301 	and.w	r3, r3, #1
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3301      	adds	r3, #1
 8003354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <USB_CoreReset+0x64>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e01b      	b.n	800339a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	daf2      	bge.n	8003350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3301      	adds	r3, #1
 800337e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <USB_CoreReset+0x64>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e006      	b.n	800339a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d0f0      	beq.n	800337a <USB_CoreReset+0x36>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	00030d40 	.word	0x00030d40

080033ac <siprintf>:
 80033ac:	b40e      	push	{r1, r2, r3}
 80033ae:	b500      	push	{lr}
 80033b0:	b09c      	sub	sp, #112	; 0x70
 80033b2:	ab1d      	add	r3, sp, #116	; 0x74
 80033b4:	9002      	str	r0, [sp, #8]
 80033b6:	9006      	str	r0, [sp, #24]
 80033b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033bc:	4809      	ldr	r0, [pc, #36]	; (80033e4 <siprintf+0x38>)
 80033be:	9107      	str	r1, [sp, #28]
 80033c0:	9104      	str	r1, [sp, #16]
 80033c2:	4909      	ldr	r1, [pc, #36]	; (80033e8 <siprintf+0x3c>)
 80033c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033c8:	9105      	str	r1, [sp, #20]
 80033ca:	6800      	ldr	r0, [r0, #0]
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	a902      	add	r1, sp, #8
 80033d0:	f000 f992 	bl	80036f8 <_svfiprintf_r>
 80033d4:	9b02      	ldr	r3, [sp, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	b01c      	add	sp, #112	; 0x70
 80033dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033e0:	b003      	add	sp, #12
 80033e2:	4770      	bx	lr
 80033e4:	20000058 	.word	0x20000058
 80033e8:	ffff0208 	.word	0xffff0208

080033ec <memset>:
 80033ec:	4402      	add	r2, r0
 80033ee:	4603      	mov	r3, r0
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memset+0xa>
 80033f4:	4770      	bx	lr
 80033f6:	f803 1b01 	strb.w	r1, [r3], #1
 80033fa:	e7f9      	b.n	80033f0 <memset+0x4>

080033fc <__errno>:
 80033fc:	4b01      	ldr	r3, [pc, #4]	; (8003404 <__errno+0x8>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000058 	.word	0x20000058

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	; (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	; (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	; (800344c <__libc_init_array+0x44>)
 800341c:	f000 fc6a 	bl	8003cf4 <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08003d78 	.word	0x08003d78
 8003444:	08003d78 	.word	0x08003d78
 8003448:	08003d78 	.word	0x08003d78
 800344c:	08003d7c 	.word	0x08003d7c

08003450 <__retarget_lock_acquire_recursive>:
 8003450:	4770      	bx	lr

08003452 <__retarget_lock_release_recursive>:
 8003452:	4770      	bx	lr

08003454 <_free_r>:
 8003454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003456:	2900      	cmp	r1, #0
 8003458:	d044      	beq.n	80034e4 <_free_r+0x90>
 800345a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800345e:	9001      	str	r0, [sp, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f1a1 0404 	sub.w	r4, r1, #4
 8003466:	bfb8      	it	lt
 8003468:	18e4      	addlt	r4, r4, r3
 800346a:	f000 f8df 	bl	800362c <__malloc_lock>
 800346e:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <_free_r+0x94>)
 8003470:	9801      	ldr	r0, [sp, #4]
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	b933      	cbnz	r3, 8003484 <_free_r+0x30>
 8003476:	6063      	str	r3, [r4, #4]
 8003478:	6014      	str	r4, [r2, #0]
 800347a:	b003      	add	sp, #12
 800347c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003480:	f000 b8da 	b.w	8003638 <__malloc_unlock>
 8003484:	42a3      	cmp	r3, r4
 8003486:	d908      	bls.n	800349a <_free_r+0x46>
 8003488:	6825      	ldr	r5, [r4, #0]
 800348a:	1961      	adds	r1, r4, r5
 800348c:	428b      	cmp	r3, r1
 800348e:	bf01      	itttt	eq
 8003490:	6819      	ldreq	r1, [r3, #0]
 8003492:	685b      	ldreq	r3, [r3, #4]
 8003494:	1949      	addeq	r1, r1, r5
 8003496:	6021      	streq	r1, [r4, #0]
 8003498:	e7ed      	b.n	8003476 <_free_r+0x22>
 800349a:	461a      	mov	r2, r3
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	b10b      	cbz	r3, 80034a4 <_free_r+0x50>
 80034a0:	42a3      	cmp	r3, r4
 80034a2:	d9fa      	bls.n	800349a <_free_r+0x46>
 80034a4:	6811      	ldr	r1, [r2, #0]
 80034a6:	1855      	adds	r5, r2, r1
 80034a8:	42a5      	cmp	r5, r4
 80034aa:	d10b      	bne.n	80034c4 <_free_r+0x70>
 80034ac:	6824      	ldr	r4, [r4, #0]
 80034ae:	4421      	add	r1, r4
 80034b0:	1854      	adds	r4, r2, r1
 80034b2:	42a3      	cmp	r3, r4
 80034b4:	6011      	str	r1, [r2, #0]
 80034b6:	d1e0      	bne.n	800347a <_free_r+0x26>
 80034b8:	681c      	ldr	r4, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	6053      	str	r3, [r2, #4]
 80034be:	440c      	add	r4, r1
 80034c0:	6014      	str	r4, [r2, #0]
 80034c2:	e7da      	b.n	800347a <_free_r+0x26>
 80034c4:	d902      	bls.n	80034cc <_free_r+0x78>
 80034c6:	230c      	movs	r3, #12
 80034c8:	6003      	str	r3, [r0, #0]
 80034ca:	e7d6      	b.n	800347a <_free_r+0x26>
 80034cc:	6825      	ldr	r5, [r4, #0]
 80034ce:	1961      	adds	r1, r4, r5
 80034d0:	428b      	cmp	r3, r1
 80034d2:	bf04      	itt	eq
 80034d4:	6819      	ldreq	r1, [r3, #0]
 80034d6:	685b      	ldreq	r3, [r3, #4]
 80034d8:	6063      	str	r3, [r4, #4]
 80034da:	bf04      	itt	eq
 80034dc:	1949      	addeq	r1, r1, r5
 80034de:	6021      	streq	r1, [r4, #0]
 80034e0:	6054      	str	r4, [r2, #4]
 80034e2:	e7ca      	b.n	800347a <_free_r+0x26>
 80034e4:	b003      	add	sp, #12
 80034e6:	bd30      	pop	{r4, r5, pc}
 80034e8:	20000940 	.word	0x20000940

080034ec <sbrk_aligned>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	4e0e      	ldr	r6, [pc, #56]	; (8003528 <sbrk_aligned+0x3c>)
 80034f0:	460c      	mov	r4, r1
 80034f2:	6831      	ldr	r1, [r6, #0]
 80034f4:	4605      	mov	r5, r0
 80034f6:	b911      	cbnz	r1, 80034fe <sbrk_aligned+0x12>
 80034f8:	f000 fba6 	bl	8003c48 <_sbrk_r>
 80034fc:	6030      	str	r0, [r6, #0]
 80034fe:	4621      	mov	r1, r4
 8003500:	4628      	mov	r0, r5
 8003502:	f000 fba1 	bl	8003c48 <_sbrk_r>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	d00a      	beq.n	8003520 <sbrk_aligned+0x34>
 800350a:	1cc4      	adds	r4, r0, #3
 800350c:	f024 0403 	bic.w	r4, r4, #3
 8003510:	42a0      	cmp	r0, r4
 8003512:	d007      	beq.n	8003524 <sbrk_aligned+0x38>
 8003514:	1a21      	subs	r1, r4, r0
 8003516:	4628      	mov	r0, r5
 8003518:	f000 fb96 	bl	8003c48 <_sbrk_r>
 800351c:	3001      	adds	r0, #1
 800351e:	d101      	bne.n	8003524 <sbrk_aligned+0x38>
 8003520:	f04f 34ff 	mov.w	r4, #4294967295
 8003524:	4620      	mov	r0, r4
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	20000944 	.word	0x20000944

0800352c <_malloc_r>:
 800352c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003530:	1ccd      	adds	r5, r1, #3
 8003532:	f025 0503 	bic.w	r5, r5, #3
 8003536:	3508      	adds	r5, #8
 8003538:	2d0c      	cmp	r5, #12
 800353a:	bf38      	it	cc
 800353c:	250c      	movcc	r5, #12
 800353e:	2d00      	cmp	r5, #0
 8003540:	4607      	mov	r7, r0
 8003542:	db01      	blt.n	8003548 <_malloc_r+0x1c>
 8003544:	42a9      	cmp	r1, r5
 8003546:	d905      	bls.n	8003554 <_malloc_r+0x28>
 8003548:	230c      	movs	r3, #12
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	2600      	movs	r6, #0
 800354e:	4630      	mov	r0, r6
 8003550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003554:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003628 <_malloc_r+0xfc>
 8003558:	f000 f868 	bl	800362c <__malloc_lock>
 800355c:	f8d8 3000 	ldr.w	r3, [r8]
 8003560:	461c      	mov	r4, r3
 8003562:	bb5c      	cbnz	r4, 80035bc <_malloc_r+0x90>
 8003564:	4629      	mov	r1, r5
 8003566:	4638      	mov	r0, r7
 8003568:	f7ff ffc0 	bl	80034ec <sbrk_aligned>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	4604      	mov	r4, r0
 8003570:	d155      	bne.n	800361e <_malloc_r+0xf2>
 8003572:	f8d8 4000 	ldr.w	r4, [r8]
 8003576:	4626      	mov	r6, r4
 8003578:	2e00      	cmp	r6, #0
 800357a:	d145      	bne.n	8003608 <_malloc_r+0xdc>
 800357c:	2c00      	cmp	r4, #0
 800357e:	d048      	beq.n	8003612 <_malloc_r+0xe6>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	4631      	mov	r1, r6
 8003584:	4638      	mov	r0, r7
 8003586:	eb04 0903 	add.w	r9, r4, r3
 800358a:	f000 fb5d 	bl	8003c48 <_sbrk_r>
 800358e:	4581      	cmp	r9, r0
 8003590:	d13f      	bne.n	8003612 <_malloc_r+0xe6>
 8003592:	6821      	ldr	r1, [r4, #0]
 8003594:	1a6d      	subs	r5, r5, r1
 8003596:	4629      	mov	r1, r5
 8003598:	4638      	mov	r0, r7
 800359a:	f7ff ffa7 	bl	80034ec <sbrk_aligned>
 800359e:	3001      	adds	r0, #1
 80035a0:	d037      	beq.n	8003612 <_malloc_r+0xe6>
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	442b      	add	r3, r5
 80035a6:	6023      	str	r3, [r4, #0]
 80035a8:	f8d8 3000 	ldr.w	r3, [r8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d038      	beq.n	8003622 <_malloc_r+0xf6>
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	42a2      	cmp	r2, r4
 80035b4:	d12b      	bne.n	800360e <_malloc_r+0xe2>
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	e00f      	b.n	80035dc <_malloc_r+0xb0>
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	1b52      	subs	r2, r2, r5
 80035c0:	d41f      	bmi.n	8003602 <_malloc_r+0xd6>
 80035c2:	2a0b      	cmp	r2, #11
 80035c4:	d917      	bls.n	80035f6 <_malloc_r+0xca>
 80035c6:	1961      	adds	r1, r4, r5
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	6025      	str	r5, [r4, #0]
 80035cc:	bf18      	it	ne
 80035ce:	6059      	strne	r1, [r3, #4]
 80035d0:	6863      	ldr	r3, [r4, #4]
 80035d2:	bf08      	it	eq
 80035d4:	f8c8 1000 	streq.w	r1, [r8]
 80035d8:	5162      	str	r2, [r4, r5]
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	4638      	mov	r0, r7
 80035de:	f104 060b 	add.w	r6, r4, #11
 80035e2:	f000 f829 	bl	8003638 <__malloc_unlock>
 80035e6:	f026 0607 	bic.w	r6, r6, #7
 80035ea:	1d23      	adds	r3, r4, #4
 80035ec:	1af2      	subs	r2, r6, r3
 80035ee:	d0ae      	beq.n	800354e <_malloc_r+0x22>
 80035f0:	1b9b      	subs	r3, r3, r6
 80035f2:	50a3      	str	r3, [r4, r2]
 80035f4:	e7ab      	b.n	800354e <_malloc_r+0x22>
 80035f6:	42a3      	cmp	r3, r4
 80035f8:	6862      	ldr	r2, [r4, #4]
 80035fa:	d1dd      	bne.n	80035b8 <_malloc_r+0x8c>
 80035fc:	f8c8 2000 	str.w	r2, [r8]
 8003600:	e7ec      	b.n	80035dc <_malloc_r+0xb0>
 8003602:	4623      	mov	r3, r4
 8003604:	6864      	ldr	r4, [r4, #4]
 8003606:	e7ac      	b.n	8003562 <_malloc_r+0x36>
 8003608:	4634      	mov	r4, r6
 800360a:	6876      	ldr	r6, [r6, #4]
 800360c:	e7b4      	b.n	8003578 <_malloc_r+0x4c>
 800360e:	4613      	mov	r3, r2
 8003610:	e7cc      	b.n	80035ac <_malloc_r+0x80>
 8003612:	230c      	movs	r3, #12
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	4638      	mov	r0, r7
 8003618:	f000 f80e 	bl	8003638 <__malloc_unlock>
 800361c:	e797      	b.n	800354e <_malloc_r+0x22>
 800361e:	6025      	str	r5, [r4, #0]
 8003620:	e7dc      	b.n	80035dc <_malloc_r+0xb0>
 8003622:	605b      	str	r3, [r3, #4]
 8003624:	deff      	udf	#255	; 0xff
 8003626:	bf00      	nop
 8003628:	20000940 	.word	0x20000940

0800362c <__malloc_lock>:
 800362c:	4801      	ldr	r0, [pc, #4]	; (8003634 <__malloc_lock+0x8>)
 800362e:	f7ff bf0f 	b.w	8003450 <__retarget_lock_acquire_recursive>
 8003632:	bf00      	nop
 8003634:	2000093c 	.word	0x2000093c

08003638 <__malloc_unlock>:
 8003638:	4801      	ldr	r0, [pc, #4]	; (8003640 <__malloc_unlock+0x8>)
 800363a:	f7ff bf0a 	b.w	8003452 <__retarget_lock_release_recursive>
 800363e:	bf00      	nop
 8003640:	2000093c 	.word	0x2000093c

08003644 <__ssputs_r>:
 8003644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	688e      	ldr	r6, [r1, #8]
 800364a:	461f      	mov	r7, r3
 800364c:	42be      	cmp	r6, r7
 800364e:	680b      	ldr	r3, [r1, #0]
 8003650:	4682      	mov	sl, r0
 8003652:	460c      	mov	r4, r1
 8003654:	4690      	mov	r8, r2
 8003656:	d82c      	bhi.n	80036b2 <__ssputs_r+0x6e>
 8003658:	898a      	ldrh	r2, [r1, #12]
 800365a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800365e:	d026      	beq.n	80036ae <__ssputs_r+0x6a>
 8003660:	6965      	ldr	r5, [r4, #20]
 8003662:	6909      	ldr	r1, [r1, #16]
 8003664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003668:	eba3 0901 	sub.w	r9, r3, r1
 800366c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003670:	1c7b      	adds	r3, r7, #1
 8003672:	444b      	add	r3, r9
 8003674:	106d      	asrs	r5, r5, #1
 8003676:	429d      	cmp	r5, r3
 8003678:	bf38      	it	cc
 800367a:	461d      	movcc	r5, r3
 800367c:	0553      	lsls	r3, r2, #21
 800367e:	d527      	bpl.n	80036d0 <__ssputs_r+0x8c>
 8003680:	4629      	mov	r1, r5
 8003682:	f7ff ff53 	bl	800352c <_malloc_r>
 8003686:	4606      	mov	r6, r0
 8003688:	b360      	cbz	r0, 80036e4 <__ssputs_r+0xa0>
 800368a:	6921      	ldr	r1, [r4, #16]
 800368c:	464a      	mov	r2, r9
 800368e:	f000 faeb 	bl	8003c68 <memcpy>
 8003692:	89a3      	ldrh	r3, [r4, #12]
 8003694:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369c:	81a3      	strh	r3, [r4, #12]
 800369e:	6126      	str	r6, [r4, #16]
 80036a0:	6165      	str	r5, [r4, #20]
 80036a2:	444e      	add	r6, r9
 80036a4:	eba5 0509 	sub.w	r5, r5, r9
 80036a8:	6026      	str	r6, [r4, #0]
 80036aa:	60a5      	str	r5, [r4, #8]
 80036ac:	463e      	mov	r6, r7
 80036ae:	42be      	cmp	r6, r7
 80036b0:	d900      	bls.n	80036b4 <__ssputs_r+0x70>
 80036b2:	463e      	mov	r6, r7
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	4632      	mov	r2, r6
 80036b8:	4641      	mov	r1, r8
 80036ba:	f000 faab 	bl	8003c14 <memmove>
 80036be:	68a3      	ldr	r3, [r4, #8]
 80036c0:	1b9b      	subs	r3, r3, r6
 80036c2:	60a3      	str	r3, [r4, #8]
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	4433      	add	r3, r6
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	2000      	movs	r0, #0
 80036cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d0:	462a      	mov	r2, r5
 80036d2:	f000 fad7 	bl	8003c84 <_realloc_r>
 80036d6:	4606      	mov	r6, r0
 80036d8:	2800      	cmp	r0, #0
 80036da:	d1e0      	bne.n	800369e <__ssputs_r+0x5a>
 80036dc:	6921      	ldr	r1, [r4, #16]
 80036de:	4650      	mov	r0, sl
 80036e0:	f7ff feb8 	bl	8003454 <_free_r>
 80036e4:	230c      	movs	r3, #12
 80036e6:	f8ca 3000 	str.w	r3, [sl]
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f0:	81a3      	strh	r3, [r4, #12]
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	e7e9      	b.n	80036cc <__ssputs_r+0x88>

080036f8 <_svfiprintf_r>:
 80036f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fc:	4698      	mov	r8, r3
 80036fe:	898b      	ldrh	r3, [r1, #12]
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	b09d      	sub	sp, #116	; 0x74
 8003704:	4607      	mov	r7, r0
 8003706:	460d      	mov	r5, r1
 8003708:	4614      	mov	r4, r2
 800370a:	d50e      	bpl.n	800372a <_svfiprintf_r+0x32>
 800370c:	690b      	ldr	r3, [r1, #16]
 800370e:	b963      	cbnz	r3, 800372a <_svfiprintf_r+0x32>
 8003710:	2140      	movs	r1, #64	; 0x40
 8003712:	f7ff ff0b 	bl	800352c <_malloc_r>
 8003716:	6028      	str	r0, [r5, #0]
 8003718:	6128      	str	r0, [r5, #16]
 800371a:	b920      	cbnz	r0, 8003726 <_svfiprintf_r+0x2e>
 800371c:	230c      	movs	r3, #12
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	e0d0      	b.n	80038c8 <_svfiprintf_r+0x1d0>
 8003726:	2340      	movs	r3, #64	; 0x40
 8003728:	616b      	str	r3, [r5, #20]
 800372a:	2300      	movs	r3, #0
 800372c:	9309      	str	r3, [sp, #36]	; 0x24
 800372e:	2320      	movs	r3, #32
 8003730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003734:	f8cd 800c 	str.w	r8, [sp, #12]
 8003738:	2330      	movs	r3, #48	; 0x30
 800373a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038e0 <_svfiprintf_r+0x1e8>
 800373e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003742:	f04f 0901 	mov.w	r9, #1
 8003746:	4623      	mov	r3, r4
 8003748:	469a      	mov	sl, r3
 800374a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800374e:	b10a      	cbz	r2, 8003754 <_svfiprintf_r+0x5c>
 8003750:	2a25      	cmp	r2, #37	; 0x25
 8003752:	d1f9      	bne.n	8003748 <_svfiprintf_r+0x50>
 8003754:	ebba 0b04 	subs.w	fp, sl, r4
 8003758:	d00b      	beq.n	8003772 <_svfiprintf_r+0x7a>
 800375a:	465b      	mov	r3, fp
 800375c:	4622      	mov	r2, r4
 800375e:	4629      	mov	r1, r5
 8003760:	4638      	mov	r0, r7
 8003762:	f7ff ff6f 	bl	8003644 <__ssputs_r>
 8003766:	3001      	adds	r0, #1
 8003768:	f000 80a9 	beq.w	80038be <_svfiprintf_r+0x1c6>
 800376c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800376e:	445a      	add	r2, fp
 8003770:	9209      	str	r2, [sp, #36]	; 0x24
 8003772:	f89a 3000 	ldrb.w	r3, [sl]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80a1 	beq.w	80038be <_svfiprintf_r+0x1c6>
 800377c:	2300      	movs	r3, #0
 800377e:	f04f 32ff 	mov.w	r2, #4294967295
 8003782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003786:	f10a 0a01 	add.w	sl, sl, #1
 800378a:	9304      	str	r3, [sp, #16]
 800378c:	9307      	str	r3, [sp, #28]
 800378e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003792:	931a      	str	r3, [sp, #104]	; 0x68
 8003794:	4654      	mov	r4, sl
 8003796:	2205      	movs	r2, #5
 8003798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379c:	4850      	ldr	r0, [pc, #320]	; (80038e0 <_svfiprintf_r+0x1e8>)
 800379e:	f7fc fd27 	bl	80001f0 <memchr>
 80037a2:	9a04      	ldr	r2, [sp, #16]
 80037a4:	b9d8      	cbnz	r0, 80037de <_svfiprintf_r+0xe6>
 80037a6:	06d0      	lsls	r0, r2, #27
 80037a8:	bf44      	itt	mi
 80037aa:	2320      	movmi	r3, #32
 80037ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b0:	0711      	lsls	r1, r2, #28
 80037b2:	bf44      	itt	mi
 80037b4:	232b      	movmi	r3, #43	; 0x2b
 80037b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ba:	f89a 3000 	ldrb.w	r3, [sl]
 80037be:	2b2a      	cmp	r3, #42	; 0x2a
 80037c0:	d015      	beq.n	80037ee <_svfiprintf_r+0xf6>
 80037c2:	9a07      	ldr	r2, [sp, #28]
 80037c4:	4654      	mov	r4, sl
 80037c6:	2000      	movs	r0, #0
 80037c8:	f04f 0c0a 	mov.w	ip, #10
 80037cc:	4621      	mov	r1, r4
 80037ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d2:	3b30      	subs	r3, #48	; 0x30
 80037d4:	2b09      	cmp	r3, #9
 80037d6:	d94d      	bls.n	8003874 <_svfiprintf_r+0x17c>
 80037d8:	b1b0      	cbz	r0, 8003808 <_svfiprintf_r+0x110>
 80037da:	9207      	str	r2, [sp, #28]
 80037dc:	e014      	b.n	8003808 <_svfiprintf_r+0x110>
 80037de:	eba0 0308 	sub.w	r3, r0, r8
 80037e2:	fa09 f303 	lsl.w	r3, r9, r3
 80037e6:	4313      	orrs	r3, r2
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	46a2      	mov	sl, r4
 80037ec:	e7d2      	b.n	8003794 <_svfiprintf_r+0x9c>
 80037ee:	9b03      	ldr	r3, [sp, #12]
 80037f0:	1d19      	adds	r1, r3, #4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	9103      	str	r1, [sp, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bfbb      	ittet	lt
 80037fa:	425b      	neglt	r3, r3
 80037fc:	f042 0202 	orrlt.w	r2, r2, #2
 8003800:	9307      	strge	r3, [sp, #28]
 8003802:	9307      	strlt	r3, [sp, #28]
 8003804:	bfb8      	it	lt
 8003806:	9204      	strlt	r2, [sp, #16]
 8003808:	7823      	ldrb	r3, [r4, #0]
 800380a:	2b2e      	cmp	r3, #46	; 0x2e
 800380c:	d10c      	bne.n	8003828 <_svfiprintf_r+0x130>
 800380e:	7863      	ldrb	r3, [r4, #1]
 8003810:	2b2a      	cmp	r3, #42	; 0x2a
 8003812:	d134      	bne.n	800387e <_svfiprintf_r+0x186>
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	9203      	str	r2, [sp, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	bfb8      	it	lt
 8003820:	f04f 33ff 	movlt.w	r3, #4294967295
 8003824:	3402      	adds	r4, #2
 8003826:	9305      	str	r3, [sp, #20]
 8003828:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80038f0 <_svfiprintf_r+0x1f8>
 800382c:	7821      	ldrb	r1, [r4, #0]
 800382e:	2203      	movs	r2, #3
 8003830:	4650      	mov	r0, sl
 8003832:	f7fc fcdd 	bl	80001f0 <memchr>
 8003836:	b138      	cbz	r0, 8003848 <_svfiprintf_r+0x150>
 8003838:	9b04      	ldr	r3, [sp, #16]
 800383a:	eba0 000a 	sub.w	r0, r0, sl
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	4082      	lsls	r2, r0
 8003842:	4313      	orrs	r3, r2
 8003844:	3401      	adds	r4, #1
 8003846:	9304      	str	r3, [sp, #16]
 8003848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800384c:	4825      	ldr	r0, [pc, #148]	; (80038e4 <_svfiprintf_r+0x1ec>)
 800384e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003852:	2206      	movs	r2, #6
 8003854:	f7fc fccc 	bl	80001f0 <memchr>
 8003858:	2800      	cmp	r0, #0
 800385a:	d038      	beq.n	80038ce <_svfiprintf_r+0x1d6>
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <_svfiprintf_r+0x1f0>)
 800385e:	bb1b      	cbnz	r3, 80038a8 <_svfiprintf_r+0x1b0>
 8003860:	9b03      	ldr	r3, [sp, #12]
 8003862:	3307      	adds	r3, #7
 8003864:	f023 0307 	bic.w	r3, r3, #7
 8003868:	3308      	adds	r3, #8
 800386a:	9303      	str	r3, [sp, #12]
 800386c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800386e:	4433      	add	r3, r6
 8003870:	9309      	str	r3, [sp, #36]	; 0x24
 8003872:	e768      	b.n	8003746 <_svfiprintf_r+0x4e>
 8003874:	fb0c 3202 	mla	r2, ip, r2, r3
 8003878:	460c      	mov	r4, r1
 800387a:	2001      	movs	r0, #1
 800387c:	e7a6      	b.n	80037cc <_svfiprintf_r+0xd4>
 800387e:	2300      	movs	r3, #0
 8003880:	3401      	adds	r4, #1
 8003882:	9305      	str	r3, [sp, #20]
 8003884:	4619      	mov	r1, r3
 8003886:	f04f 0c0a 	mov.w	ip, #10
 800388a:	4620      	mov	r0, r4
 800388c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003890:	3a30      	subs	r2, #48	; 0x30
 8003892:	2a09      	cmp	r2, #9
 8003894:	d903      	bls.n	800389e <_svfiprintf_r+0x1a6>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0c6      	beq.n	8003828 <_svfiprintf_r+0x130>
 800389a:	9105      	str	r1, [sp, #20]
 800389c:	e7c4      	b.n	8003828 <_svfiprintf_r+0x130>
 800389e:	fb0c 2101 	mla	r1, ip, r1, r2
 80038a2:	4604      	mov	r4, r0
 80038a4:	2301      	movs	r3, #1
 80038a6:	e7f0      	b.n	800388a <_svfiprintf_r+0x192>
 80038a8:	ab03      	add	r3, sp, #12
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	462a      	mov	r2, r5
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <_svfiprintf_r+0x1f4>)
 80038b0:	a904      	add	r1, sp, #16
 80038b2:	4638      	mov	r0, r7
 80038b4:	f3af 8000 	nop.w
 80038b8:	1c42      	adds	r2, r0, #1
 80038ba:	4606      	mov	r6, r0
 80038bc:	d1d6      	bne.n	800386c <_svfiprintf_r+0x174>
 80038be:	89ab      	ldrh	r3, [r5, #12]
 80038c0:	065b      	lsls	r3, r3, #25
 80038c2:	f53f af2d 	bmi.w	8003720 <_svfiprintf_r+0x28>
 80038c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038c8:	b01d      	add	sp, #116	; 0x74
 80038ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ce:	ab03      	add	r3, sp, #12
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	462a      	mov	r2, r5
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <_svfiprintf_r+0x1f4>)
 80038d6:	a904      	add	r1, sp, #16
 80038d8:	4638      	mov	r0, r7
 80038da:	f000 f879 	bl	80039d0 <_printf_i>
 80038de:	e7eb      	b.n	80038b8 <_svfiprintf_r+0x1c0>
 80038e0:	08003d3c 	.word	0x08003d3c
 80038e4:	08003d46 	.word	0x08003d46
 80038e8:	00000000 	.word	0x00000000
 80038ec:	08003645 	.word	0x08003645
 80038f0:	08003d42 	.word	0x08003d42

080038f4 <_printf_common>:
 80038f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	4616      	mov	r6, r2
 80038fa:	4699      	mov	r9, r3
 80038fc:	688a      	ldr	r2, [r1, #8]
 80038fe:	690b      	ldr	r3, [r1, #16]
 8003900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003904:	4293      	cmp	r3, r2
 8003906:	bfb8      	it	lt
 8003908:	4613      	movlt	r3, r2
 800390a:	6033      	str	r3, [r6, #0]
 800390c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003910:	4607      	mov	r7, r0
 8003912:	460c      	mov	r4, r1
 8003914:	b10a      	cbz	r2, 800391a <_printf_common+0x26>
 8003916:	3301      	adds	r3, #1
 8003918:	6033      	str	r3, [r6, #0]
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	0699      	lsls	r1, r3, #26
 800391e:	bf42      	ittt	mi
 8003920:	6833      	ldrmi	r3, [r6, #0]
 8003922:	3302      	addmi	r3, #2
 8003924:	6033      	strmi	r3, [r6, #0]
 8003926:	6825      	ldr	r5, [r4, #0]
 8003928:	f015 0506 	ands.w	r5, r5, #6
 800392c:	d106      	bne.n	800393c <_printf_common+0x48>
 800392e:	f104 0a19 	add.w	sl, r4, #25
 8003932:	68e3      	ldr	r3, [r4, #12]
 8003934:	6832      	ldr	r2, [r6, #0]
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	42ab      	cmp	r3, r5
 800393a:	dc26      	bgt.n	800398a <_printf_common+0x96>
 800393c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003940:	1e13      	subs	r3, r2, #0
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	bf18      	it	ne
 8003946:	2301      	movne	r3, #1
 8003948:	0692      	lsls	r2, r2, #26
 800394a:	d42b      	bmi.n	80039a4 <_printf_common+0xb0>
 800394c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003950:	4649      	mov	r1, r9
 8003952:	4638      	mov	r0, r7
 8003954:	47c0      	blx	r8
 8003956:	3001      	adds	r0, #1
 8003958:	d01e      	beq.n	8003998 <_printf_common+0xa4>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	6922      	ldr	r2, [r4, #16]
 800395e:	f003 0306 	and.w	r3, r3, #6
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf02      	ittt	eq
 8003966:	68e5      	ldreq	r5, [r4, #12]
 8003968:	6833      	ldreq	r3, [r6, #0]
 800396a:	1aed      	subeq	r5, r5, r3
 800396c:	68a3      	ldr	r3, [r4, #8]
 800396e:	bf0c      	ite	eq
 8003970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003974:	2500      	movne	r5, #0
 8003976:	4293      	cmp	r3, r2
 8003978:	bfc4      	itt	gt
 800397a:	1a9b      	subgt	r3, r3, r2
 800397c:	18ed      	addgt	r5, r5, r3
 800397e:	2600      	movs	r6, #0
 8003980:	341a      	adds	r4, #26
 8003982:	42b5      	cmp	r5, r6
 8003984:	d11a      	bne.n	80039bc <_printf_common+0xc8>
 8003986:	2000      	movs	r0, #0
 8003988:	e008      	b.n	800399c <_printf_common+0xa8>
 800398a:	2301      	movs	r3, #1
 800398c:	4652      	mov	r2, sl
 800398e:	4649      	mov	r1, r9
 8003990:	4638      	mov	r0, r7
 8003992:	47c0      	blx	r8
 8003994:	3001      	adds	r0, #1
 8003996:	d103      	bne.n	80039a0 <_printf_common+0xac>
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a0:	3501      	adds	r5, #1
 80039a2:	e7c6      	b.n	8003932 <_printf_common+0x3e>
 80039a4:	18e1      	adds	r1, r4, r3
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	2030      	movs	r0, #48	; 0x30
 80039aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ae:	4422      	add	r2, r4
 80039b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039b8:	3302      	adds	r3, #2
 80039ba:	e7c7      	b.n	800394c <_printf_common+0x58>
 80039bc:	2301      	movs	r3, #1
 80039be:	4622      	mov	r2, r4
 80039c0:	4649      	mov	r1, r9
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d0e6      	beq.n	8003998 <_printf_common+0xa4>
 80039ca:	3601      	adds	r6, #1
 80039cc:	e7d9      	b.n	8003982 <_printf_common+0x8e>
	...

080039d0 <_printf_i>:
 80039d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d4:	7e0f      	ldrb	r7, [r1, #24]
 80039d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039d8:	2f78      	cmp	r7, #120	; 0x78
 80039da:	4691      	mov	r9, r2
 80039dc:	4680      	mov	r8, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	469a      	mov	sl, r3
 80039e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039e6:	d807      	bhi.n	80039f8 <_printf_i+0x28>
 80039e8:	2f62      	cmp	r7, #98	; 0x62
 80039ea:	d80a      	bhi.n	8003a02 <_printf_i+0x32>
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	f000 80d4 	beq.w	8003b9a <_printf_i+0x1ca>
 80039f2:	2f58      	cmp	r7, #88	; 0x58
 80039f4:	f000 80c0 	beq.w	8003b78 <_printf_i+0x1a8>
 80039f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a00:	e03a      	b.n	8003a78 <_printf_i+0xa8>
 8003a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a06:	2b15      	cmp	r3, #21
 8003a08:	d8f6      	bhi.n	80039f8 <_printf_i+0x28>
 8003a0a:	a101      	add	r1, pc, #4	; (adr r1, 8003a10 <_printf_i+0x40>)
 8003a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	08003a7d 	.word	0x08003a7d
 8003a18:	080039f9 	.word	0x080039f9
 8003a1c:	080039f9 	.word	0x080039f9
 8003a20:	080039f9 	.word	0x080039f9
 8003a24:	080039f9 	.word	0x080039f9
 8003a28:	08003a7d 	.word	0x08003a7d
 8003a2c:	080039f9 	.word	0x080039f9
 8003a30:	080039f9 	.word	0x080039f9
 8003a34:	080039f9 	.word	0x080039f9
 8003a38:	080039f9 	.word	0x080039f9
 8003a3c:	08003b81 	.word	0x08003b81
 8003a40:	08003aa9 	.word	0x08003aa9
 8003a44:	08003b3b 	.word	0x08003b3b
 8003a48:	080039f9 	.word	0x080039f9
 8003a4c:	080039f9 	.word	0x080039f9
 8003a50:	08003ba3 	.word	0x08003ba3
 8003a54:	080039f9 	.word	0x080039f9
 8003a58:	08003aa9 	.word	0x08003aa9
 8003a5c:	080039f9 	.word	0x080039f9
 8003a60:	080039f9 	.word	0x080039f9
 8003a64:	08003b43 	.word	0x08003b43
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	1d1a      	adds	r2, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	602a      	str	r2, [r5, #0]
 8003a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e09f      	b.n	8003bbc <_printf_i+0x1ec>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	682b      	ldr	r3, [r5, #0]
 8003a80:	0607      	lsls	r7, r0, #24
 8003a82:	f103 0104 	add.w	r1, r3, #4
 8003a86:	6029      	str	r1, [r5, #0]
 8003a88:	d501      	bpl.n	8003a8e <_printf_i+0xbe>
 8003a8a:	681e      	ldr	r6, [r3, #0]
 8003a8c:	e003      	b.n	8003a96 <_printf_i+0xc6>
 8003a8e:	0646      	lsls	r6, r0, #25
 8003a90:	d5fb      	bpl.n	8003a8a <_printf_i+0xba>
 8003a92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a96:	2e00      	cmp	r6, #0
 8003a98:	da03      	bge.n	8003aa2 <_printf_i+0xd2>
 8003a9a:	232d      	movs	r3, #45	; 0x2d
 8003a9c:	4276      	negs	r6, r6
 8003a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa2:	485a      	ldr	r0, [pc, #360]	; (8003c0c <_printf_i+0x23c>)
 8003aa4:	230a      	movs	r3, #10
 8003aa6:	e012      	b.n	8003ace <_printf_i+0xfe>
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	6820      	ldr	r0, [r4, #0]
 8003aac:	1d19      	adds	r1, r3, #4
 8003aae:	6029      	str	r1, [r5, #0]
 8003ab0:	0605      	lsls	r5, r0, #24
 8003ab2:	d501      	bpl.n	8003ab8 <_printf_i+0xe8>
 8003ab4:	681e      	ldr	r6, [r3, #0]
 8003ab6:	e002      	b.n	8003abe <_printf_i+0xee>
 8003ab8:	0641      	lsls	r1, r0, #25
 8003aba:	d5fb      	bpl.n	8003ab4 <_printf_i+0xe4>
 8003abc:	881e      	ldrh	r6, [r3, #0]
 8003abe:	4853      	ldr	r0, [pc, #332]	; (8003c0c <_printf_i+0x23c>)
 8003ac0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2308      	moveq	r3, #8
 8003ac6:	230a      	movne	r3, #10
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ace:	6865      	ldr	r5, [r4, #4]
 8003ad0:	60a5      	str	r5, [r4, #8]
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	bfa2      	ittt	ge
 8003ad6:	6821      	ldrge	r1, [r4, #0]
 8003ad8:	f021 0104 	bicge.w	r1, r1, #4
 8003adc:	6021      	strge	r1, [r4, #0]
 8003ade:	b90e      	cbnz	r6, 8003ae4 <_printf_i+0x114>
 8003ae0:	2d00      	cmp	r5, #0
 8003ae2:	d04b      	beq.n	8003b7c <_printf_i+0x1ac>
 8003ae4:	4615      	mov	r5, r2
 8003ae6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003aea:	fb03 6711 	mls	r7, r3, r1, r6
 8003aee:	5dc7      	ldrb	r7, [r0, r7]
 8003af0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003af4:	4637      	mov	r7, r6
 8003af6:	42bb      	cmp	r3, r7
 8003af8:	460e      	mov	r6, r1
 8003afa:	d9f4      	bls.n	8003ae6 <_printf_i+0x116>
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d10b      	bne.n	8003b18 <_printf_i+0x148>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	07de      	lsls	r6, r3, #31
 8003b04:	d508      	bpl.n	8003b18 <_printf_i+0x148>
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	6861      	ldr	r1, [r4, #4]
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	bfde      	ittt	le
 8003b0e:	2330      	movle	r3, #48	; 0x30
 8003b10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b18:	1b52      	subs	r2, r2, r5
 8003b1a:	6122      	str	r2, [r4, #16]
 8003b1c:	f8cd a000 	str.w	sl, [sp]
 8003b20:	464b      	mov	r3, r9
 8003b22:	aa03      	add	r2, sp, #12
 8003b24:	4621      	mov	r1, r4
 8003b26:	4640      	mov	r0, r8
 8003b28:	f7ff fee4 	bl	80038f4 <_printf_common>
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	d14a      	bne.n	8003bc6 <_printf_i+0x1f6>
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295
 8003b34:	b004      	add	sp, #16
 8003b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	f043 0320 	orr.w	r3, r3, #32
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	4833      	ldr	r0, [pc, #204]	; (8003c10 <_printf_i+0x240>)
 8003b44:	2778      	movs	r7, #120	; 0x78
 8003b46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	6829      	ldr	r1, [r5, #0]
 8003b4e:	061f      	lsls	r7, r3, #24
 8003b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b54:	d402      	bmi.n	8003b5c <_printf_i+0x18c>
 8003b56:	065f      	lsls	r7, r3, #25
 8003b58:	bf48      	it	mi
 8003b5a:	b2b6      	uxthmi	r6, r6
 8003b5c:	07df      	lsls	r7, r3, #31
 8003b5e:	bf48      	it	mi
 8003b60:	f043 0320 	orrmi.w	r3, r3, #32
 8003b64:	6029      	str	r1, [r5, #0]
 8003b66:	bf48      	it	mi
 8003b68:	6023      	strmi	r3, [r4, #0]
 8003b6a:	b91e      	cbnz	r6, 8003b74 <_printf_i+0x1a4>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f023 0320 	bic.w	r3, r3, #32
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	2310      	movs	r3, #16
 8003b76:	e7a7      	b.n	8003ac8 <_printf_i+0xf8>
 8003b78:	4824      	ldr	r0, [pc, #144]	; (8003c0c <_printf_i+0x23c>)
 8003b7a:	e7e4      	b.n	8003b46 <_printf_i+0x176>
 8003b7c:	4615      	mov	r5, r2
 8003b7e:	e7bd      	b.n	8003afc <_printf_i+0x12c>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	6826      	ldr	r6, [r4, #0]
 8003b84:	6961      	ldr	r1, [r4, #20]
 8003b86:	1d18      	adds	r0, r3, #4
 8003b88:	6028      	str	r0, [r5, #0]
 8003b8a:	0635      	lsls	r5, r6, #24
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	d501      	bpl.n	8003b94 <_printf_i+0x1c4>
 8003b90:	6019      	str	r1, [r3, #0]
 8003b92:	e002      	b.n	8003b9a <_printf_i+0x1ca>
 8003b94:	0670      	lsls	r0, r6, #25
 8003b96:	d5fb      	bpl.n	8003b90 <_printf_i+0x1c0>
 8003b98:	8019      	strh	r1, [r3, #0]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	6123      	str	r3, [r4, #16]
 8003b9e:	4615      	mov	r5, r2
 8003ba0:	e7bc      	b.n	8003b1c <_printf_i+0x14c>
 8003ba2:	682b      	ldr	r3, [r5, #0]
 8003ba4:	1d1a      	adds	r2, r3, #4
 8003ba6:	602a      	str	r2, [r5, #0]
 8003ba8:	681d      	ldr	r5, [r3, #0]
 8003baa:	6862      	ldr	r2, [r4, #4]
 8003bac:	2100      	movs	r1, #0
 8003bae:	4628      	mov	r0, r5
 8003bb0:	f7fc fb1e 	bl	80001f0 <memchr>
 8003bb4:	b108      	cbz	r0, 8003bba <_printf_i+0x1ea>
 8003bb6:	1b40      	subs	r0, r0, r5
 8003bb8:	6060      	str	r0, [r4, #4]
 8003bba:	6863      	ldr	r3, [r4, #4]
 8003bbc:	6123      	str	r3, [r4, #16]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bc4:	e7aa      	b.n	8003b1c <_printf_i+0x14c>
 8003bc6:	6923      	ldr	r3, [r4, #16]
 8003bc8:	462a      	mov	r2, r5
 8003bca:	4649      	mov	r1, r9
 8003bcc:	4640      	mov	r0, r8
 8003bce:	47d0      	blx	sl
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d0ad      	beq.n	8003b30 <_printf_i+0x160>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	079b      	lsls	r3, r3, #30
 8003bd8:	d413      	bmi.n	8003c02 <_printf_i+0x232>
 8003bda:	68e0      	ldr	r0, [r4, #12]
 8003bdc:	9b03      	ldr	r3, [sp, #12]
 8003bde:	4298      	cmp	r0, r3
 8003be0:	bfb8      	it	lt
 8003be2:	4618      	movlt	r0, r3
 8003be4:	e7a6      	b.n	8003b34 <_printf_i+0x164>
 8003be6:	2301      	movs	r3, #1
 8003be8:	4632      	mov	r2, r6
 8003bea:	4649      	mov	r1, r9
 8003bec:	4640      	mov	r0, r8
 8003bee:	47d0      	blx	sl
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	d09d      	beq.n	8003b30 <_printf_i+0x160>
 8003bf4:	3501      	adds	r5, #1
 8003bf6:	68e3      	ldr	r3, [r4, #12]
 8003bf8:	9903      	ldr	r1, [sp, #12]
 8003bfa:	1a5b      	subs	r3, r3, r1
 8003bfc:	42ab      	cmp	r3, r5
 8003bfe:	dcf2      	bgt.n	8003be6 <_printf_i+0x216>
 8003c00:	e7eb      	b.n	8003bda <_printf_i+0x20a>
 8003c02:	2500      	movs	r5, #0
 8003c04:	f104 0619 	add.w	r6, r4, #25
 8003c08:	e7f5      	b.n	8003bf6 <_printf_i+0x226>
 8003c0a:	bf00      	nop
 8003c0c:	08003d4d 	.word	0x08003d4d
 8003c10:	08003d5e 	.word	0x08003d5e

08003c14 <memmove>:
 8003c14:	4288      	cmp	r0, r1
 8003c16:	b510      	push	{r4, lr}
 8003c18:	eb01 0402 	add.w	r4, r1, r2
 8003c1c:	d902      	bls.n	8003c24 <memmove+0x10>
 8003c1e:	4284      	cmp	r4, r0
 8003c20:	4623      	mov	r3, r4
 8003c22:	d807      	bhi.n	8003c34 <memmove+0x20>
 8003c24:	1e43      	subs	r3, r0, #1
 8003c26:	42a1      	cmp	r1, r4
 8003c28:	d008      	beq.n	8003c3c <memmove+0x28>
 8003c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c32:	e7f8      	b.n	8003c26 <memmove+0x12>
 8003c34:	4402      	add	r2, r0
 8003c36:	4601      	mov	r1, r0
 8003c38:	428a      	cmp	r2, r1
 8003c3a:	d100      	bne.n	8003c3e <memmove+0x2a>
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c46:	e7f7      	b.n	8003c38 <memmove+0x24>

08003c48 <_sbrk_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4d06      	ldr	r5, [pc, #24]	; (8003c64 <_sbrk_r+0x1c>)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	4604      	mov	r4, r0
 8003c50:	4608      	mov	r0, r1
 8003c52:	602b      	str	r3, [r5, #0]
 8003c54:	f7fd f856 	bl	8000d04 <_sbrk>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_sbrk_r+0x1a>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_sbrk_r+0x1a>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	20000938 	.word	0x20000938

08003c68 <memcpy>:
 8003c68:	440a      	add	r2, r1
 8003c6a:	4291      	cmp	r1, r2
 8003c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c70:	d100      	bne.n	8003c74 <memcpy+0xc>
 8003c72:	4770      	bx	lr
 8003c74:	b510      	push	{r4, lr}
 8003c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c7e:	4291      	cmp	r1, r2
 8003c80:	d1f9      	bne.n	8003c76 <memcpy+0xe>
 8003c82:	bd10      	pop	{r4, pc}

08003c84 <_realloc_r>:
 8003c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c88:	4680      	mov	r8, r0
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	460e      	mov	r6, r1
 8003c8e:	b921      	cbnz	r1, 8003c9a <_realloc_r+0x16>
 8003c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c94:	4611      	mov	r1, r2
 8003c96:	f7ff bc49 	b.w	800352c <_malloc_r>
 8003c9a:	b92a      	cbnz	r2, 8003ca8 <_realloc_r+0x24>
 8003c9c:	f7ff fbda 	bl	8003454 <_free_r>
 8003ca0:	4625      	mov	r5, r4
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca8:	f000 f81b 	bl	8003ce2 <_malloc_usable_size_r>
 8003cac:	4284      	cmp	r4, r0
 8003cae:	4607      	mov	r7, r0
 8003cb0:	d802      	bhi.n	8003cb8 <_realloc_r+0x34>
 8003cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003cb6:	d812      	bhi.n	8003cde <_realloc_r+0x5a>
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4640      	mov	r0, r8
 8003cbc:	f7ff fc36 	bl	800352c <_malloc_r>
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d0ed      	beq.n	8003ca2 <_realloc_r+0x1e>
 8003cc6:	42bc      	cmp	r4, r7
 8003cc8:	4622      	mov	r2, r4
 8003cca:	4631      	mov	r1, r6
 8003ccc:	bf28      	it	cs
 8003cce:	463a      	movcs	r2, r7
 8003cd0:	f7ff ffca 	bl	8003c68 <memcpy>
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	f7ff fbbc 	bl	8003454 <_free_r>
 8003cdc:	e7e1      	b.n	8003ca2 <_realloc_r+0x1e>
 8003cde:	4635      	mov	r5, r6
 8003ce0:	e7df      	b.n	8003ca2 <_realloc_r+0x1e>

08003ce2 <_malloc_usable_size_r>:
 8003ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce6:	1f18      	subs	r0, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bfbc      	itt	lt
 8003cec:	580b      	ldrlt	r3, [r1, r0]
 8003cee:	18c0      	addlt	r0, r0, r3
 8003cf0:	4770      	bx	lr
	...

08003cf4 <_init>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr

08003d00 <_fini>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr
