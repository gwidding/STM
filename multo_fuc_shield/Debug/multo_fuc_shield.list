
multo_fuc_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000291c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ac8  08002ac8  00012ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae0  08002ae0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ae8  08002ae8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000570  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000057c  2000057c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a9e9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001890  00000000  00000000  0002aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000918  00000000  00000000  0002c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000700  00000000  00000000  0002cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000222d5  00000000  00000000  0002d310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ad9c  00000000  00000000  0004f5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfd6f  00000000  00000000  0005a381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000025cc  00000000  00000000  0012a0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0012c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002ab0 	.word	0x08002ab0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002ab0 	.word	0x08002ab0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fbe2 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f86a 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f92a 	bl	800074c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004f8:	f000 f8d0 	bl	800069c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004fc:	f000 f8f8 	bl	80006f0 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0) {
 8000500:	2101      	movs	r1, #1
 8000502:	482c      	ldr	r0, [pc, #176]	; (80005b4 <main+0xcc>)
 8000504:	f000 fefe 	bl	8001304 <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d114      	bne.n	8000538 <main+0x50>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000514:	4828      	ldr	r0, [pc, #160]	; (80005b8 <main+0xd0>)
 8000516:	f000 ff0d 	bl	8001334 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	4827      	ldr	r0, [pc, #156]	; (80005bc <main+0xd4>)
 8000520:	f000 ff08 	bl	8001334 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2140      	movs	r1, #64	; 0x40
 8000528:	4824      	ldr	r0, [pc, #144]	; (80005bc <main+0xd4>)
 800052a:	f000 ff03 	bl	8001334 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2120      	movs	r1, #32
 8000532:	4822      	ldr	r0, [pc, #136]	; (80005bc <main+0xd4>)
 8000534:	f000 fefe 	bl	8001334 <HAL_GPIO_WritePin>
	  }
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0) {
 8000538:	2108      	movs	r1, #8
 800053a:	481e      	ldr	r0, [pc, #120]	; (80005b4 <main+0xcc>)
 800053c:	f000 fee2 	bl	8001304 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d114      	bne.n	8000570 <main+0x88>
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	481a      	ldr	r0, [pc, #104]	; (80005b8 <main+0xd0>)
 800054e:	f000 fef1 	bl	8001334 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	4819      	ldr	r0, [pc, #100]	; (80005bc <main+0xd4>)
 8000558:	f000 feec 	bl	8001334 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	4816      	ldr	r0, [pc, #88]	; (80005bc <main+0xd4>)
 8000562:	f000 fee7 	bl	8001334 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	4814      	ldr	r0, [pc, #80]	; (80005bc <main+0xd4>)
 800056c:	f000 fee2 	bl	8001334 <HAL_GPIO_WritePin>
	  	  }
	  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 0) {
 8000570:	2108      	movs	r1, #8
 8000572:	4813      	ldr	r0, [pc, #76]	; (80005c0 <main+0xd8>)
 8000574:	f000 fec6 	bl	8001304 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1c0      	bne.n	8000500 <main+0x18>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <main+0xd0>)
 8000586:	f000 fed5 	bl	8001334 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <main+0xdc>)
 8000592:	f000 fecf 	bl	8001334 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000596:	2064      	movs	r0, #100	; 0x64
 8000598:	f000 fbfe 	bl	8000d98 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	4808      	ldr	r0, [pc, #32]	; (80005c4 <main+0xdc>)
 80005a4:	f000 fec6 	bl	8001334 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2140      	movs	r1, #64	; 0x40
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <main+0xd4>)
 80005ae:	f000 fec1 	bl	8001334 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0) {
 80005b2:	e7a5      	b.n	8000500 <main+0x18>
 80005b4:	40020800 	.word	0x40020800
 80005b8:	40020c00 	.word	0x40020c00
 80005bc:	40020000 	.word	0x40020000
 80005c0:	40021400 	.word	0x40021400
 80005c4:	40021000 	.word	0x40021000

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fa3e 	bl	8002a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a27      	ldr	r2, [pc, #156]	; (8000694 <SystemClock_Config+0xcc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <SystemClock_Config+0xd0>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000628:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800063c:	23a8      	movs	r3, #168	; 0xa8
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ffa7 	bl	80015a0 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 f9f6 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000668:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2105      	movs	r1, #5
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fa08 	bl	8001a90 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000686:	f000 f9df 	bl	8000a48 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	; 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_USART3_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006d4:	f001 fbfc 	bl	8001ed0 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f9b3 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000028 	.word	0x20000028
 80006ec:	40004800 	.word	0x40004800

080006f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	2204      	movs	r2, #4
 8000700:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000704:	2202      	movs	r2, #2
 8000706:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000710:	2202      	movs	r2, #2
 8000712:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	2201      	movs	r2, #1
 8000718:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000728:	2201      	movs	r2, #1
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000734:	f000 fe17 	bl	8001366 <HAL_PCD_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 f983 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000006c 	.word	0x2000006c

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
 8000766:	4bb0      	ldr	r3, [pc, #704]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4aaf      	ldr	r2, [pc, #700]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4bad      	ldr	r3, [pc, #692]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	623b      	str	r3, [r7, #32]
 800077c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	4ba9      	ldr	r3, [pc, #676]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4aa8      	ldr	r2, [pc, #672]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4ba6      	ldr	r3, [pc, #664]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4ba2      	ldr	r3, [pc, #648]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4aa1      	ldr	r2, [pc, #644]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b9f      	ldr	r3, [pc, #636]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b9b      	ldr	r3, [pc, #620]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a9a      	ldr	r2, [pc, #616]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b98      	ldr	r3, [pc, #608]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b94      	ldr	r3, [pc, #592]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a93      	ldr	r2, [pc, #588]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b91      	ldr	r3, [pc, #580]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b8d      	ldr	r3, [pc, #564]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a8c      	ldr	r2, [pc, #560]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b8a      	ldr	r3, [pc, #552]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b86      	ldr	r3, [pc, #536]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a85      	ldr	r2, [pc, #532]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b83      	ldr	r3, [pc, #524]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b7f      	ldr	r3, [pc, #508]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a7e      	ldr	r2, [pc, #504]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b7c      	ldr	r3, [pc, #496]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	21e0      	movs	r1, #224	; 0xe0
 8000846:	4879      	ldr	r0, [pc, #484]	; (8000a2c <MX_GPIO_Init+0x2e0>)
 8000848:	f000 fd74 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000852:	4877      	ldr	r0, [pc, #476]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000854:	f000 fd6e 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800085e:	4875      	ldr	r0, [pc, #468]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 8000860:	f000 fd68 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086a:	4873      	ldr	r0, [pc, #460]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 800086c:	f000 fd62 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000876:	4871      	ldr	r0, [pc, #452]	; (8000a3c <MX_GPIO_Init+0x2f0>)
 8000878:	f000 fd5c 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2140      	movs	r1, #64	; 0x40
 8000880:	486f      	ldr	r0, [pc, #444]	; (8000a40 <MX_GPIO_Init+0x2f4>)
 8000882:	f000 fd57 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4619      	mov	r1, r3
 800089c:	4869      	ldr	r0, [pc, #420]	; (8000a44 <MX_GPIO_Init+0x2f8>)
 800089e:	f000 fb85 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008a2:	2308      	movs	r3, #8
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	485f      	ldr	r0, [pc, #380]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 80008b6:	f000 fb79 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80008ba:	2309      	movs	r3, #9
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	485d      	ldr	r0, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x2f8>)
 80008ce:	f000 fb6d 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008d2:	2332      	movs	r3, #50	; 0x32
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e2:	230b      	movs	r3, #11
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4855      	ldr	r0, [pc, #340]	; (8000a44 <MX_GPIO_Init+0x2f8>)
 80008ee:	f000 fb5d 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80008f2:	2306      	movs	r3, #6
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000902:	230b      	movs	r3, #11
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	4847      	ldr	r0, [pc, #284]	; (8000a2c <MX_GPIO_Init+0x2e0>)
 800090e:	f000 fb4d 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000912:	23e0      	movs	r3, #224	; 0xe0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	4840      	ldr	r0, [pc, #256]	; (8000a2c <MX_GPIO_Init+0x2e0>)
 800092a:	f000 fb3f 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800092e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	483a      	ldr	r0, [pc, #232]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000948:	f000 fb30 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800094c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4833      	ldr	r0, [pc, #204]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 8000966:	f000 fb21 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	482d      	ldr	r0, [pc, #180]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 8000984:	f000 fb12 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099a:	230b      	movs	r3, #11
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	4822      	ldr	r0, [pc, #136]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80009a6:	f000 fb01 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	481e      	ldr	r0, [pc, #120]	; (8000a3c <MX_GPIO_Init+0x2f0>)
 80009c4:	f000 faf2 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <MX_GPIO_Init+0x2f4>)
 80009e0:	f000 fae4 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <MX_GPIO_Init+0x2f4>)
 80009f8:	f000 fad8 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0e:	230b      	movs	r3, #11
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <MX_GPIO_Init+0x2f4>)
 8000a1a:	f000 fac7 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1e:	bf00      	nop
 8000a20:	3738      	adds	r7, #56	; 0x38
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40021400 	.word	0x40021400
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40021800 	.word	0x40021800
 8000a44:	40020800 	.word	0x40020800

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12c      	bne.n	8000b20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b10:	2307      	movs	r3, #7
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_UART_MspInit+0x8c>)
 8000b1c:	f000 fa46 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40004800 	.word	0x40004800
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b54:	d13f      	bne.n	8000bd6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_PCD_MspInit+0xac>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <HAL_PCD_MspInit+0xac>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <HAL_PCD_MspInit+0xac>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b72:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b84:	230a      	movs	r3, #10
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4815      	ldr	r0, [pc, #84]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000b90:	f000 fa0c 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480e      	ldr	r0, [pc, #56]	; (8000be4 <HAL_PCD_MspInit+0xb0>)
 8000baa:	f000 f9ff 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_PCD_MspInit+0xac>)
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_PCD_MspInit+0xac>)
 8000bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_PCD_MspInit+0xac>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_PCD_MspInit+0xac>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_PCD_MspInit+0xac>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f890 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c66:	490e      	ldr	r1, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c7c:	4c0b      	ldr	r4, [pc, #44]	; (8000cac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8a:	f7ff ffd7 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f001 feeb 	bl	8002a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fc29 	bl	80004e8 <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c98:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ca4:	08002af0 	.word	0x08002af0
  ldr r2, =_sbss
 8000ca8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cac:	2000057c 	.word	0x2000057c

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f931 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f808 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff feb4 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f93b 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f911 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000578 	.word	0x20000578

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000578 	.word	0x20000578

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff47 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff5c 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb0 	bl	8000f00 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e177      	b.n	80012b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8166 	bne.w	80012b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80c0 	beq.w	80012b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <HAL_GPIO_Init+0x324>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a65      	ldr	r2, [pc, #404]	; (80012d0 <HAL_GPIO_Init+0x324>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b63      	ldr	r3, [pc, #396]	; (80012d0 <HAL_GPIO_Init+0x324>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114e:	4a61      	ldr	r2, [pc, #388]	; (80012d4 <HAL_GPIO_Init+0x328>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a58      	ldr	r2, [pc, #352]	; (80012d8 <HAL_GPIO_Init+0x32c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d037      	beq.n	80011ea <HAL_GPIO_Init+0x23e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_GPIO_Init+0x330>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d031      	beq.n	80011e6 <HAL_GPIO_Init+0x23a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <HAL_GPIO_Init+0x334>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d02b      	beq.n	80011e2 <HAL_GPIO_Init+0x236>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a55      	ldr	r2, [pc, #340]	; (80012e4 <HAL_GPIO_Init+0x338>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x232>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a54      	ldr	r2, [pc, #336]	; (80012e8 <HAL_GPIO_Init+0x33c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x22e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a53      	ldr	r2, [pc, #332]	; (80012ec <HAL_GPIO_Init+0x340>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x22a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <HAL_GPIO_Init+0x344>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x226>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a51      	ldr	r2, [pc, #324]	; (80012f4 <HAL_GPIO_Init+0x348>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x222>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a50      	ldr	r2, [pc, #320]	; (80012f8 <HAL_GPIO_Init+0x34c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x21e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x350>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x21a>
 80011c2:	2309      	movs	r3, #9
 80011c4:	e012      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011c6:	230a      	movs	r3, #10
 80011c8:	e010      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ca:	2308      	movs	r3, #8
 80011cc:	e00e      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00c      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e00a      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011d6:	2305      	movs	r3, #5
 80011d8:	e008      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011da:	2304      	movs	r3, #4
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011de:	2303      	movs	r3, #3
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ea:	2300      	movs	r3, #0
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f002 0203 	and.w	r2, r2, #3
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4093      	lsls	r3, r2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fc:	4935      	ldr	r1, [pc, #212]	; (80012d4 <HAL_GPIO_Init+0x328>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_GPIO_Init+0x354>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122e:	4a34      	ldr	r2, [pc, #208]	; (8001300 <HAL_GPIO_Init+0x354>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <HAL_GPIO_Init+0x354>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001258:	4a29      	ldr	r2, [pc, #164]	; (8001300 <HAL_GPIO_Init+0x354>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <HAL_GPIO_Init+0x354>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001282:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <HAL_GPIO_Init+0x354>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x354>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <HAL_GPIO_Init+0x354>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3301      	adds	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	f67f ae84 	bls.w	8000fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40013800 	.word	0x40013800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40021c00 	.word	0x40021c00
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40022400 	.word	0x40022400
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001368:	b08f      	sub	sp, #60	; 0x3c
 800136a:	af0a      	add	r7, sp, #40	; 0x28
 800136c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e10f      	b.n	8001598 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fbce 	bl	8000b34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 f8ad 	bl	8002516 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	687e      	ldr	r6, [r7, #4]
 80013c4:	466d      	mov	r5, sp
 80013c6:	f106 0410 	add.w	r4, r6, #16
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80013da:	1d33      	adds	r3, r6, #4
 80013dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f001 f838 	bl	8002454 <USB_CoreInit>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0d0      	b.n	8001598 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 f89b 	bl	8002538 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e04a      	b.n	800149e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	333d      	adds	r3, #61	; 0x3d
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	333c      	adds	r3, #60	; 0x3c
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	b298      	uxth	r0, r3
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	3344      	adds	r3, #68	; 0x44
 8001444:	4602      	mov	r2, r0
 8001446:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	3340      	adds	r3, #64	; 0x40
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3348      	adds	r3, #72	; 0x48
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	334c      	adds	r3, #76	; 0x4c
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	3354      	adds	r3, #84	; 0x54
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	3301      	adds	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d3af      	bcc.n	8001408 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e044      	b.n	8001538 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	3301      	adds	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	d3b5      	bcc.n	80014ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	687e      	ldr	r6, [r7, #4]
 800154a:	466d      	mov	r5, sp
 800154c:	f106 0410 	add.w	r4, r6, #16
 8001550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001558:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001560:	1d33      	adds	r3, r6, #4
 8001562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f001 f833 	bl	80025d0 <USB_DevInit>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e00d      	b.n	8001598 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f001 f9fe 	bl	8002992 <USB_DevDisconnect>

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e267      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d075      	beq.n	80016aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015be:	4b88      	ldr	r3, [pc, #544]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d00c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ca:	4b85      	ldr	r3, [pc, #532]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d112      	bne.n	80015fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d6:	4b82      	ldr	r3, [pc, #520]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e2:	d10b      	bne.n	80015fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	4b7e      	ldr	r3, [pc, #504]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d05b      	beq.n	80016a8 <HAL_RCC_OscConfig+0x108>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d157      	bne.n	80016a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e242      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001604:	d106      	bne.n	8001614 <HAL_RCC_OscConfig+0x74>
 8001606:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a75      	ldr	r2, [pc, #468]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e01d      	b.n	8001650 <HAL_RCC_OscConfig+0xb0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x98>
 800161e:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6f      	ldr	r2, [pc, #444]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b6d      	ldr	r3, [pc, #436]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6c      	ldr	r2, [pc, #432]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xb0>
 8001638:	4b69      	ldr	r3, [pc, #420]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a68      	ldr	r2, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a65      	ldr	r2, [pc, #404]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb92 	bl	8000d80 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fb8e 	bl	8000d80 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e207      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b5b      	ldr	r3, [pc, #364]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xc0>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb7e 	bl	8000d80 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fb7a 	bl	8000d80 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1f3      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	4b51      	ldr	r3, [pc, #324]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0xe8>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d063      	beq.n	800177e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b6:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c2:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d11c      	bne.n	8001708 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ce:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d116      	bne.n	8001708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x152>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e1c7      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4937      	ldr	r1, [pc, #220]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	e03a      	b.n	800177e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001710:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <HAL_RCC_OscConfig+0x244>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fb33 	bl	8000d80 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171e:	f7ff fb2f 	bl	8000d80 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1a8      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4925      	ldr	r1, [pc, #148]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
 8001750:	e015      	b.n	800177e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <HAL_RCC_OscConfig+0x244>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fb12 	bl	8000d80 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fb0e 	bl	8000d80 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e187      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d036      	beq.n	80017f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d016      	beq.n	80017c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_RCC_OscConfig+0x248>)
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff faf2 	bl	8000d80 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff faee 	bl	8000d80 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e167      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80017b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x200>
 80017be:	e01b      	b.n	80017f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_OscConfig+0x248>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fadb 	bl	8000d80 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	e00e      	b.n	80017ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff fad7 	bl	8000d80 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d907      	bls.n	80017ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e150      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
 80017e0:	40023800 	.word	0x40023800
 80017e4:	42470000 	.word	0x42470000
 80017e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ec:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1ea      	bne.n	80017ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8097 	beq.w	8001934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180a:	4b81      	ldr	r3, [pc, #516]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b7d      	ldr	r3, [pc, #500]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a7c      	ldr	r2, [pc, #496]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b7a      	ldr	r3, [pc, #488]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001832:	2301      	movs	r3, #1
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001836:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <HAL_RCC_OscConfig+0x474>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d118      	bne.n	8001874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001842:	4b74      	ldr	r3, [pc, #464]	; (8001a14 <HAL_RCC_OscConfig+0x474>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a73      	ldr	r2, [pc, #460]	; (8001a14 <HAL_RCC_OscConfig+0x474>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184e:	f7ff fa97 	bl	8000d80 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001856:	f7ff fa93 	bl	8000d80 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e10c      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_OscConfig+0x474>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x2ea>
 800187c:	4b64      	ldr	r3, [pc, #400]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a63      	ldr	r2, [pc, #396]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	e01c      	b.n	80018c4 <HAL_RCC_OscConfig+0x324>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b05      	cmp	r3, #5
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x30c>
 8001892:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	4a5e      	ldr	r2, [pc, #376]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6713      	str	r3, [r2, #112]	; 0x70
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a5b      	ldr	r2, [pc, #364]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0x324>
 80018ac:	4b58      	ldr	r3, [pc, #352]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a57      	ldr	r2, [pc, #348]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a54      	ldr	r2, [pc, #336]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018be:	f023 0304 	bic.w	r3, r3, #4
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d015      	beq.n	80018f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff fa58 	bl	8000d80 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff fa54 	bl	8000d80 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0cb      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ea:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0ee      	beq.n	80018d4 <HAL_RCC_OscConfig+0x334>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fa42 	bl	8000d80 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff fa3e 	bl	8000d80 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0b5      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001916:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ee      	bne.n	8001900 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800192e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80a1 	beq.w	8001a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d05c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d141      	bne.n	80019d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <HAL_RCC_OscConfig+0x478>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fa12 	bl	8000d80 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff fa0e 	bl	8000d80 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e087      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	019b      	lsls	r3, r3, #6
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	041b      	lsls	r3, r3, #16
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	061b      	lsls	r3, r3, #24
 80019a2:	491b      	ldr	r1, [pc, #108]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x478>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff f9e7 	bl	8000d80 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff f9e3 	bl	8000d80 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e05c      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x416>
 80019d4:	e054      	b.n	8001a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_RCC_OscConfig+0x478>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff f9d0 	bl	8000d80 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f9cc 	bl	8000d80 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e045      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x444>
 8001a02:	e03d      	b.n	8001a80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e038      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40007000 	.word	0x40007000
 8001a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_RCC_OscConfig+0x4ec>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d028      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d121      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d11a      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d111      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	3b01      	subs	r3, #1
 8001a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0cc      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d90c      	bls.n	8001acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b65      	ldr	r3, [pc, #404]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0b8      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a52      	ldr	r2, [pc, #328]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	494d      	ldr	r1, [pc, #308]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d044      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d119      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e07f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e06f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e067      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 0203 	bic.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4934      	ldr	r1, [pc, #208]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b80:	f7ff f8fe 	bl	8000d80 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b88:	f7ff f8fa 	bl	8000d80 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e04f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 020c 	and.w	r2, r3, #12
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1eb      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d20c      	bcs.n	8001bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e032      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4916      	ldr	r1, [pc, #88]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	490e      	ldr	r1, [pc, #56]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c16:	f000 f821 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	490a      	ldr	r1, [pc, #40]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	5ccb      	ldrb	r3, [r1, r3]
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f85e 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023c00 	.word	0x40023c00
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	08002ac8 	.word	0x08002ac8
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c60:	b094      	sub	sp, #80	; 0x50
 8001c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
 8001c68:	2300      	movs	r3, #0
 8001c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c74:	4b79      	ldr	r3, [pc, #484]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d00d      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x40>
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	f200 80e1 	bhi.w	8001e48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x34>
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c8e:	e0db      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c90:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c94:	e0db      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c96:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c9a:	e0d8      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c9c:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d063      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	2200      	movs	r2, #0
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cce:	4622      	mov	r2, r4
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	0159      	lsls	r1, r3, #5
 8001cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce0:	0150      	lsls	r0, r2, #5
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	1a51      	subs	r1, r2, r1
 8001cea:	6139      	str	r1, [r7, #16]
 8001cec:	4629      	mov	r1, r5
 8001cee:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d00:	4659      	mov	r1, fp
 8001d02:	018b      	lsls	r3, r1, #6
 8001d04:	4651      	mov	r1, sl
 8001d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d0a:	4651      	mov	r1, sl
 8001d0c:	018a      	lsls	r2, r1, #6
 8001d0e:	4651      	mov	r1, sl
 8001d10:	ebb2 0801 	subs.w	r8, r2, r1
 8001d14:	4659      	mov	r1, fp
 8001d16:	eb63 0901 	sbc.w	r9, r3, r1
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d2e:	4690      	mov	r8, r2
 8001d30:	4699      	mov	r9, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	eb18 0303 	adds.w	r3, r8, r3
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	462b      	mov	r3, r5
 8001d3c:	eb49 0303 	adc.w	r3, r9, r3
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d4e:	4629      	mov	r1, r5
 8001d50:	024b      	lsls	r3, r1, #9
 8001d52:	4621      	mov	r1, r4
 8001d54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d58:	4621      	mov	r1, r4
 8001d5a:	024a      	lsls	r2, r1, #9
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d62:	2200      	movs	r2, #0
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d6c:	f7fe fa3e 	bl	80001ec <__aeabi_uldivmod>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4613      	mov	r3, r2
 8001d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d78:	e058      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	2200      	movs	r2, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	4611      	mov	r1, r2
 8001d86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d94:	4642      	mov	r2, r8
 8001d96:	464b      	mov	r3, r9
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	0159      	lsls	r1, r3, #5
 8001da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da6:	0150      	lsls	r0, r2, #5
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4641      	mov	r1, r8
 8001dae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001db2:	4649      	mov	r1, r9
 8001db4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dcc:	ebb2 040a 	subs.w	r4, r2, sl
 8001dd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	00eb      	lsls	r3, r5, #3
 8001dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001de2:	00e2      	lsls	r2, r4, #3
 8001de4:	4614      	mov	r4, r2
 8001de6:	461d      	mov	r5, r3
 8001de8:	4643      	mov	r3, r8
 8001dea:	18e3      	adds	r3, r4, r3
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	464b      	mov	r3, r9
 8001df0:	eb45 0303 	adc.w	r3, r5, r3
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e02:	4629      	mov	r1, r5
 8001e04:	028b      	lsls	r3, r1, #10
 8001e06:	4621      	mov	r1, r4
 8001e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	028a      	lsls	r2, r1, #10
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e16:	2200      	movs	r2, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	61fa      	str	r2, [r7, #28]
 8001e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e20:	f7fe f9e4 	bl	80001ec <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e46:	e002      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3750      	adds	r7, #80	; 0x50
 8001e54:	46bd      	mov	sp, r7
 8001e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0a9b      	lsrs	r3, r3, #10
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4903      	ldr	r1, [pc, #12]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	08002ad8 	.word	0x08002ad8

08001ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eac:	f7ff ffdc 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0b5b      	lsrs	r3, r3, #13
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4903      	ldr	r1, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	08002ad8 	.word	0x08002ad8

08001ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e03f      	b.n	8001f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fdd4 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2224      	movs	r2, #36	; 0x24
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f829 	bl	8001f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f70:	b0c0      	sub	sp, #256	; 0x100
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f88:	68d9      	ldr	r1, [r3, #12]
 8001f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	ea40 0301 	orr.w	r3, r0, r1
 8001f94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fc4:	f021 010c 	bic.w	r1, r1, #12
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe6:	6999      	ldr	r1, [r3, #24]
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	ea40 0301 	orr.w	r3, r0, r1
 8001ff2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4b8f      	ldr	r3, [pc, #572]	; (8002238 <UART_SetConfig+0x2cc>)
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d005      	beq.n	800200c <UART_SetConfig+0xa0>
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b8d      	ldr	r3, [pc, #564]	; (800223c <UART_SetConfig+0x2d0>)
 8002008:	429a      	cmp	r2, r3
 800200a:	d104      	bne.n	8002016 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800200c:	f7ff ff4c 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 8002010:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002014:	e003      	b.n	800201e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002016:	f7ff ff33 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 800201a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800201e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002028:	f040 810c 	bne.w	8002244 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800202c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002030:	2200      	movs	r2, #0
 8002032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002036:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800203a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800203e:	4622      	mov	r2, r4
 8002040:	462b      	mov	r3, r5
 8002042:	1891      	adds	r1, r2, r2
 8002044:	65b9      	str	r1, [r7, #88]	; 0x58
 8002046:	415b      	adcs	r3, r3
 8002048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800204a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800204e:	4621      	mov	r1, r4
 8002050:	eb12 0801 	adds.w	r8, r2, r1
 8002054:	4629      	mov	r1, r5
 8002056:	eb43 0901 	adc.w	r9, r3, r1
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800206a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800206e:	4690      	mov	r8, r2
 8002070:	4699      	mov	r9, r3
 8002072:	4623      	mov	r3, r4
 8002074:	eb18 0303 	adds.w	r3, r8, r3
 8002078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800207c:	462b      	mov	r3, r5
 800207e:	eb49 0303 	adc.w	r3, r9, r3
 8002082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002092:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800209a:	460b      	mov	r3, r1
 800209c:	18db      	adds	r3, r3, r3
 800209e:	653b      	str	r3, [r7, #80]	; 0x50
 80020a0:	4613      	mov	r3, r2
 80020a2:	eb42 0303 	adc.w	r3, r2, r3
 80020a6:	657b      	str	r3, [r7, #84]	; 0x54
 80020a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020b0:	f7fe f89c 	bl	80001ec <__aeabi_uldivmod>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4b61      	ldr	r3, [pc, #388]	; (8002240 <UART_SetConfig+0x2d4>)
 80020ba:	fba3 2302 	umull	r2, r3, r3, r2
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	011c      	lsls	r4, r3, #4
 80020c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020c6:	2200      	movs	r2, #0
 80020c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020d4:	4642      	mov	r2, r8
 80020d6:	464b      	mov	r3, r9
 80020d8:	1891      	adds	r1, r2, r2
 80020da:	64b9      	str	r1, [r7, #72]	; 0x48
 80020dc:	415b      	adcs	r3, r3
 80020de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020e4:	4641      	mov	r1, r8
 80020e6:	eb12 0a01 	adds.w	sl, r2, r1
 80020ea:	4649      	mov	r1, r9
 80020ec:	eb43 0b01 	adc.w	fp, r3, r1
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002104:	4692      	mov	sl, r2
 8002106:	469b      	mov	fp, r3
 8002108:	4643      	mov	r3, r8
 800210a:	eb1a 0303 	adds.w	r3, sl, r3
 800210e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002112:	464b      	mov	r3, r9
 8002114:	eb4b 0303 	adc.w	r3, fp, r3
 8002118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002128:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800212c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002130:	460b      	mov	r3, r1
 8002132:	18db      	adds	r3, r3, r3
 8002134:	643b      	str	r3, [r7, #64]	; 0x40
 8002136:	4613      	mov	r3, r2
 8002138:	eb42 0303 	adc.w	r3, r2, r3
 800213c:	647b      	str	r3, [r7, #68]	; 0x44
 800213e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002142:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002146:	f7fe f851 	bl	80001ec <__aeabi_uldivmod>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4611      	mov	r1, r2
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <UART_SetConfig+0x2d4>)
 8002152:	fba3 2301 	umull	r2, r3, r3, r1
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2264      	movs	r2, #100	; 0x64
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	1acb      	subs	r3, r1, r3
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <UART_SetConfig+0x2d4>)
 8002168:	fba3 2302 	umull	r2, r3, r3, r2
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002174:	441c      	add	r4, r3
 8002176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800217a:	2200      	movs	r2, #0
 800217c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002180:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002184:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002188:	4642      	mov	r2, r8
 800218a:	464b      	mov	r3, r9
 800218c:	1891      	adds	r1, r2, r2
 800218e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002190:	415b      	adcs	r3, r3
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002198:	4641      	mov	r1, r8
 800219a:	1851      	adds	r1, r2, r1
 800219c:	6339      	str	r1, [r7, #48]	; 0x30
 800219e:	4649      	mov	r1, r9
 80021a0:	414b      	adcs	r3, r1
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80021b0:	4659      	mov	r1, fp
 80021b2:	00cb      	lsls	r3, r1, #3
 80021b4:	4651      	mov	r1, sl
 80021b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ba:	4651      	mov	r1, sl
 80021bc:	00ca      	lsls	r2, r1, #3
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	4642      	mov	r2, r8
 80021c6:	189b      	adds	r3, r3, r2
 80021c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021cc:	464b      	mov	r3, r9
 80021ce:	460a      	mov	r2, r1
 80021d0:	eb42 0303 	adc.w	r3, r2, r3
 80021d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021ec:	460b      	mov	r3, r1
 80021ee:	18db      	adds	r3, r3, r3
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f2:	4613      	mov	r3, r2
 80021f4:	eb42 0303 	adc.w	r3, r2, r3
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002202:	f7fd fff3 	bl	80001ec <__aeabi_uldivmod>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <UART_SetConfig+0x2d4>)
 800220c:	fba3 1302 	umull	r1, r3, r3, r2
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	2164      	movs	r1, #100	; 0x64
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	3332      	adds	r3, #50	; 0x32
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <UART_SetConfig+0x2d4>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	f003 0207 	and.w	r2, r3, #7
 800222a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4422      	add	r2, r4
 8002232:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002234:	e106      	b.n	8002444 <UART_SetConfig+0x4d8>
 8002236:	bf00      	nop
 8002238:	40011000 	.word	0x40011000
 800223c:	40011400 	.word	0x40011400
 8002240:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002248:	2200      	movs	r2, #0
 800224a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800224e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002252:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002256:	4642      	mov	r2, r8
 8002258:	464b      	mov	r3, r9
 800225a:	1891      	adds	r1, r2, r2
 800225c:	6239      	str	r1, [r7, #32]
 800225e:	415b      	adcs	r3, r3
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
 8002262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002266:	4641      	mov	r1, r8
 8002268:	1854      	adds	r4, r2, r1
 800226a:	4649      	mov	r1, r9
 800226c:	eb43 0501 	adc.w	r5, r3, r1
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	00eb      	lsls	r3, r5, #3
 800227a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227e:	00e2      	lsls	r2, r4, #3
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
 8002284:	4643      	mov	r3, r8
 8002286:	18e3      	adds	r3, r4, r3
 8002288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800228c:	464b      	mov	r3, r9
 800228e:	eb45 0303 	adc.w	r3, r5, r3
 8002292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022b2:	4629      	mov	r1, r5
 80022b4:	008b      	lsls	r3, r1, #2
 80022b6:	4621      	mov	r1, r4
 80022b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022bc:	4621      	mov	r1, r4
 80022be:	008a      	lsls	r2, r1, #2
 80022c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022c4:	f7fd ff92 	bl	80001ec <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4b60      	ldr	r3, [pc, #384]	; (8002450 <UART_SetConfig+0x4e4>)
 80022ce:	fba3 2302 	umull	r2, r3, r3, r2
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	011c      	lsls	r4, r3, #4
 80022d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022da:	2200      	movs	r2, #0
 80022dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022e8:	4642      	mov	r2, r8
 80022ea:	464b      	mov	r3, r9
 80022ec:	1891      	adds	r1, r2, r2
 80022ee:	61b9      	str	r1, [r7, #24]
 80022f0:	415b      	adcs	r3, r3
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022f8:	4641      	mov	r1, r8
 80022fa:	1851      	adds	r1, r2, r1
 80022fc:	6139      	str	r1, [r7, #16]
 80022fe:	4649      	mov	r1, r9
 8002300:	414b      	adcs	r3, r1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002310:	4659      	mov	r1, fp
 8002312:	00cb      	lsls	r3, r1, #3
 8002314:	4651      	mov	r1, sl
 8002316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800231a:	4651      	mov	r1, sl
 800231c:	00ca      	lsls	r2, r1, #3
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	4603      	mov	r3, r0
 8002324:	4642      	mov	r2, r8
 8002326:	189b      	adds	r3, r3, r2
 8002328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800232c:	464b      	mov	r3, r9
 800232e:	460a      	mov	r2, r1
 8002330:	eb42 0303 	adc.w	r3, r2, r3
 8002334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	67bb      	str	r3, [r7, #120]	; 0x78
 8002342:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002350:	4649      	mov	r1, r9
 8002352:	008b      	lsls	r3, r1, #2
 8002354:	4641      	mov	r1, r8
 8002356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800235a:	4641      	mov	r1, r8
 800235c:	008a      	lsls	r2, r1, #2
 800235e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002362:	f7fd ff43 	bl	80001ec <__aeabi_uldivmod>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4611      	mov	r1, r2
 800236c:	4b38      	ldr	r3, [pc, #224]	; (8002450 <UART_SetConfig+0x4e4>)
 800236e:	fba3 2301 	umull	r2, r3, r3, r1
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	2264      	movs	r2, #100	; 0x64
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	1acb      	subs	r3, r1, r3
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	3332      	adds	r3, #50	; 0x32
 8002380:	4a33      	ldr	r2, [pc, #204]	; (8002450 <UART_SetConfig+0x4e4>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800238c:	441c      	add	r4, r3
 800238e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002392:	2200      	movs	r2, #0
 8002394:	673b      	str	r3, [r7, #112]	; 0x70
 8002396:	677a      	str	r2, [r7, #116]	; 0x74
 8002398:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800239c:	4642      	mov	r2, r8
 800239e:	464b      	mov	r3, r9
 80023a0:	1891      	adds	r1, r2, r2
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	415b      	adcs	r3, r3
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ac:	4641      	mov	r1, r8
 80023ae:	1851      	adds	r1, r2, r1
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	4649      	mov	r1, r9
 80023b4:	414b      	adcs	r3, r1
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023c4:	4659      	mov	r1, fp
 80023c6:	00cb      	lsls	r3, r1, #3
 80023c8:	4651      	mov	r1, sl
 80023ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ce:	4651      	mov	r1, sl
 80023d0:	00ca      	lsls	r2, r1, #3
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	4603      	mov	r3, r0
 80023d8:	4642      	mov	r2, r8
 80023da:	189b      	adds	r3, r3, r2
 80023dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80023de:	464b      	mov	r3, r9
 80023e0:	460a      	mov	r2, r1
 80023e2:	eb42 0303 	adc.w	r3, r2, r3
 80023e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	663b      	str	r3, [r7, #96]	; 0x60
 80023f2:	667a      	str	r2, [r7, #100]	; 0x64
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002400:	4649      	mov	r1, r9
 8002402:	008b      	lsls	r3, r1, #2
 8002404:	4641      	mov	r1, r8
 8002406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800240a:	4641      	mov	r1, r8
 800240c:	008a      	lsls	r2, r1, #2
 800240e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002412:	f7fd feeb 	bl	80001ec <__aeabi_uldivmod>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <UART_SetConfig+0x4e4>)
 800241c:	fba3 1302 	umull	r1, r3, r3, r2
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	2164      	movs	r1, #100	; 0x64
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	3332      	adds	r3, #50	; 0x32
 800242e:	4a08      	ldr	r2, [pc, #32]	; (8002450 <UART_SetConfig+0x4e4>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	f003 020f 	and.w	r2, r3, #15
 800243a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4422      	add	r2, r4
 8002442:	609a      	str	r2, [r3, #8]
}
 8002444:	bf00      	nop
 8002446:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800244a:	46bd      	mov	sp, r7
 800244c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002450:	51eb851f 	.word	0x51eb851f

08002454 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002454:	b084      	sub	sp, #16
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	f107 001c 	add.w	r0, r7, #28
 8002462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	2b01      	cmp	r3, #1
 800246a:	d122      	bne.n	80024b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 faa2 	bl	80029f0 <USB_CoreReset>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e01a      	b.n	80024e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa96 	bl	80029f0 <USB_CoreReset>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80024c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
 80024da:	e005      	b.n	80024e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10b      	bne.n	8002506 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f043 0206 	orr.w	r2, r3, #6
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002512:	b004      	add	sp, #16
 8002514:	4770      	bx	lr

08002516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 0201 	bic.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d115      	bne.n	8002586 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002566:	2001      	movs	r0, #1
 8002568:	f7fe fc16 	bl	8000d98 <HAL_Delay>
      ms++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3301      	adds	r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa2e 	bl	80029d4 <USB_GetMode>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d01e      	beq.n	80025bc <USB_SetCurrentMode+0x84>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b31      	cmp	r3, #49	; 0x31
 8002582:	d9f0      	bls.n	8002566 <USB_SetCurrentMode+0x2e>
 8002584:	e01a      	b.n	80025bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d115      	bne.n	80025b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002598:	2001      	movs	r0, #1
 800259a:	f7fe fbfd 	bl	8000d98 <HAL_Delay>
      ms++;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fa15 	bl	80029d4 <USB_GetMode>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <USB_SetCurrentMode+0x84>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b31      	cmp	r3, #49	; 0x31
 80025b4:	d9f0      	bls.n	8002598 <USB_SetCurrentMode+0x60>
 80025b6:	e001      	b.n	80025bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e005      	b.n	80025c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b32      	cmp	r3, #50	; 0x32
 80025c0:	d101      	bne.n	80025c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80025d0:	b084      	sub	sp, #16
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80025de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	e009      	b.n	8002604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	3340      	adds	r3, #64	; 0x40
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	2200      	movs	r2, #0
 80025fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	3301      	adds	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b0e      	cmp	r3, #14
 8002608:	d9f2      	bls.n	80025f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800260a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d11c      	bne.n	800264a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
 8002648:	e00b      	b.n	8002662 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002668:	461a      	mov	r2, r3
 800266a:	2300      	movs	r3, #0
 800266c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002674:	4619      	mov	r1, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267c:	461a      	mov	r2, r3
 800267e:	680b      	ldr	r3, [r1, #0]
 8002680:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10c      	bne.n	80026a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d104      	bne.n	8002698 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800268e:	2100      	movs	r1, #0
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f965 	bl	8002960 <USB_SetDevSpeed>
 8002696:	e008      	b.n	80026aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002698:	2101      	movs	r1, #1
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f960 	bl	8002960 <USB_SetDevSpeed>
 80026a0:	e003      	b.n	80026aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80026a2:	2103      	movs	r1, #3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f95b 	bl	8002960 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80026aa:	2110      	movs	r1, #16
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f8f3 	bl	8002898 <USB_FlushTxFifo>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f91f 	bl	8002900 <USB_FlushRxFifo>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	461a      	mov	r2, r3
 80026d4:	2300      	movs	r3, #0
 80026d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026de:	461a      	mov	r2, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	461a      	mov	r2, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	e043      	b.n	800277e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800270c:	d118      	bne.n	8002740 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002720:	461a      	mov	r2, r3
 8002722:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e013      	b.n	8002752 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002736:	461a      	mov	r2, r3
 8002738:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e008      	b.n	8002752 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274c:	461a      	mov	r2, r3
 800274e:	2300      	movs	r3, #0
 8002750:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275e:	461a      	mov	r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002770:	461a      	mov	r2, r3
 8002772:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002776:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	3301      	adds	r3, #1
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	429a      	cmp	r2, r3
 8002784:	d3b7      	bcc.n	80026f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	e043      	b.n	8002814 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800279e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027a2:	d118      	bne.n	80027d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10a      	bne.n	80027c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b6:	461a      	mov	r2, r3
 80027b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e013      	b.n	80027e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027cc:	461a      	mov	r2, r3
 80027ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e008      	b.n	80027e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e2:	461a      	mov	r2, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f4:	461a      	mov	r2, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4413      	add	r3, r2
 8002802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002806:	461a      	mov	r2, r3
 8002808:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800280c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	3301      	adds	r3, #1
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	429a      	cmp	r2, r3
 800281a:	d3b7      	bcc.n	800278c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800282e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800283c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f043 0210 	orr.w	r2, r3, #16
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <USB_DevInit+0x2c4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800285c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f043 0208 	orr.w	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800286e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d107      	bne.n	8002884 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002884:	7dfb      	ldrb	r3, [r7, #23]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002890:	b004      	add	sp, #16
 8002892:	4770      	bx	lr
 8002894:	803c3800 	.word	0x803c3800

08002898 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3301      	adds	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <USB_FlushTxFifo+0x64>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e01b      	b.n	80028f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	daf2      	bge.n	80028a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	019b      	lsls	r3, r3, #6
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3301      	adds	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4a08      	ldr	r2, [pc, #32]	; (80028fc <USB_FlushTxFifo+0x64>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e006      	b.n	80028f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d0f0      	beq.n	80028d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	00030d40 	.word	0x00030d40

08002900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3301      	adds	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a11      	ldr	r2, [pc, #68]	; (800295c <USB_FlushRxFifo+0x5c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e018      	b.n	8002950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	daf2      	bge.n	800290c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2210      	movs	r2, #16
 800292e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3301      	adds	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a08      	ldr	r2, [pc, #32]	; (800295c <USB_FlushRxFifo+0x5c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e006      	b.n	8002950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b10      	cmp	r3, #16
 800294c:	d0f0      	beq.n	8002930 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	00030d40 	.word	0x00030d40

08002960 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	68f9      	ldr	r1, [r7, #12]
 800297c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80029ac:	f023 0303 	bic.w	r3, r3, #3
 80029b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f003 0301 	and.w	r3, r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3301      	adds	r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <USB_CoreReset+0x64>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e01b      	b.n	8002a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	daf2      	bge.n	80029fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <USB_CoreReset+0x64>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e006      	b.n	8002a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d0f0      	beq.n	8002a26 <USB_CoreReset+0x36>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	00030d40 	.word	0x00030d40

08002a58 <memset>:
 8002a58:	4402      	add	r2, r0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <memset+0xa>
 8002a60:	4770      	bx	lr
 8002a62:	f803 1b01 	strb.w	r1, [r3], #1
 8002a66:	e7f9      	b.n	8002a5c <memset+0x4>

08002a68 <__libc_init_array>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	4d0d      	ldr	r5, [pc, #52]	; (8002aa0 <__libc_init_array+0x38>)
 8002a6c:	4c0d      	ldr	r4, [pc, #52]	; (8002aa4 <__libc_init_array+0x3c>)
 8002a6e:	1b64      	subs	r4, r4, r5
 8002a70:	10a4      	asrs	r4, r4, #2
 8002a72:	2600      	movs	r6, #0
 8002a74:	42a6      	cmp	r6, r4
 8002a76:	d109      	bne.n	8002a8c <__libc_init_array+0x24>
 8002a78:	4d0b      	ldr	r5, [pc, #44]	; (8002aa8 <__libc_init_array+0x40>)
 8002a7a:	4c0c      	ldr	r4, [pc, #48]	; (8002aac <__libc_init_array+0x44>)
 8002a7c:	f000 f818 	bl	8002ab0 <_init>
 8002a80:	1b64      	subs	r4, r4, r5
 8002a82:	10a4      	asrs	r4, r4, #2
 8002a84:	2600      	movs	r6, #0
 8002a86:	42a6      	cmp	r6, r4
 8002a88:	d105      	bne.n	8002a96 <__libc_init_array+0x2e>
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a90:	4798      	blx	r3
 8002a92:	3601      	adds	r6, #1
 8002a94:	e7ee      	b.n	8002a74 <__libc_init_array+0xc>
 8002a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a9a:	4798      	blx	r3
 8002a9c:	3601      	adds	r6, #1
 8002a9e:	e7f2      	b.n	8002a86 <__libc_init_array+0x1e>
 8002aa0:	08002ae8 	.word	0x08002ae8
 8002aa4:	08002ae8 	.word	0x08002ae8
 8002aa8:	08002ae8 	.word	0x08002ae8
 8002aac:	08002aec 	.word	0x08002aec

08002ab0 <_init>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	bf00      	nop
 8002ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab6:	bc08      	pop	{r3}
 8002ab8:	469e      	mov	lr, r3
 8002aba:	4770      	bx	lr

08002abc <_fini>:
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abe:	bf00      	nop
 8002ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac2:	bc08      	pop	{r3}
 8002ac4:	469e      	mov	lr, r3
 8002ac6:	4770      	bx	lr
