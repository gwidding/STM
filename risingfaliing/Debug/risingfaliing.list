
risingfaliing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003550  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800378c  0800378c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000003f4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000045c  2000045c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b94c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ae7  00000000  00000000  0002ba27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000724  00000000  00000000  0002de68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002474d  00000000  00000000  0002e58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000af58  00000000  00000000  00052cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9e0a  00000000  00000000  0005dc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002be0  00000000  00000000  00137a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0013a61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000068 	.word	0x20000068
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080036e4 	.word	0x080036e4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000006c 	.word	0x2000006c
 80001e8:	080036e4 	.word	0x080036e4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_write>:

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
int _write(int file, char* ptr, int len)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 500);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <_write+0x28>)
 8000500:	f002 f8cf 	bl	80026a2 <HAL_UART_Transmit>
	return len;
 8000504:	687b      	ldr	r3, [r7, #4]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200002ac 	.word	0x200002ac

08000514 <HAL_GPIO_EXTI_Callback>:
	SECOND_PULL
} current_state;
enum CLICK_STATE current_state = NO_CLICK;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7) {
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	2b80      	cmp	r3, #128	; 0x80
 8000522:	d160      	bne.n	80005e6 <HAL_GPIO_EXTI_Callback+0xd2>
		level = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	4832      	ldr	r0, [pc, #200]	; (80005f0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000528:	f001 fb3c 	bl	8001ba4 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000532:	601a      	str	r2, [r3, #0]
//			else if (interval >= 700) {
//				printf("long \r\n");
//				double_key_cnt =0;
//			}
//		}
		if (level == 0 && (current_state == NO_CLICK || current_state == SECOND_PULL)) {
 8000534:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d113      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x50>
 800053c:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d003      	beq.n	800054c <HAL_GPIO_EXTI_Callback+0x38>
 8000544:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b04      	cmp	r3, #4
 800054a:	d10b      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x50>
			current_state = FIRST_PUSH;
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
			ctime = HAL_GetTick();
 8000552:	f000 fd11 	bl	8000f78 <HAL_GetTick>
 8000556:	4603      	mov	r3, r0
 8000558:	4a28      	ldr	r2, [pc, #160]	; (80005fc <HAL_GPIO_EXTI_Callback+0xe8>)
 800055a:	6013      	str	r3, [r2, #0]
			printf("first push \r\n");
 800055c:	4828      	ldr	r0, [pc, #160]	; (8000600 <HAL_GPIO_EXTI_Callback+0xec>)
 800055e:	f002 fd2b 	bl	8002fb8 <puts>
 8000562:	e040      	b.n	80005e6 <HAL_GPIO_EXTI_Callback+0xd2>
		}
		else if (level == 1 && current_state == FIRST_PUSH) {
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d11e      	bne.n	80005aa <HAL_GPIO_EXTI_Callback+0x96>
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d11a      	bne.n	80005aa <HAL_GPIO_EXTI_Callback+0x96>
			current_state = FIRST_PULL;
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000576:	2202      	movs	r2, #2
 8000578:	701a      	strb	r2, [r3, #0]
			ltime = HAL_GetTick();
 800057a:	f000 fcfd 	bl	8000f78 <HAL_GetTick>
 800057e:	4603      	mov	r3, r0
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000582:	6013      	str	r3, [r2, #0]
			if (ltime - ctime > 1000) {
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <HAL_GPIO_EXTI_Callback+0xe8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000592:	d906      	bls.n	80005a2 <HAL_GPIO_EXTI_Callback+0x8e>
				printf("Long click~~~~~~~~\r\n");
 8000594:	481c      	ldr	r0, [pc, #112]	; (8000608 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000596:	f002 fd0f 	bl	8002fb8 <puts>
				current_state = NO_CLICK;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
			if (ltime - ctime > 1000) {
 80005a0:	e021      	b.n	80005e6 <HAL_GPIO_EXTI_Callback+0xd2>
			}
			else {
				printf("first pull \r\n");
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <HAL_GPIO_EXTI_Callback+0xf8>)
 80005a4:	f002 fd08 	bl	8002fb8 <puts>
			if (ltime - ctime > 1000) {
 80005a8:	e01d      	b.n	80005e6 <HAL_GPIO_EXTI_Callback+0xd2>
			}
		}
		else if (level == 0 && current_state == FIRST_PULL) {
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d10a      	bne.n	80005c8 <HAL_GPIO_EXTI_Callback+0xb4>
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d106      	bne.n	80005c8 <HAL_GPIO_EXTI_Callback+0xb4>
			current_state = SECOND_PUSH;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80005bc:	2203      	movs	r2, #3
 80005be:	701a      	strb	r2, [r3, #0]
			printf("second_push \r\n");
 80005c0:	4813      	ldr	r0, [pc, #76]	; (8000610 <HAL_GPIO_EXTI_Callback+0xfc>)
 80005c2:	f002 fcf9 	bl	8002fb8 <puts>
 80005c6:	e00e      	b.n	80005e6 <HAL_GPIO_EXTI_Callback+0xd2>
		}
		else if (level == 1 && current_state == SECOND_PUSH) {
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d10a      	bne.n	80005e6 <HAL_GPIO_EXTI_Callback+0xd2>
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d106      	bne.n	80005e6 <HAL_GPIO_EXTI_Callback+0xd2>
			current_state = SECOND_PULL;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80005da:	2204      	movs	r2, #4
 80005dc:	701a      	strb	r2, [r3, #0]
			printf("second_pull \r\n");
 80005de:	480d      	ldr	r0, [pc, #52]	; (8000614 <HAL_GPIO_EXTI_Callback+0x100>)
 80005e0:	f002 fcea 	bl	8002fb8 <puts>
		}

	}
}
 80005e4:	e7ff      	b.n	80005e6 <HAL_GPIO_EXTI_Callback+0xd2>
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021400 	.word	0x40021400
 80005f4:	200002f8 	.word	0x200002f8
 80005f8:	200002fc 	.word	0x200002fc
 80005fc:	200002f0 	.word	0x200002f0
 8000600:	080036fc 	.word	0x080036fc
 8000604:	200002f4 	.word	0x200002f4
 8000608:	0800370c 	.word	0x0800370c
 800060c:	08003720 	.word	0x08003720
 8000610:	08003730 	.word	0x08003730
 8000614:	08003740 	.word	0x08003740

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fc46 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f836 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f928 	bl	8000878 <MX_GPIO_Init>
  MX_ETH_Init();
 8000628:	f000 f8ae 	bl	8000788 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800062c:	f000 f8fa 	bl	8000824 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000630:	f000 f89e 	bl	8000770 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (current_state == FIRST_PULL && (HAL_GetTick()-ltime) > 100) {
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <main+0x68>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d10e      	bne.n	800065a <main+0x42>
 800063c:	f000 fc9c 	bl	8000f78 <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <main+0x6c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	2b64      	cmp	r3, #100	; 0x64
 800064a:	d906      	bls.n	800065a <main+0x42>
		  printf("one111111 \r\n");
 800064c:	480e      	ldr	r0, [pc, #56]	; (8000688 <main+0x70>)
 800064e:	f002 fcb3 	bl	8002fb8 <puts>
		  current_state = NO_CLICK;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <main+0x68>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	e011      	b.n	800067e <main+0x66>
	  }
	  else if (current_state == SECOND_PUSH && (HAL_GetTick()-ltime) < 100) {
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <main+0x68>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b03      	cmp	r3, #3
 8000660:	d1e8      	bne.n	8000634 <main+0x1c>
 8000662:	f000 fc89 	bl	8000f78 <HAL_GetTick>
 8000666:	4602      	mov	r2, r0
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <main+0x6c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	2b63      	cmp	r3, #99	; 0x63
 8000670:	d8e0      	bhi.n	8000634 <main+0x1c>
		  printf("doubleeeeeeee \r\n");
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <main+0x74>)
 8000674:	f002 fca0 	bl	8002fb8 <puts>
		  current_state = NO_CLICK;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <main+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
	  if (current_state == FIRST_PULL && (HAL_GetTick()-ltime) > 100) {
 800067e:	e7d9      	b.n	8000634 <main+0x1c>
 8000680:	200002fc 	.word	0x200002fc
 8000684:	200002f4 	.word	0x200002f4
 8000688:	08003750 	.word	0x08003750
 800068c:	0800375c 	.word	0x0800375c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fd6a 	bl	8003178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <SystemClock_Config+0xd8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <SystemClock_Config+0xd8>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <SystemClock_Config+0xd8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xdc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a24      	ldr	r2, [pc, #144]	; (800076c <SystemClock_Config+0xdc>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0xdc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000704:	23b4      	movs	r3, #180	; 0xb4
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800070c:	2307      	movs	r3, #7
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fadf 	bl	8001cd8 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 f994 	bl	8000a4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000724:	f001 fa88 	bl	8001c38 <HAL_PWREx_EnableOverDrive>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800072e:	f000 f98d 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2105      	movs	r1, #5
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fd39 	bl	80021c8 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800075c:	f000 f976 	bl	8000a4c <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	; 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2017      	movs	r0, #23
 800077a:	f000 fd08 	bl	800118e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800077e:	2017      	movs	r0, #23
 8000780:	f000 fd21 	bl	80011c6 <HAL_NVIC_EnableIRQ>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ETH_Init+0x84>)
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <MX_ETH_Init+0x88>)
 8000790:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_ETH_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_ETH_Init+0x8c>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_ETH_Init+0x8c>)
 80007a0:	22e1      	movs	r2, #225	; 0xe1
 80007a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_ETH_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_ETH_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_ETH_Init+0x8c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_ETH_Init+0x84>)
 80007b8:	4a16      	ldr	r2, [pc, #88]	; (8000814 <MX_ETH_Init+0x8c>)
 80007ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_ETH_Init+0x84>)
 80007be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_ETH_Init+0x84>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <MX_ETH_Init+0x90>)
 80007c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_ETH_Init+0x84>)
 80007cc:	4a13      	ldr	r2, [pc, #76]	; (800081c <MX_ETH_Init+0x94>)
 80007ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_ETH_Init+0x84>)
 80007d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_ETH_Init+0x84>)
 80007da:	f000 fd0f 	bl	80011fc <HAL_ETH_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f932 	bl	8000a4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007e8:	2238      	movs	r2, #56	; 0x38
 80007ea:	2100      	movs	r1, #0
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_ETH_Init+0x98>)
 80007ee:	f002 fcc3 	bl	8003178 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_ETH_Init+0x98>)
 80007f4:	2221      	movs	r2, #33	; 0x21
 80007f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_ETH_Init+0x98>)
 80007fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_ETH_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001fc 	.word	0x200001fc
 8000810:	40028000 	.word	0x40028000
 8000814:	20000300 	.word	0x20000300
 8000818:	2000015c 	.word	0x2000015c
 800081c:	200000bc 	.word	0x200000bc
 8000820:	20000084 	.word	0x20000084

08000824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART3_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_USART3_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_USART3_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART3_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART3_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART3_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART3_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART3_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART3_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART3_UART_Init+0x4c>)
 800085c:	f001 fed4 	bl	8002608 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 f8f1 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200002ac 	.word	0x200002ac
 8000874:	40004800 	.word	0x40004800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	4b68      	ldr	r3, [pc, #416]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a67      	ldr	r2, [pc, #412]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	4b61      	ldr	r3, [pc, #388]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a60      	ldr	r2, [pc, #384]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a59      	ldr	r2, [pc, #356]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b57      	ldr	r3, [pc, #348]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a52      	ldr	r2, [pc, #328]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b50      	ldr	r3, [pc, #320]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a4b      	ldr	r2, [pc, #300]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a44      	ldr	r2, [pc, #272]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a3d      	ldr	r2, [pc, #244]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <MX_GPIO_Init+0x1bc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f244 0181 	movw	r1, #16513	; 0x4081
 8000958:	4837      	ldr	r0, [pc, #220]	; (8000a38 <MX_GPIO_Init+0x1c0>)
 800095a:	f001 f93b 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2140      	movs	r1, #64	; 0x40
 8000962:	4836      	ldr	r0, [pc, #216]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 8000964:	f001 f936 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4830      	ldr	r0, [pc, #192]	; (8000a40 <MX_GPIO_Init+0x1c8>)
 8000980:	f000 ff64 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000988:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098e:	2301      	movs	r3, #1
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	482a      	ldr	r0, [pc, #168]	; (8000a44 <MX_GPIO_Init+0x1cc>)
 800099a:	f000 ff57 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800099e:	f244 0381 	movw	r3, #16513	; 0x4081
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4820      	ldr	r0, [pc, #128]	; (8000a38 <MX_GPIO_Init+0x1c0>)
 80009b8:	f000 ff48 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009bc:	2340      	movs	r3, #64	; 0x40
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481a      	ldr	r0, [pc, #104]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80009d4:	f000 ff3a 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80009ec:	f000 ff2e 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009f0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a02:	230a      	movs	r3, #10
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_GPIO_Init+0x1d0>)
 8000a0e:	f000 ff1d 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_GPIO_Init+0x1d0>)
 8000a28:	f000 ff10 	bl	800184c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3730      	adds	r7, #48	; 0x30
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40021800 	.word	0x40021800
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40021400 	.word	0x40021400
 8000a48:	40020000 	.word	0x40020000

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a55      	ldr	r2, [pc, #340]	; (8000c1c <HAL_ETH_MspInit+0x174>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	f040 80a4 	bne.w	8000c14 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
 8000ad0:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a52      	ldr	r2, [pc, #328]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b50      	ldr	r3, [pc, #320]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	4b4c      	ldr	r3, [pc, #304]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a4b      	ldr	r2, [pc, #300]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000af2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b49      	ldr	r3, [pc, #292]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b00:	61fb      	str	r3, [r7, #28]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	4b45      	ldr	r3, [pc, #276]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	4a44      	ldr	r2, [pc, #272]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b12:	6313      	str	r3, [r2, #48]	; 0x30
 8000b14:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	4b3e      	ldr	r3, [pc, #248]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a3d      	ldr	r2, [pc, #244]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a36      	ldr	r2, [pc, #216]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4c:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a2f      	ldr	r2, [pc, #188]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b90:	2332      	movs	r3, #50	; 0x32
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba0:	230b      	movs	r3, #11
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481e      	ldr	r0, [pc, #120]	; (8000c24 <HAL_ETH_MspInit+0x17c>)
 8000bac:	f000 fe4e 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bb0:	2386      	movs	r3, #134	; 0x86
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4817      	ldr	r0, [pc, #92]	; (8000c28 <HAL_ETH_MspInit+0x180>)
 8000bcc:	f000 fe3e 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be2:	230b      	movs	r3, #11
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <HAL_ETH_MspInit+0x184>)
 8000bee:	f000 fe2d 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <HAL_ETH_MspInit+0x188>)
 8000c10:	f000 fe1c 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3738      	adds	r7, #56	; 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40028000 	.word	0x40028000
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40021800 	.word	0x40021800

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12c      	bne.n	8000cb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <HAL_UART_MspInit+0x8c>)
 8000cac:	f000 fdce 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40004800 	.word	0x40004800
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020c00 	.word	0x40020c00

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 f91e 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d1c:	2080      	movs	r0, #128	; 0x80
 8000d1e:	f000 ff73 	bl	8001c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e00a      	b.n	8000d4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d38:	f3af 8000 	nop.w
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	60ba      	str	r2, [r7, #8]
 8000d44:	b2ca      	uxtb	r2, r1
 8000d46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	dbf0      	blt.n	8000d38 <_read+0x12>
  }

  return len;
 8000d56:	687b      	ldr	r3, [r7, #4]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d88:	605a      	str	r2, [r3, #4]
  return 0;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_isatty>:

int _isatty(int file)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f002 fa0c 	bl	8003214 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20030000 	.word	0x20030000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20000308 	.word	0x20000308
 8000e30:	20000460 	.word	0x20000460

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ffd7 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f002 f9cb 	bl	8003220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fbc5 	bl	8000618 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e9c:	08003794 	.word	0x08003794
  ldr r2, =_sbss
 8000ea0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ea4:	2000045c 	.word	0x2000045c

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f94f 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fdba 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f967 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f92f 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	2000030c 	.word	0x2000030c

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000030c 	.word	0x2000030c

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff3e 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff8e 	bl	80010cc <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff31 	bl	800103c <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa2 	bl	8001134 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e06c      	b.n	80012e8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001214:	2b00      	cmp	r3, #0
 8001216:	d106      	bne.n	8001226 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2223      	movs	r2, #35	; 0x23
 800121c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fc41 	bl	8000aa8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <HAL_ETH_Init+0xf4>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <HAL_ETH_Init+0xf4>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <HAL_ETH_Init+0xf4>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <HAL_ETH_Init+0xf8>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <HAL_ETH_Init+0xf8>)
 8001248:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800124c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <HAL_ETH_Init+0xf8>)
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4927      	ldr	r1, [pc, #156]	; (80012f4 <HAL_ETH_Init+0xf8>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HAL_ETH_Init+0xf8>)
 800125e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001276:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001278:	f7ff fe7e 	bl	8000f78 <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800127e:	e011      	b.n	80012a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001280:	f7ff fe7a 	bl	8000f78 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800128e:	d909      	bls.n	80012a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2204      	movs	r2, #4
 8001294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	22e0      	movs	r2, #224	; 0xe0
 800129c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e021      	b.n	80012e8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e4      	bne.n	8001280 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f958 	bl	800156c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f9ff 	bl	80016c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fa55 	bl	8001772 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	461a      	mov	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f9bd 	bl	8001650 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2210      	movs	r2, #16
 80012e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40013800 	.word	0x40013800

080012f8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4b51      	ldr	r3, [pc, #324]	; (8001454 <ETH_SetMACConfig+0x15c>)
 800130e:	4013      	ands	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	7c1b      	ldrb	r3, [r3, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <ETH_SetMACConfig+0x28>
 800131a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800131e:	e000      	b.n	8001322 <ETH_SetMACConfig+0x2a>
 8001320:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	7c5b      	ldrb	r3, [r3, #17]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <ETH_SetMACConfig+0x38>
 800132a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132e:	e000      	b.n	8001332 <ETH_SetMACConfig+0x3a>
 8001330:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001332:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001338:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	7fdb      	ldrb	r3, [r3, #31]
 800133e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001340:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001346:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	7f92      	ldrb	r2, [r2, #30]
 800134c:	2a00      	cmp	r2, #0
 800134e:	d102      	bne.n	8001356 <ETH_SetMACConfig+0x5e>
 8001350:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001354:	e000      	b.n	8001358 <ETH_SetMACConfig+0x60>
 8001356:	2200      	movs	r2, #0
                        macconf->Speed |
 8001358:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	7f1b      	ldrb	r3, [r3, #28]
 800135e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001360:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001366:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800136e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001376:	2a00      	cmp	r2, #0
 8001378:	d102      	bne.n	8001380 <ETH_SetMACConfig+0x88>
 800137a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137e:	e000      	b.n	8001382 <ETH_SetMACConfig+0x8a>
 8001380:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001382:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	7bdb      	ldrb	r3, [r3, #15]
 8001388:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800138a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001390:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001398:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800139a:	4313      	orrs	r3, r2
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff fdec 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80013de:	2a00      	cmp	r2, #0
 80013e0:	d101      	bne.n	80013e6 <ETH_SetMACConfig+0xee>
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	e000      	b.n	80013e8 <ETH_SetMACConfig+0xf0>
 80013e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013f6:	2a01      	cmp	r2, #1
 80013f8:	d101      	bne.n	80013fe <ETH_SetMACConfig+0x106>
 80013fa:	2208      	movs	r2, #8
 80013fc:	e000      	b.n	8001400 <ETH_SetMACConfig+0x108>
 80013fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001400:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001408:	2a01      	cmp	r2, #1
 800140a:	d101      	bne.n	8001410 <ETH_SetMACConfig+0x118>
 800140c:	2204      	movs	r2, #4
 800140e:	e000      	b.n	8001412 <ETH_SetMACConfig+0x11a>
 8001410:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001412:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800141a:	2a01      	cmp	r2, #1
 800141c:	d101      	bne.n	8001422 <ETH_SetMACConfig+0x12a>
 800141e:	2202      	movs	r2, #2
 8001420:	e000      	b.n	8001424 <ETH_SetMACConfig+0x12c>
 8001422:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001424:	4313      	orrs	r3, r2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff fda7 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	619a      	str	r2, [r3, #24]
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	ff20810f 	.word	0xff20810f

08001458 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <ETH_SetDMAConfig+0x110>)
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	7b1b      	ldrb	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <ETH_SetDMAConfig+0x2c>
 800147e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001482:	e000      	b.n	8001486 <ETH_SetDMAConfig+0x2e>
 8001484:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	7b5b      	ldrb	r3, [r3, #13]
 800148a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800148c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	7f52      	ldrb	r2, [r2, #29]
 8001492:	2a00      	cmp	r2, #0
 8001494:	d102      	bne.n	800149c <ETH_SetDMAConfig+0x44>
 8001496:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800149a:	e000      	b.n	800149e <ETH_SetDMAConfig+0x46>
 800149c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800149e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	7b9b      	ldrb	r3, [r3, #14]
 80014a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	7f1b      	ldrb	r3, [r3, #28]
 80014b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	7f9b      	ldrb	r3, [r3, #30]
 80014ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014cc:	4313      	orrs	r3, r2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014dc:	461a      	mov	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff fd4e 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	791b      	ldrb	r3, [r3, #4]
 8001506:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800150c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001512:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001518:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001520:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001522:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800152a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001530:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800153a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800153e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff fd1f 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	f8de3f23 	.word	0xf8de3f23

0800156c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0a6      	sub	sp, #152	; 0x98
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001574:	2301      	movs	r3, #1
 8001576:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800157a:	2301      	movs	r3, #1
 800157c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001580:	2300      	movs	r3, #0
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800158a:	2301      	movs	r3, #1
 800158c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001596:	2301      	movs	r3, #1
 8001598:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015a8:	2300      	movs	r3, #0
 80015aa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fe86 	bl	80012f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015f4:	2301      	movs	r3, #1
 80015f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015fa:	2301      	movs	r3, #1
 80015fc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001612:	2301      	movs	r3, #1
 8001614:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800161c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001620:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001626:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800162e:	2301      	movs	r3, #1
 8001630:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff08 	bl	8001458 <ETH_SetDMAConfig>
}
 8001648:	bf00      	nop
 800164a:	3798      	adds	r7, #152	; 0x98
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3305      	adds	r3, #5
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	3204      	adds	r2, #4
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	4313      	orrs	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <ETH_MACAddressConfig+0x68>)
 8001672:	4413      	add	r3, r2
 8001674:	461a      	mov	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3303      	adds	r3, #3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	061a      	lsls	r2, r3, #24
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3302      	adds	r3, #2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3301      	adds	r3, #1
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	4313      	orrs	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <ETH_MACAddressConfig+0x6c>)
 80016a2:	4413      	add	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	6013      	str	r3, [r2, #0]
}
 80016aa:	bf00      	nop
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40028040 	.word	0x40028040
 80016bc:	40028044 	.word	0x40028044

080016c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	e03e      	b.n	800174c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68d9      	ldr	r1, [r3, #12]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	3206      	adds	r2, #6
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d80c      	bhi.n	8001730 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68d9      	ldr	r1, [r3, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	461a      	mov	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	e004      	b.n	800173a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d9bd      	bls.n	80016ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001764:	611a      	str	r2, [r3, #16]
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001772:	b480      	push	{r7}
 8001774:	b085      	sub	sp, #20
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	e046      	b.n	800180e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6919      	ldr	r1, [r3, #16]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	3212      	adds	r2, #18
 80017da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d80c      	bhi.n	80017fe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6919      	ldr	r1, [r3, #16]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	461a      	mov	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	e004      	b.n	8001808 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d9b5      	bls.n	8001780 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183e:	60da      	str	r2, [r3, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e177      	b.n	8001b58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8166 	bne.w	8001b52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d005      	beq.n	800189e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189a:	2b02      	cmp	r3, #2
 800189c:	d130      	bne.n	8001900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 0201 	and.w	r2, r3, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b03      	cmp	r3, #3
 800190a:	d017      	beq.n	800193c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80c0 	beq.w	8001b52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <HAL_GPIO_Init+0x324>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a65      	ldr	r2, [pc, #404]	; (8001b70 <HAL_GPIO_Init+0x324>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_GPIO_Init+0x324>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ee:	4a61      	ldr	r2, [pc, #388]	; (8001b74 <HAL_GPIO_Init+0x328>)
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	220f      	movs	r2, #15
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_GPIO_Init+0x32c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d037      	beq.n	8001a8a <HAL_GPIO_Init+0x23e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a57      	ldr	r2, [pc, #348]	; (8001b7c <HAL_GPIO_Init+0x330>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d031      	beq.n	8001a86 <HAL_GPIO_Init+0x23a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_GPIO_Init+0x334>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d02b      	beq.n	8001a82 <HAL_GPIO_Init+0x236>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a55      	ldr	r2, [pc, #340]	; (8001b84 <HAL_GPIO_Init+0x338>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d025      	beq.n	8001a7e <HAL_GPIO_Init+0x232>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a54      	ldr	r2, [pc, #336]	; (8001b88 <HAL_GPIO_Init+0x33c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01f      	beq.n	8001a7a <HAL_GPIO_Init+0x22e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a53      	ldr	r2, [pc, #332]	; (8001b8c <HAL_GPIO_Init+0x340>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d019      	beq.n	8001a76 <HAL_GPIO_Init+0x22a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <HAL_GPIO_Init+0x344>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x226>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <HAL_GPIO_Init+0x348>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x222>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a50      	ldr	r2, [pc, #320]	; (8001b98 <HAL_GPIO_Init+0x34c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x21e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <HAL_GPIO_Init+0x350>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x21a>
 8001a62:	2309      	movs	r3, #9
 8001a64:	e012      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a66:	230a      	movs	r3, #10
 8001a68:	e010      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	e00e      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00c      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a72:	2306      	movs	r3, #6
 8001a74:	e00a      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a76:	2305      	movs	r3, #5
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x240>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9c:	4935      	ldr	r1, [pc, #212]	; (8001b74 <HAL_GPIO_Init+0x328>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <HAL_GPIO_Init+0x354>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ace:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <HAL_GPIO_Init+0x354>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_GPIO_Init+0x354>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af8:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <HAL_GPIO_Init+0x354>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_GPIO_Init+0x354>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <HAL_GPIO_Init+0x354>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_GPIO_Init+0x354>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_GPIO_Init+0x354>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	f67f ae84 	bls.w	8001868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40021400 	.word	0x40021400
 8001b90:	40021800 	.word	0x40021800
 8001b94:	40021c00 	.word	0x40021c00
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40022400 	.word	0x40022400
 8001ba0:	40013c00 	.word	0x40013c00

08001ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e001      	b.n	8001bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc74 	bl	8000514 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40013c00 	.word	0x40013c00

08001c38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_PWREx_EnableOverDrive+0x94>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c64:	f7ff f988 	bl	8000f78 <HAL_GetTick>
 8001c68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c6a:	e009      	b.n	8001c80 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c6c:	f7ff f984 	bl	8000f78 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c7a:	d901      	bls.n	8001c80 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e01f      	b.n	8001cc0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d1ee      	bne.n	8001c6c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c94:	f7ff f970 	bl	8000f78 <HAL_GetTick>
 8001c98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c9a:	e009      	b.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c9c:	f7ff f96c 	bl	8000f78 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001caa:	d901      	bls.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e007      	b.n	8001cc0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cbc:	d1ee      	bne.n	8001c9c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	420e0040 	.word	0x420e0040
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	420e0044 	.word	0x420e0044

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e267      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d075      	beq.n	8001de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cf6:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d00c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d02:	4b85      	ldr	r3, [pc, #532]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d112      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0e:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b7e      	ldr	r3, [pc, #504]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d05b      	beq.n	8001de0 <HAL_RCC_OscConfig+0x108>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d157      	bne.n	8001de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e242      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x74>
 8001d3e:	4b76      	ldr	r3, [pc, #472]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x98>
 8001d56:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6f      	ldr	r2, [pc, #444]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b6d      	ldr	r3, [pc, #436]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6c      	ldr	r2, [pc, #432]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d70:	4b69      	ldr	r3, [pc, #420]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a68      	ldr	r2, [pc, #416]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a65      	ldr	r2, [pc, #404]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff f8f2 	bl	8000f78 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff f8ee 	bl	8000f78 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e207      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xc0>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8de 	bl	8000f78 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f8da 	bl	8000f78 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1f3      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	4b51      	ldr	r3, [pc, #324]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xe8>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d063      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d11c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b44      	ldr	r3, [pc, #272]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1c7      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4937      	ldr	r1, [pc, #220]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <HAL_RCC_OscConfig+0x244>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f893 	bl	8000f78 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff f88f 	bl	8000f78 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1a8      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4925      	ldr	r1, [pc, #148]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_RCC_OscConfig+0x244>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f872 	bl	8000f78 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f86e 	bl	8000f78 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e187      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d036      	beq.n	8001f30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_RCC_OscConfig+0x248>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f852 	bl	8000f78 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff f84e 	bl	8000f78 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e167      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x200>
 8001ef6:	e01b      	b.n	8001f30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_OscConfig+0x248>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f83b 	bl	8000f78 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e00e      	b.n	8001f24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f06:	f7ff f837 	bl	8000f78 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d907      	bls.n	8001f24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e150      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	42470000 	.word	0x42470000
 8001f20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ea      	bne.n	8001f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8097 	beq.w	800206c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f42:	4b81      	ldr	r3, [pc, #516]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b7d      	ldr	r3, [pc, #500]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a7c      	ldr	r2, [pc, #496]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b77      	ldr	r3, [pc, #476]	; (800214c <HAL_RCC_OscConfig+0x474>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b74      	ldr	r3, [pc, #464]	; (800214c <HAL_RCC_OscConfig+0x474>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a73      	ldr	r2, [pc, #460]	; (800214c <HAL_RCC_OscConfig+0x474>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7fe fff7 	bl	8000f78 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe fff3 	bl	8000f78 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e10c      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0x474>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x2ea>
 8001fb4:	4b64      	ldr	r3, [pc, #400]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	4a63      	ldr	r2, [pc, #396]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x324>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x30c>
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	4a5e      	ldr	r2, [pc, #376]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	4a5b      	ldr	r2, [pc, #364]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0x324>
 8001fe4:	4b58      	ldr	r3, [pc, #352]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	4a57      	ldr	r2, [pc, #348]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	4b55      	ldr	r3, [pc, #340]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a54      	ldr	r2, [pc, #336]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe ffb8 	bl	8000f78 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7fe ffb4 	bl	8000f78 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	; 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0cb      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ee      	beq.n	800200c <HAL_RCC_OscConfig+0x334>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7fe ffa2 	bl	8000f78 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7fe ff9e 	bl	8000f78 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0b5      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ee      	bne.n	8002038 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	4a38      	ldr	r2, [pc, #224]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a1 	beq.w	80021b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002076:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d05c      	beq.n	800213c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d141      	bne.n	800210e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b31      	ldr	r3, [pc, #196]	; (8002150 <HAL_RCC_OscConfig+0x478>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe ff72 	bl	8000f78 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe ff6e 	bl	8000f78 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e087      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	491b      	ldr	r1, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_RCC_OscConfig+0x478>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7fe ff47 	bl	8000f78 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ee:	f7fe ff43 	bl	8000f78 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e05c      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x416>
 800210c:	e054      	b.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_RCC_OscConfig+0x478>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe ff30 	bl	8000f78 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211c:	f7fe ff2c 	bl	8000f78 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e045      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_OscConfig+0x470>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x444>
 800213a:	e03d      	b.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e038      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000
 8002150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x4ec>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d028      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d121      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d11a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002184:	4013      	ands	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	4293      	cmp	r3, r2
 800218e:	d111      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0cc      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d90c      	bls.n	8002204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b65      	ldr	r3, [pc, #404]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800223e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d044      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d119      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d003      	beq.n	8002286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002282:	2b03      	cmp	r3, #3
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e067      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4934      	ldr	r1, [pc, #208]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fe5e 	bl	8000f78 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7fe fe5a 	bl	8000f78 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d20c      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800234e:	f000 f821 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fdbe 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00
 8002384:	40023800 	.word	0x40023800
 8002388:	0800376c 	.word	0x0800376c
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002398:	b094      	sub	sp, #80	; 0x50
 800239a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	647b      	str	r3, [r7, #68]	; 0x44
 80023a0:	2300      	movs	r3, #0
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a4:	2300      	movs	r3, #0
 80023a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ac:	4b79      	ldr	r3, [pc, #484]	; (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d00d      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x40>
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	f200 80e1 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x34>
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_GetSysClockFreq+0x3a>
 80023c6:	e0db      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b73      	ldr	r3, [pc, #460]	; (8002598 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023cc:	e0db      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ce:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCC_GetSysClockFreq+0x208>)
 80023d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023d2:	e0d8      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d4:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023de:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d063      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ea:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	099b      	lsrs	r3, r3, #6
 80023f0:	2200      	movs	r2, #0
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80023f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
 8002402:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002406:	4622      	mov	r2, r4
 8002408:	462b      	mov	r3, r5
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	0159      	lsls	r1, r3, #5
 8002414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002418:	0150      	lsls	r0, r2, #5
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4621      	mov	r1, r4
 8002420:	1a51      	subs	r1, r2, r1
 8002422:	6139      	str	r1, [r7, #16]
 8002424:	4629      	mov	r1, r5
 8002426:	eb63 0301 	sbc.w	r3, r3, r1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002438:	4659      	mov	r1, fp
 800243a:	018b      	lsls	r3, r1, #6
 800243c:	4651      	mov	r1, sl
 800243e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002442:	4651      	mov	r1, sl
 8002444:	018a      	lsls	r2, r1, #6
 8002446:	4651      	mov	r1, sl
 8002448:	ebb2 0801 	subs.w	r8, r2, r1
 800244c:	4659      	mov	r1, fp
 800244e:	eb63 0901 	sbc.w	r9, r3, r1
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800245e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002466:	4690      	mov	r8, r2
 8002468:	4699      	mov	r9, r3
 800246a:	4623      	mov	r3, r4
 800246c:	eb18 0303 	adds.w	r3, r8, r3
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	462b      	mov	r3, r5
 8002474:	eb49 0303 	adc.w	r3, r9, r3
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002486:	4629      	mov	r1, r5
 8002488:	024b      	lsls	r3, r1, #9
 800248a:	4621      	mov	r1, r4
 800248c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002490:	4621      	mov	r1, r4
 8002492:	024a      	lsls	r2, r1, #9
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249a:	2200      	movs	r2, #0
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
 800249e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024a4:	f7fd fea2 	bl	80001ec <__aeabi_uldivmod>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4613      	mov	r3, r2
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b0:	e058      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	099b      	lsrs	r3, r3, #6
 80024b8:	2200      	movs	r2, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	4611      	mov	r1, r2
 80024be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
 80024c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024cc:	4642      	mov	r2, r8
 80024ce:	464b      	mov	r3, r9
 80024d0:	f04f 0000 	mov.w	r0, #0
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	0159      	lsls	r1, r3, #5
 80024da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024de:	0150      	lsls	r0, r2, #5
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4641      	mov	r1, r8
 80024e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ea:	4649      	mov	r1, r9
 80024ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002500:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002504:	ebb2 040a 	subs.w	r4, r2, sl
 8002508:	eb63 050b 	sbc.w	r5, r3, fp
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	00eb      	lsls	r3, r5, #3
 8002516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251a:	00e2      	lsls	r2, r4, #3
 800251c:	4614      	mov	r4, r2
 800251e:	461d      	mov	r5, r3
 8002520:	4643      	mov	r3, r8
 8002522:	18e3      	adds	r3, r4, r3
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	464b      	mov	r3, r9
 8002528:	eb45 0303 	adc.w	r3, r5, r3
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253a:	4629      	mov	r1, r5
 800253c:	028b      	lsls	r3, r1, #10
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002544:	4621      	mov	r1, r4
 8002546:	028a      	lsls	r2, r1, #10
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254e:	2200      	movs	r2, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	61fa      	str	r2, [r7, #28]
 8002554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002558:	f7fd fe48 	bl	80001ec <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002574:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetSysClockFreq+0x204>)
 8002582:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002588:	4618      	mov	r0, r3
 800258a:	3750      	adds	r7, #80	; 0x50
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	007a1200 	.word	0x007a1200

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	0800377c 	.word	0x0800377c

080025e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025e4:	f7ff ffdc 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0b5b      	lsrs	r3, r3, #13
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	0800377c 	.word	0x0800377c

08002608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e03f      	b.n	800269a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fb00 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800264a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f929 	bl	80028a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b08a      	sub	sp, #40	; 0x28
 80026a6:	af02      	add	r7, sp, #8
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	4613      	mov	r3, r2
 80026b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d17c      	bne.n	80027bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_UART_Transmit+0x2c>
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e075      	b.n	80027be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_UART_Transmit+0x3e>
 80026dc:	2302      	movs	r3, #2
 80026de:	e06e      	b.n	80027be <HAL_UART_Transmit+0x11c>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2221      	movs	r2, #33	; 0x21
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f6:	f7fe fc3f 	bl	8000f78 <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	88fa      	ldrh	r2, [r7, #6]
 8002706:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002710:	d108      	bne.n	8002724 <HAL_UART_Transmit+0x82>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d104      	bne.n	8002724 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e003      	b.n	800272c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002734:	e02a      	b.n	800278c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2200      	movs	r2, #0
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f840 	bl	80027c6 <UART_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e036      	b.n	80027be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10b      	bne.n	800276e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	3302      	adds	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e007      	b.n	800277e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3301      	adds	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1cf      	bne.n	8002736 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2200      	movs	r2, #0
 800279e:	2140      	movs	r1, #64	; 0x40
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f810 	bl	80027c6 <UART_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e006      	b.n	80027be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b090      	sub	sp, #64	; 0x40
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d6:	e050      	b.n	800287a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d04c      	beq.n	800287a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80027e6:	f7fe fbc7 	bl	8000f78 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d241      	bcs.n	800287a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	e853 3f00 	ldrex	r3, [r3]
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	330c      	adds	r3, #12
 8002814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002816:	637a      	str	r2, [r7, #52]	; 0x34
 8002818:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800281c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e5      	bne.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3314      	adds	r3, #20
 8002830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	613b      	str	r3, [r7, #16]
   return(result);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3314      	adds	r3, #20
 8002848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800284a:	623a      	str	r2, [r7, #32]
 800284c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	69f9      	ldr	r1, [r7, #28]
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	61bb      	str	r3, [r7, #24]
   return(result);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e5      	bne.n	800282a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e00f      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d09f      	beq.n	80027d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3740      	adds	r7, #64	; 0x40
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b0c0      	sub	sp, #256	; 0x100
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	68d9      	ldr	r1, [r3, #12]
 80028c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	ea40 0301 	orr.w	r3, r0, r1
 80028cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	431a      	orrs	r2, r3
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028fc:	f021 010c 	bic.w	r1, r1, #12
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800290a:	430b      	orrs	r3, r1
 800290c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291e:	6999      	ldr	r1, [r3, #24]
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	ea40 0301 	orr.w	r3, r0, r1
 800292a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b8f      	ldr	r3, [pc, #572]	; (8002b70 <UART_SetConfig+0x2cc>)
 8002934:	429a      	cmp	r2, r3
 8002936:	d005      	beq.n	8002944 <UART_SetConfig+0xa0>
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b8d      	ldr	r3, [pc, #564]	; (8002b74 <UART_SetConfig+0x2d0>)
 8002940:	429a      	cmp	r2, r3
 8002942:	d104      	bne.n	800294e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002944:	f7ff fe4c 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 8002948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800294c:	e003      	b.n	8002956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800294e:	f7ff fe33 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8002952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002960:	f040 810c 	bne.w	8002b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002968:	2200      	movs	r2, #0
 800296a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800296e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002976:	4622      	mov	r2, r4
 8002978:	462b      	mov	r3, r5
 800297a:	1891      	adds	r1, r2, r2
 800297c:	65b9      	str	r1, [r7, #88]	; 0x58
 800297e:	415b      	adcs	r3, r3
 8002980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002986:	4621      	mov	r1, r4
 8002988:	eb12 0801 	adds.w	r8, r2, r1
 800298c:	4629      	mov	r1, r5
 800298e:	eb43 0901 	adc.w	r9, r3, r1
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800299e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029a6:	4690      	mov	r8, r2
 80029a8:	4699      	mov	r9, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	eb18 0303 	adds.w	r3, r8, r3
 80029b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029b4:	462b      	mov	r3, r5
 80029b6:	eb49 0303 	adc.w	r3, r9, r3
 80029ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029d2:	460b      	mov	r3, r1
 80029d4:	18db      	adds	r3, r3, r3
 80029d6:	653b      	str	r3, [r7, #80]	; 0x50
 80029d8:	4613      	mov	r3, r2
 80029da:	eb42 0303 	adc.w	r3, r2, r3
 80029de:	657b      	str	r3, [r7, #84]	; 0x54
 80029e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029e8:	f7fd fc00 	bl	80001ec <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <UART_SetConfig+0x2d4>)
 80029f2:	fba3 2302 	umull	r2, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	011c      	lsls	r4, r3, #4
 80029fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a14:	415b      	adcs	r3, r3
 8002a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a22:	4649      	mov	r1, r9
 8002a24:	eb43 0b01 	adc.w	fp, r3, r1
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a3c:	4692      	mov	sl, r2
 8002a3e:	469b      	mov	fp, r3
 8002a40:	4643      	mov	r3, r8
 8002a42:	eb1a 0303 	adds.w	r3, sl, r3
 8002a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	18db      	adds	r3, r3, r3
 8002a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a6e:	4613      	mov	r3, r2
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	647b      	str	r3, [r7, #68]	; 0x44
 8002a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a7e:	f7fd fbb5 	bl	80001ec <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <UART_SetConfig+0x2d4>)
 8002a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2264      	movs	r2, #100	; 0x64
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	1acb      	subs	r3, r1, r3
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a9e:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <UART_SetConfig+0x2d4>)
 8002aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aac:	441c      	add	r4, r3
 8002aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	1891      	adds	r1, r2, r2
 8002ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ac8:	415b      	adcs	r3, r3
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	1851      	adds	r1, r2, r1
 8002ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	414b      	adcs	r3, r1
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ae8:	4659      	mov	r1, fp
 8002aea:	00cb      	lsls	r3, r1, #3
 8002aec:	4651      	mov	r1, sl
 8002aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af2:	4651      	mov	r1, sl
 8002af4:	00ca      	lsls	r2, r1, #3
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	4642      	mov	r2, r8
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b04:	464b      	mov	r3, r9
 8002b06:	460a      	mov	r2, r1
 8002b08:	eb42 0303 	adc.w	r3, r2, r3
 8002b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b24:	460b      	mov	r3, r1
 8002b26:	18db      	adds	r3, r3, r3
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	eb42 0303 	adc.w	r3, r2, r3
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b3a:	f7fd fb57 	bl	80001ec <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <UART_SetConfig+0x2d4>)
 8002b44:	fba3 1302 	umull	r1, r3, r3, r2
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	2164      	movs	r1, #100	; 0x64
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	3332      	adds	r3, #50	; 0x32
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <UART_SetConfig+0x2d4>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 0207 	and.w	r2, r3, #7
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4422      	add	r2, r4
 8002b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b6c:	e106      	b.n	8002d7c <UART_SetConfig+0x4d8>
 8002b6e:	bf00      	nop
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40011400 	.word	0x40011400
 8002b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b8e:	4642      	mov	r2, r8
 8002b90:	464b      	mov	r3, r9
 8002b92:	1891      	adds	r1, r2, r2
 8002b94:	6239      	str	r1, [r7, #32]
 8002b96:	415b      	adcs	r3, r3
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	1854      	adds	r4, r2, r1
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	eb43 0501 	adc.w	r5, r3, r1
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	00eb      	lsls	r3, r5, #3
 8002bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bb6:	00e2      	lsls	r2, r4, #3
 8002bb8:	4614      	mov	r4, r2
 8002bba:	461d      	mov	r5, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	18e3      	adds	r3, r4, r3
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bc4:	464b      	mov	r3, r9
 8002bc6:	eb45 0303 	adc.w	r3, r5, r3
 8002bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bea:	4629      	mov	r1, r5
 8002bec:	008b      	lsls	r3, r1, #2
 8002bee:	4621      	mov	r1, r4
 8002bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	008a      	lsls	r2, r1, #2
 8002bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bfc:	f7fd faf6 	bl	80001ec <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4b60      	ldr	r3, [pc, #384]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002c06:	fba3 2302 	umull	r2, r3, r3, r2
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	011c      	lsls	r4, r3, #4
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	61b9      	str	r1, [r7, #24]
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c30:	4641      	mov	r1, r8
 8002c32:	1851      	adds	r1, r2, r1
 8002c34:	6139      	str	r1, [r7, #16]
 8002c36:	4649      	mov	r1, r9
 8002c38:	414b      	adcs	r3, r1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c48:	4659      	mov	r1, fp
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c52:	4651      	mov	r1, sl
 8002c54:	00ca      	lsls	r2, r1, #3
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c64:	464b      	mov	r3, r9
 8002c66:	460a      	mov	r2, r1
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c88:	4649      	mov	r1, r9
 8002c8a:	008b      	lsls	r3, r1, #2
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c92:	4641      	mov	r1, r8
 8002c94:	008a      	lsls	r2, r1, #2
 8002c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c9a:	f7fd faa7 	bl	80001ec <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2264      	movs	r2, #100	; 0x64
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	1acb      	subs	r3, r1, r3
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	3332      	adds	r3, #50	; 0x32
 8002cb8:	4a33      	ldr	r2, [pc, #204]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	441c      	add	r4, r3
 8002cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cca:	2200      	movs	r2, #0
 8002ccc:	673b      	str	r3, [r7, #112]	; 0x70
 8002cce:	677a      	str	r2, [r7, #116]	; 0x74
 8002cd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	1851      	adds	r1, r2, r1
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	4649      	mov	r1, r9
 8002cec:	414b      	adcs	r3, r1
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	00cb      	lsls	r3, r1, #3
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d06:	4651      	mov	r1, sl
 8002d08:	00ca      	lsls	r2, r1, #3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4642      	mov	r2, r8
 8002d12:	189b      	adds	r3, r3, r2
 8002d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d16:	464b      	mov	r3, r9
 8002d18:	460a      	mov	r2, r1
 8002d1a:	eb42 0303 	adc.w	r3, r2, r3
 8002d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2a:	667a      	str	r2, [r7, #100]	; 0x64
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d38:	4649      	mov	r1, r9
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d42:	4641      	mov	r1, r8
 8002d44:	008a      	lsls	r2, r1, #2
 8002d46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d4a:	f7fd fa4f 	bl	80001ec <__aeabi_uldivmod>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002d54:	fba3 1302 	umull	r1, r3, r3, r2
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	2164      	movs	r1, #100	; 0x64
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	3332      	adds	r3, #50	; 0x32
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4422      	add	r2, r4
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d82:	46bd      	mov	sp, r7
 8002d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d88:	51eb851f 	.word	0x51eb851f

08002d8c <std>:
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	b510      	push	{r4, lr}
 8002d90:	4604      	mov	r4, r0
 8002d92:	e9c0 3300 	strd	r3, r3, [r0]
 8002d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d9a:	6083      	str	r3, [r0, #8]
 8002d9c:	8181      	strh	r1, [r0, #12]
 8002d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8002da0:	81c2      	strh	r2, [r0, #14]
 8002da2:	6183      	str	r3, [r0, #24]
 8002da4:	4619      	mov	r1, r3
 8002da6:	2208      	movs	r2, #8
 8002da8:	305c      	adds	r0, #92	; 0x5c
 8002daa:	f000 f9e5 	bl	8003178 <memset>
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <std+0x58>)
 8002db0:	6263      	str	r3, [r4, #36]	; 0x24
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <std+0x5c>)
 8002db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <std+0x60>)
 8002db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <std+0x64>)
 8002dbc:	6323      	str	r3, [r4, #48]	; 0x30
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <std+0x68>)
 8002dc0:	6224      	str	r4, [r4, #32]
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	d006      	beq.n	8002dd4 <std+0x48>
 8002dc6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002dca:	4294      	cmp	r4, r2
 8002dcc:	d002      	beq.n	8002dd4 <std+0x48>
 8002dce:	33d0      	adds	r3, #208	; 0xd0
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	d105      	bne.n	8002de0 <std+0x54>
 8002dd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ddc:	f000 ba44 	b.w	8003268 <__retarget_lock_init_recursive>
 8002de0:	bd10      	pop	{r4, pc}
 8002de2:	bf00      	nop
 8002de4:	08002fc9 	.word	0x08002fc9
 8002de8:	08002feb 	.word	0x08002feb
 8002dec:	08003023 	.word	0x08003023
 8002df0:	08003047 	.word	0x08003047
 8002df4:	20000310 	.word	0x20000310

08002df8 <stdio_exit_handler>:
 8002df8:	4a02      	ldr	r2, [pc, #8]	; (8002e04 <stdio_exit_handler+0xc>)
 8002dfa:	4903      	ldr	r1, [pc, #12]	; (8002e08 <stdio_exit_handler+0x10>)
 8002dfc:	4803      	ldr	r0, [pc, #12]	; (8002e0c <stdio_exit_handler+0x14>)
 8002dfe:	f000 b869 	b.w	8002ed4 <_fwalk_sglue>
 8002e02:	bf00      	nop
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	0800356d 	.word	0x0800356d
 8002e0c:	20000018 	.word	0x20000018

08002e10 <cleanup_stdio>:
 8002e10:	6841      	ldr	r1, [r0, #4]
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <cleanup_stdio+0x34>)
 8002e14:	4299      	cmp	r1, r3
 8002e16:	b510      	push	{r4, lr}
 8002e18:	4604      	mov	r4, r0
 8002e1a:	d001      	beq.n	8002e20 <cleanup_stdio+0x10>
 8002e1c:	f000 fba6 	bl	800356c <_fflush_r>
 8002e20:	68a1      	ldr	r1, [r4, #8]
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <cleanup_stdio+0x38>)
 8002e24:	4299      	cmp	r1, r3
 8002e26:	d002      	beq.n	8002e2e <cleanup_stdio+0x1e>
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f000 fb9f 	bl	800356c <_fflush_r>
 8002e2e:	68e1      	ldr	r1, [r4, #12]
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <cleanup_stdio+0x3c>)
 8002e32:	4299      	cmp	r1, r3
 8002e34:	d004      	beq.n	8002e40 <cleanup_stdio+0x30>
 8002e36:	4620      	mov	r0, r4
 8002e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e3c:	f000 bb96 	b.w	800356c <_fflush_r>
 8002e40:	bd10      	pop	{r4, pc}
 8002e42:	bf00      	nop
 8002e44:	20000310 	.word	0x20000310
 8002e48:	20000378 	.word	0x20000378
 8002e4c:	200003e0 	.word	0x200003e0

08002e50 <global_stdio_init.part.0>:
 8002e50:	b510      	push	{r4, lr}
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <global_stdio_init.part.0+0x30>)
 8002e54:	4c0b      	ldr	r4, [pc, #44]	; (8002e84 <global_stdio_init.part.0+0x34>)
 8002e56:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <global_stdio_init.part.0+0x38>)
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2104      	movs	r1, #4
 8002e60:	f7ff ff94 	bl	8002d8c <std>
 8002e64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002e68:	2201      	movs	r2, #1
 8002e6a:	2109      	movs	r1, #9
 8002e6c:	f7ff ff8e 	bl	8002d8c <std>
 8002e70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002e74:	2202      	movs	r2, #2
 8002e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e7a:	2112      	movs	r1, #18
 8002e7c:	f7ff bf86 	b.w	8002d8c <std>
 8002e80:	20000448 	.word	0x20000448
 8002e84:	20000310 	.word	0x20000310
 8002e88:	08002df9 	.word	0x08002df9

08002e8c <__sfp_lock_acquire>:
 8002e8c:	4801      	ldr	r0, [pc, #4]	; (8002e94 <__sfp_lock_acquire+0x8>)
 8002e8e:	f000 b9ec 	b.w	800326a <__retarget_lock_acquire_recursive>
 8002e92:	bf00      	nop
 8002e94:	20000451 	.word	0x20000451

08002e98 <__sfp_lock_release>:
 8002e98:	4801      	ldr	r0, [pc, #4]	; (8002ea0 <__sfp_lock_release+0x8>)
 8002e9a:	f000 b9e7 	b.w	800326c <__retarget_lock_release_recursive>
 8002e9e:	bf00      	nop
 8002ea0:	20000451 	.word	0x20000451

08002ea4 <__sinit>:
 8002ea4:	b510      	push	{r4, lr}
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	f7ff fff0 	bl	8002e8c <__sfp_lock_acquire>
 8002eac:	6a23      	ldr	r3, [r4, #32]
 8002eae:	b11b      	cbz	r3, 8002eb8 <__sinit+0x14>
 8002eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eb4:	f7ff bff0 	b.w	8002e98 <__sfp_lock_release>
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <__sinit+0x28>)
 8002eba:	6223      	str	r3, [r4, #32]
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <__sinit+0x2c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f5      	bne.n	8002eb0 <__sinit+0xc>
 8002ec4:	f7ff ffc4 	bl	8002e50 <global_stdio_init.part.0>
 8002ec8:	e7f2      	b.n	8002eb0 <__sinit+0xc>
 8002eca:	bf00      	nop
 8002ecc:	08002e11 	.word	0x08002e11
 8002ed0:	20000448 	.word	0x20000448

08002ed4 <_fwalk_sglue>:
 8002ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ed8:	4607      	mov	r7, r0
 8002eda:	4688      	mov	r8, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	2600      	movs	r6, #0
 8002ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8002ee8:	d505      	bpl.n	8002ef6 <_fwalk_sglue+0x22>
 8002eea:	6824      	ldr	r4, [r4, #0]
 8002eec:	2c00      	cmp	r4, #0
 8002eee:	d1f7      	bne.n	8002ee0 <_fwalk_sglue+0xc>
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ef6:	89ab      	ldrh	r3, [r5, #12]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d907      	bls.n	8002f0c <_fwalk_sglue+0x38>
 8002efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f00:	3301      	adds	r3, #1
 8002f02:	d003      	beq.n	8002f0c <_fwalk_sglue+0x38>
 8002f04:	4629      	mov	r1, r5
 8002f06:	4638      	mov	r0, r7
 8002f08:	47c0      	blx	r8
 8002f0a:	4306      	orrs	r6, r0
 8002f0c:	3568      	adds	r5, #104	; 0x68
 8002f0e:	e7e9      	b.n	8002ee4 <_fwalk_sglue+0x10>

08002f10 <_puts_r>:
 8002f10:	6a03      	ldr	r3, [r0, #32]
 8002f12:	b570      	push	{r4, r5, r6, lr}
 8002f14:	6884      	ldr	r4, [r0, #8]
 8002f16:	4605      	mov	r5, r0
 8002f18:	460e      	mov	r6, r1
 8002f1a:	b90b      	cbnz	r3, 8002f20 <_puts_r+0x10>
 8002f1c:	f7ff ffc2 	bl	8002ea4 <__sinit>
 8002f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f22:	07db      	lsls	r3, r3, #31
 8002f24:	d405      	bmi.n	8002f32 <_puts_r+0x22>
 8002f26:	89a3      	ldrh	r3, [r4, #12]
 8002f28:	0598      	lsls	r0, r3, #22
 8002f2a:	d402      	bmi.n	8002f32 <_puts_r+0x22>
 8002f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f2e:	f000 f99c 	bl	800326a <__retarget_lock_acquire_recursive>
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	0719      	lsls	r1, r3, #28
 8002f36:	d513      	bpl.n	8002f60 <_puts_r+0x50>
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	b18b      	cbz	r3, 8002f60 <_puts_r+0x50>
 8002f3c:	3e01      	subs	r6, #1
 8002f3e:	68a3      	ldr	r3, [r4, #8]
 8002f40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60a3      	str	r3, [r4, #8]
 8002f48:	b9e9      	cbnz	r1, 8002f86 <_puts_r+0x76>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da2e      	bge.n	8002fac <_puts_r+0x9c>
 8002f4e:	4622      	mov	r2, r4
 8002f50:	210a      	movs	r1, #10
 8002f52:	4628      	mov	r0, r5
 8002f54:	f000 f87b 	bl	800304e <__swbuf_r>
 8002f58:	3001      	adds	r0, #1
 8002f5a:	d007      	beq.n	8002f6c <_puts_r+0x5c>
 8002f5c:	250a      	movs	r5, #10
 8002f5e:	e007      	b.n	8002f70 <_puts_r+0x60>
 8002f60:	4621      	mov	r1, r4
 8002f62:	4628      	mov	r0, r5
 8002f64:	f000 f8b0 	bl	80030c8 <__swsetup_r>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d0e7      	beq.n	8002f3c <_puts_r+0x2c>
 8002f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8002f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f72:	07da      	lsls	r2, r3, #31
 8002f74:	d405      	bmi.n	8002f82 <_puts_r+0x72>
 8002f76:	89a3      	ldrh	r3, [r4, #12]
 8002f78:	059b      	lsls	r3, r3, #22
 8002f7a:	d402      	bmi.n	8002f82 <_puts_r+0x72>
 8002f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f7e:	f000 f975 	bl	800326c <__retarget_lock_release_recursive>
 8002f82:	4628      	mov	r0, r5
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	da04      	bge.n	8002f94 <_puts_r+0x84>
 8002f8a:	69a2      	ldr	r2, [r4, #24]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dc06      	bgt.n	8002f9e <_puts_r+0x8e>
 8002f90:	290a      	cmp	r1, #10
 8002f92:	d004      	beq.n	8002f9e <_puts_r+0x8e>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	6022      	str	r2, [r4, #0]
 8002f9a:	7019      	strb	r1, [r3, #0]
 8002f9c:	e7cf      	b.n	8002f3e <_puts_r+0x2e>
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f000 f854 	bl	800304e <__swbuf_r>
 8002fa6:	3001      	adds	r0, #1
 8002fa8:	d1c9      	bne.n	8002f3e <_puts_r+0x2e>
 8002faa:	e7df      	b.n	8002f6c <_puts_r+0x5c>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	250a      	movs	r5, #10
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	6022      	str	r2, [r4, #0]
 8002fb4:	701d      	strb	r5, [r3, #0]
 8002fb6:	e7db      	b.n	8002f70 <_puts_r+0x60>

08002fb8 <puts>:
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <puts+0xc>)
 8002fba:	4601      	mov	r1, r0
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	f7ff bfa7 	b.w	8002f10 <_puts_r>
 8002fc2:	bf00      	nop
 8002fc4:	20000064 	.word	0x20000064

08002fc8 <__sread>:
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	460c      	mov	r4, r1
 8002fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd0:	f000 f8fc 	bl	80031cc <_read_r>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	bfab      	itete	ge
 8002fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fda:	89a3      	ldrhlt	r3, [r4, #12]
 8002fdc:	181b      	addge	r3, r3, r0
 8002fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fe2:	bfac      	ite	ge
 8002fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fe6:	81a3      	strhlt	r3, [r4, #12]
 8002fe8:	bd10      	pop	{r4, pc}

08002fea <__swrite>:
 8002fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fee:	461f      	mov	r7, r3
 8002ff0:	898b      	ldrh	r3, [r1, #12]
 8002ff2:	05db      	lsls	r3, r3, #23
 8002ff4:	4605      	mov	r5, r0
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	4616      	mov	r6, r2
 8002ffa:	d505      	bpl.n	8003008 <__swrite+0x1e>
 8002ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003000:	2302      	movs	r3, #2
 8003002:	2200      	movs	r2, #0
 8003004:	f000 f8d0 	bl	80031a8 <_lseek_r>
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800300e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003012:	81a3      	strh	r3, [r4, #12]
 8003014:	4632      	mov	r2, r6
 8003016:	463b      	mov	r3, r7
 8003018:	4628      	mov	r0, r5
 800301a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800301e:	f000 b8e7 	b.w	80031f0 <_write_r>

08003022 <__sseek>:
 8003022:	b510      	push	{r4, lr}
 8003024:	460c      	mov	r4, r1
 8003026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800302a:	f000 f8bd 	bl	80031a8 <_lseek_r>
 800302e:	1c43      	adds	r3, r0, #1
 8003030:	89a3      	ldrh	r3, [r4, #12]
 8003032:	bf15      	itete	ne
 8003034:	6560      	strne	r0, [r4, #84]	; 0x54
 8003036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800303a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800303e:	81a3      	strheq	r3, [r4, #12]
 8003040:	bf18      	it	ne
 8003042:	81a3      	strhne	r3, [r4, #12]
 8003044:	bd10      	pop	{r4, pc}

08003046 <__sclose>:
 8003046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800304a:	f000 b89d 	b.w	8003188 <_close_r>

0800304e <__swbuf_r>:
 800304e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003050:	460e      	mov	r6, r1
 8003052:	4614      	mov	r4, r2
 8003054:	4605      	mov	r5, r0
 8003056:	b118      	cbz	r0, 8003060 <__swbuf_r+0x12>
 8003058:	6a03      	ldr	r3, [r0, #32]
 800305a:	b90b      	cbnz	r3, 8003060 <__swbuf_r+0x12>
 800305c:	f7ff ff22 	bl	8002ea4 <__sinit>
 8003060:	69a3      	ldr	r3, [r4, #24]
 8003062:	60a3      	str	r3, [r4, #8]
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	071a      	lsls	r2, r3, #28
 8003068:	d525      	bpl.n	80030b6 <__swbuf_r+0x68>
 800306a:	6923      	ldr	r3, [r4, #16]
 800306c:	b31b      	cbz	r3, 80030b6 <__swbuf_r+0x68>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	6922      	ldr	r2, [r4, #16]
 8003072:	1a98      	subs	r0, r3, r2
 8003074:	6963      	ldr	r3, [r4, #20]
 8003076:	b2f6      	uxtb	r6, r6
 8003078:	4283      	cmp	r3, r0
 800307a:	4637      	mov	r7, r6
 800307c:	dc04      	bgt.n	8003088 <__swbuf_r+0x3a>
 800307e:	4621      	mov	r1, r4
 8003080:	4628      	mov	r0, r5
 8003082:	f000 fa73 	bl	800356c <_fflush_r>
 8003086:	b9e0      	cbnz	r0, 80030c2 <__swbuf_r+0x74>
 8003088:	68a3      	ldr	r3, [r4, #8]
 800308a:	3b01      	subs	r3, #1
 800308c:	60a3      	str	r3, [r4, #8]
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	6022      	str	r2, [r4, #0]
 8003094:	701e      	strb	r6, [r3, #0]
 8003096:	6962      	ldr	r2, [r4, #20]
 8003098:	1c43      	adds	r3, r0, #1
 800309a:	429a      	cmp	r2, r3
 800309c:	d004      	beq.n	80030a8 <__swbuf_r+0x5a>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	07db      	lsls	r3, r3, #31
 80030a2:	d506      	bpl.n	80030b2 <__swbuf_r+0x64>
 80030a4:	2e0a      	cmp	r6, #10
 80030a6:	d104      	bne.n	80030b2 <__swbuf_r+0x64>
 80030a8:	4621      	mov	r1, r4
 80030aa:	4628      	mov	r0, r5
 80030ac:	f000 fa5e 	bl	800356c <_fflush_r>
 80030b0:	b938      	cbnz	r0, 80030c2 <__swbuf_r+0x74>
 80030b2:	4638      	mov	r0, r7
 80030b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b6:	4621      	mov	r1, r4
 80030b8:	4628      	mov	r0, r5
 80030ba:	f000 f805 	bl	80030c8 <__swsetup_r>
 80030be:	2800      	cmp	r0, #0
 80030c0:	d0d5      	beq.n	800306e <__swbuf_r+0x20>
 80030c2:	f04f 37ff 	mov.w	r7, #4294967295
 80030c6:	e7f4      	b.n	80030b2 <__swbuf_r+0x64>

080030c8 <__swsetup_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <__swsetup_r+0xac>)
 80030cc:	4605      	mov	r5, r0
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	460c      	mov	r4, r1
 80030d2:	b118      	cbz	r0, 80030dc <__swsetup_r+0x14>
 80030d4:	6a03      	ldr	r3, [r0, #32]
 80030d6:	b90b      	cbnz	r3, 80030dc <__swsetup_r+0x14>
 80030d8:	f7ff fee4 	bl	8002ea4 <__sinit>
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030e2:	0718      	lsls	r0, r3, #28
 80030e4:	d422      	bmi.n	800312c <__swsetup_r+0x64>
 80030e6:	06d9      	lsls	r1, r3, #27
 80030e8:	d407      	bmi.n	80030fa <__swsetup_r+0x32>
 80030ea:	2309      	movs	r3, #9
 80030ec:	602b      	str	r3, [r5, #0]
 80030ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030f2:	81a3      	strh	r3, [r4, #12]
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	e034      	b.n	8003164 <__swsetup_r+0x9c>
 80030fa:	0758      	lsls	r0, r3, #29
 80030fc:	d512      	bpl.n	8003124 <__swsetup_r+0x5c>
 80030fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003100:	b141      	cbz	r1, 8003114 <__swsetup_r+0x4c>
 8003102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003106:	4299      	cmp	r1, r3
 8003108:	d002      	beq.n	8003110 <__swsetup_r+0x48>
 800310a:	4628      	mov	r0, r5
 800310c:	f000 f8b0 	bl	8003270 <_free_r>
 8003110:	2300      	movs	r3, #0
 8003112:	6363      	str	r3, [r4, #52]	; 0x34
 8003114:	89a3      	ldrh	r3, [r4, #12]
 8003116:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800311a:	81a3      	strh	r3, [r4, #12]
 800311c:	2300      	movs	r3, #0
 800311e:	6063      	str	r3, [r4, #4]
 8003120:	6923      	ldr	r3, [r4, #16]
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	f043 0308 	orr.w	r3, r3, #8
 800312a:	81a3      	strh	r3, [r4, #12]
 800312c:	6923      	ldr	r3, [r4, #16]
 800312e:	b94b      	cbnz	r3, 8003144 <__swsetup_r+0x7c>
 8003130:	89a3      	ldrh	r3, [r4, #12]
 8003132:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800313a:	d003      	beq.n	8003144 <__swsetup_r+0x7c>
 800313c:	4621      	mov	r1, r4
 800313e:	4628      	mov	r0, r5
 8003140:	f000 fa62 	bl	8003608 <__smakebuf_r>
 8003144:	89a0      	ldrh	r0, [r4, #12]
 8003146:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800314a:	f010 0301 	ands.w	r3, r0, #1
 800314e:	d00a      	beq.n	8003166 <__swsetup_r+0x9e>
 8003150:	2300      	movs	r3, #0
 8003152:	60a3      	str	r3, [r4, #8]
 8003154:	6963      	ldr	r3, [r4, #20]
 8003156:	425b      	negs	r3, r3
 8003158:	61a3      	str	r3, [r4, #24]
 800315a:	6923      	ldr	r3, [r4, #16]
 800315c:	b943      	cbnz	r3, 8003170 <__swsetup_r+0xa8>
 800315e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003162:	d1c4      	bne.n	80030ee <__swsetup_r+0x26>
 8003164:	bd38      	pop	{r3, r4, r5, pc}
 8003166:	0781      	lsls	r1, r0, #30
 8003168:	bf58      	it	pl
 800316a:	6963      	ldrpl	r3, [r4, #20]
 800316c:	60a3      	str	r3, [r4, #8]
 800316e:	e7f4      	b.n	800315a <__swsetup_r+0x92>
 8003170:	2000      	movs	r0, #0
 8003172:	e7f7      	b.n	8003164 <__swsetup_r+0x9c>
 8003174:	20000064 	.word	0x20000064

08003178 <memset>:
 8003178:	4402      	add	r2, r0
 800317a:	4603      	mov	r3, r0
 800317c:	4293      	cmp	r3, r2
 800317e:	d100      	bne.n	8003182 <memset+0xa>
 8003180:	4770      	bx	lr
 8003182:	f803 1b01 	strb.w	r1, [r3], #1
 8003186:	e7f9      	b.n	800317c <memset+0x4>

08003188 <_close_r>:
 8003188:	b538      	push	{r3, r4, r5, lr}
 800318a:	4d06      	ldr	r5, [pc, #24]	; (80031a4 <_close_r+0x1c>)
 800318c:	2300      	movs	r3, #0
 800318e:	4604      	mov	r4, r0
 8003190:	4608      	mov	r0, r1
 8003192:	602b      	str	r3, [r5, #0]
 8003194:	f7fd fde4 	bl	8000d60 <_close>
 8003198:	1c43      	adds	r3, r0, #1
 800319a:	d102      	bne.n	80031a2 <_close_r+0x1a>
 800319c:	682b      	ldr	r3, [r5, #0]
 800319e:	b103      	cbz	r3, 80031a2 <_close_r+0x1a>
 80031a0:	6023      	str	r3, [r4, #0]
 80031a2:	bd38      	pop	{r3, r4, r5, pc}
 80031a4:	2000044c 	.word	0x2000044c

080031a8 <_lseek_r>:
 80031a8:	b538      	push	{r3, r4, r5, lr}
 80031aa:	4d07      	ldr	r5, [pc, #28]	; (80031c8 <_lseek_r+0x20>)
 80031ac:	4604      	mov	r4, r0
 80031ae:	4608      	mov	r0, r1
 80031b0:	4611      	mov	r1, r2
 80031b2:	2200      	movs	r2, #0
 80031b4:	602a      	str	r2, [r5, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f7fd fdf9 	bl	8000dae <_lseek>
 80031bc:	1c43      	adds	r3, r0, #1
 80031be:	d102      	bne.n	80031c6 <_lseek_r+0x1e>
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	b103      	cbz	r3, 80031c6 <_lseek_r+0x1e>
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	bd38      	pop	{r3, r4, r5, pc}
 80031c8:	2000044c 	.word	0x2000044c

080031cc <_read_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4d07      	ldr	r5, [pc, #28]	; (80031ec <_read_r+0x20>)
 80031d0:	4604      	mov	r4, r0
 80031d2:	4608      	mov	r0, r1
 80031d4:	4611      	mov	r1, r2
 80031d6:	2200      	movs	r2, #0
 80031d8:	602a      	str	r2, [r5, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	f7fd fda3 	bl	8000d26 <_read>
 80031e0:	1c43      	adds	r3, r0, #1
 80031e2:	d102      	bne.n	80031ea <_read_r+0x1e>
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	b103      	cbz	r3, 80031ea <_read_r+0x1e>
 80031e8:	6023      	str	r3, [r4, #0]
 80031ea:	bd38      	pop	{r3, r4, r5, pc}
 80031ec:	2000044c 	.word	0x2000044c

080031f0 <_write_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	4d07      	ldr	r5, [pc, #28]	; (8003210 <_write_r+0x20>)
 80031f4:	4604      	mov	r4, r0
 80031f6:	4608      	mov	r0, r1
 80031f8:	4611      	mov	r1, r2
 80031fa:	2200      	movs	r2, #0
 80031fc:	602a      	str	r2, [r5, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	f7fd f972 	bl	80004e8 <_write>
 8003204:	1c43      	adds	r3, r0, #1
 8003206:	d102      	bne.n	800320e <_write_r+0x1e>
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	b103      	cbz	r3, 800320e <_write_r+0x1e>
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	bd38      	pop	{r3, r4, r5, pc}
 8003210:	2000044c 	.word	0x2000044c

08003214 <__errno>:
 8003214:	4b01      	ldr	r3, [pc, #4]	; (800321c <__errno+0x8>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000064 	.word	0x20000064

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	4d0d      	ldr	r5, [pc, #52]	; (8003258 <__libc_init_array+0x38>)
 8003224:	4c0d      	ldr	r4, [pc, #52]	; (800325c <__libc_init_array+0x3c>)
 8003226:	1b64      	subs	r4, r4, r5
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	2600      	movs	r6, #0
 800322c:	42a6      	cmp	r6, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	4d0b      	ldr	r5, [pc, #44]	; (8003260 <__libc_init_array+0x40>)
 8003232:	4c0c      	ldr	r4, [pc, #48]	; (8003264 <__libc_init_array+0x44>)
 8003234:	f000 fa56 	bl	80036e4 <_init>
 8003238:	1b64      	subs	r4, r4, r5
 800323a:	10a4      	asrs	r4, r4, #2
 800323c:	2600      	movs	r6, #0
 800323e:	42a6      	cmp	r6, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	f855 3b04 	ldr.w	r3, [r5], #4
 8003248:	4798      	blx	r3
 800324a:	3601      	adds	r6, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003252:	4798      	blx	r3
 8003254:	3601      	adds	r6, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	0800378c 	.word	0x0800378c
 800325c:	0800378c 	.word	0x0800378c
 8003260:	0800378c 	.word	0x0800378c
 8003264:	08003790 	.word	0x08003790

08003268 <__retarget_lock_init_recursive>:
 8003268:	4770      	bx	lr

0800326a <__retarget_lock_acquire_recursive>:
 800326a:	4770      	bx	lr

0800326c <__retarget_lock_release_recursive>:
 800326c:	4770      	bx	lr
	...

08003270 <_free_r>:
 8003270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003272:	2900      	cmp	r1, #0
 8003274:	d044      	beq.n	8003300 <_free_r+0x90>
 8003276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800327a:	9001      	str	r0, [sp, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f1a1 0404 	sub.w	r4, r1, #4
 8003282:	bfb8      	it	lt
 8003284:	18e4      	addlt	r4, r4, r3
 8003286:	f000 f8df 	bl	8003448 <__malloc_lock>
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <_free_r+0x94>)
 800328c:	9801      	ldr	r0, [sp, #4]
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	b933      	cbnz	r3, 80032a0 <_free_r+0x30>
 8003292:	6063      	str	r3, [r4, #4]
 8003294:	6014      	str	r4, [r2, #0]
 8003296:	b003      	add	sp, #12
 8003298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800329c:	f000 b8da 	b.w	8003454 <__malloc_unlock>
 80032a0:	42a3      	cmp	r3, r4
 80032a2:	d908      	bls.n	80032b6 <_free_r+0x46>
 80032a4:	6825      	ldr	r5, [r4, #0]
 80032a6:	1961      	adds	r1, r4, r5
 80032a8:	428b      	cmp	r3, r1
 80032aa:	bf01      	itttt	eq
 80032ac:	6819      	ldreq	r1, [r3, #0]
 80032ae:	685b      	ldreq	r3, [r3, #4]
 80032b0:	1949      	addeq	r1, r1, r5
 80032b2:	6021      	streq	r1, [r4, #0]
 80032b4:	e7ed      	b.n	8003292 <_free_r+0x22>
 80032b6:	461a      	mov	r2, r3
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	b10b      	cbz	r3, 80032c0 <_free_r+0x50>
 80032bc:	42a3      	cmp	r3, r4
 80032be:	d9fa      	bls.n	80032b6 <_free_r+0x46>
 80032c0:	6811      	ldr	r1, [r2, #0]
 80032c2:	1855      	adds	r5, r2, r1
 80032c4:	42a5      	cmp	r5, r4
 80032c6:	d10b      	bne.n	80032e0 <_free_r+0x70>
 80032c8:	6824      	ldr	r4, [r4, #0]
 80032ca:	4421      	add	r1, r4
 80032cc:	1854      	adds	r4, r2, r1
 80032ce:	42a3      	cmp	r3, r4
 80032d0:	6011      	str	r1, [r2, #0]
 80032d2:	d1e0      	bne.n	8003296 <_free_r+0x26>
 80032d4:	681c      	ldr	r4, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	6053      	str	r3, [r2, #4]
 80032da:	440c      	add	r4, r1
 80032dc:	6014      	str	r4, [r2, #0]
 80032de:	e7da      	b.n	8003296 <_free_r+0x26>
 80032e0:	d902      	bls.n	80032e8 <_free_r+0x78>
 80032e2:	230c      	movs	r3, #12
 80032e4:	6003      	str	r3, [r0, #0]
 80032e6:	e7d6      	b.n	8003296 <_free_r+0x26>
 80032e8:	6825      	ldr	r5, [r4, #0]
 80032ea:	1961      	adds	r1, r4, r5
 80032ec:	428b      	cmp	r3, r1
 80032ee:	bf04      	itt	eq
 80032f0:	6819      	ldreq	r1, [r3, #0]
 80032f2:	685b      	ldreq	r3, [r3, #4]
 80032f4:	6063      	str	r3, [r4, #4]
 80032f6:	bf04      	itt	eq
 80032f8:	1949      	addeq	r1, r1, r5
 80032fa:	6021      	streq	r1, [r4, #0]
 80032fc:	6054      	str	r4, [r2, #4]
 80032fe:	e7ca      	b.n	8003296 <_free_r+0x26>
 8003300:	b003      	add	sp, #12
 8003302:	bd30      	pop	{r4, r5, pc}
 8003304:	20000454 	.word	0x20000454

08003308 <sbrk_aligned>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	4e0e      	ldr	r6, [pc, #56]	; (8003344 <sbrk_aligned+0x3c>)
 800330c:	460c      	mov	r4, r1
 800330e:	6831      	ldr	r1, [r6, #0]
 8003310:	4605      	mov	r5, r0
 8003312:	b911      	cbnz	r1, 800331a <sbrk_aligned+0x12>
 8003314:	f000 f9d6 	bl	80036c4 <_sbrk_r>
 8003318:	6030      	str	r0, [r6, #0]
 800331a:	4621      	mov	r1, r4
 800331c:	4628      	mov	r0, r5
 800331e:	f000 f9d1 	bl	80036c4 <_sbrk_r>
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	d00a      	beq.n	800333c <sbrk_aligned+0x34>
 8003326:	1cc4      	adds	r4, r0, #3
 8003328:	f024 0403 	bic.w	r4, r4, #3
 800332c:	42a0      	cmp	r0, r4
 800332e:	d007      	beq.n	8003340 <sbrk_aligned+0x38>
 8003330:	1a21      	subs	r1, r4, r0
 8003332:	4628      	mov	r0, r5
 8003334:	f000 f9c6 	bl	80036c4 <_sbrk_r>
 8003338:	3001      	adds	r0, #1
 800333a:	d101      	bne.n	8003340 <sbrk_aligned+0x38>
 800333c:	f04f 34ff 	mov.w	r4, #4294967295
 8003340:	4620      	mov	r0, r4
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	20000458 	.word	0x20000458

08003348 <_malloc_r>:
 8003348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800334c:	1ccd      	adds	r5, r1, #3
 800334e:	f025 0503 	bic.w	r5, r5, #3
 8003352:	3508      	adds	r5, #8
 8003354:	2d0c      	cmp	r5, #12
 8003356:	bf38      	it	cc
 8003358:	250c      	movcc	r5, #12
 800335a:	2d00      	cmp	r5, #0
 800335c:	4607      	mov	r7, r0
 800335e:	db01      	blt.n	8003364 <_malloc_r+0x1c>
 8003360:	42a9      	cmp	r1, r5
 8003362:	d905      	bls.n	8003370 <_malloc_r+0x28>
 8003364:	230c      	movs	r3, #12
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	2600      	movs	r6, #0
 800336a:	4630      	mov	r0, r6
 800336c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003370:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003444 <_malloc_r+0xfc>
 8003374:	f000 f868 	bl	8003448 <__malloc_lock>
 8003378:	f8d8 3000 	ldr.w	r3, [r8]
 800337c:	461c      	mov	r4, r3
 800337e:	bb5c      	cbnz	r4, 80033d8 <_malloc_r+0x90>
 8003380:	4629      	mov	r1, r5
 8003382:	4638      	mov	r0, r7
 8003384:	f7ff ffc0 	bl	8003308 <sbrk_aligned>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	4604      	mov	r4, r0
 800338c:	d155      	bne.n	800343a <_malloc_r+0xf2>
 800338e:	f8d8 4000 	ldr.w	r4, [r8]
 8003392:	4626      	mov	r6, r4
 8003394:	2e00      	cmp	r6, #0
 8003396:	d145      	bne.n	8003424 <_malloc_r+0xdc>
 8003398:	2c00      	cmp	r4, #0
 800339a:	d048      	beq.n	800342e <_malloc_r+0xe6>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	4631      	mov	r1, r6
 80033a0:	4638      	mov	r0, r7
 80033a2:	eb04 0903 	add.w	r9, r4, r3
 80033a6:	f000 f98d 	bl	80036c4 <_sbrk_r>
 80033aa:	4581      	cmp	r9, r0
 80033ac:	d13f      	bne.n	800342e <_malloc_r+0xe6>
 80033ae:	6821      	ldr	r1, [r4, #0]
 80033b0:	1a6d      	subs	r5, r5, r1
 80033b2:	4629      	mov	r1, r5
 80033b4:	4638      	mov	r0, r7
 80033b6:	f7ff ffa7 	bl	8003308 <sbrk_aligned>
 80033ba:	3001      	adds	r0, #1
 80033bc:	d037      	beq.n	800342e <_malloc_r+0xe6>
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	442b      	add	r3, r5
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	f8d8 3000 	ldr.w	r3, [r8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d038      	beq.n	800343e <_malloc_r+0xf6>
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	42a2      	cmp	r2, r4
 80033d0:	d12b      	bne.n	800342a <_malloc_r+0xe2>
 80033d2:	2200      	movs	r2, #0
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	e00f      	b.n	80033f8 <_malloc_r+0xb0>
 80033d8:	6822      	ldr	r2, [r4, #0]
 80033da:	1b52      	subs	r2, r2, r5
 80033dc:	d41f      	bmi.n	800341e <_malloc_r+0xd6>
 80033de:	2a0b      	cmp	r2, #11
 80033e0:	d917      	bls.n	8003412 <_malloc_r+0xca>
 80033e2:	1961      	adds	r1, r4, r5
 80033e4:	42a3      	cmp	r3, r4
 80033e6:	6025      	str	r5, [r4, #0]
 80033e8:	bf18      	it	ne
 80033ea:	6059      	strne	r1, [r3, #4]
 80033ec:	6863      	ldr	r3, [r4, #4]
 80033ee:	bf08      	it	eq
 80033f0:	f8c8 1000 	streq.w	r1, [r8]
 80033f4:	5162      	str	r2, [r4, r5]
 80033f6:	604b      	str	r3, [r1, #4]
 80033f8:	4638      	mov	r0, r7
 80033fa:	f104 060b 	add.w	r6, r4, #11
 80033fe:	f000 f829 	bl	8003454 <__malloc_unlock>
 8003402:	f026 0607 	bic.w	r6, r6, #7
 8003406:	1d23      	adds	r3, r4, #4
 8003408:	1af2      	subs	r2, r6, r3
 800340a:	d0ae      	beq.n	800336a <_malloc_r+0x22>
 800340c:	1b9b      	subs	r3, r3, r6
 800340e:	50a3      	str	r3, [r4, r2]
 8003410:	e7ab      	b.n	800336a <_malloc_r+0x22>
 8003412:	42a3      	cmp	r3, r4
 8003414:	6862      	ldr	r2, [r4, #4]
 8003416:	d1dd      	bne.n	80033d4 <_malloc_r+0x8c>
 8003418:	f8c8 2000 	str.w	r2, [r8]
 800341c:	e7ec      	b.n	80033f8 <_malloc_r+0xb0>
 800341e:	4623      	mov	r3, r4
 8003420:	6864      	ldr	r4, [r4, #4]
 8003422:	e7ac      	b.n	800337e <_malloc_r+0x36>
 8003424:	4634      	mov	r4, r6
 8003426:	6876      	ldr	r6, [r6, #4]
 8003428:	e7b4      	b.n	8003394 <_malloc_r+0x4c>
 800342a:	4613      	mov	r3, r2
 800342c:	e7cc      	b.n	80033c8 <_malloc_r+0x80>
 800342e:	230c      	movs	r3, #12
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	4638      	mov	r0, r7
 8003434:	f000 f80e 	bl	8003454 <__malloc_unlock>
 8003438:	e797      	b.n	800336a <_malloc_r+0x22>
 800343a:	6025      	str	r5, [r4, #0]
 800343c:	e7dc      	b.n	80033f8 <_malloc_r+0xb0>
 800343e:	605b      	str	r3, [r3, #4]
 8003440:	deff      	udf	#255	; 0xff
 8003442:	bf00      	nop
 8003444:	20000454 	.word	0x20000454

08003448 <__malloc_lock>:
 8003448:	4801      	ldr	r0, [pc, #4]	; (8003450 <__malloc_lock+0x8>)
 800344a:	f7ff bf0e 	b.w	800326a <__retarget_lock_acquire_recursive>
 800344e:	bf00      	nop
 8003450:	20000450 	.word	0x20000450

08003454 <__malloc_unlock>:
 8003454:	4801      	ldr	r0, [pc, #4]	; (800345c <__malloc_unlock+0x8>)
 8003456:	f7ff bf09 	b.w	800326c <__retarget_lock_release_recursive>
 800345a:	bf00      	nop
 800345c:	20000450 	.word	0x20000450

08003460 <__sflush_r>:
 8003460:	898a      	ldrh	r2, [r1, #12]
 8003462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003466:	4605      	mov	r5, r0
 8003468:	0710      	lsls	r0, r2, #28
 800346a:	460c      	mov	r4, r1
 800346c:	d458      	bmi.n	8003520 <__sflush_r+0xc0>
 800346e:	684b      	ldr	r3, [r1, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	dc05      	bgt.n	8003480 <__sflush_r+0x20>
 8003474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	dc02      	bgt.n	8003480 <__sflush_r+0x20>
 800347a:	2000      	movs	r0, #0
 800347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003482:	2e00      	cmp	r6, #0
 8003484:	d0f9      	beq.n	800347a <__sflush_r+0x1a>
 8003486:	2300      	movs	r3, #0
 8003488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800348c:	682f      	ldr	r7, [r5, #0]
 800348e:	6a21      	ldr	r1, [r4, #32]
 8003490:	602b      	str	r3, [r5, #0]
 8003492:	d032      	beq.n	80034fa <__sflush_r+0x9a>
 8003494:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	075a      	lsls	r2, r3, #29
 800349a:	d505      	bpl.n	80034a8 <__sflush_r+0x48>
 800349c:	6863      	ldr	r3, [r4, #4]
 800349e:	1ac0      	subs	r0, r0, r3
 80034a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034a2:	b10b      	cbz	r3, 80034a8 <__sflush_r+0x48>
 80034a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034a6:	1ac0      	subs	r0, r0, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	4602      	mov	r2, r0
 80034ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ae:	6a21      	ldr	r1, [r4, #32]
 80034b0:	4628      	mov	r0, r5
 80034b2:	47b0      	blx	r6
 80034b4:	1c43      	adds	r3, r0, #1
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	d106      	bne.n	80034c8 <__sflush_r+0x68>
 80034ba:	6829      	ldr	r1, [r5, #0]
 80034bc:	291d      	cmp	r1, #29
 80034be:	d82b      	bhi.n	8003518 <__sflush_r+0xb8>
 80034c0:	4a29      	ldr	r2, [pc, #164]	; (8003568 <__sflush_r+0x108>)
 80034c2:	410a      	asrs	r2, r1
 80034c4:	07d6      	lsls	r6, r2, #31
 80034c6:	d427      	bmi.n	8003518 <__sflush_r+0xb8>
 80034c8:	2200      	movs	r2, #0
 80034ca:	6062      	str	r2, [r4, #4]
 80034cc:	04d9      	lsls	r1, r3, #19
 80034ce:	6922      	ldr	r2, [r4, #16]
 80034d0:	6022      	str	r2, [r4, #0]
 80034d2:	d504      	bpl.n	80034de <__sflush_r+0x7e>
 80034d4:	1c42      	adds	r2, r0, #1
 80034d6:	d101      	bne.n	80034dc <__sflush_r+0x7c>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	b903      	cbnz	r3, 80034de <__sflush_r+0x7e>
 80034dc:	6560      	str	r0, [r4, #84]	; 0x54
 80034de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034e0:	602f      	str	r7, [r5, #0]
 80034e2:	2900      	cmp	r1, #0
 80034e4:	d0c9      	beq.n	800347a <__sflush_r+0x1a>
 80034e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034ea:	4299      	cmp	r1, r3
 80034ec:	d002      	beq.n	80034f4 <__sflush_r+0x94>
 80034ee:	4628      	mov	r0, r5
 80034f0:	f7ff febe 	bl	8003270 <_free_r>
 80034f4:	2000      	movs	r0, #0
 80034f6:	6360      	str	r0, [r4, #52]	; 0x34
 80034f8:	e7c0      	b.n	800347c <__sflush_r+0x1c>
 80034fa:	2301      	movs	r3, #1
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b0      	blx	r6
 8003500:	1c41      	adds	r1, r0, #1
 8003502:	d1c8      	bne.n	8003496 <__sflush_r+0x36>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0c5      	beq.n	8003496 <__sflush_r+0x36>
 800350a:	2b1d      	cmp	r3, #29
 800350c:	d001      	beq.n	8003512 <__sflush_r+0xb2>
 800350e:	2b16      	cmp	r3, #22
 8003510:	d101      	bne.n	8003516 <__sflush_r+0xb6>
 8003512:	602f      	str	r7, [r5, #0]
 8003514:	e7b1      	b.n	800347a <__sflush_r+0x1a>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	e7ad      	b.n	800347c <__sflush_r+0x1c>
 8003520:	690f      	ldr	r7, [r1, #16]
 8003522:	2f00      	cmp	r7, #0
 8003524:	d0a9      	beq.n	800347a <__sflush_r+0x1a>
 8003526:	0793      	lsls	r3, r2, #30
 8003528:	680e      	ldr	r6, [r1, #0]
 800352a:	bf08      	it	eq
 800352c:	694b      	ldreq	r3, [r1, #20]
 800352e:	600f      	str	r7, [r1, #0]
 8003530:	bf18      	it	ne
 8003532:	2300      	movne	r3, #0
 8003534:	eba6 0807 	sub.w	r8, r6, r7
 8003538:	608b      	str	r3, [r1, #8]
 800353a:	f1b8 0f00 	cmp.w	r8, #0
 800353e:	dd9c      	ble.n	800347a <__sflush_r+0x1a>
 8003540:	6a21      	ldr	r1, [r4, #32]
 8003542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003544:	4643      	mov	r3, r8
 8003546:	463a      	mov	r2, r7
 8003548:	4628      	mov	r0, r5
 800354a:	47b0      	blx	r6
 800354c:	2800      	cmp	r0, #0
 800354e:	dc06      	bgt.n	800355e <__sflush_r+0xfe>
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	e78e      	b.n	800347c <__sflush_r+0x1c>
 800355e:	4407      	add	r7, r0
 8003560:	eba8 0800 	sub.w	r8, r8, r0
 8003564:	e7e9      	b.n	800353a <__sflush_r+0xda>
 8003566:	bf00      	nop
 8003568:	dfbffffe 	.word	0xdfbffffe

0800356c <_fflush_r>:
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	4605      	mov	r5, r0
 8003572:	460c      	mov	r4, r1
 8003574:	b913      	cbnz	r3, 800357c <_fflush_r+0x10>
 8003576:	2500      	movs	r5, #0
 8003578:	4628      	mov	r0, r5
 800357a:	bd38      	pop	{r3, r4, r5, pc}
 800357c:	b118      	cbz	r0, 8003586 <_fflush_r+0x1a>
 800357e:	6a03      	ldr	r3, [r0, #32]
 8003580:	b90b      	cbnz	r3, 8003586 <_fflush_r+0x1a>
 8003582:	f7ff fc8f 	bl	8002ea4 <__sinit>
 8003586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f3      	beq.n	8003576 <_fflush_r+0xa>
 800358e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003590:	07d0      	lsls	r0, r2, #31
 8003592:	d404      	bmi.n	800359e <_fflush_r+0x32>
 8003594:	0599      	lsls	r1, r3, #22
 8003596:	d402      	bmi.n	800359e <_fflush_r+0x32>
 8003598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800359a:	f7ff fe66 	bl	800326a <__retarget_lock_acquire_recursive>
 800359e:	4628      	mov	r0, r5
 80035a0:	4621      	mov	r1, r4
 80035a2:	f7ff ff5d 	bl	8003460 <__sflush_r>
 80035a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035a8:	07da      	lsls	r2, r3, #31
 80035aa:	4605      	mov	r5, r0
 80035ac:	d4e4      	bmi.n	8003578 <_fflush_r+0xc>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	059b      	lsls	r3, r3, #22
 80035b2:	d4e1      	bmi.n	8003578 <_fflush_r+0xc>
 80035b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035b6:	f7ff fe59 	bl	800326c <__retarget_lock_release_recursive>
 80035ba:	e7dd      	b.n	8003578 <_fflush_r+0xc>

080035bc <__swhatbuf_r>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	460c      	mov	r4, r1
 80035c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c4:	2900      	cmp	r1, #0
 80035c6:	b096      	sub	sp, #88	; 0x58
 80035c8:	4615      	mov	r5, r2
 80035ca:	461e      	mov	r6, r3
 80035cc:	da0d      	bge.n	80035ea <__swhatbuf_r+0x2e>
 80035ce:	89a3      	ldrh	r3, [r4, #12]
 80035d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	bf0c      	ite	eq
 80035da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80035de:	2340      	movne	r3, #64	; 0x40
 80035e0:	2000      	movs	r0, #0
 80035e2:	6031      	str	r1, [r6, #0]
 80035e4:	602b      	str	r3, [r5, #0]
 80035e6:	b016      	add	sp, #88	; 0x58
 80035e8:	bd70      	pop	{r4, r5, r6, pc}
 80035ea:	466a      	mov	r2, sp
 80035ec:	f000 f848 	bl	8003680 <_fstat_r>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	dbec      	blt.n	80035ce <__swhatbuf_r+0x12>
 80035f4:	9901      	ldr	r1, [sp, #4]
 80035f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80035fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80035fe:	4259      	negs	r1, r3
 8003600:	4159      	adcs	r1, r3
 8003602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003606:	e7eb      	b.n	80035e0 <__swhatbuf_r+0x24>

08003608 <__smakebuf_r>:
 8003608:	898b      	ldrh	r3, [r1, #12]
 800360a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800360c:	079d      	lsls	r5, r3, #30
 800360e:	4606      	mov	r6, r0
 8003610:	460c      	mov	r4, r1
 8003612:	d507      	bpl.n	8003624 <__smakebuf_r+0x1c>
 8003614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	6123      	str	r3, [r4, #16]
 800361c:	2301      	movs	r3, #1
 800361e:	6163      	str	r3, [r4, #20]
 8003620:	b002      	add	sp, #8
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	ab01      	add	r3, sp, #4
 8003626:	466a      	mov	r2, sp
 8003628:	f7ff ffc8 	bl	80035bc <__swhatbuf_r>
 800362c:	9900      	ldr	r1, [sp, #0]
 800362e:	4605      	mov	r5, r0
 8003630:	4630      	mov	r0, r6
 8003632:	f7ff fe89 	bl	8003348 <_malloc_r>
 8003636:	b948      	cbnz	r0, 800364c <__smakebuf_r+0x44>
 8003638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800363c:	059a      	lsls	r2, r3, #22
 800363e:	d4ef      	bmi.n	8003620 <__smakebuf_r+0x18>
 8003640:	f023 0303 	bic.w	r3, r3, #3
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	81a3      	strh	r3, [r4, #12]
 800364a:	e7e3      	b.n	8003614 <__smakebuf_r+0xc>
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	6020      	str	r0, [r4, #0]
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	9b00      	ldr	r3, [sp, #0]
 8003658:	6163      	str	r3, [r4, #20]
 800365a:	9b01      	ldr	r3, [sp, #4]
 800365c:	6120      	str	r0, [r4, #16]
 800365e:	b15b      	cbz	r3, 8003678 <__smakebuf_r+0x70>
 8003660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003664:	4630      	mov	r0, r6
 8003666:	f000 f81d 	bl	80036a4 <_isatty_r>
 800366a:	b128      	cbz	r0, 8003678 <__smakebuf_r+0x70>
 800366c:	89a3      	ldrh	r3, [r4, #12]
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	431d      	orrs	r5, r3
 800367c:	81a5      	strh	r5, [r4, #12]
 800367e:	e7cf      	b.n	8003620 <__smakebuf_r+0x18>

08003680 <_fstat_r>:
 8003680:	b538      	push	{r3, r4, r5, lr}
 8003682:	4d07      	ldr	r5, [pc, #28]	; (80036a0 <_fstat_r+0x20>)
 8003684:	2300      	movs	r3, #0
 8003686:	4604      	mov	r4, r0
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	602b      	str	r3, [r5, #0]
 800368e:	f7fd fb73 	bl	8000d78 <_fstat>
 8003692:	1c43      	adds	r3, r0, #1
 8003694:	d102      	bne.n	800369c <_fstat_r+0x1c>
 8003696:	682b      	ldr	r3, [r5, #0]
 8003698:	b103      	cbz	r3, 800369c <_fstat_r+0x1c>
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	bd38      	pop	{r3, r4, r5, pc}
 800369e:	bf00      	nop
 80036a0:	2000044c 	.word	0x2000044c

080036a4 <_isatty_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4d06      	ldr	r5, [pc, #24]	; (80036c0 <_isatty_r+0x1c>)
 80036a8:	2300      	movs	r3, #0
 80036aa:	4604      	mov	r4, r0
 80036ac:	4608      	mov	r0, r1
 80036ae:	602b      	str	r3, [r5, #0]
 80036b0:	f7fd fb72 	bl	8000d98 <_isatty>
 80036b4:	1c43      	adds	r3, r0, #1
 80036b6:	d102      	bne.n	80036be <_isatty_r+0x1a>
 80036b8:	682b      	ldr	r3, [r5, #0]
 80036ba:	b103      	cbz	r3, 80036be <_isatty_r+0x1a>
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	bd38      	pop	{r3, r4, r5, pc}
 80036c0:	2000044c 	.word	0x2000044c

080036c4 <_sbrk_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4d06      	ldr	r5, [pc, #24]	; (80036e0 <_sbrk_r+0x1c>)
 80036c8:	2300      	movs	r3, #0
 80036ca:	4604      	mov	r4, r0
 80036cc:	4608      	mov	r0, r1
 80036ce:	602b      	str	r3, [r5, #0]
 80036d0:	f7fd fb7a 	bl	8000dc8 <_sbrk>
 80036d4:	1c43      	adds	r3, r0, #1
 80036d6:	d102      	bne.n	80036de <_sbrk_r+0x1a>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	b103      	cbz	r3, 80036de <_sbrk_r+0x1a>
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	bd38      	pop	{r3, r4, r5, pc}
 80036e0:	2000044c 	.word	0x2000044c

080036e4 <_init>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr

080036f0 <_fini>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	bf00      	nop
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr
