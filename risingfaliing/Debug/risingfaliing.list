
risingfaliing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003580  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b4  080037b4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037bc  080037bc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080037c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000003fc  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b960  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ae6  00000000  00000000  0002ba3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002d528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000724  00000000  00000000  0002de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002474d  00000000  00000000  0002e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000af69  00000000  00000000  00052cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9e0a  00000000  00000000  0005dc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002be0  00000000  00000000  00137a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0013a644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000068 	.word	0x20000068
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003714 	.word	0x08003714

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000006c 	.word	0x2000006c
 80001e8:	08003714 	.word	0x08003714

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_write>:

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
int _write(int file, char* ptr, int len)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 500);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <_write+0x28>)
 8000500:	f002 f8e7 	bl	80026d2 <HAL_UART_Transmit>
	return len;
 8000504:	687b      	ldr	r3, [r7, #4]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200002ac 	.word	0x200002ac

08000514 <HAL_GPIO_EXTI_Callback>:
	SECOND_PULL
} current_state;
enum CLICK_STATE current_state = NO_CLICK;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7) {
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	2b80      	cmp	r3, #128	; 0x80
 8000522:	d176      	bne.n	8000612 <HAL_GPIO_EXTI_Callback+0xfe>
		level = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	483d      	ldr	r0, [pc, #244]	; (800061c <HAL_GPIO_EXTI_Callback+0x108>)
 8000528:	f001 fb54 	bl	8001bd4 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b3b      	ldr	r3, [pc, #236]	; (8000620 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000532:	601a      	str	r2, [r3, #0]
//			else if (interval >= 700) {
//				printf("long \r\n");
//				double_key_cnt =0;
//			}
//		}
		if (level == 0 && (current_state == NO_CLICK || current_state == SECOND_PULL)) {
 8000534:	4b3a      	ldr	r3, [pc, #232]	; (8000620 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d113      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x50>
 800053c:	4b39      	ldr	r3, [pc, #228]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d003      	beq.n	800054c <HAL_GPIO_EXTI_Callback+0x38>
 8000544:	4b37      	ldr	r3, [pc, #220]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b04      	cmp	r3, #4
 800054a:	d10b      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x50>
			current_state = FIRST_PUSH;
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
			ctime = HAL_GetTick();
 8000552:	f000 fd29 	bl	8000fa8 <HAL_GetTick>
 8000556:	4603      	mov	r3, r0
 8000558:	4a33      	ldr	r2, [pc, #204]	; (8000628 <HAL_GPIO_EXTI_Callback+0x114>)
 800055a:	6013      	str	r3, [r2, #0]
			printf("first push \r\n");
 800055c:	4833      	ldr	r0, [pc, #204]	; (800062c <HAL_GPIO_EXTI_Callback+0x118>)
 800055e:	f002 fd43 	bl	8002fe8 <puts>
 8000562:	e045      	b.n	80005f0 <HAL_GPIO_EXTI_Callback+0xdc>
		}
		else if (level == 1 && current_state == FIRST_PUSH) {
 8000564:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d121      	bne.n	80005b0 <HAL_GPIO_EXTI_Callback+0x9c>
 800056c:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d11d      	bne.n	80005b0 <HAL_GPIO_EXTI_Callback+0x9c>
			current_state = FIRST_PULL;
 8000574:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 8000576:	2202      	movs	r2, #2
 8000578:	701a      	strb	r2, [r3, #0]
			ltime = HAL_GetTick();
 800057a:	f000 fd15 	bl	8000fa8 <HAL_GetTick>
 800057e:	4603      	mov	r3, r0
 8000580:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000582:	6013      	str	r3, [r2, #0]
			if (ltime - ctime > 1000) {
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <HAL_GPIO_EXTI_Callback+0x114>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000592:	d906      	bls.n	80005a2 <HAL_GPIO_EXTI_Callback+0x8e>
				printf("Long click~~~~~~~~\r\n");
 8000594:	4827      	ldr	r0, [pc, #156]	; (8000634 <HAL_GPIO_EXTI_Callback+0x120>)
 8000596:	f002 fd27 	bl	8002fe8 <puts>
				current_state = NO_CLICK;
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
			if (ltime - ctime > 1000) {
 80005a0:	e026      	b.n	80005f0 <HAL_GPIO_EXTI_Callback+0xdc>
			}
			else {
				click_flag = 1;
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <HAL_GPIO_EXTI_Callback+0x124>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
				printf("first pull \r\n");
 80005a8:	4824      	ldr	r0, [pc, #144]	; (800063c <HAL_GPIO_EXTI_Callback+0x128>)
 80005aa:	f002 fd1d 	bl	8002fe8 <puts>
			if (ltime - ctime > 1000) {
 80005ae:	e01f      	b.n	80005f0 <HAL_GPIO_EXTI_Callback+0xdc>
			}
		}
		else if (level == 0 && current_state == FIRST_PULL) {
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <HAL_GPIO_EXTI_Callback+0x10c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10d      	bne.n	80005d4 <HAL_GPIO_EXTI_Callback+0xc0>
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d109      	bne.n	80005d4 <HAL_GPIO_EXTI_Callback+0xc0>
			current_state = SECOND_PUSH;
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 80005c2:	2203      	movs	r2, #3
 80005c4:	701a      	strb	r2, [r3, #0]
			click_flag = 0;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <HAL_GPIO_EXTI_Callback+0x124>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
//			tmpcnt = 0;
			printf("second_push \r\n");
 80005cc:	481c      	ldr	r0, [pc, #112]	; (8000640 <HAL_GPIO_EXTI_Callback+0x12c>)
 80005ce:	f002 fd0b 	bl	8002fe8 <puts>
 80005d2:	e00d      	b.n	80005f0 <HAL_GPIO_EXTI_Callback+0xdc>
		}
		else if (level == 1 && current_state == SECOND_PUSH) {
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_GPIO_EXTI_Callback+0x10c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d109      	bne.n	80005f0 <HAL_GPIO_EXTI_Callback+0xdc>
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d105      	bne.n	80005f0 <HAL_GPIO_EXTI_Callback+0xdc>
			current_state = SECOND_PULL;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	701a      	strb	r2, [r3, #0]
			printf("second_pull \r\n");
 80005ea:	4816      	ldr	r0, [pc, #88]	; (8000644 <HAL_GPIO_EXTI_Callback+0x130>)
 80005ec:	f002 fcfc 	bl	8002fe8 <puts>
		}

		if (tmpcnt < 50 && current_state == SECOND_PULL) {
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_GPIO_EXTI_Callback+0x134>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b31      	cmp	r3, #49	; 0x31
 80005f6:	dc0c      	bgt.n	8000612 <HAL_GPIO_EXTI_Callback+0xfe>
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	d108      	bne.n	8000612 <HAL_GPIO_EXTI_Callback+0xfe>
			printf("double click \r\n");
 8000600:	4812      	ldr	r0, [pc, #72]	; (800064c <HAL_GPIO_EXTI_Callback+0x138>)
 8000602:	f002 fcf1 	bl	8002fe8 <puts>
//			tmpcnt = 0;
			current_state = NO_CLICK;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <HAL_GPIO_EXTI_Callback+0x110>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
			click_flag = 0;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_GPIO_EXTI_Callback+0x124>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021400 	.word	0x40021400
 8000620:	20000300 	.word	0x20000300
 8000624:	20000304 	.word	0x20000304
 8000628:	200002f0 	.word	0x200002f0
 800062c:	0800372c 	.word	0x0800372c
 8000630:	200002f4 	.word	0x200002f4
 8000634:	0800373c 	.word	0x0800373c
 8000638:	200002fc 	.word	0x200002fc
 800063c:	08003750 	.word	0x08003750
 8000640:	08003760 	.word	0x08003760
 8000644:	08003770 	.word	0x08003770
 8000648:	200002f8 	.word	0x200002f8
 800064c:	08003780 	.word	0x08003780

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fc42 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f832 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f924 	bl	80008a8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000660:	f000 f8aa 	bl	80007b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000664:	f000 f8f6 	bl	8000854 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000668:	f000 f89a 	bl	80007a0 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (click_flag) {
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <main+0x60>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d008      	beq.n	8000686 <main+0x36>
		  tmpcnt++;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <main+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <main+0x64>)
 800067c:	6013      	str	r3, [r2, #0]
		  HAL_Delay(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fc9e 	bl	8000fc0 <HAL_Delay>
 8000684:	e002      	b.n	800068c <main+0x3c>
//		  printf("flow time %d \r\n", tmpcnt);
	  }
	  else {
		  tmpcnt = 0;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <main+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	  }
	  if (current_state == FIRST_PULL && tmpcnt > 50) {
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <main+0x68>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d1eb      	bne.n	800066c <main+0x1c>
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <main+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b32      	cmp	r3, #50	; 0x32
 800069a:	dde7      	ble.n	800066c <main+0x1c>
		printf("one click \r\n");
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <main+0x6c>)
 800069e:	f002 fca3 	bl	8002fe8 <puts>
		current_state = NO_CLICK;
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <main+0x68>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
		click_flag = 0;
 80006a8:	4b01      	ldr	r3, [pc, #4]	; (80006b0 <main+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
	  if (click_flag) {
 80006ae:	e7dd      	b.n	800066c <main+0x1c>
 80006b0:	200002fc 	.word	0x200002fc
 80006b4:	200002f8 	.word	0x200002f8
 80006b8:	20000304 	.word	0x20000304
 80006bc:	08003790 	.word	0x08003790

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fd6a 	bl	80031a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemClock_Config+0xd8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <SystemClock_Config+0xd8>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0xd8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemClock_Config+0xdc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a24      	ldr	r2, [pc, #144]	; (800079c <SystemClock_Config+0xdc>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemClock_Config+0xdc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000720:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000734:	23b4      	movs	r3, #180	; 0xb4
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fadf 	bl	8001d08 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 f994 	bl	8000a7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f001 fa88 	bl	8001c68 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800075e:	f000 f98d 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2105      	movs	r1, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fd39 	bl	80021f8 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800078c:	f000 f976 	bl	8000a7c <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2017      	movs	r0, #23
 80007aa:	f000 fd08 	bl	80011be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ae:	2017      	movs	r0, #23
 80007b0:	f000 fd21 	bl	80011f6 <HAL_NVIC_EnableIRQ>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ETH_Init+0x84>)
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <MX_ETH_Init+0x88>)
 80007c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_ETH_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_ETH_Init+0x8c>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ETH_Init+0x8c>)
 80007d0:	22e1      	movs	r2, #225	; 0xe1
 80007d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ETH_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ETH_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_ETH_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_ETH_Init+0x84>)
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <MX_ETH_Init+0x8c>)
 80007ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_ETH_Init+0x84>)
 80007ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_ETH_Init+0x84>)
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <MX_ETH_Init+0x90>)
 80007f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_ETH_Init+0x84>)
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_ETH_Init+0x94>)
 80007fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_ETH_Init+0x84>)
 8000802:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000806:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_ETH_Init+0x84>)
 800080a:	f000 fd0f 	bl	800122c <HAL_ETH_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 f932 	bl	8000a7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000818:	2238      	movs	r2, #56	; 0x38
 800081a:	2100      	movs	r1, #0
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_ETH_Init+0x98>)
 800081e:	f002 fcc3 	bl	80031a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_ETH_Init+0x98>)
 8000824:	2221      	movs	r2, #33	; 0x21
 8000826:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_ETH_Init+0x98>)
 800082a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800082e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_ETH_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200001fc 	.word	0x200001fc
 8000840:	40028000 	.word	0x40028000
 8000844:	20000308 	.word	0x20000308
 8000848:	2000015c 	.word	0x2000015c
 800084c:	200000bc 	.word	0x200000bc
 8000850:	20000084 	.word	0x20000084

08000854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_USART3_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 800088c:	f001 fed4 	bl	8002638 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 f8f1 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200002ac 	.word	0x200002ac
 80008a4:	40004800 	.word	0x40004800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	4b68      	ldr	r3, [pc, #416]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a67      	ldr	r2, [pc, #412]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b65      	ldr	r3, [pc, #404]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	4b61      	ldr	r3, [pc, #388]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a60      	ldr	r2, [pc, #384]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 80008e4:	f043 0320 	orr.w	r3, r3, #32
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b5e      	ldr	r3, [pc, #376]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0320 	and.w	r3, r3, #32
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a59      	ldr	r2, [pc, #356]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b57      	ldr	r3, [pc, #348]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b53      	ldr	r3, [pc, #332]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a52      	ldr	r2, [pc, #328]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b50      	ldr	r3, [pc, #320]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a4b      	ldr	r2, [pc, #300]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a44      	ldr	r2, [pc, #272]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b42      	ldr	r3, [pc, #264]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a3d      	ldr	r2, [pc, #244]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <MX_GPIO_Init+0x1bc>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f244 0181 	movw	r1, #16513	; 0x4081
 8000988:	4837      	ldr	r0, [pc, #220]	; (8000a68 <MX_GPIO_Init+0x1c0>)
 800098a:	f001 f93b 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4836      	ldr	r0, [pc, #216]	; (8000a6c <MX_GPIO_Init+0x1c4>)
 8000994:	f001 f936 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4830      	ldr	r0, [pc, #192]	; (8000a70 <MX_GPIO_Init+0x1c8>)
 80009b0:	f000 ff64 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009b8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	2301      	movs	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	482a      	ldr	r0, [pc, #168]	; (8000a74 <MX_GPIO_Init+0x1cc>)
 80009ca:	f000 ff57 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4820      	ldr	r0, [pc, #128]	; (8000a68 <MX_GPIO_Init+0x1c0>)
 80009e8:	f000 ff48 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481a      	ldr	r0, [pc, #104]	; (8000a6c <MX_GPIO_Init+0x1c4>)
 8000a04:	f000 ff3a 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <MX_GPIO_Init+0x1c4>)
 8000a1c:	f000 ff2e 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a20:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a32:	230a      	movs	r3, #10
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480e      	ldr	r0, [pc, #56]	; (8000a78 <MX_GPIO_Init+0x1d0>)
 8000a3e:	f000 ff1d 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_GPIO_Init+0x1d0>)
 8000a58:	f000 ff10 	bl	800187c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3730      	adds	r7, #48	; 0x30
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40021400 	.word	0x40021400
 8000a78:	40020000 	.word	0x40020000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	; 0x38
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a55      	ldr	r2, [pc, #340]	; (8000c4c <HAL_ETH_MspInit+0x174>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	f040 80a4 	bne.w	8000c44 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a52      	ldr	r2, [pc, #328]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b50      	ldr	r3, [pc, #320]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a4b      	ldr	r2, [pc, #300]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a44      	ldr	r2, [pc, #272]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a3d      	ldr	r2, [pc, #244]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a36      	ldr	r2, [pc, #216]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <HAL_ETH_MspInit+0x178>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bc0:	2332      	movs	r3, #50	; 0x32
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd0:	230b      	movs	r3, #11
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481e      	ldr	r0, [pc, #120]	; (8000c54 <HAL_ETH_MspInit+0x17c>)
 8000bdc:	f000 fe4e 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000be0:	2386      	movs	r3, #134	; 0x86
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf0:	230b      	movs	r3, #11
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4817      	ldr	r0, [pc, #92]	; (8000c58 <HAL_ETH_MspInit+0x180>)
 8000bfc:	f000 fe3e 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c12:	230b      	movs	r3, #11
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480f      	ldr	r0, [pc, #60]	; (8000c5c <HAL_ETH_MspInit+0x184>)
 8000c1e:	f000 fe2d 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <HAL_ETH_MspInit+0x188>)
 8000c40:	f000 fe1c 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	3738      	adds	r7, #56	; 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40028000 	.word	0x40028000
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40021800 	.word	0x40021800

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <HAL_UART_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12c      	bne.n	8000ce0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_UART_MspInit+0x8c>)
 8000cdc:	f000 fdce 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f91e 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d4c:	2080      	movs	r0, #128	; 0x80
 8000d4e:	f000 ff73 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	e00a      	b.n	8000d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d68:	f3af 8000 	nop.w
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	60ba      	str	r2, [r7, #8]
 8000d74:	b2ca      	uxtb	r2, r1
 8000d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbf0      	blt.n	8000d68 <_read+0x12>
  }

  return len;
 8000d86:	687b      	ldr	r3, [r7, #4]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db8:	605a      	str	r2, [r3, #4]
  return 0;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <_isatty>:

int _isatty(int file)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd0:	2301      	movs	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b085      	sub	sp, #20
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f002 fa0c 	bl	8003244 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20030000 	.word	0x20030000
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	20000310 	.word	0x20000310
 8000e60:	20000468 	.word	0x20000468

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea4:	4c0b      	ldr	r4, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb2:	f7ff ffd7 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 f9cb 	bl	8003250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fbc9 	bl	8000650 <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ec0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ecc:	080037c4 	.word	0x080037c4
  ldr r2, =_sbss
 8000ed0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ed4:	20000464 	.word	0x20000464

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f94f 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fdba 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f967 	bl	8001212 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f92f 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000314 	.word	0x20000314

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000314 	.word	0x20000314

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ffde 	bl	8000fa8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff3e 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff31 	bl	800106c <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa2 	bl	8001164 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e06c      	b.n	8001318 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001244:	2b00      	cmp	r3, #0
 8001246:	d106      	bne.n	8001256 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2223      	movs	r2, #35	; 0x23
 800124c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fc41 	bl	8000ad8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <HAL_ETH_Init+0xf4>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_ETH_Init+0xf4>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <HAL_ETH_Init+0xf4>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HAL_ETH_Init+0xf8>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <HAL_ETH_Init+0xf8>)
 8001278:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800127c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <HAL_ETH_Init+0xf8>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4927      	ldr	r1, [pc, #156]	; (8001324 <HAL_ETH_Init+0xf8>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_ETH_Init+0xf8>)
 800128e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a8:	f7ff fe7e 	bl	8000fa8 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ae:	e011      	b.n	80012d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012b0:	f7ff fe7a 	bl	8000fa8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012be:	d909      	bls.n	80012d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2204      	movs	r2, #4
 80012c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	22e0      	movs	r2, #224	; 0xe0
 80012cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e021      	b.n	8001318 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1e4      	bne.n	80012b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f958 	bl	800159c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f9ff 	bl	80016f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fa55 	bl	80017a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2100      	movs	r1, #0
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f9bd 	bl	8001680 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2210      	movs	r2, #16
 8001312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800

08001328 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4b51      	ldr	r3, [pc, #324]	; (8001484 <ETH_SetMACConfig+0x15c>)
 800133e:	4013      	ands	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	7c1b      	ldrb	r3, [r3, #16]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <ETH_SetMACConfig+0x28>
 800134a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800134e:	e000      	b.n	8001352 <ETH_SetMACConfig+0x2a>
 8001350:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	7c5b      	ldrb	r3, [r3, #17]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <ETH_SetMACConfig+0x38>
 800135a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135e:	e000      	b.n	8001362 <ETH_SetMACConfig+0x3a>
 8001360:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001362:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001368:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	7fdb      	ldrb	r3, [r3, #31]
 800136e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001370:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001376:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	7f92      	ldrb	r2, [r2, #30]
 800137c:	2a00      	cmp	r2, #0
 800137e:	d102      	bne.n	8001386 <ETH_SetMACConfig+0x5e>
 8001380:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001384:	e000      	b.n	8001388 <ETH_SetMACConfig+0x60>
 8001386:	2200      	movs	r2, #0
                        macconf->Speed |
 8001388:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	7f1b      	ldrb	r3, [r3, #28]
 800138e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001390:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001396:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800139e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d102      	bne.n	80013b0 <ETH_SetMACConfig+0x88>
 80013aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ae:	e000      	b.n	80013b2 <ETH_SetMACConfig+0x8a>
 80013b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	7bdb      	ldrb	r3, [r3, #15]
 80013b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ca:	4313      	orrs	r3, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fdec 	bl	8000fc0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001406:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800140e:	2a00      	cmp	r2, #0
 8001410:	d101      	bne.n	8001416 <ETH_SetMACConfig+0xee>
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	e000      	b.n	8001418 <ETH_SetMACConfig+0xf0>
 8001416:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001418:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800141e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001426:	2a01      	cmp	r2, #1
 8001428:	d101      	bne.n	800142e <ETH_SetMACConfig+0x106>
 800142a:	2208      	movs	r2, #8
 800142c:	e000      	b.n	8001430 <ETH_SetMACConfig+0x108>
 800142e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001430:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001438:	2a01      	cmp	r2, #1
 800143a:	d101      	bne.n	8001440 <ETH_SetMACConfig+0x118>
 800143c:	2204      	movs	r2, #4
 800143e:	e000      	b.n	8001442 <ETH_SetMACConfig+0x11a>
 8001440:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001442:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800144a:	2a01      	cmp	r2, #1
 800144c:	d101      	bne.n	8001452 <ETH_SetMACConfig+0x12a>
 800144e:	2202      	movs	r2, #2
 8001450:	e000      	b.n	8001454 <ETH_SetMACConfig+0x12c>
 8001452:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001454:	4313      	orrs	r3, r2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff fda7 	bl	8000fc0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	ff20810f 	.word	0xff20810f

08001488 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <ETH_SetDMAConfig+0x110>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	7b1b      	ldrb	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <ETH_SetDMAConfig+0x2c>
 80014ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014b2:	e000      	b.n	80014b6 <ETH_SetDMAConfig+0x2e>
 80014b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	7b5b      	ldrb	r3, [r3, #13]
 80014ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	7f52      	ldrb	r2, [r2, #29]
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <ETH_SetDMAConfig+0x44>
 80014c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014ca:	e000      	b.n	80014ce <ETH_SetDMAConfig+0x46>
 80014cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	7b9b      	ldrb	r3, [r3, #14]
 80014d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7f1b      	ldrb	r3, [r3, #28]
 80014e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	7f9b      	ldrb	r3, [r3, #30]
 80014ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014fc:	4313      	orrs	r3, r2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff fd4e 	bl	8000fc0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800153c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001542:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001548:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001550:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001552:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800155a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001560:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800156a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800156e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff fd1f 	bl	8000fc0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	f8de3f23 	.word	0xf8de3f23

0800159c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0a6      	sub	sp, #152	; 0x98
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015d8:	2300      	movs	r3, #0
 80015da:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001610:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001614:	4619      	mov	r1, r3
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fe86 	bl	8001328 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800161c:	2301      	movs	r3, #1
 800161e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001620:	2301      	movs	r3, #1
 8001622:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800162a:	2301      	movs	r3, #1
 800162c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001648:	2301      	movs	r3, #1
 800164a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800164c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001650:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001656:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001664:	2300      	movs	r3, #0
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff08 	bl	8001488 <ETH_SetDMAConfig>
}
 8001678:	bf00      	nop
 800167a:	3798      	adds	r7, #152	; 0x98
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3305      	adds	r3, #5
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	3204      	adds	r2, #4
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <ETH_MACAddressConfig+0x68>)
 80016a2:	4413      	add	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3303      	adds	r3, #3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	061a      	lsls	r2, r3, #24
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3302      	adds	r3, #2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	4313      	orrs	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <ETH_MACAddressConfig+0x6c>)
 80016d2:	4413      	add	r3, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40028040 	.word	0x40028040
 80016ec:	40028044 	.word	0x40028044

080016f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e03e      	b.n	800177c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	3206      	adds	r2, #6
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d80c      	bhi.n	8001760 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68d9      	ldr	r1, [r3, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	461a      	mov	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	e004      	b.n	800176a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	461a      	mov	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d9bd      	bls.n	80016fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001794:	611a      	str	r2, [r3, #16]
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e046      	b.n	800183e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6919      	ldr	r1, [r3, #16]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	3212      	adds	r2, #18
 800180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d80c      	bhi.n	800182e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6919      	ldr	r1, [r3, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	461a      	mov	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	e004      	b.n	8001838 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d9b5      	bls.n	80017b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	60da      	str	r2, [r3, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e177      	b.n	8001b88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 8166 	bne.w	8001b82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d005      	beq.n	80018ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d130      	bne.n	8001930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 0201 	and.w	r2, r3, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b03      	cmp	r3, #3
 800193a:	d017      	beq.n	800196c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d123      	bne.n	80019c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3208      	adds	r2, #8
 8001980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80c0 	beq.w	8001b82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1e:	4a61      	ldr	r2, [pc, #388]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <HAL_GPIO_Init+0x32c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d037      	beq.n	8001aba <HAL_GPIO_Init+0x23e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	; (8001bac <HAL_GPIO_Init+0x330>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d031      	beq.n	8001ab6 <HAL_GPIO_Init+0x23a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d02b      	beq.n	8001ab2 <HAL_GPIO_Init+0x236>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <HAL_GPIO_Init+0x338>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d025      	beq.n	8001aae <HAL_GPIO_Init+0x232>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a54      	ldr	r2, [pc, #336]	; (8001bb8 <HAL_GPIO_Init+0x33c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01f      	beq.n	8001aaa <HAL_GPIO_Init+0x22e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a53      	ldr	r2, [pc, #332]	; (8001bbc <HAL_GPIO_Init+0x340>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x22a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_GPIO_Init+0x344>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <HAL_GPIO_Init+0x348>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a50      	ldr	r2, [pc, #320]	; (8001bc8 <HAL_GPIO_Init+0x34c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x21a>
 8001a92:	2309      	movs	r3, #9
 8001a94:	e012      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a96:	230a      	movs	r3, #10
 8001a98:	e010      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	e00e      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e00c      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00a      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aba:	2300      	movs	r3, #0
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001acc:	4935      	ldr	r1, [pc, #212]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afe:	4a34      	ldr	r2, [pc, #208]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b52:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	f67f ae84 	bls.w	8001898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40021c00 	.word	0x40021c00
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40022400 	.word	0x40022400
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e001      	b.n	8001bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c20:	e003      	b.n	8001c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	619a      	str	r2, [r3, #24]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc5c 	bl	8000514 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_PWREx_EnableOverDrive+0x94>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c94:	f7ff f988 	bl	8000fa8 <HAL_GetTick>
 8001c98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c9a:	e009      	b.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c9c:	f7ff f984 	bl	8000fa8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001caa:	d901      	bls.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e01f      	b.n	8001cf0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d1ee      	bne.n	8001c9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc4:	f7ff f970 	bl	8000fa8 <HAL_GetTick>
 8001cc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cca:	e009      	b.n	8001ce0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ccc:	f7ff f96c 	bl	8000fa8 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cda:	d901      	bls.n	8001ce0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e007      	b.n	8001cf0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cec:	d1ee      	bne.n	8001ccc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	420e0040 	.word	0x420e0040
 8001d00:	40007000 	.word	0x40007000
 8001d04:	420e0044 	.word	0x420e0044

08001d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e267      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d075      	beq.n	8001e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d00c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b85      	ldr	r3, [pc, #532]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d112      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4b82      	ldr	r3, [pc, #520]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	4b7e      	ldr	r3, [pc, #504]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d05b      	beq.n	8001e10 <HAL_RCC_OscConfig+0x108>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d157      	bne.n	8001e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e242      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_OscConfig+0x74>
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a75      	ldr	r2, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x98>
 8001d86:	4b70      	ldr	r3, [pc, #448]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a6f      	ldr	r2, [pc, #444]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b6d      	ldr	r3, [pc, #436]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6c      	ldr	r2, [pc, #432]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001da0:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a68      	ldr	r2, [pc, #416]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a65      	ldr	r2, [pc, #404]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f8f2 	bl	8000fa8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f8ee 	bl	8000fa8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e207      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b5b      	ldr	r3, [pc, #364]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xc0>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff f8de 	bl	8000fa8 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f8da 	bl	8000fa8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1f3      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b51      	ldr	r3, [pc, #324]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0xe8>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1c7      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4937      	ldr	r1, [pc, #220]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b34      	ldr	r3, [pc, #208]	; (8001f4c <HAL_RCC_OscConfig+0x244>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f893 	bl	8000fa8 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff f88f 	bl	8000fa8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1a8      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4925      	ldr	r1, [pc, #148]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_OscConfig+0x244>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f872 	bl	8000fa8 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f86e 	bl	8000fa8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e187      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d036      	beq.n	8001f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_RCC_OscConfig+0x248>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff f852 	bl	8000fa8 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff f84e 	bl	8000fa8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e167      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x200>
 8001f26:	e01b      	b.n	8001f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_OscConfig+0x248>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f83b 	bl	8000fa8 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	e00e      	b.n	8001f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff f837 	bl	8000fa8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d907      	bls.n	8001f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e150      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470000 	.word	0x42470000
 8001f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ea      	bne.n	8001f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8097 	beq.w	800209c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b81      	ldr	r3, [pc, #516]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b7d      	ldr	r3, [pc, #500]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a7c      	ldr	r2, [pc, #496]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b7a      	ldr	r3, [pc, #488]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b77      	ldr	r3, [pc, #476]	; (800217c <HAL_RCC_OscConfig+0x474>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b74      	ldr	r3, [pc, #464]	; (800217c <HAL_RCC_OscConfig+0x474>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a73      	ldr	r2, [pc, #460]	; (800217c <HAL_RCC_OscConfig+0x474>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fff7 	bl	8000fa8 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7fe fff3 	bl	8000fa8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e10c      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_OscConfig+0x474>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2ea>
 8001fe4:	4b64      	ldr	r3, [pc, #400]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	4a63      	ldr	r2, [pc, #396]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x324>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x30c>
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	4a5e      	ldr	r2, [pc, #376]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6713      	str	r3, [r2, #112]	; 0x70
 8002006:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a5b      	ldr	r2, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0x324>
 8002014:	4b58      	ldr	r3, [pc, #352]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a57      	ldr	r2, [pc, #348]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	4b55      	ldr	r3, [pc, #340]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a54      	ldr	r2, [pc, #336]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002026:	f023 0304 	bic.w	r3, r3, #4
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d015      	beq.n	8002060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7fe ffb8 	bl	8000fa8 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe ffb4 	bl	8000fa8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0cb      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	4b49      	ldr	r3, [pc, #292]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ee      	beq.n	800203c <HAL_RCC_OscConfig+0x334>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7fe ffa2 	bl	8000fa8 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7fe ff9e 	bl	8000fa8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0b5      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ee      	bne.n	8002068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	4a38      	ldr	r2, [pc, #224]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a1 	beq.w	80021e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a6:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d05c      	beq.n	800216c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d141      	bne.n	800213e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_RCC_OscConfig+0x478>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe ff72 	bl	8000fa8 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe ff6e 	bl	8000fa8 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e087      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	019b      	lsls	r3, r3, #6
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	491b      	ldr	r1, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x478>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe ff47 	bl	8000fa8 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7fe ff43 	bl	8000fa8 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e05c      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x416>
 800213c:	e054      	b.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_RCC_OscConfig+0x478>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe ff30 	bl	8000fa8 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe ff2c 	bl	8000fa8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e045      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x444>
 800216a:	e03d      	b.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d107      	bne.n	8002184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e038      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
 8002180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x4ec>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d028      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d121      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11a      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021bc:	4293      	cmp	r3, r2
 80021be:	d111      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	3b01      	subs	r3, #1
 80021ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0cc      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d90c      	bls.n	8002234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800226e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d044      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d119      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e067      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4934      	ldr	r1, [pc, #208]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fe5e 	bl	8000fa8 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7fe fe5a 	bl	8000fa8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d20c      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f821 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	490a      	ldr	r1, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	5ccb      	ldrb	r3, [r1, r3]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fdbe 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	0800379c 	.word	0x0800379c
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c8:	b094      	sub	sp, #80	; 0x50
 80023ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
 80023d0:	2300      	movs	r3, #0
 80023d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023d4:	2300      	movs	r3, #0
 80023d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023dc:	4b79      	ldr	r3, [pc, #484]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d00d      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x40>
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	f200 80e1 	bhi.w	80025b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x34>
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x3a>
 80023f6:	e0db      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023fc:	e0db      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023fe:	4b73      	ldr	r3, [pc, #460]	; (80025cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002402:	e0d8      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002404:	4b6f      	ldr	r3, [pc, #444]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800240c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800240e:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d063      	beq.n	80024e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241a:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	2200      	movs	r2, #0
 8002422:	63bb      	str	r3, [r7, #56]	; 0x38
 8002424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
 800242e:	2300      	movs	r3, #0
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
 8002432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002436:	4622      	mov	r2, r4
 8002438:	462b      	mov	r3, r5
 800243a:	f04f 0000 	mov.w	r0, #0
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	0159      	lsls	r1, r3, #5
 8002444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002448:	0150      	lsls	r0, r2, #5
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4621      	mov	r1, r4
 8002450:	1a51      	subs	r1, r2, r1
 8002452:	6139      	str	r1, [r7, #16]
 8002454:	4629      	mov	r1, r5
 8002456:	eb63 0301 	sbc.w	r3, r3, r1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002468:	4659      	mov	r1, fp
 800246a:	018b      	lsls	r3, r1, #6
 800246c:	4651      	mov	r1, sl
 800246e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002472:	4651      	mov	r1, sl
 8002474:	018a      	lsls	r2, r1, #6
 8002476:	4651      	mov	r1, sl
 8002478:	ebb2 0801 	subs.w	r8, r2, r1
 800247c:	4659      	mov	r1, fp
 800247e:	eb63 0901 	sbc.w	r9, r3, r1
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800248e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002496:	4690      	mov	r8, r2
 8002498:	4699      	mov	r9, r3
 800249a:	4623      	mov	r3, r4
 800249c:	eb18 0303 	adds.w	r3, r8, r3
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	462b      	mov	r3, r5
 80024a4:	eb49 0303 	adc.w	r3, r9, r3
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024b6:	4629      	mov	r1, r5
 80024b8:	024b      	lsls	r3, r1, #9
 80024ba:	4621      	mov	r1, r4
 80024bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024c0:	4621      	mov	r1, r4
 80024c2:	024a      	lsls	r2, r1, #9
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ca:	2200      	movs	r2, #0
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024d4:	f7fd fe8a 	bl	80001ec <__aeabi_uldivmod>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4613      	mov	r3, r2
 80024de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e0:	e058      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e2:	4b38      	ldr	r3, [pc, #224]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	099b      	lsrs	r3, r3, #6
 80024e8:	2200      	movs	r2, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	4611      	mov	r1, r2
 80024ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
 80024f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024fc:	4642      	mov	r2, r8
 80024fe:	464b      	mov	r3, r9
 8002500:	f04f 0000 	mov.w	r0, #0
 8002504:	f04f 0100 	mov.w	r1, #0
 8002508:	0159      	lsls	r1, r3, #5
 800250a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800250e:	0150      	lsls	r0, r2, #5
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4641      	mov	r1, r8
 8002516:	ebb2 0a01 	subs.w	sl, r2, r1
 800251a:	4649      	mov	r1, r9
 800251c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800252c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002534:	ebb2 040a 	subs.w	r4, r2, sl
 8002538:	eb63 050b 	sbc.w	r5, r3, fp
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	00eb      	lsls	r3, r5, #3
 8002546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800254a:	00e2      	lsls	r2, r4, #3
 800254c:	4614      	mov	r4, r2
 800254e:	461d      	mov	r5, r3
 8002550:	4643      	mov	r3, r8
 8002552:	18e3      	adds	r3, r4, r3
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	464b      	mov	r3, r9
 8002558:	eb45 0303 	adc.w	r3, r5, r3
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800256a:	4629      	mov	r1, r5
 800256c:	028b      	lsls	r3, r1, #10
 800256e:	4621      	mov	r1, r4
 8002570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002574:	4621      	mov	r1, r4
 8002576:	028a      	lsls	r2, r1, #10
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800257e:	2200      	movs	r2, #0
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	61fa      	str	r2, [r7, #28]
 8002584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002588:	f7fd fe30 	bl	80001ec <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4613      	mov	r3, r2
 8002592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	3301      	adds	r3, #1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3750      	adds	r7, #80	; 0x50
 80025bc:	46bd      	mov	sp, r7
 80025be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	00f42400 	.word	0x00f42400
 80025cc:	007a1200 	.word	0x007a1200

080025d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000000 	.word	0x20000000

080025e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	0a9b      	lsrs	r3, r3, #10
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	080037ac 	.word	0x080037ac

08002610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002614:	f7ff ffdc 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0b5b      	lsrs	r3, r3, #13
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4903      	ldr	r1, [pc, #12]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	080037ac 	.word	0x080037ac

08002638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e03f      	b.n	80026ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fb00 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2224      	movs	r2, #36	; 0x24
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800267a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f929 	bl	80028d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b08a      	sub	sp, #40	; 0x28
 80026d6:	af02      	add	r7, sp, #8
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d17c      	bne.n	80027ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_UART_Transmit+0x2c>
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e075      	b.n	80027ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_UART_Transmit+0x3e>
 800270c:	2302      	movs	r3, #2
 800270e:	e06e      	b.n	80027ee <HAL_UART_Transmit+0x11c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2221      	movs	r2, #33	; 0x21
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002726:	f7fe fc3f 	bl	8000fa8 <HAL_GetTick>
 800272a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	88fa      	ldrh	r2, [r7, #6]
 8002730:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002740:	d108      	bne.n	8002754 <HAL_UART_Transmit+0x82>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	e003      	b.n	800275c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002764:	e02a      	b.n	80027bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2200      	movs	r2, #0
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f840 	bl	80027f6 <UART_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e036      	b.n	80027ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10b      	bne.n	800279e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	3302      	adds	r3, #2
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	e007      	b.n	80027ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	3301      	adds	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1cf      	bne.n	8002766 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2140      	movs	r1, #64	; 0x40
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f810 	bl	80027f6 <UART_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e006      	b.n	80027ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b090      	sub	sp, #64	; 0x40
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4613      	mov	r3, r2
 8002804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002806:	e050      	b.n	80028aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d04c      	beq.n	80028aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0x30>
 8002816:	f7fe fbc7 	bl	8000fa8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002822:	429a      	cmp	r2, r3
 8002824:	d241      	bcs.n	80028aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002846:	637a      	str	r2, [r7, #52]	; 0x34
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800284c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e5      	bne.n	8002826 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3314      	adds	r3, #20
 8002860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	e853 3f00 	ldrex	r3, [r3]
 8002868:	613b      	str	r3, [r7, #16]
   return(result);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3314      	adds	r3, #20
 8002878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800287a:	623a      	str	r2, [r7, #32]
 800287c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287e:	69f9      	ldr	r1, [r7, #28]
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	61bb      	str	r3, [r7, #24]
   return(result);
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e5      	bne.n	800285a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e00f      	b.n	80028ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4013      	ands	r3, r2
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d09f      	beq.n	8002808 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3740      	adds	r7, #64	; 0x40
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d8:	b0c0      	sub	sp, #256	; 0x100
 80028da:	af00      	add	r7, sp, #0
 80028dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	68d9      	ldr	r1, [r3, #12]
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	ea40 0301 	orr.w	r3, r0, r1
 80028fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	431a      	orrs	r2, r3
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800292c:	f021 010c 	bic.w	r1, r1, #12
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800293a:	430b      	orrs	r3, r1
 800293c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	6999      	ldr	r1, [r3, #24]
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	ea40 0301 	orr.w	r3, r0, r1
 800295a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b8f      	ldr	r3, [pc, #572]	; (8002ba0 <UART_SetConfig+0x2cc>)
 8002964:	429a      	cmp	r2, r3
 8002966:	d005      	beq.n	8002974 <UART_SetConfig+0xa0>
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b8d      	ldr	r3, [pc, #564]	; (8002ba4 <UART_SetConfig+0x2d0>)
 8002970:	429a      	cmp	r2, r3
 8002972:	d104      	bne.n	800297e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002974:	f7ff fe4c 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 8002978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800297c:	e003      	b.n	8002986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800297e:	f7ff fe33 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 8002982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002990:	f040 810c 	bne.w	8002bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002998:	2200      	movs	r2, #0
 800299a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800299e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029a6:	4622      	mov	r2, r4
 80029a8:	462b      	mov	r3, r5
 80029aa:	1891      	adds	r1, r2, r2
 80029ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80029ae:	415b      	adcs	r3, r3
 80029b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029b6:	4621      	mov	r1, r4
 80029b8:	eb12 0801 	adds.w	r8, r2, r1
 80029bc:	4629      	mov	r1, r5
 80029be:	eb43 0901 	adc.w	r9, r3, r1
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d6:	4690      	mov	r8, r2
 80029d8:	4699      	mov	r9, r3
 80029da:	4623      	mov	r3, r4
 80029dc:	eb18 0303 	adds.w	r3, r8, r3
 80029e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029e4:	462b      	mov	r3, r5
 80029e6:	eb49 0303 	adc.w	r3, r9, r3
 80029ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a02:	460b      	mov	r3, r1
 8002a04:	18db      	adds	r3, r3, r3
 8002a06:	653b      	str	r3, [r7, #80]	; 0x50
 8002a08:	4613      	mov	r3, r2
 8002a0a:	eb42 0303 	adc.w	r3, r2, r3
 8002a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a18:	f7fd fbe8 	bl	80001ec <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002a22:	fba3 2302 	umull	r2, r3, r3, r2
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	011c      	lsls	r4, r3, #4
 8002a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	1891      	adds	r1, r2, r2
 8002a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a44:	415b      	adcs	r3, r3
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a4c:	4641      	mov	r1, r8
 8002a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a52:	4649      	mov	r1, r9
 8002a54:	eb43 0b01 	adc.w	fp, r3, r1
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a6c:	4692      	mov	sl, r2
 8002a6e:	469b      	mov	fp, r3
 8002a70:	4643      	mov	r3, r8
 8002a72:	eb1a 0303 	adds.w	r3, sl, r3
 8002a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	18db      	adds	r3, r3, r3
 8002a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	eb42 0303 	adc.w	r3, r2, r3
 8002aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002aae:	f7fd fb9d 	bl	80001ec <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002aba:	fba3 2301 	umull	r2, r3, r3, r1
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2264      	movs	r2, #100	; 0x64
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	1acb      	subs	r3, r1, r3
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002adc:	441c      	add	r4, r3
 8002ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002af0:	4642      	mov	r2, r8
 8002af2:	464b      	mov	r3, r9
 8002af4:	1891      	adds	r1, r2, r2
 8002af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002af8:	415b      	adcs	r3, r3
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b00:	4641      	mov	r1, r8
 8002b02:	1851      	adds	r1, r2, r1
 8002b04:	6339      	str	r1, [r7, #48]	; 0x30
 8002b06:	4649      	mov	r1, r9
 8002b08:	414b      	adcs	r3, r1
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b18:	4659      	mov	r1, fp
 8002b1a:	00cb      	lsls	r3, r1, #3
 8002b1c:	4651      	mov	r1, sl
 8002b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b22:	4651      	mov	r1, sl
 8002b24:	00ca      	lsls	r2, r1, #3
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	189b      	adds	r3, r3, r2
 8002b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b34:	464b      	mov	r3, r9
 8002b36:	460a      	mov	r2, r1
 8002b38:	eb42 0303 	adc.w	r3, r2, r3
 8002b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b54:	460b      	mov	r3, r1
 8002b56:	18db      	adds	r3, r3, r3
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	eb42 0303 	adc.w	r3, r2, r3
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b6a:	f7fd fb3f 	bl	80001ec <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002b74:	fba3 1302 	umull	r1, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2164      	movs	r1, #100	; 0x64
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	3332      	adds	r3, #50	; 0x32
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	f003 0207 	and.w	r2, r3, #7
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4422      	add	r2, r4
 8002b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b9c:	e106      	b.n	8002dac <UART_SetConfig+0x4d8>
 8002b9e:	bf00      	nop
 8002ba0:	40011000 	.word	0x40011000
 8002ba4:	40011400 	.word	0x40011400
 8002ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bbe:	4642      	mov	r2, r8
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	1891      	adds	r1, r2, r2
 8002bc4:	6239      	str	r1, [r7, #32]
 8002bc6:	415b      	adcs	r3, r3
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bce:	4641      	mov	r1, r8
 8002bd0:	1854      	adds	r4, r2, r1
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	eb43 0501 	adc.w	r5, r3, r1
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	00eb      	lsls	r3, r5, #3
 8002be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be6:	00e2      	lsls	r2, r4, #3
 8002be8:	4614      	mov	r4, r2
 8002bea:	461d      	mov	r5, r3
 8002bec:	4643      	mov	r3, r8
 8002bee:	18e3      	adds	r3, r4, r3
 8002bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	eb45 0303 	adc.w	r3, r5, r3
 8002bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	008b      	lsls	r3, r1, #2
 8002c1e:	4621      	mov	r1, r4
 8002c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c24:	4621      	mov	r1, r4
 8002c26:	008a      	lsls	r2, r1, #2
 8002c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c2c:	f7fd fade 	bl	80001ec <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4b60      	ldr	r3, [pc, #384]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002c36:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	011c      	lsls	r4, r3, #4
 8002c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c50:	4642      	mov	r2, r8
 8002c52:	464b      	mov	r3, r9
 8002c54:	1891      	adds	r1, r2, r2
 8002c56:	61b9      	str	r1, [r7, #24]
 8002c58:	415b      	adcs	r3, r3
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c60:	4641      	mov	r1, r8
 8002c62:	1851      	adds	r1, r2, r1
 8002c64:	6139      	str	r1, [r7, #16]
 8002c66:	4649      	mov	r1, r9
 8002c68:	414b      	adcs	r3, r1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c78:	4659      	mov	r1, fp
 8002c7a:	00cb      	lsls	r3, r1, #3
 8002c7c:	4651      	mov	r1, sl
 8002c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c82:	4651      	mov	r1, sl
 8002c84:	00ca      	lsls	r2, r1, #3
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c94:	464b      	mov	r3, r9
 8002c96:	460a      	mov	r2, r1
 8002c98:	eb42 0303 	adc.w	r3, r2, r3
 8002c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cb8:	4649      	mov	r1, r9
 8002cba:	008b      	lsls	r3, r1, #2
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	008a      	lsls	r2, r1, #2
 8002cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cca:	f7fd fa8f 	bl	80001ec <__aeabi_uldivmod>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2264      	movs	r2, #100	; 0x64
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	1acb      	subs	r3, r1, r3
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	3332      	adds	r3, #50	; 0x32
 8002ce8:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf4:	441c      	add	r4, r3
 8002cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	673b      	str	r3, [r7, #112]	; 0x70
 8002cfe:	677a      	str	r2, [r7, #116]	; 0x74
 8002d00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d04:	4642      	mov	r2, r8
 8002d06:	464b      	mov	r3, r9
 8002d08:	1891      	adds	r1, r2, r2
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	415b      	adcs	r3, r3
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d14:	4641      	mov	r1, r8
 8002d16:	1851      	adds	r1, r2, r1
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	414b      	adcs	r3, r1
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d2c:	4659      	mov	r1, fp
 8002d2e:	00cb      	lsls	r3, r1, #3
 8002d30:	4651      	mov	r1, sl
 8002d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d36:	4651      	mov	r1, sl
 8002d38:	00ca      	lsls	r2, r1, #3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4642      	mov	r2, r8
 8002d42:	189b      	adds	r3, r3, r2
 8002d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d46:	464b      	mov	r3, r9
 8002d48:	460a      	mov	r2, r1
 8002d4a:	eb42 0303 	adc.w	r3, r2, r3
 8002d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	663b      	str	r3, [r7, #96]	; 0x60
 8002d5a:	667a      	str	r2, [r7, #100]	; 0x64
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d68:	4649      	mov	r1, r9
 8002d6a:	008b      	lsls	r3, r1, #2
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d72:	4641      	mov	r1, r8
 8002d74:	008a      	lsls	r2, r1, #2
 8002d76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d7a:	f7fd fa37 	bl	80001ec <__aeabi_uldivmod>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002d84:	fba3 1302 	umull	r1, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	2164      	movs	r1, #100	; 0x64
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	3332      	adds	r3, #50	; 0x32
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	f003 020f 	and.w	r2, r3, #15
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4422      	add	r2, r4
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	bf00      	nop
 8002dae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002db2:	46bd      	mov	sp, r7
 8002db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db8:	51eb851f 	.word	0x51eb851f

08002dbc <std>:
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	b510      	push	{r4, lr}
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8002dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dca:	6083      	str	r3, [r0, #8]
 8002dcc:	8181      	strh	r1, [r0, #12]
 8002dce:	6643      	str	r3, [r0, #100]	; 0x64
 8002dd0:	81c2      	strh	r2, [r0, #14]
 8002dd2:	6183      	str	r3, [r0, #24]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	305c      	adds	r0, #92	; 0x5c
 8002dda:	f000 f9e5 	bl	80031a8 <memset>
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <std+0x58>)
 8002de0:	6263      	str	r3, [r4, #36]	; 0x24
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <std+0x5c>)
 8002de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <std+0x60>)
 8002de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <std+0x64>)
 8002dec:	6323      	str	r3, [r4, #48]	; 0x30
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <std+0x68>)
 8002df0:	6224      	str	r4, [r4, #32]
 8002df2:	429c      	cmp	r4, r3
 8002df4:	d006      	beq.n	8002e04 <std+0x48>
 8002df6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002dfa:	4294      	cmp	r4, r2
 8002dfc:	d002      	beq.n	8002e04 <std+0x48>
 8002dfe:	33d0      	adds	r3, #208	; 0xd0
 8002e00:	429c      	cmp	r4, r3
 8002e02:	d105      	bne.n	8002e10 <std+0x54>
 8002e04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e0c:	f000 ba44 	b.w	8003298 <__retarget_lock_init_recursive>
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	08002ff9 	.word	0x08002ff9
 8002e18:	0800301b 	.word	0x0800301b
 8002e1c:	08003053 	.word	0x08003053
 8002e20:	08003077 	.word	0x08003077
 8002e24:	20000318 	.word	0x20000318

08002e28 <stdio_exit_handler>:
 8002e28:	4a02      	ldr	r2, [pc, #8]	; (8002e34 <stdio_exit_handler+0xc>)
 8002e2a:	4903      	ldr	r1, [pc, #12]	; (8002e38 <stdio_exit_handler+0x10>)
 8002e2c:	4803      	ldr	r0, [pc, #12]	; (8002e3c <stdio_exit_handler+0x14>)
 8002e2e:	f000 b869 	b.w	8002f04 <_fwalk_sglue>
 8002e32:	bf00      	nop
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	0800359d 	.word	0x0800359d
 8002e3c:	20000018 	.word	0x20000018

08002e40 <cleanup_stdio>:
 8002e40:	6841      	ldr	r1, [r0, #4]
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <cleanup_stdio+0x34>)
 8002e44:	4299      	cmp	r1, r3
 8002e46:	b510      	push	{r4, lr}
 8002e48:	4604      	mov	r4, r0
 8002e4a:	d001      	beq.n	8002e50 <cleanup_stdio+0x10>
 8002e4c:	f000 fba6 	bl	800359c <_fflush_r>
 8002e50:	68a1      	ldr	r1, [r4, #8]
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <cleanup_stdio+0x38>)
 8002e54:	4299      	cmp	r1, r3
 8002e56:	d002      	beq.n	8002e5e <cleanup_stdio+0x1e>
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f000 fb9f 	bl	800359c <_fflush_r>
 8002e5e:	68e1      	ldr	r1, [r4, #12]
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <cleanup_stdio+0x3c>)
 8002e62:	4299      	cmp	r1, r3
 8002e64:	d004      	beq.n	8002e70 <cleanup_stdio+0x30>
 8002e66:	4620      	mov	r0, r4
 8002e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e6c:	f000 bb96 	b.w	800359c <_fflush_r>
 8002e70:	bd10      	pop	{r4, pc}
 8002e72:	bf00      	nop
 8002e74:	20000318 	.word	0x20000318
 8002e78:	20000380 	.word	0x20000380
 8002e7c:	200003e8 	.word	0x200003e8

08002e80 <global_stdio_init.part.0>:
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <global_stdio_init.part.0+0x30>)
 8002e84:	4c0b      	ldr	r4, [pc, #44]	; (8002eb4 <global_stdio_init.part.0+0x34>)
 8002e86:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <global_stdio_init.part.0+0x38>)
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2104      	movs	r1, #4
 8002e90:	f7ff ff94 	bl	8002dbc <std>
 8002e94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2109      	movs	r1, #9
 8002e9c:	f7ff ff8e 	bl	8002dbc <std>
 8002ea0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eaa:	2112      	movs	r1, #18
 8002eac:	f7ff bf86 	b.w	8002dbc <std>
 8002eb0:	20000450 	.word	0x20000450
 8002eb4:	20000318 	.word	0x20000318
 8002eb8:	08002e29 	.word	0x08002e29

08002ebc <__sfp_lock_acquire>:
 8002ebc:	4801      	ldr	r0, [pc, #4]	; (8002ec4 <__sfp_lock_acquire+0x8>)
 8002ebe:	f000 b9ec 	b.w	800329a <__retarget_lock_acquire_recursive>
 8002ec2:	bf00      	nop
 8002ec4:	20000459 	.word	0x20000459

08002ec8 <__sfp_lock_release>:
 8002ec8:	4801      	ldr	r0, [pc, #4]	; (8002ed0 <__sfp_lock_release+0x8>)
 8002eca:	f000 b9e7 	b.w	800329c <__retarget_lock_release_recursive>
 8002ece:	bf00      	nop
 8002ed0:	20000459 	.word	0x20000459

08002ed4 <__sinit>:
 8002ed4:	b510      	push	{r4, lr}
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	f7ff fff0 	bl	8002ebc <__sfp_lock_acquire>
 8002edc:	6a23      	ldr	r3, [r4, #32]
 8002ede:	b11b      	cbz	r3, 8002ee8 <__sinit+0x14>
 8002ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ee4:	f7ff bff0 	b.w	8002ec8 <__sfp_lock_release>
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <__sinit+0x28>)
 8002eea:	6223      	str	r3, [r4, #32]
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <__sinit+0x2c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f5      	bne.n	8002ee0 <__sinit+0xc>
 8002ef4:	f7ff ffc4 	bl	8002e80 <global_stdio_init.part.0>
 8002ef8:	e7f2      	b.n	8002ee0 <__sinit+0xc>
 8002efa:	bf00      	nop
 8002efc:	08002e41 	.word	0x08002e41
 8002f00:	20000450 	.word	0x20000450

08002f04 <_fwalk_sglue>:
 8002f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f08:	4607      	mov	r7, r0
 8002f0a:	4688      	mov	r8, r1
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	2600      	movs	r6, #0
 8002f10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f14:	f1b9 0901 	subs.w	r9, r9, #1
 8002f18:	d505      	bpl.n	8002f26 <_fwalk_sglue+0x22>
 8002f1a:	6824      	ldr	r4, [r4, #0]
 8002f1c:	2c00      	cmp	r4, #0
 8002f1e:	d1f7      	bne.n	8002f10 <_fwalk_sglue+0xc>
 8002f20:	4630      	mov	r0, r6
 8002f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f26:	89ab      	ldrh	r3, [r5, #12]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d907      	bls.n	8002f3c <_fwalk_sglue+0x38>
 8002f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f30:	3301      	adds	r3, #1
 8002f32:	d003      	beq.n	8002f3c <_fwalk_sglue+0x38>
 8002f34:	4629      	mov	r1, r5
 8002f36:	4638      	mov	r0, r7
 8002f38:	47c0      	blx	r8
 8002f3a:	4306      	orrs	r6, r0
 8002f3c:	3568      	adds	r5, #104	; 0x68
 8002f3e:	e7e9      	b.n	8002f14 <_fwalk_sglue+0x10>

08002f40 <_puts_r>:
 8002f40:	6a03      	ldr	r3, [r0, #32]
 8002f42:	b570      	push	{r4, r5, r6, lr}
 8002f44:	6884      	ldr	r4, [r0, #8]
 8002f46:	4605      	mov	r5, r0
 8002f48:	460e      	mov	r6, r1
 8002f4a:	b90b      	cbnz	r3, 8002f50 <_puts_r+0x10>
 8002f4c:	f7ff ffc2 	bl	8002ed4 <__sinit>
 8002f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f52:	07db      	lsls	r3, r3, #31
 8002f54:	d405      	bmi.n	8002f62 <_puts_r+0x22>
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	0598      	lsls	r0, r3, #22
 8002f5a:	d402      	bmi.n	8002f62 <_puts_r+0x22>
 8002f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f5e:	f000 f99c 	bl	800329a <__retarget_lock_acquire_recursive>
 8002f62:	89a3      	ldrh	r3, [r4, #12]
 8002f64:	0719      	lsls	r1, r3, #28
 8002f66:	d513      	bpl.n	8002f90 <_puts_r+0x50>
 8002f68:	6923      	ldr	r3, [r4, #16]
 8002f6a:	b18b      	cbz	r3, 8002f90 <_puts_r+0x50>
 8002f6c:	3e01      	subs	r6, #1
 8002f6e:	68a3      	ldr	r3, [r4, #8]
 8002f70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f74:	3b01      	subs	r3, #1
 8002f76:	60a3      	str	r3, [r4, #8]
 8002f78:	b9e9      	cbnz	r1, 8002fb6 <_puts_r+0x76>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da2e      	bge.n	8002fdc <_puts_r+0x9c>
 8002f7e:	4622      	mov	r2, r4
 8002f80:	210a      	movs	r1, #10
 8002f82:	4628      	mov	r0, r5
 8002f84:	f000 f87b 	bl	800307e <__swbuf_r>
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d007      	beq.n	8002f9c <_puts_r+0x5c>
 8002f8c:	250a      	movs	r5, #10
 8002f8e:	e007      	b.n	8002fa0 <_puts_r+0x60>
 8002f90:	4621      	mov	r1, r4
 8002f92:	4628      	mov	r0, r5
 8002f94:	f000 f8b0 	bl	80030f8 <__swsetup_r>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d0e7      	beq.n	8002f6c <_puts_r+0x2c>
 8002f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8002fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fa2:	07da      	lsls	r2, r3, #31
 8002fa4:	d405      	bmi.n	8002fb2 <_puts_r+0x72>
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	059b      	lsls	r3, r3, #22
 8002faa:	d402      	bmi.n	8002fb2 <_puts_r+0x72>
 8002fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fae:	f000 f975 	bl	800329c <__retarget_lock_release_recursive>
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da04      	bge.n	8002fc4 <_puts_r+0x84>
 8002fba:	69a2      	ldr	r2, [r4, #24]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dc06      	bgt.n	8002fce <_puts_r+0x8e>
 8002fc0:	290a      	cmp	r1, #10
 8002fc2:	d004      	beq.n	8002fce <_puts_r+0x8e>
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	6022      	str	r2, [r4, #0]
 8002fca:	7019      	strb	r1, [r3, #0]
 8002fcc:	e7cf      	b.n	8002f6e <_puts_r+0x2e>
 8002fce:	4622      	mov	r2, r4
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f854 	bl	800307e <__swbuf_r>
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d1c9      	bne.n	8002f6e <_puts_r+0x2e>
 8002fda:	e7df      	b.n	8002f9c <_puts_r+0x5c>
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	250a      	movs	r5, #10
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	6022      	str	r2, [r4, #0]
 8002fe4:	701d      	strb	r5, [r3, #0]
 8002fe6:	e7db      	b.n	8002fa0 <_puts_r+0x60>

08002fe8 <puts>:
 8002fe8:	4b02      	ldr	r3, [pc, #8]	; (8002ff4 <puts+0xc>)
 8002fea:	4601      	mov	r1, r0
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	f7ff bfa7 	b.w	8002f40 <_puts_r>
 8002ff2:	bf00      	nop
 8002ff4:	20000064 	.word	0x20000064

08002ff8 <__sread>:
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003000:	f000 f8fc 	bl	80031fc <_read_r>
 8003004:	2800      	cmp	r0, #0
 8003006:	bfab      	itete	ge
 8003008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800300a:	89a3      	ldrhlt	r3, [r4, #12]
 800300c:	181b      	addge	r3, r3, r0
 800300e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003012:	bfac      	ite	ge
 8003014:	6563      	strge	r3, [r4, #84]	; 0x54
 8003016:	81a3      	strhlt	r3, [r4, #12]
 8003018:	bd10      	pop	{r4, pc}

0800301a <__swrite>:
 800301a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800301e:	461f      	mov	r7, r3
 8003020:	898b      	ldrh	r3, [r1, #12]
 8003022:	05db      	lsls	r3, r3, #23
 8003024:	4605      	mov	r5, r0
 8003026:	460c      	mov	r4, r1
 8003028:	4616      	mov	r6, r2
 800302a:	d505      	bpl.n	8003038 <__swrite+0x1e>
 800302c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003030:	2302      	movs	r3, #2
 8003032:	2200      	movs	r2, #0
 8003034:	f000 f8d0 	bl	80031d8 <_lseek_r>
 8003038:	89a3      	ldrh	r3, [r4, #12]
 800303a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800303e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003042:	81a3      	strh	r3, [r4, #12]
 8003044:	4632      	mov	r2, r6
 8003046:	463b      	mov	r3, r7
 8003048:	4628      	mov	r0, r5
 800304a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800304e:	f000 b8e7 	b.w	8003220 <_write_r>

08003052 <__sseek>:
 8003052:	b510      	push	{r4, lr}
 8003054:	460c      	mov	r4, r1
 8003056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800305a:	f000 f8bd 	bl	80031d8 <_lseek_r>
 800305e:	1c43      	adds	r3, r0, #1
 8003060:	89a3      	ldrh	r3, [r4, #12]
 8003062:	bf15      	itete	ne
 8003064:	6560      	strne	r0, [r4, #84]	; 0x54
 8003066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800306a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800306e:	81a3      	strheq	r3, [r4, #12]
 8003070:	bf18      	it	ne
 8003072:	81a3      	strhne	r3, [r4, #12]
 8003074:	bd10      	pop	{r4, pc}

08003076 <__sclose>:
 8003076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800307a:	f000 b89d 	b.w	80031b8 <_close_r>

0800307e <__swbuf_r>:
 800307e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003080:	460e      	mov	r6, r1
 8003082:	4614      	mov	r4, r2
 8003084:	4605      	mov	r5, r0
 8003086:	b118      	cbz	r0, 8003090 <__swbuf_r+0x12>
 8003088:	6a03      	ldr	r3, [r0, #32]
 800308a:	b90b      	cbnz	r3, 8003090 <__swbuf_r+0x12>
 800308c:	f7ff ff22 	bl	8002ed4 <__sinit>
 8003090:	69a3      	ldr	r3, [r4, #24]
 8003092:	60a3      	str	r3, [r4, #8]
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	071a      	lsls	r2, r3, #28
 8003098:	d525      	bpl.n	80030e6 <__swbuf_r+0x68>
 800309a:	6923      	ldr	r3, [r4, #16]
 800309c:	b31b      	cbz	r3, 80030e6 <__swbuf_r+0x68>
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	6922      	ldr	r2, [r4, #16]
 80030a2:	1a98      	subs	r0, r3, r2
 80030a4:	6963      	ldr	r3, [r4, #20]
 80030a6:	b2f6      	uxtb	r6, r6
 80030a8:	4283      	cmp	r3, r0
 80030aa:	4637      	mov	r7, r6
 80030ac:	dc04      	bgt.n	80030b8 <__swbuf_r+0x3a>
 80030ae:	4621      	mov	r1, r4
 80030b0:	4628      	mov	r0, r5
 80030b2:	f000 fa73 	bl	800359c <_fflush_r>
 80030b6:	b9e0      	cbnz	r0, 80030f2 <__swbuf_r+0x74>
 80030b8:	68a3      	ldr	r3, [r4, #8]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	60a3      	str	r3, [r4, #8]
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	6022      	str	r2, [r4, #0]
 80030c4:	701e      	strb	r6, [r3, #0]
 80030c6:	6962      	ldr	r2, [r4, #20]
 80030c8:	1c43      	adds	r3, r0, #1
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d004      	beq.n	80030d8 <__swbuf_r+0x5a>
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	07db      	lsls	r3, r3, #31
 80030d2:	d506      	bpl.n	80030e2 <__swbuf_r+0x64>
 80030d4:	2e0a      	cmp	r6, #10
 80030d6:	d104      	bne.n	80030e2 <__swbuf_r+0x64>
 80030d8:	4621      	mov	r1, r4
 80030da:	4628      	mov	r0, r5
 80030dc:	f000 fa5e 	bl	800359c <_fflush_r>
 80030e0:	b938      	cbnz	r0, 80030f2 <__swbuf_r+0x74>
 80030e2:	4638      	mov	r0, r7
 80030e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e6:	4621      	mov	r1, r4
 80030e8:	4628      	mov	r0, r5
 80030ea:	f000 f805 	bl	80030f8 <__swsetup_r>
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d0d5      	beq.n	800309e <__swbuf_r+0x20>
 80030f2:	f04f 37ff 	mov.w	r7, #4294967295
 80030f6:	e7f4      	b.n	80030e2 <__swbuf_r+0x64>

080030f8 <__swsetup_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <__swsetup_r+0xac>)
 80030fc:	4605      	mov	r5, r0
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	460c      	mov	r4, r1
 8003102:	b118      	cbz	r0, 800310c <__swsetup_r+0x14>
 8003104:	6a03      	ldr	r3, [r0, #32]
 8003106:	b90b      	cbnz	r3, 800310c <__swsetup_r+0x14>
 8003108:	f7ff fee4 	bl	8002ed4 <__sinit>
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003112:	0718      	lsls	r0, r3, #28
 8003114:	d422      	bmi.n	800315c <__swsetup_r+0x64>
 8003116:	06d9      	lsls	r1, r3, #27
 8003118:	d407      	bmi.n	800312a <__swsetup_r+0x32>
 800311a:	2309      	movs	r3, #9
 800311c:	602b      	str	r3, [r5, #0]
 800311e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003122:	81a3      	strh	r3, [r4, #12]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	e034      	b.n	8003194 <__swsetup_r+0x9c>
 800312a:	0758      	lsls	r0, r3, #29
 800312c:	d512      	bpl.n	8003154 <__swsetup_r+0x5c>
 800312e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003130:	b141      	cbz	r1, 8003144 <__swsetup_r+0x4c>
 8003132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003136:	4299      	cmp	r1, r3
 8003138:	d002      	beq.n	8003140 <__swsetup_r+0x48>
 800313a:	4628      	mov	r0, r5
 800313c:	f000 f8b0 	bl	80032a0 <_free_r>
 8003140:	2300      	movs	r3, #0
 8003142:	6363      	str	r3, [r4, #52]	; 0x34
 8003144:	89a3      	ldrh	r3, [r4, #12]
 8003146:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800314a:	81a3      	strh	r3, [r4, #12]
 800314c:	2300      	movs	r3, #0
 800314e:	6063      	str	r3, [r4, #4]
 8003150:	6923      	ldr	r3, [r4, #16]
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	f043 0308 	orr.w	r3, r3, #8
 800315a:	81a3      	strh	r3, [r4, #12]
 800315c:	6923      	ldr	r3, [r4, #16]
 800315e:	b94b      	cbnz	r3, 8003174 <__swsetup_r+0x7c>
 8003160:	89a3      	ldrh	r3, [r4, #12]
 8003162:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316a:	d003      	beq.n	8003174 <__swsetup_r+0x7c>
 800316c:	4621      	mov	r1, r4
 800316e:	4628      	mov	r0, r5
 8003170:	f000 fa62 	bl	8003638 <__smakebuf_r>
 8003174:	89a0      	ldrh	r0, [r4, #12]
 8003176:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800317a:	f010 0301 	ands.w	r3, r0, #1
 800317e:	d00a      	beq.n	8003196 <__swsetup_r+0x9e>
 8003180:	2300      	movs	r3, #0
 8003182:	60a3      	str	r3, [r4, #8]
 8003184:	6963      	ldr	r3, [r4, #20]
 8003186:	425b      	negs	r3, r3
 8003188:	61a3      	str	r3, [r4, #24]
 800318a:	6923      	ldr	r3, [r4, #16]
 800318c:	b943      	cbnz	r3, 80031a0 <__swsetup_r+0xa8>
 800318e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003192:	d1c4      	bne.n	800311e <__swsetup_r+0x26>
 8003194:	bd38      	pop	{r3, r4, r5, pc}
 8003196:	0781      	lsls	r1, r0, #30
 8003198:	bf58      	it	pl
 800319a:	6963      	ldrpl	r3, [r4, #20]
 800319c:	60a3      	str	r3, [r4, #8]
 800319e:	e7f4      	b.n	800318a <__swsetup_r+0x92>
 80031a0:	2000      	movs	r0, #0
 80031a2:	e7f7      	b.n	8003194 <__swsetup_r+0x9c>
 80031a4:	20000064 	.word	0x20000064

080031a8 <memset>:
 80031a8:	4402      	add	r2, r0
 80031aa:	4603      	mov	r3, r0
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d100      	bne.n	80031b2 <memset+0xa>
 80031b0:	4770      	bx	lr
 80031b2:	f803 1b01 	strb.w	r1, [r3], #1
 80031b6:	e7f9      	b.n	80031ac <memset+0x4>

080031b8 <_close_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	4d06      	ldr	r5, [pc, #24]	; (80031d4 <_close_r+0x1c>)
 80031bc:	2300      	movs	r3, #0
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	602b      	str	r3, [r5, #0]
 80031c4:	f7fd fde4 	bl	8000d90 <_close>
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	d102      	bne.n	80031d2 <_close_r+0x1a>
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	b103      	cbz	r3, 80031d2 <_close_r+0x1a>
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	bd38      	pop	{r3, r4, r5, pc}
 80031d4:	20000454 	.word	0x20000454

080031d8 <_lseek_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4d07      	ldr	r5, [pc, #28]	; (80031f8 <_lseek_r+0x20>)
 80031dc:	4604      	mov	r4, r0
 80031de:	4608      	mov	r0, r1
 80031e0:	4611      	mov	r1, r2
 80031e2:	2200      	movs	r2, #0
 80031e4:	602a      	str	r2, [r5, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f7fd fdf9 	bl	8000dde <_lseek>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d102      	bne.n	80031f6 <_lseek_r+0x1e>
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	b103      	cbz	r3, 80031f6 <_lseek_r+0x1e>
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	20000454 	.word	0x20000454

080031fc <_read_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	4d07      	ldr	r5, [pc, #28]	; (800321c <_read_r+0x20>)
 8003200:	4604      	mov	r4, r0
 8003202:	4608      	mov	r0, r1
 8003204:	4611      	mov	r1, r2
 8003206:	2200      	movs	r2, #0
 8003208:	602a      	str	r2, [r5, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	f7fd fda3 	bl	8000d56 <_read>
 8003210:	1c43      	adds	r3, r0, #1
 8003212:	d102      	bne.n	800321a <_read_r+0x1e>
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	b103      	cbz	r3, 800321a <_read_r+0x1e>
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	bd38      	pop	{r3, r4, r5, pc}
 800321c:	20000454 	.word	0x20000454

08003220 <_write_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	4d07      	ldr	r5, [pc, #28]	; (8003240 <_write_r+0x20>)
 8003224:	4604      	mov	r4, r0
 8003226:	4608      	mov	r0, r1
 8003228:	4611      	mov	r1, r2
 800322a:	2200      	movs	r2, #0
 800322c:	602a      	str	r2, [r5, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	f7fd f95a 	bl	80004e8 <_write>
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d102      	bne.n	800323e <_write_r+0x1e>
 8003238:	682b      	ldr	r3, [r5, #0]
 800323a:	b103      	cbz	r3, 800323e <_write_r+0x1e>
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	bd38      	pop	{r3, r4, r5, pc}
 8003240:	20000454 	.word	0x20000454

08003244 <__errno>:
 8003244:	4b01      	ldr	r3, [pc, #4]	; (800324c <__errno+0x8>)
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000064 	.word	0x20000064

08003250 <__libc_init_array>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	4d0d      	ldr	r5, [pc, #52]	; (8003288 <__libc_init_array+0x38>)
 8003254:	4c0d      	ldr	r4, [pc, #52]	; (800328c <__libc_init_array+0x3c>)
 8003256:	1b64      	subs	r4, r4, r5
 8003258:	10a4      	asrs	r4, r4, #2
 800325a:	2600      	movs	r6, #0
 800325c:	42a6      	cmp	r6, r4
 800325e:	d109      	bne.n	8003274 <__libc_init_array+0x24>
 8003260:	4d0b      	ldr	r5, [pc, #44]	; (8003290 <__libc_init_array+0x40>)
 8003262:	4c0c      	ldr	r4, [pc, #48]	; (8003294 <__libc_init_array+0x44>)
 8003264:	f000 fa56 	bl	8003714 <_init>
 8003268:	1b64      	subs	r4, r4, r5
 800326a:	10a4      	asrs	r4, r4, #2
 800326c:	2600      	movs	r6, #0
 800326e:	42a6      	cmp	r6, r4
 8003270:	d105      	bne.n	800327e <__libc_init_array+0x2e>
 8003272:	bd70      	pop	{r4, r5, r6, pc}
 8003274:	f855 3b04 	ldr.w	r3, [r5], #4
 8003278:	4798      	blx	r3
 800327a:	3601      	adds	r6, #1
 800327c:	e7ee      	b.n	800325c <__libc_init_array+0xc>
 800327e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003282:	4798      	blx	r3
 8003284:	3601      	adds	r6, #1
 8003286:	e7f2      	b.n	800326e <__libc_init_array+0x1e>
 8003288:	080037bc 	.word	0x080037bc
 800328c:	080037bc 	.word	0x080037bc
 8003290:	080037bc 	.word	0x080037bc
 8003294:	080037c0 	.word	0x080037c0

08003298 <__retarget_lock_init_recursive>:
 8003298:	4770      	bx	lr

0800329a <__retarget_lock_acquire_recursive>:
 800329a:	4770      	bx	lr

0800329c <__retarget_lock_release_recursive>:
 800329c:	4770      	bx	lr
	...

080032a0 <_free_r>:
 80032a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032a2:	2900      	cmp	r1, #0
 80032a4:	d044      	beq.n	8003330 <_free_r+0x90>
 80032a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032aa:	9001      	str	r0, [sp, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f1a1 0404 	sub.w	r4, r1, #4
 80032b2:	bfb8      	it	lt
 80032b4:	18e4      	addlt	r4, r4, r3
 80032b6:	f000 f8df 	bl	8003478 <__malloc_lock>
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <_free_r+0x94>)
 80032bc:	9801      	ldr	r0, [sp, #4]
 80032be:	6813      	ldr	r3, [r2, #0]
 80032c0:	b933      	cbnz	r3, 80032d0 <_free_r+0x30>
 80032c2:	6063      	str	r3, [r4, #4]
 80032c4:	6014      	str	r4, [r2, #0]
 80032c6:	b003      	add	sp, #12
 80032c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032cc:	f000 b8da 	b.w	8003484 <__malloc_unlock>
 80032d0:	42a3      	cmp	r3, r4
 80032d2:	d908      	bls.n	80032e6 <_free_r+0x46>
 80032d4:	6825      	ldr	r5, [r4, #0]
 80032d6:	1961      	adds	r1, r4, r5
 80032d8:	428b      	cmp	r3, r1
 80032da:	bf01      	itttt	eq
 80032dc:	6819      	ldreq	r1, [r3, #0]
 80032de:	685b      	ldreq	r3, [r3, #4]
 80032e0:	1949      	addeq	r1, r1, r5
 80032e2:	6021      	streq	r1, [r4, #0]
 80032e4:	e7ed      	b.n	80032c2 <_free_r+0x22>
 80032e6:	461a      	mov	r2, r3
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	b10b      	cbz	r3, 80032f0 <_free_r+0x50>
 80032ec:	42a3      	cmp	r3, r4
 80032ee:	d9fa      	bls.n	80032e6 <_free_r+0x46>
 80032f0:	6811      	ldr	r1, [r2, #0]
 80032f2:	1855      	adds	r5, r2, r1
 80032f4:	42a5      	cmp	r5, r4
 80032f6:	d10b      	bne.n	8003310 <_free_r+0x70>
 80032f8:	6824      	ldr	r4, [r4, #0]
 80032fa:	4421      	add	r1, r4
 80032fc:	1854      	adds	r4, r2, r1
 80032fe:	42a3      	cmp	r3, r4
 8003300:	6011      	str	r1, [r2, #0]
 8003302:	d1e0      	bne.n	80032c6 <_free_r+0x26>
 8003304:	681c      	ldr	r4, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	6053      	str	r3, [r2, #4]
 800330a:	440c      	add	r4, r1
 800330c:	6014      	str	r4, [r2, #0]
 800330e:	e7da      	b.n	80032c6 <_free_r+0x26>
 8003310:	d902      	bls.n	8003318 <_free_r+0x78>
 8003312:	230c      	movs	r3, #12
 8003314:	6003      	str	r3, [r0, #0]
 8003316:	e7d6      	b.n	80032c6 <_free_r+0x26>
 8003318:	6825      	ldr	r5, [r4, #0]
 800331a:	1961      	adds	r1, r4, r5
 800331c:	428b      	cmp	r3, r1
 800331e:	bf04      	itt	eq
 8003320:	6819      	ldreq	r1, [r3, #0]
 8003322:	685b      	ldreq	r3, [r3, #4]
 8003324:	6063      	str	r3, [r4, #4]
 8003326:	bf04      	itt	eq
 8003328:	1949      	addeq	r1, r1, r5
 800332a:	6021      	streq	r1, [r4, #0]
 800332c:	6054      	str	r4, [r2, #4]
 800332e:	e7ca      	b.n	80032c6 <_free_r+0x26>
 8003330:	b003      	add	sp, #12
 8003332:	bd30      	pop	{r4, r5, pc}
 8003334:	2000045c 	.word	0x2000045c

08003338 <sbrk_aligned>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	4e0e      	ldr	r6, [pc, #56]	; (8003374 <sbrk_aligned+0x3c>)
 800333c:	460c      	mov	r4, r1
 800333e:	6831      	ldr	r1, [r6, #0]
 8003340:	4605      	mov	r5, r0
 8003342:	b911      	cbnz	r1, 800334a <sbrk_aligned+0x12>
 8003344:	f000 f9d6 	bl	80036f4 <_sbrk_r>
 8003348:	6030      	str	r0, [r6, #0]
 800334a:	4621      	mov	r1, r4
 800334c:	4628      	mov	r0, r5
 800334e:	f000 f9d1 	bl	80036f4 <_sbrk_r>
 8003352:	1c43      	adds	r3, r0, #1
 8003354:	d00a      	beq.n	800336c <sbrk_aligned+0x34>
 8003356:	1cc4      	adds	r4, r0, #3
 8003358:	f024 0403 	bic.w	r4, r4, #3
 800335c:	42a0      	cmp	r0, r4
 800335e:	d007      	beq.n	8003370 <sbrk_aligned+0x38>
 8003360:	1a21      	subs	r1, r4, r0
 8003362:	4628      	mov	r0, r5
 8003364:	f000 f9c6 	bl	80036f4 <_sbrk_r>
 8003368:	3001      	adds	r0, #1
 800336a:	d101      	bne.n	8003370 <sbrk_aligned+0x38>
 800336c:	f04f 34ff 	mov.w	r4, #4294967295
 8003370:	4620      	mov	r0, r4
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	20000460 	.word	0x20000460

08003378 <_malloc_r>:
 8003378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800337c:	1ccd      	adds	r5, r1, #3
 800337e:	f025 0503 	bic.w	r5, r5, #3
 8003382:	3508      	adds	r5, #8
 8003384:	2d0c      	cmp	r5, #12
 8003386:	bf38      	it	cc
 8003388:	250c      	movcc	r5, #12
 800338a:	2d00      	cmp	r5, #0
 800338c:	4607      	mov	r7, r0
 800338e:	db01      	blt.n	8003394 <_malloc_r+0x1c>
 8003390:	42a9      	cmp	r1, r5
 8003392:	d905      	bls.n	80033a0 <_malloc_r+0x28>
 8003394:	230c      	movs	r3, #12
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	2600      	movs	r6, #0
 800339a:	4630      	mov	r0, r6
 800339c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003474 <_malloc_r+0xfc>
 80033a4:	f000 f868 	bl	8003478 <__malloc_lock>
 80033a8:	f8d8 3000 	ldr.w	r3, [r8]
 80033ac:	461c      	mov	r4, r3
 80033ae:	bb5c      	cbnz	r4, 8003408 <_malloc_r+0x90>
 80033b0:	4629      	mov	r1, r5
 80033b2:	4638      	mov	r0, r7
 80033b4:	f7ff ffc0 	bl	8003338 <sbrk_aligned>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	4604      	mov	r4, r0
 80033bc:	d155      	bne.n	800346a <_malloc_r+0xf2>
 80033be:	f8d8 4000 	ldr.w	r4, [r8]
 80033c2:	4626      	mov	r6, r4
 80033c4:	2e00      	cmp	r6, #0
 80033c6:	d145      	bne.n	8003454 <_malloc_r+0xdc>
 80033c8:	2c00      	cmp	r4, #0
 80033ca:	d048      	beq.n	800345e <_malloc_r+0xe6>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	4631      	mov	r1, r6
 80033d0:	4638      	mov	r0, r7
 80033d2:	eb04 0903 	add.w	r9, r4, r3
 80033d6:	f000 f98d 	bl	80036f4 <_sbrk_r>
 80033da:	4581      	cmp	r9, r0
 80033dc:	d13f      	bne.n	800345e <_malloc_r+0xe6>
 80033de:	6821      	ldr	r1, [r4, #0]
 80033e0:	1a6d      	subs	r5, r5, r1
 80033e2:	4629      	mov	r1, r5
 80033e4:	4638      	mov	r0, r7
 80033e6:	f7ff ffa7 	bl	8003338 <sbrk_aligned>
 80033ea:	3001      	adds	r0, #1
 80033ec:	d037      	beq.n	800345e <_malloc_r+0xe6>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	442b      	add	r3, r5
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	f8d8 3000 	ldr.w	r3, [r8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d038      	beq.n	800346e <_malloc_r+0xf6>
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	42a2      	cmp	r2, r4
 8003400:	d12b      	bne.n	800345a <_malloc_r+0xe2>
 8003402:	2200      	movs	r2, #0
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	e00f      	b.n	8003428 <_malloc_r+0xb0>
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	1b52      	subs	r2, r2, r5
 800340c:	d41f      	bmi.n	800344e <_malloc_r+0xd6>
 800340e:	2a0b      	cmp	r2, #11
 8003410:	d917      	bls.n	8003442 <_malloc_r+0xca>
 8003412:	1961      	adds	r1, r4, r5
 8003414:	42a3      	cmp	r3, r4
 8003416:	6025      	str	r5, [r4, #0]
 8003418:	bf18      	it	ne
 800341a:	6059      	strne	r1, [r3, #4]
 800341c:	6863      	ldr	r3, [r4, #4]
 800341e:	bf08      	it	eq
 8003420:	f8c8 1000 	streq.w	r1, [r8]
 8003424:	5162      	str	r2, [r4, r5]
 8003426:	604b      	str	r3, [r1, #4]
 8003428:	4638      	mov	r0, r7
 800342a:	f104 060b 	add.w	r6, r4, #11
 800342e:	f000 f829 	bl	8003484 <__malloc_unlock>
 8003432:	f026 0607 	bic.w	r6, r6, #7
 8003436:	1d23      	adds	r3, r4, #4
 8003438:	1af2      	subs	r2, r6, r3
 800343a:	d0ae      	beq.n	800339a <_malloc_r+0x22>
 800343c:	1b9b      	subs	r3, r3, r6
 800343e:	50a3      	str	r3, [r4, r2]
 8003440:	e7ab      	b.n	800339a <_malloc_r+0x22>
 8003442:	42a3      	cmp	r3, r4
 8003444:	6862      	ldr	r2, [r4, #4]
 8003446:	d1dd      	bne.n	8003404 <_malloc_r+0x8c>
 8003448:	f8c8 2000 	str.w	r2, [r8]
 800344c:	e7ec      	b.n	8003428 <_malloc_r+0xb0>
 800344e:	4623      	mov	r3, r4
 8003450:	6864      	ldr	r4, [r4, #4]
 8003452:	e7ac      	b.n	80033ae <_malloc_r+0x36>
 8003454:	4634      	mov	r4, r6
 8003456:	6876      	ldr	r6, [r6, #4]
 8003458:	e7b4      	b.n	80033c4 <_malloc_r+0x4c>
 800345a:	4613      	mov	r3, r2
 800345c:	e7cc      	b.n	80033f8 <_malloc_r+0x80>
 800345e:	230c      	movs	r3, #12
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4638      	mov	r0, r7
 8003464:	f000 f80e 	bl	8003484 <__malloc_unlock>
 8003468:	e797      	b.n	800339a <_malloc_r+0x22>
 800346a:	6025      	str	r5, [r4, #0]
 800346c:	e7dc      	b.n	8003428 <_malloc_r+0xb0>
 800346e:	605b      	str	r3, [r3, #4]
 8003470:	deff      	udf	#255	; 0xff
 8003472:	bf00      	nop
 8003474:	2000045c 	.word	0x2000045c

08003478 <__malloc_lock>:
 8003478:	4801      	ldr	r0, [pc, #4]	; (8003480 <__malloc_lock+0x8>)
 800347a:	f7ff bf0e 	b.w	800329a <__retarget_lock_acquire_recursive>
 800347e:	bf00      	nop
 8003480:	20000458 	.word	0x20000458

08003484 <__malloc_unlock>:
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <__malloc_unlock+0x8>)
 8003486:	f7ff bf09 	b.w	800329c <__retarget_lock_release_recursive>
 800348a:	bf00      	nop
 800348c:	20000458 	.word	0x20000458

08003490 <__sflush_r>:
 8003490:	898a      	ldrh	r2, [r1, #12]
 8003492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003496:	4605      	mov	r5, r0
 8003498:	0710      	lsls	r0, r2, #28
 800349a:	460c      	mov	r4, r1
 800349c:	d458      	bmi.n	8003550 <__sflush_r+0xc0>
 800349e:	684b      	ldr	r3, [r1, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	dc05      	bgt.n	80034b0 <__sflush_r+0x20>
 80034a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dc02      	bgt.n	80034b0 <__sflush_r+0x20>
 80034aa:	2000      	movs	r0, #0
 80034ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034b2:	2e00      	cmp	r6, #0
 80034b4:	d0f9      	beq.n	80034aa <__sflush_r+0x1a>
 80034b6:	2300      	movs	r3, #0
 80034b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034bc:	682f      	ldr	r7, [r5, #0]
 80034be:	6a21      	ldr	r1, [r4, #32]
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	d032      	beq.n	800352a <__sflush_r+0x9a>
 80034c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	075a      	lsls	r2, r3, #29
 80034ca:	d505      	bpl.n	80034d8 <__sflush_r+0x48>
 80034cc:	6863      	ldr	r3, [r4, #4]
 80034ce:	1ac0      	subs	r0, r0, r3
 80034d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034d2:	b10b      	cbz	r3, 80034d8 <__sflush_r+0x48>
 80034d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034d6:	1ac0      	subs	r0, r0, r3
 80034d8:	2300      	movs	r3, #0
 80034da:	4602      	mov	r2, r0
 80034dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034de:	6a21      	ldr	r1, [r4, #32]
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b0      	blx	r6
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	d106      	bne.n	80034f8 <__sflush_r+0x68>
 80034ea:	6829      	ldr	r1, [r5, #0]
 80034ec:	291d      	cmp	r1, #29
 80034ee:	d82b      	bhi.n	8003548 <__sflush_r+0xb8>
 80034f0:	4a29      	ldr	r2, [pc, #164]	; (8003598 <__sflush_r+0x108>)
 80034f2:	410a      	asrs	r2, r1
 80034f4:	07d6      	lsls	r6, r2, #31
 80034f6:	d427      	bmi.n	8003548 <__sflush_r+0xb8>
 80034f8:	2200      	movs	r2, #0
 80034fa:	6062      	str	r2, [r4, #4]
 80034fc:	04d9      	lsls	r1, r3, #19
 80034fe:	6922      	ldr	r2, [r4, #16]
 8003500:	6022      	str	r2, [r4, #0]
 8003502:	d504      	bpl.n	800350e <__sflush_r+0x7e>
 8003504:	1c42      	adds	r2, r0, #1
 8003506:	d101      	bne.n	800350c <__sflush_r+0x7c>
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	b903      	cbnz	r3, 800350e <__sflush_r+0x7e>
 800350c:	6560      	str	r0, [r4, #84]	; 0x54
 800350e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003510:	602f      	str	r7, [r5, #0]
 8003512:	2900      	cmp	r1, #0
 8003514:	d0c9      	beq.n	80034aa <__sflush_r+0x1a>
 8003516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800351a:	4299      	cmp	r1, r3
 800351c:	d002      	beq.n	8003524 <__sflush_r+0x94>
 800351e:	4628      	mov	r0, r5
 8003520:	f7ff febe 	bl	80032a0 <_free_r>
 8003524:	2000      	movs	r0, #0
 8003526:	6360      	str	r0, [r4, #52]	; 0x34
 8003528:	e7c0      	b.n	80034ac <__sflush_r+0x1c>
 800352a:	2301      	movs	r3, #1
 800352c:	4628      	mov	r0, r5
 800352e:	47b0      	blx	r6
 8003530:	1c41      	adds	r1, r0, #1
 8003532:	d1c8      	bne.n	80034c6 <__sflush_r+0x36>
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0c5      	beq.n	80034c6 <__sflush_r+0x36>
 800353a:	2b1d      	cmp	r3, #29
 800353c:	d001      	beq.n	8003542 <__sflush_r+0xb2>
 800353e:	2b16      	cmp	r3, #22
 8003540:	d101      	bne.n	8003546 <__sflush_r+0xb6>
 8003542:	602f      	str	r7, [r5, #0]
 8003544:	e7b1      	b.n	80034aa <__sflush_r+0x1a>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354c:	81a3      	strh	r3, [r4, #12]
 800354e:	e7ad      	b.n	80034ac <__sflush_r+0x1c>
 8003550:	690f      	ldr	r7, [r1, #16]
 8003552:	2f00      	cmp	r7, #0
 8003554:	d0a9      	beq.n	80034aa <__sflush_r+0x1a>
 8003556:	0793      	lsls	r3, r2, #30
 8003558:	680e      	ldr	r6, [r1, #0]
 800355a:	bf08      	it	eq
 800355c:	694b      	ldreq	r3, [r1, #20]
 800355e:	600f      	str	r7, [r1, #0]
 8003560:	bf18      	it	ne
 8003562:	2300      	movne	r3, #0
 8003564:	eba6 0807 	sub.w	r8, r6, r7
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	f1b8 0f00 	cmp.w	r8, #0
 800356e:	dd9c      	ble.n	80034aa <__sflush_r+0x1a>
 8003570:	6a21      	ldr	r1, [r4, #32]
 8003572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003574:	4643      	mov	r3, r8
 8003576:	463a      	mov	r2, r7
 8003578:	4628      	mov	r0, r5
 800357a:	47b0      	blx	r6
 800357c:	2800      	cmp	r0, #0
 800357e:	dc06      	bgt.n	800358e <__sflush_r+0xfe>
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	e78e      	b.n	80034ac <__sflush_r+0x1c>
 800358e:	4407      	add	r7, r0
 8003590:	eba8 0800 	sub.w	r8, r8, r0
 8003594:	e7e9      	b.n	800356a <__sflush_r+0xda>
 8003596:	bf00      	nop
 8003598:	dfbffffe 	.word	0xdfbffffe

0800359c <_fflush_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	690b      	ldr	r3, [r1, #16]
 80035a0:	4605      	mov	r5, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	b913      	cbnz	r3, 80035ac <_fflush_r+0x10>
 80035a6:	2500      	movs	r5, #0
 80035a8:	4628      	mov	r0, r5
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	b118      	cbz	r0, 80035b6 <_fflush_r+0x1a>
 80035ae:	6a03      	ldr	r3, [r0, #32]
 80035b0:	b90b      	cbnz	r3, 80035b6 <_fflush_r+0x1a>
 80035b2:	f7ff fc8f 	bl	8002ed4 <__sinit>
 80035b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f3      	beq.n	80035a6 <_fflush_r+0xa>
 80035be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035c0:	07d0      	lsls	r0, r2, #31
 80035c2:	d404      	bmi.n	80035ce <_fflush_r+0x32>
 80035c4:	0599      	lsls	r1, r3, #22
 80035c6:	d402      	bmi.n	80035ce <_fflush_r+0x32>
 80035c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ca:	f7ff fe66 	bl	800329a <__retarget_lock_acquire_recursive>
 80035ce:	4628      	mov	r0, r5
 80035d0:	4621      	mov	r1, r4
 80035d2:	f7ff ff5d 	bl	8003490 <__sflush_r>
 80035d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035d8:	07da      	lsls	r2, r3, #31
 80035da:	4605      	mov	r5, r0
 80035dc:	d4e4      	bmi.n	80035a8 <_fflush_r+0xc>
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	059b      	lsls	r3, r3, #22
 80035e2:	d4e1      	bmi.n	80035a8 <_fflush_r+0xc>
 80035e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e6:	f7ff fe59 	bl	800329c <__retarget_lock_release_recursive>
 80035ea:	e7dd      	b.n	80035a8 <_fflush_r+0xc>

080035ec <__swhatbuf_r>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	460c      	mov	r4, r1
 80035f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f4:	2900      	cmp	r1, #0
 80035f6:	b096      	sub	sp, #88	; 0x58
 80035f8:	4615      	mov	r5, r2
 80035fa:	461e      	mov	r6, r3
 80035fc:	da0d      	bge.n	800361a <__swhatbuf_r+0x2e>
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	bf0c      	ite	eq
 800360a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800360e:	2340      	movne	r3, #64	; 0x40
 8003610:	2000      	movs	r0, #0
 8003612:	6031      	str	r1, [r6, #0]
 8003614:	602b      	str	r3, [r5, #0]
 8003616:	b016      	add	sp, #88	; 0x58
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	466a      	mov	r2, sp
 800361c:	f000 f848 	bl	80036b0 <_fstat_r>
 8003620:	2800      	cmp	r0, #0
 8003622:	dbec      	blt.n	80035fe <__swhatbuf_r+0x12>
 8003624:	9901      	ldr	r1, [sp, #4]
 8003626:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800362a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800362e:	4259      	negs	r1, r3
 8003630:	4159      	adcs	r1, r3
 8003632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003636:	e7eb      	b.n	8003610 <__swhatbuf_r+0x24>

08003638 <__smakebuf_r>:
 8003638:	898b      	ldrh	r3, [r1, #12]
 800363a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800363c:	079d      	lsls	r5, r3, #30
 800363e:	4606      	mov	r6, r0
 8003640:	460c      	mov	r4, r1
 8003642:	d507      	bpl.n	8003654 <__smakebuf_r+0x1c>
 8003644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	6123      	str	r3, [r4, #16]
 800364c:	2301      	movs	r3, #1
 800364e:	6163      	str	r3, [r4, #20]
 8003650:	b002      	add	sp, #8
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	ab01      	add	r3, sp, #4
 8003656:	466a      	mov	r2, sp
 8003658:	f7ff ffc8 	bl	80035ec <__swhatbuf_r>
 800365c:	9900      	ldr	r1, [sp, #0]
 800365e:	4605      	mov	r5, r0
 8003660:	4630      	mov	r0, r6
 8003662:	f7ff fe89 	bl	8003378 <_malloc_r>
 8003666:	b948      	cbnz	r0, 800367c <__smakebuf_r+0x44>
 8003668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800366c:	059a      	lsls	r2, r3, #22
 800366e:	d4ef      	bmi.n	8003650 <__smakebuf_r+0x18>
 8003670:	f023 0303 	bic.w	r3, r3, #3
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	81a3      	strh	r3, [r4, #12]
 800367a:	e7e3      	b.n	8003644 <__smakebuf_r+0xc>
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	6020      	str	r0, [r4, #0]
 8003680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003684:	81a3      	strh	r3, [r4, #12]
 8003686:	9b00      	ldr	r3, [sp, #0]
 8003688:	6163      	str	r3, [r4, #20]
 800368a:	9b01      	ldr	r3, [sp, #4]
 800368c:	6120      	str	r0, [r4, #16]
 800368e:	b15b      	cbz	r3, 80036a8 <__smakebuf_r+0x70>
 8003690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003694:	4630      	mov	r0, r6
 8003696:	f000 f81d 	bl	80036d4 <_isatty_r>
 800369a:	b128      	cbz	r0, 80036a8 <__smakebuf_r+0x70>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	81a3      	strh	r3, [r4, #12]
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	431d      	orrs	r5, r3
 80036ac:	81a5      	strh	r5, [r4, #12]
 80036ae:	e7cf      	b.n	8003650 <__smakebuf_r+0x18>

080036b0 <_fstat_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	4d07      	ldr	r5, [pc, #28]	; (80036d0 <_fstat_r+0x20>)
 80036b4:	2300      	movs	r3, #0
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	602b      	str	r3, [r5, #0]
 80036be:	f7fd fb73 	bl	8000da8 <_fstat>
 80036c2:	1c43      	adds	r3, r0, #1
 80036c4:	d102      	bne.n	80036cc <_fstat_r+0x1c>
 80036c6:	682b      	ldr	r3, [r5, #0]
 80036c8:	b103      	cbz	r3, 80036cc <_fstat_r+0x1c>
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	bd38      	pop	{r3, r4, r5, pc}
 80036ce:	bf00      	nop
 80036d0:	20000454 	.word	0x20000454

080036d4 <_isatty_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4d06      	ldr	r5, [pc, #24]	; (80036f0 <_isatty_r+0x1c>)
 80036d8:	2300      	movs	r3, #0
 80036da:	4604      	mov	r4, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	f7fd fb72 	bl	8000dc8 <_isatty>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d102      	bne.n	80036ee <_isatty_r+0x1a>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	b103      	cbz	r3, 80036ee <_isatty_r+0x1a>
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
 80036f0:	20000454 	.word	0x20000454

080036f4 <_sbrk_r>:
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4d06      	ldr	r5, [pc, #24]	; (8003710 <_sbrk_r+0x1c>)
 80036f8:	2300      	movs	r3, #0
 80036fa:	4604      	mov	r4, r0
 80036fc:	4608      	mov	r0, r1
 80036fe:	602b      	str	r3, [r5, #0]
 8003700:	f7fd fb7a 	bl	8000df8 <_sbrk>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d102      	bne.n	800370e <_sbrk_r+0x1a>
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	b103      	cbz	r3, 800370e <_sbrk_r+0x1a>
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	bd38      	pop	{r3, r4, r5, pc}
 8003710:	20000454 	.word	0x20000454

08003714 <_init>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr

08003720 <_fini>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr
