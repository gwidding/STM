
temp_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008328  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080084d8  080084d8  000184d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008894  08008894  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800889c  0800889c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800889c  0800889c  0001889c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080088a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000009e4  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bb8  20000bb8  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016a70  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a73  00000000  00000000  00036cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001498  00000000  00000000  00039730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000103a  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002677d  00000000  00000000  0003bc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017f82  00000000  00000000  0006237f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6dfa  00000000  00000000  0007a301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b94  00000000  00000000  001610fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00167c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080084c0 	.word	0x080084c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	080084c0 	.word	0x080084c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <LCD_SendInternal>:
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4822      	ldr	r0, [pc, #136]	; (8000f6c <LCD_SendInternal+0xa8>)
 8000ee2:	f002 f899 	bl	8003018 <HAL_I2C_IsDeviceReady>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d000      	beq.n	8000ef2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ef0:	e7f1      	b.n	8000ed6 <LCD_SendInternal+0x12>
            break;
 8000ef2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	f023 030f 	bic.w	r3, r3, #15
 8000efa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000f02:	7bba      	ldrb	r2, [r7, #14]
 8000f04:	797b      	ldrb	r3, [r7, #5]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f043 030c 	orr.w	r3, r3, #12
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000f12:	7bba      	ldrb	r2, [r7, #14]
 8000f14:	797b      	ldrb	r3, [r7, #5]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000f22:	7b7a      	ldrb	r2, [r7, #13]
 8000f24:	797b      	ldrb	r3, [r7, #5]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f043 030c 	orr.w	r3, r3, #12
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000f32:	7b7a      	ldrb	r2, [r7, #13]
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	b299      	uxth	r1, r3
 8000f46:	f107 0208 	add.w	r2, r7, #8
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2304      	movs	r3, #4
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <LCD_SendInternal+0xa8>)
 8000f54:	f001 ff62 	bl	8002e1c <HAL_I2C_Master_Transmit>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000f5c:	2005      	movs	r0, #5
 8000f5e:	f001 f809 	bl	8001f74 <HAL_Delay>
    return res;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000418 	.word	0x20000418

08000f70 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	460a      	mov	r2, r1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000f80:	79b9      	ldrb	r1, [r7, #6]
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2200      	movs	r2, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff9c 	bl	8000ec4 <LCD_SendInternal>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000fa4:	79b9      	ldrb	r1, [r7, #6]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff8a 	bl	8000ec4 <LCD_SendInternal>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2130      	movs	r1, #48	; 0x30
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffd2 	bl	8000f70 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ffcd 	bl	8000f70 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	210c      	movs	r1, #12
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ffc8 	bl	8000f70 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ffc3 	bl	8000f70 <LCD_SendCommand>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	6039      	str	r1, [r7, #0]
 8000ffc:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8000ffe:	e009      	b.n	8001014 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffc3 	bl	8000f94 <LCD_SendData>
        str++;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f1      	bne.n	8001000 <LCD_SendString+0xe>
    }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <_write>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	b29a      	uxth	r2, r3
 8001038:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <_write+0x28>)
 8001040:	f003 fcd5 	bl	80049ee <HAL_UART_Transmit>

	return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200004b4 	.word	0x200004b4

08001054 <delay_us>:

float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void delay_us(uint16_t time) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);           // ???占쏙옙癒몌옙?? 0?占쏙옙占????????? 珥덇린?占쏙옙
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <delay_us+0x30>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < time)
 8001066:	bf00      	nop
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <delay_us+0x30>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3f9      	bcc.n	8001068 <delay_us+0x14>
		;   // ?占쏙옙?占쏙옙?占쏙옙 ?占쏙옙媛꾧퉴占????????? ??占?????????
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	2000046c 	.word	0x2000046c

08001088 <Set_Pin_Output>:
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4619      	mov	r1, r3
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f001 fb8e 	bl	80027d8 <HAL_GPIO_Init>
}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f001 fb70 	bl	80027d8 <HAL_GPIO_Init>
}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <DHT11_Start>:
void DHT11_Start(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_GPIO_Port, DHT11_Pin);  // set the pin as output
 8001104:	2108      	movs	r1, #8
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <DHT11_Start+0x2c>)
 8001108:	f7ff ffbe 	bl	8001088 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 800110c:	2200      	movs	r2, #0
 800110e:	2108      	movs	r1, #8
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <DHT11_Start+0x2c>)
 8001112:	f001 fd25 	bl	8002b60 <HAL_GPIO_WritePin>
	delay_us(18000);   // wait for 18ms
 8001116:	f244 6050 	movw	r0, #18000	; 0x4650
 800111a:	f7ff ff9b 	bl	8001054 <delay_us>
	Set_Pin_Input(DHT11_GPIO_Port, DHT11_Pin);    // set as input
 800111e:	2108      	movs	r1, #8
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <DHT11_Start+0x2c>)
 8001122:	f7ff ffcf 	bl	80010c4 <Set_Pin_Input>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020000 	.word	0x40020000

08001130 <DHT11_Check_Response>:
uint8_t DHT11_Check_Response(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f7ff ff8a 	bl	8001054 <delay_us>
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) {
 8001140:	2108      	movs	r1, #8
 8001142:	4811      	ldr	r0, [pc, #68]	; (8001188 <DHT11_Check_Response+0x58>)
 8001144:	f001 fcf4 	bl	8002b30 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10e      	bne.n	800116c <DHT11_Check_Response+0x3c>
		delay_us(80);
 800114e:	2050      	movs	r0, #80	; 0x50
 8001150:	f7ff ff80 	bl	8001054 <delay_us>
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 8001154:	2108      	movs	r1, #8
 8001156:	480c      	ldr	r0, [pc, #48]	; (8001188 <DHT11_Check_Response+0x58>)
 8001158:	f001 fcea 	bl	8002b30 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <DHT11_Check_Response+0x38>
			Response = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	e001      	b.n	800116c <DHT11_Check_Response+0x3c>
		else
			Response = -1;
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 800116c:	bf00      	nop
 800116e:	2108      	movs	r1, #8
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <DHT11_Check_Response+0x58>)
 8001172:	f001 fcdd 	bl	8002b30 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f8      	bne.n	800116e <DHT11_Check_Response+0x3e>
		;   // wait for the pin to go low

	return Response;
 800117c:	79fb      	ldrb	r3, [r7, #7]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000

0800118c <DHT11_Read>:
uint8_t DHT11_Read(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 8001192:	2300      	movs	r3, #0
 8001194:	71bb      	strb	r3, [r7, #6]
 8001196:	e037      	b.n	8001208 <DHT11_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 8001198:	bf00      	nop
 800119a:	2108      	movs	r1, #8
 800119c:	481e      	ldr	r0, [pc, #120]	; (8001218 <DHT11_Read+0x8c>)
 800119e:	f001 fcc7 	bl	8002b30 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f8      	beq.n	800119a <DHT11_Read+0xe>
			;   // wait for the pin to go high
		delay_us(40);   // wait for 40 us
 80011a8:	2028      	movs	r0, #40	; 0x28
 80011aa:	f7ff ff53 	bl	8001054 <delay_us>
		if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) // if the pin is low
 80011ae:	2108      	movs	r1, #8
 80011b0:	4819      	ldr	r0, [pc, #100]	; (8001218 <DHT11_Read+0x8c>)
 80011b2:	f001 fcbd 	bl	8002b30 <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10e      	bne.n	80011da <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2201      	movs	r2, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	4013      	ands	r3, r2
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	e00b      	b.n	80011f2 <DHT11_Read+0x66>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	f1c3 0307 	rsb	r3, r3, #7
 80011e0:	2201      	movs	r2, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 80011f2:	bf00      	nop
 80011f4:	2108      	movs	r1, #8
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <DHT11_Read+0x8c>)
 80011f8:	f001 fc9a 	bl	8002b30 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f8      	bne.n	80011f4 <DHT11_Read+0x68>
	for (j = 0; j < 8; j++) {
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	3301      	adds	r3, #1
 8001206:	71bb      	strb	r3, [r7, #6]
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	2b07      	cmp	r3, #7
 800120c:	d9c4      	bls.n	8001198 <DHT11_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 800120e:	79fb      	ldrb	r3, [r7, #7]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020000 	.word	0x40020000

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001222:	f000 fe35 	bl	8001e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001226:	f000 f8bd 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f000 fa5b 	bl	80016e4 <MX_GPIO_Init>
  MX_ETH_Init();
 800122e:	f000 f923 	bl	8001478 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001232:	f000 f9ff 	bl	8001634 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001236:	f000 fa27 	bl	8001688 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800123a:	f000 f96b 	bl	8001514 <MX_I2C1_Init>
  MX_TIM1_Init();
 800123e:	f000 f9a9 	bl	8001594 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

//	I2C_Scan();
	LCD_Init(LCD_ADDR);
 8001242:	204e      	movs	r0, #78	; 0x4e
 8001244:	f7ff feb8 	bl	8000fb8 <LCD_Init>
	HAL_TIM_Base_Start(&htim1);
 8001248:	4845      	ldr	r0, [pc, #276]	; (8001360 <main+0x144>)
 800124a:	f003 f89d 	bl	8004388 <HAL_TIM_Base_Start>
//
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	printf("Test\r\n");
 800124e:	4845      	ldr	r0, [pc, #276]	; (8001364 <main+0x148>)
 8001250:	f004 ffd2 	bl	80061f8 <puts>

	while (1) {

		DHT11_Start();
 8001254:	f7ff ff54 	bl	8001100 <DHT11_Start>
		Presence = DHT11_Check_Response();
 8001258:	f7ff ff6a 	bl	8001130 <DHT11_Check_Response>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b41      	ldr	r3, [pc, #260]	; (8001368 <main+0x14c>)
 8001262:	701a      	strb	r2, [r3, #0]
		Rh_byte1 = DHT11_Read();
 8001264:	f7ff ff92 	bl	800118c <DHT11_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <main+0x150>)
 800126e:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT11_Read();
 8001270:	f7ff ff8c 	bl	800118c <DHT11_Read>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b3d      	ldr	r3, [pc, #244]	; (8001370 <main+0x154>)
 800127a:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT11_Read();
 800127c:	f7ff ff86 	bl	800118c <DHT11_Read>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <main+0x158>)
 8001286:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT11_Read();
 8001288:	f7ff ff80 	bl	800118c <DHT11_Read>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <main+0x15c>)
 8001292:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read();
 8001294:	f7ff ff7a 	bl	800118c <DHT11_Read>
 8001298:	4603      	mov	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b37      	ldr	r3, [pc, #220]	; (800137c <main+0x160>)
 800129e:	801a      	strh	r2, [r3, #0]

		TEMP = Temp_byte1;
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <main+0x158>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <main+0x164>)
 80012a8:	801a      	strh	r2, [r3, #0]
		RH = Rh_byte1;
 80012aa:	4b30      	ldr	r3, [pc, #192]	; (800136c <main+0x150>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <main+0x168>)
 80012b2:	801a      	strh	r2, [r3, #0]

		Temperature = (float) TEMP;
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <main+0x164>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <main+0x16c>)
 80012c2:	edc3 7a00 	vstr	s15, [r3]
		Humidity = (float) RH;
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <main+0x168>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d2:	4b2e      	ldr	r3, [pc, #184]	; (800138c <main+0x170>)
 80012d4:	edc3 7a00 	vstr	s15, [r3]

		printf("%f, %f \r\n", Temperature, Humidity);
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <main+0x16c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f943 	bl	8000568 <__aeabi_f2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <main+0x170>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f93c 	bl	8000568 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	e9cd 2300 	strd	r2, r3, [sp]
 80012f8:	4622      	mov	r2, r4
 80012fa:	462b      	mov	r3, r5
 80012fc:	4824      	ldr	r0, [pc, #144]	; (8001390 <main+0x174>)
 80012fe:	f004 ff15 	bl	800612c <iprintf>
		HAL_Delay(500);
 8001302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001306:	f000 fe35 	bl	8001f74 <HAL_Delay>

		sprintf(temperString, "Temper: %.2f", Temperature);
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <main+0x16c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f92a 	bl	8000568 <__aeabi_f2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	491e      	ldr	r1, [pc, #120]	; (8001394 <main+0x178>)
 800131a:	481f      	ldr	r0, [pc, #124]	; (8001398 <main+0x17c>)
 800131c:	f004 ff74 	bl	8006208 <siprintf>
		sprintf(humidStirng, "Humid: %.2f", Humidity);
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <main+0x170>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f91f 	bl	8000568 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	491b      	ldr	r1, [pc, #108]	; (800139c <main+0x180>)
 8001330:	481b      	ldr	r0, [pc, #108]	; (80013a0 <main+0x184>)
 8001332:	f004 ff69 	bl	8006208 <siprintf>

		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001336:	2180      	movs	r1, #128	; 0x80
 8001338:	204e      	movs	r0, #78	; 0x4e
 800133a:	f7ff fe19 	bl	8000f70 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, temperString);
 800133e:	4916      	ldr	r1, [pc, #88]	; (8001398 <main+0x17c>)
 8001340:	204e      	movs	r0, #78	; 0x4e
 8001342:	f7ff fe56 	bl	8000ff2 <LCD_SendString>

		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001346:	21c0      	movs	r1, #192	; 0xc0
 8001348:	204e      	movs	r0, #78	; 0x4e
 800134a:	f7ff fe11 	bl	8000f70 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, humidStirng);
 800134e:	4914      	ldr	r1, [pc, #80]	; (80013a0 <main+0x184>)
 8001350:	204e      	movs	r0, #78	; 0x4e
 8001352:	f7ff fe4e 	bl	8000ff2 <LCD_SendString>
		HAL_Delay(10);
 8001356:	200a      	movs	r0, #10
 8001358:	f000 fe0c 	bl	8001f74 <HAL_Delay>
		DHT11_Start();
 800135c:	e77a      	b.n	8001254 <main+0x38>
 800135e:	bf00      	nop
 8001360:	2000046c 	.word	0x2000046c
 8001364:	080084d8 	.word	0x080084d8
 8001368:	20000a18 	.word	0x20000a18
 800136c:	20000a04 	.word	0x20000a04
 8001370:	20000a05 	.word	0x20000a05
 8001374:	20000a06 	.word	0x20000a06
 8001378:	20000a07 	.word	0x20000a07
 800137c:	20000a08 	.word	0x20000a08
 8001380:	20000a0c 	.word	0x20000a0c
 8001384:	20000a0a 	.word	0x20000a0a
 8001388:	20000a10 	.word	0x20000a10
 800138c:	20000a14 	.word	0x20000a14
 8001390:	080084e0 	.word	0x080084e0
 8001394:	080084ec 	.word	0x080084ec
 8001398:	20000a1c 	.word	0x20000a1c
 800139c:	080084fc 	.word	0x080084fc
 80013a0:	20000a3c 	.word	0x20000a3c

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	; 0x50
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2230      	movs	r2, #48	; 0x30
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 f820 	bl	80063f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <SystemClock_Config+0xcc>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <SystemClock_Config+0xcc>)
 80013d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <SystemClock_Config+0xcc>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <SystemClock_Config+0xd0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <SystemClock_Config+0xd0>)
 80013ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <SystemClock_Config+0xd0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001404:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001414:	2304      	movs	r3, #4
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001418:	23a8      	movs	r3, #168	; 0xa8
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800141c:	2302      	movs	r3, #2
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001420:	2307      	movs	r3, #7
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fac5 	bl	80039b8 <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001434:	f000 fa08 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143c:	2302      	movs	r3, #2
 800143e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001444:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2105      	movs	r1, #5
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fd26 	bl	8003ea8 <HAL_RCC_ClockConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001462:	f000 f9f1 	bl	8001848 <Error_Handler>
  }
}
 8001466:	bf00      	nop
 8001468:	3750      	adds	r7, #80	; 0x50
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40007000 	.word	0x40007000

08001478 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_ETH_Init+0x84>)
 800147e:	4a20      	ldr	r2, [pc, #128]	; (8001500 <MX_ETH_Init+0x88>)
 8001480:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <MX_ETH_Init+0x8c>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <MX_ETH_Init+0x8c>)
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_ETH_Init+0x8c>)
 8001490:	22e1      	movs	r2, #225	; 0xe1
 8001492:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_ETH_Init+0x8c>)
 8001496:	2200      	movs	r2, #0
 8001498:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_ETH_Init+0x8c>)
 800149c:	2200      	movs	r2, #0
 800149e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_ETH_Init+0x8c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_ETH_Init+0x84>)
 80014a8:	4a16      	ldr	r2, [pc, #88]	; (8001504 <MX_ETH_Init+0x8c>)
 80014aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_ETH_Init+0x84>)
 80014ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014b2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_ETH_Init+0x84>)
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <MX_ETH_Init+0x90>)
 80014b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_ETH_Init+0x84>)
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <MX_ETH_Init+0x94>)
 80014be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_ETH_Init+0x84>)
 80014c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_ETH_Init+0x84>)
 80014ca:	f000 fe5d 	bl	8002188 <HAL_ETH_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80014d4:	f000 f9b8 	bl	8001848 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80014d8:	2238      	movs	r2, #56	; 0x38
 80014da:	2100      	movs	r1, #0
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_ETH_Init+0x98>)
 80014de:	f004 ff8b 	bl	80063f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_ETH_Init+0x98>)
 80014e4:	2221      	movs	r2, #33	; 0x21
 80014e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_ETH_Init+0x98>)
 80014ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80014ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_ETH_Init+0x98>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000368 	.word	0x20000368
 8001500:	40028000 	.word	0x40028000
 8001504:	20000a5c 	.word	0x20000a5c
 8001508:	200002c8 	.word	0x200002c8
 800150c:	20000228 	.word	0x20000228
 8001510:	200001f0 	.word	0x200001f0

08001514 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_I2C1_Init+0x74>)
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <MX_I2C1_Init+0x78>)
 800151c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_I2C1_Init+0x74>)
 8001520:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <MX_I2C1_Init+0x7c>)
 8001522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <MX_I2C1_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_I2C1_Init+0x74>)
 8001532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001536:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_I2C1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_I2C1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <MX_I2C1_Init+0x74>)
 8001552:	f001 fb1f 	bl	8002b94 <HAL_I2C_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800155c:	f000 f974 	bl	8001848 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001560:	2100      	movs	r1, #0
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <MX_I2C1_Init+0x74>)
 8001564:	f002 f88f 	bl	8003686 <HAL_I2CEx_ConfigAnalogFilter>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800156e:	f000 f96b 	bl	8001848 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001572:	2100      	movs	r1, #0
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_I2C1_Init+0x74>)
 8001576:	f002 f8c2 	bl	80036fe <HAL_I2CEx_ConfigDigitalFilter>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001580:	f000 f962 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000418 	.word	0x20000418
 800158c:	40005400 	.word	0x40005400
 8001590:	000186a0 	.word	0x000186a0

08001594 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_TIM1_Init+0x98>)
 80015b2:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <MX_TIM1_Init+0x9c>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_TIM1_Init+0x98>)
 80015b8:	22a7      	movs	r2, #167	; 0xa7
 80015ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_TIM1_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_TIM1_Init+0x98>)
 80015c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_TIM1_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_TIM1_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_TIM1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015dc:	4813      	ldr	r0, [pc, #76]	; (800162c <MX_TIM1_Init+0x98>)
 80015de:	f002 fe83 	bl	80042e8 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015e8:	f000 f92e 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <MX_TIM1_Init+0x98>)
 80015fa:	f002 ff2d 	bl	8004458 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001604:	f000 f920 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_TIM1_Init+0x98>)
 8001616:	f003 f921 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001620:	f000 f912 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000046c 	.word	0x2000046c
 8001630:	40010000 	.word	0x40010000

08001634 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_USART3_UART_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_USART3_UART_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <MX_USART3_UART_Init+0x4c>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_USART3_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_USART3_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_USART3_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_USART3_UART_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_USART3_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_USART3_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_USART3_UART_Init+0x4c>)
 800166c:	f003 f972 	bl	8004954 <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001676:	f000 f8e7 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200004b4 	.word	0x200004b4
 8001684:	40004800 	.word	0x40004800

08001688 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001692:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001696:	2204      	movs	r2, #4
 8001698:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169c:	2202      	movs	r2, #2
 800169e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a8:	2202      	movs	r2, #2
 80016aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016cc:	f002 f856 	bl	800377c <HAL_PCD_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016d6:	f000 f8b7 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200004f8 	.word	0x200004f8

080016e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <MX_GPIO_Init+0x154>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a4d      	ldr	r2, [pc, #308]	; (8001838 <MX_GPIO_Init+0x154>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <MX_GPIO_Init+0x154>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <MX_GPIO_Init+0x154>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a46      	ldr	r2, [pc, #280]	; (8001838 <MX_GPIO_Init+0x154>)
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <MX_GPIO_Init+0x154>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b40      	ldr	r3, [pc, #256]	; (8001838 <MX_GPIO_Init+0x154>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a3f      	ldr	r2, [pc, #252]	; (8001838 <MX_GPIO_Init+0x154>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <MX_GPIO_Init+0x154>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <MX_GPIO_Init+0x154>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a38      	ldr	r2, [pc, #224]	; (8001838 <MX_GPIO_Init+0x154>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b36      	ldr	r3, [pc, #216]	; (8001838 <MX_GPIO_Init+0x154>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <MX_GPIO_Init+0x154>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <MX_GPIO_Init+0x154>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <MX_GPIO_Init+0x154>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <MX_GPIO_Init+0x154>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a2a      	ldr	r2, [pc, #168]	; (8001838 <MX_GPIO_Init+0x154>)
 8001790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <MX_GPIO_Init+0x154>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2108      	movs	r1, #8
 80017a6:	4825      	ldr	r0, [pc, #148]	; (800183c <MX_GPIO_Init+0x158>)
 80017a8:	f001 f9da 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f244 0181 	movw	r1, #16513	; 0x4081
 80017b2:	4823      	ldr	r0, [pc, #140]	; (8001840 <MX_GPIO_Init+0x15c>)
 80017b4:	f001 f9d4 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2140      	movs	r1, #64	; 0x40
 80017bc:	4821      	ldr	r0, [pc, #132]	; (8001844 <MX_GPIO_Init+0x160>)
 80017be:	f001 f9cf 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80017c2:	2308      	movs	r3, #8
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4818      	ldr	r0, [pc, #96]	; (800183c <MX_GPIO_Init+0x158>)
 80017da:	f000 fffd 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017de:	f244 0381 	movw	r3, #16513	; 0x4081
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4812      	ldr	r0, [pc, #72]	; (8001840 <MX_GPIO_Init+0x15c>)
 80017f8:	f000 ffee 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017fc:	2340      	movs	r3, #64	; 0x40
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_GPIO_Init+0x160>)
 8001814:	f000 ffe0 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <MX_GPIO_Init+0x160>)
 800182c:	f000 ffd4 	bl	80027d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40021800 	.word	0x40021800

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_MspInit+0x4c>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_MspInit+0x4c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a55      	ldr	r2, [pc, #340]	; (8001a18 <HAL_ETH_MspInit+0x174>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	f040 80a4 	bne.w	8001a10 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 80018d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	623b      	str	r3, [r7, #32]
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	4a4b      	ldr	r2, [pc, #300]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 80018ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018f2:	6313      	str	r3, [r2, #48]	; 0x30
 80018f4:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	4b45      	ldr	r3, [pc, #276]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4a44      	ldr	r2, [pc, #272]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 800190a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800190e:	6313      	str	r3, [r2, #48]	; 0x30
 8001910:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	4a3d      	ldr	r2, [pc, #244]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
 800192c:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4a36      	ldr	r2, [pc, #216]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6313      	str	r3, [r2, #48]	; 0x30
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	4a2f      	ldr	r2, [pc, #188]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	6313      	str	r3, [r2, #48]	; 0x30
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4a28      	ldr	r2, [pc, #160]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 800197a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197e:	6313      	str	r3, [r2, #48]	; 0x30
 8001980:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <HAL_ETH_MspInit+0x178>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800198c:	2332      	movs	r3, #50	; 0x32
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199c:	230b      	movs	r3, #11
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a4:	4619      	mov	r1, r3
 80019a6:	481e      	ldr	r0, [pc, #120]	; (8001a20 <HAL_ETH_MspInit+0x17c>)
 80019a8:	f000 ff16 	bl	80027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019ac:	2386      	movs	r3, #134	; 0x86
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019bc:	230b      	movs	r3, #11
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4817      	ldr	r0, [pc, #92]	; (8001a24 <HAL_ETH_MspInit+0x180>)
 80019c8:	f000 ff06 	bl	80027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019de:	230b      	movs	r3, #11
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <HAL_ETH_MspInit+0x184>)
 80019ea:	f000 fef5 	bl	80027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a00:	230b      	movs	r3, #11
 8001a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4808      	ldr	r0, [pc, #32]	; (8001a2c <HAL_ETH_MspInit+0x188>)
 8001a0c:	f000 fee4 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3738      	adds	r7, #56	; 0x38
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40028000 	.word	0x40028000
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40021800 	.word	0x40021800

08001a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_I2C_MspInit+0x84>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12c      	bne.n	8001aac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a74:	2312      	movs	r3, #18
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a80:	2304      	movs	r3, #4
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <HAL_I2C_MspInit+0x8c>)
 8001a8c:	f000 fea4 	bl	80027d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020400 	.word	0x40020400

08001ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <HAL_TIM_Base_MspInit+0x64>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10e      	bne.n	8001af0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_TIM_Base_MspInit+0x68>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <HAL_TIM_Base_MspInit+0x68>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_TIM_Base_MspInit+0x68>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aee:	e012      	b.n	8001b16 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af8:	d10d      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_TIM_Base_MspInit+0x68>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_TIM_Base_MspInit+0x68>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_TIM_Base_MspInit+0x68>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_UART_MspInit+0x84>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12c      	bne.n	8001ba8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b98:	2307      	movs	r3, #7
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_UART_MspInit+0x8c>)
 8001ba4:	f000 fe18 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40004800 	.word	0x40004800
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020c00 	.word	0x40020c00

08001bbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bdc:	d13f      	bne.n	8001c5e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_PCD_MspInit+0xac>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <HAL_PCD_MspInit+0xac>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_PCD_MspInit+0xac>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001bfa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4815      	ldr	r0, [pc, #84]	; (8001c6c <HAL_PCD_MspInit+0xb0>)
 8001c18:	f000 fdde 	bl	80027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480e      	ldr	r0, [pc, #56]	; (8001c6c <HAL_PCD_MspInit+0xb0>)
 8001c32:	f000 fdd1 	bl	80027d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_PCD_MspInit+0xac>)
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_PCD_MspInit+0xac>)
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c40:	6353      	str	r3, [r2, #52]	; 0x34
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_PCD_MspInit+0xac>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_PCD_MspInit+0xac>)
 8001c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_PCD_MspInit+0xac>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	; 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020000 	.word	0x40020000

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 f93a 	bl	8001f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return 1;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_kill>:

int _kill(int pid, int sig)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cde:	f004 fbdd 	bl	800649c <__errno>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2216      	movs	r2, #22
 8001ce6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_exit>:

void _exit (int status)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ffe7 	bl	8001cd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d06:	e7fe      	b.n	8001d06 <_exit+0x12>

08001d08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e00a      	b.n	8001d30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d1a:	f3af 8000 	nop.w
 8001d1e:	4601      	mov	r1, r0
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	60ba      	str	r2, [r7, #8]
 8001d26:	b2ca      	uxtb	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbf0      	blt.n	8001d1a <_read+0x12>
  }

  return len;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_isatty>:

int _isatty(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f004 fb5e 	bl	800649c <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20030000 	.word	0x20030000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	20000a64 	.word	0x20000a64
 8001e14:	20000bb8 	.word	0x20000bb8

08001e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e40:	480d      	ldr	r0, [pc, #52]	; (8001e78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e42:	490e      	ldr	r1, [pc, #56]	; (8001e7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e44:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e58:	4c0b      	ldr	r4, [pc, #44]	; (8001e88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e66:	f7ff ffd7 	bl	8001e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6a:	f004 fb1d 	bl	80064a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6e:	f7ff f9d5 	bl	800121c <main>
  bx  lr    
 8001e72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e80:	080088a4 	.word	0x080088a4
  ldr r2, =_sbss
 8001e84:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e88:	20000bb8 	.word	0x20000bb8

08001e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <ADC_IRQHandler>
	...

08001e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_Init+0x40>)
 8001e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <HAL_Init+0x40>)
 8001ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_Init+0x40>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f000 f931 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 f808 	bl	8001ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec4:	f7ff fcc6 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023c00 	.word	0x40023c00

08001ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_InitTick+0x54>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x58>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f93b 	bl	800216e <HAL_SYSTICK_Config>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00e      	b.n	8001f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b0f      	cmp	r3, #15
 8001f06:	d80a      	bhi.n	8001f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f000 f911 	bl	8002136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f14:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <HAL_InitTick+0x5c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x20>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x24>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_IncTick+0x24>)
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000a68 	.word	0x20000a68

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000a68 	.word	0x20000a68

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d005      	beq.n	8001f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_Delay+0x44>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f9a:	bf00      	nop
 8001f9c:	f7ff ffde 	bl	8001f5c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d8f7      	bhi.n	8001f9c <HAL_Delay+0x28>
  {
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008

08001fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60d3      	str	r3, [r2, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	; (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f7ff ff8e 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff47 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff5c 	bl	8002004 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff8e 	bl	8002074 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5d 	bl	8002020 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffb0 	bl	80020dc <SysTick_Config>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06c      	b.n	8002274 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2223      	movs	r2, #35	; 0x23
 80021a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fb79 	bl	80018a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_ETH_Init+0xf4>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a30      	ldr	r2, [pc, #192]	; (800227c <HAL_ETH_Init+0xf4>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HAL_ETH_Init+0xf4>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021ce:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <HAL_ETH_Init+0xf8>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <HAL_ETH_Init+0xf8>)
 80021d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_ETH_Init+0xf8>)
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4927      	ldr	r1, [pc, #156]	; (8002280 <HAL_ETH_Init+0xf8>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_ETH_Init+0xf8>)
 80021ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002202:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002204:	f7ff feaa 	bl	8001f5c <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800220a:	e011      	b.n	8002230 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800220c:	f7ff fea6 	bl	8001f5c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800221a:	d909      	bls.n	8002230 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2204      	movs	r2, #4
 8002220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	22e0      	movs	r2, #224	; 0xe0
 8002228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e021      	b.n	8002274 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e4      	bne.n	800220c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f958 	bl	80024f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f9ff 	bl	800264c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fa55 	bl	80026fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	461a      	mov	r2, r3
 800225a:	2100      	movs	r1, #0
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f9bd 	bl	80025dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2210      	movs	r2, #16
 800226e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40013800 	.word	0x40013800

08002284 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4b51      	ldr	r3, [pc, #324]	; (80023e0 <ETH_SetMACConfig+0x15c>)
 800229a:	4013      	ands	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	7c1b      	ldrb	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <ETH_SetMACConfig+0x28>
 80022a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022aa:	e000      	b.n	80022ae <ETH_SetMACConfig+0x2a>
 80022ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	7c5b      	ldrb	r3, [r3, #17]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <ETH_SetMACConfig+0x38>
 80022b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ba:	e000      	b.n	80022be <ETH_SetMACConfig+0x3a>
 80022bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	7fdb      	ldrb	r3, [r3, #31]
 80022ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	7f92      	ldrb	r2, [r2, #30]
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d102      	bne.n	80022e2 <ETH_SetMACConfig+0x5e>
 80022dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e0:	e000      	b.n	80022e4 <ETH_SetMACConfig+0x60>
 80022e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80022e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	7f1b      	ldrb	r3, [r3, #28]
 80022ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	791b      	ldrb	r3, [r3, #4]
 80022f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002302:	2a00      	cmp	r2, #0
 8002304:	d102      	bne.n	800230c <ETH_SetMACConfig+0x88>
 8002306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230a:	e000      	b.n	800230e <ETH_SetMACConfig+0x8a>
 800230c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800230e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	7bdb      	ldrb	r3, [r3, #15]
 8002314:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002316:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800231c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002324:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002326:	4313      	orrs	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800233e:	2001      	movs	r0, #1
 8002340:	f7ff fe18 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	f64f 7341 	movw	r3, #65345	; 0xff41
 800235a:	4013      	ands	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002362:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800236a:	2a00      	cmp	r2, #0
 800236c:	d101      	bne.n	8002372 <ETH_SetMACConfig+0xee>
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	e000      	b.n	8002374 <ETH_SetMACConfig+0xf0>
 8002372:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002374:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800237a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002382:	2a01      	cmp	r2, #1
 8002384:	d101      	bne.n	800238a <ETH_SetMACConfig+0x106>
 8002386:	2208      	movs	r2, #8
 8002388:	e000      	b.n	800238c <ETH_SetMACConfig+0x108>
 800238a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800238c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002394:	2a01      	cmp	r2, #1
 8002396:	d101      	bne.n	800239c <ETH_SetMACConfig+0x118>
 8002398:	2204      	movs	r2, #4
 800239a:	e000      	b.n	800239e <ETH_SetMACConfig+0x11a>
 800239c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800239e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80023a6:	2a01      	cmp	r2, #1
 80023a8:	d101      	bne.n	80023ae <ETH_SetMACConfig+0x12a>
 80023aa:	2202      	movs	r2, #2
 80023ac:	e000      	b.n	80023b0 <ETH_SetMACConfig+0x12c>
 80023ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023b0:	4313      	orrs	r3, r2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff fdd3 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	ff20810f 	.word	0xff20810f

080023e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <ETH_SetDMAConfig+0x110>)
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	7b1b      	ldrb	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <ETH_SetDMAConfig+0x2c>
 800240a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800240e:	e000      	b.n	8002412 <ETH_SetDMAConfig+0x2e>
 8002410:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7b5b      	ldrb	r3, [r3, #13]
 8002416:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002418:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	7f52      	ldrb	r2, [r2, #29]
 800241e:	2a00      	cmp	r2, #0
 8002420:	d102      	bne.n	8002428 <ETH_SetDMAConfig+0x44>
 8002422:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002426:	e000      	b.n	800242a <ETH_SetDMAConfig+0x46>
 8002428:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800242a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7b9b      	ldrb	r3, [r3, #14]
 8002430:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002432:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002438:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	7f1b      	ldrb	r3, [r3, #28]
 800243e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002440:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	7f9b      	ldrb	r3, [r3, #30]
 8002446:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002448:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800244e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002456:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002458:	4313      	orrs	r3, r2
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002468:	461a      	mov	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800247a:	2001      	movs	r0, #1
 800247c:	f7ff fd7a 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	461a      	mov	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002498:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800249e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d8:	2001      	movs	r0, #1
 80024da:	f7ff fd4b 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	f8de3f23 	.word	0xf8de3f23

080024f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b0a6      	sub	sp, #152	; 0x98
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002506:	2301      	movs	r3, #1
 8002508:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800250c:	2300      	movs	r3, #0
 800250e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002534:	2300      	movs	r3, #0
 8002536:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800253e:	2300      	movs	r3, #0
 8002540:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800255a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002564:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800256c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002570:	4619      	mov	r1, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fe86 	bl	8002284 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002578:	2301      	movs	r3, #1
 800257a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800257c:	2301      	movs	r3, #1
 800257e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002586:	2301      	movs	r3, #1
 8002588:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff08 	bl	80023e4 <ETH_SetDMAConfig>
}
 80025d4:	bf00      	nop
 80025d6:	3798      	adds	r7, #152	; 0x98
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3305      	adds	r3, #5
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	3204      	adds	r2, #4
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <ETH_MACAddressConfig+0x68>)
 80025fe:	4413      	add	r3, r2
 8002600:	461a      	mov	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3303      	adds	r3, #3
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	061a      	lsls	r2, r3, #24
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3302      	adds	r3, #2
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3301      	adds	r3, #1
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	4313      	orrs	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <ETH_MACAddressConfig+0x6c>)
 800262e:	4413      	add	r3, r2
 8002630:	461a      	mov	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	6013      	str	r3, [r2, #0]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40028040 	.word	0x40028040
 8002648:	40028044 	.word	0x40028044

0800264c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e03e      	b.n	80026d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68d9      	ldr	r1, [r3, #12]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	3206      	adds	r2, #6
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d80c      	bhi.n	80026bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	e004      	b.n	80026c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d9bd      	bls.n	800265a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f0:	611a      	str	r2, [r3, #16]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e046      	b.n	800279a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6919      	ldr	r1, [r3, #16]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002748:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002750:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	3212      	adds	r2, #18
 8002766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d80c      	bhi.n	800278a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	e004      	b.n	8002794 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3301      	adds	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d9b5      	bls.n	800270c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ca:	60da      	str	r2, [r3, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e177      	b.n	8002ae4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	429a      	cmp	r2, r3
 800280e:	f040 8166 	bne.w	8002ade <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d005      	beq.n	800282a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002826:	2b02      	cmp	r3, #2
 8002828:	d130      	bne.n	800288c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 0201 	and.w	r2, r3, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d017      	beq.n	80028c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d123      	bne.n	800291c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	08da      	lsrs	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3208      	adds	r2, #8
 80028dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	69b9      	ldr	r1, [r7, #24]
 8002918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80c0 	beq.w	8002ade <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b66      	ldr	r3, [pc, #408]	; (8002afc <HAL_GPIO_Init+0x324>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	4a65      	ldr	r2, [pc, #404]	; (8002afc <HAL_GPIO_Init+0x324>)
 8002968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296c:	6453      	str	r3, [r2, #68]	; 0x44
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_GPIO_Init+0x324>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800297a:	4a61      	ldr	r2, [pc, #388]	; (8002b00 <HAL_GPIO_Init+0x328>)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	3302      	adds	r3, #2
 8002982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a58      	ldr	r2, [pc, #352]	; (8002b04 <HAL_GPIO_Init+0x32c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d037      	beq.n	8002a16 <HAL_GPIO_Init+0x23e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a57      	ldr	r2, [pc, #348]	; (8002b08 <HAL_GPIO_Init+0x330>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d031      	beq.n	8002a12 <HAL_GPIO_Init+0x23a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a56      	ldr	r2, [pc, #344]	; (8002b0c <HAL_GPIO_Init+0x334>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02b      	beq.n	8002a0e <HAL_GPIO_Init+0x236>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a55      	ldr	r2, [pc, #340]	; (8002b10 <HAL_GPIO_Init+0x338>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d025      	beq.n	8002a0a <HAL_GPIO_Init+0x232>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a54      	ldr	r2, [pc, #336]	; (8002b14 <HAL_GPIO_Init+0x33c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01f      	beq.n	8002a06 <HAL_GPIO_Init+0x22e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a53      	ldr	r2, [pc, #332]	; (8002b18 <HAL_GPIO_Init+0x340>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d019      	beq.n	8002a02 <HAL_GPIO_Init+0x22a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <HAL_GPIO_Init+0x344>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_Init+0x226>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_GPIO_Init+0x348>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_GPIO_Init+0x222>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a50      	ldr	r2, [pc, #320]	; (8002b24 <HAL_GPIO_Init+0x34c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <HAL_GPIO_Init+0x21e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <HAL_GPIO_Init+0x350>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_GPIO_Init+0x21a>
 80029ee:	2309      	movs	r3, #9
 80029f0:	e012      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 80029f2:	230a      	movs	r3, #10
 80029f4:	e010      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 80029f6:	2308      	movs	r3, #8
 80029f8:	e00e      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 80029fa:	2307      	movs	r3, #7
 80029fc:	e00c      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e00a      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 8002a02:	2305      	movs	r3, #5
 8002a04:	e008      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e004      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_Init+0x240>
 8002a16:	2300      	movs	r3, #0
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	f002 0203 	and.w	r2, r2, #3
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	4093      	lsls	r3, r2
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a28:	4935      	ldr	r1, [pc, #212]	; (8002b00 <HAL_GPIO_Init+0x328>)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	3302      	adds	r3, #2
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <HAL_GPIO_Init+0x354>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5a:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <HAL_GPIO_Init+0x354>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a60:	4b32      	ldr	r3, [pc, #200]	; (8002b2c <HAL_GPIO_Init+0x354>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a84:	4a29      	ldr	r2, [pc, #164]	; (8002b2c <HAL_GPIO_Init+0x354>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8a:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <HAL_GPIO_Init+0x354>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aae:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_GPIO_Init+0x354>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_GPIO_Init+0x354>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_GPIO_Init+0x354>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	f67f ae84 	bls.w	80027f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40013800 	.word	0x40013800
 8002b04:	40020000 	.word	0x40020000
 8002b08:	40020400 	.word	0x40020400
 8002b0c:	40020800 	.word	0x40020800
 8002b10:	40020c00 	.word	0x40020c00
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40021400 	.word	0x40021400
 8002b1c:	40021800 	.word	0x40021800
 8002b20:	40021c00 	.word	0x40021c00
 8002b24:	40022000 	.word	0x40022000
 8002b28:	40022400 	.word	0x40022400
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e001      	b.n	8002b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b7c:	e003      	b.n	8002b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e12b      	b.n	8002dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe ff38 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f001 fb4e 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8002bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4a81      	ldr	r2, [pc, #516]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d807      	bhi.n	8002c18 <HAL_I2C_Init+0x84>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a80      	ldr	r2, [pc, #512]	; (8002e0c <HAL_I2C_Init+0x278>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	bf94      	ite	ls
 8002c10:	2301      	movls	r3, #1
 8002c12:	2300      	movhi	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e006      	b.n	8002c26 <HAL_I2C_Init+0x92>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a7d      	ldr	r2, [pc, #500]	; (8002e10 <HAL_I2C_Init+0x27c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bf94      	ite	ls
 8002c20:	2301      	movls	r3, #1
 8002c22:	2300      	movhi	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0e7      	b.n	8002dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a78      	ldr	r2, [pc, #480]	; (8002e14 <HAL_I2C_Init+0x280>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9b      	lsrs	r3, r3, #18
 8002c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d802      	bhi.n	8002c68 <HAL_I2C_Init+0xd4>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3301      	adds	r3, #1
 8002c66:	e009      	b.n	8002c7c <HAL_I2C_Init+0xe8>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	4a69      	ldr	r2, [pc, #420]	; (8002e18 <HAL_I2C_Init+0x284>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	495c      	ldr	r1, [pc, #368]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c98:	428b      	cmp	r3, r1
 8002c9a:	d819      	bhi.n	8002cd0 <HAL_I2C_Init+0x13c>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e59      	subs	r1, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002caa:	1c59      	adds	r1, r3, #1
 8002cac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_I2C_Init+0x138>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1e59      	subs	r1, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cca:	e051      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e04f      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d111      	bne.n	8002cfc <HAL_I2C_Init+0x168>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e58      	subs	r0, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	440b      	add	r3, r1
 8002ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e012      	b.n	8002d22 <HAL_I2C_Init+0x18e>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	0099      	lsls	r1, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Init+0x196>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e022      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10e      	bne.n	8002d50 <HAL_I2C_Init+0x1bc>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e58      	subs	r0, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	440b      	add	r3, r1
 8002d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	6809      	ldr	r1, [r1, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6911      	ldr	r1, [r2, #16]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68d2      	ldr	r2, [r2, #12]
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	000186a0 	.word	0x000186a0
 8002e0c:	001e847f 	.word	0x001e847f
 8002e10:	003d08ff 	.word	0x003d08ff
 8002e14:	431bde83 	.word	0x431bde83
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	461a      	mov	r2, r3
 8002e28:	460b      	mov	r3, r1
 8002e2a:	817b      	strh	r3, [r7, #10]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff f894 	bl	8001f5c <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 80e0 	bne.w	8003004 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2319      	movs	r3, #25
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4970      	ldr	r1, [pc, #448]	; (8003010 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fa92 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0d3      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_I2C_Master_Transmit+0x50>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0cc      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d007      	beq.n	8002e92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2210      	movs	r2, #16
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	893a      	ldrh	r2, [r7, #8]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a50      	ldr	r2, [pc, #320]	; (8003014 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ed4:	8979      	ldrh	r1, [r7, #10]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f9ca 	bl	8003274 <I2C_MasterRequestWrite>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e08d      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f00:	e066      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	6a39      	ldr	r1, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fb0c 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d107      	bne.n	8002f2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06b      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_I2C_Master_Transmit+0x188>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	6a39      	ldr	r1, [r7, #32]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fafc 	bl	80035a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e01a      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d194      	bne.n	8002f02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	00100002 	.word	0x00100002
 8003014:	ffff0000 	.word	0xffff0000

08003018 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	460b      	mov	r3, r1
 8003026:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7fe ff98 	bl	8001f5c <HAL_GetTick>
 800302c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 8111 	bne.w	8003262 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2319      	movs	r3, #25
 8003046:	2201      	movs	r2, #1
 8003048:	4988      	ldr	r1, [pc, #544]	; (800326c <HAL_I2C_IsDeviceReady+0x254>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f994 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	e104      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_I2C_IsDeviceReady+0x50>
 8003064:	2302      	movs	r3, #2
 8003066:	e0fd      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d007      	beq.n	800308e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2224      	movs	r2, #36	; 0x24
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a70      	ldr	r2, [pc, #448]	; (8003270 <HAL_I2C_IsDeviceReady+0x258>)
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f952 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e8:	d103      	bne.n	80030f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0b6      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003104:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003106:	f7fe ff29 	bl	8001f5c <HAL_GetTick>
 800310a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800313a:	e025      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7fe ff0e 	bl	8001f5c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <HAL_I2C_IsDeviceReady+0x13a>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	22a0      	movs	r2, #160	; 0xa0
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2ba0      	cmp	r3, #160	; 0xa0
 8003192:	d005      	beq.n	80031a0 <HAL_I2C_IsDeviceReady+0x188>
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_I2C_IsDeviceReady+0x188>
 800319a:	7dbb      	ldrb	r3, [r7, #22]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0cd      	beq.n	800313c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d129      	bne.n	800320a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2319      	movs	r3, #25
 80031e2:	2201      	movs	r2, #1
 80031e4:	4921      	ldr	r1, [pc, #132]	; (800326c <HAL_I2C_IsDeviceReady+0x254>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f8c6 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e036      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e02c      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003222:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2319      	movs	r3, #25
 800322a:	2201      	movs	r2, #1
 800322c:	490f      	ldr	r1, [pc, #60]	; (800326c <HAL_I2C_IsDeviceReady+0x254>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8a2 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e012      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	3301      	adds	r3, #1
 8003242:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	f4ff af32 	bcc.w	80030b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	00100002 	.word	0x00100002
 8003270:	ffff0000 	.word	0xffff0000

08003274 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d006      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d003      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800329c:	d108      	bne.n	80032b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e00b      	b.n	80032c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	2b12      	cmp	r3, #18
 80032b6:	d107      	bne.n	80032c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f84f 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	d103      	bne.n	80032f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e035      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003304:	d108      	bne.n	8003318 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e01b      	b.n	8003350 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003318:	897b      	ldrh	r3, [r7, #10]
 800331a:	11db      	asrs	r3, r3, #7
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0306 	and.w	r3, r3, #6
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f063 030f 	orn	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <I2C_MasterRequestWrite+0xfc>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f875 	bl	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e010      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4907      	ldr	r1, [pc, #28]	; (8003374 <I2C_MasterRequestWrite+0x100>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f865 	bl	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	00010008 	.word	0x00010008
 8003374:	00010002 	.word	0x00010002

08003378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003388:	e025      	b.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d021      	beq.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fe fde3 	bl	8001f5c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d116      	bne.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e023      	b.n	800341e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10d      	bne.n	80033fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4013      	ands	r3, r2
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	e00c      	b.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	429a      	cmp	r2, r3
 800341a:	d0b6      	beq.n	800338a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003434:	e051      	b.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d123      	bne.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003454:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800345e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0204 	orr.w	r2, r3, #4
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e046      	b.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d021      	beq.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7fe fd61 	bl	8001f5c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d116      	bne.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f043 0220 	orr.w	r2, r3, #32
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e020      	b.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10c      	bne.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e00b      	b.n	8003516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d18d      	bne.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003530:	e02d      	b.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f878 	bl	8003628 <I2C_IsAcknowledgeFailed>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e02d      	b.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d021      	beq.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7fe fd07 	bl	8001f5c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e007      	b.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d1ca      	bne.n	8003532 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035b2:	e02d      	b.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f837 	bl	8003628 <I2C_IsAcknowledgeFailed>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e02d      	b.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d021      	beq.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035cc:	f7fe fcc6 	bl	8001f5c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d302      	bcc.n	80035e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e007      	b.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d1ca      	bne.n	80035b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363e:	d11b      	bne.n	8003678 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003648:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	d129      	bne.n	80036f0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0210 	bic.w	r2, r2, #16
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e000      	b.n	80036f2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	d12a      	bne.n	800376e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003738:	89fb      	ldrh	r3, [r7, #14]
 800373a:	f023 030f 	bic.w	r3, r3, #15
 800373e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b29a      	uxth	r2, r3
 8003744:	89fb      	ldrh	r3, [r7, #14]
 8003746:	4313      	orrs	r3, r2
 8003748:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	89fa      	ldrh	r2, [r7, #14]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800377c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377e:	b08f      	sub	sp, #60	; 0x3c
 8003780:	af0a      	add	r7, sp, #40	; 0x28
 8003782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e10f      	b.n	80039ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fe fa07 	bl	8001bbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2203      	movs	r2, #3
 80037b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 fce4 	bl	800519a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	687e      	ldr	r6, [r7, #4]
 80037da:	466d      	mov	r5, sp
 80037dc:	f106 0410 	add.w	r4, r6, #16
 80037e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80037f0:	1d33      	adds	r3, r6, #4
 80037f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f4:	6838      	ldr	r0, [r7, #0]
 80037f6:	f001 fc6f 	bl	80050d8 <USB_CoreInit>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0d0      	b.n	80039ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fcd2 	bl	80051bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e04a      	b.n	80038b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	333d      	adds	r3, #61	; 0x3d
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	333c      	adds	r3, #60	; 0x3c
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	b298      	uxth	r0, r3
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3344      	adds	r3, #68	; 0x44
 800385a:	4602      	mov	r2, r0
 800385c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3340      	adds	r3, #64	; 0x40
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3348      	adds	r3, #72	; 0x48
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	334c      	adds	r3, #76	; 0x4c
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800389a:	7bfa      	ldrb	r2, [r7, #15]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3354      	adds	r3, #84	; 0x54
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	3301      	adds	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3af      	bcc.n	800381e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]
 80038c2:	e044      	b.n	800394e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	3301      	adds	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d3b5      	bcc.n	80038c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	687e      	ldr	r6, [r7, #4]
 8003960:	466d      	mov	r5, sp
 8003962:	f106 0410 	add.w	r4, r6, #16
 8003966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800396a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800396c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800396e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003972:	e885 0003 	stmia.w	r5, {r0, r1}
 8003976:	1d33      	adds	r3, r6, #4
 8003978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	f001 fc6a 	bl	8005254 <USB_DevInit>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e00d      	b.n	80039ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fe35 	bl	8005616 <USB_DevDisconnect>

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080039b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e267      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d075      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d6:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d00c      	beq.n	80039fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e2:	4b85      	ldr	r3, [pc, #532]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d112      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ee:	4b82      	ldr	r3, [pc, #520]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	4b7e      	ldr	r3, [pc, #504]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d05b      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x108>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d157      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e242      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1c:	d106      	bne.n	8003a2c <HAL_RCC_OscConfig+0x74>
 8003a1e:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a75      	ldr	r2, [pc, #468]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e01d      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x98>
 8003a36:	4b70      	ldr	r3, [pc, #448]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6f      	ldr	r2, [pc, #444]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b6d      	ldr	r3, [pc, #436]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6c      	ldr	r2, [pc, #432]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a50:	4b69      	ldr	r3, [pc, #420]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a68      	ldr	r2, [pc, #416]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a65      	ldr	r2, [pc, #404]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fe fa74 	bl	8001f5c <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe fa70 	bl	8001f5c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e207      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0xc0>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe fa60 	bl	8001f5c <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fa5c 	bl	8001f5c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1f3      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0xe8>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d063      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ace:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d11c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1c7      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4937      	ldr	r1, [pc, #220]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	e03a      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b28:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fa15 	bl	8001f5c <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fe fa11 	bl	8001f5c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1a8      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4925      	ldr	r1, [pc, #148]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe f9f4 	bl	8001f5c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fe f9f0 	bl	8001f5c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e187      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d036      	beq.n	8003c10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7fe f9d4 	bl	8001f5c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb8:	f7fe f9d0 	bl	8001f5c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e167      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x200>
 8003bd6:	e01b      	b.n	8003c10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fe f9bd 	bl	8001f5c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	e00e      	b.n	8003c04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be6:	f7fe f9b9 	bl	8001f5c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d907      	bls.n	8003c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e150      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	42470000 	.word	0x42470000
 8003c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ea      	bne.n	8003be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8097 	beq.w	8003d4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c22:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b7d      	ldr	r3, [pc, #500]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a7c      	ldr	r2, [pc, #496]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b7a      	ldr	r3, [pc, #488]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4e:	4b77      	ldr	r3, [pc, #476]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5a:	4b74      	ldr	r3, [pc, #464]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a73      	ldr	r2, [pc, #460]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fe f979 	bl	8001f5c <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fe f975 	bl	8001f5c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e10c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x2ea>
 8003c94:	4b64      	ldr	r3, [pc, #400]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a63      	ldr	r2, [pc, #396]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	e01c      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x30c>
 8003caa:	4b5f      	ldr	r3, [pc, #380]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a5b      	ldr	r2, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003cc4:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	4b55      	ldr	r3, [pc, #340]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a54      	ldr	r2, [pc, #336]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	f023 0304 	bic.w	r3, r3, #4
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d015      	beq.n	8003d10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fe f93a 	bl	8001f5c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7fe f936 	bl	8001f5c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0cb      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d02:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0ee      	beq.n	8003cec <HAL_RCC_OscConfig+0x334>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7fe f924 	bl	8001f5c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7fe f920 	bl	8001f5c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0b5      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ee      	bne.n	8003d18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a1 	beq.w	8003e98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d05c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d141      	bne.n	8003dee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fe f8f4 	bl	8001f5c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe f8f0 	bl	8001f5c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e087      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	491b      	ldr	r1, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fe f8c9 	bl	8001f5c <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fe f8c5 	bl	8001f5c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e05c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x416>
 8003dec:	e054      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe f8b2 	bl	8001f5c <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe f8ae 	bl	8001f5c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e045      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x444>
 8003e1a:	e03d      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e038      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x4ec>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d028      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d121      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d11a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e64:	4013      	ands	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0cc      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b68      	ldr	r3, [pc, #416]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d90c      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003efc:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a58      	ldr	r2, [pc, #352]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f14:	4b53      	ldr	r3, [pc, #332]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a52      	ldr	r2, [pc, #328]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b50      	ldr	r3, [pc, #320]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	494d      	ldr	r1, [pc, #308]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d044      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d119      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e067      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4934      	ldr	r1, [pc, #208]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f98:	f7fd ffe0 	bl	8001f5c <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd ffdc 	bl	8001f5c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e04f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d20c      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b22      	ldr	r3, [pc, #136]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e032      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4916      	ldr	r1, [pc, #88]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	490e      	ldr	r1, [pc, #56]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800402e:	f000 f821 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8004032:	4602      	mov	r2, r0
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	490a      	ldr	r1, [pc, #40]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8004040:	5ccb      	ldrb	r3, [r1, r3]
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd ff40 	bl	8001ed4 <HAL_InitTick>

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023c00 	.word	0x40023c00
 8004064:	40023800 	.word	0x40023800
 8004068:	08008508 	.word	0x08008508
 800406c:	20000000 	.word	0x20000000
 8004070:	20000004 	.word	0x20000004

08004074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b094      	sub	sp, #80	; 0x50
 800407a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	647b      	str	r3, [r7, #68]	; 0x44
 8004080:	2300      	movs	r3, #0
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	2300      	movs	r3, #0
 8004086:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800408c:	4b79      	ldr	r3, [pc, #484]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d00d      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004098:	2b08      	cmp	r3, #8
 800409a:	f200 80e1 	bhi.w	8004260 <HAL_RCC_GetSysClockFreq+0x1ec>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x34>
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x3a>
 80040a6:	e0db      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b73      	ldr	r3, [pc, #460]	; (8004278 <HAL_RCC_GetSysClockFreq+0x204>)
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040ac:	e0db      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ae:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_GetSysClockFreq+0x208>)
 80040b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040b2:	e0d8      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b4:	4b6f      	ldr	r3, [pc, #444]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040be:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d063      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ca:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	2200      	movs	r2, #0
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
 80040de:	2300      	movs	r3, #0
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
 80040e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	f04f 0000 	mov.w	r0, #0
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f8:	0150      	lsls	r0, r2, #5
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4621      	mov	r1, r4
 8004100:	1a51      	subs	r1, r2, r1
 8004102:	6139      	str	r1, [r7, #16]
 8004104:	4629      	mov	r1, r5
 8004106:	eb63 0301 	sbc.w	r3, r3, r1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004118:	4659      	mov	r1, fp
 800411a:	018b      	lsls	r3, r1, #6
 800411c:	4651      	mov	r1, sl
 800411e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004122:	4651      	mov	r1, sl
 8004124:	018a      	lsls	r2, r1, #6
 8004126:	4651      	mov	r1, sl
 8004128:	ebb2 0801 	subs.w	r8, r2, r1
 800412c:	4659      	mov	r1, fp
 800412e:	eb63 0901 	sbc.w	r9, r3, r1
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	4623      	mov	r3, r4
 800414c:	eb18 0303 	adds.w	r3, r8, r3
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	462b      	mov	r3, r5
 8004154:	eb49 0303 	adc.w	r3, r9, r3
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004166:	4629      	mov	r1, r5
 8004168:	024b      	lsls	r3, r1, #9
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004170:	4621      	mov	r1, r4
 8004172:	024a      	lsls	r2, r1, #9
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417a:	2200      	movs	r2, #0
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
 800417e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004184:	f7fc fd20 	bl	8000bc8 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004190:	e058      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	2200      	movs	r2, #0
 800419a:	4618      	mov	r0, r3
 800419c:	4611      	mov	r1, r2
 800419e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	f04f 0000 	mov.w	r0, #0
 80041b4:	f04f 0100 	mov.w	r1, #0
 80041b8:	0159      	lsls	r1, r3, #5
 80041ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041be:	0150      	lsls	r0, r2, #5
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4641      	mov	r1, r8
 80041c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ca:	4649      	mov	r1, r9
 80041cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041e4:	ebb2 040a 	subs.w	r4, r2, sl
 80041e8:	eb63 050b 	sbc.w	r5, r3, fp
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	00eb      	lsls	r3, r5, #3
 80041f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fa:	00e2      	lsls	r2, r4, #3
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	4643      	mov	r3, r8
 8004202:	18e3      	adds	r3, r4, r3
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	464b      	mov	r3, r9
 8004208:	eb45 0303 	adc.w	r3, r5, r3
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800421a:	4629      	mov	r1, r5
 800421c:	028b      	lsls	r3, r1, #10
 800421e:	4621      	mov	r1, r4
 8004220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004224:	4621      	mov	r1, r4
 8004226:	028a      	lsls	r2, r1, #10
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422e:	2200      	movs	r2, #0
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	61fa      	str	r2, [r7, #28]
 8004234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004238:	f7fc fcc6 	bl	8000bc8 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004254:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800425e:	e002      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetSysClockFreq+0x204>)
 8004262:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004268:	4618      	mov	r0, r3
 800426a:	3750      	adds	r7, #80	; 0x50
 800426c:	46bd      	mov	sp, r7
 800426e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	00f42400 	.word	0x00f42400
 800427c:	007a1200 	.word	0x007a1200

08004280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_RCC_GetHCLKFreq+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000000 	.word	0x20000000

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800429c:	f7ff fff0 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0a9b      	lsrs	r3, r3, #10
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4903      	ldr	r1, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	08008518 	.word	0x08008518

080042c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042c4:	f7ff ffdc 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0b5b      	lsrs	r3, r3, #13
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4903      	ldr	r1, [pc, #12]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	08008518 	.word	0x08008518

080042e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e041      	b.n	800437e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fd fbd6 	bl	8001ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f000 f95e 	bl	80045e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e046      	b.n	800442e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a23      	ldr	r2, [pc, #140]	; (800443c <HAL_TIM_Base_Start+0xb4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d022      	beq.n	80043f8 <HAL_TIM_Base_Start+0x70>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d01d      	beq.n	80043f8 <HAL_TIM_Base_Start+0x70>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <HAL_TIM_Base_Start+0xb8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d018      	beq.n	80043f8 <HAL_TIM_Base_Start+0x70>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_TIM_Base_Start+0xbc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <HAL_TIM_Base_Start+0x70>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <HAL_TIM_Base_Start+0xc0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <HAL_TIM_Base_Start+0x70>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1b      	ldr	r2, [pc, #108]	; (800444c <HAL_TIM_Base_Start+0xc4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <HAL_TIM_Base_Start+0x70>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a19      	ldr	r2, [pc, #100]	; (8004450 <HAL_TIM_Base_Start+0xc8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_TIM_Base_Start+0x70>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a18      	ldr	r2, [pc, #96]	; (8004454 <HAL_TIM_Base_Start+0xcc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d111      	bne.n	800441c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b06      	cmp	r3, #6
 8004408:	d010      	beq.n	800442c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441a:	e007      	b.n	800442c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010000 	.word	0x40010000
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40000c00 	.word	0x40000c00
 800444c:	40010400 	.word	0x40010400
 8004450:	40014000 	.word	0x40014000
 8004454:	40001800 	.word	0x40001800

08004458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIM_ConfigClockSource+0x1c>
 8004470:	2302      	movs	r3, #2
 8004472:	e0b4      	b.n	80045de <HAL_TIM_ConfigClockSource+0x186>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800449a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ac:	d03e      	beq.n	800452c <HAL_TIM_ConfigClockSource+0xd4>
 80044ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b2:	f200 8087 	bhi.w	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ba:	f000 8086 	beq.w	80045ca <HAL_TIM_ConfigClockSource+0x172>
 80044be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c2:	d87f      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b70      	cmp	r3, #112	; 0x70
 80044c6:	d01a      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0xa6>
 80044c8:	2b70      	cmp	r3, #112	; 0x70
 80044ca:	d87b      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
 80044cc:	2b60      	cmp	r3, #96	; 0x60
 80044ce:	d050      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x11a>
 80044d0:	2b60      	cmp	r3, #96	; 0x60
 80044d2:	d877      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
 80044d4:	2b50      	cmp	r3, #80	; 0x50
 80044d6:	d03c      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0xfa>
 80044d8:	2b50      	cmp	r3, #80	; 0x50
 80044da:	d873      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d058      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x13a>
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d86f      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b30      	cmp	r3, #48	; 0x30
 80044e6:	d064      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x15a>
 80044e8:	2b30      	cmp	r3, #48	; 0x30
 80044ea:	d86b      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d060      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x15a>
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d867      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05c      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x15a>
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d05a      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x15a>
 80044fc:	e062      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6899      	ldr	r1, [r3, #8]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f000 f985 	bl	800481c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	609a      	str	r2, [r3, #8]
      break;
 800452a:	e04f      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6899      	ldr	r1, [r3, #8]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f000 f96e 	bl	800481c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800454e:	609a      	str	r2, [r3, #8]
      break;
 8004550:	e03c      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	f000 f8e2 	bl	8004728 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2150      	movs	r1, #80	; 0x50
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f93b 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004570:	e02c      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	461a      	mov	r2, r3
 8004580:	f000 f901 	bl	8004786 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2160      	movs	r1, #96	; 0x60
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f92b 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004590:	e01c      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	461a      	mov	r2, r3
 80045a0:	f000 f8c2 	bl	8004728 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2140      	movs	r1, #64	; 0x40
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f91b 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 80045b0:	e00c      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f000 f912 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 80045c2:	e003      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      break;
 80045c8:	e000      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a40      	ldr	r2, [pc, #256]	; (80046fc <TIM_Base_SetConfig+0x114>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	d00f      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a3d      	ldr	r2, [pc, #244]	; (8004700 <TIM_Base_SetConfig+0x118>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00b      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a3c      	ldr	r2, [pc, #240]	; (8004704 <TIM_Base_SetConfig+0x11c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a3b      	ldr	r2, [pc, #236]	; (8004708 <TIM_Base_SetConfig+0x120>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3a      	ldr	r2, [pc, #232]	; (800470c <TIM_Base_SetConfig+0x124>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d108      	bne.n	800463a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2f      	ldr	r2, [pc, #188]	; (80046fc <TIM_Base_SetConfig+0x114>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d02b      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004648:	d027      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2c      	ldr	r2, [pc, #176]	; (8004700 <TIM_Base_SetConfig+0x118>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d023      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <TIM_Base_SetConfig+0x11c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01f      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <TIM_Base_SetConfig+0x120>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01b      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a29      	ldr	r2, [pc, #164]	; (800470c <TIM_Base_SetConfig+0x124>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d017      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a28      	ldr	r2, [pc, #160]	; (8004710 <TIM_Base_SetConfig+0x128>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a27      	ldr	r2, [pc, #156]	; (8004714 <TIM_Base_SetConfig+0x12c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00f      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a26      	ldr	r2, [pc, #152]	; (8004718 <TIM_Base_SetConfig+0x130>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a25      	ldr	r2, [pc, #148]	; (800471c <TIM_Base_SetConfig+0x134>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a24      	ldr	r2, [pc, #144]	; (8004720 <TIM_Base_SetConfig+0x138>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a23      	ldr	r2, [pc, #140]	; (8004724 <TIM_Base_SetConfig+0x13c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0xf8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a0c      	ldr	r2, [pc, #48]	; (800470c <TIM_Base_SetConfig+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d103      	bne.n	80046e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	615a      	str	r2, [r3, #20]
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	40000c00 	.word	0x40000c00
 800470c:	40010400 	.word	0x40010400
 8004710:	40014000 	.word	0x40014000
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800
 800471c:	40001800 	.word	0x40001800
 8004720:	40001c00 	.word	0x40001c00
 8004724:	40002000 	.word	0x40002000

08004728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 030a 	bic.w	r3, r3, #10
 8004764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004786:	b480      	push	{r7}
 8004788:	b087      	sub	sp, #28
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f023 0210 	bic.w	r2, r3, #16
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	f043 0307 	orr.w	r3, r3, #7
 8004808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	021a      	lsls	r2, r3, #8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	431a      	orrs	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4313      	orrs	r3, r2
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004870:	2302      	movs	r3, #2
 8004872:	e05a      	b.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a21      	ldr	r2, [pc, #132]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d022      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c0:	d01d      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1d      	ldr	r2, [pc, #116]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d018      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a18      	ldr	r2, [pc, #96]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d009      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a17      	ldr	r2, [pc, #92]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a15      	ldr	r2, [pc, #84]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10c      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4313      	orrs	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800
 8004944:	40000c00 	.word	0x40000c00
 8004948:	40010400 	.word	0x40010400
 800494c:	40014000 	.word	0x40014000
 8004950:	40001800 	.word	0x40001800

08004954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e03f      	b.n	80049e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fd f8d6 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2224      	movs	r2, #36	; 0x24
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f929 	bl	8004bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08a      	sub	sp, #40	; 0x28
 80049f2:	af02      	add	r7, sp, #8
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	603b      	str	r3, [r7, #0]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d17c      	bne.n	8004b08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_UART_Transmit+0x2c>
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e075      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_UART_Transmit+0x3e>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e06e      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2221      	movs	r2, #33	; 0x21
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a42:	f7fd fa8b 	bl	8001f5c <HAL_GetTick>
 8004a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5c:	d108      	bne.n	8004a70 <HAL_UART_Transmit+0x82>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e003      	b.n	8004a78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a80:	e02a      	b.n	8004ad8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2180      	movs	r1, #128	; 0x80
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f840 	bl	8004b12 <UART_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e036      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e007      	b.n	8004aca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1cf      	bne.n	8004a82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2140      	movs	r1, #64	; 0x40
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f810 	bl	8004b12 <UART_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e006      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b090      	sub	sp, #64	; 0x40
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b22:	e050      	b.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d04c      	beq.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b32:	f7fd fa13 	bl	8001f5c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d241      	bcs.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	330c      	adds	r3, #12
 8004b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b62:	637a      	str	r2, [r7, #52]	; 0x34
 8004b64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e5      	bne.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3314      	adds	r3, #20
 8004b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	613b      	str	r3, [r7, #16]
   return(result);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3314      	adds	r3, #20
 8004b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b96:	623a      	str	r2, [r7, #32]
 8004b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	69f9      	ldr	r1, [r7, #28]
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e5      	bne.n	8004b76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e00f      	b.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	bf0c      	ite	eq
 8004bd6:	2301      	moveq	r3, #1
 8004bd8:	2300      	movne	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d09f      	beq.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3740      	adds	r7, #64	; 0x40
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf4:	b0c0      	sub	sp, #256	; 0x100
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	68d9      	ldr	r1, [r3, #12]
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	ea40 0301 	orr.w	r3, r0, r1
 8004c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c48:	f021 010c 	bic.w	r1, r1, #12
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c56:	430b      	orrs	r3, r1
 8004c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6a:	6999      	ldr	r1, [r3, #24]
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	ea40 0301 	orr.w	r3, r0, r1
 8004c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b8f      	ldr	r3, [pc, #572]	; (8004ebc <UART_SetConfig+0x2cc>)
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d005      	beq.n	8004c90 <UART_SetConfig+0xa0>
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b8d      	ldr	r3, [pc, #564]	; (8004ec0 <UART_SetConfig+0x2d0>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d104      	bne.n	8004c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c90:	f7ff fb16 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 8004c94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c98:	e003      	b.n	8004ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c9a:	f7ff fafd 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8004c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cac:	f040 810c 	bne.w	8004ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	eb12 0801 	adds.w	r8, r2, r1
 8004cd8:	4629      	mov	r1, r5
 8004cda:	eb43 0901 	adc.w	r9, r3, r1
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cf2:	4690      	mov	r8, r2
 8004cf4:	4699      	mov	r9, r3
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	eb18 0303 	adds.w	r3, r8, r3
 8004cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d00:	462b      	mov	r3, r5
 8004d02:	eb49 0303 	adc.w	r3, r9, r3
 8004d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d1e:	460b      	mov	r3, r1
 8004d20:	18db      	adds	r3, r3, r3
 8004d22:	653b      	str	r3, [r7, #80]	; 0x50
 8004d24:	4613      	mov	r3, r2
 8004d26:	eb42 0303 	adc.w	r3, r2, r3
 8004d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d34:	f7fb ff48 	bl	8000bc8 <__aeabi_uldivmod>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4b61      	ldr	r3, [pc, #388]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	011c      	lsls	r4, r3, #4
 8004d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	1891      	adds	r1, r2, r2
 8004d5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d60:	415b      	adcs	r3, r3
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d68:	4641      	mov	r1, r8
 8004d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d6e:	4649      	mov	r1, r9
 8004d70:	eb43 0b01 	adc.w	fp, r3, r1
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d88:	4692      	mov	sl, r2
 8004d8a:	469b      	mov	fp, r3
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d96:	464b      	mov	r3, r9
 8004d98:	eb4b 0303 	adc.w	r3, fp, r3
 8004d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004db4:	460b      	mov	r3, r1
 8004db6:	18db      	adds	r3, r3, r3
 8004db8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dba:	4613      	mov	r3, r2
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dca:	f7fb fefd 	bl	8000bc8 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2264      	movs	r2, #100	; 0x64
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	1acb      	subs	r3, r1, r3
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dea:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004dec:	fba3 2302 	umull	r2, r3, r3, r2
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004df8:	441c      	add	r4, r3
 8004dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e14:	415b      	adcs	r3, r3
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	1851      	adds	r1, r2, r1
 8004e20:	6339      	str	r1, [r7, #48]	; 0x30
 8004e22:	4649      	mov	r1, r9
 8004e24:	414b      	adcs	r3, r1
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e34:	4659      	mov	r1, fp
 8004e36:	00cb      	lsls	r3, r1, #3
 8004e38:	4651      	mov	r1, sl
 8004e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3e:	4651      	mov	r1, sl
 8004e40:	00ca      	lsls	r2, r1, #3
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	4642      	mov	r2, r8
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e50:	464b      	mov	r3, r9
 8004e52:	460a      	mov	r2, r1
 8004e54:	eb42 0303 	adc.w	r3, r2, r3
 8004e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e70:	460b      	mov	r3, r1
 8004e72:	18db      	adds	r3, r3, r3
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e76:	4613      	mov	r3, r2
 8004e78:	eb42 0303 	adc.w	r3, r2, r3
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e86:	f7fb fe9f 	bl	8000bc8 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004e90:	fba3 1302 	umull	r1, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	2164      	movs	r1, #100	; 0x64
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	3332      	adds	r3, #50	; 0x32
 8004ea2:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <UART_SetConfig+0x2d4>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f003 0207 	and.w	r2, r3, #7
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4422      	add	r2, r4
 8004eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eb8:	e106      	b.n	80050c8 <UART_SetConfig+0x4d8>
 8004eba:	bf00      	nop
 8004ebc:	40011000 	.word	0x40011000
 8004ec0:	40011400 	.word	0x40011400
 8004ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eda:	4642      	mov	r2, r8
 8004edc:	464b      	mov	r3, r9
 8004ede:	1891      	adds	r1, r2, r2
 8004ee0:	6239      	str	r1, [r7, #32]
 8004ee2:	415b      	adcs	r3, r3
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eea:	4641      	mov	r1, r8
 8004eec:	1854      	adds	r4, r2, r1
 8004eee:	4649      	mov	r1, r9
 8004ef0:	eb43 0501 	adc.w	r5, r3, r1
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	00eb      	lsls	r3, r5, #3
 8004efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f02:	00e2      	lsls	r2, r4, #3
 8004f04:	4614      	mov	r4, r2
 8004f06:	461d      	mov	r5, r3
 8004f08:	4643      	mov	r3, r8
 8004f0a:	18e3      	adds	r3, r4, r3
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f10:	464b      	mov	r3, r9
 8004f12:	eb45 0303 	adc.w	r3, r5, r3
 8004f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f36:	4629      	mov	r1, r5
 8004f38:	008b      	lsls	r3, r1, #2
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f40:	4621      	mov	r1, r4
 8004f42:	008a      	lsls	r2, r1, #2
 8004f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f48:	f7fb fe3e 	bl	8000bc8 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4b60      	ldr	r3, [pc, #384]	; (80050d4 <UART_SetConfig+0x4e4>)
 8004f52:	fba3 2302 	umull	r2, r3, r3, r2
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	011c      	lsls	r4, r3, #4
 8004f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	1891      	adds	r1, r2, r2
 8004f72:	61b9      	str	r1, [r7, #24]
 8004f74:	415b      	adcs	r3, r3
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	1851      	adds	r1, r2, r1
 8004f80:	6139      	str	r1, [r7, #16]
 8004f82:	4649      	mov	r1, r9
 8004f84:	414b      	adcs	r3, r1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f94:	4659      	mov	r1, fp
 8004f96:	00cb      	lsls	r3, r1, #3
 8004f98:	4651      	mov	r1, sl
 8004f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f9e:	4651      	mov	r1, sl
 8004fa0:	00ca      	lsls	r2, r1, #3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4642      	mov	r2, r8
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	460a      	mov	r2, r1
 8004fb4:	eb42 0303 	adc.w	r3, r2, r3
 8004fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	008b      	lsls	r3, r1, #2
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fde:	4641      	mov	r1, r8
 8004fe0:	008a      	lsls	r2, r1, #2
 8004fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fe6:	f7fb fdef 	bl	8000bc8 <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4b38      	ldr	r3, [pc, #224]	; (80050d4 <UART_SetConfig+0x4e4>)
 8004ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2264      	movs	r2, #100	; 0x64
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	1acb      	subs	r3, r1, r3
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	3332      	adds	r3, #50	; 0x32
 8005004:	4a33      	ldr	r2, [pc, #204]	; (80050d4 <UART_SetConfig+0x4e4>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005010:	441c      	add	r4, r3
 8005012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005016:	2200      	movs	r2, #0
 8005018:	673b      	str	r3, [r7, #112]	; 0x70
 800501a:	677a      	str	r2, [r7, #116]	; 0x74
 800501c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005020:	4642      	mov	r2, r8
 8005022:	464b      	mov	r3, r9
 8005024:	1891      	adds	r1, r2, r2
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	415b      	adcs	r3, r3
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005030:	4641      	mov	r1, r8
 8005032:	1851      	adds	r1, r2, r1
 8005034:	6039      	str	r1, [r7, #0]
 8005036:	4649      	mov	r1, r9
 8005038:	414b      	adcs	r3, r1
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005048:	4659      	mov	r1, fp
 800504a:	00cb      	lsls	r3, r1, #3
 800504c:	4651      	mov	r1, sl
 800504e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005052:	4651      	mov	r1, sl
 8005054:	00ca      	lsls	r2, r1, #3
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	4603      	mov	r3, r0
 800505c:	4642      	mov	r2, r8
 800505e:	189b      	adds	r3, r3, r2
 8005060:	66bb      	str	r3, [r7, #104]	; 0x68
 8005062:	464b      	mov	r3, r9
 8005064:	460a      	mov	r2, r1
 8005066:	eb42 0303 	adc.w	r3, r2, r3
 800506a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	663b      	str	r3, [r7, #96]	; 0x60
 8005076:	667a      	str	r2, [r7, #100]	; 0x64
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005084:	4649      	mov	r1, r9
 8005086:	008b      	lsls	r3, r1, #2
 8005088:	4641      	mov	r1, r8
 800508a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508e:	4641      	mov	r1, r8
 8005090:	008a      	lsls	r2, r1, #2
 8005092:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005096:	f7fb fd97 	bl	8000bc8 <__aeabi_uldivmod>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <UART_SetConfig+0x4e4>)
 80050a0:	fba3 1302 	umull	r1, r3, r3, r2
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	2164      	movs	r1, #100	; 0x64
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	3332      	adds	r3, #50	; 0x32
 80050b2:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <UART_SetConfig+0x4e4>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	f003 020f 	and.w	r2, r3, #15
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4422      	add	r2, r4
 80050c6:	609a      	str	r2, [r3, #8]
}
 80050c8:	bf00      	nop
 80050ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050ce:	46bd      	mov	sp, r7
 80050d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d4:	51eb851f 	.word	0x51eb851f

080050d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d8:	b084      	sub	sp, #16
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	f107 001c 	add.w	r0, r7, #28
 80050e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d122      	bne.n	8005136 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d105      	bne.n	800512a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 faa2 	bl	8005674 <USB_CoreReset>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	e01a      	b.n	800516c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa96 	bl	8005674 <USB_CoreReset>
 8005148:	4603      	mov	r3, r0
 800514a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800514c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
 800515e:	e005      	b.n	800516c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	2b01      	cmp	r3, #1
 8005170:	d10b      	bne.n	800518a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f043 0206 	orr.w	r2, r3, #6
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f043 0220 	orr.w	r2, r3, #32
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005196:	b004      	add	sp, #16
 8005198:	4770      	bx	lr

0800519a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d115      	bne.n	800520a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051ea:	2001      	movs	r0, #1
 80051ec:	f7fc fec2 	bl	8001f74 <HAL_Delay>
      ms++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa2e 	bl	8005658 <USB_GetMode>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d01e      	beq.n	8005240 <USB_SetCurrentMode+0x84>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b31      	cmp	r3, #49	; 0x31
 8005206:	d9f0      	bls.n	80051ea <USB_SetCurrentMode+0x2e>
 8005208:	e01a      	b.n	8005240 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d115      	bne.n	800523c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800521c:	2001      	movs	r0, #1
 800521e:	f7fc fea9 	bl	8001f74 <HAL_Delay>
      ms++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa15 	bl	8005658 <USB_GetMode>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <USB_SetCurrentMode+0x84>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b31      	cmp	r3, #49	; 0x31
 8005238:	d9f0      	bls.n	800521c <USB_SetCurrentMode+0x60>
 800523a:	e001      	b.n	8005240 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e005      	b.n	800524c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b32      	cmp	r3, #50	; 0x32
 8005244:	d101      	bne.n	800524a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005254:	b084      	sub	sp, #16
 8005256:	b580      	push	{r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e009      	b.n	8005288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3340      	adds	r3, #64	; 0x40
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	2200      	movs	r2, #0
 8005280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3301      	adds	r3, #1
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0e      	cmp	r3, #14
 800528c:	d9f2      	bls.n	8005274 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800528e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d11c      	bne.n	80052ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
 80052cc:	e00b      	b.n	80052e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ec:	461a      	mov	r2, r3
 80052ee:	2300      	movs	r3, #0
 80052f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	4619      	mov	r1, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	461a      	mov	r2, r3
 8005302:	680b      	ldr	r3, [r1, #0]
 8005304:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	2b01      	cmp	r3, #1
 800530a:	d10c      	bne.n	8005326 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005312:	2100      	movs	r1, #0
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f965 	bl	80055e4 <USB_SetDevSpeed>
 800531a:	e008      	b.n	800532e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800531c:	2101      	movs	r1, #1
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f960 	bl	80055e4 <USB_SetDevSpeed>
 8005324:	e003      	b.n	800532e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005326:	2103      	movs	r1, #3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f95b 	bl	80055e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800532e:	2110      	movs	r1, #16
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f8f3 	bl	800551c <USB_FlushTxFifo>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f91f 	bl	8005584 <USB_FlushRxFifo>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	461a      	mov	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	461a      	mov	r2, r3
 8005370:	2300      	movs	r3, #0
 8005372:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e043      	b.n	8005402 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800538c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005390:	d118      	bne.n	80053c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	461a      	mov	r2, r3
 80053a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e013      	b.n	80053d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	461a      	mov	r2, r3
 80053bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e008      	b.n	80053d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	2300      	movs	r3, #0
 80053d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3301      	adds	r3, #1
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d3b7      	bcc.n	800537a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	e043      	b.n	8005498 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005426:	d118      	bne.n	800545a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e013      	b.n	800546c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	461a      	mov	r2, r3
 8005452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e008      	b.n	800546c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	461a      	mov	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	461a      	mov	r2, r3
 800548c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3301      	adds	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d3b7      	bcc.n	8005410 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f043 0210 	orr.w	r2, r3, #16
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <USB_DevInit+0x2c4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f043 0208 	orr.w	r2, r3, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d107      	bne.n	8005508 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005500:	f043 0304 	orr.w	r3, r3, #4
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005514:	b004      	add	sp, #16
 8005516:	4770      	bx	lr
 8005518:	803c3800 	.word	0x803c3800

0800551c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3301      	adds	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a13      	ldr	r2, [pc, #76]	; (8005580 <USB_FlushTxFifo+0x64>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d901      	bls.n	800553c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e01b      	b.n	8005574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	daf2      	bge.n	800552a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	019b      	lsls	r3, r3, #6
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a08      	ldr	r2, [pc, #32]	; (8005580 <USB_FlushTxFifo+0x64>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e006      	b.n	8005574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b20      	cmp	r3, #32
 8005570:	d0f0      	beq.n	8005554 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	00030d40 	.word	0x00030d40

08005584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3301      	adds	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a11      	ldr	r2, [pc, #68]	; (80055e0 <USB_FlushRxFifo+0x5c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e018      	b.n	80055d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	daf2      	bge.n	8005590 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2210      	movs	r2, #16
 80055b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <USB_FlushRxFifo+0x5c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e006      	b.n	80055d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d0f0      	beq.n	80055b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	00030d40 	.word	0x00030d40

080055e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005604:	4313      	orrs	r3, r2
 8005606:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005630:	f023 0303 	bic.w	r3, r3, #3
 8005634:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0301 	and.w	r3, r3, #1
}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3301      	adds	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <USB_CoreReset+0x64>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e01b      	b.n	80056ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	daf2      	bge.n	8005680 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <USB_CoreReset+0x64>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e006      	b.n	80056ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d0f0      	beq.n	80056aa <USB_CoreReset+0x36>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	00030d40 	.word	0x00030d40

080056dc <__cvt>:
 80056dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e0:	ec55 4b10 	vmov	r4, r5, d0
 80056e4:	2d00      	cmp	r5, #0
 80056e6:	460e      	mov	r6, r1
 80056e8:	4619      	mov	r1, r3
 80056ea:	462b      	mov	r3, r5
 80056ec:	bfbb      	ittet	lt
 80056ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056f2:	461d      	movlt	r5, r3
 80056f4:	2300      	movge	r3, #0
 80056f6:	232d      	movlt	r3, #45	; 0x2d
 80056f8:	700b      	strb	r3, [r1, #0]
 80056fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005700:	4691      	mov	r9, r2
 8005702:	f023 0820 	bic.w	r8, r3, #32
 8005706:	bfbc      	itt	lt
 8005708:	4622      	movlt	r2, r4
 800570a:	4614      	movlt	r4, r2
 800570c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005710:	d005      	beq.n	800571e <__cvt+0x42>
 8005712:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005716:	d100      	bne.n	800571a <__cvt+0x3e>
 8005718:	3601      	adds	r6, #1
 800571a:	2102      	movs	r1, #2
 800571c:	e000      	b.n	8005720 <__cvt+0x44>
 800571e:	2103      	movs	r1, #3
 8005720:	ab03      	add	r3, sp, #12
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	ab02      	add	r3, sp, #8
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	ec45 4b10 	vmov	d0, r4, r5
 800572c:	4653      	mov	r3, sl
 800572e:	4632      	mov	r2, r6
 8005730:	f000 ff6a 	bl	8006608 <_dtoa_r>
 8005734:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005738:	4607      	mov	r7, r0
 800573a:	d102      	bne.n	8005742 <__cvt+0x66>
 800573c:	f019 0f01 	tst.w	r9, #1
 8005740:	d022      	beq.n	8005788 <__cvt+0xac>
 8005742:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005746:	eb07 0906 	add.w	r9, r7, r6
 800574a:	d110      	bne.n	800576e <__cvt+0x92>
 800574c:	783b      	ldrb	r3, [r7, #0]
 800574e:	2b30      	cmp	r3, #48	; 0x30
 8005750:	d10a      	bne.n	8005768 <__cvt+0x8c>
 8005752:	2200      	movs	r2, #0
 8005754:	2300      	movs	r3, #0
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fb f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800575e:	b918      	cbnz	r0, 8005768 <__cvt+0x8c>
 8005760:	f1c6 0601 	rsb	r6, r6, #1
 8005764:	f8ca 6000 	str.w	r6, [sl]
 8005768:	f8da 3000 	ldr.w	r3, [sl]
 800576c:	4499      	add	r9, r3
 800576e:	2200      	movs	r2, #0
 8005770:	2300      	movs	r3, #0
 8005772:	4620      	mov	r0, r4
 8005774:	4629      	mov	r1, r5
 8005776:	f7fb f9b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800577a:	b108      	cbz	r0, 8005780 <__cvt+0xa4>
 800577c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005780:	2230      	movs	r2, #48	; 0x30
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	454b      	cmp	r3, r9
 8005786:	d307      	bcc.n	8005798 <__cvt+0xbc>
 8005788:	9b03      	ldr	r3, [sp, #12]
 800578a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800578c:	1bdb      	subs	r3, r3, r7
 800578e:	4638      	mov	r0, r7
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	b004      	add	sp, #16
 8005794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	9103      	str	r1, [sp, #12]
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	e7f0      	b.n	8005782 <__cvt+0xa6>

080057a0 <__exponent>:
 80057a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057a2:	4603      	mov	r3, r0
 80057a4:	2900      	cmp	r1, #0
 80057a6:	bfb8      	it	lt
 80057a8:	4249      	neglt	r1, r1
 80057aa:	f803 2b02 	strb.w	r2, [r3], #2
 80057ae:	bfb4      	ite	lt
 80057b0:	222d      	movlt	r2, #45	; 0x2d
 80057b2:	222b      	movge	r2, #43	; 0x2b
 80057b4:	2909      	cmp	r1, #9
 80057b6:	7042      	strb	r2, [r0, #1]
 80057b8:	dd2a      	ble.n	8005810 <__exponent+0x70>
 80057ba:	f10d 0207 	add.w	r2, sp, #7
 80057be:	4617      	mov	r7, r2
 80057c0:	260a      	movs	r6, #10
 80057c2:	4694      	mov	ip, r2
 80057c4:	fb91 f5f6 	sdiv	r5, r1, r6
 80057c8:	fb06 1415 	mls	r4, r6, r5, r1
 80057cc:	3430      	adds	r4, #48	; 0x30
 80057ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80057d2:	460c      	mov	r4, r1
 80057d4:	2c63      	cmp	r4, #99	; 0x63
 80057d6:	f102 32ff 	add.w	r2, r2, #4294967295
 80057da:	4629      	mov	r1, r5
 80057dc:	dcf1      	bgt.n	80057c2 <__exponent+0x22>
 80057de:	3130      	adds	r1, #48	; 0x30
 80057e0:	f1ac 0402 	sub.w	r4, ip, #2
 80057e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057e8:	1c41      	adds	r1, r0, #1
 80057ea:	4622      	mov	r2, r4
 80057ec:	42ba      	cmp	r2, r7
 80057ee:	d30a      	bcc.n	8005806 <__exponent+0x66>
 80057f0:	f10d 0209 	add.w	r2, sp, #9
 80057f4:	eba2 020c 	sub.w	r2, r2, ip
 80057f8:	42bc      	cmp	r4, r7
 80057fa:	bf88      	it	hi
 80057fc:	2200      	movhi	r2, #0
 80057fe:	4413      	add	r3, r2
 8005800:	1a18      	subs	r0, r3, r0
 8005802:	b003      	add	sp, #12
 8005804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005806:	f812 5b01 	ldrb.w	r5, [r2], #1
 800580a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800580e:	e7ed      	b.n	80057ec <__exponent+0x4c>
 8005810:	2330      	movs	r3, #48	; 0x30
 8005812:	3130      	adds	r1, #48	; 0x30
 8005814:	7083      	strb	r3, [r0, #2]
 8005816:	70c1      	strb	r1, [r0, #3]
 8005818:	1d03      	adds	r3, r0, #4
 800581a:	e7f1      	b.n	8005800 <__exponent+0x60>

0800581c <_printf_float>:
 800581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005820:	ed2d 8b02 	vpush	{d8}
 8005824:	b08d      	sub	sp, #52	; 0x34
 8005826:	460c      	mov	r4, r1
 8005828:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800582c:	4616      	mov	r6, r2
 800582e:	461f      	mov	r7, r3
 8005830:	4605      	mov	r5, r0
 8005832:	f000 fde9 	bl	8006408 <_localeconv_r>
 8005836:	f8d0 a000 	ldr.w	sl, [r0]
 800583a:	4650      	mov	r0, sl
 800583c:	f7fa fd28 	bl	8000290 <strlen>
 8005840:	2300      	movs	r3, #0
 8005842:	930a      	str	r3, [sp, #40]	; 0x28
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	9305      	str	r3, [sp, #20]
 8005848:	f8d8 3000 	ldr.w	r3, [r8]
 800584c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005850:	3307      	adds	r3, #7
 8005852:	f023 0307 	bic.w	r3, r3, #7
 8005856:	f103 0208 	add.w	r2, r3, #8
 800585a:	f8c8 2000 	str.w	r2, [r8]
 800585e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005866:	9307      	str	r3, [sp, #28]
 8005868:	f8cd 8018 	str.w	r8, [sp, #24]
 800586c:	ee08 0a10 	vmov	s16, r0
 8005870:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005878:	4b9e      	ldr	r3, [pc, #632]	; (8005af4 <_printf_float+0x2d8>)
 800587a:	f04f 32ff 	mov.w	r2, #4294967295
 800587e:	f7fb f965 	bl	8000b4c <__aeabi_dcmpun>
 8005882:	bb88      	cbnz	r0, 80058e8 <_printf_float+0xcc>
 8005884:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005888:	4b9a      	ldr	r3, [pc, #616]	; (8005af4 <_printf_float+0x2d8>)
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	f7fb f93f 	bl	8000b10 <__aeabi_dcmple>
 8005892:	bb48      	cbnz	r0, 80058e8 <_printf_float+0xcc>
 8005894:	2200      	movs	r2, #0
 8005896:	2300      	movs	r3, #0
 8005898:	4640      	mov	r0, r8
 800589a:	4649      	mov	r1, r9
 800589c:	f7fb f92e 	bl	8000afc <__aeabi_dcmplt>
 80058a0:	b110      	cbz	r0, 80058a8 <_printf_float+0x8c>
 80058a2:	232d      	movs	r3, #45	; 0x2d
 80058a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a8:	4a93      	ldr	r2, [pc, #588]	; (8005af8 <_printf_float+0x2dc>)
 80058aa:	4b94      	ldr	r3, [pc, #592]	; (8005afc <_printf_float+0x2e0>)
 80058ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80058b0:	bf94      	ite	ls
 80058b2:	4690      	movls	r8, r2
 80058b4:	4698      	movhi	r8, r3
 80058b6:	2303      	movs	r3, #3
 80058b8:	6123      	str	r3, [r4, #16]
 80058ba:	9b05      	ldr	r3, [sp, #20]
 80058bc:	f023 0304 	bic.w	r3, r3, #4
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	f04f 0900 	mov.w	r9, #0
 80058c6:	9700      	str	r7, [sp, #0]
 80058c8:	4633      	mov	r3, r6
 80058ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80058cc:	4621      	mov	r1, r4
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 f9da 	bl	8005c88 <_printf_common>
 80058d4:	3001      	adds	r0, #1
 80058d6:	f040 8090 	bne.w	80059fa <_printf_float+0x1de>
 80058da:	f04f 30ff 	mov.w	r0, #4294967295
 80058de:	b00d      	add	sp, #52	; 0x34
 80058e0:	ecbd 8b02 	vpop	{d8}
 80058e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	4640      	mov	r0, r8
 80058ee:	4649      	mov	r1, r9
 80058f0:	f7fb f92c 	bl	8000b4c <__aeabi_dcmpun>
 80058f4:	b140      	cbz	r0, 8005908 <_printf_float+0xec>
 80058f6:	464b      	mov	r3, r9
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfbc      	itt	lt
 80058fc:	232d      	movlt	r3, #45	; 0x2d
 80058fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005902:	4a7f      	ldr	r2, [pc, #508]	; (8005b00 <_printf_float+0x2e4>)
 8005904:	4b7f      	ldr	r3, [pc, #508]	; (8005b04 <_printf_float+0x2e8>)
 8005906:	e7d1      	b.n	80058ac <_printf_float+0x90>
 8005908:	6863      	ldr	r3, [r4, #4]
 800590a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800590e:	9206      	str	r2, [sp, #24]
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	d13f      	bne.n	8005994 <_printf_float+0x178>
 8005914:	2306      	movs	r3, #6
 8005916:	6063      	str	r3, [r4, #4]
 8005918:	9b05      	ldr	r3, [sp, #20]
 800591a:	6861      	ldr	r1, [r4, #4]
 800591c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005920:	2300      	movs	r3, #0
 8005922:	9303      	str	r3, [sp, #12]
 8005924:	ab0a      	add	r3, sp, #40	; 0x28
 8005926:	e9cd b301 	strd	fp, r3, [sp, #4]
 800592a:	ab09      	add	r3, sp, #36	; 0x24
 800592c:	ec49 8b10 	vmov	d0, r8, r9
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6022      	str	r2, [r4, #0]
 8005934:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005938:	4628      	mov	r0, r5
 800593a:	f7ff fecf 	bl	80056dc <__cvt>
 800593e:	9b06      	ldr	r3, [sp, #24]
 8005940:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005942:	2b47      	cmp	r3, #71	; 0x47
 8005944:	4680      	mov	r8, r0
 8005946:	d108      	bne.n	800595a <_printf_float+0x13e>
 8005948:	1cc8      	adds	r0, r1, #3
 800594a:	db02      	blt.n	8005952 <_printf_float+0x136>
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	4299      	cmp	r1, r3
 8005950:	dd41      	ble.n	80059d6 <_printf_float+0x1ba>
 8005952:	f1ab 0302 	sub.w	r3, fp, #2
 8005956:	fa5f fb83 	uxtb.w	fp, r3
 800595a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800595e:	d820      	bhi.n	80059a2 <_printf_float+0x186>
 8005960:	3901      	subs	r1, #1
 8005962:	465a      	mov	r2, fp
 8005964:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005968:	9109      	str	r1, [sp, #36]	; 0x24
 800596a:	f7ff ff19 	bl	80057a0 <__exponent>
 800596e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005970:	1813      	adds	r3, r2, r0
 8005972:	2a01      	cmp	r2, #1
 8005974:	4681      	mov	r9, r0
 8005976:	6123      	str	r3, [r4, #16]
 8005978:	dc02      	bgt.n	8005980 <_printf_float+0x164>
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	07d2      	lsls	r2, r2, #31
 800597e:	d501      	bpl.n	8005984 <_printf_float+0x168>
 8005980:	3301      	adds	r3, #1
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005988:	2b00      	cmp	r3, #0
 800598a:	d09c      	beq.n	80058c6 <_printf_float+0xaa>
 800598c:	232d      	movs	r3, #45	; 0x2d
 800598e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005992:	e798      	b.n	80058c6 <_printf_float+0xaa>
 8005994:	9a06      	ldr	r2, [sp, #24]
 8005996:	2a47      	cmp	r2, #71	; 0x47
 8005998:	d1be      	bne.n	8005918 <_printf_float+0xfc>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1bc      	bne.n	8005918 <_printf_float+0xfc>
 800599e:	2301      	movs	r3, #1
 80059a0:	e7b9      	b.n	8005916 <_printf_float+0xfa>
 80059a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80059a6:	d118      	bne.n	80059da <_printf_float+0x1be>
 80059a8:	2900      	cmp	r1, #0
 80059aa:	6863      	ldr	r3, [r4, #4]
 80059ac:	dd0b      	ble.n	80059c6 <_printf_float+0x1aa>
 80059ae:	6121      	str	r1, [r4, #16]
 80059b0:	b913      	cbnz	r3, 80059b8 <_printf_float+0x19c>
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	07d0      	lsls	r0, r2, #31
 80059b6:	d502      	bpl.n	80059be <_printf_float+0x1a2>
 80059b8:	3301      	adds	r3, #1
 80059ba:	440b      	add	r3, r1
 80059bc:	6123      	str	r3, [r4, #16]
 80059be:	65a1      	str	r1, [r4, #88]	; 0x58
 80059c0:	f04f 0900 	mov.w	r9, #0
 80059c4:	e7de      	b.n	8005984 <_printf_float+0x168>
 80059c6:	b913      	cbnz	r3, 80059ce <_printf_float+0x1b2>
 80059c8:	6822      	ldr	r2, [r4, #0]
 80059ca:	07d2      	lsls	r2, r2, #31
 80059cc:	d501      	bpl.n	80059d2 <_printf_float+0x1b6>
 80059ce:	3302      	adds	r3, #2
 80059d0:	e7f4      	b.n	80059bc <_printf_float+0x1a0>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e7f2      	b.n	80059bc <_printf_float+0x1a0>
 80059d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059dc:	4299      	cmp	r1, r3
 80059de:	db05      	blt.n	80059ec <_printf_float+0x1d0>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	6121      	str	r1, [r4, #16]
 80059e4:	07d8      	lsls	r0, r3, #31
 80059e6:	d5ea      	bpl.n	80059be <_printf_float+0x1a2>
 80059e8:	1c4b      	adds	r3, r1, #1
 80059ea:	e7e7      	b.n	80059bc <_printf_float+0x1a0>
 80059ec:	2900      	cmp	r1, #0
 80059ee:	bfd4      	ite	le
 80059f0:	f1c1 0202 	rsble	r2, r1, #2
 80059f4:	2201      	movgt	r2, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	e7e0      	b.n	80059bc <_printf_float+0x1a0>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	055a      	lsls	r2, r3, #21
 80059fe:	d407      	bmi.n	8005a10 <_printf_float+0x1f4>
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	4642      	mov	r2, r8
 8005a04:	4631      	mov	r1, r6
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b8      	blx	r7
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d12c      	bne.n	8005a68 <_printf_float+0x24c>
 8005a0e:	e764      	b.n	80058da <_printf_float+0xbe>
 8005a10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a14:	f240 80e0 	bls.w	8005bd8 <_printf_float+0x3bc>
 8005a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f7fb f862 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d034      	beq.n	8005a92 <_printf_float+0x276>
 8005a28:	4a37      	ldr	r2, [pc, #220]	; (8005b08 <_printf_float+0x2ec>)
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b8      	blx	r7
 8005a32:	3001      	adds	r0, #1
 8005a34:	f43f af51 	beq.w	80058da <_printf_float+0xbe>
 8005a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	db02      	blt.n	8005a46 <_printf_float+0x22a>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	07d8      	lsls	r0, r3, #31
 8005a44:	d510      	bpl.n	8005a68 <_printf_float+0x24c>
 8005a46:	ee18 3a10 	vmov	r3, s16
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f af41 	beq.w	80058da <_printf_float+0xbe>
 8005a58:	f04f 0800 	mov.w	r8, #0
 8005a5c:	f104 091a 	add.w	r9, r4, #26
 8005a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a62:	3b01      	subs	r3, #1
 8005a64:	4543      	cmp	r3, r8
 8005a66:	dc09      	bgt.n	8005a7c <_printf_float+0x260>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	079b      	lsls	r3, r3, #30
 8005a6c:	f100 8107 	bmi.w	8005c7e <_printf_float+0x462>
 8005a70:	68e0      	ldr	r0, [r4, #12]
 8005a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a74:	4298      	cmp	r0, r3
 8005a76:	bfb8      	it	lt
 8005a78:	4618      	movlt	r0, r3
 8005a7a:	e730      	b.n	80058de <_printf_float+0xc2>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	464a      	mov	r2, r9
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	f43f af27 	beq.w	80058da <_printf_float+0xbe>
 8005a8c:	f108 0801 	add.w	r8, r8, #1
 8005a90:	e7e6      	b.n	8005a60 <_printf_float+0x244>
 8005a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dc39      	bgt.n	8005b0c <_printf_float+0x2f0>
 8005a98:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <_printf_float+0x2ec>)
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	f43f af19 	beq.w	80058da <_printf_float+0xbe>
 8005aa8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005aac:	4313      	orrs	r3, r2
 8005aae:	d102      	bne.n	8005ab6 <_printf_float+0x29a>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	07d9      	lsls	r1, r3, #31
 8005ab4:	d5d8      	bpl.n	8005a68 <_printf_float+0x24c>
 8005ab6:	ee18 3a10 	vmov	r3, s16
 8005aba:	4652      	mov	r2, sl
 8005abc:	4631      	mov	r1, r6
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f af09 	beq.w	80058da <_printf_float+0xbe>
 8005ac8:	f04f 0900 	mov.w	r9, #0
 8005acc:	f104 0a1a 	add.w	sl, r4, #26
 8005ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad2:	425b      	negs	r3, r3
 8005ad4:	454b      	cmp	r3, r9
 8005ad6:	dc01      	bgt.n	8005adc <_printf_float+0x2c0>
 8005ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ada:	e792      	b.n	8005a02 <_printf_float+0x1e6>
 8005adc:	2301      	movs	r3, #1
 8005ade:	4652      	mov	r2, sl
 8005ae0:	4631      	mov	r1, r6
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	47b8      	blx	r7
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	f43f aef7 	beq.w	80058da <_printf_float+0xbe>
 8005aec:	f109 0901 	add.w	r9, r9, #1
 8005af0:	e7ee      	b.n	8005ad0 <_printf_float+0x2b4>
 8005af2:	bf00      	nop
 8005af4:	7fefffff 	.word	0x7fefffff
 8005af8:	08008520 	.word	0x08008520
 8005afc:	08008524 	.word	0x08008524
 8005b00:	08008528 	.word	0x08008528
 8005b04:	0800852c 	.word	0x0800852c
 8005b08:	08008530 	.word	0x08008530
 8005b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b10:	429a      	cmp	r2, r3
 8005b12:	bfa8      	it	ge
 8005b14:	461a      	movge	r2, r3
 8005b16:	2a00      	cmp	r2, #0
 8005b18:	4691      	mov	r9, r2
 8005b1a:	dc37      	bgt.n	8005b8c <_printf_float+0x370>
 8005b1c:	f04f 0b00 	mov.w	fp, #0
 8005b20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b24:	f104 021a 	add.w	r2, r4, #26
 8005b28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b2a:	9305      	str	r3, [sp, #20]
 8005b2c:	eba3 0309 	sub.w	r3, r3, r9
 8005b30:	455b      	cmp	r3, fp
 8005b32:	dc33      	bgt.n	8005b9c <_printf_float+0x380>
 8005b34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	db3b      	blt.n	8005bb4 <_printf_float+0x398>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	07da      	lsls	r2, r3, #31
 8005b40:	d438      	bmi.n	8005bb4 <_printf_float+0x398>
 8005b42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005b46:	eba2 0903 	sub.w	r9, r2, r3
 8005b4a:	9b05      	ldr	r3, [sp, #20]
 8005b4c:	1ad2      	subs	r2, r2, r3
 8005b4e:	4591      	cmp	r9, r2
 8005b50:	bfa8      	it	ge
 8005b52:	4691      	movge	r9, r2
 8005b54:	f1b9 0f00 	cmp.w	r9, #0
 8005b58:	dc35      	bgt.n	8005bc6 <_printf_float+0x3aa>
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b62:	f104 0a1a 	add.w	sl, r4, #26
 8005b66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	eba3 0309 	sub.w	r3, r3, r9
 8005b70:	4543      	cmp	r3, r8
 8005b72:	f77f af79 	ble.w	8005a68 <_printf_float+0x24c>
 8005b76:	2301      	movs	r3, #1
 8005b78:	4652      	mov	r2, sl
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b8      	blx	r7
 8005b80:	3001      	adds	r0, #1
 8005b82:	f43f aeaa 	beq.w	80058da <_printf_float+0xbe>
 8005b86:	f108 0801 	add.w	r8, r8, #1
 8005b8a:	e7ec      	b.n	8005b66 <_printf_float+0x34a>
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4642      	mov	r2, r8
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d1c0      	bne.n	8005b1c <_printf_float+0x300>
 8005b9a:	e69e      	b.n	80058da <_printf_float+0xbe>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	9205      	str	r2, [sp, #20]
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f43f ae97 	beq.w	80058da <_printf_float+0xbe>
 8005bac:	9a05      	ldr	r2, [sp, #20]
 8005bae:	f10b 0b01 	add.w	fp, fp, #1
 8005bb2:	e7b9      	b.n	8005b28 <_printf_float+0x30c>
 8005bb4:	ee18 3a10 	vmov	r3, s16
 8005bb8:	4652      	mov	r2, sl
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b8      	blx	r7
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d1be      	bne.n	8005b42 <_printf_float+0x326>
 8005bc4:	e689      	b.n	80058da <_printf_float+0xbe>
 8005bc6:	9a05      	ldr	r2, [sp, #20]
 8005bc8:	464b      	mov	r3, r9
 8005bca:	4442      	add	r2, r8
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d1c1      	bne.n	8005b5a <_printf_float+0x33e>
 8005bd6:	e680      	b.n	80058da <_printf_float+0xbe>
 8005bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bda:	2a01      	cmp	r2, #1
 8005bdc:	dc01      	bgt.n	8005be2 <_printf_float+0x3c6>
 8005bde:	07db      	lsls	r3, r3, #31
 8005be0:	d53a      	bpl.n	8005c58 <_printf_float+0x43c>
 8005be2:	2301      	movs	r3, #1
 8005be4:	4642      	mov	r2, r8
 8005be6:	4631      	mov	r1, r6
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b8      	blx	r7
 8005bec:	3001      	adds	r0, #1
 8005bee:	f43f ae74 	beq.w	80058da <_printf_float+0xbe>
 8005bf2:	ee18 3a10 	vmov	r3, s16
 8005bf6:	4652      	mov	r2, sl
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f ae6b 	beq.w	80058da <_printf_float+0xbe>
 8005c04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005c10:	f7fa ff6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c14:	b9d8      	cbnz	r0, 8005c4e <_printf_float+0x432>
 8005c16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005c1a:	f108 0201 	add.w	r2, r8, #1
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	d10e      	bne.n	8005c46 <_printf_float+0x42a>
 8005c28:	e657      	b.n	80058da <_printf_float+0xbe>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	f43f ae50 	beq.w	80058da <_printf_float+0xbe>
 8005c3a:	f108 0801 	add.w	r8, r8, #1
 8005c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c40:	3b01      	subs	r3, #1
 8005c42:	4543      	cmp	r3, r8
 8005c44:	dcf1      	bgt.n	8005c2a <_printf_float+0x40e>
 8005c46:	464b      	mov	r3, r9
 8005c48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c4c:	e6da      	b.n	8005a04 <_printf_float+0x1e8>
 8005c4e:	f04f 0800 	mov.w	r8, #0
 8005c52:	f104 0a1a 	add.w	sl, r4, #26
 8005c56:	e7f2      	b.n	8005c3e <_printf_float+0x422>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	e7df      	b.n	8005c1e <_printf_float+0x402>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	464a      	mov	r2, r9
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f43f ae36 	beq.w	80058da <_printf_float+0xbe>
 8005c6e:	f108 0801 	add.w	r8, r8, #1
 8005c72:	68e3      	ldr	r3, [r4, #12]
 8005c74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c76:	1a5b      	subs	r3, r3, r1
 8005c78:	4543      	cmp	r3, r8
 8005c7a:	dcf0      	bgt.n	8005c5e <_printf_float+0x442>
 8005c7c:	e6f8      	b.n	8005a70 <_printf_float+0x254>
 8005c7e:	f04f 0800 	mov.w	r8, #0
 8005c82:	f104 0919 	add.w	r9, r4, #25
 8005c86:	e7f4      	b.n	8005c72 <_printf_float+0x456>

08005c88 <_printf_common>:
 8005c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	4699      	mov	r9, r3
 8005c90:	688a      	ldr	r2, [r1, #8]
 8005c92:	690b      	ldr	r3, [r1, #16]
 8005c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bfb8      	it	lt
 8005c9c:	4613      	movlt	r3, r2
 8005c9e:	6033      	str	r3, [r6, #0]
 8005ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	b10a      	cbz	r2, 8005cae <_printf_common+0x26>
 8005caa:	3301      	adds	r3, #1
 8005cac:	6033      	str	r3, [r6, #0]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	0699      	lsls	r1, r3, #26
 8005cb2:	bf42      	ittt	mi
 8005cb4:	6833      	ldrmi	r3, [r6, #0]
 8005cb6:	3302      	addmi	r3, #2
 8005cb8:	6033      	strmi	r3, [r6, #0]
 8005cba:	6825      	ldr	r5, [r4, #0]
 8005cbc:	f015 0506 	ands.w	r5, r5, #6
 8005cc0:	d106      	bne.n	8005cd0 <_printf_common+0x48>
 8005cc2:	f104 0a19 	add.w	sl, r4, #25
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	6832      	ldr	r2, [r6, #0]
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dc26      	bgt.n	8005d1e <_printf_common+0x96>
 8005cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd4:	1e13      	subs	r3, r2, #0
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	bf18      	it	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	0692      	lsls	r2, r2, #26
 8005cde:	d42b      	bmi.n	8005d38 <_printf_common+0xb0>
 8005ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	47c0      	blx	r8
 8005cea:	3001      	adds	r0, #1
 8005cec:	d01e      	beq.n	8005d2c <_printf_common+0xa4>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	6922      	ldr	r2, [r4, #16]
 8005cf2:	f003 0306 	and.w	r3, r3, #6
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	bf02      	ittt	eq
 8005cfa:	68e5      	ldreq	r5, [r4, #12]
 8005cfc:	6833      	ldreq	r3, [r6, #0]
 8005cfe:	1aed      	subeq	r5, r5, r3
 8005d00:	68a3      	ldr	r3, [r4, #8]
 8005d02:	bf0c      	ite	eq
 8005d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d08:	2500      	movne	r5, #0
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	bfc4      	itt	gt
 8005d0e:	1a9b      	subgt	r3, r3, r2
 8005d10:	18ed      	addgt	r5, r5, r3
 8005d12:	2600      	movs	r6, #0
 8005d14:	341a      	adds	r4, #26
 8005d16:	42b5      	cmp	r5, r6
 8005d18:	d11a      	bne.n	8005d50 <_printf_common+0xc8>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e008      	b.n	8005d30 <_printf_common+0xa8>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4652      	mov	r2, sl
 8005d22:	4649      	mov	r1, r9
 8005d24:	4638      	mov	r0, r7
 8005d26:	47c0      	blx	r8
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d103      	bne.n	8005d34 <_printf_common+0xac>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d34:	3501      	adds	r5, #1
 8005d36:	e7c6      	b.n	8005cc6 <_printf_common+0x3e>
 8005d38:	18e1      	adds	r1, r4, r3
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	2030      	movs	r0, #48	; 0x30
 8005d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d42:	4422      	add	r2, r4
 8005d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	e7c7      	b.n	8005ce0 <_printf_common+0x58>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4622      	mov	r2, r4
 8005d54:	4649      	mov	r1, r9
 8005d56:	4638      	mov	r0, r7
 8005d58:	47c0      	blx	r8
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d0e6      	beq.n	8005d2c <_printf_common+0xa4>
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7d9      	b.n	8005d16 <_printf_common+0x8e>
	...

08005d64 <_printf_i>:
 8005d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	7e0f      	ldrb	r7, [r1, #24]
 8005d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d6c:	2f78      	cmp	r7, #120	; 0x78
 8005d6e:	4691      	mov	r9, r2
 8005d70:	4680      	mov	r8, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	469a      	mov	sl, r3
 8005d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d7a:	d807      	bhi.n	8005d8c <_printf_i+0x28>
 8005d7c:	2f62      	cmp	r7, #98	; 0x62
 8005d7e:	d80a      	bhi.n	8005d96 <_printf_i+0x32>
 8005d80:	2f00      	cmp	r7, #0
 8005d82:	f000 80d4 	beq.w	8005f2e <_printf_i+0x1ca>
 8005d86:	2f58      	cmp	r7, #88	; 0x58
 8005d88:	f000 80c0 	beq.w	8005f0c <_printf_i+0x1a8>
 8005d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d94:	e03a      	b.n	8005e0c <_printf_i+0xa8>
 8005d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d9a:	2b15      	cmp	r3, #21
 8005d9c:	d8f6      	bhi.n	8005d8c <_printf_i+0x28>
 8005d9e:	a101      	add	r1, pc, #4	; (adr r1, 8005da4 <_printf_i+0x40>)
 8005da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005da4:	08005dfd 	.word	0x08005dfd
 8005da8:	08005e11 	.word	0x08005e11
 8005dac:	08005d8d 	.word	0x08005d8d
 8005db0:	08005d8d 	.word	0x08005d8d
 8005db4:	08005d8d 	.word	0x08005d8d
 8005db8:	08005d8d 	.word	0x08005d8d
 8005dbc:	08005e11 	.word	0x08005e11
 8005dc0:	08005d8d 	.word	0x08005d8d
 8005dc4:	08005d8d 	.word	0x08005d8d
 8005dc8:	08005d8d 	.word	0x08005d8d
 8005dcc:	08005d8d 	.word	0x08005d8d
 8005dd0:	08005f15 	.word	0x08005f15
 8005dd4:	08005e3d 	.word	0x08005e3d
 8005dd8:	08005ecf 	.word	0x08005ecf
 8005ddc:	08005d8d 	.word	0x08005d8d
 8005de0:	08005d8d 	.word	0x08005d8d
 8005de4:	08005f37 	.word	0x08005f37
 8005de8:	08005d8d 	.word	0x08005d8d
 8005dec:	08005e3d 	.word	0x08005e3d
 8005df0:	08005d8d 	.word	0x08005d8d
 8005df4:	08005d8d 	.word	0x08005d8d
 8005df8:	08005ed7 	.word	0x08005ed7
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	1d1a      	adds	r2, r3, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	602a      	str	r2, [r5, #0]
 8005e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e09f      	b.n	8005f50 <_printf_i+0x1ec>
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	682b      	ldr	r3, [r5, #0]
 8005e14:	0607      	lsls	r7, r0, #24
 8005e16:	f103 0104 	add.w	r1, r3, #4
 8005e1a:	6029      	str	r1, [r5, #0]
 8005e1c:	d501      	bpl.n	8005e22 <_printf_i+0xbe>
 8005e1e:	681e      	ldr	r6, [r3, #0]
 8005e20:	e003      	b.n	8005e2a <_printf_i+0xc6>
 8005e22:	0646      	lsls	r6, r0, #25
 8005e24:	d5fb      	bpl.n	8005e1e <_printf_i+0xba>
 8005e26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	da03      	bge.n	8005e36 <_printf_i+0xd2>
 8005e2e:	232d      	movs	r3, #45	; 0x2d
 8005e30:	4276      	negs	r6, r6
 8005e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e36:	485a      	ldr	r0, [pc, #360]	; (8005fa0 <_printf_i+0x23c>)
 8005e38:	230a      	movs	r3, #10
 8005e3a:	e012      	b.n	8005e62 <_printf_i+0xfe>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	6820      	ldr	r0, [r4, #0]
 8005e40:	1d19      	adds	r1, r3, #4
 8005e42:	6029      	str	r1, [r5, #0]
 8005e44:	0605      	lsls	r5, r0, #24
 8005e46:	d501      	bpl.n	8005e4c <_printf_i+0xe8>
 8005e48:	681e      	ldr	r6, [r3, #0]
 8005e4a:	e002      	b.n	8005e52 <_printf_i+0xee>
 8005e4c:	0641      	lsls	r1, r0, #25
 8005e4e:	d5fb      	bpl.n	8005e48 <_printf_i+0xe4>
 8005e50:	881e      	ldrh	r6, [r3, #0]
 8005e52:	4853      	ldr	r0, [pc, #332]	; (8005fa0 <_printf_i+0x23c>)
 8005e54:	2f6f      	cmp	r7, #111	; 0x6f
 8005e56:	bf0c      	ite	eq
 8005e58:	2308      	moveq	r3, #8
 8005e5a:	230a      	movne	r3, #10
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e62:	6865      	ldr	r5, [r4, #4]
 8005e64:	60a5      	str	r5, [r4, #8]
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	bfa2      	ittt	ge
 8005e6a:	6821      	ldrge	r1, [r4, #0]
 8005e6c:	f021 0104 	bicge.w	r1, r1, #4
 8005e70:	6021      	strge	r1, [r4, #0]
 8005e72:	b90e      	cbnz	r6, 8005e78 <_printf_i+0x114>
 8005e74:	2d00      	cmp	r5, #0
 8005e76:	d04b      	beq.n	8005f10 <_printf_i+0x1ac>
 8005e78:	4615      	mov	r5, r2
 8005e7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e7e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e82:	5dc7      	ldrb	r7, [r0, r7]
 8005e84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e88:	4637      	mov	r7, r6
 8005e8a:	42bb      	cmp	r3, r7
 8005e8c:	460e      	mov	r6, r1
 8005e8e:	d9f4      	bls.n	8005e7a <_printf_i+0x116>
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d10b      	bne.n	8005eac <_printf_i+0x148>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	07de      	lsls	r6, r3, #31
 8005e98:	d508      	bpl.n	8005eac <_printf_i+0x148>
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	6861      	ldr	r1, [r4, #4]
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	bfde      	ittt	le
 8005ea2:	2330      	movle	r3, #48	; 0x30
 8005ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eac:	1b52      	subs	r2, r2, r5
 8005eae:	6122      	str	r2, [r4, #16]
 8005eb0:	f8cd a000 	str.w	sl, [sp]
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	aa03      	add	r2, sp, #12
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4640      	mov	r0, r8
 8005ebc:	f7ff fee4 	bl	8005c88 <_printf_common>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d14a      	bne.n	8005f5a <_printf_i+0x1f6>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	b004      	add	sp, #16
 8005eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	f043 0320 	orr.w	r3, r3, #32
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	4833      	ldr	r0, [pc, #204]	; (8005fa4 <_printf_i+0x240>)
 8005ed8:	2778      	movs	r7, #120	; 0x78
 8005eda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	6829      	ldr	r1, [r5, #0]
 8005ee2:	061f      	lsls	r7, r3, #24
 8005ee4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ee8:	d402      	bmi.n	8005ef0 <_printf_i+0x18c>
 8005eea:	065f      	lsls	r7, r3, #25
 8005eec:	bf48      	it	mi
 8005eee:	b2b6      	uxthmi	r6, r6
 8005ef0:	07df      	lsls	r7, r3, #31
 8005ef2:	bf48      	it	mi
 8005ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ef8:	6029      	str	r1, [r5, #0]
 8005efa:	bf48      	it	mi
 8005efc:	6023      	strmi	r3, [r4, #0]
 8005efe:	b91e      	cbnz	r6, 8005f08 <_printf_i+0x1a4>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	f023 0320 	bic.w	r3, r3, #32
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	2310      	movs	r3, #16
 8005f0a:	e7a7      	b.n	8005e5c <_printf_i+0xf8>
 8005f0c:	4824      	ldr	r0, [pc, #144]	; (8005fa0 <_printf_i+0x23c>)
 8005f0e:	e7e4      	b.n	8005eda <_printf_i+0x176>
 8005f10:	4615      	mov	r5, r2
 8005f12:	e7bd      	b.n	8005e90 <_printf_i+0x12c>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	6826      	ldr	r6, [r4, #0]
 8005f18:	6961      	ldr	r1, [r4, #20]
 8005f1a:	1d18      	adds	r0, r3, #4
 8005f1c:	6028      	str	r0, [r5, #0]
 8005f1e:	0635      	lsls	r5, r6, #24
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	d501      	bpl.n	8005f28 <_printf_i+0x1c4>
 8005f24:	6019      	str	r1, [r3, #0]
 8005f26:	e002      	b.n	8005f2e <_printf_i+0x1ca>
 8005f28:	0670      	lsls	r0, r6, #25
 8005f2a:	d5fb      	bpl.n	8005f24 <_printf_i+0x1c0>
 8005f2c:	8019      	strh	r1, [r3, #0]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6123      	str	r3, [r4, #16]
 8005f32:	4615      	mov	r5, r2
 8005f34:	e7bc      	b.n	8005eb0 <_printf_i+0x14c>
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	1d1a      	adds	r2, r3, #4
 8005f3a:	602a      	str	r2, [r5, #0]
 8005f3c:	681d      	ldr	r5, [r3, #0]
 8005f3e:	6862      	ldr	r2, [r4, #4]
 8005f40:	2100      	movs	r1, #0
 8005f42:	4628      	mov	r0, r5
 8005f44:	f7fa f954 	bl	80001f0 <memchr>
 8005f48:	b108      	cbz	r0, 8005f4e <_printf_i+0x1ea>
 8005f4a:	1b40      	subs	r0, r0, r5
 8005f4c:	6060      	str	r0, [r4, #4]
 8005f4e:	6863      	ldr	r3, [r4, #4]
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	2300      	movs	r3, #0
 8005f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f58:	e7aa      	b.n	8005eb0 <_printf_i+0x14c>
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	4649      	mov	r1, r9
 8005f60:	4640      	mov	r0, r8
 8005f62:	47d0      	blx	sl
 8005f64:	3001      	adds	r0, #1
 8005f66:	d0ad      	beq.n	8005ec4 <_printf_i+0x160>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	079b      	lsls	r3, r3, #30
 8005f6c:	d413      	bmi.n	8005f96 <_printf_i+0x232>
 8005f6e:	68e0      	ldr	r0, [r4, #12]
 8005f70:	9b03      	ldr	r3, [sp, #12]
 8005f72:	4298      	cmp	r0, r3
 8005f74:	bfb8      	it	lt
 8005f76:	4618      	movlt	r0, r3
 8005f78:	e7a6      	b.n	8005ec8 <_printf_i+0x164>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	4649      	mov	r1, r9
 8005f80:	4640      	mov	r0, r8
 8005f82:	47d0      	blx	sl
 8005f84:	3001      	adds	r0, #1
 8005f86:	d09d      	beq.n	8005ec4 <_printf_i+0x160>
 8005f88:	3501      	adds	r5, #1
 8005f8a:	68e3      	ldr	r3, [r4, #12]
 8005f8c:	9903      	ldr	r1, [sp, #12]
 8005f8e:	1a5b      	subs	r3, r3, r1
 8005f90:	42ab      	cmp	r3, r5
 8005f92:	dcf2      	bgt.n	8005f7a <_printf_i+0x216>
 8005f94:	e7eb      	b.n	8005f6e <_printf_i+0x20a>
 8005f96:	2500      	movs	r5, #0
 8005f98:	f104 0619 	add.w	r6, r4, #25
 8005f9c:	e7f5      	b.n	8005f8a <_printf_i+0x226>
 8005f9e:	bf00      	nop
 8005fa0:	08008532 	.word	0x08008532
 8005fa4:	08008543 	.word	0x08008543

08005fa8 <std>:
 8005fa8:	2300      	movs	r3, #0
 8005faa:	b510      	push	{r4, lr}
 8005fac:	4604      	mov	r4, r0
 8005fae:	e9c0 3300 	strd	r3, r3, [r0]
 8005fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fb6:	6083      	str	r3, [r0, #8]
 8005fb8:	8181      	strh	r1, [r0, #12]
 8005fba:	6643      	str	r3, [r0, #100]	; 0x64
 8005fbc:	81c2      	strh	r2, [r0, #14]
 8005fbe:	6183      	str	r3, [r0, #24]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	305c      	adds	r0, #92	; 0x5c
 8005fc6:	f000 fa17 	bl	80063f8 <memset>
 8005fca:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <std+0x58>)
 8005fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <std+0x5c>)
 8005fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <std+0x60>)
 8005fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <std+0x64>)
 8005fd8:	6323      	str	r3, [r4, #48]	; 0x30
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <std+0x68>)
 8005fdc:	6224      	str	r4, [r4, #32]
 8005fde:	429c      	cmp	r4, r3
 8005fe0:	d006      	beq.n	8005ff0 <std+0x48>
 8005fe2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005fe6:	4294      	cmp	r4, r2
 8005fe8:	d002      	beq.n	8005ff0 <std+0x48>
 8005fea:	33d0      	adds	r3, #208	; 0xd0
 8005fec:	429c      	cmp	r4, r3
 8005fee:	d105      	bne.n	8005ffc <std+0x54>
 8005ff0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff8:	f000 ba7a 	b.w	80064f0 <__retarget_lock_init_recursive>
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	bf00      	nop
 8006000:	08006249 	.word	0x08006249
 8006004:	0800626b 	.word	0x0800626b
 8006008:	080062a3 	.word	0x080062a3
 800600c:	080062c7 	.word	0x080062c7
 8006010:	20000a6c 	.word	0x20000a6c

08006014 <stdio_exit_handler>:
 8006014:	4a02      	ldr	r2, [pc, #8]	; (8006020 <stdio_exit_handler+0xc>)
 8006016:	4903      	ldr	r1, [pc, #12]	; (8006024 <stdio_exit_handler+0x10>)
 8006018:	4803      	ldr	r0, [pc, #12]	; (8006028 <stdio_exit_handler+0x14>)
 800601a:	f000 b869 	b.w	80060f0 <_fwalk_sglue>
 800601e:	bf00      	nop
 8006020:	2000000c 	.word	0x2000000c
 8006024:	08008129 	.word	0x08008129
 8006028:	20000018 	.word	0x20000018

0800602c <cleanup_stdio>:
 800602c:	6841      	ldr	r1, [r0, #4]
 800602e:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <cleanup_stdio+0x34>)
 8006030:	4299      	cmp	r1, r3
 8006032:	b510      	push	{r4, lr}
 8006034:	4604      	mov	r4, r0
 8006036:	d001      	beq.n	800603c <cleanup_stdio+0x10>
 8006038:	f002 f876 	bl	8008128 <_fflush_r>
 800603c:	68a1      	ldr	r1, [r4, #8]
 800603e:	4b09      	ldr	r3, [pc, #36]	; (8006064 <cleanup_stdio+0x38>)
 8006040:	4299      	cmp	r1, r3
 8006042:	d002      	beq.n	800604a <cleanup_stdio+0x1e>
 8006044:	4620      	mov	r0, r4
 8006046:	f002 f86f 	bl	8008128 <_fflush_r>
 800604a:	68e1      	ldr	r1, [r4, #12]
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <cleanup_stdio+0x3c>)
 800604e:	4299      	cmp	r1, r3
 8006050:	d004      	beq.n	800605c <cleanup_stdio+0x30>
 8006052:	4620      	mov	r0, r4
 8006054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006058:	f002 b866 	b.w	8008128 <_fflush_r>
 800605c:	bd10      	pop	{r4, pc}
 800605e:	bf00      	nop
 8006060:	20000a6c 	.word	0x20000a6c
 8006064:	20000ad4 	.word	0x20000ad4
 8006068:	20000b3c 	.word	0x20000b3c

0800606c <global_stdio_init.part.0>:
 800606c:	b510      	push	{r4, lr}
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <global_stdio_init.part.0+0x30>)
 8006070:	4c0b      	ldr	r4, [pc, #44]	; (80060a0 <global_stdio_init.part.0+0x34>)
 8006072:	4a0c      	ldr	r2, [pc, #48]	; (80060a4 <global_stdio_init.part.0+0x38>)
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	4620      	mov	r0, r4
 8006078:	2200      	movs	r2, #0
 800607a:	2104      	movs	r1, #4
 800607c:	f7ff ff94 	bl	8005fa8 <std>
 8006080:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006084:	2201      	movs	r2, #1
 8006086:	2109      	movs	r1, #9
 8006088:	f7ff ff8e 	bl	8005fa8 <std>
 800608c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006090:	2202      	movs	r2, #2
 8006092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006096:	2112      	movs	r1, #18
 8006098:	f7ff bf86 	b.w	8005fa8 <std>
 800609c:	20000ba4 	.word	0x20000ba4
 80060a0:	20000a6c 	.word	0x20000a6c
 80060a4:	08006015 	.word	0x08006015

080060a8 <__sfp_lock_acquire>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__sfp_lock_acquire+0x8>)
 80060aa:	f000 ba22 	b.w	80064f2 <__retarget_lock_acquire_recursive>
 80060ae:	bf00      	nop
 80060b0:	20000bad 	.word	0x20000bad

080060b4 <__sfp_lock_release>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__sfp_lock_release+0x8>)
 80060b6:	f000 ba1d 	b.w	80064f4 <__retarget_lock_release_recursive>
 80060ba:	bf00      	nop
 80060bc:	20000bad 	.word	0x20000bad

080060c0 <__sinit>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	4604      	mov	r4, r0
 80060c4:	f7ff fff0 	bl	80060a8 <__sfp_lock_acquire>
 80060c8:	6a23      	ldr	r3, [r4, #32]
 80060ca:	b11b      	cbz	r3, 80060d4 <__sinit+0x14>
 80060cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d0:	f7ff bff0 	b.w	80060b4 <__sfp_lock_release>
 80060d4:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <__sinit+0x28>)
 80060d6:	6223      	str	r3, [r4, #32]
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <__sinit+0x2c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1f5      	bne.n	80060cc <__sinit+0xc>
 80060e0:	f7ff ffc4 	bl	800606c <global_stdio_init.part.0>
 80060e4:	e7f2      	b.n	80060cc <__sinit+0xc>
 80060e6:	bf00      	nop
 80060e8:	0800602d 	.word	0x0800602d
 80060ec:	20000ba4 	.word	0x20000ba4

080060f0 <_fwalk_sglue>:
 80060f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f4:	4607      	mov	r7, r0
 80060f6:	4688      	mov	r8, r1
 80060f8:	4614      	mov	r4, r2
 80060fa:	2600      	movs	r6, #0
 80060fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006100:	f1b9 0901 	subs.w	r9, r9, #1
 8006104:	d505      	bpl.n	8006112 <_fwalk_sglue+0x22>
 8006106:	6824      	ldr	r4, [r4, #0]
 8006108:	2c00      	cmp	r4, #0
 800610a:	d1f7      	bne.n	80060fc <_fwalk_sglue+0xc>
 800610c:	4630      	mov	r0, r6
 800610e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006112:	89ab      	ldrh	r3, [r5, #12]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d907      	bls.n	8006128 <_fwalk_sglue+0x38>
 8006118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800611c:	3301      	adds	r3, #1
 800611e:	d003      	beq.n	8006128 <_fwalk_sglue+0x38>
 8006120:	4629      	mov	r1, r5
 8006122:	4638      	mov	r0, r7
 8006124:	47c0      	blx	r8
 8006126:	4306      	orrs	r6, r0
 8006128:	3568      	adds	r5, #104	; 0x68
 800612a:	e7e9      	b.n	8006100 <_fwalk_sglue+0x10>

0800612c <iprintf>:
 800612c:	b40f      	push	{r0, r1, r2, r3}
 800612e:	b507      	push	{r0, r1, r2, lr}
 8006130:	4906      	ldr	r1, [pc, #24]	; (800614c <iprintf+0x20>)
 8006132:	ab04      	add	r3, sp, #16
 8006134:	6808      	ldr	r0, [r1, #0]
 8006136:	f853 2b04 	ldr.w	r2, [r3], #4
 800613a:	6881      	ldr	r1, [r0, #8]
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	f001 fe53 	bl	8007de8 <_vfiprintf_r>
 8006142:	b003      	add	sp, #12
 8006144:	f85d eb04 	ldr.w	lr, [sp], #4
 8006148:	b004      	add	sp, #16
 800614a:	4770      	bx	lr
 800614c:	20000064 	.word	0x20000064

08006150 <_puts_r>:
 8006150:	6a03      	ldr	r3, [r0, #32]
 8006152:	b570      	push	{r4, r5, r6, lr}
 8006154:	6884      	ldr	r4, [r0, #8]
 8006156:	4605      	mov	r5, r0
 8006158:	460e      	mov	r6, r1
 800615a:	b90b      	cbnz	r3, 8006160 <_puts_r+0x10>
 800615c:	f7ff ffb0 	bl	80060c0 <__sinit>
 8006160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006162:	07db      	lsls	r3, r3, #31
 8006164:	d405      	bmi.n	8006172 <_puts_r+0x22>
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	0598      	lsls	r0, r3, #22
 800616a:	d402      	bmi.n	8006172 <_puts_r+0x22>
 800616c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800616e:	f000 f9c0 	bl	80064f2 <__retarget_lock_acquire_recursive>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	0719      	lsls	r1, r3, #28
 8006176:	d513      	bpl.n	80061a0 <_puts_r+0x50>
 8006178:	6923      	ldr	r3, [r4, #16]
 800617a:	b18b      	cbz	r3, 80061a0 <_puts_r+0x50>
 800617c:	3e01      	subs	r6, #1
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006184:	3b01      	subs	r3, #1
 8006186:	60a3      	str	r3, [r4, #8]
 8006188:	b9e9      	cbnz	r1, 80061c6 <_puts_r+0x76>
 800618a:	2b00      	cmp	r3, #0
 800618c:	da2e      	bge.n	80061ec <_puts_r+0x9c>
 800618e:	4622      	mov	r2, r4
 8006190:	210a      	movs	r1, #10
 8006192:	4628      	mov	r0, r5
 8006194:	f000 f89b 	bl	80062ce <__swbuf_r>
 8006198:	3001      	adds	r0, #1
 800619a:	d007      	beq.n	80061ac <_puts_r+0x5c>
 800619c:	250a      	movs	r5, #10
 800619e:	e007      	b.n	80061b0 <_puts_r+0x60>
 80061a0:	4621      	mov	r1, r4
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 f8d0 	bl	8006348 <__swsetup_r>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d0e7      	beq.n	800617c <_puts_r+0x2c>
 80061ac:	f04f 35ff 	mov.w	r5, #4294967295
 80061b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061b2:	07da      	lsls	r2, r3, #31
 80061b4:	d405      	bmi.n	80061c2 <_puts_r+0x72>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	059b      	lsls	r3, r3, #22
 80061ba:	d402      	bmi.n	80061c2 <_puts_r+0x72>
 80061bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061be:	f000 f999 	bl	80064f4 <__retarget_lock_release_recursive>
 80061c2:	4628      	mov	r0, r5
 80061c4:	bd70      	pop	{r4, r5, r6, pc}
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	da04      	bge.n	80061d4 <_puts_r+0x84>
 80061ca:	69a2      	ldr	r2, [r4, #24]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	dc06      	bgt.n	80061de <_puts_r+0x8e>
 80061d0:	290a      	cmp	r1, #10
 80061d2:	d004      	beq.n	80061de <_puts_r+0x8e>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	6022      	str	r2, [r4, #0]
 80061da:	7019      	strb	r1, [r3, #0]
 80061dc:	e7cf      	b.n	800617e <_puts_r+0x2e>
 80061de:	4622      	mov	r2, r4
 80061e0:	4628      	mov	r0, r5
 80061e2:	f000 f874 	bl	80062ce <__swbuf_r>
 80061e6:	3001      	adds	r0, #1
 80061e8:	d1c9      	bne.n	800617e <_puts_r+0x2e>
 80061ea:	e7df      	b.n	80061ac <_puts_r+0x5c>
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	250a      	movs	r5, #10
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	6022      	str	r2, [r4, #0]
 80061f4:	701d      	strb	r5, [r3, #0]
 80061f6:	e7db      	b.n	80061b0 <_puts_r+0x60>

080061f8 <puts>:
 80061f8:	4b02      	ldr	r3, [pc, #8]	; (8006204 <puts+0xc>)
 80061fa:	4601      	mov	r1, r0
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	f7ff bfa7 	b.w	8006150 <_puts_r>
 8006202:	bf00      	nop
 8006204:	20000064 	.word	0x20000064

08006208 <siprintf>:
 8006208:	b40e      	push	{r1, r2, r3}
 800620a:	b500      	push	{lr}
 800620c:	b09c      	sub	sp, #112	; 0x70
 800620e:	ab1d      	add	r3, sp, #116	; 0x74
 8006210:	9002      	str	r0, [sp, #8]
 8006212:	9006      	str	r0, [sp, #24]
 8006214:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006218:	4809      	ldr	r0, [pc, #36]	; (8006240 <siprintf+0x38>)
 800621a:	9107      	str	r1, [sp, #28]
 800621c:	9104      	str	r1, [sp, #16]
 800621e:	4909      	ldr	r1, [pc, #36]	; (8006244 <siprintf+0x3c>)
 8006220:	f853 2b04 	ldr.w	r2, [r3], #4
 8006224:	9105      	str	r1, [sp, #20]
 8006226:	6800      	ldr	r0, [r0, #0]
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	a902      	add	r1, sp, #8
 800622c:	f001 fcb4 	bl	8007b98 <_svfiprintf_r>
 8006230:	9b02      	ldr	r3, [sp, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	b01c      	add	sp, #112	; 0x70
 8006238:	f85d eb04 	ldr.w	lr, [sp], #4
 800623c:	b003      	add	sp, #12
 800623e:	4770      	bx	lr
 8006240:	20000064 	.word	0x20000064
 8006244:	ffff0208 	.word	0xffff0208

08006248 <__sread>:
 8006248:	b510      	push	{r4, lr}
 800624a:	460c      	mov	r4, r1
 800624c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006250:	f000 f900 	bl	8006454 <_read_r>
 8006254:	2800      	cmp	r0, #0
 8006256:	bfab      	itete	ge
 8006258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800625a:	89a3      	ldrhlt	r3, [r4, #12]
 800625c:	181b      	addge	r3, r3, r0
 800625e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006262:	bfac      	ite	ge
 8006264:	6563      	strge	r3, [r4, #84]	; 0x54
 8006266:	81a3      	strhlt	r3, [r4, #12]
 8006268:	bd10      	pop	{r4, pc}

0800626a <__swrite>:
 800626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626e:	461f      	mov	r7, r3
 8006270:	898b      	ldrh	r3, [r1, #12]
 8006272:	05db      	lsls	r3, r3, #23
 8006274:	4605      	mov	r5, r0
 8006276:	460c      	mov	r4, r1
 8006278:	4616      	mov	r6, r2
 800627a:	d505      	bpl.n	8006288 <__swrite+0x1e>
 800627c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006280:	2302      	movs	r3, #2
 8006282:	2200      	movs	r2, #0
 8006284:	f000 f8d4 	bl	8006430 <_lseek_r>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800628e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	4632      	mov	r2, r6
 8006296:	463b      	mov	r3, r7
 8006298:	4628      	mov	r0, r5
 800629a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800629e:	f000 b8eb 	b.w	8006478 <_write_r>

080062a2 <__sseek>:
 80062a2:	b510      	push	{r4, lr}
 80062a4:	460c      	mov	r4, r1
 80062a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062aa:	f000 f8c1 	bl	8006430 <_lseek_r>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	bf15      	itete	ne
 80062b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80062b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062be:	81a3      	strheq	r3, [r4, #12]
 80062c0:	bf18      	it	ne
 80062c2:	81a3      	strhne	r3, [r4, #12]
 80062c4:	bd10      	pop	{r4, pc}

080062c6 <__sclose>:
 80062c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ca:	f000 b8a1 	b.w	8006410 <_close_r>

080062ce <__swbuf_r>:
 80062ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d0:	460e      	mov	r6, r1
 80062d2:	4614      	mov	r4, r2
 80062d4:	4605      	mov	r5, r0
 80062d6:	b118      	cbz	r0, 80062e0 <__swbuf_r+0x12>
 80062d8:	6a03      	ldr	r3, [r0, #32]
 80062da:	b90b      	cbnz	r3, 80062e0 <__swbuf_r+0x12>
 80062dc:	f7ff fef0 	bl	80060c0 <__sinit>
 80062e0:	69a3      	ldr	r3, [r4, #24]
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	071a      	lsls	r2, r3, #28
 80062e8:	d525      	bpl.n	8006336 <__swbuf_r+0x68>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	b31b      	cbz	r3, 8006336 <__swbuf_r+0x68>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	6922      	ldr	r2, [r4, #16]
 80062f2:	1a98      	subs	r0, r3, r2
 80062f4:	6963      	ldr	r3, [r4, #20]
 80062f6:	b2f6      	uxtb	r6, r6
 80062f8:	4283      	cmp	r3, r0
 80062fa:	4637      	mov	r7, r6
 80062fc:	dc04      	bgt.n	8006308 <__swbuf_r+0x3a>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f001 ff11 	bl	8008128 <_fflush_r>
 8006306:	b9e0      	cbnz	r0, 8006342 <__swbuf_r+0x74>
 8006308:	68a3      	ldr	r3, [r4, #8]
 800630a:	3b01      	subs	r3, #1
 800630c:	60a3      	str	r3, [r4, #8]
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	6022      	str	r2, [r4, #0]
 8006314:	701e      	strb	r6, [r3, #0]
 8006316:	6962      	ldr	r2, [r4, #20]
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	429a      	cmp	r2, r3
 800631c:	d004      	beq.n	8006328 <__swbuf_r+0x5a>
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	07db      	lsls	r3, r3, #31
 8006322:	d506      	bpl.n	8006332 <__swbuf_r+0x64>
 8006324:	2e0a      	cmp	r6, #10
 8006326:	d104      	bne.n	8006332 <__swbuf_r+0x64>
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f001 fefc 	bl	8008128 <_fflush_r>
 8006330:	b938      	cbnz	r0, 8006342 <__swbuf_r+0x74>
 8006332:	4638      	mov	r0, r7
 8006334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006336:	4621      	mov	r1, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f000 f805 	bl	8006348 <__swsetup_r>
 800633e:	2800      	cmp	r0, #0
 8006340:	d0d5      	beq.n	80062ee <__swbuf_r+0x20>
 8006342:	f04f 37ff 	mov.w	r7, #4294967295
 8006346:	e7f4      	b.n	8006332 <__swbuf_r+0x64>

08006348 <__swsetup_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <__swsetup_r+0xac>)
 800634c:	4605      	mov	r5, r0
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	460c      	mov	r4, r1
 8006352:	b118      	cbz	r0, 800635c <__swsetup_r+0x14>
 8006354:	6a03      	ldr	r3, [r0, #32]
 8006356:	b90b      	cbnz	r3, 800635c <__swsetup_r+0x14>
 8006358:	f7ff feb2 	bl	80060c0 <__sinit>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006362:	0718      	lsls	r0, r3, #28
 8006364:	d422      	bmi.n	80063ac <__swsetup_r+0x64>
 8006366:	06d9      	lsls	r1, r3, #27
 8006368:	d407      	bmi.n	800637a <__swsetup_r+0x32>
 800636a:	2309      	movs	r3, #9
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006372:	81a3      	strh	r3, [r4, #12]
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e034      	b.n	80063e4 <__swsetup_r+0x9c>
 800637a:	0758      	lsls	r0, r3, #29
 800637c:	d512      	bpl.n	80063a4 <__swsetup_r+0x5c>
 800637e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006380:	b141      	cbz	r1, 8006394 <__swsetup_r+0x4c>
 8006382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006386:	4299      	cmp	r1, r3
 8006388:	d002      	beq.n	8006390 <__swsetup_r+0x48>
 800638a:	4628      	mov	r0, r5
 800638c:	f000 ff2e 	bl	80071ec <_free_r>
 8006390:	2300      	movs	r3, #0
 8006392:	6363      	str	r3, [r4, #52]	; 0x34
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	2300      	movs	r3, #0
 800639e:	6063      	str	r3, [r4, #4]
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	6023      	str	r3, [r4, #0]
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	f043 0308 	orr.w	r3, r3, #8
 80063aa:	81a3      	strh	r3, [r4, #12]
 80063ac:	6923      	ldr	r3, [r4, #16]
 80063ae:	b94b      	cbnz	r3, 80063c4 <__swsetup_r+0x7c>
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ba:	d003      	beq.n	80063c4 <__swsetup_r+0x7c>
 80063bc:	4621      	mov	r1, r4
 80063be:	4628      	mov	r0, r5
 80063c0:	f001 ff00 	bl	80081c4 <__smakebuf_r>
 80063c4:	89a0      	ldrh	r0, [r4, #12]
 80063c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063ca:	f010 0301 	ands.w	r3, r0, #1
 80063ce:	d00a      	beq.n	80063e6 <__swsetup_r+0x9e>
 80063d0:	2300      	movs	r3, #0
 80063d2:	60a3      	str	r3, [r4, #8]
 80063d4:	6963      	ldr	r3, [r4, #20]
 80063d6:	425b      	negs	r3, r3
 80063d8:	61a3      	str	r3, [r4, #24]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	b943      	cbnz	r3, 80063f0 <__swsetup_r+0xa8>
 80063de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063e2:	d1c4      	bne.n	800636e <__swsetup_r+0x26>
 80063e4:	bd38      	pop	{r3, r4, r5, pc}
 80063e6:	0781      	lsls	r1, r0, #30
 80063e8:	bf58      	it	pl
 80063ea:	6963      	ldrpl	r3, [r4, #20]
 80063ec:	60a3      	str	r3, [r4, #8]
 80063ee:	e7f4      	b.n	80063da <__swsetup_r+0x92>
 80063f0:	2000      	movs	r0, #0
 80063f2:	e7f7      	b.n	80063e4 <__swsetup_r+0x9c>
 80063f4:	20000064 	.word	0x20000064

080063f8 <memset>:
 80063f8:	4402      	add	r2, r0
 80063fa:	4603      	mov	r3, r0
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d100      	bne.n	8006402 <memset+0xa>
 8006400:	4770      	bx	lr
 8006402:	f803 1b01 	strb.w	r1, [r3], #1
 8006406:	e7f9      	b.n	80063fc <memset+0x4>

08006408 <_localeconv_r>:
 8006408:	4800      	ldr	r0, [pc, #0]	; (800640c <_localeconv_r+0x4>)
 800640a:	4770      	bx	lr
 800640c:	20000158 	.word	0x20000158

08006410 <_close_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d06      	ldr	r5, [pc, #24]	; (800642c <_close_r+0x1c>)
 8006414:	2300      	movs	r3, #0
 8006416:	4604      	mov	r4, r0
 8006418:	4608      	mov	r0, r1
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	f7fb fc91 	bl	8001d42 <_close>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_close_r+0x1a>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_close_r+0x1a>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	20000ba8 	.word	0x20000ba8

08006430 <_lseek_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d07      	ldr	r5, [pc, #28]	; (8006450 <_lseek_r+0x20>)
 8006434:	4604      	mov	r4, r0
 8006436:	4608      	mov	r0, r1
 8006438:	4611      	mov	r1, r2
 800643a:	2200      	movs	r2, #0
 800643c:	602a      	str	r2, [r5, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	f7fb fca6 	bl	8001d90 <_lseek>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_lseek_r+0x1e>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	b103      	cbz	r3, 800644e <_lseek_r+0x1e>
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	20000ba8 	.word	0x20000ba8

08006454 <_read_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d07      	ldr	r5, [pc, #28]	; (8006474 <_read_r+0x20>)
 8006458:	4604      	mov	r4, r0
 800645a:	4608      	mov	r0, r1
 800645c:	4611      	mov	r1, r2
 800645e:	2200      	movs	r2, #0
 8006460:	602a      	str	r2, [r5, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	f7fb fc50 	bl	8001d08 <_read>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_read_r+0x1e>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_read_r+0x1e>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	20000ba8 	.word	0x20000ba8

08006478 <_write_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d07      	ldr	r5, [pc, #28]	; (8006498 <_write_r+0x20>)
 800647c:	4604      	mov	r4, r0
 800647e:	4608      	mov	r0, r1
 8006480:	4611      	mov	r1, r2
 8006482:	2200      	movs	r2, #0
 8006484:	602a      	str	r2, [r5, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	f7fa fdce 	bl	8001028 <_write>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_write_r+0x1e>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_write_r+0x1e>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20000ba8 	.word	0x20000ba8

0800649c <__errno>:
 800649c:	4b01      	ldr	r3, [pc, #4]	; (80064a4 <__errno+0x8>)
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000064 	.word	0x20000064

080064a8 <__libc_init_array>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4d0d      	ldr	r5, [pc, #52]	; (80064e0 <__libc_init_array+0x38>)
 80064ac:	4c0d      	ldr	r4, [pc, #52]	; (80064e4 <__libc_init_array+0x3c>)
 80064ae:	1b64      	subs	r4, r4, r5
 80064b0:	10a4      	asrs	r4, r4, #2
 80064b2:	2600      	movs	r6, #0
 80064b4:	42a6      	cmp	r6, r4
 80064b6:	d109      	bne.n	80064cc <__libc_init_array+0x24>
 80064b8:	4d0b      	ldr	r5, [pc, #44]	; (80064e8 <__libc_init_array+0x40>)
 80064ba:	4c0c      	ldr	r4, [pc, #48]	; (80064ec <__libc_init_array+0x44>)
 80064bc:	f002 f800 	bl	80084c0 <_init>
 80064c0:	1b64      	subs	r4, r4, r5
 80064c2:	10a4      	asrs	r4, r4, #2
 80064c4:	2600      	movs	r6, #0
 80064c6:	42a6      	cmp	r6, r4
 80064c8:	d105      	bne.n	80064d6 <__libc_init_array+0x2e>
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d0:	4798      	blx	r3
 80064d2:	3601      	adds	r6, #1
 80064d4:	e7ee      	b.n	80064b4 <__libc_init_array+0xc>
 80064d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064da:	4798      	blx	r3
 80064dc:	3601      	adds	r6, #1
 80064de:	e7f2      	b.n	80064c6 <__libc_init_array+0x1e>
 80064e0:	0800889c 	.word	0x0800889c
 80064e4:	0800889c 	.word	0x0800889c
 80064e8:	0800889c 	.word	0x0800889c
 80064ec:	080088a0 	.word	0x080088a0

080064f0 <__retarget_lock_init_recursive>:
 80064f0:	4770      	bx	lr

080064f2 <__retarget_lock_acquire_recursive>:
 80064f2:	4770      	bx	lr

080064f4 <__retarget_lock_release_recursive>:
 80064f4:	4770      	bx	lr

080064f6 <quorem>:
 80064f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fa:	6903      	ldr	r3, [r0, #16]
 80064fc:	690c      	ldr	r4, [r1, #16]
 80064fe:	42a3      	cmp	r3, r4
 8006500:	4607      	mov	r7, r0
 8006502:	db7e      	blt.n	8006602 <quorem+0x10c>
 8006504:	3c01      	subs	r4, #1
 8006506:	f101 0814 	add.w	r8, r1, #20
 800650a:	f100 0514 	add.w	r5, r0, #20
 800650e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800651c:	3301      	adds	r3, #1
 800651e:	429a      	cmp	r2, r3
 8006520:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006524:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006528:	fbb2 f6f3 	udiv	r6, r2, r3
 800652c:	d331      	bcc.n	8006592 <quorem+0x9c>
 800652e:	f04f 0e00 	mov.w	lr, #0
 8006532:	4640      	mov	r0, r8
 8006534:	46ac      	mov	ip, r5
 8006536:	46f2      	mov	sl, lr
 8006538:	f850 2b04 	ldr.w	r2, [r0], #4
 800653c:	b293      	uxth	r3, r2
 800653e:	fb06 e303 	mla	r3, r6, r3, lr
 8006542:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006546:	0c1a      	lsrs	r2, r3, #16
 8006548:	b29b      	uxth	r3, r3
 800654a:	ebaa 0303 	sub.w	r3, sl, r3
 800654e:	f8dc a000 	ldr.w	sl, [ip]
 8006552:	fa13 f38a 	uxtah	r3, r3, sl
 8006556:	fb06 220e 	mla	r2, r6, lr, r2
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	9b00      	ldr	r3, [sp, #0]
 800655e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006562:	b292      	uxth	r2, r2
 8006564:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800656c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006570:	4581      	cmp	r9, r0
 8006572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006576:	f84c 3b04 	str.w	r3, [ip], #4
 800657a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800657e:	d2db      	bcs.n	8006538 <quorem+0x42>
 8006580:	f855 300b 	ldr.w	r3, [r5, fp]
 8006584:	b92b      	cbnz	r3, 8006592 <quorem+0x9c>
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	3b04      	subs	r3, #4
 800658a:	429d      	cmp	r5, r3
 800658c:	461a      	mov	r2, r3
 800658e:	d32c      	bcc.n	80065ea <quorem+0xf4>
 8006590:	613c      	str	r4, [r7, #16]
 8006592:	4638      	mov	r0, r7
 8006594:	f001 f9a6 	bl	80078e4 <__mcmp>
 8006598:	2800      	cmp	r0, #0
 800659a:	db22      	blt.n	80065e2 <quorem+0xec>
 800659c:	3601      	adds	r6, #1
 800659e:	4629      	mov	r1, r5
 80065a0:	2000      	movs	r0, #0
 80065a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80065a6:	f8d1 c000 	ldr.w	ip, [r1]
 80065aa:	b293      	uxth	r3, r2
 80065ac:	1ac3      	subs	r3, r0, r3
 80065ae:	0c12      	lsrs	r2, r2, #16
 80065b0:	fa13 f38c 	uxtah	r3, r3, ip
 80065b4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065bc:	b29b      	uxth	r3, r3
 80065be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065c2:	45c1      	cmp	r9, r8
 80065c4:	f841 3b04 	str.w	r3, [r1], #4
 80065c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065cc:	d2e9      	bcs.n	80065a2 <quorem+0xac>
 80065ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065d6:	b922      	cbnz	r2, 80065e2 <quorem+0xec>
 80065d8:	3b04      	subs	r3, #4
 80065da:	429d      	cmp	r5, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	d30a      	bcc.n	80065f6 <quorem+0x100>
 80065e0:	613c      	str	r4, [r7, #16]
 80065e2:	4630      	mov	r0, r6
 80065e4:	b003      	add	sp, #12
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	3b04      	subs	r3, #4
 80065ee:	2a00      	cmp	r2, #0
 80065f0:	d1ce      	bne.n	8006590 <quorem+0x9a>
 80065f2:	3c01      	subs	r4, #1
 80065f4:	e7c9      	b.n	800658a <quorem+0x94>
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	3b04      	subs	r3, #4
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	d1f0      	bne.n	80065e0 <quorem+0xea>
 80065fe:	3c01      	subs	r4, #1
 8006600:	e7eb      	b.n	80065da <quorem+0xe4>
 8006602:	2000      	movs	r0, #0
 8006604:	e7ee      	b.n	80065e4 <quorem+0xee>
	...

08006608 <_dtoa_r>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	ed2d 8b04 	vpush	{d8-d9}
 8006610:	69c5      	ldr	r5, [r0, #28]
 8006612:	b093      	sub	sp, #76	; 0x4c
 8006614:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006618:	ec57 6b10 	vmov	r6, r7, d0
 800661c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006620:	9107      	str	r1, [sp, #28]
 8006622:	4604      	mov	r4, r0
 8006624:	920a      	str	r2, [sp, #40]	; 0x28
 8006626:	930d      	str	r3, [sp, #52]	; 0x34
 8006628:	b975      	cbnz	r5, 8006648 <_dtoa_r+0x40>
 800662a:	2010      	movs	r0, #16
 800662c:	f000 fe2a 	bl	8007284 <malloc>
 8006630:	4602      	mov	r2, r0
 8006632:	61e0      	str	r0, [r4, #28]
 8006634:	b920      	cbnz	r0, 8006640 <_dtoa_r+0x38>
 8006636:	4bae      	ldr	r3, [pc, #696]	; (80068f0 <_dtoa_r+0x2e8>)
 8006638:	21ef      	movs	r1, #239	; 0xef
 800663a:	48ae      	ldr	r0, [pc, #696]	; (80068f4 <_dtoa_r+0x2ec>)
 800663c:	f001 fe58 	bl	80082f0 <__assert_func>
 8006640:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006644:	6005      	str	r5, [r0, #0]
 8006646:	60c5      	str	r5, [r0, #12]
 8006648:	69e3      	ldr	r3, [r4, #28]
 800664a:	6819      	ldr	r1, [r3, #0]
 800664c:	b151      	cbz	r1, 8006664 <_dtoa_r+0x5c>
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	604a      	str	r2, [r1, #4]
 8006652:	2301      	movs	r3, #1
 8006654:	4093      	lsls	r3, r2
 8006656:	608b      	str	r3, [r1, #8]
 8006658:	4620      	mov	r0, r4
 800665a:	f000 ff07 	bl	800746c <_Bfree>
 800665e:	69e3      	ldr	r3, [r4, #28]
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	1e3b      	subs	r3, r7, #0
 8006666:	bfbb      	ittet	lt
 8006668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800666c:	9303      	strlt	r3, [sp, #12]
 800666e:	2300      	movge	r3, #0
 8006670:	2201      	movlt	r2, #1
 8006672:	bfac      	ite	ge
 8006674:	f8c8 3000 	strge.w	r3, [r8]
 8006678:	f8c8 2000 	strlt.w	r2, [r8]
 800667c:	4b9e      	ldr	r3, [pc, #632]	; (80068f8 <_dtoa_r+0x2f0>)
 800667e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006682:	ea33 0308 	bics.w	r3, r3, r8
 8006686:	d11b      	bne.n	80066c0 <_dtoa_r+0xb8>
 8006688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800668a:	f242 730f 	movw	r3, #9999	; 0x270f
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006694:	4333      	orrs	r3, r6
 8006696:	f000 8593 	beq.w	80071c0 <_dtoa_r+0xbb8>
 800669a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800669c:	b963      	cbnz	r3, 80066b8 <_dtoa_r+0xb0>
 800669e:	4b97      	ldr	r3, [pc, #604]	; (80068fc <_dtoa_r+0x2f4>)
 80066a0:	e027      	b.n	80066f2 <_dtoa_r+0xea>
 80066a2:	4b97      	ldr	r3, [pc, #604]	; (8006900 <_dtoa_r+0x2f8>)
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	3308      	adds	r3, #8
 80066a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	9800      	ldr	r0, [sp, #0]
 80066ae:	b013      	add	sp, #76	; 0x4c
 80066b0:	ecbd 8b04 	vpop	{d8-d9}
 80066b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b8:	4b90      	ldr	r3, [pc, #576]	; (80068fc <_dtoa_r+0x2f4>)
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	3303      	adds	r3, #3
 80066be:	e7f3      	b.n	80066a8 <_dtoa_r+0xa0>
 80066c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	ec51 0b17 	vmov	r0, r1, d7
 80066ca:	eeb0 8a47 	vmov.f32	s16, s14
 80066ce:	eef0 8a67 	vmov.f32	s17, s15
 80066d2:	2300      	movs	r3, #0
 80066d4:	f7fa fa08 	bl	8000ae8 <__aeabi_dcmpeq>
 80066d8:	4681      	mov	r9, r0
 80066da:	b160      	cbz	r0, 80066f6 <_dtoa_r+0xee>
 80066dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066de:	2301      	movs	r3, #1
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8568 	beq.w	80071ba <_dtoa_r+0xbb2>
 80066ea:	4b86      	ldr	r3, [pc, #536]	; (8006904 <_dtoa_r+0x2fc>)
 80066ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	e7da      	b.n	80066ac <_dtoa_r+0xa4>
 80066f6:	aa10      	add	r2, sp, #64	; 0x40
 80066f8:	a911      	add	r1, sp, #68	; 0x44
 80066fa:	4620      	mov	r0, r4
 80066fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006700:	eef0 0a68 	vmov.f32	s1, s17
 8006704:	f001 f994 	bl	8007a30 <__d2b>
 8006708:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800670c:	4682      	mov	sl, r0
 800670e:	2d00      	cmp	r5, #0
 8006710:	d07f      	beq.n	8006812 <_dtoa_r+0x20a>
 8006712:	ee18 3a90 	vmov	r3, s17
 8006716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800671a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800671e:	ec51 0b18 	vmov	r0, r1, d8
 8006722:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800672a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800672e:	4619      	mov	r1, r3
 8006730:	2200      	movs	r2, #0
 8006732:	4b75      	ldr	r3, [pc, #468]	; (8006908 <_dtoa_r+0x300>)
 8006734:	f7f9 fdb8 	bl	80002a8 <__aeabi_dsub>
 8006738:	a367      	add	r3, pc, #412	; (adr r3, 80068d8 <_dtoa_r+0x2d0>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f7f9 ff6b 	bl	8000618 <__aeabi_dmul>
 8006742:	a367      	add	r3, pc, #412	; (adr r3, 80068e0 <_dtoa_r+0x2d8>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f7f9 fdb0 	bl	80002ac <__adddf3>
 800674c:	4606      	mov	r6, r0
 800674e:	4628      	mov	r0, r5
 8006750:	460f      	mov	r7, r1
 8006752:	f7f9 fef7 	bl	8000544 <__aeabi_i2d>
 8006756:	a364      	add	r3, pc, #400	; (adr r3, 80068e8 <_dtoa_r+0x2e0>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f7f9 ff5c 	bl	8000618 <__aeabi_dmul>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4630      	mov	r0, r6
 8006766:	4639      	mov	r1, r7
 8006768:	f7f9 fda0 	bl	80002ac <__adddf3>
 800676c:	4606      	mov	r6, r0
 800676e:	460f      	mov	r7, r1
 8006770:	f7fa fa02 	bl	8000b78 <__aeabi_d2iz>
 8006774:	2200      	movs	r2, #0
 8006776:	4683      	mov	fp, r0
 8006778:	2300      	movs	r3, #0
 800677a:	4630      	mov	r0, r6
 800677c:	4639      	mov	r1, r7
 800677e:	f7fa f9bd 	bl	8000afc <__aeabi_dcmplt>
 8006782:	b148      	cbz	r0, 8006798 <_dtoa_r+0x190>
 8006784:	4658      	mov	r0, fp
 8006786:	f7f9 fedd 	bl	8000544 <__aeabi_i2d>
 800678a:	4632      	mov	r2, r6
 800678c:	463b      	mov	r3, r7
 800678e:	f7fa f9ab 	bl	8000ae8 <__aeabi_dcmpeq>
 8006792:	b908      	cbnz	r0, 8006798 <_dtoa_r+0x190>
 8006794:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006798:	f1bb 0f16 	cmp.w	fp, #22
 800679c:	d857      	bhi.n	800684e <_dtoa_r+0x246>
 800679e:	4b5b      	ldr	r3, [pc, #364]	; (800690c <_dtoa_r+0x304>)
 80067a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	ec51 0b18 	vmov	r0, r1, d8
 80067ac:	f7fa f9a6 	bl	8000afc <__aeabi_dcmplt>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d04e      	beq.n	8006852 <_dtoa_r+0x24a>
 80067b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067b8:	2300      	movs	r3, #0
 80067ba:	930c      	str	r3, [sp, #48]	; 0x30
 80067bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067be:	1b5b      	subs	r3, r3, r5
 80067c0:	1e5a      	subs	r2, r3, #1
 80067c2:	bf45      	ittet	mi
 80067c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80067c8:	9305      	strmi	r3, [sp, #20]
 80067ca:	2300      	movpl	r3, #0
 80067cc:	2300      	movmi	r3, #0
 80067ce:	9206      	str	r2, [sp, #24]
 80067d0:	bf54      	ite	pl
 80067d2:	9305      	strpl	r3, [sp, #20]
 80067d4:	9306      	strmi	r3, [sp, #24]
 80067d6:	f1bb 0f00 	cmp.w	fp, #0
 80067da:	db3c      	blt.n	8006856 <_dtoa_r+0x24e>
 80067dc:	9b06      	ldr	r3, [sp, #24]
 80067de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80067e2:	445b      	add	r3, fp
 80067e4:	9306      	str	r3, [sp, #24]
 80067e6:	2300      	movs	r3, #0
 80067e8:	9308      	str	r3, [sp, #32]
 80067ea:	9b07      	ldr	r3, [sp, #28]
 80067ec:	2b09      	cmp	r3, #9
 80067ee:	d868      	bhi.n	80068c2 <_dtoa_r+0x2ba>
 80067f0:	2b05      	cmp	r3, #5
 80067f2:	bfc4      	itt	gt
 80067f4:	3b04      	subgt	r3, #4
 80067f6:	9307      	strgt	r3, [sp, #28]
 80067f8:	9b07      	ldr	r3, [sp, #28]
 80067fa:	f1a3 0302 	sub.w	r3, r3, #2
 80067fe:	bfcc      	ite	gt
 8006800:	2500      	movgt	r5, #0
 8006802:	2501      	movle	r5, #1
 8006804:	2b03      	cmp	r3, #3
 8006806:	f200 8085 	bhi.w	8006914 <_dtoa_r+0x30c>
 800680a:	e8df f003 	tbb	[pc, r3]
 800680e:	3b2e      	.short	0x3b2e
 8006810:	5839      	.short	0x5839
 8006812:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006816:	441d      	add	r5, r3
 8006818:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800681c:	2b20      	cmp	r3, #32
 800681e:	bfc1      	itttt	gt
 8006820:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006824:	fa08 f803 	lslgt.w	r8, r8, r3
 8006828:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800682c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006830:	bfd6      	itet	le
 8006832:	f1c3 0320 	rsble	r3, r3, #32
 8006836:	ea48 0003 	orrgt.w	r0, r8, r3
 800683a:	fa06 f003 	lslle.w	r0, r6, r3
 800683e:	f7f9 fe71 	bl	8000524 <__aeabi_ui2d>
 8006842:	2201      	movs	r2, #1
 8006844:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006848:	3d01      	subs	r5, #1
 800684a:	920e      	str	r2, [sp, #56]	; 0x38
 800684c:	e76f      	b.n	800672e <_dtoa_r+0x126>
 800684e:	2301      	movs	r3, #1
 8006850:	e7b3      	b.n	80067ba <_dtoa_r+0x1b2>
 8006852:	900c      	str	r0, [sp, #48]	; 0x30
 8006854:	e7b2      	b.n	80067bc <_dtoa_r+0x1b4>
 8006856:	9b05      	ldr	r3, [sp, #20]
 8006858:	eba3 030b 	sub.w	r3, r3, fp
 800685c:	9305      	str	r3, [sp, #20]
 800685e:	f1cb 0300 	rsb	r3, fp, #0
 8006862:	9308      	str	r3, [sp, #32]
 8006864:	2300      	movs	r3, #0
 8006866:	930b      	str	r3, [sp, #44]	; 0x2c
 8006868:	e7bf      	b.n	80067ea <_dtoa_r+0x1e2>
 800686a:	2300      	movs	r3, #0
 800686c:	9309      	str	r3, [sp, #36]	; 0x24
 800686e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006870:	2b00      	cmp	r3, #0
 8006872:	dc52      	bgt.n	800691a <_dtoa_r+0x312>
 8006874:	2301      	movs	r3, #1
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	9304      	str	r3, [sp, #16]
 800687a:	461a      	mov	r2, r3
 800687c:	920a      	str	r2, [sp, #40]	; 0x28
 800687e:	e00b      	b.n	8006898 <_dtoa_r+0x290>
 8006880:	2301      	movs	r3, #1
 8006882:	e7f3      	b.n	800686c <_dtoa_r+0x264>
 8006884:	2300      	movs	r3, #0
 8006886:	9309      	str	r3, [sp, #36]	; 0x24
 8006888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688a:	445b      	add	r3, fp
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	3301      	adds	r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	bfb8      	it	lt
 8006896:	2301      	movlt	r3, #1
 8006898:	69e0      	ldr	r0, [r4, #28]
 800689a:	2100      	movs	r1, #0
 800689c:	2204      	movs	r2, #4
 800689e:	f102 0614 	add.w	r6, r2, #20
 80068a2:	429e      	cmp	r6, r3
 80068a4:	d93d      	bls.n	8006922 <_dtoa_r+0x31a>
 80068a6:	6041      	str	r1, [r0, #4]
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fd9f 	bl	80073ec <_Balloc>
 80068ae:	9000      	str	r0, [sp, #0]
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d139      	bne.n	8006928 <_dtoa_r+0x320>
 80068b4:	4b16      	ldr	r3, [pc, #88]	; (8006910 <_dtoa_r+0x308>)
 80068b6:	4602      	mov	r2, r0
 80068b8:	f240 11af 	movw	r1, #431	; 0x1af
 80068bc:	e6bd      	b.n	800663a <_dtoa_r+0x32>
 80068be:	2301      	movs	r3, #1
 80068c0:	e7e1      	b.n	8006886 <_dtoa_r+0x27e>
 80068c2:	2501      	movs	r5, #1
 80068c4:	2300      	movs	r3, #0
 80068c6:	9307      	str	r3, [sp, #28]
 80068c8:	9509      	str	r5, [sp, #36]	; 0x24
 80068ca:	f04f 33ff 	mov.w	r3, #4294967295
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	9304      	str	r3, [sp, #16]
 80068d2:	2200      	movs	r2, #0
 80068d4:	2312      	movs	r3, #18
 80068d6:	e7d1      	b.n	800687c <_dtoa_r+0x274>
 80068d8:	636f4361 	.word	0x636f4361
 80068dc:	3fd287a7 	.word	0x3fd287a7
 80068e0:	8b60c8b3 	.word	0x8b60c8b3
 80068e4:	3fc68a28 	.word	0x3fc68a28
 80068e8:	509f79fb 	.word	0x509f79fb
 80068ec:	3fd34413 	.word	0x3fd34413
 80068f0:	08008561 	.word	0x08008561
 80068f4:	08008578 	.word	0x08008578
 80068f8:	7ff00000 	.word	0x7ff00000
 80068fc:	0800855d 	.word	0x0800855d
 8006900:	08008554 	.word	0x08008554
 8006904:	08008531 	.word	0x08008531
 8006908:	3ff80000 	.word	0x3ff80000
 800690c:	08008668 	.word	0x08008668
 8006910:	080085d0 	.word	0x080085d0
 8006914:	2301      	movs	r3, #1
 8006916:	9309      	str	r3, [sp, #36]	; 0x24
 8006918:	e7d7      	b.n	80068ca <_dtoa_r+0x2c2>
 800691a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	9304      	str	r3, [sp, #16]
 8006920:	e7ba      	b.n	8006898 <_dtoa_r+0x290>
 8006922:	3101      	adds	r1, #1
 8006924:	0052      	lsls	r2, r2, #1
 8006926:	e7ba      	b.n	800689e <_dtoa_r+0x296>
 8006928:	69e3      	ldr	r3, [r4, #28]
 800692a:	9a00      	ldr	r2, [sp, #0]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	9b04      	ldr	r3, [sp, #16]
 8006930:	2b0e      	cmp	r3, #14
 8006932:	f200 80a8 	bhi.w	8006a86 <_dtoa_r+0x47e>
 8006936:	2d00      	cmp	r5, #0
 8006938:	f000 80a5 	beq.w	8006a86 <_dtoa_r+0x47e>
 800693c:	f1bb 0f00 	cmp.w	fp, #0
 8006940:	dd38      	ble.n	80069b4 <_dtoa_r+0x3ac>
 8006942:	4bc0      	ldr	r3, [pc, #768]	; (8006c44 <_dtoa_r+0x63c>)
 8006944:	f00b 020f 	and.w	r2, fp, #15
 8006948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800694c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006950:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006954:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006958:	d019      	beq.n	800698e <_dtoa_r+0x386>
 800695a:	4bbb      	ldr	r3, [pc, #748]	; (8006c48 <_dtoa_r+0x640>)
 800695c:	ec51 0b18 	vmov	r0, r1, d8
 8006960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006964:	f7f9 ff82 	bl	800086c <__aeabi_ddiv>
 8006968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800696c:	f008 080f 	and.w	r8, r8, #15
 8006970:	2503      	movs	r5, #3
 8006972:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c48 <_dtoa_r+0x640>
 8006976:	f1b8 0f00 	cmp.w	r8, #0
 800697a:	d10a      	bne.n	8006992 <_dtoa_r+0x38a>
 800697c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	f7f9 ff72 	bl	800086c <__aeabi_ddiv>
 8006988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800698c:	e02b      	b.n	80069e6 <_dtoa_r+0x3de>
 800698e:	2502      	movs	r5, #2
 8006990:	e7ef      	b.n	8006972 <_dtoa_r+0x36a>
 8006992:	f018 0f01 	tst.w	r8, #1
 8006996:	d008      	beq.n	80069aa <_dtoa_r+0x3a2>
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069a0:	f7f9 fe3a 	bl	8000618 <__aeabi_dmul>
 80069a4:	3501      	adds	r5, #1
 80069a6:	4606      	mov	r6, r0
 80069a8:	460f      	mov	r7, r1
 80069aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069ae:	f109 0908 	add.w	r9, r9, #8
 80069b2:	e7e0      	b.n	8006976 <_dtoa_r+0x36e>
 80069b4:	f000 809f 	beq.w	8006af6 <_dtoa_r+0x4ee>
 80069b8:	f1cb 0600 	rsb	r6, fp, #0
 80069bc:	4ba1      	ldr	r3, [pc, #644]	; (8006c44 <_dtoa_r+0x63c>)
 80069be:	4fa2      	ldr	r7, [pc, #648]	; (8006c48 <_dtoa_r+0x640>)
 80069c0:	f006 020f 	and.w	r2, r6, #15
 80069c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	ec51 0b18 	vmov	r0, r1, d8
 80069d0:	f7f9 fe22 	bl	8000618 <__aeabi_dmul>
 80069d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d8:	1136      	asrs	r6, r6, #4
 80069da:	2300      	movs	r3, #0
 80069dc:	2502      	movs	r5, #2
 80069de:	2e00      	cmp	r6, #0
 80069e0:	d17e      	bne.n	8006ae0 <_dtoa_r+0x4d8>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1d0      	bne.n	8006988 <_dtoa_r+0x380>
 80069e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8084 	beq.w	8006afa <_dtoa_r+0x4f2>
 80069f2:	4b96      	ldr	r3, [pc, #600]	; (8006c4c <_dtoa_r+0x644>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	4640      	mov	r0, r8
 80069f8:	4649      	mov	r1, r9
 80069fa:	f7fa f87f 	bl	8000afc <__aeabi_dcmplt>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d07b      	beq.n	8006afa <_dtoa_r+0x4f2>
 8006a02:	9b04      	ldr	r3, [sp, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d078      	beq.n	8006afa <_dtoa_r+0x4f2>
 8006a08:	9b01      	ldr	r3, [sp, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dd39      	ble.n	8006a82 <_dtoa_r+0x47a>
 8006a0e:	4b90      	ldr	r3, [pc, #576]	; (8006c50 <_dtoa_r+0x648>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	4640      	mov	r0, r8
 8006a14:	4649      	mov	r1, r9
 8006a16:	f7f9 fdff 	bl	8000618 <__aeabi_dmul>
 8006a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a1e:	9e01      	ldr	r6, [sp, #4]
 8006a20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006a24:	3501      	adds	r5, #1
 8006a26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7f9 fd8a 	bl	8000544 <__aeabi_i2d>
 8006a30:	4642      	mov	r2, r8
 8006a32:	464b      	mov	r3, r9
 8006a34:	f7f9 fdf0 	bl	8000618 <__aeabi_dmul>
 8006a38:	4b86      	ldr	r3, [pc, #536]	; (8006c54 <_dtoa_r+0x64c>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f7f9 fc36 	bl	80002ac <__adddf3>
 8006a40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a48:	9303      	str	r3, [sp, #12]
 8006a4a:	2e00      	cmp	r6, #0
 8006a4c:	d158      	bne.n	8006b00 <_dtoa_r+0x4f8>
 8006a4e:	4b82      	ldr	r3, [pc, #520]	; (8006c58 <_dtoa_r+0x650>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7f9 fc27 	bl	80002a8 <__aeabi_dsub>
 8006a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a5e:	4680      	mov	r8, r0
 8006a60:	4689      	mov	r9, r1
 8006a62:	f7fa f869 	bl	8000b38 <__aeabi_dcmpgt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f040 8296 	bne.w	8006f98 <_dtoa_r+0x990>
 8006a6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a70:	4640      	mov	r0, r8
 8006a72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a76:	4649      	mov	r1, r9
 8006a78:	f7fa f840 	bl	8000afc <__aeabi_dcmplt>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f040 8289 	bne.w	8006f94 <_dtoa_r+0x98c>
 8006a82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f2c0 814e 	blt.w	8006d2a <_dtoa_r+0x722>
 8006a8e:	f1bb 0f0e 	cmp.w	fp, #14
 8006a92:	f300 814a 	bgt.w	8006d2a <_dtoa_r+0x722>
 8006a96:	4b6b      	ldr	r3, [pc, #428]	; (8006c44 <_dtoa_r+0x63c>)
 8006a98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f280 80dc 	bge.w	8006c60 <_dtoa_r+0x658>
 8006aa8:	9b04      	ldr	r3, [sp, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f300 80d8 	bgt.w	8006c60 <_dtoa_r+0x658>
 8006ab0:	f040 826f 	bne.w	8006f92 <_dtoa_r+0x98a>
 8006ab4:	4b68      	ldr	r3, [pc, #416]	; (8006c58 <_dtoa_r+0x650>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7f9 fdac 	bl	8000618 <__aeabi_dmul>
 8006ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ac4:	f7fa f82e 	bl	8000b24 <__aeabi_dcmpge>
 8006ac8:	9e04      	ldr	r6, [sp, #16]
 8006aca:	4637      	mov	r7, r6
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f040 8245 	bne.w	8006f5c <_dtoa_r+0x954>
 8006ad2:	9d00      	ldr	r5, [sp, #0]
 8006ad4:	2331      	movs	r3, #49	; 0x31
 8006ad6:	f805 3b01 	strb.w	r3, [r5], #1
 8006ada:	f10b 0b01 	add.w	fp, fp, #1
 8006ade:	e241      	b.n	8006f64 <_dtoa_r+0x95c>
 8006ae0:	07f2      	lsls	r2, r6, #31
 8006ae2:	d505      	bpl.n	8006af0 <_dtoa_r+0x4e8>
 8006ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae8:	f7f9 fd96 	bl	8000618 <__aeabi_dmul>
 8006aec:	3501      	adds	r5, #1
 8006aee:	2301      	movs	r3, #1
 8006af0:	1076      	asrs	r6, r6, #1
 8006af2:	3708      	adds	r7, #8
 8006af4:	e773      	b.n	80069de <_dtoa_r+0x3d6>
 8006af6:	2502      	movs	r5, #2
 8006af8:	e775      	b.n	80069e6 <_dtoa_r+0x3de>
 8006afa:	9e04      	ldr	r6, [sp, #16]
 8006afc:	465f      	mov	r7, fp
 8006afe:	e792      	b.n	8006a26 <_dtoa_r+0x41e>
 8006b00:	9900      	ldr	r1, [sp, #0]
 8006b02:	4b50      	ldr	r3, [pc, #320]	; (8006c44 <_dtoa_r+0x63c>)
 8006b04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b08:	4431      	add	r1, r6
 8006b0a:	9102      	str	r1, [sp, #8]
 8006b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b0e:	eeb0 9a47 	vmov.f32	s18, s14
 8006b12:	eef0 9a67 	vmov.f32	s19, s15
 8006b16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b1e:	2900      	cmp	r1, #0
 8006b20:	d044      	beq.n	8006bac <_dtoa_r+0x5a4>
 8006b22:	494e      	ldr	r1, [pc, #312]	; (8006c5c <_dtoa_r+0x654>)
 8006b24:	2000      	movs	r0, #0
 8006b26:	f7f9 fea1 	bl	800086c <__aeabi_ddiv>
 8006b2a:	ec53 2b19 	vmov	r2, r3, d9
 8006b2e:	f7f9 fbbb 	bl	80002a8 <__aeabi_dsub>
 8006b32:	9d00      	ldr	r5, [sp, #0]
 8006b34:	ec41 0b19 	vmov	d9, r0, r1
 8006b38:	4649      	mov	r1, r9
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	f7fa f81c 	bl	8000b78 <__aeabi_d2iz>
 8006b40:	4606      	mov	r6, r0
 8006b42:	f7f9 fcff 	bl	8000544 <__aeabi_i2d>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	f7f9 fbab 	bl	80002a8 <__aeabi_dsub>
 8006b52:	3630      	adds	r6, #48	; 0x30
 8006b54:	f805 6b01 	strb.w	r6, [r5], #1
 8006b58:	ec53 2b19 	vmov	r2, r3, d9
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	4689      	mov	r9, r1
 8006b60:	f7f9 ffcc 	bl	8000afc <__aeabi_dcmplt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d164      	bne.n	8006c32 <_dtoa_r+0x62a>
 8006b68:	4642      	mov	r2, r8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	4937      	ldr	r1, [pc, #220]	; (8006c4c <_dtoa_r+0x644>)
 8006b6e:	2000      	movs	r0, #0
 8006b70:	f7f9 fb9a 	bl	80002a8 <__aeabi_dsub>
 8006b74:	ec53 2b19 	vmov	r2, r3, d9
 8006b78:	f7f9 ffc0 	bl	8000afc <__aeabi_dcmplt>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f040 80b6 	bne.w	8006cee <_dtoa_r+0x6e6>
 8006b82:	9b02      	ldr	r3, [sp, #8]
 8006b84:	429d      	cmp	r5, r3
 8006b86:	f43f af7c 	beq.w	8006a82 <_dtoa_r+0x47a>
 8006b8a:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <_dtoa_r+0x648>)
 8006b8c:	ec51 0b19 	vmov	r0, r1, d9
 8006b90:	2200      	movs	r2, #0
 8006b92:	f7f9 fd41 	bl	8000618 <__aeabi_dmul>
 8006b96:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <_dtoa_r+0x648>)
 8006b98:	ec41 0b19 	vmov	d9, r0, r1
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	f7f9 fd39 	bl	8000618 <__aeabi_dmul>
 8006ba6:	4680      	mov	r8, r0
 8006ba8:	4689      	mov	r9, r1
 8006baa:	e7c5      	b.n	8006b38 <_dtoa_r+0x530>
 8006bac:	ec51 0b17 	vmov	r0, r1, d7
 8006bb0:	f7f9 fd32 	bl	8000618 <__aeabi_dmul>
 8006bb4:	9b02      	ldr	r3, [sp, #8]
 8006bb6:	9d00      	ldr	r5, [sp, #0]
 8006bb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bba:	ec41 0b19 	vmov	d9, r0, r1
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	f7f9 ffd9 	bl	8000b78 <__aeabi_d2iz>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	f7f9 fcbc 	bl	8000544 <__aeabi_i2d>
 8006bcc:	3630      	adds	r6, #48	; 0x30
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4640      	mov	r0, r8
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	f7f9 fb67 	bl	80002a8 <__aeabi_dsub>
 8006bda:	f805 6b01 	strb.w	r6, [r5], #1
 8006bde:	9b02      	ldr	r3, [sp, #8]
 8006be0:	429d      	cmp	r5, r3
 8006be2:	4680      	mov	r8, r0
 8006be4:	4689      	mov	r9, r1
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	d124      	bne.n	8006c36 <_dtoa_r+0x62e>
 8006bec:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <_dtoa_r+0x654>)
 8006bee:	ec51 0b19 	vmov	r0, r1, d9
 8006bf2:	f7f9 fb5b 	bl	80002ac <__adddf3>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	f7f9 ff9b 	bl	8000b38 <__aeabi_dcmpgt>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d173      	bne.n	8006cee <_dtoa_r+0x6e6>
 8006c06:	ec53 2b19 	vmov	r2, r3, d9
 8006c0a:	4914      	ldr	r1, [pc, #80]	; (8006c5c <_dtoa_r+0x654>)
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f7f9 fb4b 	bl	80002a8 <__aeabi_dsub>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4640      	mov	r0, r8
 8006c18:	4649      	mov	r1, r9
 8006c1a:	f7f9 ff6f 	bl	8000afc <__aeabi_dcmplt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f43f af2f 	beq.w	8006a82 <_dtoa_r+0x47a>
 8006c24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c26:	1e6b      	subs	r3, r5, #1
 8006c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c2e:	2b30      	cmp	r3, #48	; 0x30
 8006c30:	d0f8      	beq.n	8006c24 <_dtoa_r+0x61c>
 8006c32:	46bb      	mov	fp, r7
 8006c34:	e04a      	b.n	8006ccc <_dtoa_r+0x6c4>
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <_dtoa_r+0x648>)
 8006c38:	f7f9 fcee 	bl	8000618 <__aeabi_dmul>
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	4689      	mov	r9, r1
 8006c40:	e7bd      	b.n	8006bbe <_dtoa_r+0x5b6>
 8006c42:	bf00      	nop
 8006c44:	08008668 	.word	0x08008668
 8006c48:	08008640 	.word	0x08008640
 8006c4c:	3ff00000 	.word	0x3ff00000
 8006c50:	40240000 	.word	0x40240000
 8006c54:	401c0000 	.word	0x401c0000
 8006c58:	40140000 	.word	0x40140000
 8006c5c:	3fe00000 	.word	0x3fe00000
 8006c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c64:	9d00      	ldr	r5, [sp, #0]
 8006c66:	4642      	mov	r2, r8
 8006c68:	464b      	mov	r3, r9
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	f7f9 fdfd 	bl	800086c <__aeabi_ddiv>
 8006c72:	f7f9 ff81 	bl	8000b78 <__aeabi_d2iz>
 8006c76:	9001      	str	r0, [sp, #4]
 8006c78:	f7f9 fc64 	bl	8000544 <__aeabi_i2d>
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	f7f9 fcca 	bl	8000618 <__aeabi_dmul>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4630      	mov	r0, r6
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f7f9 fb0c 	bl	80002a8 <__aeabi_dsub>
 8006c90:	9e01      	ldr	r6, [sp, #4]
 8006c92:	9f04      	ldr	r7, [sp, #16]
 8006c94:	3630      	adds	r6, #48	; 0x30
 8006c96:	f805 6b01 	strb.w	r6, [r5], #1
 8006c9a:	9e00      	ldr	r6, [sp, #0]
 8006c9c:	1bae      	subs	r6, r5, r6
 8006c9e:	42b7      	cmp	r7, r6
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	d134      	bne.n	8006d10 <_dtoa_r+0x708>
 8006ca6:	f7f9 fb01 	bl	80002ac <__adddf3>
 8006caa:	4642      	mov	r2, r8
 8006cac:	464b      	mov	r3, r9
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	f7f9 ff41 	bl	8000b38 <__aeabi_dcmpgt>
 8006cb6:	b9c8      	cbnz	r0, 8006cec <_dtoa_r+0x6e4>
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f7f9 ff12 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cc4:	b110      	cbz	r0, 8006ccc <_dtoa_r+0x6c4>
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	07db      	lsls	r3, r3, #31
 8006cca:	d40f      	bmi.n	8006cec <_dtoa_r+0x6e4>
 8006ccc:	4651      	mov	r1, sl
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f000 fbcc 	bl	800746c <_Bfree>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cd8:	702b      	strb	r3, [r5, #0]
 8006cda:	f10b 0301 	add.w	r3, fp, #1
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f43f ace2 	beq.w	80066ac <_dtoa_r+0xa4>
 8006ce8:	601d      	str	r5, [r3, #0]
 8006cea:	e4df      	b.n	80066ac <_dtoa_r+0xa4>
 8006cec:	465f      	mov	r7, fp
 8006cee:	462b      	mov	r3, r5
 8006cf0:	461d      	mov	r5, r3
 8006cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cf6:	2a39      	cmp	r2, #57	; 0x39
 8006cf8:	d106      	bne.n	8006d08 <_dtoa_r+0x700>
 8006cfa:	9a00      	ldr	r2, [sp, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d1f7      	bne.n	8006cf0 <_dtoa_r+0x6e8>
 8006d00:	9900      	ldr	r1, [sp, #0]
 8006d02:	2230      	movs	r2, #48	; 0x30
 8006d04:	3701      	adds	r7, #1
 8006d06:	700a      	strb	r2, [r1, #0]
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	3201      	adds	r2, #1
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e790      	b.n	8006c32 <_dtoa_r+0x62a>
 8006d10:	4ba3      	ldr	r3, [pc, #652]	; (8006fa0 <_dtoa_r+0x998>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	f7f9 fc80 	bl	8000618 <__aeabi_dmul>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	f7f9 fee2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d09e      	beq.n	8006c66 <_dtoa_r+0x65e>
 8006d28:	e7d0      	b.n	8006ccc <_dtoa_r+0x6c4>
 8006d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d2c:	2a00      	cmp	r2, #0
 8006d2e:	f000 80ca 	beq.w	8006ec6 <_dtoa_r+0x8be>
 8006d32:	9a07      	ldr	r2, [sp, #28]
 8006d34:	2a01      	cmp	r2, #1
 8006d36:	f300 80ad 	bgt.w	8006e94 <_dtoa_r+0x88c>
 8006d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d3c:	2a00      	cmp	r2, #0
 8006d3e:	f000 80a5 	beq.w	8006e8c <_dtoa_r+0x884>
 8006d42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d46:	9e08      	ldr	r6, [sp, #32]
 8006d48:	9d05      	ldr	r5, [sp, #20]
 8006d4a:	9a05      	ldr	r2, [sp, #20]
 8006d4c:	441a      	add	r2, r3
 8006d4e:	9205      	str	r2, [sp, #20]
 8006d50:	9a06      	ldr	r2, [sp, #24]
 8006d52:	2101      	movs	r1, #1
 8006d54:	441a      	add	r2, r3
 8006d56:	4620      	mov	r0, r4
 8006d58:	9206      	str	r2, [sp, #24]
 8006d5a:	f000 fc3d 	bl	80075d8 <__i2b>
 8006d5e:	4607      	mov	r7, r0
 8006d60:	b165      	cbz	r5, 8006d7c <_dtoa_r+0x774>
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dd09      	ble.n	8006d7c <_dtoa_r+0x774>
 8006d68:	42ab      	cmp	r3, r5
 8006d6a:	9a05      	ldr	r2, [sp, #20]
 8006d6c:	bfa8      	it	ge
 8006d6e:	462b      	movge	r3, r5
 8006d70:	1ad2      	subs	r2, r2, r3
 8006d72:	9205      	str	r2, [sp, #20]
 8006d74:	9a06      	ldr	r2, [sp, #24]
 8006d76:	1aed      	subs	r5, r5, r3
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	9306      	str	r3, [sp, #24]
 8006d7c:	9b08      	ldr	r3, [sp, #32]
 8006d7e:	b1f3      	cbz	r3, 8006dbe <_dtoa_r+0x7b6>
 8006d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 80a3 	beq.w	8006ece <_dtoa_r+0x8c6>
 8006d88:	2e00      	cmp	r6, #0
 8006d8a:	dd10      	ble.n	8006dae <_dtoa_r+0x7a6>
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	4632      	mov	r2, r6
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fce1 	bl	8007758 <__pow5mult>
 8006d96:	4652      	mov	r2, sl
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4607      	mov	r7, r0
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 fc31 	bl	8007604 <__multiply>
 8006da2:	4651      	mov	r1, sl
 8006da4:	4680      	mov	r8, r0
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 fb60 	bl	800746c <_Bfree>
 8006dac:	46c2      	mov	sl, r8
 8006dae:	9b08      	ldr	r3, [sp, #32]
 8006db0:	1b9a      	subs	r2, r3, r6
 8006db2:	d004      	beq.n	8006dbe <_dtoa_r+0x7b6>
 8006db4:	4651      	mov	r1, sl
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 fcce 	bl	8007758 <__pow5mult>
 8006dbc:	4682      	mov	sl, r0
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 fc09 	bl	80075d8 <__i2b>
 8006dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	4606      	mov	r6, r0
 8006dcc:	f340 8081 	ble.w	8006ed2 <_dtoa_r+0x8ca>
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fcbf 	bl	8007758 <__pow5mult>
 8006dda:	9b07      	ldr	r3, [sp, #28]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	4606      	mov	r6, r0
 8006de0:	dd7a      	ble.n	8006ed8 <_dtoa_r+0x8d0>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	6933      	ldr	r3, [r6, #16]
 8006de8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dec:	6918      	ldr	r0, [r3, #16]
 8006dee:	f000 fba5 	bl	800753c <__hi0bits>
 8006df2:	f1c0 0020 	rsb	r0, r0, #32
 8006df6:	9b06      	ldr	r3, [sp, #24]
 8006df8:	4418      	add	r0, r3
 8006dfa:	f010 001f 	ands.w	r0, r0, #31
 8006dfe:	f000 8094 	beq.w	8006f2a <_dtoa_r+0x922>
 8006e02:	f1c0 0320 	rsb	r3, r0, #32
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	f340 8085 	ble.w	8006f16 <_dtoa_r+0x90e>
 8006e0c:	9b05      	ldr	r3, [sp, #20]
 8006e0e:	f1c0 001c 	rsb	r0, r0, #28
 8006e12:	4403      	add	r3, r0
 8006e14:	9305      	str	r3, [sp, #20]
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	4403      	add	r3, r0
 8006e1a:	4405      	add	r5, r0
 8006e1c:	9306      	str	r3, [sp, #24]
 8006e1e:	9b05      	ldr	r3, [sp, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	dd05      	ble.n	8006e30 <_dtoa_r+0x828>
 8006e24:	4651      	mov	r1, sl
 8006e26:	461a      	mov	r2, r3
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 fcef 	bl	800780c <__lshift>
 8006e2e:	4682      	mov	sl, r0
 8006e30:	9b06      	ldr	r3, [sp, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dd05      	ble.n	8006e42 <_dtoa_r+0x83a>
 8006e36:	4631      	mov	r1, r6
 8006e38:	461a      	mov	r2, r3
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 fce6 	bl	800780c <__lshift>
 8006e40:	4606      	mov	r6, r0
 8006e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d072      	beq.n	8006f2e <_dtoa_r+0x926>
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4650      	mov	r0, sl
 8006e4c:	f000 fd4a 	bl	80078e4 <__mcmp>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	da6c      	bge.n	8006f2e <_dtoa_r+0x926>
 8006e54:	2300      	movs	r3, #0
 8006e56:	4651      	mov	r1, sl
 8006e58:	220a      	movs	r2, #10
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 fb28 	bl	80074b0 <__multadd>
 8006e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e66:	4682      	mov	sl, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 81b0 	beq.w	80071ce <_dtoa_r+0xbc6>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	4639      	mov	r1, r7
 8006e72:	220a      	movs	r2, #10
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fb1b 	bl	80074b0 <__multadd>
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	4607      	mov	r7, r0
 8006e80:	f300 8096 	bgt.w	8006fb0 <_dtoa_r+0x9a8>
 8006e84:	9b07      	ldr	r3, [sp, #28]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	dc59      	bgt.n	8006f3e <_dtoa_r+0x936>
 8006e8a:	e091      	b.n	8006fb0 <_dtoa_r+0x9a8>
 8006e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e92:	e758      	b.n	8006d46 <_dtoa_r+0x73e>
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	1e5e      	subs	r6, r3, #1
 8006e98:	9b08      	ldr	r3, [sp, #32]
 8006e9a:	42b3      	cmp	r3, r6
 8006e9c:	bfbf      	itttt	lt
 8006e9e:	9b08      	ldrlt	r3, [sp, #32]
 8006ea0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006ea2:	9608      	strlt	r6, [sp, #32]
 8006ea4:	1af3      	sublt	r3, r6, r3
 8006ea6:	bfb4      	ite	lt
 8006ea8:	18d2      	addlt	r2, r2, r3
 8006eaa:	1b9e      	subge	r6, r3, r6
 8006eac:	9b04      	ldr	r3, [sp, #16]
 8006eae:	bfbc      	itt	lt
 8006eb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006eb2:	2600      	movlt	r6, #0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bfb7      	itett	lt
 8006eb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ebc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ec0:	1a9d      	sublt	r5, r3, r2
 8006ec2:	2300      	movlt	r3, #0
 8006ec4:	e741      	b.n	8006d4a <_dtoa_r+0x742>
 8006ec6:	9e08      	ldr	r6, [sp, #32]
 8006ec8:	9d05      	ldr	r5, [sp, #20]
 8006eca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ecc:	e748      	b.n	8006d60 <_dtoa_r+0x758>
 8006ece:	9a08      	ldr	r2, [sp, #32]
 8006ed0:	e770      	b.n	8006db4 <_dtoa_r+0x7ac>
 8006ed2:	9b07      	ldr	r3, [sp, #28]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	dc19      	bgt.n	8006f0c <_dtoa_r+0x904>
 8006ed8:	9b02      	ldr	r3, [sp, #8]
 8006eda:	b9bb      	cbnz	r3, 8006f0c <_dtoa_r+0x904>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ee2:	b99b      	cbnz	r3, 8006f0c <_dtoa_r+0x904>
 8006ee4:	9b03      	ldr	r3, [sp, #12]
 8006ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eea:	0d1b      	lsrs	r3, r3, #20
 8006eec:	051b      	lsls	r3, r3, #20
 8006eee:	b183      	cbz	r3, 8006f12 <_dtoa_r+0x90a>
 8006ef0:	9b05      	ldr	r3, [sp, #20]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	9305      	str	r3, [sp, #20]
 8006ef6:	9b06      	ldr	r3, [sp, #24]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	9306      	str	r3, [sp, #24]
 8006efc:	f04f 0801 	mov.w	r8, #1
 8006f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f47f af6f 	bne.w	8006de6 <_dtoa_r+0x7de>
 8006f08:	2001      	movs	r0, #1
 8006f0a:	e774      	b.n	8006df6 <_dtoa_r+0x7ee>
 8006f0c:	f04f 0800 	mov.w	r8, #0
 8006f10:	e7f6      	b.n	8006f00 <_dtoa_r+0x8f8>
 8006f12:	4698      	mov	r8, r3
 8006f14:	e7f4      	b.n	8006f00 <_dtoa_r+0x8f8>
 8006f16:	d082      	beq.n	8006e1e <_dtoa_r+0x816>
 8006f18:	9a05      	ldr	r2, [sp, #20]
 8006f1a:	331c      	adds	r3, #28
 8006f1c:	441a      	add	r2, r3
 8006f1e:	9205      	str	r2, [sp, #20]
 8006f20:	9a06      	ldr	r2, [sp, #24]
 8006f22:	441a      	add	r2, r3
 8006f24:	441d      	add	r5, r3
 8006f26:	9206      	str	r2, [sp, #24]
 8006f28:	e779      	b.n	8006e1e <_dtoa_r+0x816>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	e7f4      	b.n	8006f18 <_dtoa_r+0x910>
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dc37      	bgt.n	8006fa4 <_dtoa_r+0x99c>
 8006f34:	9b07      	ldr	r3, [sp, #28]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	dd34      	ble.n	8006fa4 <_dtoa_r+0x99c>
 8006f3a:	9b04      	ldr	r3, [sp, #16]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	b963      	cbnz	r3, 8006f5c <_dtoa_r+0x954>
 8006f42:	4631      	mov	r1, r6
 8006f44:	2205      	movs	r2, #5
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 fab2 	bl	80074b0 <__multadd>
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4606      	mov	r6, r0
 8006f50:	4650      	mov	r0, sl
 8006f52:	f000 fcc7 	bl	80078e4 <__mcmp>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f73f adbb 	bgt.w	8006ad2 <_dtoa_r+0x4ca>
 8006f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f5e:	9d00      	ldr	r5, [sp, #0]
 8006f60:	ea6f 0b03 	mvn.w	fp, r3
 8006f64:	f04f 0800 	mov.w	r8, #0
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fa7e 	bl	800746c <_Bfree>
 8006f70:	2f00      	cmp	r7, #0
 8006f72:	f43f aeab 	beq.w	8006ccc <_dtoa_r+0x6c4>
 8006f76:	f1b8 0f00 	cmp.w	r8, #0
 8006f7a:	d005      	beq.n	8006f88 <_dtoa_r+0x980>
 8006f7c:	45b8      	cmp	r8, r7
 8006f7e:	d003      	beq.n	8006f88 <_dtoa_r+0x980>
 8006f80:	4641      	mov	r1, r8
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 fa72 	bl	800746c <_Bfree>
 8006f88:	4639      	mov	r1, r7
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fa6e 	bl	800746c <_Bfree>
 8006f90:	e69c      	b.n	8006ccc <_dtoa_r+0x6c4>
 8006f92:	2600      	movs	r6, #0
 8006f94:	4637      	mov	r7, r6
 8006f96:	e7e1      	b.n	8006f5c <_dtoa_r+0x954>
 8006f98:	46bb      	mov	fp, r7
 8006f9a:	4637      	mov	r7, r6
 8006f9c:	e599      	b.n	8006ad2 <_dtoa_r+0x4ca>
 8006f9e:	bf00      	nop
 8006fa0:	40240000 	.word	0x40240000
 8006fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 80c8 	beq.w	800713c <_dtoa_r+0xb34>
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	2d00      	cmp	r5, #0
 8006fb2:	dd05      	ble.n	8006fc0 <_dtoa_r+0x9b8>
 8006fb4:	4639      	mov	r1, r7
 8006fb6:	462a      	mov	r2, r5
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fc27 	bl	800780c <__lshift>
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	f1b8 0f00 	cmp.w	r8, #0
 8006fc4:	d05b      	beq.n	800707e <_dtoa_r+0xa76>
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 fa0f 	bl	80073ec <_Balloc>
 8006fce:	4605      	mov	r5, r0
 8006fd0:	b928      	cbnz	r0, 8006fde <_dtoa_r+0x9d6>
 8006fd2:	4b83      	ldr	r3, [pc, #524]	; (80071e0 <_dtoa_r+0xbd8>)
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006fda:	f7ff bb2e 	b.w	800663a <_dtoa_r+0x32>
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	3202      	adds	r2, #2
 8006fe2:	0092      	lsls	r2, r2, #2
 8006fe4:	f107 010c 	add.w	r1, r7, #12
 8006fe8:	300c      	adds	r0, #12
 8006fea:	f001 f973 	bl	80082d4 <memcpy>
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 fc0a 	bl	800780c <__lshift>
 8006ff8:	9b00      	ldr	r3, [sp, #0]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007002:	4413      	add	r3, r2
 8007004:	9308      	str	r3, [sp, #32]
 8007006:	9b02      	ldr	r3, [sp, #8]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	46b8      	mov	r8, r7
 800700e:	9306      	str	r3, [sp, #24]
 8007010:	4607      	mov	r7, r0
 8007012:	9b04      	ldr	r3, [sp, #16]
 8007014:	4631      	mov	r1, r6
 8007016:	3b01      	subs	r3, #1
 8007018:	4650      	mov	r0, sl
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	f7ff fa6b 	bl	80064f6 <quorem>
 8007020:	4641      	mov	r1, r8
 8007022:	9002      	str	r0, [sp, #8]
 8007024:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007028:	4650      	mov	r0, sl
 800702a:	f000 fc5b 	bl	80078e4 <__mcmp>
 800702e:	463a      	mov	r2, r7
 8007030:	9005      	str	r0, [sp, #20]
 8007032:	4631      	mov	r1, r6
 8007034:	4620      	mov	r0, r4
 8007036:	f000 fc71 	bl	800791c <__mdiff>
 800703a:	68c2      	ldr	r2, [r0, #12]
 800703c:	4605      	mov	r5, r0
 800703e:	bb02      	cbnz	r2, 8007082 <_dtoa_r+0xa7a>
 8007040:	4601      	mov	r1, r0
 8007042:	4650      	mov	r0, sl
 8007044:	f000 fc4e 	bl	80078e4 <__mcmp>
 8007048:	4602      	mov	r2, r0
 800704a:	4629      	mov	r1, r5
 800704c:	4620      	mov	r0, r4
 800704e:	9209      	str	r2, [sp, #36]	; 0x24
 8007050:	f000 fa0c 	bl	800746c <_Bfree>
 8007054:	9b07      	ldr	r3, [sp, #28]
 8007056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007058:	9d04      	ldr	r5, [sp, #16]
 800705a:	ea43 0102 	orr.w	r1, r3, r2
 800705e:	9b06      	ldr	r3, [sp, #24]
 8007060:	4319      	orrs	r1, r3
 8007062:	d110      	bne.n	8007086 <_dtoa_r+0xa7e>
 8007064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007068:	d029      	beq.n	80070be <_dtoa_r+0xab6>
 800706a:	9b05      	ldr	r3, [sp, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd02      	ble.n	8007076 <_dtoa_r+0xa6e>
 8007070:	9b02      	ldr	r3, [sp, #8]
 8007072:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	f883 9000 	strb.w	r9, [r3]
 800707c:	e774      	b.n	8006f68 <_dtoa_r+0x960>
 800707e:	4638      	mov	r0, r7
 8007080:	e7ba      	b.n	8006ff8 <_dtoa_r+0x9f0>
 8007082:	2201      	movs	r2, #1
 8007084:	e7e1      	b.n	800704a <_dtoa_r+0xa42>
 8007086:	9b05      	ldr	r3, [sp, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	db04      	blt.n	8007096 <_dtoa_r+0xa8e>
 800708c:	9907      	ldr	r1, [sp, #28]
 800708e:	430b      	orrs	r3, r1
 8007090:	9906      	ldr	r1, [sp, #24]
 8007092:	430b      	orrs	r3, r1
 8007094:	d120      	bne.n	80070d8 <_dtoa_r+0xad0>
 8007096:	2a00      	cmp	r2, #0
 8007098:	dded      	ble.n	8007076 <_dtoa_r+0xa6e>
 800709a:	4651      	mov	r1, sl
 800709c:	2201      	movs	r2, #1
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fbb4 	bl	800780c <__lshift>
 80070a4:	4631      	mov	r1, r6
 80070a6:	4682      	mov	sl, r0
 80070a8:	f000 fc1c 	bl	80078e4 <__mcmp>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	dc03      	bgt.n	80070b8 <_dtoa_r+0xab0>
 80070b0:	d1e1      	bne.n	8007076 <_dtoa_r+0xa6e>
 80070b2:	f019 0f01 	tst.w	r9, #1
 80070b6:	d0de      	beq.n	8007076 <_dtoa_r+0xa6e>
 80070b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070bc:	d1d8      	bne.n	8007070 <_dtoa_r+0xa68>
 80070be:	9a01      	ldr	r2, [sp, #4]
 80070c0:	2339      	movs	r3, #57	; 0x39
 80070c2:	7013      	strb	r3, [r2, #0]
 80070c4:	462b      	mov	r3, r5
 80070c6:	461d      	mov	r5, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070ce:	2a39      	cmp	r2, #57	; 0x39
 80070d0:	d06c      	beq.n	80071ac <_dtoa_r+0xba4>
 80070d2:	3201      	adds	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e747      	b.n	8006f68 <_dtoa_r+0x960>
 80070d8:	2a00      	cmp	r2, #0
 80070da:	dd07      	ble.n	80070ec <_dtoa_r+0xae4>
 80070dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070e0:	d0ed      	beq.n	80070be <_dtoa_r+0xab6>
 80070e2:	9a01      	ldr	r2, [sp, #4]
 80070e4:	f109 0301 	add.w	r3, r9, #1
 80070e8:	7013      	strb	r3, [r2, #0]
 80070ea:	e73d      	b.n	8006f68 <_dtoa_r+0x960>
 80070ec:	9b04      	ldr	r3, [sp, #16]
 80070ee:	9a08      	ldr	r2, [sp, #32]
 80070f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d043      	beq.n	8007180 <_dtoa_r+0xb78>
 80070f8:	4651      	mov	r1, sl
 80070fa:	2300      	movs	r3, #0
 80070fc:	220a      	movs	r2, #10
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 f9d6 	bl	80074b0 <__multadd>
 8007104:	45b8      	cmp	r8, r7
 8007106:	4682      	mov	sl, r0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f04f 020a 	mov.w	r2, #10
 8007110:	4641      	mov	r1, r8
 8007112:	4620      	mov	r0, r4
 8007114:	d107      	bne.n	8007126 <_dtoa_r+0xb1e>
 8007116:	f000 f9cb 	bl	80074b0 <__multadd>
 800711a:	4680      	mov	r8, r0
 800711c:	4607      	mov	r7, r0
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	3301      	adds	r3, #1
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	e775      	b.n	8007012 <_dtoa_r+0xa0a>
 8007126:	f000 f9c3 	bl	80074b0 <__multadd>
 800712a:	4639      	mov	r1, r7
 800712c:	4680      	mov	r8, r0
 800712e:	2300      	movs	r3, #0
 8007130:	220a      	movs	r2, #10
 8007132:	4620      	mov	r0, r4
 8007134:	f000 f9bc 	bl	80074b0 <__multadd>
 8007138:	4607      	mov	r7, r0
 800713a:	e7f0      	b.n	800711e <_dtoa_r+0xb16>
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	9d00      	ldr	r5, [sp, #0]
 8007142:	4631      	mov	r1, r6
 8007144:	4650      	mov	r0, sl
 8007146:	f7ff f9d6 	bl	80064f6 <quorem>
 800714a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800714e:	9b00      	ldr	r3, [sp, #0]
 8007150:	f805 9b01 	strb.w	r9, [r5], #1
 8007154:	1aea      	subs	r2, r5, r3
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	4293      	cmp	r3, r2
 800715a:	dd07      	ble.n	800716c <_dtoa_r+0xb64>
 800715c:	4651      	mov	r1, sl
 800715e:	2300      	movs	r3, #0
 8007160:	220a      	movs	r2, #10
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f9a4 	bl	80074b0 <__multadd>
 8007168:	4682      	mov	sl, r0
 800716a:	e7ea      	b.n	8007142 <_dtoa_r+0xb3a>
 800716c:	9b01      	ldr	r3, [sp, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	bfc8      	it	gt
 8007172:	461d      	movgt	r5, r3
 8007174:	9b00      	ldr	r3, [sp, #0]
 8007176:	bfd8      	it	le
 8007178:	2501      	movle	r5, #1
 800717a:	441d      	add	r5, r3
 800717c:	f04f 0800 	mov.w	r8, #0
 8007180:	4651      	mov	r1, sl
 8007182:	2201      	movs	r2, #1
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fb41 	bl	800780c <__lshift>
 800718a:	4631      	mov	r1, r6
 800718c:	4682      	mov	sl, r0
 800718e:	f000 fba9 	bl	80078e4 <__mcmp>
 8007192:	2800      	cmp	r0, #0
 8007194:	dc96      	bgt.n	80070c4 <_dtoa_r+0xabc>
 8007196:	d102      	bne.n	800719e <_dtoa_r+0xb96>
 8007198:	f019 0f01 	tst.w	r9, #1
 800719c:	d192      	bne.n	80070c4 <_dtoa_r+0xabc>
 800719e:	462b      	mov	r3, r5
 80071a0:	461d      	mov	r5, r3
 80071a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071a6:	2a30      	cmp	r2, #48	; 0x30
 80071a8:	d0fa      	beq.n	80071a0 <_dtoa_r+0xb98>
 80071aa:	e6dd      	b.n	8006f68 <_dtoa_r+0x960>
 80071ac:	9a00      	ldr	r2, [sp, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d189      	bne.n	80070c6 <_dtoa_r+0xabe>
 80071b2:	f10b 0b01 	add.w	fp, fp, #1
 80071b6:	2331      	movs	r3, #49	; 0x31
 80071b8:	e796      	b.n	80070e8 <_dtoa_r+0xae0>
 80071ba:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <_dtoa_r+0xbdc>)
 80071bc:	f7ff ba99 	b.w	80066f2 <_dtoa_r+0xea>
 80071c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f47f aa6d 	bne.w	80066a2 <_dtoa_r+0x9a>
 80071c8:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <_dtoa_r+0xbe0>)
 80071ca:	f7ff ba92 	b.w	80066f2 <_dtoa_r+0xea>
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dcb5      	bgt.n	8007140 <_dtoa_r+0xb38>
 80071d4:	9b07      	ldr	r3, [sp, #28]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	f73f aeb1 	bgt.w	8006f3e <_dtoa_r+0x936>
 80071dc:	e7b0      	b.n	8007140 <_dtoa_r+0xb38>
 80071de:	bf00      	nop
 80071e0:	080085d0 	.word	0x080085d0
 80071e4:	08008530 	.word	0x08008530
 80071e8:	08008554 	.word	0x08008554

080071ec <_free_r>:
 80071ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ee:	2900      	cmp	r1, #0
 80071f0:	d044      	beq.n	800727c <_free_r+0x90>
 80071f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f6:	9001      	str	r0, [sp, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f1a1 0404 	sub.w	r4, r1, #4
 80071fe:	bfb8      	it	lt
 8007200:	18e4      	addlt	r4, r4, r3
 8007202:	f000 f8e7 	bl	80073d4 <__malloc_lock>
 8007206:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <_free_r+0x94>)
 8007208:	9801      	ldr	r0, [sp, #4]
 800720a:	6813      	ldr	r3, [r2, #0]
 800720c:	b933      	cbnz	r3, 800721c <_free_r+0x30>
 800720e:	6063      	str	r3, [r4, #4]
 8007210:	6014      	str	r4, [r2, #0]
 8007212:	b003      	add	sp, #12
 8007214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007218:	f000 b8e2 	b.w	80073e0 <__malloc_unlock>
 800721c:	42a3      	cmp	r3, r4
 800721e:	d908      	bls.n	8007232 <_free_r+0x46>
 8007220:	6825      	ldr	r5, [r4, #0]
 8007222:	1961      	adds	r1, r4, r5
 8007224:	428b      	cmp	r3, r1
 8007226:	bf01      	itttt	eq
 8007228:	6819      	ldreq	r1, [r3, #0]
 800722a:	685b      	ldreq	r3, [r3, #4]
 800722c:	1949      	addeq	r1, r1, r5
 800722e:	6021      	streq	r1, [r4, #0]
 8007230:	e7ed      	b.n	800720e <_free_r+0x22>
 8007232:	461a      	mov	r2, r3
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b10b      	cbz	r3, 800723c <_free_r+0x50>
 8007238:	42a3      	cmp	r3, r4
 800723a:	d9fa      	bls.n	8007232 <_free_r+0x46>
 800723c:	6811      	ldr	r1, [r2, #0]
 800723e:	1855      	adds	r5, r2, r1
 8007240:	42a5      	cmp	r5, r4
 8007242:	d10b      	bne.n	800725c <_free_r+0x70>
 8007244:	6824      	ldr	r4, [r4, #0]
 8007246:	4421      	add	r1, r4
 8007248:	1854      	adds	r4, r2, r1
 800724a:	42a3      	cmp	r3, r4
 800724c:	6011      	str	r1, [r2, #0]
 800724e:	d1e0      	bne.n	8007212 <_free_r+0x26>
 8007250:	681c      	ldr	r4, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	6053      	str	r3, [r2, #4]
 8007256:	440c      	add	r4, r1
 8007258:	6014      	str	r4, [r2, #0]
 800725a:	e7da      	b.n	8007212 <_free_r+0x26>
 800725c:	d902      	bls.n	8007264 <_free_r+0x78>
 800725e:	230c      	movs	r3, #12
 8007260:	6003      	str	r3, [r0, #0]
 8007262:	e7d6      	b.n	8007212 <_free_r+0x26>
 8007264:	6825      	ldr	r5, [r4, #0]
 8007266:	1961      	adds	r1, r4, r5
 8007268:	428b      	cmp	r3, r1
 800726a:	bf04      	itt	eq
 800726c:	6819      	ldreq	r1, [r3, #0]
 800726e:	685b      	ldreq	r3, [r3, #4]
 8007270:	6063      	str	r3, [r4, #4]
 8007272:	bf04      	itt	eq
 8007274:	1949      	addeq	r1, r1, r5
 8007276:	6021      	streq	r1, [r4, #0]
 8007278:	6054      	str	r4, [r2, #4]
 800727a:	e7ca      	b.n	8007212 <_free_r+0x26>
 800727c:	b003      	add	sp, #12
 800727e:	bd30      	pop	{r4, r5, pc}
 8007280:	20000bb0 	.word	0x20000bb0

08007284 <malloc>:
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <malloc+0xc>)
 8007286:	4601      	mov	r1, r0
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	f000 b823 	b.w	80072d4 <_malloc_r>
 800728e:	bf00      	nop
 8007290:	20000064 	.word	0x20000064

08007294 <sbrk_aligned>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4e0e      	ldr	r6, [pc, #56]	; (80072d0 <sbrk_aligned+0x3c>)
 8007298:	460c      	mov	r4, r1
 800729a:	6831      	ldr	r1, [r6, #0]
 800729c:	4605      	mov	r5, r0
 800729e:	b911      	cbnz	r1, 80072a6 <sbrk_aligned+0x12>
 80072a0:	f001 f808 	bl	80082b4 <_sbrk_r>
 80072a4:	6030      	str	r0, [r6, #0]
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f001 f803 	bl	80082b4 <_sbrk_r>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d00a      	beq.n	80072c8 <sbrk_aligned+0x34>
 80072b2:	1cc4      	adds	r4, r0, #3
 80072b4:	f024 0403 	bic.w	r4, r4, #3
 80072b8:	42a0      	cmp	r0, r4
 80072ba:	d007      	beq.n	80072cc <sbrk_aligned+0x38>
 80072bc:	1a21      	subs	r1, r4, r0
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 fff8 	bl	80082b4 <_sbrk_r>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d101      	bne.n	80072cc <sbrk_aligned+0x38>
 80072c8:	f04f 34ff 	mov.w	r4, #4294967295
 80072cc:	4620      	mov	r0, r4
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	20000bb4 	.word	0x20000bb4

080072d4 <_malloc_r>:
 80072d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d8:	1ccd      	adds	r5, r1, #3
 80072da:	f025 0503 	bic.w	r5, r5, #3
 80072de:	3508      	adds	r5, #8
 80072e0:	2d0c      	cmp	r5, #12
 80072e2:	bf38      	it	cc
 80072e4:	250c      	movcc	r5, #12
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	4607      	mov	r7, r0
 80072ea:	db01      	blt.n	80072f0 <_malloc_r+0x1c>
 80072ec:	42a9      	cmp	r1, r5
 80072ee:	d905      	bls.n	80072fc <_malloc_r+0x28>
 80072f0:	230c      	movs	r3, #12
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	2600      	movs	r6, #0
 80072f6:	4630      	mov	r0, r6
 80072f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073d0 <_malloc_r+0xfc>
 8007300:	f000 f868 	bl	80073d4 <__malloc_lock>
 8007304:	f8d8 3000 	ldr.w	r3, [r8]
 8007308:	461c      	mov	r4, r3
 800730a:	bb5c      	cbnz	r4, 8007364 <_malloc_r+0x90>
 800730c:	4629      	mov	r1, r5
 800730e:	4638      	mov	r0, r7
 8007310:	f7ff ffc0 	bl	8007294 <sbrk_aligned>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	4604      	mov	r4, r0
 8007318:	d155      	bne.n	80073c6 <_malloc_r+0xf2>
 800731a:	f8d8 4000 	ldr.w	r4, [r8]
 800731e:	4626      	mov	r6, r4
 8007320:	2e00      	cmp	r6, #0
 8007322:	d145      	bne.n	80073b0 <_malloc_r+0xdc>
 8007324:	2c00      	cmp	r4, #0
 8007326:	d048      	beq.n	80073ba <_malloc_r+0xe6>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	4631      	mov	r1, r6
 800732c:	4638      	mov	r0, r7
 800732e:	eb04 0903 	add.w	r9, r4, r3
 8007332:	f000 ffbf 	bl	80082b4 <_sbrk_r>
 8007336:	4581      	cmp	r9, r0
 8007338:	d13f      	bne.n	80073ba <_malloc_r+0xe6>
 800733a:	6821      	ldr	r1, [r4, #0]
 800733c:	1a6d      	subs	r5, r5, r1
 800733e:	4629      	mov	r1, r5
 8007340:	4638      	mov	r0, r7
 8007342:	f7ff ffa7 	bl	8007294 <sbrk_aligned>
 8007346:	3001      	adds	r0, #1
 8007348:	d037      	beq.n	80073ba <_malloc_r+0xe6>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	442b      	add	r3, r5
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	f8d8 3000 	ldr.w	r3, [r8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d038      	beq.n	80073ca <_malloc_r+0xf6>
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	42a2      	cmp	r2, r4
 800735c:	d12b      	bne.n	80073b6 <_malloc_r+0xe2>
 800735e:	2200      	movs	r2, #0
 8007360:	605a      	str	r2, [r3, #4]
 8007362:	e00f      	b.n	8007384 <_malloc_r+0xb0>
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	1b52      	subs	r2, r2, r5
 8007368:	d41f      	bmi.n	80073aa <_malloc_r+0xd6>
 800736a:	2a0b      	cmp	r2, #11
 800736c:	d917      	bls.n	800739e <_malloc_r+0xca>
 800736e:	1961      	adds	r1, r4, r5
 8007370:	42a3      	cmp	r3, r4
 8007372:	6025      	str	r5, [r4, #0]
 8007374:	bf18      	it	ne
 8007376:	6059      	strne	r1, [r3, #4]
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	bf08      	it	eq
 800737c:	f8c8 1000 	streq.w	r1, [r8]
 8007380:	5162      	str	r2, [r4, r5]
 8007382:	604b      	str	r3, [r1, #4]
 8007384:	4638      	mov	r0, r7
 8007386:	f104 060b 	add.w	r6, r4, #11
 800738a:	f000 f829 	bl	80073e0 <__malloc_unlock>
 800738e:	f026 0607 	bic.w	r6, r6, #7
 8007392:	1d23      	adds	r3, r4, #4
 8007394:	1af2      	subs	r2, r6, r3
 8007396:	d0ae      	beq.n	80072f6 <_malloc_r+0x22>
 8007398:	1b9b      	subs	r3, r3, r6
 800739a:	50a3      	str	r3, [r4, r2]
 800739c:	e7ab      	b.n	80072f6 <_malloc_r+0x22>
 800739e:	42a3      	cmp	r3, r4
 80073a0:	6862      	ldr	r2, [r4, #4]
 80073a2:	d1dd      	bne.n	8007360 <_malloc_r+0x8c>
 80073a4:	f8c8 2000 	str.w	r2, [r8]
 80073a8:	e7ec      	b.n	8007384 <_malloc_r+0xb0>
 80073aa:	4623      	mov	r3, r4
 80073ac:	6864      	ldr	r4, [r4, #4]
 80073ae:	e7ac      	b.n	800730a <_malloc_r+0x36>
 80073b0:	4634      	mov	r4, r6
 80073b2:	6876      	ldr	r6, [r6, #4]
 80073b4:	e7b4      	b.n	8007320 <_malloc_r+0x4c>
 80073b6:	4613      	mov	r3, r2
 80073b8:	e7cc      	b.n	8007354 <_malloc_r+0x80>
 80073ba:	230c      	movs	r3, #12
 80073bc:	603b      	str	r3, [r7, #0]
 80073be:	4638      	mov	r0, r7
 80073c0:	f000 f80e 	bl	80073e0 <__malloc_unlock>
 80073c4:	e797      	b.n	80072f6 <_malloc_r+0x22>
 80073c6:	6025      	str	r5, [r4, #0]
 80073c8:	e7dc      	b.n	8007384 <_malloc_r+0xb0>
 80073ca:	605b      	str	r3, [r3, #4]
 80073cc:	deff      	udf	#255	; 0xff
 80073ce:	bf00      	nop
 80073d0:	20000bb0 	.word	0x20000bb0

080073d4 <__malloc_lock>:
 80073d4:	4801      	ldr	r0, [pc, #4]	; (80073dc <__malloc_lock+0x8>)
 80073d6:	f7ff b88c 	b.w	80064f2 <__retarget_lock_acquire_recursive>
 80073da:	bf00      	nop
 80073dc:	20000bac 	.word	0x20000bac

080073e0 <__malloc_unlock>:
 80073e0:	4801      	ldr	r0, [pc, #4]	; (80073e8 <__malloc_unlock+0x8>)
 80073e2:	f7ff b887 	b.w	80064f4 <__retarget_lock_release_recursive>
 80073e6:	bf00      	nop
 80073e8:	20000bac 	.word	0x20000bac

080073ec <_Balloc>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	69c6      	ldr	r6, [r0, #28]
 80073f0:	4604      	mov	r4, r0
 80073f2:	460d      	mov	r5, r1
 80073f4:	b976      	cbnz	r6, 8007414 <_Balloc+0x28>
 80073f6:	2010      	movs	r0, #16
 80073f8:	f7ff ff44 	bl	8007284 <malloc>
 80073fc:	4602      	mov	r2, r0
 80073fe:	61e0      	str	r0, [r4, #28]
 8007400:	b920      	cbnz	r0, 800740c <_Balloc+0x20>
 8007402:	4b18      	ldr	r3, [pc, #96]	; (8007464 <_Balloc+0x78>)
 8007404:	4818      	ldr	r0, [pc, #96]	; (8007468 <_Balloc+0x7c>)
 8007406:	216b      	movs	r1, #107	; 0x6b
 8007408:	f000 ff72 	bl	80082f0 <__assert_func>
 800740c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007410:	6006      	str	r6, [r0, #0]
 8007412:	60c6      	str	r6, [r0, #12]
 8007414:	69e6      	ldr	r6, [r4, #28]
 8007416:	68f3      	ldr	r3, [r6, #12]
 8007418:	b183      	cbz	r3, 800743c <_Balloc+0x50>
 800741a:	69e3      	ldr	r3, [r4, #28]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007422:	b9b8      	cbnz	r0, 8007454 <_Balloc+0x68>
 8007424:	2101      	movs	r1, #1
 8007426:	fa01 f605 	lsl.w	r6, r1, r5
 800742a:	1d72      	adds	r2, r6, #5
 800742c:	0092      	lsls	r2, r2, #2
 800742e:	4620      	mov	r0, r4
 8007430:	f000 ff7c 	bl	800832c <_calloc_r>
 8007434:	b160      	cbz	r0, 8007450 <_Balloc+0x64>
 8007436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800743a:	e00e      	b.n	800745a <_Balloc+0x6e>
 800743c:	2221      	movs	r2, #33	; 0x21
 800743e:	2104      	movs	r1, #4
 8007440:	4620      	mov	r0, r4
 8007442:	f000 ff73 	bl	800832c <_calloc_r>
 8007446:	69e3      	ldr	r3, [r4, #28]
 8007448:	60f0      	str	r0, [r6, #12]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e4      	bne.n	800741a <_Balloc+0x2e>
 8007450:	2000      	movs	r0, #0
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	6802      	ldr	r2, [r0, #0]
 8007456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800745a:	2300      	movs	r3, #0
 800745c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007460:	e7f7      	b.n	8007452 <_Balloc+0x66>
 8007462:	bf00      	nop
 8007464:	08008561 	.word	0x08008561
 8007468:	080085e1 	.word	0x080085e1

0800746c <_Bfree>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	69c6      	ldr	r6, [r0, #28]
 8007470:	4605      	mov	r5, r0
 8007472:	460c      	mov	r4, r1
 8007474:	b976      	cbnz	r6, 8007494 <_Bfree+0x28>
 8007476:	2010      	movs	r0, #16
 8007478:	f7ff ff04 	bl	8007284 <malloc>
 800747c:	4602      	mov	r2, r0
 800747e:	61e8      	str	r0, [r5, #28]
 8007480:	b920      	cbnz	r0, 800748c <_Bfree+0x20>
 8007482:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <_Bfree+0x3c>)
 8007484:	4809      	ldr	r0, [pc, #36]	; (80074ac <_Bfree+0x40>)
 8007486:	218f      	movs	r1, #143	; 0x8f
 8007488:	f000 ff32 	bl	80082f0 <__assert_func>
 800748c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007490:	6006      	str	r6, [r0, #0]
 8007492:	60c6      	str	r6, [r0, #12]
 8007494:	b13c      	cbz	r4, 80074a6 <_Bfree+0x3a>
 8007496:	69eb      	ldr	r3, [r5, #28]
 8007498:	6862      	ldr	r2, [r4, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074a0:	6021      	str	r1, [r4, #0]
 80074a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074a6:	bd70      	pop	{r4, r5, r6, pc}
 80074a8:	08008561 	.word	0x08008561
 80074ac:	080085e1 	.word	0x080085e1

080074b0 <__multadd>:
 80074b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b4:	690d      	ldr	r5, [r1, #16]
 80074b6:	4607      	mov	r7, r0
 80074b8:	460c      	mov	r4, r1
 80074ba:	461e      	mov	r6, r3
 80074bc:	f101 0c14 	add.w	ip, r1, #20
 80074c0:	2000      	movs	r0, #0
 80074c2:	f8dc 3000 	ldr.w	r3, [ip]
 80074c6:	b299      	uxth	r1, r3
 80074c8:	fb02 6101 	mla	r1, r2, r1, r6
 80074cc:	0c1e      	lsrs	r6, r3, #16
 80074ce:	0c0b      	lsrs	r3, r1, #16
 80074d0:	fb02 3306 	mla	r3, r2, r6, r3
 80074d4:	b289      	uxth	r1, r1
 80074d6:	3001      	adds	r0, #1
 80074d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074dc:	4285      	cmp	r5, r0
 80074de:	f84c 1b04 	str.w	r1, [ip], #4
 80074e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074e6:	dcec      	bgt.n	80074c2 <__multadd+0x12>
 80074e8:	b30e      	cbz	r6, 800752e <__multadd+0x7e>
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	42ab      	cmp	r3, r5
 80074ee:	dc19      	bgt.n	8007524 <__multadd+0x74>
 80074f0:	6861      	ldr	r1, [r4, #4]
 80074f2:	4638      	mov	r0, r7
 80074f4:	3101      	adds	r1, #1
 80074f6:	f7ff ff79 	bl	80073ec <_Balloc>
 80074fa:	4680      	mov	r8, r0
 80074fc:	b928      	cbnz	r0, 800750a <__multadd+0x5a>
 80074fe:	4602      	mov	r2, r0
 8007500:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <__multadd+0x84>)
 8007502:	480d      	ldr	r0, [pc, #52]	; (8007538 <__multadd+0x88>)
 8007504:	21ba      	movs	r1, #186	; 0xba
 8007506:	f000 fef3 	bl	80082f0 <__assert_func>
 800750a:	6922      	ldr	r2, [r4, #16]
 800750c:	3202      	adds	r2, #2
 800750e:	f104 010c 	add.w	r1, r4, #12
 8007512:	0092      	lsls	r2, r2, #2
 8007514:	300c      	adds	r0, #12
 8007516:	f000 fedd 	bl	80082d4 <memcpy>
 800751a:	4621      	mov	r1, r4
 800751c:	4638      	mov	r0, r7
 800751e:	f7ff ffa5 	bl	800746c <_Bfree>
 8007522:	4644      	mov	r4, r8
 8007524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007528:	3501      	adds	r5, #1
 800752a:	615e      	str	r6, [r3, #20]
 800752c:	6125      	str	r5, [r4, #16]
 800752e:	4620      	mov	r0, r4
 8007530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007534:	080085d0 	.word	0x080085d0
 8007538:	080085e1 	.word	0x080085e1

0800753c <__hi0bits>:
 800753c:	0c03      	lsrs	r3, r0, #16
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	b9d3      	cbnz	r3, 8007578 <__hi0bits+0x3c>
 8007542:	0400      	lsls	r0, r0, #16
 8007544:	2310      	movs	r3, #16
 8007546:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800754a:	bf04      	itt	eq
 800754c:	0200      	lsleq	r0, r0, #8
 800754e:	3308      	addeq	r3, #8
 8007550:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007554:	bf04      	itt	eq
 8007556:	0100      	lsleq	r0, r0, #4
 8007558:	3304      	addeq	r3, #4
 800755a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800755e:	bf04      	itt	eq
 8007560:	0080      	lsleq	r0, r0, #2
 8007562:	3302      	addeq	r3, #2
 8007564:	2800      	cmp	r0, #0
 8007566:	db05      	blt.n	8007574 <__hi0bits+0x38>
 8007568:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800756c:	f103 0301 	add.w	r3, r3, #1
 8007570:	bf08      	it	eq
 8007572:	2320      	moveq	r3, #32
 8007574:	4618      	mov	r0, r3
 8007576:	4770      	bx	lr
 8007578:	2300      	movs	r3, #0
 800757a:	e7e4      	b.n	8007546 <__hi0bits+0xa>

0800757c <__lo0bits>:
 800757c:	6803      	ldr	r3, [r0, #0]
 800757e:	f013 0207 	ands.w	r2, r3, #7
 8007582:	d00c      	beq.n	800759e <__lo0bits+0x22>
 8007584:	07d9      	lsls	r1, r3, #31
 8007586:	d422      	bmi.n	80075ce <__lo0bits+0x52>
 8007588:	079a      	lsls	r2, r3, #30
 800758a:	bf49      	itett	mi
 800758c:	085b      	lsrmi	r3, r3, #1
 800758e:	089b      	lsrpl	r3, r3, #2
 8007590:	6003      	strmi	r3, [r0, #0]
 8007592:	2201      	movmi	r2, #1
 8007594:	bf5c      	itt	pl
 8007596:	6003      	strpl	r3, [r0, #0]
 8007598:	2202      	movpl	r2, #2
 800759a:	4610      	mov	r0, r2
 800759c:	4770      	bx	lr
 800759e:	b299      	uxth	r1, r3
 80075a0:	b909      	cbnz	r1, 80075a6 <__lo0bits+0x2a>
 80075a2:	0c1b      	lsrs	r3, r3, #16
 80075a4:	2210      	movs	r2, #16
 80075a6:	b2d9      	uxtb	r1, r3
 80075a8:	b909      	cbnz	r1, 80075ae <__lo0bits+0x32>
 80075aa:	3208      	adds	r2, #8
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	0719      	lsls	r1, r3, #28
 80075b0:	bf04      	itt	eq
 80075b2:	091b      	lsreq	r3, r3, #4
 80075b4:	3204      	addeq	r2, #4
 80075b6:	0799      	lsls	r1, r3, #30
 80075b8:	bf04      	itt	eq
 80075ba:	089b      	lsreq	r3, r3, #2
 80075bc:	3202      	addeq	r2, #2
 80075be:	07d9      	lsls	r1, r3, #31
 80075c0:	d403      	bmi.n	80075ca <__lo0bits+0x4e>
 80075c2:	085b      	lsrs	r3, r3, #1
 80075c4:	f102 0201 	add.w	r2, r2, #1
 80075c8:	d003      	beq.n	80075d2 <__lo0bits+0x56>
 80075ca:	6003      	str	r3, [r0, #0]
 80075cc:	e7e5      	b.n	800759a <__lo0bits+0x1e>
 80075ce:	2200      	movs	r2, #0
 80075d0:	e7e3      	b.n	800759a <__lo0bits+0x1e>
 80075d2:	2220      	movs	r2, #32
 80075d4:	e7e1      	b.n	800759a <__lo0bits+0x1e>
	...

080075d8 <__i2b>:
 80075d8:	b510      	push	{r4, lr}
 80075da:	460c      	mov	r4, r1
 80075dc:	2101      	movs	r1, #1
 80075de:	f7ff ff05 	bl	80073ec <_Balloc>
 80075e2:	4602      	mov	r2, r0
 80075e4:	b928      	cbnz	r0, 80075f2 <__i2b+0x1a>
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <__i2b+0x24>)
 80075e8:	4805      	ldr	r0, [pc, #20]	; (8007600 <__i2b+0x28>)
 80075ea:	f240 1145 	movw	r1, #325	; 0x145
 80075ee:	f000 fe7f 	bl	80082f0 <__assert_func>
 80075f2:	2301      	movs	r3, #1
 80075f4:	6144      	str	r4, [r0, #20]
 80075f6:	6103      	str	r3, [r0, #16]
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	080085d0 	.word	0x080085d0
 8007600:	080085e1 	.word	0x080085e1

08007604 <__multiply>:
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	4691      	mov	r9, r2
 800760a:	690a      	ldr	r2, [r1, #16]
 800760c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007610:	429a      	cmp	r2, r3
 8007612:	bfb8      	it	lt
 8007614:	460b      	movlt	r3, r1
 8007616:	460c      	mov	r4, r1
 8007618:	bfbc      	itt	lt
 800761a:	464c      	movlt	r4, r9
 800761c:	4699      	movlt	r9, r3
 800761e:	6927      	ldr	r7, [r4, #16]
 8007620:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007624:	68a3      	ldr	r3, [r4, #8]
 8007626:	6861      	ldr	r1, [r4, #4]
 8007628:	eb07 060a 	add.w	r6, r7, sl
 800762c:	42b3      	cmp	r3, r6
 800762e:	b085      	sub	sp, #20
 8007630:	bfb8      	it	lt
 8007632:	3101      	addlt	r1, #1
 8007634:	f7ff feda 	bl	80073ec <_Balloc>
 8007638:	b930      	cbnz	r0, 8007648 <__multiply+0x44>
 800763a:	4602      	mov	r2, r0
 800763c:	4b44      	ldr	r3, [pc, #272]	; (8007750 <__multiply+0x14c>)
 800763e:	4845      	ldr	r0, [pc, #276]	; (8007754 <__multiply+0x150>)
 8007640:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007644:	f000 fe54 	bl	80082f0 <__assert_func>
 8007648:	f100 0514 	add.w	r5, r0, #20
 800764c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007650:	462b      	mov	r3, r5
 8007652:	2200      	movs	r2, #0
 8007654:	4543      	cmp	r3, r8
 8007656:	d321      	bcc.n	800769c <__multiply+0x98>
 8007658:	f104 0314 	add.w	r3, r4, #20
 800765c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007660:	f109 0314 	add.w	r3, r9, #20
 8007664:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007668:	9202      	str	r2, [sp, #8]
 800766a:	1b3a      	subs	r2, r7, r4
 800766c:	3a15      	subs	r2, #21
 800766e:	f022 0203 	bic.w	r2, r2, #3
 8007672:	3204      	adds	r2, #4
 8007674:	f104 0115 	add.w	r1, r4, #21
 8007678:	428f      	cmp	r7, r1
 800767a:	bf38      	it	cc
 800767c:	2204      	movcc	r2, #4
 800767e:	9201      	str	r2, [sp, #4]
 8007680:	9a02      	ldr	r2, [sp, #8]
 8007682:	9303      	str	r3, [sp, #12]
 8007684:	429a      	cmp	r2, r3
 8007686:	d80c      	bhi.n	80076a2 <__multiply+0x9e>
 8007688:	2e00      	cmp	r6, #0
 800768a:	dd03      	ble.n	8007694 <__multiply+0x90>
 800768c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007690:	2b00      	cmp	r3, #0
 8007692:	d05b      	beq.n	800774c <__multiply+0x148>
 8007694:	6106      	str	r6, [r0, #16]
 8007696:	b005      	add	sp, #20
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769c:	f843 2b04 	str.w	r2, [r3], #4
 80076a0:	e7d8      	b.n	8007654 <__multiply+0x50>
 80076a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80076a6:	f1ba 0f00 	cmp.w	sl, #0
 80076aa:	d024      	beq.n	80076f6 <__multiply+0xf2>
 80076ac:	f104 0e14 	add.w	lr, r4, #20
 80076b0:	46a9      	mov	r9, r5
 80076b2:	f04f 0c00 	mov.w	ip, #0
 80076b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076ba:	f8d9 1000 	ldr.w	r1, [r9]
 80076be:	fa1f fb82 	uxth.w	fp, r2
 80076c2:	b289      	uxth	r1, r1
 80076c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80076c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80076cc:	f8d9 2000 	ldr.w	r2, [r9]
 80076d0:	4461      	add	r1, ip
 80076d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80076da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076de:	b289      	uxth	r1, r1
 80076e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076e4:	4577      	cmp	r7, lr
 80076e6:	f849 1b04 	str.w	r1, [r9], #4
 80076ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076ee:	d8e2      	bhi.n	80076b6 <__multiply+0xb2>
 80076f0:	9a01      	ldr	r2, [sp, #4]
 80076f2:	f845 c002 	str.w	ip, [r5, r2]
 80076f6:	9a03      	ldr	r2, [sp, #12]
 80076f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076fc:	3304      	adds	r3, #4
 80076fe:	f1b9 0f00 	cmp.w	r9, #0
 8007702:	d021      	beq.n	8007748 <__multiply+0x144>
 8007704:	6829      	ldr	r1, [r5, #0]
 8007706:	f104 0c14 	add.w	ip, r4, #20
 800770a:	46ae      	mov	lr, r5
 800770c:	f04f 0a00 	mov.w	sl, #0
 8007710:	f8bc b000 	ldrh.w	fp, [ip]
 8007714:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007718:	fb09 220b 	mla	r2, r9, fp, r2
 800771c:	4452      	add	r2, sl
 800771e:	b289      	uxth	r1, r1
 8007720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007724:	f84e 1b04 	str.w	r1, [lr], #4
 8007728:	f85c 1b04 	ldr.w	r1, [ip], #4
 800772c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007730:	f8be 1000 	ldrh.w	r1, [lr]
 8007734:	fb09 110a 	mla	r1, r9, sl, r1
 8007738:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800773c:	4567      	cmp	r7, ip
 800773e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007742:	d8e5      	bhi.n	8007710 <__multiply+0x10c>
 8007744:	9a01      	ldr	r2, [sp, #4]
 8007746:	50a9      	str	r1, [r5, r2]
 8007748:	3504      	adds	r5, #4
 800774a:	e799      	b.n	8007680 <__multiply+0x7c>
 800774c:	3e01      	subs	r6, #1
 800774e:	e79b      	b.n	8007688 <__multiply+0x84>
 8007750:	080085d0 	.word	0x080085d0
 8007754:	080085e1 	.word	0x080085e1

08007758 <__pow5mult>:
 8007758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800775c:	4615      	mov	r5, r2
 800775e:	f012 0203 	ands.w	r2, r2, #3
 8007762:	4606      	mov	r6, r0
 8007764:	460f      	mov	r7, r1
 8007766:	d007      	beq.n	8007778 <__pow5mult+0x20>
 8007768:	4c25      	ldr	r4, [pc, #148]	; (8007800 <__pow5mult+0xa8>)
 800776a:	3a01      	subs	r2, #1
 800776c:	2300      	movs	r3, #0
 800776e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007772:	f7ff fe9d 	bl	80074b0 <__multadd>
 8007776:	4607      	mov	r7, r0
 8007778:	10ad      	asrs	r5, r5, #2
 800777a:	d03d      	beq.n	80077f8 <__pow5mult+0xa0>
 800777c:	69f4      	ldr	r4, [r6, #28]
 800777e:	b97c      	cbnz	r4, 80077a0 <__pow5mult+0x48>
 8007780:	2010      	movs	r0, #16
 8007782:	f7ff fd7f 	bl	8007284 <malloc>
 8007786:	4602      	mov	r2, r0
 8007788:	61f0      	str	r0, [r6, #28]
 800778a:	b928      	cbnz	r0, 8007798 <__pow5mult+0x40>
 800778c:	4b1d      	ldr	r3, [pc, #116]	; (8007804 <__pow5mult+0xac>)
 800778e:	481e      	ldr	r0, [pc, #120]	; (8007808 <__pow5mult+0xb0>)
 8007790:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007794:	f000 fdac 	bl	80082f0 <__assert_func>
 8007798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800779c:	6004      	str	r4, [r0, #0]
 800779e:	60c4      	str	r4, [r0, #12]
 80077a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077a8:	b94c      	cbnz	r4, 80077be <__pow5mult+0x66>
 80077aa:	f240 2171 	movw	r1, #625	; 0x271
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff ff12 	bl	80075d8 <__i2b>
 80077b4:	2300      	movs	r3, #0
 80077b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80077ba:	4604      	mov	r4, r0
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	f04f 0900 	mov.w	r9, #0
 80077c2:	07eb      	lsls	r3, r5, #31
 80077c4:	d50a      	bpl.n	80077dc <__pow5mult+0x84>
 80077c6:	4639      	mov	r1, r7
 80077c8:	4622      	mov	r2, r4
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7ff ff1a 	bl	8007604 <__multiply>
 80077d0:	4639      	mov	r1, r7
 80077d2:	4680      	mov	r8, r0
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7ff fe49 	bl	800746c <_Bfree>
 80077da:	4647      	mov	r7, r8
 80077dc:	106d      	asrs	r5, r5, #1
 80077de:	d00b      	beq.n	80077f8 <__pow5mult+0xa0>
 80077e0:	6820      	ldr	r0, [r4, #0]
 80077e2:	b938      	cbnz	r0, 80077f4 <__pow5mult+0x9c>
 80077e4:	4622      	mov	r2, r4
 80077e6:	4621      	mov	r1, r4
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7ff ff0b 	bl	8007604 <__multiply>
 80077ee:	6020      	str	r0, [r4, #0]
 80077f0:	f8c0 9000 	str.w	r9, [r0]
 80077f4:	4604      	mov	r4, r0
 80077f6:	e7e4      	b.n	80077c2 <__pow5mult+0x6a>
 80077f8:	4638      	mov	r0, r7
 80077fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fe:	bf00      	nop
 8007800:	08008730 	.word	0x08008730
 8007804:	08008561 	.word	0x08008561
 8007808:	080085e1 	.word	0x080085e1

0800780c <__lshift>:
 800780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	460c      	mov	r4, r1
 8007812:	6849      	ldr	r1, [r1, #4]
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800781a:	68a3      	ldr	r3, [r4, #8]
 800781c:	4607      	mov	r7, r0
 800781e:	4691      	mov	r9, r2
 8007820:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007824:	f108 0601 	add.w	r6, r8, #1
 8007828:	42b3      	cmp	r3, r6
 800782a:	db0b      	blt.n	8007844 <__lshift+0x38>
 800782c:	4638      	mov	r0, r7
 800782e:	f7ff fddd 	bl	80073ec <_Balloc>
 8007832:	4605      	mov	r5, r0
 8007834:	b948      	cbnz	r0, 800784a <__lshift+0x3e>
 8007836:	4602      	mov	r2, r0
 8007838:	4b28      	ldr	r3, [pc, #160]	; (80078dc <__lshift+0xd0>)
 800783a:	4829      	ldr	r0, [pc, #164]	; (80078e0 <__lshift+0xd4>)
 800783c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007840:	f000 fd56 	bl	80082f0 <__assert_func>
 8007844:	3101      	adds	r1, #1
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	e7ee      	b.n	8007828 <__lshift+0x1c>
 800784a:	2300      	movs	r3, #0
 800784c:	f100 0114 	add.w	r1, r0, #20
 8007850:	f100 0210 	add.w	r2, r0, #16
 8007854:	4618      	mov	r0, r3
 8007856:	4553      	cmp	r3, sl
 8007858:	db33      	blt.n	80078c2 <__lshift+0xb6>
 800785a:	6920      	ldr	r0, [r4, #16]
 800785c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007860:	f104 0314 	add.w	r3, r4, #20
 8007864:	f019 091f 	ands.w	r9, r9, #31
 8007868:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800786c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007870:	d02b      	beq.n	80078ca <__lshift+0xbe>
 8007872:	f1c9 0e20 	rsb	lr, r9, #32
 8007876:	468a      	mov	sl, r1
 8007878:	2200      	movs	r2, #0
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	fa00 f009 	lsl.w	r0, r0, r9
 8007880:	4310      	orrs	r0, r2
 8007882:	f84a 0b04 	str.w	r0, [sl], #4
 8007886:	f853 2b04 	ldr.w	r2, [r3], #4
 800788a:	459c      	cmp	ip, r3
 800788c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007890:	d8f3      	bhi.n	800787a <__lshift+0x6e>
 8007892:	ebac 0304 	sub.w	r3, ip, r4
 8007896:	3b15      	subs	r3, #21
 8007898:	f023 0303 	bic.w	r3, r3, #3
 800789c:	3304      	adds	r3, #4
 800789e:	f104 0015 	add.w	r0, r4, #21
 80078a2:	4584      	cmp	ip, r0
 80078a4:	bf38      	it	cc
 80078a6:	2304      	movcc	r3, #4
 80078a8:	50ca      	str	r2, [r1, r3]
 80078aa:	b10a      	cbz	r2, 80078b0 <__lshift+0xa4>
 80078ac:	f108 0602 	add.w	r6, r8, #2
 80078b0:	3e01      	subs	r6, #1
 80078b2:	4638      	mov	r0, r7
 80078b4:	612e      	str	r6, [r5, #16]
 80078b6:	4621      	mov	r1, r4
 80078b8:	f7ff fdd8 	bl	800746c <_Bfree>
 80078bc:	4628      	mov	r0, r5
 80078be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80078c6:	3301      	adds	r3, #1
 80078c8:	e7c5      	b.n	8007856 <__lshift+0x4a>
 80078ca:	3904      	subs	r1, #4
 80078cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80078d4:	459c      	cmp	ip, r3
 80078d6:	d8f9      	bhi.n	80078cc <__lshift+0xc0>
 80078d8:	e7ea      	b.n	80078b0 <__lshift+0xa4>
 80078da:	bf00      	nop
 80078dc:	080085d0 	.word	0x080085d0
 80078e0:	080085e1 	.word	0x080085e1

080078e4 <__mcmp>:
 80078e4:	b530      	push	{r4, r5, lr}
 80078e6:	6902      	ldr	r2, [r0, #16]
 80078e8:	690c      	ldr	r4, [r1, #16]
 80078ea:	1b12      	subs	r2, r2, r4
 80078ec:	d10e      	bne.n	800790c <__mcmp+0x28>
 80078ee:	f100 0314 	add.w	r3, r0, #20
 80078f2:	3114      	adds	r1, #20
 80078f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80078f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80078fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007900:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007904:	42a5      	cmp	r5, r4
 8007906:	d003      	beq.n	8007910 <__mcmp+0x2c>
 8007908:	d305      	bcc.n	8007916 <__mcmp+0x32>
 800790a:	2201      	movs	r2, #1
 800790c:	4610      	mov	r0, r2
 800790e:	bd30      	pop	{r4, r5, pc}
 8007910:	4283      	cmp	r3, r0
 8007912:	d3f3      	bcc.n	80078fc <__mcmp+0x18>
 8007914:	e7fa      	b.n	800790c <__mcmp+0x28>
 8007916:	f04f 32ff 	mov.w	r2, #4294967295
 800791a:	e7f7      	b.n	800790c <__mcmp+0x28>

0800791c <__mdiff>:
 800791c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	460c      	mov	r4, r1
 8007922:	4606      	mov	r6, r0
 8007924:	4611      	mov	r1, r2
 8007926:	4620      	mov	r0, r4
 8007928:	4690      	mov	r8, r2
 800792a:	f7ff ffdb 	bl	80078e4 <__mcmp>
 800792e:	1e05      	subs	r5, r0, #0
 8007930:	d110      	bne.n	8007954 <__mdiff+0x38>
 8007932:	4629      	mov	r1, r5
 8007934:	4630      	mov	r0, r6
 8007936:	f7ff fd59 	bl	80073ec <_Balloc>
 800793a:	b930      	cbnz	r0, 800794a <__mdiff+0x2e>
 800793c:	4b3a      	ldr	r3, [pc, #232]	; (8007a28 <__mdiff+0x10c>)
 800793e:	4602      	mov	r2, r0
 8007940:	f240 2137 	movw	r1, #567	; 0x237
 8007944:	4839      	ldr	r0, [pc, #228]	; (8007a2c <__mdiff+0x110>)
 8007946:	f000 fcd3 	bl	80082f0 <__assert_func>
 800794a:	2301      	movs	r3, #1
 800794c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007954:	bfa4      	itt	ge
 8007956:	4643      	movge	r3, r8
 8007958:	46a0      	movge	r8, r4
 800795a:	4630      	mov	r0, r6
 800795c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007960:	bfa6      	itte	ge
 8007962:	461c      	movge	r4, r3
 8007964:	2500      	movge	r5, #0
 8007966:	2501      	movlt	r5, #1
 8007968:	f7ff fd40 	bl	80073ec <_Balloc>
 800796c:	b920      	cbnz	r0, 8007978 <__mdiff+0x5c>
 800796e:	4b2e      	ldr	r3, [pc, #184]	; (8007a28 <__mdiff+0x10c>)
 8007970:	4602      	mov	r2, r0
 8007972:	f240 2145 	movw	r1, #581	; 0x245
 8007976:	e7e5      	b.n	8007944 <__mdiff+0x28>
 8007978:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800797c:	6926      	ldr	r6, [r4, #16]
 800797e:	60c5      	str	r5, [r0, #12]
 8007980:	f104 0914 	add.w	r9, r4, #20
 8007984:	f108 0514 	add.w	r5, r8, #20
 8007988:	f100 0e14 	add.w	lr, r0, #20
 800798c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007990:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007994:	f108 0210 	add.w	r2, r8, #16
 8007998:	46f2      	mov	sl, lr
 800799a:	2100      	movs	r1, #0
 800799c:	f859 3b04 	ldr.w	r3, [r9], #4
 80079a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80079a4:	fa11 f88b 	uxtah	r8, r1, fp
 80079a8:	b299      	uxth	r1, r3
 80079aa:	0c1b      	lsrs	r3, r3, #16
 80079ac:	eba8 0801 	sub.w	r8, r8, r1
 80079b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079b8:	fa1f f888 	uxth.w	r8, r8
 80079bc:	1419      	asrs	r1, r3, #16
 80079be:	454e      	cmp	r6, r9
 80079c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079c4:	f84a 3b04 	str.w	r3, [sl], #4
 80079c8:	d8e8      	bhi.n	800799c <__mdiff+0x80>
 80079ca:	1b33      	subs	r3, r6, r4
 80079cc:	3b15      	subs	r3, #21
 80079ce:	f023 0303 	bic.w	r3, r3, #3
 80079d2:	3304      	adds	r3, #4
 80079d4:	3415      	adds	r4, #21
 80079d6:	42a6      	cmp	r6, r4
 80079d8:	bf38      	it	cc
 80079da:	2304      	movcc	r3, #4
 80079dc:	441d      	add	r5, r3
 80079de:	4473      	add	r3, lr
 80079e0:	469e      	mov	lr, r3
 80079e2:	462e      	mov	r6, r5
 80079e4:	4566      	cmp	r6, ip
 80079e6:	d30e      	bcc.n	8007a06 <__mdiff+0xea>
 80079e8:	f10c 0203 	add.w	r2, ip, #3
 80079ec:	1b52      	subs	r2, r2, r5
 80079ee:	f022 0203 	bic.w	r2, r2, #3
 80079f2:	3d03      	subs	r5, #3
 80079f4:	45ac      	cmp	ip, r5
 80079f6:	bf38      	it	cc
 80079f8:	2200      	movcc	r2, #0
 80079fa:	4413      	add	r3, r2
 80079fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007a00:	b17a      	cbz	r2, 8007a22 <__mdiff+0x106>
 8007a02:	6107      	str	r7, [r0, #16]
 8007a04:	e7a4      	b.n	8007950 <__mdiff+0x34>
 8007a06:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a0a:	fa11 f288 	uxtah	r2, r1, r8
 8007a0e:	1414      	asrs	r4, r2, #16
 8007a10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a14:	b292      	uxth	r2, r2
 8007a16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a1a:	f84e 2b04 	str.w	r2, [lr], #4
 8007a1e:	1421      	asrs	r1, r4, #16
 8007a20:	e7e0      	b.n	80079e4 <__mdiff+0xc8>
 8007a22:	3f01      	subs	r7, #1
 8007a24:	e7ea      	b.n	80079fc <__mdiff+0xe0>
 8007a26:	bf00      	nop
 8007a28:	080085d0 	.word	0x080085d0
 8007a2c:	080085e1 	.word	0x080085e1

08007a30 <__d2b>:
 8007a30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a34:	460f      	mov	r7, r1
 8007a36:	2101      	movs	r1, #1
 8007a38:	ec59 8b10 	vmov	r8, r9, d0
 8007a3c:	4616      	mov	r6, r2
 8007a3e:	f7ff fcd5 	bl	80073ec <_Balloc>
 8007a42:	4604      	mov	r4, r0
 8007a44:	b930      	cbnz	r0, 8007a54 <__d2b+0x24>
 8007a46:	4602      	mov	r2, r0
 8007a48:	4b24      	ldr	r3, [pc, #144]	; (8007adc <__d2b+0xac>)
 8007a4a:	4825      	ldr	r0, [pc, #148]	; (8007ae0 <__d2b+0xb0>)
 8007a4c:	f240 310f 	movw	r1, #783	; 0x30f
 8007a50:	f000 fc4e 	bl	80082f0 <__assert_func>
 8007a54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a5c:	bb2d      	cbnz	r5, 8007aaa <__d2b+0x7a>
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	f1b8 0300 	subs.w	r3, r8, #0
 8007a64:	d026      	beq.n	8007ab4 <__d2b+0x84>
 8007a66:	4668      	mov	r0, sp
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	f7ff fd87 	bl	800757c <__lo0bits>
 8007a6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a72:	b1e8      	cbz	r0, 8007ab0 <__d2b+0x80>
 8007a74:	f1c0 0320 	rsb	r3, r0, #32
 8007a78:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	40c2      	lsrs	r2, r0
 8007a80:	6163      	str	r3, [r4, #20]
 8007a82:	9201      	str	r2, [sp, #4]
 8007a84:	9b01      	ldr	r3, [sp, #4]
 8007a86:	61a3      	str	r3, [r4, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bf14      	ite	ne
 8007a8c:	2202      	movne	r2, #2
 8007a8e:	2201      	moveq	r2, #1
 8007a90:	6122      	str	r2, [r4, #16]
 8007a92:	b1bd      	cbz	r5, 8007ac4 <__d2b+0x94>
 8007a94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a98:	4405      	add	r5, r0
 8007a9a:	603d      	str	r5, [r7, #0]
 8007a9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007aa0:	6030      	str	r0, [r6, #0]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	b003      	add	sp, #12
 8007aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aae:	e7d6      	b.n	8007a5e <__d2b+0x2e>
 8007ab0:	6161      	str	r1, [r4, #20]
 8007ab2:	e7e7      	b.n	8007a84 <__d2b+0x54>
 8007ab4:	a801      	add	r0, sp, #4
 8007ab6:	f7ff fd61 	bl	800757c <__lo0bits>
 8007aba:	9b01      	ldr	r3, [sp, #4]
 8007abc:	6163      	str	r3, [r4, #20]
 8007abe:	3020      	adds	r0, #32
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	e7e5      	b.n	8007a90 <__d2b+0x60>
 8007ac4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ac8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007acc:	6038      	str	r0, [r7, #0]
 8007ace:	6918      	ldr	r0, [r3, #16]
 8007ad0:	f7ff fd34 	bl	800753c <__hi0bits>
 8007ad4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ad8:	e7e2      	b.n	8007aa0 <__d2b+0x70>
 8007ada:	bf00      	nop
 8007adc:	080085d0 	.word	0x080085d0
 8007ae0:	080085e1 	.word	0x080085e1

08007ae4 <__ssputs_r>:
 8007ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	688e      	ldr	r6, [r1, #8]
 8007aea:	461f      	mov	r7, r3
 8007aec:	42be      	cmp	r6, r7
 8007aee:	680b      	ldr	r3, [r1, #0]
 8007af0:	4682      	mov	sl, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	4690      	mov	r8, r2
 8007af6:	d82c      	bhi.n	8007b52 <__ssputs_r+0x6e>
 8007af8:	898a      	ldrh	r2, [r1, #12]
 8007afa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007afe:	d026      	beq.n	8007b4e <__ssputs_r+0x6a>
 8007b00:	6965      	ldr	r5, [r4, #20]
 8007b02:	6909      	ldr	r1, [r1, #16]
 8007b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b08:	eba3 0901 	sub.w	r9, r3, r1
 8007b0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b10:	1c7b      	adds	r3, r7, #1
 8007b12:	444b      	add	r3, r9
 8007b14:	106d      	asrs	r5, r5, #1
 8007b16:	429d      	cmp	r5, r3
 8007b18:	bf38      	it	cc
 8007b1a:	461d      	movcc	r5, r3
 8007b1c:	0553      	lsls	r3, r2, #21
 8007b1e:	d527      	bpl.n	8007b70 <__ssputs_r+0x8c>
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7ff fbd7 	bl	80072d4 <_malloc_r>
 8007b26:	4606      	mov	r6, r0
 8007b28:	b360      	cbz	r0, 8007b84 <__ssputs_r+0xa0>
 8007b2a:	6921      	ldr	r1, [r4, #16]
 8007b2c:	464a      	mov	r2, r9
 8007b2e:	f000 fbd1 	bl	80082d4 <memcpy>
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	6126      	str	r6, [r4, #16]
 8007b40:	6165      	str	r5, [r4, #20]
 8007b42:	444e      	add	r6, r9
 8007b44:	eba5 0509 	sub.w	r5, r5, r9
 8007b48:	6026      	str	r6, [r4, #0]
 8007b4a:	60a5      	str	r5, [r4, #8]
 8007b4c:	463e      	mov	r6, r7
 8007b4e:	42be      	cmp	r6, r7
 8007b50:	d900      	bls.n	8007b54 <__ssputs_r+0x70>
 8007b52:	463e      	mov	r6, r7
 8007b54:	6820      	ldr	r0, [r4, #0]
 8007b56:	4632      	mov	r2, r6
 8007b58:	4641      	mov	r1, r8
 8007b5a:	f000 fb6f 	bl	800823c <memmove>
 8007b5e:	68a3      	ldr	r3, [r4, #8]
 8007b60:	1b9b      	subs	r3, r3, r6
 8007b62:	60a3      	str	r3, [r4, #8]
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	4433      	add	r3, r6
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	462a      	mov	r2, r5
 8007b72:	f000 fc03 	bl	800837c <_realloc_r>
 8007b76:	4606      	mov	r6, r0
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d1e0      	bne.n	8007b3e <__ssputs_r+0x5a>
 8007b7c:	6921      	ldr	r1, [r4, #16]
 8007b7e:	4650      	mov	r0, sl
 8007b80:	f7ff fb34 	bl	80071ec <_free_r>
 8007b84:	230c      	movs	r3, #12
 8007b86:	f8ca 3000 	str.w	r3, [sl]
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b90:	81a3      	strh	r3, [r4, #12]
 8007b92:	f04f 30ff 	mov.w	r0, #4294967295
 8007b96:	e7e9      	b.n	8007b6c <__ssputs_r+0x88>

08007b98 <_svfiprintf_r>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	4698      	mov	r8, r3
 8007b9e:	898b      	ldrh	r3, [r1, #12]
 8007ba0:	061b      	lsls	r3, r3, #24
 8007ba2:	b09d      	sub	sp, #116	; 0x74
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	4614      	mov	r4, r2
 8007baa:	d50e      	bpl.n	8007bca <_svfiprintf_r+0x32>
 8007bac:	690b      	ldr	r3, [r1, #16]
 8007bae:	b963      	cbnz	r3, 8007bca <_svfiprintf_r+0x32>
 8007bb0:	2140      	movs	r1, #64	; 0x40
 8007bb2:	f7ff fb8f 	bl	80072d4 <_malloc_r>
 8007bb6:	6028      	str	r0, [r5, #0]
 8007bb8:	6128      	str	r0, [r5, #16]
 8007bba:	b920      	cbnz	r0, 8007bc6 <_svfiprintf_r+0x2e>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc4:	e0d0      	b.n	8007d68 <_svfiprintf_r+0x1d0>
 8007bc6:	2340      	movs	r3, #64	; 0x40
 8007bc8:	616b      	str	r3, [r5, #20]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bce:	2320      	movs	r3, #32
 8007bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bd8:	2330      	movs	r3, #48	; 0x30
 8007bda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d80 <_svfiprintf_r+0x1e8>
 8007bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007be2:	f04f 0901 	mov.w	r9, #1
 8007be6:	4623      	mov	r3, r4
 8007be8:	469a      	mov	sl, r3
 8007bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bee:	b10a      	cbz	r2, 8007bf4 <_svfiprintf_r+0x5c>
 8007bf0:	2a25      	cmp	r2, #37	; 0x25
 8007bf2:	d1f9      	bne.n	8007be8 <_svfiprintf_r+0x50>
 8007bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bf8:	d00b      	beq.n	8007c12 <_svfiprintf_r+0x7a>
 8007bfa:	465b      	mov	r3, fp
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	4638      	mov	r0, r7
 8007c02:	f7ff ff6f 	bl	8007ae4 <__ssputs_r>
 8007c06:	3001      	adds	r0, #1
 8007c08:	f000 80a9 	beq.w	8007d5e <_svfiprintf_r+0x1c6>
 8007c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c0e:	445a      	add	r2, fp
 8007c10:	9209      	str	r2, [sp, #36]	; 0x24
 8007c12:	f89a 3000 	ldrb.w	r3, [sl]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 80a1 	beq.w	8007d5e <_svfiprintf_r+0x1c6>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c26:	f10a 0a01 	add.w	sl, sl, #1
 8007c2a:	9304      	str	r3, [sp, #16]
 8007c2c:	9307      	str	r3, [sp, #28]
 8007c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c32:	931a      	str	r3, [sp, #104]	; 0x68
 8007c34:	4654      	mov	r4, sl
 8007c36:	2205      	movs	r2, #5
 8007c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c3c:	4850      	ldr	r0, [pc, #320]	; (8007d80 <_svfiprintf_r+0x1e8>)
 8007c3e:	f7f8 fad7 	bl	80001f0 <memchr>
 8007c42:	9a04      	ldr	r2, [sp, #16]
 8007c44:	b9d8      	cbnz	r0, 8007c7e <_svfiprintf_r+0xe6>
 8007c46:	06d0      	lsls	r0, r2, #27
 8007c48:	bf44      	itt	mi
 8007c4a:	2320      	movmi	r3, #32
 8007c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c50:	0711      	lsls	r1, r2, #28
 8007c52:	bf44      	itt	mi
 8007c54:	232b      	movmi	r3, #43	; 0x2b
 8007c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c60:	d015      	beq.n	8007c8e <_svfiprintf_r+0xf6>
 8007c62:	9a07      	ldr	r2, [sp, #28]
 8007c64:	4654      	mov	r4, sl
 8007c66:	2000      	movs	r0, #0
 8007c68:	f04f 0c0a 	mov.w	ip, #10
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c72:	3b30      	subs	r3, #48	; 0x30
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	d94d      	bls.n	8007d14 <_svfiprintf_r+0x17c>
 8007c78:	b1b0      	cbz	r0, 8007ca8 <_svfiprintf_r+0x110>
 8007c7a:	9207      	str	r2, [sp, #28]
 8007c7c:	e014      	b.n	8007ca8 <_svfiprintf_r+0x110>
 8007c7e:	eba0 0308 	sub.w	r3, r0, r8
 8007c82:	fa09 f303 	lsl.w	r3, r9, r3
 8007c86:	4313      	orrs	r3, r2
 8007c88:	9304      	str	r3, [sp, #16]
 8007c8a:	46a2      	mov	sl, r4
 8007c8c:	e7d2      	b.n	8007c34 <_svfiprintf_r+0x9c>
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	1d19      	adds	r1, r3, #4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	9103      	str	r1, [sp, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bfbb      	ittet	lt
 8007c9a:	425b      	neglt	r3, r3
 8007c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007ca0:	9307      	strge	r3, [sp, #28]
 8007ca2:	9307      	strlt	r3, [sp, #28]
 8007ca4:	bfb8      	it	lt
 8007ca6:	9204      	strlt	r2, [sp, #16]
 8007ca8:	7823      	ldrb	r3, [r4, #0]
 8007caa:	2b2e      	cmp	r3, #46	; 0x2e
 8007cac:	d10c      	bne.n	8007cc8 <_svfiprintf_r+0x130>
 8007cae:	7863      	ldrb	r3, [r4, #1]
 8007cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb2:	d134      	bne.n	8007d1e <_svfiprintf_r+0x186>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	1d1a      	adds	r2, r3, #4
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	9203      	str	r2, [sp, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	bfb8      	it	lt
 8007cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cc4:	3402      	adds	r4, #2
 8007cc6:	9305      	str	r3, [sp, #20]
 8007cc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d90 <_svfiprintf_r+0x1f8>
 8007ccc:	7821      	ldrb	r1, [r4, #0]
 8007cce:	2203      	movs	r2, #3
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	f7f8 fa8d 	bl	80001f0 <memchr>
 8007cd6:	b138      	cbz	r0, 8007ce8 <_svfiprintf_r+0x150>
 8007cd8:	9b04      	ldr	r3, [sp, #16]
 8007cda:	eba0 000a 	sub.w	r0, r0, sl
 8007cde:	2240      	movs	r2, #64	; 0x40
 8007ce0:	4082      	lsls	r2, r0
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	3401      	adds	r4, #1
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cec:	4825      	ldr	r0, [pc, #148]	; (8007d84 <_svfiprintf_r+0x1ec>)
 8007cee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cf2:	2206      	movs	r2, #6
 8007cf4:	f7f8 fa7c 	bl	80001f0 <memchr>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d038      	beq.n	8007d6e <_svfiprintf_r+0x1d6>
 8007cfc:	4b22      	ldr	r3, [pc, #136]	; (8007d88 <_svfiprintf_r+0x1f0>)
 8007cfe:	bb1b      	cbnz	r3, 8007d48 <_svfiprintf_r+0x1b0>
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	3307      	adds	r3, #7
 8007d04:	f023 0307 	bic.w	r3, r3, #7
 8007d08:	3308      	adds	r3, #8
 8007d0a:	9303      	str	r3, [sp, #12]
 8007d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0e:	4433      	add	r3, r6
 8007d10:	9309      	str	r3, [sp, #36]	; 0x24
 8007d12:	e768      	b.n	8007be6 <_svfiprintf_r+0x4e>
 8007d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d18:	460c      	mov	r4, r1
 8007d1a:	2001      	movs	r0, #1
 8007d1c:	e7a6      	b.n	8007c6c <_svfiprintf_r+0xd4>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	3401      	adds	r4, #1
 8007d22:	9305      	str	r3, [sp, #20]
 8007d24:	4619      	mov	r1, r3
 8007d26:	f04f 0c0a 	mov.w	ip, #10
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d30:	3a30      	subs	r2, #48	; 0x30
 8007d32:	2a09      	cmp	r2, #9
 8007d34:	d903      	bls.n	8007d3e <_svfiprintf_r+0x1a6>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0c6      	beq.n	8007cc8 <_svfiprintf_r+0x130>
 8007d3a:	9105      	str	r1, [sp, #20]
 8007d3c:	e7c4      	b.n	8007cc8 <_svfiprintf_r+0x130>
 8007d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d42:	4604      	mov	r4, r0
 8007d44:	2301      	movs	r3, #1
 8007d46:	e7f0      	b.n	8007d2a <_svfiprintf_r+0x192>
 8007d48:	ab03      	add	r3, sp, #12
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	462a      	mov	r2, r5
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <_svfiprintf_r+0x1f4>)
 8007d50:	a904      	add	r1, sp, #16
 8007d52:	4638      	mov	r0, r7
 8007d54:	f7fd fd62 	bl	800581c <_printf_float>
 8007d58:	1c42      	adds	r2, r0, #1
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	d1d6      	bne.n	8007d0c <_svfiprintf_r+0x174>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	065b      	lsls	r3, r3, #25
 8007d62:	f53f af2d 	bmi.w	8007bc0 <_svfiprintf_r+0x28>
 8007d66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d68:	b01d      	add	sp, #116	; 0x74
 8007d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6e:	ab03      	add	r3, sp, #12
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	462a      	mov	r2, r5
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <_svfiprintf_r+0x1f4>)
 8007d76:	a904      	add	r1, sp, #16
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f7fd fff3 	bl	8005d64 <_printf_i>
 8007d7e:	e7eb      	b.n	8007d58 <_svfiprintf_r+0x1c0>
 8007d80:	0800873c 	.word	0x0800873c
 8007d84:	08008746 	.word	0x08008746
 8007d88:	0800581d 	.word	0x0800581d
 8007d8c:	08007ae5 	.word	0x08007ae5
 8007d90:	08008742 	.word	0x08008742

08007d94 <__sfputc_r>:
 8007d94:	6893      	ldr	r3, [r2, #8]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	b410      	push	{r4}
 8007d9c:	6093      	str	r3, [r2, #8]
 8007d9e:	da08      	bge.n	8007db2 <__sfputc_r+0x1e>
 8007da0:	6994      	ldr	r4, [r2, #24]
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	db01      	blt.n	8007daa <__sfputc_r+0x16>
 8007da6:	290a      	cmp	r1, #10
 8007da8:	d103      	bne.n	8007db2 <__sfputc_r+0x1e>
 8007daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dae:	f7fe ba8e 	b.w	80062ce <__swbuf_r>
 8007db2:	6813      	ldr	r3, [r2, #0]
 8007db4:	1c58      	adds	r0, r3, #1
 8007db6:	6010      	str	r0, [r2, #0]
 8007db8:	7019      	strb	r1, [r3, #0]
 8007dba:	4608      	mov	r0, r1
 8007dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <__sfputs_r>:
 8007dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	4614      	mov	r4, r2
 8007dca:	18d5      	adds	r5, r2, r3
 8007dcc:	42ac      	cmp	r4, r5
 8007dce:	d101      	bne.n	8007dd4 <__sfputs_r+0x12>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	e007      	b.n	8007de4 <__sfputs_r+0x22>
 8007dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd8:	463a      	mov	r2, r7
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f7ff ffda 	bl	8007d94 <__sfputc_r>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d1f3      	bne.n	8007dcc <__sfputs_r+0xa>
 8007de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007de8 <_vfiprintf_r>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	460d      	mov	r5, r1
 8007dee:	b09d      	sub	sp, #116	; 0x74
 8007df0:	4614      	mov	r4, r2
 8007df2:	4698      	mov	r8, r3
 8007df4:	4606      	mov	r6, r0
 8007df6:	b118      	cbz	r0, 8007e00 <_vfiprintf_r+0x18>
 8007df8:	6a03      	ldr	r3, [r0, #32]
 8007dfa:	b90b      	cbnz	r3, 8007e00 <_vfiprintf_r+0x18>
 8007dfc:	f7fe f960 	bl	80060c0 <__sinit>
 8007e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e02:	07d9      	lsls	r1, r3, #31
 8007e04:	d405      	bmi.n	8007e12 <_vfiprintf_r+0x2a>
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	059a      	lsls	r2, r3, #22
 8007e0a:	d402      	bmi.n	8007e12 <_vfiprintf_r+0x2a>
 8007e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e0e:	f7fe fb70 	bl	80064f2 <__retarget_lock_acquire_recursive>
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	071b      	lsls	r3, r3, #28
 8007e16:	d501      	bpl.n	8007e1c <_vfiprintf_r+0x34>
 8007e18:	692b      	ldr	r3, [r5, #16]
 8007e1a:	b99b      	cbnz	r3, 8007e44 <_vfiprintf_r+0x5c>
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7fe fa92 	bl	8006348 <__swsetup_r>
 8007e24:	b170      	cbz	r0, 8007e44 <_vfiprintf_r+0x5c>
 8007e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e28:	07dc      	lsls	r4, r3, #31
 8007e2a:	d504      	bpl.n	8007e36 <_vfiprintf_r+0x4e>
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	b01d      	add	sp, #116	; 0x74
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e36:	89ab      	ldrh	r3, [r5, #12]
 8007e38:	0598      	lsls	r0, r3, #22
 8007e3a:	d4f7      	bmi.n	8007e2c <_vfiprintf_r+0x44>
 8007e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e3e:	f7fe fb59 	bl	80064f4 <__retarget_lock_release_recursive>
 8007e42:	e7f3      	b.n	8007e2c <_vfiprintf_r+0x44>
 8007e44:	2300      	movs	r3, #0
 8007e46:	9309      	str	r3, [sp, #36]	; 0x24
 8007e48:	2320      	movs	r3, #32
 8007e4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e52:	2330      	movs	r3, #48	; 0x30
 8007e54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008008 <_vfiprintf_r+0x220>
 8007e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e5c:	f04f 0901 	mov.w	r9, #1
 8007e60:	4623      	mov	r3, r4
 8007e62:	469a      	mov	sl, r3
 8007e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e68:	b10a      	cbz	r2, 8007e6e <_vfiprintf_r+0x86>
 8007e6a:	2a25      	cmp	r2, #37	; 0x25
 8007e6c:	d1f9      	bne.n	8007e62 <_vfiprintf_r+0x7a>
 8007e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e72:	d00b      	beq.n	8007e8c <_vfiprintf_r+0xa4>
 8007e74:	465b      	mov	r3, fp
 8007e76:	4622      	mov	r2, r4
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f7ff ffa1 	bl	8007dc2 <__sfputs_r>
 8007e80:	3001      	adds	r0, #1
 8007e82:	f000 80a9 	beq.w	8007fd8 <_vfiprintf_r+0x1f0>
 8007e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e88:	445a      	add	r2, fp
 8007e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 80a1 	beq.w	8007fd8 <_vfiprintf_r+0x1f0>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ea0:	f10a 0a01 	add.w	sl, sl, #1
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	9307      	str	r3, [sp, #28]
 8007ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eac:	931a      	str	r3, [sp, #104]	; 0x68
 8007eae:	4654      	mov	r4, sl
 8007eb0:	2205      	movs	r2, #5
 8007eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb6:	4854      	ldr	r0, [pc, #336]	; (8008008 <_vfiprintf_r+0x220>)
 8007eb8:	f7f8 f99a 	bl	80001f0 <memchr>
 8007ebc:	9a04      	ldr	r2, [sp, #16]
 8007ebe:	b9d8      	cbnz	r0, 8007ef8 <_vfiprintf_r+0x110>
 8007ec0:	06d1      	lsls	r1, r2, #27
 8007ec2:	bf44      	itt	mi
 8007ec4:	2320      	movmi	r3, #32
 8007ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eca:	0713      	lsls	r3, r2, #28
 8007ecc:	bf44      	itt	mi
 8007ece:	232b      	movmi	r3, #43	; 0x2b
 8007ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eda:	d015      	beq.n	8007f08 <_vfiprintf_r+0x120>
 8007edc:	9a07      	ldr	r2, [sp, #28]
 8007ede:	4654      	mov	r4, sl
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	f04f 0c0a 	mov.w	ip, #10
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eec:	3b30      	subs	r3, #48	; 0x30
 8007eee:	2b09      	cmp	r3, #9
 8007ef0:	d94d      	bls.n	8007f8e <_vfiprintf_r+0x1a6>
 8007ef2:	b1b0      	cbz	r0, 8007f22 <_vfiprintf_r+0x13a>
 8007ef4:	9207      	str	r2, [sp, #28]
 8007ef6:	e014      	b.n	8007f22 <_vfiprintf_r+0x13a>
 8007ef8:	eba0 0308 	sub.w	r3, r0, r8
 8007efc:	fa09 f303 	lsl.w	r3, r9, r3
 8007f00:	4313      	orrs	r3, r2
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	46a2      	mov	sl, r4
 8007f06:	e7d2      	b.n	8007eae <_vfiprintf_r+0xc6>
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	1d19      	adds	r1, r3, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	9103      	str	r1, [sp, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	bfbb      	ittet	lt
 8007f14:	425b      	neglt	r3, r3
 8007f16:	f042 0202 	orrlt.w	r2, r2, #2
 8007f1a:	9307      	strge	r3, [sp, #28]
 8007f1c:	9307      	strlt	r3, [sp, #28]
 8007f1e:	bfb8      	it	lt
 8007f20:	9204      	strlt	r2, [sp, #16]
 8007f22:	7823      	ldrb	r3, [r4, #0]
 8007f24:	2b2e      	cmp	r3, #46	; 0x2e
 8007f26:	d10c      	bne.n	8007f42 <_vfiprintf_r+0x15a>
 8007f28:	7863      	ldrb	r3, [r4, #1]
 8007f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2c:	d134      	bne.n	8007f98 <_vfiprintf_r+0x1b0>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	1d1a      	adds	r2, r3, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	9203      	str	r2, [sp, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bfb8      	it	lt
 8007f3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f3e:	3402      	adds	r4, #2
 8007f40:	9305      	str	r3, [sp, #20]
 8007f42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008018 <_vfiprintf_r+0x230>
 8007f46:	7821      	ldrb	r1, [r4, #0]
 8007f48:	2203      	movs	r2, #3
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	f7f8 f950 	bl	80001f0 <memchr>
 8007f50:	b138      	cbz	r0, 8007f62 <_vfiprintf_r+0x17a>
 8007f52:	9b04      	ldr	r3, [sp, #16]
 8007f54:	eba0 000a 	sub.w	r0, r0, sl
 8007f58:	2240      	movs	r2, #64	; 0x40
 8007f5a:	4082      	lsls	r2, r0
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	3401      	adds	r4, #1
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f66:	4829      	ldr	r0, [pc, #164]	; (800800c <_vfiprintf_r+0x224>)
 8007f68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f6c:	2206      	movs	r2, #6
 8007f6e:	f7f8 f93f 	bl	80001f0 <memchr>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d03f      	beq.n	8007ff6 <_vfiprintf_r+0x20e>
 8007f76:	4b26      	ldr	r3, [pc, #152]	; (8008010 <_vfiprintf_r+0x228>)
 8007f78:	bb1b      	cbnz	r3, 8007fc2 <_vfiprintf_r+0x1da>
 8007f7a:	9b03      	ldr	r3, [sp, #12]
 8007f7c:	3307      	adds	r3, #7
 8007f7e:	f023 0307 	bic.w	r3, r3, #7
 8007f82:	3308      	adds	r3, #8
 8007f84:	9303      	str	r3, [sp, #12]
 8007f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f88:	443b      	add	r3, r7
 8007f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8c:	e768      	b.n	8007e60 <_vfiprintf_r+0x78>
 8007f8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f92:	460c      	mov	r4, r1
 8007f94:	2001      	movs	r0, #1
 8007f96:	e7a6      	b.n	8007ee6 <_vfiprintf_r+0xfe>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	3401      	adds	r4, #1
 8007f9c:	9305      	str	r3, [sp, #20]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	f04f 0c0a 	mov.w	ip, #10
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007faa:	3a30      	subs	r2, #48	; 0x30
 8007fac:	2a09      	cmp	r2, #9
 8007fae:	d903      	bls.n	8007fb8 <_vfiprintf_r+0x1d0>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0c6      	beq.n	8007f42 <_vfiprintf_r+0x15a>
 8007fb4:	9105      	str	r1, [sp, #20]
 8007fb6:	e7c4      	b.n	8007f42 <_vfiprintf_r+0x15a>
 8007fb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e7f0      	b.n	8007fa4 <_vfiprintf_r+0x1bc>
 8007fc2:	ab03      	add	r3, sp, #12
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	4b12      	ldr	r3, [pc, #72]	; (8008014 <_vfiprintf_r+0x22c>)
 8007fca:	a904      	add	r1, sp, #16
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7fd fc25 	bl	800581c <_printf_float>
 8007fd2:	4607      	mov	r7, r0
 8007fd4:	1c78      	adds	r0, r7, #1
 8007fd6:	d1d6      	bne.n	8007f86 <_vfiprintf_r+0x19e>
 8007fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fda:	07d9      	lsls	r1, r3, #31
 8007fdc:	d405      	bmi.n	8007fea <_vfiprintf_r+0x202>
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	059a      	lsls	r2, r3, #22
 8007fe2:	d402      	bmi.n	8007fea <_vfiprintf_r+0x202>
 8007fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fe6:	f7fe fa85 	bl	80064f4 <__retarget_lock_release_recursive>
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	065b      	lsls	r3, r3, #25
 8007fee:	f53f af1d 	bmi.w	8007e2c <_vfiprintf_r+0x44>
 8007ff2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ff4:	e71c      	b.n	8007e30 <_vfiprintf_r+0x48>
 8007ff6:	ab03      	add	r3, sp, #12
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <_vfiprintf_r+0x22c>)
 8007ffe:	a904      	add	r1, sp, #16
 8008000:	4630      	mov	r0, r6
 8008002:	f7fd feaf 	bl	8005d64 <_printf_i>
 8008006:	e7e4      	b.n	8007fd2 <_vfiprintf_r+0x1ea>
 8008008:	0800873c 	.word	0x0800873c
 800800c:	08008746 	.word	0x08008746
 8008010:	0800581d 	.word	0x0800581d
 8008014:	08007dc3 	.word	0x08007dc3
 8008018:	08008742 	.word	0x08008742

0800801c <__sflush_r>:
 800801c:	898a      	ldrh	r2, [r1, #12]
 800801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008022:	4605      	mov	r5, r0
 8008024:	0710      	lsls	r0, r2, #28
 8008026:	460c      	mov	r4, r1
 8008028:	d458      	bmi.n	80080dc <__sflush_r+0xc0>
 800802a:	684b      	ldr	r3, [r1, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	dc05      	bgt.n	800803c <__sflush_r+0x20>
 8008030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	dc02      	bgt.n	800803c <__sflush_r+0x20>
 8008036:	2000      	movs	r0, #0
 8008038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800803c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800803e:	2e00      	cmp	r6, #0
 8008040:	d0f9      	beq.n	8008036 <__sflush_r+0x1a>
 8008042:	2300      	movs	r3, #0
 8008044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008048:	682f      	ldr	r7, [r5, #0]
 800804a:	6a21      	ldr	r1, [r4, #32]
 800804c:	602b      	str	r3, [r5, #0]
 800804e:	d032      	beq.n	80080b6 <__sflush_r+0x9a>
 8008050:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	075a      	lsls	r2, r3, #29
 8008056:	d505      	bpl.n	8008064 <__sflush_r+0x48>
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	1ac0      	subs	r0, r0, r3
 800805c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800805e:	b10b      	cbz	r3, 8008064 <__sflush_r+0x48>
 8008060:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008062:	1ac0      	subs	r0, r0, r3
 8008064:	2300      	movs	r3, #0
 8008066:	4602      	mov	r2, r0
 8008068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800806a:	6a21      	ldr	r1, [r4, #32]
 800806c:	4628      	mov	r0, r5
 800806e:	47b0      	blx	r6
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	d106      	bne.n	8008084 <__sflush_r+0x68>
 8008076:	6829      	ldr	r1, [r5, #0]
 8008078:	291d      	cmp	r1, #29
 800807a:	d82b      	bhi.n	80080d4 <__sflush_r+0xb8>
 800807c:	4a29      	ldr	r2, [pc, #164]	; (8008124 <__sflush_r+0x108>)
 800807e:	410a      	asrs	r2, r1
 8008080:	07d6      	lsls	r6, r2, #31
 8008082:	d427      	bmi.n	80080d4 <__sflush_r+0xb8>
 8008084:	2200      	movs	r2, #0
 8008086:	6062      	str	r2, [r4, #4]
 8008088:	04d9      	lsls	r1, r3, #19
 800808a:	6922      	ldr	r2, [r4, #16]
 800808c:	6022      	str	r2, [r4, #0]
 800808e:	d504      	bpl.n	800809a <__sflush_r+0x7e>
 8008090:	1c42      	adds	r2, r0, #1
 8008092:	d101      	bne.n	8008098 <__sflush_r+0x7c>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	b903      	cbnz	r3, 800809a <__sflush_r+0x7e>
 8008098:	6560      	str	r0, [r4, #84]	; 0x54
 800809a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800809c:	602f      	str	r7, [r5, #0]
 800809e:	2900      	cmp	r1, #0
 80080a0:	d0c9      	beq.n	8008036 <__sflush_r+0x1a>
 80080a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080a6:	4299      	cmp	r1, r3
 80080a8:	d002      	beq.n	80080b0 <__sflush_r+0x94>
 80080aa:	4628      	mov	r0, r5
 80080ac:	f7ff f89e 	bl	80071ec <_free_r>
 80080b0:	2000      	movs	r0, #0
 80080b2:	6360      	str	r0, [r4, #52]	; 0x34
 80080b4:	e7c0      	b.n	8008038 <__sflush_r+0x1c>
 80080b6:	2301      	movs	r3, #1
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b0      	blx	r6
 80080bc:	1c41      	adds	r1, r0, #1
 80080be:	d1c8      	bne.n	8008052 <__sflush_r+0x36>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0c5      	beq.n	8008052 <__sflush_r+0x36>
 80080c6:	2b1d      	cmp	r3, #29
 80080c8:	d001      	beq.n	80080ce <__sflush_r+0xb2>
 80080ca:	2b16      	cmp	r3, #22
 80080cc:	d101      	bne.n	80080d2 <__sflush_r+0xb6>
 80080ce:	602f      	str	r7, [r5, #0]
 80080d0:	e7b1      	b.n	8008036 <__sflush_r+0x1a>
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d8:	81a3      	strh	r3, [r4, #12]
 80080da:	e7ad      	b.n	8008038 <__sflush_r+0x1c>
 80080dc:	690f      	ldr	r7, [r1, #16]
 80080de:	2f00      	cmp	r7, #0
 80080e0:	d0a9      	beq.n	8008036 <__sflush_r+0x1a>
 80080e2:	0793      	lsls	r3, r2, #30
 80080e4:	680e      	ldr	r6, [r1, #0]
 80080e6:	bf08      	it	eq
 80080e8:	694b      	ldreq	r3, [r1, #20]
 80080ea:	600f      	str	r7, [r1, #0]
 80080ec:	bf18      	it	ne
 80080ee:	2300      	movne	r3, #0
 80080f0:	eba6 0807 	sub.w	r8, r6, r7
 80080f4:	608b      	str	r3, [r1, #8]
 80080f6:	f1b8 0f00 	cmp.w	r8, #0
 80080fa:	dd9c      	ble.n	8008036 <__sflush_r+0x1a>
 80080fc:	6a21      	ldr	r1, [r4, #32]
 80080fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008100:	4643      	mov	r3, r8
 8008102:	463a      	mov	r2, r7
 8008104:	4628      	mov	r0, r5
 8008106:	47b0      	blx	r6
 8008108:	2800      	cmp	r0, #0
 800810a:	dc06      	bgt.n	800811a <__sflush_r+0xfe>
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	e78e      	b.n	8008038 <__sflush_r+0x1c>
 800811a:	4407      	add	r7, r0
 800811c:	eba8 0800 	sub.w	r8, r8, r0
 8008120:	e7e9      	b.n	80080f6 <__sflush_r+0xda>
 8008122:	bf00      	nop
 8008124:	dfbffffe 	.word	0xdfbffffe

08008128 <_fflush_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	690b      	ldr	r3, [r1, #16]
 800812c:	4605      	mov	r5, r0
 800812e:	460c      	mov	r4, r1
 8008130:	b913      	cbnz	r3, 8008138 <_fflush_r+0x10>
 8008132:	2500      	movs	r5, #0
 8008134:	4628      	mov	r0, r5
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	b118      	cbz	r0, 8008142 <_fflush_r+0x1a>
 800813a:	6a03      	ldr	r3, [r0, #32]
 800813c:	b90b      	cbnz	r3, 8008142 <_fflush_r+0x1a>
 800813e:	f7fd ffbf 	bl	80060c0 <__sinit>
 8008142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0f3      	beq.n	8008132 <_fflush_r+0xa>
 800814a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800814c:	07d0      	lsls	r0, r2, #31
 800814e:	d404      	bmi.n	800815a <_fflush_r+0x32>
 8008150:	0599      	lsls	r1, r3, #22
 8008152:	d402      	bmi.n	800815a <_fflush_r+0x32>
 8008154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008156:	f7fe f9cc 	bl	80064f2 <__retarget_lock_acquire_recursive>
 800815a:	4628      	mov	r0, r5
 800815c:	4621      	mov	r1, r4
 800815e:	f7ff ff5d 	bl	800801c <__sflush_r>
 8008162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008164:	07da      	lsls	r2, r3, #31
 8008166:	4605      	mov	r5, r0
 8008168:	d4e4      	bmi.n	8008134 <_fflush_r+0xc>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	059b      	lsls	r3, r3, #22
 800816e:	d4e1      	bmi.n	8008134 <_fflush_r+0xc>
 8008170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008172:	f7fe f9bf 	bl	80064f4 <__retarget_lock_release_recursive>
 8008176:	e7dd      	b.n	8008134 <_fflush_r+0xc>

08008178 <__swhatbuf_r>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	460c      	mov	r4, r1
 800817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008180:	2900      	cmp	r1, #0
 8008182:	b096      	sub	sp, #88	; 0x58
 8008184:	4615      	mov	r5, r2
 8008186:	461e      	mov	r6, r3
 8008188:	da0d      	bge.n	80081a6 <__swhatbuf_r+0x2e>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008190:	f04f 0100 	mov.w	r1, #0
 8008194:	bf0c      	ite	eq
 8008196:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800819a:	2340      	movne	r3, #64	; 0x40
 800819c:	2000      	movs	r0, #0
 800819e:	6031      	str	r1, [r6, #0]
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	b016      	add	sp, #88	; 0x58
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
 80081a6:	466a      	mov	r2, sp
 80081a8:	f000 f862 	bl	8008270 <_fstat_r>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	dbec      	blt.n	800818a <__swhatbuf_r+0x12>
 80081b0:	9901      	ldr	r1, [sp, #4]
 80081b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081ba:	4259      	negs	r1, r3
 80081bc:	4159      	adcs	r1, r3
 80081be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c2:	e7eb      	b.n	800819c <__swhatbuf_r+0x24>

080081c4 <__smakebuf_r>:
 80081c4:	898b      	ldrh	r3, [r1, #12]
 80081c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081c8:	079d      	lsls	r5, r3, #30
 80081ca:	4606      	mov	r6, r0
 80081cc:	460c      	mov	r4, r1
 80081ce:	d507      	bpl.n	80081e0 <__smakebuf_r+0x1c>
 80081d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	2301      	movs	r3, #1
 80081da:	6163      	str	r3, [r4, #20]
 80081dc:	b002      	add	sp, #8
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	ab01      	add	r3, sp, #4
 80081e2:	466a      	mov	r2, sp
 80081e4:	f7ff ffc8 	bl	8008178 <__swhatbuf_r>
 80081e8:	9900      	ldr	r1, [sp, #0]
 80081ea:	4605      	mov	r5, r0
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff f871 	bl	80072d4 <_malloc_r>
 80081f2:	b948      	cbnz	r0, 8008208 <__smakebuf_r+0x44>
 80081f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f8:	059a      	lsls	r2, r3, #22
 80081fa:	d4ef      	bmi.n	80081dc <__smakebuf_r+0x18>
 80081fc:	f023 0303 	bic.w	r3, r3, #3
 8008200:	f043 0302 	orr.w	r3, r3, #2
 8008204:	81a3      	strh	r3, [r4, #12]
 8008206:	e7e3      	b.n	80081d0 <__smakebuf_r+0xc>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	6020      	str	r0, [r4, #0]
 800820c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008210:	81a3      	strh	r3, [r4, #12]
 8008212:	9b00      	ldr	r3, [sp, #0]
 8008214:	6163      	str	r3, [r4, #20]
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	6120      	str	r0, [r4, #16]
 800821a:	b15b      	cbz	r3, 8008234 <__smakebuf_r+0x70>
 800821c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008220:	4630      	mov	r0, r6
 8008222:	f000 f837 	bl	8008294 <_isatty_r>
 8008226:	b128      	cbz	r0, 8008234 <__smakebuf_r+0x70>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	431d      	orrs	r5, r3
 8008238:	81a5      	strh	r5, [r4, #12]
 800823a:	e7cf      	b.n	80081dc <__smakebuf_r+0x18>

0800823c <memmove>:
 800823c:	4288      	cmp	r0, r1
 800823e:	b510      	push	{r4, lr}
 8008240:	eb01 0402 	add.w	r4, r1, r2
 8008244:	d902      	bls.n	800824c <memmove+0x10>
 8008246:	4284      	cmp	r4, r0
 8008248:	4623      	mov	r3, r4
 800824a:	d807      	bhi.n	800825c <memmove+0x20>
 800824c:	1e43      	subs	r3, r0, #1
 800824e:	42a1      	cmp	r1, r4
 8008250:	d008      	beq.n	8008264 <memmove+0x28>
 8008252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800825a:	e7f8      	b.n	800824e <memmove+0x12>
 800825c:	4402      	add	r2, r0
 800825e:	4601      	mov	r1, r0
 8008260:	428a      	cmp	r2, r1
 8008262:	d100      	bne.n	8008266 <memmove+0x2a>
 8008264:	bd10      	pop	{r4, pc}
 8008266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800826a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800826e:	e7f7      	b.n	8008260 <memmove+0x24>

08008270 <_fstat_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d07      	ldr	r5, [pc, #28]	; (8008290 <_fstat_r+0x20>)
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	4611      	mov	r1, r2
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	f7f9 fd6c 	bl	8001d5a <_fstat>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	d102      	bne.n	800828c <_fstat_r+0x1c>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	b103      	cbz	r3, 800828c <_fstat_r+0x1c>
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	bd38      	pop	{r3, r4, r5, pc}
 800828e:	bf00      	nop
 8008290:	20000ba8 	.word	0x20000ba8

08008294 <_isatty_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d06      	ldr	r5, [pc, #24]	; (80082b0 <_isatty_r+0x1c>)
 8008298:	2300      	movs	r3, #0
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	602b      	str	r3, [r5, #0]
 80082a0:	f7f9 fd6b 	bl	8001d7a <_isatty>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_isatty_r+0x1a>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_isatty_r+0x1a>
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	20000ba8 	.word	0x20000ba8

080082b4 <_sbrk_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	; (80082d0 <_sbrk_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7f9 fd74 	bl	8001dac <_sbrk>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_sbrk_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_sbrk_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	20000ba8 	.word	0x20000ba8

080082d4 <memcpy>:
 80082d4:	440a      	add	r2, r1
 80082d6:	4291      	cmp	r1, r2
 80082d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082dc:	d100      	bne.n	80082e0 <memcpy+0xc>
 80082de:	4770      	bx	lr
 80082e0:	b510      	push	{r4, lr}
 80082e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ea:	4291      	cmp	r1, r2
 80082ec:	d1f9      	bne.n	80082e2 <memcpy+0xe>
 80082ee:	bd10      	pop	{r4, pc}

080082f0 <__assert_func>:
 80082f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082f2:	4614      	mov	r4, r2
 80082f4:	461a      	mov	r2, r3
 80082f6:	4b09      	ldr	r3, [pc, #36]	; (800831c <__assert_func+0x2c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4605      	mov	r5, r0
 80082fc:	68d8      	ldr	r0, [r3, #12]
 80082fe:	b14c      	cbz	r4, 8008314 <__assert_func+0x24>
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <__assert_func+0x30>)
 8008302:	9100      	str	r1, [sp, #0]
 8008304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008308:	4906      	ldr	r1, [pc, #24]	; (8008324 <__assert_func+0x34>)
 800830a:	462b      	mov	r3, r5
 800830c:	f000 f872 	bl	80083f4 <fiprintf>
 8008310:	f000 f882 	bl	8008418 <abort>
 8008314:	4b04      	ldr	r3, [pc, #16]	; (8008328 <__assert_func+0x38>)
 8008316:	461c      	mov	r4, r3
 8008318:	e7f3      	b.n	8008302 <__assert_func+0x12>
 800831a:	bf00      	nop
 800831c:	20000064 	.word	0x20000064
 8008320:	08008757 	.word	0x08008757
 8008324:	08008764 	.word	0x08008764
 8008328:	08008792 	.word	0x08008792

0800832c <_calloc_r>:
 800832c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800832e:	fba1 2402 	umull	r2, r4, r1, r2
 8008332:	b94c      	cbnz	r4, 8008348 <_calloc_r+0x1c>
 8008334:	4611      	mov	r1, r2
 8008336:	9201      	str	r2, [sp, #4]
 8008338:	f7fe ffcc 	bl	80072d4 <_malloc_r>
 800833c:	9a01      	ldr	r2, [sp, #4]
 800833e:	4605      	mov	r5, r0
 8008340:	b930      	cbnz	r0, 8008350 <_calloc_r+0x24>
 8008342:	4628      	mov	r0, r5
 8008344:	b003      	add	sp, #12
 8008346:	bd30      	pop	{r4, r5, pc}
 8008348:	220c      	movs	r2, #12
 800834a:	6002      	str	r2, [r0, #0]
 800834c:	2500      	movs	r5, #0
 800834e:	e7f8      	b.n	8008342 <_calloc_r+0x16>
 8008350:	4621      	mov	r1, r4
 8008352:	f7fe f851 	bl	80063f8 <memset>
 8008356:	e7f4      	b.n	8008342 <_calloc_r+0x16>

08008358 <__ascii_mbtowc>:
 8008358:	b082      	sub	sp, #8
 800835a:	b901      	cbnz	r1, 800835e <__ascii_mbtowc+0x6>
 800835c:	a901      	add	r1, sp, #4
 800835e:	b142      	cbz	r2, 8008372 <__ascii_mbtowc+0x1a>
 8008360:	b14b      	cbz	r3, 8008376 <__ascii_mbtowc+0x1e>
 8008362:	7813      	ldrb	r3, [r2, #0]
 8008364:	600b      	str	r3, [r1, #0]
 8008366:	7812      	ldrb	r2, [r2, #0]
 8008368:	1e10      	subs	r0, r2, #0
 800836a:	bf18      	it	ne
 800836c:	2001      	movne	r0, #1
 800836e:	b002      	add	sp, #8
 8008370:	4770      	bx	lr
 8008372:	4610      	mov	r0, r2
 8008374:	e7fb      	b.n	800836e <__ascii_mbtowc+0x16>
 8008376:	f06f 0001 	mvn.w	r0, #1
 800837a:	e7f8      	b.n	800836e <__ascii_mbtowc+0x16>

0800837c <_realloc_r>:
 800837c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008380:	4680      	mov	r8, r0
 8008382:	4614      	mov	r4, r2
 8008384:	460e      	mov	r6, r1
 8008386:	b921      	cbnz	r1, 8008392 <_realloc_r+0x16>
 8008388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800838c:	4611      	mov	r1, r2
 800838e:	f7fe bfa1 	b.w	80072d4 <_malloc_r>
 8008392:	b92a      	cbnz	r2, 80083a0 <_realloc_r+0x24>
 8008394:	f7fe ff2a 	bl	80071ec <_free_r>
 8008398:	4625      	mov	r5, r4
 800839a:	4628      	mov	r0, r5
 800839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a0:	f000 f841 	bl	8008426 <_malloc_usable_size_r>
 80083a4:	4284      	cmp	r4, r0
 80083a6:	4607      	mov	r7, r0
 80083a8:	d802      	bhi.n	80083b0 <_realloc_r+0x34>
 80083aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083ae:	d812      	bhi.n	80083d6 <_realloc_r+0x5a>
 80083b0:	4621      	mov	r1, r4
 80083b2:	4640      	mov	r0, r8
 80083b4:	f7fe ff8e 	bl	80072d4 <_malloc_r>
 80083b8:	4605      	mov	r5, r0
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d0ed      	beq.n	800839a <_realloc_r+0x1e>
 80083be:	42bc      	cmp	r4, r7
 80083c0:	4622      	mov	r2, r4
 80083c2:	4631      	mov	r1, r6
 80083c4:	bf28      	it	cs
 80083c6:	463a      	movcs	r2, r7
 80083c8:	f7ff ff84 	bl	80082d4 <memcpy>
 80083cc:	4631      	mov	r1, r6
 80083ce:	4640      	mov	r0, r8
 80083d0:	f7fe ff0c 	bl	80071ec <_free_r>
 80083d4:	e7e1      	b.n	800839a <_realloc_r+0x1e>
 80083d6:	4635      	mov	r5, r6
 80083d8:	e7df      	b.n	800839a <_realloc_r+0x1e>

080083da <__ascii_wctomb>:
 80083da:	b149      	cbz	r1, 80083f0 <__ascii_wctomb+0x16>
 80083dc:	2aff      	cmp	r2, #255	; 0xff
 80083de:	bf85      	ittet	hi
 80083e0:	238a      	movhi	r3, #138	; 0x8a
 80083e2:	6003      	strhi	r3, [r0, #0]
 80083e4:	700a      	strbls	r2, [r1, #0]
 80083e6:	f04f 30ff 	movhi.w	r0, #4294967295
 80083ea:	bf98      	it	ls
 80083ec:	2001      	movls	r0, #1
 80083ee:	4770      	bx	lr
 80083f0:	4608      	mov	r0, r1
 80083f2:	4770      	bx	lr

080083f4 <fiprintf>:
 80083f4:	b40e      	push	{r1, r2, r3}
 80083f6:	b503      	push	{r0, r1, lr}
 80083f8:	4601      	mov	r1, r0
 80083fa:	ab03      	add	r3, sp, #12
 80083fc:	4805      	ldr	r0, [pc, #20]	; (8008414 <fiprintf+0x20>)
 80083fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008402:	6800      	ldr	r0, [r0, #0]
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	f7ff fcef 	bl	8007de8 <_vfiprintf_r>
 800840a:	b002      	add	sp, #8
 800840c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008410:	b003      	add	sp, #12
 8008412:	4770      	bx	lr
 8008414:	20000064 	.word	0x20000064

08008418 <abort>:
 8008418:	b508      	push	{r3, lr}
 800841a:	2006      	movs	r0, #6
 800841c:	f000 f834 	bl	8008488 <raise>
 8008420:	2001      	movs	r0, #1
 8008422:	f7f9 fc67 	bl	8001cf4 <_exit>

08008426 <_malloc_usable_size_r>:
 8008426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800842a:	1f18      	subs	r0, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	bfbc      	itt	lt
 8008430:	580b      	ldrlt	r3, [r1, r0]
 8008432:	18c0      	addlt	r0, r0, r3
 8008434:	4770      	bx	lr

08008436 <_raise_r>:
 8008436:	291f      	cmp	r1, #31
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4604      	mov	r4, r0
 800843c:	460d      	mov	r5, r1
 800843e:	d904      	bls.n	800844a <_raise_r+0x14>
 8008440:	2316      	movs	r3, #22
 8008442:	6003      	str	r3, [r0, #0]
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	bd38      	pop	{r3, r4, r5, pc}
 800844a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800844c:	b112      	cbz	r2, 8008454 <_raise_r+0x1e>
 800844e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008452:	b94b      	cbnz	r3, 8008468 <_raise_r+0x32>
 8008454:	4620      	mov	r0, r4
 8008456:	f000 f831 	bl	80084bc <_getpid_r>
 800845a:	462a      	mov	r2, r5
 800845c:	4601      	mov	r1, r0
 800845e:	4620      	mov	r0, r4
 8008460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008464:	f000 b818 	b.w	8008498 <_kill_r>
 8008468:	2b01      	cmp	r3, #1
 800846a:	d00a      	beq.n	8008482 <_raise_r+0x4c>
 800846c:	1c59      	adds	r1, r3, #1
 800846e:	d103      	bne.n	8008478 <_raise_r+0x42>
 8008470:	2316      	movs	r3, #22
 8008472:	6003      	str	r3, [r0, #0]
 8008474:	2001      	movs	r0, #1
 8008476:	e7e7      	b.n	8008448 <_raise_r+0x12>
 8008478:	2400      	movs	r4, #0
 800847a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800847e:	4628      	mov	r0, r5
 8008480:	4798      	blx	r3
 8008482:	2000      	movs	r0, #0
 8008484:	e7e0      	b.n	8008448 <_raise_r+0x12>
	...

08008488 <raise>:
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <raise+0xc>)
 800848a:	4601      	mov	r1, r0
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	f7ff bfd2 	b.w	8008436 <_raise_r>
 8008492:	bf00      	nop
 8008494:	20000064 	.word	0x20000064

08008498 <_kill_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4d07      	ldr	r5, [pc, #28]	; (80084b8 <_kill_r+0x20>)
 800849c:	2300      	movs	r3, #0
 800849e:	4604      	mov	r4, r0
 80084a0:	4608      	mov	r0, r1
 80084a2:	4611      	mov	r1, r2
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	f7f9 fc15 	bl	8001cd4 <_kill>
 80084aa:	1c43      	adds	r3, r0, #1
 80084ac:	d102      	bne.n	80084b4 <_kill_r+0x1c>
 80084ae:	682b      	ldr	r3, [r5, #0]
 80084b0:	b103      	cbz	r3, 80084b4 <_kill_r+0x1c>
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	bd38      	pop	{r3, r4, r5, pc}
 80084b6:	bf00      	nop
 80084b8:	20000ba8 	.word	0x20000ba8

080084bc <_getpid_r>:
 80084bc:	f7f9 bc02 	b.w	8001cc4 <_getpid>

080084c0 <_init>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr

080084cc <_fini>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr
