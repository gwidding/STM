
flash_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005370  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005520  08005520  00015520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005584  08005584  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800558c  0800558c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800558c  0800558c  0001558c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000004c0  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000051c  2000051c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012963  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002953  00000000  00000000  00032a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001110  00000000  00000000  00035388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d5a  00000000  00000000  00036498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025b01  00000000  00000000  000371f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013b14  00000000  00000000  0005ccf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7514  00000000  00000000  00070807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d70  00000000  00000000  00157d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0015ca8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005508 	.word	0x08005508

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08005508 	.word	0x08005508

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <readFlash>:
static uint32_t GetSector(uint32_t Address);
static uint32_t GetSectorSize(uint32_t Sector);
unsigned char buf[40];
HAL_StatusTypeDef error;

void readFlash(unsigned int addr) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	unsigned int value = *((unsigned int*)addr);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	60fb      	str	r3, [r7, #12]
	sprintf(buf, "addr[%08x] = 0x%08x \r\n", addr, value);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	490c      	ldr	r1, [pc, #48]	; (80005d0 <readFlash+0x44>)
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <readFlash+0x48>)
 80005a2:	f004 fb0d 	bl	8004bc0 <siprintf>
	error = HAL_UART_Transmit(&huart3, buf, sizeof(buf), 0xFFFF);
 80005a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005aa:	2228      	movs	r2, #40	; 0x28
 80005ac:	4909      	ldr	r1, [pc, #36]	; (80005d4 <readFlash+0x48>)
 80005ae:	480a      	ldr	r0, [pc, #40]	; (80005d8 <readFlash+0x4c>)
 80005b0:	f003 fb3f 	bl	8003c32 <HAL_UART_Transmit>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <readFlash+0x50>)
 80005ba:	701a      	strb	r2, [r3, #0]
	if (error != HAL_OK) {
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <readFlash+0x50>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d000      	beq.n	80005c6 <readFlash+0x3a>
		while(1);
 80005c4:	e7fe      	b.n	80005c4 <readFlash+0x38>
	}
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	08005520 	.word	0x08005520
 80005d4:	20000378 	.word	0x20000378
 80005d8:	20000308 	.word	0x20000308
 80005dc:	200003a0 	.word	0x200003a0

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fe8c 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f8ba 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fa10 	bl	8000a10 <MX_GPIO_Init>
  MX_ETH_Init();
 80005f0:	f000 f922 	bl	8000838 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f9e2 	bl	80009bc <MX_USART3_UART_Init>
  MX_RTC_Init();
 80005f8:	f000 f96c 	bl	80008d4 <MX_RTC_Init>
  MX_TIM2_Init();
 80005fc:	f000 f990 	bl	8000920 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_FLASH_Unlock();
 8000600:	f001 fc34 	bl	8001e6c <HAL_FLASH_Unlock>

  FirstSector = GetSector(FLASH_USER_START_ADDR);
 8000604:	484b      	ldr	r0, [pc, #300]	; (8000734 <main+0x154>)
 8000606:	f000 fad1 	bl	8000bac <GetSector>
 800060a:	4603      	mov	r3, r0
 800060c:	4a4a      	ldr	r2, [pc, #296]	; (8000738 <main+0x158>)
 800060e:	6013      	str	r3, [r2, #0]
  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8000610:	484a      	ldr	r0, [pc, #296]	; (800073c <main+0x15c>)
 8000612:	f000 fc03 	bl	8000e1c <GetSectorSize>
 8000616:	4602      	mov	r2, r0
 8000618:	4b49      	ldr	r3, [pc, #292]	; (8000740 <main+0x160>)
 800061a:	4413      	add	r3, r2
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fac5 	bl	8000bac <GetSector>
 8000622:	4602      	mov	r2, r0
 8000624:	4b44      	ldr	r3, [pc, #272]	; (8000738 <main+0x158>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	3301      	adds	r3, #1
 800062c:	4a45      	ldr	r2, [pc, #276]	; (8000744 <main+0x164>)
 800062e:	6013      	str	r3, [r2, #0]

  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000630:	4b45      	ldr	r3, [pc, #276]	; (8000748 <main+0x168>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000636:	4b44      	ldr	r3, [pc, #272]	; (8000748 <main+0x168>)
 8000638:	2202      	movs	r2, #2
 800063a:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = FirstSector;
 800063c:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <main+0x158>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a41      	ldr	r2, [pc, #260]	; (8000748 <main+0x168>)
 8000642:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = NbOfSectors;
 8000644:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <main+0x164>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <main+0x168>)
 800064a:	60d3      	str	r3, [r2, #12]
  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800064c:	493f      	ldr	r1, [pc, #252]	; (800074c <main+0x16c>)
 800064e:	483e      	ldr	r0, [pc, #248]	; (8000748 <main+0x168>)
 8000650:	f001 fd7e 	bl	8002150 <HAL_FLASHEx_Erase>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <main+0x88>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000660:	483b      	ldr	r0, [pc, #236]	; (8000750 <main+0x170>)
 8000662:	f002 f861 	bl	8002728 <HAL_GPIO_WritePin>
 8000666:	e7f8      	b.n	800065a <main+0x7a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  }
  }
  Address = FLASH_USER_START_ADDR;
 8000668:	4b3a      	ldr	r3, [pc, #232]	; (8000754 <main+0x174>)
 800066a:	4a32      	ldr	r2, [pc, #200]	; (8000734 <main+0x154>)
 800066c:	601a      	str	r2, [r3, #0]

  while(Address < FLASH_USER_END_ADDR)
 800066e:	e01d      	b.n	80006ac <main+0xcc>
  {
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32) == HAL_OK)
 8000670:	4b38      	ldr	r3, [pc, #224]	; (8000754 <main+0x174>)
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	f04f 3299 	mov.w	r2, #2576980377	; 0x99999999
 8000678:	f04f 0300 	mov.w	r3, #0
 800067c:	2002      	movs	r0, #2
 800067e:	f001 fba1 	bl	8001dc4 <HAL_FLASH_Program>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d10a      	bne.n	800069e <main+0xbe>
    {
    	readFlash(Address);
 8000688:	4b32      	ldr	r3, [pc, #200]	; (8000754 <main+0x174>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff7d 	bl	800058c <readFlash>
      Address = Address + 4;
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <main+0x174>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3304      	adds	r3, #4
 8000698:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <main+0x174>)
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	e006      	b.n	80006ac <main+0xcc>
    {
       /* Error occurred while writing data in Flash memory.
          User can add here some code to deal with this error */
      while (1)
      {
     	 HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a4:	482a      	ldr	r0, [pc, #168]	; (8000750 <main+0x170>)
 80006a6:	f002 f83f 	bl	8002728 <HAL_GPIO_WritePin>
 80006aa:	e7f8      	b.n	800069e <main+0xbe>
  while(Address < FLASH_USER_END_ADDR)
 80006ac:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0x15c>)
 80006ae:	f000 fbb5 	bl	8000e1c <GetSectorSize>
 80006b2:	4602      	mov	r2, r0
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <main+0x160>)
 80006b6:	4413      	add	r3, r2
 80006b8:	4a26      	ldr	r2, [pc, #152]	; (8000754 <main+0x174>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	4293      	cmp	r3, r2
 80006be:	d8d7      	bhi.n	8000670 <main+0x90>
      }
    }
  }

   HAL_FLASH_Lock();
 80006c0:	f001 fbf6 	bl	8001eb0 <HAL_FLASH_Lock>

   Address = FLASH_USER_START_ADDR;
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <main+0x174>)
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <main+0x154>)
 80006c8:	601a      	str	r2, [r3, #0]
   MemoryProgramStatus = 0x0;
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <main+0x178>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]

 while(Address < FLASH_USER_END_ADDR)
 80006d0:	e013      	b.n	80006fa <main+0x11a>
 {
   data32 = *(__IO uint32_t *)Address;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <main+0x174>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <main+0x17c>)
 80006da:	6013      	str	r3, [r2, #0]

   if (data32 != DATA_32)
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <main+0x17c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f1b3 3f99 	cmp.w	r3, #2576980377	; 0x99999999
 80006e4:	d004      	beq.n	80006f0 <main+0x110>
   {
	 MemoryProgramStatus++;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <main+0x178>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <main+0x178>)
 80006ee:	6013      	str	r3, [r2, #0]
   }
   Address = Address + 4;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <main+0x174>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3304      	adds	r3, #4
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <main+0x174>)
 80006f8:	6013      	str	r3, [r2, #0]
 while(Address < FLASH_USER_END_ADDR)
 80006fa:	4810      	ldr	r0, [pc, #64]	; (800073c <main+0x15c>)
 80006fc:	f000 fb8e 	bl	8000e1c <GetSectorSize>
 8000700:	4602      	mov	r2, r0
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <main+0x160>)
 8000704:	4413      	add	r3, r2
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <main+0x174>)
 8000708:	6812      	ldr	r2, [r2, #0]
 800070a:	4293      	cmp	r3, r2
 800070c:	d8e1      	bhi.n	80006d2 <main+0xf2>
 }
 if(MemoryProgramStatus == 0)
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <main+0x178>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d105      	bne.n	8000722 <main+0x142>
  {
	/* No error detected. Switch on LED1*/
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 8000716:	2201      	movs	r2, #1
 8000718:	2101      	movs	r1, #1
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <main+0x170>)
 800071c:	f002 f804 	bl	8002728 <HAL_GPIO_WritePin>
 8000720:	e004      	b.n	800072c <main+0x14c>
  }
  else
  {
	/* Error detected. Switch on LED2*/
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 8000722:	2201      	movs	r2, #1
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	480a      	ldr	r0, [pc, #40]	; (8000750 <main+0x170>)
 8000728:	f001 fffe 	bl	8002728 <HAL_GPIO_WritePin>
 800072c:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 800072e:	4618      	mov	r0, r3
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08008000 	.word	0x08008000
 8000738:	2000034c 	.word	0x2000034c
 800073c:	0800c000 	.word	0x0800c000
 8000740:	0800bfff 	.word	0x0800bfff
 8000744:	20000350 	.word	0x20000350
 8000748:	20000364 	.word	0x20000364
 800074c:	20000358 	.word	0x20000358
 8000750:	40020400 	.word	0x40020400
 8000754:	20000354 	.word	0x20000354
 8000758:	20000360 	.word	0x20000360
 800075c:	2000035c 	.word	0x2000035c

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fa46 	bl	8004c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemClock_Config+0xd0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a28      	ldr	r2, [pc, #160]	; (8000830 <SystemClock_Config+0xd0>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <SystemClock_Config+0xd0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemClock_Config+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a22      	ldr	r2, [pc, #136]	; (8000834 <SystemClock_Config+0xd4>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b20      	ldr	r3, [pc, #128]	; (8000834 <SystemClock_Config+0xd4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007bc:	2305      	movs	r3, #5
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c6:	2301      	movs	r3, #1
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007d8:	23a8      	movs	r3, #168	; 0xa8
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e0:	2307      	movs	r3, #7
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 ffb7 	bl	800275c <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f4:	f000 fb48 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000804:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2105      	movs	r1, #5
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fa18 	bl	8002c4c <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000822:	f000 fb31 	bl	8000e88 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_ETH_Init+0x84>)
 800083e:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <MX_ETH_Init+0x88>)
 8000840:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_ETH_Init+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_ETH_Init+0x8c>)
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_ETH_Init+0x8c>)
 8000850:	22e1      	movs	r2, #225	; 0xe1
 8000852:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_ETH_Init+0x8c>)
 8000856:	2200      	movs	r2, #0
 8000858:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_ETH_Init+0x8c>)
 800085c:	2200      	movs	r2, #0
 800085e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_ETH_Init+0x8c>)
 8000862:	2200      	movs	r2, #0
 8000864:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_ETH_Init+0x84>)
 8000868:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <MX_ETH_Init+0x8c>)
 800086a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_ETH_Init+0x84>)
 800086e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000872:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_ETH_Init+0x84>)
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <MX_ETH_Init+0x90>)
 8000878:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_ETH_Init+0x84>)
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <MX_ETH_Init+0x94>)
 800087e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_ETH_Init+0x84>)
 8000882:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000886:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_ETH_Init+0x84>)
 800088a:	f000 ff73 	bl	8001774 <HAL_ETH_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000894:	f000 faf8 	bl	8000e88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000898:	2238      	movs	r2, #56	; 0x38
 800089a:	2100      	movs	r1, #0
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_ETH_Init+0x98>)
 800089e:	f004 f9af 	bl	8004c00 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_ETH_Init+0x98>)
 80008a4:	2221      	movs	r2, #33	; 0x21
 80008a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_ETH_Init+0x98>)
 80008aa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_ETH_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200001f0 	.word	0x200001f0
 80008c0:	40028000 	.word	0x40028000
 80008c4:	200003a4 	.word	0x200003a4
 80008c8:	20000150 	.word	0x20000150
 80008cc:	200000b0 	.word	0x200000b0
 80008d0:	20000078 	.word	0x20000078

080008d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_RTC_Init+0x44>)
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <MX_RTC_Init+0x48>)
 80008dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_RTC_Init+0x44>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_RTC_Init+0x44>)
 80008e6:	227f      	movs	r2, #127	; 0x7f
 80008e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_RTC_Init+0x44>)
 80008ec:	22ff      	movs	r2, #255	; 0xff
 80008ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_RTC_Init+0x44>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_RTC_Init+0x44>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_RTC_Init+0x44>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_RTC_Init+0x44>)
 8000904:	f002 fd82 	bl	800340c <HAL_RTC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800090e:	f000 fabb 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200002a0 	.word	0x200002a0
 800091c:	40002800 	.word	0x40002800

08000920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_TIM2_Init+0x98>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000942:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_TIM2_Init+0x98>)
 8000946:	f240 32e7 	movw	r2, #999	; 0x3e7
 800094a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_TIM2_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900-1;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_TIM2_Init+0x98>)
 8000954:	f240 3283 	movw	r2, #899	; 0x383
 8000958:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_TIM2_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_TIM2_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000966:	4814      	ldr	r0, [pc, #80]	; (80009b8 <MX_TIM2_Init+0x98>)
 8000968:	f002 fe4a 	bl	8003600 <HAL_TIM_Base_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000972:	f000 fa89 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	4619      	mov	r1, r3
 8000982:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_TIM2_Init+0x98>)
 8000984:	f002 fe8b 	bl	800369e <HAL_TIM_ConfigClockSource>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800098e:	f000 fa7b 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <MX_TIM2_Init+0x98>)
 80009a0:	f003 f87e 	bl	8003aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009aa:	f000 fa6d 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200002c0 	.word	0x200002c0

080009bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART3_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009f4:	f003 f8d0 	bl	8003b98 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 fa43 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000308 	.word	0x20000308
 8000a0c:	40004800 	.word	0x40004800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	4b5b      	ldr	r3, [pc, #364]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a5a      	ldr	r2, [pc, #360]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b58      	ldr	r3, [pc, #352]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	4b54      	ldr	r3, [pc, #336]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a53      	ldr	r2, [pc, #332]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b51      	ldr	r3, [pc, #324]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b4a      	ldr	r3, [pc, #296]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a45      	ldr	r2, [pc, #276]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b43      	ldr	r3, [pc, #268]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a3e      	ldr	r2, [pc, #248]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a37      	ldr	r2, [pc, #220]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <MX_GPIO_Init+0x188>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ad4:	4831      	ldr	r0, [pc, #196]	; (8000b9c <MX_GPIO_Init+0x18c>)
 8000ad6:	f001 fe27 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <MX_GPIO_Init+0x190>)
 8000ae0:	f001 fe22 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	482a      	ldr	r0, [pc, #168]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000afc:	f001 fc68 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b00:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4820      	ldr	r0, [pc, #128]	; (8000b9c <MX_GPIO_Init+0x18c>)
 8000b1a:	f001 fc59 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b1e:	2340      	movs	r3, #64	; 0x40
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <MX_GPIO_Init+0x190>)
 8000b36:	f001 fc4b 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <MX_GPIO_Init+0x190>)
 8000b4e:	f001 fc3f 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b52:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b64:	230a      	movs	r3, #10
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <MX_GPIO_Init+0x198>)
 8000b70:	f001 fc2e 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <MX_GPIO_Init+0x198>)
 8000b8a:	f001 fc21 	bl	80023d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8e:	bf00      	nop
 8000b90:	3730      	adds	r7, #48	; 0x30
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020000 	.word	0x40020000

08000bac <GetSector>:

/* USER CODE BEGIN 4 */
static uint32_t GetSector(uint32_t Address) {
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
	if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a82      	ldr	r2, [pc, #520]	; (8000dc4 <GetSector+0x218>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d206      	bcs.n	8000bce <GetSector+0x22>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000bc6:	d302      	bcc.n	8000bce <GetSector+0x22>
		sector = FLASH_SECTOR_0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	e0f3      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_2)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a7d      	ldr	r2, [pc, #500]	; (8000dc8 <GetSector+0x21c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d206      	bcs.n	8000be4 <GetSector+0x38>
			&& (Address >= ADDR_FLASH_SECTOR_1)) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a7a      	ldr	r2, [pc, #488]	; (8000dc4 <GetSector+0x218>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d302      	bcc.n	8000be4 <GetSector+0x38>
		sector = FLASH_SECTOR_1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	e0e8      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a79      	ldr	r2, [pc, #484]	; (8000dcc <GetSector+0x220>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d206      	bcs.n	8000bfa <GetSector+0x4e>
			&& (Address >= ADDR_FLASH_SECTOR_2)) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a76      	ldr	r2, [pc, #472]	; (8000dc8 <GetSector+0x21c>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d302      	bcc.n	8000bfa <GetSector+0x4e>
		sector = FLASH_SECTOR_2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	e0dd      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_4)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a74      	ldr	r2, [pc, #464]	; (8000dd0 <GetSector+0x224>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d806      	bhi.n	8000c10 <GetSector+0x64>
			&& (Address >= ADDR_FLASH_SECTOR_3)) {
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a71      	ldr	r2, [pc, #452]	; (8000dcc <GetSector+0x220>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d302      	bcc.n	8000c10 <GetSector+0x64>
		sector = FLASH_SECTOR_3;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e0d2      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_5)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a70      	ldr	r2, [pc, #448]	; (8000dd4 <GetSector+0x228>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d806      	bhi.n	8000c26 <GetSector+0x7a>
			&& (Address >= ADDR_FLASH_SECTOR_4)) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a6d      	ldr	r2, [pc, #436]	; (8000dd0 <GetSector+0x224>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d902      	bls.n	8000c26 <GetSector+0x7a>
		sector = FLASH_SECTOR_4;
 8000c20:	2304      	movs	r3, #4
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	e0c7      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_6)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a6b      	ldr	r2, [pc, #428]	; (8000dd8 <GetSector+0x22c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d806      	bhi.n	8000c3c <GetSector+0x90>
			&& (Address >= ADDR_FLASH_SECTOR_5)) {
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a68      	ldr	r2, [pc, #416]	; (8000dd4 <GetSector+0x228>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d902      	bls.n	8000c3c <GetSector+0x90>
		sector = FLASH_SECTOR_5;
 8000c36:	2305      	movs	r3, #5
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e0bc      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_7)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a67      	ldr	r2, [pc, #412]	; (8000ddc <GetSector+0x230>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d806      	bhi.n	8000c52 <GetSector+0xa6>
			&& (Address >= ADDR_FLASH_SECTOR_6)) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a64      	ldr	r2, [pc, #400]	; (8000dd8 <GetSector+0x22c>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d902      	bls.n	8000c52 <GetSector+0xa6>
		sector = FLASH_SECTOR_6;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e0b1      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_8)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a62      	ldr	r2, [pc, #392]	; (8000de0 <GetSector+0x234>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d806      	bhi.n	8000c68 <GetSector+0xbc>
			&& (Address >= ADDR_FLASH_SECTOR_7)) {
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a5f      	ldr	r2, [pc, #380]	; (8000ddc <GetSector+0x230>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d902      	bls.n	8000c68 <GetSector+0xbc>
		sector = FLASH_SECTOR_7;
 8000c62:	2307      	movs	r3, #7
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	e0a6      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_9)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a5e      	ldr	r2, [pc, #376]	; (8000de4 <GetSector+0x238>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d806      	bhi.n	8000c7e <GetSector+0xd2>
			&& (Address >= ADDR_FLASH_SECTOR_8)) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a5b      	ldr	r2, [pc, #364]	; (8000de0 <GetSector+0x234>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d902      	bls.n	8000c7e <GetSector+0xd2>
		sector = FLASH_SECTOR_8;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e09b      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_10)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a59      	ldr	r2, [pc, #356]	; (8000de8 <GetSector+0x23c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d806      	bhi.n	8000c94 <GetSector+0xe8>
			&& (Address >= ADDR_FLASH_SECTOR_9)) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a56      	ldr	r2, [pc, #344]	; (8000de4 <GetSector+0x238>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d902      	bls.n	8000c94 <GetSector+0xe8>
		sector = FLASH_SECTOR_9;
 8000c8e:	2309      	movs	r3, #9
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e090      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_11)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a55      	ldr	r2, [pc, #340]	; (8000dec <GetSector+0x240>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d806      	bhi.n	8000caa <GetSector+0xfe>
			&& (Address >= ADDR_FLASH_SECTOR_10)) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a52      	ldr	r2, [pc, #328]	; (8000de8 <GetSector+0x23c>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d902      	bls.n	8000caa <GetSector+0xfe>
		sector = FLASH_SECTOR_10;
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	e085      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_12)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000cb0:	d206      	bcs.n	8000cc0 <GetSector+0x114>
			&& (Address >= ADDR_FLASH_SECTOR_11)) {
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4d      	ldr	r2, [pc, #308]	; (8000dec <GetSector+0x240>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d902      	bls.n	8000cc0 <GetSector+0x114>
		sector = FLASH_SECTOR_11;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e07a      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_13)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4b      	ldr	r2, [pc, #300]	; (8000df0 <GetSector+0x244>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d206      	bcs.n	8000cd6 <GetSector+0x12a>
			&& (Address >= ADDR_FLASH_SECTOR_12)) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000cce:	d302      	bcc.n	8000cd6 <GetSector+0x12a>
		sector = FLASH_SECTOR_12;
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e06f      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_14)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <GetSector+0x248>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d206      	bcs.n	8000cec <GetSector+0x140>
			&& (Address >= ADDR_FLASH_SECTOR_13)) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a43      	ldr	r2, [pc, #268]	; (8000df0 <GetSector+0x244>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d302      	bcc.n	8000cec <GetSector+0x140>
		sector = FLASH_SECTOR_13;
 8000ce6:	230d      	movs	r3, #13
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	e064      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_15)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a42      	ldr	r2, [pc, #264]	; (8000df8 <GetSector+0x24c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d206      	bcs.n	8000d02 <GetSector+0x156>
			&& (Address >= ADDR_FLASH_SECTOR_14)) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a3f      	ldr	r2, [pc, #252]	; (8000df4 <GetSector+0x248>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d302      	bcc.n	8000d02 <GetSector+0x156>
		sector = FLASH_SECTOR_14;
 8000cfc:	230e      	movs	r3, #14
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	e059      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_16)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a3d      	ldr	r2, [pc, #244]	; (8000dfc <GetSector+0x250>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d806      	bhi.n	8000d18 <GetSector+0x16c>
			&& (Address >= ADDR_FLASH_SECTOR_15)) {
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a3a      	ldr	r2, [pc, #232]	; (8000df8 <GetSector+0x24c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d302      	bcc.n	8000d18 <GetSector+0x16c>
		sector = FLASH_SECTOR_15;
 8000d12:	230f      	movs	r3, #15
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e04e      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_17)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a39      	ldr	r2, [pc, #228]	; (8000e00 <GetSector+0x254>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d806      	bhi.n	8000d2e <GetSector+0x182>
			&& (Address >= ADDR_FLASH_SECTOR_16)) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a36      	ldr	r2, [pc, #216]	; (8000dfc <GetSector+0x250>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d902      	bls.n	8000d2e <GetSector+0x182>
		sector = FLASH_SECTOR_16;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e043      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_18)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a34      	ldr	r2, [pc, #208]	; (8000e04 <GetSector+0x258>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d806      	bhi.n	8000d44 <GetSector+0x198>
			&& (Address >= ADDR_FLASH_SECTOR_17)) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <GetSector+0x254>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d902      	bls.n	8000d44 <GetSector+0x198>
		sector = FLASH_SECTOR_17;
 8000d3e:	2311      	movs	r3, #17
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	e038      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_19)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a30      	ldr	r2, [pc, #192]	; (8000e08 <GetSector+0x25c>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d806      	bhi.n	8000d5a <GetSector+0x1ae>
			&& (Address >= ADDR_FLASH_SECTOR_18)) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <GetSector+0x258>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d902      	bls.n	8000d5a <GetSector+0x1ae>
		sector = FLASH_SECTOR_18;
 8000d54:	2312      	movs	r3, #18
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e02d      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_20)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <GetSector+0x260>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d806      	bhi.n	8000d70 <GetSector+0x1c4>
			&& (Address >= ADDR_FLASH_SECTOR_19)) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <GetSector+0x25c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d902      	bls.n	8000d70 <GetSector+0x1c4>
		sector = FLASH_SECTOR_19;
 8000d6a:	2313      	movs	r3, #19
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	e022      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_21)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a27      	ldr	r2, [pc, #156]	; (8000e10 <GetSector+0x264>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d806      	bhi.n	8000d86 <GetSector+0x1da>
			&& (Address >= ADDR_FLASH_SECTOR_20)) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a24      	ldr	r2, [pc, #144]	; (8000e0c <GetSector+0x260>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d902      	bls.n	8000d86 <GetSector+0x1da>
		sector = FLASH_SECTOR_20;
 8000d80:	2314      	movs	r3, #20
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e017      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_22)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a22      	ldr	r2, [pc, #136]	; (8000e14 <GetSector+0x268>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d806      	bhi.n	8000d9c <GetSector+0x1f0>
			&& (Address >= ADDR_FLASH_SECTOR_21)) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <GetSector+0x264>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d902      	bls.n	8000d9c <GetSector+0x1f0>
		sector = FLASH_SECTOR_21;
 8000d96:	2315      	movs	r3, #21
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e00c      	b.n	8000db6 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_23)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <GetSector+0x26c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d806      	bhi.n	8000db2 <GetSector+0x206>
			&& (Address >= ADDR_FLASH_SECTOR_22)) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <GetSector+0x268>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d902      	bls.n	8000db2 <GetSector+0x206>
		sector = FLASH_SECTOR_22;
 8000dac:	2316      	movs	r3, #22
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e001      	b.n	8000db6 <GetSector+0x20a>
	} else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
	{
		sector = FLASH_SECTOR_23;
 8000db2:	2317      	movs	r3, #23
 8000db4:	60fb      	str	r3, [r7, #12]
	}
	return sector;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	08004000 	.word	0x08004000
 8000dc8:	08008000 	.word	0x08008000
 8000dcc:	0800c000 	.word	0x0800c000
 8000dd0:	0800ffff 	.word	0x0800ffff
 8000dd4:	0801ffff 	.word	0x0801ffff
 8000dd8:	0803ffff 	.word	0x0803ffff
 8000ddc:	0805ffff 	.word	0x0805ffff
 8000de0:	0807ffff 	.word	0x0807ffff
 8000de4:	0809ffff 	.word	0x0809ffff
 8000de8:	080bffff 	.word	0x080bffff
 8000dec:	080dffff 	.word	0x080dffff
 8000df0:	08104000 	.word	0x08104000
 8000df4:	08108000 	.word	0x08108000
 8000df8:	0810c000 	.word	0x0810c000
 8000dfc:	0810ffff 	.word	0x0810ffff
 8000e00:	0811ffff 	.word	0x0811ffff
 8000e04:	0813ffff 	.word	0x0813ffff
 8000e08:	0815ffff 	.word	0x0815ffff
 8000e0c:	0817ffff 	.word	0x0817ffff
 8000e10:	0819ffff 	.word	0x0819ffff
 8000e14:	081bffff 	.word	0x081bffff
 8000e18:	081dffff 	.word	0x081dffff

08000e1c <GetSectorSize>:
  * @brief  Gets sector Size
  * @param  None
  * @retval The size of a given sector
  */
static uint32_t GetSectorSize(uint32_t Sector)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) ||\
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d014      	beq.n	8000e58 <GetSectorSize+0x3c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d011      	beq.n	8000e58 <GetSectorSize+0x3c>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d00e      	beq.n	8000e58 <GetSectorSize+0x3c>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d00b      	beq.n	8000e58 <GetSectorSize+0x3c>
     (Sector == FLASH_SECTOR_3) || (Sector == FLASH_SECTOR_12) || (Sector == FLASH_SECTOR_13) ||\
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b0c      	cmp	r3, #12
 8000e44:	d008      	beq.n	8000e58 <GetSectorSize+0x3c>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0d      	cmp	r3, #13
 8000e4a:	d005      	beq.n	8000e58 <GetSectorSize+0x3c>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b0e      	cmp	r3, #14
 8000e50:	d002      	beq.n	8000e58 <GetSectorSize+0x3c>
     (Sector == FLASH_SECTOR_14) || (Sector == FLASH_SECTOR_15))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d103      	bne.n	8000e60 <GetSectorSize+0x44>
  {
    sectorsize = 16 * 1024;
 8000e58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	e00c      	b.n	8000e7a <GetSectorSize+0x5e>
  }
  else if((Sector == FLASH_SECTOR_4) || (Sector == FLASH_SECTOR_16))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d002      	beq.n	8000e6c <GetSectorSize+0x50>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b10      	cmp	r3, #16
 8000e6a:	d103      	bne.n	8000e74 <GetSectorSize+0x58>
  {
    sectorsize = 64 * 1024;
 8000e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	e002      	b.n	8000e7a <GetSectorSize+0x5e>
  }
  else
  {
    sectorsize = 128 * 1024;
 8000e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e78:	60fb      	str	r3, [r7, #12]
  }
  return sectorsize;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <Error_Handler+0x18>)
 8000e94:	f001 fc48 	bl	8002728 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x14>
 8000e9e:	bf00      	nop
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	; 0x38
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a55      	ldr	r2, [pc, #340]	; (8001068 <HAL_ETH_MspInit+0x174>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	f040 80a4 	bne.w	8001060 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
 8000f1c:	4b53      	ldr	r3, [pc, #332]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4a52      	ldr	r2, [pc, #328]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f26:	6313      	str	r3, [r2, #48]	; 0x30
 8000f28:	4b50      	ldr	r3, [pc, #320]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f30:	623b      	str	r3, [r7, #32]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	4b4c      	ldr	r3, [pc, #304]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	4b45      	ldr	r3, [pc, #276]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a44      	ldr	r2, [pc, #272]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b42      	ldr	r3, [pc, #264]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	4b3e      	ldr	r3, [pc, #248]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a3d      	ldr	r2, [pc, #244]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b3b      	ldr	r3, [pc, #236]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a36      	ldr	r2, [pc, #216]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a2f      	ldr	r2, [pc, #188]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	4a28      	ldr	r2, [pc, #160]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <HAL_ETH_MspInit+0x178>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fdc:	2332      	movs	r3, #50	; 0x32
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fec:	230b      	movs	r3, #11
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481e      	ldr	r0, [pc, #120]	; (8001070 <HAL_ETH_MspInit+0x17c>)
 8000ff8:	f001 f9ea 	bl	80023d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ffc:	2386      	movs	r3, #134	; 0x86
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100c:	230b      	movs	r3, #11
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4619      	mov	r1, r3
 8001016:	4817      	ldr	r0, [pc, #92]	; (8001074 <HAL_ETH_MspInit+0x180>)
 8001018:	f001 f9da 	bl	80023d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102e:	230b      	movs	r3, #11
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	480f      	ldr	r0, [pc, #60]	; (8001078 <HAL_ETH_MspInit+0x184>)
 800103a:	f001 f9c9 	bl	80023d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800103e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001050:	230b      	movs	r3, #11
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <HAL_ETH_MspInit+0x188>)
 800105c:	f001 f9b8 	bl	80023d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3738      	adds	r7, #56	; 0x38
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40028000 	.word	0x40028000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020800 	.word	0x40020800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40021800 	.word	0x40021800

08001080 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	2230      	movs	r2, #48	; 0x30
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fdb5 	bl	8004c00 <memset>
  if(hrtc->Instance==RTC)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_RTC_MspInit+0x4c>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d111      	bne.n	80010c4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010a0:	2320      	movs	r3, #32
 80010a2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80010a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 ffec 	bl	800308c <HAL_RCCEx_PeriphCLKConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80010ba:	f7ff fee5 	bl	8000e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_RTC_MspInit+0x50>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3738      	adds	r7, #56	; 0x38
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40002800 	.word	0x40002800
 80010d0:	42470e3c 	.word	0x42470e3c

080010d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e4:	d10d      	bne.n	8001102 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_TIM_Base_MspInit+0x3c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_TIM_Base_MspInit+0x3c>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_TIM_Base_MspInit+0x3c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_UART_MspInit+0x94>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d134      	bne.n	80011a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_UART_MspInit+0x98>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_UART_MspInit+0x98>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_UART_MspInit+0x98>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_UART_MspInit+0x98>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_UART_MspInit+0x98>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_UART_MspInit+0x98>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800116e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001180:	2307      	movs	r3, #7
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <HAL_UART_MspInit+0x9c>)
 800118c:	f001 f920 	bl	80023d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2027      	movs	r0, #39	; 0x27
 8001196:	f000 fa24 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800119a:	2027      	movs	r0, #39	; 0x27
 800119c:	f000 fa3d 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40004800 	.word	0x40004800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f8d0 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <USART3_IRQHandler+0x10>)
 800120e:	f002 fda3 	bl	8003d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000308 	.word	0x20000308

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f003 fce0 	bl	8004c10 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20030000 	.word	0x20030000
 800127c:	00000400 	.word	0x00000400
 8001280:	200003ac 	.word	0x200003ac
 8001284:	20000520 	.word	0x20000520

08001288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b2:	490e      	ldr	r1, [pc, #56]	; (80012ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b4:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c8:	4c0b      	ldr	r4, [pc, #44]	; (80012f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012d6:	f7ff ffd7 	bl	8001288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012da:	f003 fc9f 	bl	8004c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012de:	f7ff f97f 	bl	80005e0 <main>
  bx  lr    
 80012e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012f0:	08005594 	.word	0x08005594
  ldr r2, =_sbss
 80012f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012f8:	2000051c 	.word	0x2000051c

080012fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC_IRQHandler>
	...

08001300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_Init+0x40>)
 800130a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_Init+0x40>)
 8001316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x40>)
 8001322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f94f 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fdb6 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023c00 	.word	0x40023c00

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f967 	bl	8001636 <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f92f 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	200003b0 	.word	0x200003b0

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	200003b0 	.word	0x200003b0

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff8e 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff29 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff3e 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff8e 	bl	8001520 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5d 	bl	80014cc <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff31 	bl	8001490 <__NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffa2 	bl	8001588 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff feb6 	bl	80013cc <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d008      	beq.n	8001680 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e052      	b.n	8001726 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0216 	bic.w	r2, r2, #22
 800168e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800169e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d103      	bne.n	80016b0 <HAL_DMA_Abort+0x62>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0208 	bic.w	r2, r2, #8
 80016be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d0:	e013      	b.n	80016fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016d2:	f7ff fe7b 	bl	80013cc <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d90c      	bls.n	80016fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2220      	movs	r2, #32
 80016e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2203      	movs	r2, #3
 80016ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e015      	b.n	8001726 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e4      	bne.n	80016d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	223f      	movs	r2, #63	; 0x3f
 800170e:	409a      	lsls	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d004      	beq.n	800174c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e00c      	b.n	8001766 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2205      	movs	r2, #5
 8001750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06c      	b.n	8001860 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800178c:	2b00      	cmp	r3, #0
 800178e:	d106      	bne.n	800179e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2223      	movs	r2, #35	; 0x23
 8001794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fbab 	bl	8000ef4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b31      	ldr	r3, [pc, #196]	; (8001868 <HAL_ETH_Init+0xf4>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a30      	ldr	r2, [pc, #192]	; (8001868 <HAL_ETH_Init+0xf4>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_ETH_Init+0xf4>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_ETH_Init+0xf8>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a2b      	ldr	r2, [pc, #172]	; (800186c <HAL_ETH_Init+0xf8>)
 80017c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017c6:	4b29      	ldr	r3, [pc, #164]	; (800186c <HAL_ETH_Init+0xf8>)
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4927      	ldr	r1, [pc, #156]	; (800186c <HAL_ETH_Init+0xf8>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_ETH_Init+0xf8>)
 80017d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f0:	f7ff fdec 	bl	80013cc <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017f6:	e011      	b.n	800181c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017f8:	f7ff fde8 	bl	80013cc <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001806:	d909      	bls.n	800181c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2204      	movs	r2, #4
 800180c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	22e0      	movs	r2, #224	; 0xe0
 8001814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e021      	b.n	8001860 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e4      	bne.n	80017f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f958 	bl	8001ae4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f9ff 	bl	8001c38 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fa55 	bl	8001cea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	461a      	mov	r2, r3
 8001846:	2100      	movs	r1, #0
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f9bd 	bl	8001bc8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2210      	movs	r2, #16
 800185a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40013800 	.word	0x40013800

08001870 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4b51      	ldr	r3, [pc, #324]	; (80019cc <ETH_SetMACConfig+0x15c>)
 8001886:	4013      	ands	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	7c1b      	ldrb	r3, [r3, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <ETH_SetMACConfig+0x28>
 8001892:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001896:	e000      	b.n	800189a <ETH_SetMACConfig+0x2a>
 8001898:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	7c5b      	ldrb	r3, [r3, #17]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <ETH_SetMACConfig+0x38>
 80018a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a6:	e000      	b.n	80018aa <ETH_SetMACConfig+0x3a>
 80018a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	7fdb      	ldrb	r3, [r3, #31]
 80018b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80018b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	7f92      	ldrb	r2, [r2, #30]
 80018c4:	2a00      	cmp	r2, #0
 80018c6:	d102      	bne.n	80018ce <ETH_SetMACConfig+0x5e>
 80018c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018cc:	e000      	b.n	80018d0 <ETH_SetMACConfig+0x60>
 80018ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80018d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	7f1b      	ldrb	r3, [r3, #28]
 80018d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80018e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	d102      	bne.n	80018f8 <ETH_SetMACConfig+0x88>
 80018f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f6:	e000      	b.n	80018fa <ETH_SetMACConfig+0x8a>
 80018f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	7bdb      	ldrb	r3, [r3, #15]
 8001900:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001902:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001908:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001910:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001912:	4313      	orrs	r3, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800192a:	2001      	movs	r0, #1
 800192c:	f7ff fd5a 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001956:	2a00      	cmp	r2, #0
 8001958:	d101      	bne.n	800195e <ETH_SetMACConfig+0xee>
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	e000      	b.n	8001960 <ETH_SetMACConfig+0xf0>
 800195e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001960:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001966:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800196e:	2a01      	cmp	r2, #1
 8001970:	d101      	bne.n	8001976 <ETH_SetMACConfig+0x106>
 8001972:	2208      	movs	r2, #8
 8001974:	e000      	b.n	8001978 <ETH_SetMACConfig+0x108>
 8001976:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001978:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001980:	2a01      	cmp	r2, #1
 8001982:	d101      	bne.n	8001988 <ETH_SetMACConfig+0x118>
 8001984:	2204      	movs	r2, #4
 8001986:	e000      	b.n	800198a <ETH_SetMACConfig+0x11a>
 8001988:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800198a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001992:	2a01      	cmp	r2, #1
 8001994:	d101      	bne.n	800199a <ETH_SetMACConfig+0x12a>
 8001996:	2202      	movs	r2, #2
 8001998:	e000      	b.n	800199c <ETH_SetMACConfig+0x12c>
 800199a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800199c:	4313      	orrs	r3, r2
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff fd15 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	619a      	str	r2, [r3, #24]
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	ff20810f 	.word	0xff20810f

080019d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <ETH_SetDMAConfig+0x110>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	7b1b      	ldrb	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <ETH_SetDMAConfig+0x2c>
 80019f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019fa:	e000      	b.n	80019fe <ETH_SetDMAConfig+0x2e>
 80019fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	7b5b      	ldrb	r3, [r3, #13]
 8001a02:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a04:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	7f52      	ldrb	r2, [r2, #29]
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	d102      	bne.n	8001a14 <ETH_SetDMAConfig+0x44>
 8001a0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a12:	e000      	b.n	8001a16 <ETH_SetDMAConfig+0x46>
 8001a14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	7b9b      	ldrb	r3, [r3, #14]
 8001a1c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a1e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	7f1b      	ldrb	r3, [r3, #28]
 8001a2a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001a2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	7f9b      	ldrb	r3, [r3, #30]
 8001a32:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a34:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a42:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a44:	4313      	orrs	r3, r2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff fcbc 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a74:	461a      	mov	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a84:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001a8a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a90:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a98:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a9a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001aa2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001aa8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7ff fc8d 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	f8de3f23 	.word	0xf8de3f23

08001ae4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0a6      	sub	sp, #152	; 0x98
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b20:	2300      	movs	r3, #0
 8001b22:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fe86 	bl	8001870 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001b64:	2301      	movs	r3, #1
 8001b66:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b98:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	4619      	mov	r1, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ff08 	bl	80019d0 <ETH_SetDMAConfig>
}
 8001bc0:	bf00      	nop
 8001bc2:	3798      	adds	r7, #152	; 0x98
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3305      	adds	r3, #5
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	3204      	adds	r2, #4
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <ETH_MACAddressConfig+0x68>)
 8001bea:	4413      	add	r3, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3303      	adds	r3, #3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	061a      	lsls	r2, r3, #24
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3301      	adds	r3, #1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <ETH_MACAddressConfig+0x6c>)
 8001c1a:	4413      	add	r3, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	6013      	str	r3, [r2, #0]
}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40028040 	.word	0x40028040
 8001c34:	40028044 	.word	0x40028044

08001c38 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e03e      	b.n	8001cc4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68d9      	ldr	r1, [r3, #12]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	3206      	adds	r2, #6
 8001c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d80c      	bhi.n	8001ca8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68d9      	ldr	r1, [r3, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	e004      	b.n	8001cb2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	461a      	mov	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d9bd      	bls.n	8001c46 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cdc:	611a      	str	r2, [r3, #16]
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e046      	b.n	8001d86 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6919      	ldr	r1, [r3, #16]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d3c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	3212      	adds	r2, #18
 8001d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d80c      	bhi.n	8001d76 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6919      	ldr	r1, [r3, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	e004      	b.n	8001d80 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3301      	adds	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d9b5      	bls.n	8001cf8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db6:	60da      	str	r2, [r3, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_FLASH_Program+0xa0>)
 8001dd8:	7e1b      	ldrb	r3, [r3, #24]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_FLASH_Program+0x1e>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e03b      	b.n	8001e5a <HAL_FLASH_Program+0x96>
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_FLASH_Program+0xa0>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dec:	f000 f870 	bl	8001ed0 <FLASH_WaitForLastOperation>
 8001df0:	4603      	mov	r3, r0
 8001df2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d12b      	bne.n	8001e52 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001e00:	783b      	ldrb	r3, [r7, #0]
 8001e02:	4619      	mov	r1, r3
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	f000 f91b 	bl	8002040 <FLASH_Program_Byte>
 8001e0a:	e016      	b.n	8001e3a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001e12:	883b      	ldrh	r3, [r7, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	68b8      	ldr	r0, [r7, #8]
 8001e18:	f000 f8ee 	bl	8001ff8 <FLASH_Program_HalfWord>
 8001e1c:	e00d      	b.n	8001e3a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d105      	bne.n	8001e30 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4619      	mov	r1, r3
 8001e28:	68b8      	ldr	r0, [r7, #8]
 8001e2a:	f000 f8c3 	bl	8001fb4 <FLASH_Program_Word>
 8001e2e:	e004      	b.n	8001e3a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e34:	68b8      	ldr	r0, [r7, #8]
 8001e36:	f000 f88b 	bl	8001f50 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e3e:	f000 f847 	bl	8001ed0 <FLASH_WaitForLastOperation>
 8001e42:	4603      	mov	r3, r0
 8001e44:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_FLASH_Program+0xa4>)
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_FLASH_Program+0xa4>)
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_FLASH_Program+0xa0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200003b4 	.word	0x200003b4
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_FLASH_Unlock+0x38>)
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da0b      	bge.n	8001e96 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_FLASH_Unlock+0x38>)
 8001e80:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_FLASH_Unlock+0x3c>)
 8001e82:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_FLASH_Unlock+0x38>)
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_FLASH_Unlock+0x40>)
 8001e88:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_FLASH_Unlock+0x38>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	da01      	bge.n	8001e96 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e96:	79fb      	ldrb	r3, [r7, #7]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40023c00 	.word	0x40023c00
 8001ea8:	45670123 	.word	0x45670123
 8001eac:	cdef89ab 	.word	0xcdef89ab

08001eb0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_FLASH_Lock+0x1c>)
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_FLASH_Lock+0x1c>)
 8001eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ebe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	40023c00 	.word	0x40023c00

08001ed0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <FLASH_WaitForLastOperation+0x78>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee2:	f7ff fa73 	bl	80013cc <HAL_GetTick>
 8001ee6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ee8:	e010      	b.n	8001f0c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d00c      	beq.n	8001f0c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <FLASH_WaitForLastOperation+0x38>
 8001ef8:	f7ff fa68 	bl	80013cc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d201      	bcs.n	8001f0c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e019      	b.n	8001f40 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <FLASH_WaitForLastOperation+0x7c>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e8      	bne.n	8001eea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <FLASH_WaitForLastOperation+0x7c>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <FLASH_WaitForLastOperation+0x7c>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <FLASH_WaitForLastOperation+0x7c>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f36:	f000 f8a5 	bl	8002084 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
  
}  
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200003b4 	.word	0x200003b4
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <FLASH_Program_DoubleWord+0x60>)
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <FLASH_Program_DoubleWord+0x60>)
 8001f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <FLASH_Program_DoubleWord+0x60>)
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <FLASH_Program_DoubleWord+0x60>)
 8001f6e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <FLASH_Program_DoubleWord+0x60>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <FLASH_Program_DoubleWord+0x60>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001f86:	f3bf 8f6f 	isb	sy
}
 8001f8a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	000a      	movs	r2, r1
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	68f9      	ldr	r1, [r7, #12]
 8001f9e:	3104      	adds	r1, #4
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40023c00 	.word	0x40023c00

08001fb4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <FLASH_Program_Word+0x40>)
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <FLASH_Program_Word+0x40>)
 8001fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <FLASH_Program_Word+0x40>)
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <FLASH_Program_Word+0x40>)
 8001fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <FLASH_Program_Word+0x40>)
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <FLASH_Program_Word+0x40>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40023c00 	.word	0x40023c00

08001ff8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <FLASH_Program_HalfWord+0x44>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <FLASH_Program_HalfWord+0x44>)
 800200a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <FLASH_Program_HalfWord+0x44>)
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	4a09      	ldr	r2, [pc, #36]	; (800203c <FLASH_Program_HalfWord+0x44>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <FLASH_Program_HalfWord+0x44>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <FLASH_Program_HalfWord+0x44>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	801a      	strh	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00

08002040 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <FLASH_Program_Byte+0x40>)
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <FLASH_Program_Byte+0x40>)
 8002052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <FLASH_Program_Byte+0x40>)
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <FLASH_Program_Byte+0x40>)
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <FLASH_Program_Byte+0x40>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <FLASH_Program_Byte+0x40>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	701a      	strb	r2, [r3, #0]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40023c00 	.word	0x40023c00

08002084 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002088:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <FLASH_SetErrorCode+0xc8>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	4a2b      	ldr	r2, [pc, #172]	; (800214c <FLASH_SetErrorCode+0xc8>)
 800209e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 80020a2:	2210      	movs	r2, #16
 80020a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <FLASH_SetErrorCode+0xc8>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	4a24      	ldr	r2, [pc, #144]	; (800214c <FLASH_SetErrorCode+0xc8>)
 80020bc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 80020c0:	2220      	movs	r2, #32
 80020c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <FLASH_SetErrorCode+0xc8>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <FLASH_SetErrorCode+0xc8>)
 80020da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <FLASH_SetErrorCode+0xc8>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	4a15      	ldr	r2, [pc, #84]	; (800214c <FLASH_SetErrorCode+0xc8>)
 80020f8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <FLASH_SetErrorCode+0xc8>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <FLASH_SetErrorCode+0xc8>)
 8002116:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 800211a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <FLASH_SetErrorCode+0xc8>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <FLASH_SetErrorCode+0xc8>)
 8002136:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <FLASH_SetErrorCode+0xc4>)
 800213a:	2202      	movs	r2, #2
 800213c:	60da      	str	r2, [r3, #12]
  }
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40023c00 	.word	0x40023c00
 800214c:	200003b4 	.word	0x200003b4

08002150 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_FLASHEx_Erase+0xdc>)
 8002164:	7e1b      	ldrb	r3, [r3, #24]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_FLASHEx_Erase+0x1e>
 800216a:	2302      	movs	r3, #2
 800216c:	e05a      	b.n	8002224 <HAL_FLASHEx_Erase+0xd4>
 800216e:	4b2f      	ldr	r3, [pc, #188]	; (800222c <HAL_FLASHEx_Erase+0xdc>)
 8002170:	2201      	movs	r2, #1
 8002172:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002174:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002178:	f7ff feaa 	bl	8001ed0 <FLASH_WaitForLastOperation>
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d14a      	bne.n	800221c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d117      	bne.n	80021c6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f000 f846 	bl	8002234 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021ac:	f7ff fe90 	bl	8001ed0 <FLASH_WaitForLastOperation>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_FLASHEx_Erase+0xe0>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	4a1d      	ldr	r2, [pc, #116]	; (8002230 <HAL_FLASHEx_Erase+0xe0>)
 80021ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6113      	str	r3, [r2, #16]
 80021c4:	e028      	b.n	8002218 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	e01c      	b.n	8002208 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4619      	mov	r1, r3
 80021d6:	68b8      	ldr	r0, [r7, #8]
 80021d8:	f000 f866 	bl	80022a8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021e0:	f7ff fe76 	bl	8001ed0 <FLASH_WaitForLastOperation>
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_FLASHEx_Erase+0xe0>)
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	4a10      	ldr	r2, [pc, #64]	; (8002230 <HAL_FLASHEx_Erase+0xe0>)
 80021ee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80021f2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	601a      	str	r2, [r3, #0]
          break;
 8002200:	e00a      	b.n	8002218 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4413      	add	r3, r2
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	429a      	cmp	r2, r3
 8002216:	d3da      	bcc.n	80021ce <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002218:	f000 f894 	bl	8002344 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_FLASHEx_Erase+0xdc>)
 800221e:	2200      	movs	r2, #0
 8002220:	761a      	strb	r2, [r3, #24]

  return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200003b4 	.word	0x200003b4
 8002230:	40023c00 	.word	0x40023c00

08002234 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <FLASH_MassErase+0x70>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <FLASH_MassErase+0x70>)
 8002246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d108      	bne.n	8002264 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <FLASH_MassErase+0x70>)
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <FLASH_MassErase+0x70>)
 8002258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	6113      	str	r3, [r2, #16]
 8002262:	e00f      	b.n	8002284 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d106      	bne.n	8002278 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <FLASH_MassErase+0x70>)
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <FLASH_MassErase+0x70>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6113      	str	r3, [r2, #16]
 8002276:	e005      	b.n	8002284 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <FLASH_MassErase+0x70>)
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <FLASH_MassErase+0x70>)
 800227e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002282:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <FLASH_MassErase+0x70>)
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	4313      	orrs	r3, r2
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <FLASH_MassErase+0x70>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6113      	str	r3, [r2, #16]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00

080022a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d102      	bne.n	80022c4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e010      	b.n	80022e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d103      	bne.n	80022d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80022ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e009      	b.n	80022e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d103      	bne.n	80022e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80022d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	e002      	b.n	80022e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80022e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0b      	cmp	r3, #11
 80022ea:	d902      	bls.n	80022f2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <FLASH_Erase_Sector+0x98>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <FLASH_Erase_Sector+0x98>)
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <FLASH_Erase_Sector+0x98>)
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	490f      	ldr	r1, [pc, #60]	; (8002340 <FLASH_Erase_Sector+0x98>)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <FLASH_Erase_Sector+0x98>)
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <FLASH_Erase_Sector+0x98>)
 8002310:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002314:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <FLASH_Erase_Sector+0x98>)
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4313      	orrs	r3, r2
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <FLASH_Erase_Sector+0x98>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <FLASH_Erase_Sector+0x98>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <FLASH_Erase_Sector+0x98>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002332:	6113      	str	r3, [r2, #16]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40023c00 	.word	0x40023c00

08002344 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <FLASH_FlushCaches+0x88>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002350:	2b00      	cmp	r3, #0
 8002352:	d017      	beq.n	8002384 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <FLASH_FlushCaches+0x88>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <FLASH_FlushCaches+0x88>)
 800235a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800235e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002360:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <FLASH_FlushCaches+0x88>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <FLASH_FlushCaches+0x88>)
 8002366:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <FLASH_FlushCaches+0x88>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a16      	ldr	r2, [pc, #88]	; (80023cc <FLASH_FlushCaches+0x88>)
 8002372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002376:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <FLASH_FlushCaches+0x88>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a13      	ldr	r2, [pc, #76]	; (80023cc <FLASH_FlushCaches+0x88>)
 800237e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002382:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <FLASH_FlushCaches+0x88>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d017      	beq.n	80023c0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <FLASH_FlushCaches+0x88>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <FLASH_FlushCaches+0x88>)
 8002396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800239a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <FLASH_FlushCaches+0x88>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <FLASH_FlushCaches+0x88>)
 80023a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <FLASH_FlushCaches+0x88>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a07      	ldr	r2, [pc, #28]	; (80023cc <FLASH_FlushCaches+0x88>)
 80023ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023b2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <FLASH_FlushCaches+0x88>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <FLASH_FlushCaches+0x88>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023be:	6013      	str	r3, [r2, #0]
  }
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e177      	b.n	80026dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	f040 8166 	bne.w	80026d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d005      	beq.n	8002422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	2b02      	cmp	r3, #2
 8002420:	d130      	bne.n	8002484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 0201 	and.w	r2, r3, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b03      	cmp	r3, #3
 800248e:	d017      	beq.n	80024c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d123      	bne.n	8002514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	220f      	movs	r2, #15
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	69b9      	ldr	r1, [r7, #24]
 8002510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0203 	and.w	r2, r3, #3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80c0 	beq.w	80026d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <HAL_GPIO_Init+0x324>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	4a65      	ldr	r2, [pc, #404]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002564:	6453      	str	r3, [r2, #68]	; 0x44
 8002566:	4b63      	ldr	r3, [pc, #396]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002572:	4a61      	ldr	r2, [pc, #388]	; (80026f8 <HAL_GPIO_Init+0x328>)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_GPIO_Init+0x32c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d037      	beq.n	800260e <HAL_GPIO_Init+0x23e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_GPIO_Init+0x330>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d031      	beq.n	800260a <HAL_GPIO_Init+0x23a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_GPIO_Init+0x334>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d02b      	beq.n	8002606 <HAL_GPIO_Init+0x236>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a55      	ldr	r2, [pc, #340]	; (8002708 <HAL_GPIO_Init+0x338>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d025      	beq.n	8002602 <HAL_GPIO_Init+0x232>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a54      	ldr	r2, [pc, #336]	; (800270c <HAL_GPIO_Init+0x33c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d01f      	beq.n	80025fe <HAL_GPIO_Init+0x22e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a53      	ldr	r2, [pc, #332]	; (8002710 <HAL_GPIO_Init+0x340>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d019      	beq.n	80025fa <HAL_GPIO_Init+0x22a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_GPIO_Init+0x344>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x226>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a51      	ldr	r2, [pc, #324]	; (8002718 <HAL_GPIO_Init+0x348>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00d      	beq.n	80025f2 <HAL_GPIO_Init+0x222>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a50      	ldr	r2, [pc, #320]	; (800271c <HAL_GPIO_Init+0x34c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x21e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4f      	ldr	r2, [pc, #316]	; (8002720 <HAL_GPIO_Init+0x350>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_GPIO_Init+0x21a>
 80025e6:	2309      	movs	r3, #9
 80025e8:	e012      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025ea:	230a      	movs	r3, #10
 80025ec:	e010      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025ee:	2308      	movs	r3, #8
 80025f0:	e00e      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025f2:	2307      	movs	r3, #7
 80025f4:	e00c      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025f6:	2306      	movs	r3, #6
 80025f8:	e00a      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025fa:	2305      	movs	r3, #5
 80025fc:	e008      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025fe:	2304      	movs	r3, #4
 8002600:	e006      	b.n	8002610 <HAL_GPIO_Init+0x240>
 8002602:	2303      	movs	r3, #3
 8002604:	e004      	b.n	8002610 <HAL_GPIO_Init+0x240>
 8002606:	2302      	movs	r3, #2
 8002608:	e002      	b.n	8002610 <HAL_GPIO_Init+0x240>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_GPIO_Init+0x240>
 800260e:	2300      	movs	r3, #0
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f002 0203 	and.w	r2, r2, #3
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	4093      	lsls	r3, r2
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002620:	4935      	ldr	r1, [pc, #212]	; (80026f8 <HAL_GPIO_Init+0x328>)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_GPIO_Init+0x354>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002652:	4a34      	ldr	r2, [pc, #208]	; (8002724 <HAL_GPIO_Init+0x354>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_GPIO_Init+0x354>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800267c:	4a29      	ldr	r2, [pc, #164]	; (8002724 <HAL_GPIO_Init+0x354>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <HAL_GPIO_Init+0x354>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a6:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <HAL_GPIO_Init+0x354>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_GPIO_Init+0x354>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <HAL_GPIO_Init+0x354>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3301      	adds	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	f67f ae84 	bls.w	80023ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40013800 	.word	0x40013800
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020400 	.word	0x40020400
 8002704:	40020800 	.word	0x40020800
 8002708:	40020c00 	.word	0x40020c00
 800270c:	40021000 	.word	0x40021000
 8002710:	40021400 	.word	0x40021400
 8002714:	40021800 	.word	0x40021800
 8002718:	40021c00 	.word	0x40021c00
 800271c:	40022000 	.word	0x40022000
 8002720:	40022400 	.word	0x40022400
 8002724:	40013c00 	.word	0x40013c00

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002744:	e003      	b.n	800274e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	041a      	lsls	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e267      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d075      	beq.n	8002866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x240>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b04      	cmp	r3, #4
 8002784:	d00c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002786:	4b85      	ldr	r3, [pc, #532]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278e:	2b08      	cmp	r3, #8
 8002790:	d112      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002792:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279e:	d10b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	4b7e      	ldr	r3, [pc, #504]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d05b      	beq.n	8002864 <HAL_RCC_OscConfig+0x108>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d157      	bne.n	8002864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e242      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x74>
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a75      	ldr	r2, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e01d      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x98>
 80027da:	4b70      	ldr	r3, [pc, #448]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a6f      	ldr	r2, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b6d      	ldr	r3, [pc, #436]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6c      	ldr	r2, [pc, #432]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027f4:	4b69      	ldr	r3, [pc, #420]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a68      	ldr	r2, [pc, #416]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a65      	ldr	r2, [pc, #404]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fdda 	bl	80013cc <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fdd6 	bl	80013cc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e207      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b5b      	ldr	r3, [pc, #364]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0xc0>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fdc6 	bl	80013cc <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fdc2 	bl	80013cc <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1f3      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	4b51      	ldr	r3, [pc, #324]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0xe8>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d063      	beq.n	800293a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002886:	2b08      	cmp	r3, #8
 8002888:	d11c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b44      	ldr	r3, [pc, #272]	; (800299c <HAL_RCC_OscConfig+0x240>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x152>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1c7      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	e03a      	b.n	800293a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_RCC_OscConfig+0x244>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fd7b 	bl	80013cc <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe fd77 	bl	80013cc <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1a8      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_RCC_OscConfig+0x240>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4925      	ldr	r1, [pc, #148]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x244>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fd5a 	bl	80013cc <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe fd56 	bl	80013cc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e187      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d036      	beq.n	80029b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x248>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe fd3a 	bl	80013cc <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe fd36 	bl	80013cc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e167      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x240>)
 8002970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x200>
 800297a:	e01b      	b.n	80029b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_OscConfig+0x248>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7fe fd23 	bl	80013cc <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	e00e      	b.n	80029a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe fd1f 	bl	80013cc <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d907      	bls.n	80029a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e150      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470000 	.word	0x42470000
 80029a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	4b88      	ldr	r3, [pc, #544]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ea      	bne.n	800298a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8097 	beq.w	8002af0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c6:	4b81      	ldr	r3, [pc, #516]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10f      	bne.n	80029f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b7d      	ldr	r3, [pc, #500]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a7c      	ldr	r2, [pc, #496]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b7a      	ldr	r3, [pc, #488]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b77      	ldr	r3, [pc, #476]	; (8002bd0 <HAL_RCC_OscConfig+0x474>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d118      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b74      	ldr	r3, [pc, #464]	; (8002bd0 <HAL_RCC_OscConfig+0x474>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a73      	ldr	r2, [pc, #460]	; (8002bd0 <HAL_RCC_OscConfig+0x474>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fcdf 	bl	80013cc <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a12:	f7fe fcdb 	bl	80013cc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e10c      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x474>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x2ea>
 8002a38:	4b64      	ldr	r3, [pc, #400]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a63      	ldr	r2, [pc, #396]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	e01c      	b.n	8002a80 <HAL_RCC_OscConfig+0x324>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x30c>
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5a:	4b5c      	ldr	r3, [pc, #368]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a5b      	ldr	r2, [pc, #364]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0x324>
 8002a68:	4b58      	ldr	r3, [pc, #352]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a57      	ldr	r2, [pc, #348]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	4b55      	ldr	r3, [pc, #340]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a54      	ldr	r2, [pc, #336]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fca0 	bl	80013cc <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fc9c 	bl	80013cc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0cb      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0ee      	beq.n	8002a90 <HAL_RCC_OscConfig+0x334>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fc8a 	bl	80013cc <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fc86 	bl	80013cc <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0b5      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ee      	bne.n	8002abc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae4:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80a1 	beq.w	8002c3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002afa:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d05c      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d141      	bne.n	8002b92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_RCC_OscConfig+0x478>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe fc5a 	bl	80013cc <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fc56 	bl	80013cc <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e087      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	3b01      	subs	r3, #1
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	491b      	ldr	r1, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x478>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fc2f 	bl	80013cc <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fe fc2b 	bl	80013cc <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e05c      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x416>
 8002b90:	e054      	b.n	8002c3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_RCC_OscConfig+0x478>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe fc18 	bl	80013cc <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe fc14 	bl	80013cc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e045      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x444>
 8002bbe:	e03d      	b.n	8002c3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e038      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x4ec>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d028      	beq.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d121      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d11a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	3b01      	subs	r3, #1
 8002c22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800

08002c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0cc      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d90c      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b63      	ldr	r3, [pc, #396]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0b8      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d020      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca0:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002caa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb8:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a52      	ldr	r2, [pc, #328]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	494d      	ldr	r1, [pc, #308]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d044      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d119      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e07f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d003      	beq.n	8002d0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e067      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4934      	ldr	r1, [pc, #208]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7fe fb46 	bl	80013cc <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fe fb42 	bl	80013cc <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e04f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d20c      	bcs.n	8002d94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e032      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4916      	ldr	r1, [pc, #88]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	490e      	ldr	r1, [pc, #56]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dd2:	f000 f821 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	490a      	ldr	r1, [pc, #40]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	5ccb      	ldrb	r3, [r1, r3]
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe faa6 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023c00 	.word	0x40023c00
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	08005538 	.word	0x08005538
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e1c:	b094      	sub	sp, #80	; 0x50
 8002e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	647b      	str	r3, [r7, #68]	; 0x44
 8002e24:	2300      	movs	r3, #0
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e28:	2300      	movs	r3, #0
 8002e2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e30:	4b79      	ldr	r3, [pc, #484]	; (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d00d      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x40>
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	f200 80e1 	bhi.w	8003004 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x34>
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d003      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e4a:	e0db      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4b73      	ldr	r3, [pc, #460]	; (800301c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e50:	e0db      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e52:	4b73      	ldr	r3, [pc, #460]	; (8003020 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e56:	e0d8      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e58:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e62:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d063      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6e:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	099b      	lsrs	r3, r3, #6
 8002e74:	2200      	movs	r2, #0
 8002e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
 8002e82:	2300      	movs	r3, #0
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
 8002e86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e8a:	4622      	mov	r2, r4
 8002e8c:	462b      	mov	r3, r5
 8002e8e:	f04f 0000 	mov.w	r0, #0
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	0159      	lsls	r1, r3, #5
 8002e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e9c:	0150      	lsls	r0, r2, #5
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	1a51      	subs	r1, r2, r1
 8002ea6:	6139      	str	r1, [r7, #16]
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ebc:	4659      	mov	r1, fp
 8002ebe:	018b      	lsls	r3, r1, #6
 8002ec0:	4651      	mov	r1, sl
 8002ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	018a      	lsls	r2, r1, #6
 8002eca:	4651      	mov	r1, sl
 8002ecc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eea:	4690      	mov	r8, r2
 8002eec:	4699      	mov	r9, r3
 8002eee:	4623      	mov	r3, r4
 8002ef0:	eb18 0303 	adds.w	r3, r8, r3
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	462b      	mov	r3, r5
 8002ef8:	eb49 0303 	adc.w	r3, r9, r3
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	024b      	lsls	r3, r1, #9
 8002f0e:	4621      	mov	r1, r4
 8002f10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f14:	4621      	mov	r1, r4
 8002f16:	024a      	lsls	r2, r1, #9
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1e:	2200      	movs	r2, #0
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f28:	f7fd f9b2 	bl	8000290 <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4613      	mov	r3, r2
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f34:	e058      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	4611      	mov	r1, r2
 8002f42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f46:	623b      	str	r3, [r7, #32]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f50:	4642      	mov	r2, r8
 8002f52:	464b      	mov	r3, r9
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	0159      	lsls	r1, r3, #5
 8002f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f62:	0150      	lsls	r0, r2, #5
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4641      	mov	r1, r8
 8002f6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f6e:	4649      	mov	r1, r9
 8002f70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f88:	ebb2 040a 	subs.w	r4, r2, sl
 8002f8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	00eb      	lsls	r3, r5, #3
 8002f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f9e:	00e2      	lsls	r2, r4, #3
 8002fa0:	4614      	mov	r4, r2
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	4643      	mov	r3, r8
 8002fa6:	18e3      	adds	r3, r4, r3
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	464b      	mov	r3, r9
 8002fac:	eb45 0303 	adc.w	r3, r5, r3
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	028b      	lsls	r3, r1, #10
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc8:	4621      	mov	r1, r4
 8002fca:	028a      	lsls	r2, r1, #10
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	61fa      	str	r2, [r7, #28]
 8002fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fdc:	f7fd f958 	bl	8000290 <__aeabi_uldivmod>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_RCC_GetSysClockFreq+0x204>)
 8003006:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800300c:	4618      	mov	r0, r3
 800300e:	3750      	adds	r7, #80	; 0x50
 8003010:	46bd      	mov	sp, r7
 8003012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	00f42400 	.word	0x00f42400
 8003020:	007a1200 	.word	0x007a1200

08003024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <HAL_RCC_GetHCLKFreq+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000000 	.word	0x20000000

0800303c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003040:	f7ff fff0 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0a9b      	lsrs	r3, r3, #10
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	08005548 	.word	0x08005548

08003064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003068:	f7ff ffdc 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0b5b      	lsrs	r3, r3, #13
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4903      	ldr	r1, [pc, #12]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	08005548 	.word	0x08005548

0800308c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d075      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030c0:	4b91      	ldr	r3, [pc, #580]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030c6:	f7fe f981 	bl	80013cc <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ce:	f7fe f97d 	bl	80013cc <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e189      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030e0:	4b8a      	ldr	r3, [pc, #552]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	019a      	lsls	r2, r3, #6
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	071b      	lsls	r3, r3, #28
 8003104:	4981      	ldr	r1, [pc, #516]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01f      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003118:	4b7c      	ldr	r3, [pc, #496]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311e:	0f1b      	lsrs	r3, r3, #28
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	019a      	lsls	r2, r3, #6
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	431a      	orrs	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	071b      	lsls	r3, r3, #28
 8003138:	4974      	ldr	r1, [pc, #464]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003140:	4b72      	ldr	r3, [pc, #456]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003146:	f023 021f 	bic.w	r2, r3, #31
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	3b01      	subs	r3, #1
 8003150:	496e      	ldr	r1, [pc, #440]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	019a      	lsls	r2, r3, #6
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	061b      	lsls	r3, r3, #24
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	071b      	lsls	r3, r3, #28
 8003178:	4964      	ldr	r1, [pc, #400]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003180:	4b61      	ldr	r3, [pc, #388]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003186:	f7fe f921 	bl	80013cc <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800318e:	f7fe f91d 	bl	80013cc <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e129      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031a0:	4b5a      	ldr	r3, [pc, #360]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d079      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031c4:	4b52      	ldr	r3, [pc, #328]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031ca:	f7fe f8ff 	bl	80013cc <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031d2:	f7fe f8fb 	bl	80013cc <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e107      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031e4:	4b49      	ldr	r3, [pc, #292]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f0:	d0ef      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d020      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031fe:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	0f1b      	lsrs	r3, r3, #28
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	019a      	lsls	r2, r3, #6
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	431a      	orrs	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	071b      	lsls	r3, r3, #28
 800321e:	493b      	ldr	r1, [pc, #236]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800322c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	3b01      	subs	r3, #1
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	4934      	ldr	r1, [pc, #208]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01e      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800324c:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	0e1b      	lsrs	r3, r3, #24
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	019a      	lsls	r2, r3, #6
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	071b      	lsls	r3, r3, #28
 800326c:	4927      	ldr	r1, [pc, #156]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	4922      	ldr	r1, [pc, #136]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003290:	f7fe f89c 	bl	80013cc <HAL_GetTick>
 8003294:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003298:	f7fe f898 	bl	80013cc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e0a4      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b6:	d1ef      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 808b 	beq.w	80033dc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a0f      	ldr	r2, [pc, #60]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032ee:	f7fe f86d 	bl	80013cc <HAL_GetTick>
 80032f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032f4:	e010      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7fe f869 	bl	80013cc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d909      	bls.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e075      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003308:	42470068 	.word	0x42470068
 800330c:	40023800 	.word	0x40023800
 8003310:	42470070 	.word	0x42470070
 8003314:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003318:	4b38      	ldr	r3, [pc, #224]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0e8      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02f      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	429a      	cmp	r2, r3
 8003340:	d028      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003342:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800334c:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003352:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003358:	4a29      	ldr	r2, [pc, #164]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800335e:	4b28      	ldr	r3, [pc, #160]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b01      	cmp	r3, #1
 8003368:	d114      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800336a:	f7fe f82f 	bl	80013cc <HAL_GetTick>
 800336e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fe f82b 	bl	80013cc <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e035      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ee      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a0:	d10d      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80033a2:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b6:	4912      	ldr	r1, [pc, #72]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
 80033bc:	e005      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033c8:	6093      	str	r3, [r2, #8]
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d6:	490a      	ldr	r1, [pc, #40]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d004      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80033f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40007000 	.word	0x40007000
 8003400:	40023800 	.word	0x40023800
 8003404:	42470e40 	.word	0x42470e40
 8003408:	424711e0 	.word	0x424711e0

0800340c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e066      	b.n	80034f0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	7f5b      	ldrb	r3, [r3, #29]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fe24 	bl	8001080 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	22ca      	movs	r2, #202	; 0xca
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2253      	movs	r2, #83	; 0x53
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f87a 	bl	8003548 <RTC_EnterInitMode>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d12c      	bne.n	80034b8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800346c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003470:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6899      	ldr	r1, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	68d2      	ldr	r2, [r2, #12]
 8003498:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6919      	ldr	r1, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	041a      	lsls	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f881 	bl	80035b6 <RTC_ExitInitMode>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d113      	bne.n	80034e6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699a      	ldr	r2, [r3, #24]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003512:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003514:	f7fd ff5a 	bl	80013cc <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800351a:	e009      	b.n	8003530 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800351c:	f7fd ff56 	bl	80013cc <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800352a:	d901      	bls.n	8003530 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e007      	b.n	8003540 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0ee      	beq.n	800351c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d122      	bne.n	80035ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003574:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003576:	f7fd ff29 	bl	80013cc <HAL_GetTick>
 800357a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800357c:	e00c      	b.n	8003598 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800357e:	f7fd ff25 	bl	80013cc <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800358c:	d904      	bls.n	8003598 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2204      	movs	r2, #4
 8003592:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <RTC_EnterInitMode+0x64>
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d1e8      	bne.n	800357e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff89 	bl	80034f8 <HAL_RTC_WaitForSynchro>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2204      	movs	r2, #4
 80035f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e041      	b.n	8003696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd fd54 	bl	80010d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f000 f8f4 	bl	800382c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_ConfigClockSource+0x1c>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e0b4      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x186>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2202      	movs	r2, #2
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f2:	d03e      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xd4>
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f8:	f200 8087 	bhi.w	800380a <HAL_TIM_ConfigClockSource+0x16c>
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	f000 8086 	beq.w	8003810 <HAL_TIM_ConfigClockSource+0x172>
 8003704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003708:	d87f      	bhi.n	800380a <HAL_TIM_ConfigClockSource+0x16c>
 800370a:	2b70      	cmp	r3, #112	; 0x70
 800370c:	d01a      	beq.n	8003744 <HAL_TIM_ConfigClockSource+0xa6>
 800370e:	2b70      	cmp	r3, #112	; 0x70
 8003710:	d87b      	bhi.n	800380a <HAL_TIM_ConfigClockSource+0x16c>
 8003712:	2b60      	cmp	r3, #96	; 0x60
 8003714:	d050      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0x11a>
 8003716:	2b60      	cmp	r3, #96	; 0x60
 8003718:	d877      	bhi.n	800380a <HAL_TIM_ConfigClockSource+0x16c>
 800371a:	2b50      	cmp	r3, #80	; 0x50
 800371c:	d03c      	beq.n	8003798 <HAL_TIM_ConfigClockSource+0xfa>
 800371e:	2b50      	cmp	r3, #80	; 0x50
 8003720:	d873      	bhi.n	800380a <HAL_TIM_ConfigClockSource+0x16c>
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d058      	beq.n	80037d8 <HAL_TIM_ConfigClockSource+0x13a>
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d86f      	bhi.n	800380a <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	2b30      	cmp	r3, #48	; 0x30
 800372c:	d064      	beq.n	80037f8 <HAL_TIM_ConfigClockSource+0x15a>
 800372e:	2b30      	cmp	r3, #48	; 0x30
 8003730:	d86b      	bhi.n	800380a <HAL_TIM_ConfigClockSource+0x16c>
 8003732:	2b20      	cmp	r3, #32
 8003734:	d060      	beq.n	80037f8 <HAL_TIM_ConfigClockSource+0x15a>
 8003736:	2b20      	cmp	r3, #32
 8003738:	d867      	bhi.n	800380a <HAL_TIM_ConfigClockSource+0x16c>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d05c      	beq.n	80037f8 <HAL_TIM_ConfigClockSource+0x15a>
 800373e:	2b10      	cmp	r3, #16
 8003740:	d05a      	beq.n	80037f8 <HAL_TIM_ConfigClockSource+0x15a>
 8003742:	e062      	b.n	800380a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	6899      	ldr	r1, [r3, #8]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f000 f984 	bl	8003a60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003766:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	609a      	str	r2, [r3, #8]
      break;
 8003770:	e04f      	b.n	8003812 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f000 f96d 	bl	8003a60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003794:	609a      	str	r2, [r3, #8]
      break;
 8003796:	e03c      	b.n	8003812 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	461a      	mov	r2, r3
 80037a6:	f000 f8e1 	bl	800396c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2150      	movs	r1, #80	; 0x50
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f93a 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 80037b6:	e02c      	b.n	8003812 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	461a      	mov	r2, r3
 80037c6:	f000 f900 	bl	80039ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2160      	movs	r1, #96	; 0x60
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f92a 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 80037d6:	e01c      	b.n	8003812 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	461a      	mov	r2, r3
 80037e6:	f000 f8c1 	bl	800396c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2140      	movs	r1, #64	; 0x40
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f91a 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 80037f6:	e00c      	b.n	8003812 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f000 f911 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 8003808:	e003      	b.n	8003812 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      break;
 800380e:	e000      	b.n	8003812 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003810:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a40      	ldr	r2, [pc, #256]	; (8003940 <TIM_Base_SetConfig+0x114>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <TIM_Base_SetConfig+0x40>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384a:	d00f      	beq.n	800386c <TIM_Base_SetConfig+0x40>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a3d      	ldr	r2, [pc, #244]	; (8003944 <TIM_Base_SetConfig+0x118>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00b      	beq.n	800386c <TIM_Base_SetConfig+0x40>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3c      	ldr	r2, [pc, #240]	; (8003948 <TIM_Base_SetConfig+0x11c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d007      	beq.n	800386c <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3b      	ldr	r2, [pc, #236]	; (800394c <TIM_Base_SetConfig+0x120>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3a      	ldr	r2, [pc, #232]	; (8003950 <TIM_Base_SetConfig+0x124>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d108      	bne.n	800387e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2f      	ldr	r2, [pc, #188]	; (8003940 <TIM_Base_SetConfig+0x114>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02b      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d027      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <TIM_Base_SetConfig+0x118>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d023      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <TIM_Base_SetConfig+0x11c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d01f      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2a      	ldr	r2, [pc, #168]	; (800394c <TIM_Base_SetConfig+0x120>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01b      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a29      	ldr	r2, [pc, #164]	; (8003950 <TIM_Base_SetConfig+0x124>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d017      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a28      	ldr	r2, [pc, #160]	; (8003954 <TIM_Base_SetConfig+0x128>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a27      	ldr	r2, [pc, #156]	; (8003958 <TIM_Base_SetConfig+0x12c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00f      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a26      	ldr	r2, [pc, #152]	; (800395c <TIM_Base_SetConfig+0x130>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00b      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a25      	ldr	r2, [pc, #148]	; (8003960 <TIM_Base_SetConfig+0x134>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a24      	ldr	r2, [pc, #144]	; (8003964 <TIM_Base_SetConfig+0x138>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a23      	ldr	r2, [pc, #140]	; (8003968 <TIM_Base_SetConfig+0x13c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d108      	bne.n	80038f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <TIM_Base_SetConfig+0x114>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_Base_SetConfig+0xf8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <TIM_Base_SetConfig+0x124>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d103      	bne.n	800392c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	615a      	str	r2, [r3, #20]
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40010000 	.word	0x40010000
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800
 800394c:	40000c00 	.word	0x40000c00
 8003950:	40010400 	.word	0x40010400
 8003954:	40014000 	.word	0x40014000
 8003958:	40014400 	.word	0x40014400
 800395c:	40014800 	.word	0x40014800
 8003960:	40001800 	.word	0x40001800
 8003964:	40001c00 	.word	0x40001c00
 8003968:	40002000 	.word	0x40002000

0800396c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0201 	bic.w	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 030a 	bic.w	r3, r3, #10
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b087      	sub	sp, #28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0210 	bic.w	r2, r3, #16
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	031b      	lsls	r3, r3, #12
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f043 0307 	orr.w	r3, r3, #7
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	609a      	str	r2, [r3, #8]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	021a      	lsls	r2, r3, #8
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	609a      	str	r2, [r3, #8]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e05a      	b.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a21      	ldr	r2, [pc, #132]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d01d      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d018      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10c      	bne.n	8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40010400 	.word	0x40010400
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40001800 	.word	0x40001800

08003b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e03f      	b.n	8003c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd faa8 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fd7b 	bl	80046d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b08a      	sub	sp, #40	; 0x28
 8003c36:	af02      	add	r7, sp, #8
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d17c      	bne.n	8003d4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_UART_Transmit+0x2c>
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e075      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Transmit+0x3e>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e06e      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2221      	movs	r2, #33	; 0x21
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c86:	f7fd fba1 	bl	80013cc <HAL_GetTick>
 8003c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	d108      	bne.n	8003cb4 <HAL_UART_Transmit+0x82>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e003      	b.n	8003cbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cc4:	e02a      	b.n	8003d1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 faf9 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e036      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e007      	b.n	8003d0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1cf      	bne.n	8003cc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fac9 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e006      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b0ba      	sub	sp, #232	; 0xe8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
 8003daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fbd3 	bl	8004562 <UART_Receive_IT>
      return;
 8003dbc:	e256      	b.n	800426c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80de 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
 8003dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80d1 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
 8003dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
 8003e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0202 	orr.w	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
 8003e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d011      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
 8003e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f043 0208 	orr.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 81ed 	beq.w	8004262 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
 8003e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb5e 	bl	8004562 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x17a>
 8003eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d04f      	beq.n	8003f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa66 	bl	80043a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d141      	bne.n	8003f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1d9      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d013      	beq.n	8003f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	4a7d      	ldr	r2, [pc, #500]	; (8004134 <HAL_UART_IRQHandler+0x3dc>)
 8003f40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd fbf1 	bl	800172e <HAL_DMA_Abort_IT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e00e      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f99a 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e00a      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f996 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e006      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f992 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f7e:	e170      	b.n	8004262 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	bf00      	nop
    return;
 8003f82:	e16e      	b.n	8004262 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 814a 	bne.w	8004222 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8143 	beq.w	8004222 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 813c 	beq.w	8004222 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	f040 80b4 	bne.w	8004138 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8140 	beq.w	8004266 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f080 8139 	bcs.w	8004266 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004006:	f000 8088 	beq.w	800411a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800403a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800404e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1d9      	bne.n	800400a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3314      	adds	r3, #20
 8004076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800407a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800407e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800408c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e1      	bne.n	8004056 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3314      	adds	r3, #20
 8004098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e3      	bne.n	8004092 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80040fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800410a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e3      	bne.n	80040d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd fa9a 	bl	800164e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004122:	b29b      	uxth	r3, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	b29b      	uxth	r3, r3
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8c0 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004130:	e099      	b.n	8004266 <HAL_UART_IRQHandler+0x50e>
 8004132:	bf00      	nop
 8004134:	0800446b 	.word	0x0800446b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004140:	b29b      	uxth	r3, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 808b 	beq.w	800426a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8086 	beq.w	800426a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800416e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004182:	647a      	str	r2, [r7, #68]	; 0x44
 8004184:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e3      	bne.n	800415e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	623b      	str	r3, [r7, #32]
   return(result);
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041ba:	633a      	str	r2, [r7, #48]	; 0x30
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e3      	bne.n	8004196 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0310 	bic.w	r3, r3, #16
 80041f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004200:	61fa      	str	r2, [r7, #28]
 8004202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	617b      	str	r3, [r7, #20]
   return(result);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e3      	bne.n	80041dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f848 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004220:	e023      	b.n	800426a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <HAL_UART_IRQHandler+0x4ea>
 800422e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f929 	bl	8004492 <UART_Transmit_IT>
    return;
 8004240:	e014      	b.n	800426c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00e      	beq.n	800426c <HAL_UART_IRQHandler+0x514>
 800424e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f969 	bl	8004532 <UART_EndTransmit_IT>
    return;
 8004260:	e004      	b.n	800426c <HAL_UART_IRQHandler+0x514>
    return;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <HAL_UART_IRQHandler+0x514>
      return;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <HAL_UART_IRQHandler+0x514>
      return;
 800426a:	bf00      	nop
  }
}
 800426c:	37e8      	adds	r7, #232	; 0xe8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop

08004274 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b090      	sub	sp, #64	; 0x40
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d8:	e050      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d04c      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e8:	f7fd f870 	bl	80013cc <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d241      	bcs.n	800437c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004318:	637a      	str	r2, [r7, #52]	; 0x34
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800434c:	623a      	str	r2, [r7, #32]
 800434e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	69f9      	ldr	r1, [r7, #28]
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	61bb      	str	r3, [r7, #24]
   return(result);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e00f      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	429a      	cmp	r2, r3
 8004398:	d09f      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3740      	adds	r7, #64	; 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b095      	sub	sp, #84	; 0x54
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043cc:	643a      	str	r2, [r7, #64]	; 0x40
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d119      	bne.n	8004450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60bb      	str	r3, [r7, #8]
   return(result);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	647b      	str	r3, [r7, #68]	; 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800443c:	61ba      	str	r2, [r7, #24]
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e5      	bne.n	800441c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800445e:	bf00      	nop
 8004460:	3754      	adds	r7, #84	; 0x54
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff ff09 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b21      	cmp	r3, #33	; 0x21
 80044a4:	d13e      	bne.n	8004524 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d114      	bne.n	80044da <UART_Transmit_IT+0x48>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d110      	bne.n	80044da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	621a      	str	r2, [r3, #32]
 80044d8:	e008      	b.n	80044ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	1c59      	adds	r1, r3, #1
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6211      	str	r1, [r2, #32]
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4619      	mov	r1, r3
 80044fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800450e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004548:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fe8e 	bl	8004274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08c      	sub	sp, #48	; 0x30
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b22      	cmp	r3, #34	; 0x22
 8004574:	f040 80ab 	bne.w	80046ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	d117      	bne.n	80045b2 <UART_Receive_IT+0x50>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28
 80045b0:	e026      	b.n	8004600 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c4:	d007      	beq.n	80045d6 <UART_Receive_IT+0x74>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <UART_Receive_IT+0x82>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e008      	b.n	80045f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29b      	uxth	r3, r3
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4619      	mov	r1, r3
 800460e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004610:	2b00      	cmp	r3, #0
 8004612:	d15a      	bne.n	80046ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0220 	bic.w	r2, r2, #32
 8004622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d135      	bne.n	80046c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	613b      	str	r3, [r7, #16]
   return(result);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f023 0310 	bic.w	r3, r3, #16
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	623a      	str	r2, [r7, #32]
 800467c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	69f9      	ldr	r1, [r7, #28]
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	61bb      	str	r3, [r7, #24]
   return(result);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b10      	cmp	r3, #16
 800469a:	d10a      	bne.n	80046b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fdf9 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
 80046be:	e002      	b.n	80046c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fde1 	bl	8004288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e002      	b.n	80046d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e000      	b.n	80046d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3730      	adds	r7, #48	; 0x30
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046dc:	b0c0      	sub	sp, #256	; 0x100
 80046de:	af00      	add	r7, sp, #0
 80046e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	68d9      	ldr	r1, [r3, #12]
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	ea40 0301 	orr.w	r3, r0, r1
 8004700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	431a      	orrs	r2, r3
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004730:	f021 010c 	bic.w	r1, r1, #12
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800473e:	430b      	orrs	r3, r1
 8004740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	6999      	ldr	r1, [r3, #24]
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	ea40 0301 	orr.w	r3, r0, r1
 800475e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b8f      	ldr	r3, [pc, #572]	; (80049a4 <UART_SetConfig+0x2cc>)
 8004768:	429a      	cmp	r2, r3
 800476a:	d005      	beq.n	8004778 <UART_SetConfig+0xa0>
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b8d      	ldr	r3, [pc, #564]	; (80049a8 <UART_SetConfig+0x2d0>)
 8004774:	429a      	cmp	r2, r3
 8004776:	d104      	bne.n	8004782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fc74 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 800477c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004780:	e003      	b.n	800478a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004782:	f7fe fc5b 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 8004786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004794:	f040 810c 	bne.w	80049b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800479c:	2200      	movs	r2, #0
 800479e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	1891      	adds	r1, r2, r2
 80047b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047b2:	415b      	adcs	r3, r3
 80047b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047ba:	4621      	mov	r1, r4
 80047bc:	eb12 0801 	adds.w	r8, r2, r1
 80047c0:	4629      	mov	r1, r5
 80047c2:	eb43 0901 	adc.w	r9, r3, r1
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047da:	4690      	mov	r8, r2
 80047dc:	4699      	mov	r9, r3
 80047de:	4623      	mov	r3, r4
 80047e0:	eb18 0303 	adds.w	r3, r8, r3
 80047e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e8:	462b      	mov	r3, r5
 80047ea:	eb49 0303 	adc.w	r3, r9, r3
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004806:	460b      	mov	r3, r1
 8004808:	18db      	adds	r3, r3, r3
 800480a:	653b      	str	r3, [r7, #80]	; 0x50
 800480c:	4613      	mov	r3, r2
 800480e:	eb42 0303 	adc.w	r3, r2, r3
 8004812:	657b      	str	r3, [r7, #84]	; 0x54
 8004814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800481c:	f7fb fd38 	bl	8000290 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b61      	ldr	r3, [pc, #388]	; (80049ac <UART_SetConfig+0x2d4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800483c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	64b9      	str	r1, [r7, #72]	; 0x48
 8004848:	415b      	adcs	r3, r3
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004850:	4641      	mov	r1, r8
 8004852:	eb12 0a01 	adds.w	sl, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb43 0b01 	adc.w	fp, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800486c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004870:	4692      	mov	sl, r2
 8004872:	469b      	mov	fp, r3
 8004874:	4643      	mov	r3, r8
 8004876:	eb1a 0303 	adds.w	r3, sl, r3
 800487a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800487e:	464b      	mov	r3, r9
 8004880:	eb4b 0303 	adc.w	r3, fp, r3
 8004884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800489c:	460b      	mov	r3, r1
 800489e:	18db      	adds	r3, r3, r3
 80048a0:	643b      	str	r3, [r7, #64]	; 0x40
 80048a2:	4613      	mov	r3, r2
 80048a4:	eb42 0303 	adc.w	r3, r2, r3
 80048a8:	647b      	str	r3, [r7, #68]	; 0x44
 80048aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048b2:	f7fb fced 	bl	8000290 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <UART_SetConfig+0x2d4>)
 80048be:	fba3 2301 	umull	r2, r3, r3, r1
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2264      	movs	r2, #100	; 0x64
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	1acb      	subs	r3, r1, r3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048d2:	4b36      	ldr	r3, [pc, #216]	; (80049ac <UART_SetConfig+0x2d4>)
 80048d4:	fba3 2302 	umull	r2, r3, r3, r2
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048e0:	441c      	add	r4, r3
 80048e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80048fc:	415b      	adcs	r3, r3
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004904:	4641      	mov	r1, r8
 8004906:	1851      	adds	r1, r2, r1
 8004908:	6339      	str	r1, [r7, #48]	; 0x30
 800490a:	4649      	mov	r1, r9
 800490c:	414b      	adcs	r3, r1
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800491c:	4659      	mov	r1, fp
 800491e:	00cb      	lsls	r3, r1, #3
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004926:	4651      	mov	r1, sl
 8004928:	00ca      	lsls	r2, r1, #3
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	4603      	mov	r3, r0
 8004930:	4642      	mov	r2, r8
 8004932:	189b      	adds	r3, r3, r2
 8004934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004938:	464b      	mov	r3, r9
 800493a:	460a      	mov	r2, r1
 800493c:	eb42 0303 	adc.w	r3, r2, r3
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004958:	460b      	mov	r3, r1
 800495a:	18db      	adds	r3, r3, r3
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	4613      	mov	r3, r2
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800496a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800496e:	f7fb fc8f 	bl	8000290 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <UART_SetConfig+0x2d4>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <UART_SetConfig+0x2d4>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 0207 	and.w	r2, r3, #7
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4422      	add	r2, r4
 800499e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a0:	e106      	b.n	8004bb0 <UART_SetConfig+0x4d8>
 80049a2:	bf00      	nop
 80049a4:	40011000 	.word	0x40011000
 80049a8:	40011400 	.word	0x40011400
 80049ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049c2:	4642      	mov	r2, r8
 80049c4:	464b      	mov	r3, r9
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	6239      	str	r1, [r7, #32]
 80049ca:	415b      	adcs	r3, r3
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049d2:	4641      	mov	r1, r8
 80049d4:	1854      	adds	r4, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb43 0501 	adc.w	r5, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	00eb      	lsls	r3, r5, #3
 80049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	18e3      	adds	r3, r4, r3
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049f8:	464b      	mov	r3, r9
 80049fa:	eb45 0303 	adc.w	r3, r5, r3
 80049fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a1e:	4629      	mov	r1, r5
 8004a20:	008b      	lsls	r3, r1, #2
 8004a22:	4621      	mov	r1, r4
 8004a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a28:	4621      	mov	r1, r4
 8004a2a:	008a      	lsls	r2, r1, #2
 8004a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a30:	f7fb fc2e 	bl	8000290 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4b60      	ldr	r3, [pc, #384]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	011c      	lsls	r4, r3, #4
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	1891      	adds	r1, r2, r2
 8004a5a:	61b9      	str	r1, [r7, #24]
 8004a5c:	415b      	adcs	r3, r3
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a64:	4641      	mov	r1, r8
 8004a66:	1851      	adds	r1, r2, r1
 8004a68:	6139      	str	r1, [r7, #16]
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	414b      	adcs	r3, r1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	00cb      	lsls	r3, r1, #3
 8004a80:	4651      	mov	r1, sl
 8004a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a86:	4651      	mov	r1, sl
 8004a88:	00ca      	lsls	r2, r1, #3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4642      	mov	r2, r8
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a98:	464b      	mov	r3, r9
 8004a9a:	460a      	mov	r2, r1
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004abc:	4649      	mov	r1, r9
 8004abe:	008b      	lsls	r3, r1, #2
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	008a      	lsls	r2, r1, #2
 8004aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ace:	f7fb fbdf 	bl	8000290 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4b38      	ldr	r3, [pc, #224]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004ada:	fba3 2301 	umull	r2, r3, r3, r1
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2264      	movs	r2, #100	; 0x64
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	1acb      	subs	r3, r1, r3
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	3332      	adds	r3, #50	; 0x32
 8004aec:	4a33      	ldr	r2, [pc, #204]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af8:	441c      	add	r4, r3
 8004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afe:	2200      	movs	r2, #0
 8004b00:	673b      	str	r3, [r7, #112]	; 0x70
 8004b02:	677a      	str	r2, [r7, #116]	; 0x74
 8004b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	415b      	adcs	r3, r3
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b18:	4641      	mov	r1, r8
 8004b1a:	1851      	adds	r1, r2, r1
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	4649      	mov	r1, r9
 8004b20:	414b      	adcs	r3, r1
 8004b22:	607b      	str	r3, [r7, #4]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b30:	4659      	mov	r1, fp
 8004b32:	00cb      	lsls	r3, r1, #3
 8004b34:	4651      	mov	r1, sl
 8004b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	00ca      	lsls	r2, r1, #3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	4642      	mov	r2, r8
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	460a      	mov	r2, r1
 8004b4e:	eb42 0303 	adc.w	r3, r2, r3
 8004b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b5e:	667a      	str	r2, [r7, #100]	; 0x64
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	008b      	lsls	r3, r1, #2
 8004b70:	4641      	mov	r1, r8
 8004b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b76:	4641      	mov	r1, r8
 8004b78:	008a      	lsls	r2, r1, #2
 8004b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b7e:	f7fb fb87 	bl	8000290 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	2164      	movs	r1, #100	; 0x64
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	3332      	adds	r3, #50	; 0x32
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	f003 020f 	and.w	r2, r3, #15
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4422      	add	r2, r4
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bbc:	51eb851f 	.word	0x51eb851f

08004bc0 <siprintf>:
 8004bc0:	b40e      	push	{r1, r2, r3}
 8004bc2:	b500      	push	{lr}
 8004bc4:	b09c      	sub	sp, #112	; 0x70
 8004bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004bc8:	9002      	str	r0, [sp, #8]
 8004bca:	9006      	str	r0, [sp, #24]
 8004bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bd0:	4809      	ldr	r0, [pc, #36]	; (8004bf8 <siprintf+0x38>)
 8004bd2:	9107      	str	r1, [sp, #28]
 8004bd4:	9104      	str	r1, [sp, #16]
 8004bd6:	4909      	ldr	r1, [pc, #36]	; (8004bfc <siprintf+0x3c>)
 8004bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bdc:	9105      	str	r1, [sp, #20]
 8004bde:	6800      	ldr	r0, [r0, #0]
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	a902      	add	r1, sp, #8
 8004be4:	f000 f992 	bl	8004f0c <_svfiprintf_r>
 8004be8:	9b02      	ldr	r3, [sp, #8]
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	b01c      	add	sp, #112	; 0x70
 8004bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf4:	b003      	add	sp, #12
 8004bf6:	4770      	bx	lr
 8004bf8:	20000058 	.word	0x20000058
 8004bfc:	ffff0208 	.word	0xffff0208

08004c00 <memset>:
 8004c00:	4402      	add	r2, r0
 8004c02:	4603      	mov	r3, r0
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d100      	bne.n	8004c0a <memset+0xa>
 8004c08:	4770      	bx	lr
 8004c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0e:	e7f9      	b.n	8004c04 <memset+0x4>

08004c10 <__errno>:
 8004c10:	4b01      	ldr	r3, [pc, #4]	; (8004c18 <__errno+0x8>)
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000058 	.word	0x20000058

08004c1c <__libc_init_array>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4d0d      	ldr	r5, [pc, #52]	; (8004c54 <__libc_init_array+0x38>)
 8004c20:	4c0d      	ldr	r4, [pc, #52]	; (8004c58 <__libc_init_array+0x3c>)
 8004c22:	1b64      	subs	r4, r4, r5
 8004c24:	10a4      	asrs	r4, r4, #2
 8004c26:	2600      	movs	r6, #0
 8004c28:	42a6      	cmp	r6, r4
 8004c2a:	d109      	bne.n	8004c40 <__libc_init_array+0x24>
 8004c2c:	4d0b      	ldr	r5, [pc, #44]	; (8004c5c <__libc_init_array+0x40>)
 8004c2e:	4c0c      	ldr	r4, [pc, #48]	; (8004c60 <__libc_init_array+0x44>)
 8004c30:	f000 fc6a 	bl	8005508 <_init>
 8004c34:	1b64      	subs	r4, r4, r5
 8004c36:	10a4      	asrs	r4, r4, #2
 8004c38:	2600      	movs	r6, #0
 8004c3a:	42a6      	cmp	r6, r4
 8004c3c:	d105      	bne.n	8004c4a <__libc_init_array+0x2e>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c44:	4798      	blx	r3
 8004c46:	3601      	adds	r6, #1
 8004c48:	e7ee      	b.n	8004c28 <__libc_init_array+0xc>
 8004c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4e:	4798      	blx	r3
 8004c50:	3601      	adds	r6, #1
 8004c52:	e7f2      	b.n	8004c3a <__libc_init_array+0x1e>
 8004c54:	0800558c 	.word	0x0800558c
 8004c58:	0800558c 	.word	0x0800558c
 8004c5c:	0800558c 	.word	0x0800558c
 8004c60:	08005590 	.word	0x08005590

08004c64 <__retarget_lock_acquire_recursive>:
 8004c64:	4770      	bx	lr

08004c66 <__retarget_lock_release_recursive>:
 8004c66:	4770      	bx	lr

08004c68 <_free_r>:
 8004c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	d044      	beq.n	8004cf8 <_free_r+0x90>
 8004c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c72:	9001      	str	r0, [sp, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f1a1 0404 	sub.w	r4, r1, #4
 8004c7a:	bfb8      	it	lt
 8004c7c:	18e4      	addlt	r4, r4, r3
 8004c7e:	f000 f8df 	bl	8004e40 <__malloc_lock>
 8004c82:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <_free_r+0x94>)
 8004c84:	9801      	ldr	r0, [sp, #4]
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	b933      	cbnz	r3, 8004c98 <_free_r+0x30>
 8004c8a:	6063      	str	r3, [r4, #4]
 8004c8c:	6014      	str	r4, [r2, #0]
 8004c8e:	b003      	add	sp, #12
 8004c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c94:	f000 b8da 	b.w	8004e4c <__malloc_unlock>
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	d908      	bls.n	8004cae <_free_r+0x46>
 8004c9c:	6825      	ldr	r5, [r4, #0]
 8004c9e:	1961      	adds	r1, r4, r5
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	bf01      	itttt	eq
 8004ca4:	6819      	ldreq	r1, [r3, #0]
 8004ca6:	685b      	ldreq	r3, [r3, #4]
 8004ca8:	1949      	addeq	r1, r1, r5
 8004caa:	6021      	streq	r1, [r4, #0]
 8004cac:	e7ed      	b.n	8004c8a <_free_r+0x22>
 8004cae:	461a      	mov	r2, r3
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	b10b      	cbz	r3, 8004cb8 <_free_r+0x50>
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d9fa      	bls.n	8004cae <_free_r+0x46>
 8004cb8:	6811      	ldr	r1, [r2, #0]
 8004cba:	1855      	adds	r5, r2, r1
 8004cbc:	42a5      	cmp	r5, r4
 8004cbe:	d10b      	bne.n	8004cd8 <_free_r+0x70>
 8004cc0:	6824      	ldr	r4, [r4, #0]
 8004cc2:	4421      	add	r1, r4
 8004cc4:	1854      	adds	r4, r2, r1
 8004cc6:	42a3      	cmp	r3, r4
 8004cc8:	6011      	str	r1, [r2, #0]
 8004cca:	d1e0      	bne.n	8004c8e <_free_r+0x26>
 8004ccc:	681c      	ldr	r4, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	6053      	str	r3, [r2, #4]
 8004cd2:	440c      	add	r4, r1
 8004cd4:	6014      	str	r4, [r2, #0]
 8004cd6:	e7da      	b.n	8004c8e <_free_r+0x26>
 8004cd8:	d902      	bls.n	8004ce0 <_free_r+0x78>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	6003      	str	r3, [r0, #0]
 8004cde:	e7d6      	b.n	8004c8e <_free_r+0x26>
 8004ce0:	6825      	ldr	r5, [r4, #0]
 8004ce2:	1961      	adds	r1, r4, r5
 8004ce4:	428b      	cmp	r3, r1
 8004ce6:	bf04      	itt	eq
 8004ce8:	6819      	ldreq	r1, [r3, #0]
 8004cea:	685b      	ldreq	r3, [r3, #4]
 8004cec:	6063      	str	r3, [r4, #4]
 8004cee:	bf04      	itt	eq
 8004cf0:	1949      	addeq	r1, r1, r5
 8004cf2:	6021      	streq	r1, [r4, #0]
 8004cf4:	6054      	str	r4, [r2, #4]
 8004cf6:	e7ca      	b.n	8004c8e <_free_r+0x26>
 8004cf8:	b003      	add	sp, #12
 8004cfa:	bd30      	pop	{r4, r5, pc}
 8004cfc:	20000514 	.word	0x20000514

08004d00 <sbrk_aligned>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4e0e      	ldr	r6, [pc, #56]	; (8004d3c <sbrk_aligned+0x3c>)
 8004d04:	460c      	mov	r4, r1
 8004d06:	6831      	ldr	r1, [r6, #0]
 8004d08:	4605      	mov	r5, r0
 8004d0a:	b911      	cbnz	r1, 8004d12 <sbrk_aligned+0x12>
 8004d0c:	f000 fba6 	bl	800545c <_sbrk_r>
 8004d10:	6030      	str	r0, [r6, #0]
 8004d12:	4621      	mov	r1, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 fba1 	bl	800545c <_sbrk_r>
 8004d1a:	1c43      	adds	r3, r0, #1
 8004d1c:	d00a      	beq.n	8004d34 <sbrk_aligned+0x34>
 8004d1e:	1cc4      	adds	r4, r0, #3
 8004d20:	f024 0403 	bic.w	r4, r4, #3
 8004d24:	42a0      	cmp	r0, r4
 8004d26:	d007      	beq.n	8004d38 <sbrk_aligned+0x38>
 8004d28:	1a21      	subs	r1, r4, r0
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 fb96 	bl	800545c <_sbrk_r>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d101      	bne.n	8004d38 <sbrk_aligned+0x38>
 8004d34:	f04f 34ff 	mov.w	r4, #4294967295
 8004d38:	4620      	mov	r0, r4
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	20000518 	.word	0x20000518

08004d40 <_malloc_r>:
 8004d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d44:	1ccd      	adds	r5, r1, #3
 8004d46:	f025 0503 	bic.w	r5, r5, #3
 8004d4a:	3508      	adds	r5, #8
 8004d4c:	2d0c      	cmp	r5, #12
 8004d4e:	bf38      	it	cc
 8004d50:	250c      	movcc	r5, #12
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	4607      	mov	r7, r0
 8004d56:	db01      	blt.n	8004d5c <_malloc_r+0x1c>
 8004d58:	42a9      	cmp	r1, r5
 8004d5a:	d905      	bls.n	8004d68 <_malloc_r+0x28>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	2600      	movs	r6, #0
 8004d62:	4630      	mov	r0, r6
 8004d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e3c <_malloc_r+0xfc>
 8004d6c:	f000 f868 	bl	8004e40 <__malloc_lock>
 8004d70:	f8d8 3000 	ldr.w	r3, [r8]
 8004d74:	461c      	mov	r4, r3
 8004d76:	bb5c      	cbnz	r4, 8004dd0 <_malloc_r+0x90>
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	f7ff ffc0 	bl	8004d00 <sbrk_aligned>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	4604      	mov	r4, r0
 8004d84:	d155      	bne.n	8004e32 <_malloc_r+0xf2>
 8004d86:	f8d8 4000 	ldr.w	r4, [r8]
 8004d8a:	4626      	mov	r6, r4
 8004d8c:	2e00      	cmp	r6, #0
 8004d8e:	d145      	bne.n	8004e1c <_malloc_r+0xdc>
 8004d90:	2c00      	cmp	r4, #0
 8004d92:	d048      	beq.n	8004e26 <_malloc_r+0xe6>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	4631      	mov	r1, r6
 8004d98:	4638      	mov	r0, r7
 8004d9a:	eb04 0903 	add.w	r9, r4, r3
 8004d9e:	f000 fb5d 	bl	800545c <_sbrk_r>
 8004da2:	4581      	cmp	r9, r0
 8004da4:	d13f      	bne.n	8004e26 <_malloc_r+0xe6>
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	1a6d      	subs	r5, r5, r1
 8004daa:	4629      	mov	r1, r5
 8004dac:	4638      	mov	r0, r7
 8004dae:	f7ff ffa7 	bl	8004d00 <sbrk_aligned>
 8004db2:	3001      	adds	r0, #1
 8004db4:	d037      	beq.n	8004e26 <_malloc_r+0xe6>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	442b      	add	r3, r5
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d038      	beq.n	8004e36 <_malloc_r+0xf6>
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	42a2      	cmp	r2, r4
 8004dc8:	d12b      	bne.n	8004e22 <_malloc_r+0xe2>
 8004dca:	2200      	movs	r2, #0
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	e00f      	b.n	8004df0 <_malloc_r+0xb0>
 8004dd0:	6822      	ldr	r2, [r4, #0]
 8004dd2:	1b52      	subs	r2, r2, r5
 8004dd4:	d41f      	bmi.n	8004e16 <_malloc_r+0xd6>
 8004dd6:	2a0b      	cmp	r2, #11
 8004dd8:	d917      	bls.n	8004e0a <_malloc_r+0xca>
 8004dda:	1961      	adds	r1, r4, r5
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	6025      	str	r5, [r4, #0]
 8004de0:	bf18      	it	ne
 8004de2:	6059      	strne	r1, [r3, #4]
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	bf08      	it	eq
 8004de8:	f8c8 1000 	streq.w	r1, [r8]
 8004dec:	5162      	str	r2, [r4, r5]
 8004dee:	604b      	str	r3, [r1, #4]
 8004df0:	4638      	mov	r0, r7
 8004df2:	f104 060b 	add.w	r6, r4, #11
 8004df6:	f000 f829 	bl	8004e4c <__malloc_unlock>
 8004dfa:	f026 0607 	bic.w	r6, r6, #7
 8004dfe:	1d23      	adds	r3, r4, #4
 8004e00:	1af2      	subs	r2, r6, r3
 8004e02:	d0ae      	beq.n	8004d62 <_malloc_r+0x22>
 8004e04:	1b9b      	subs	r3, r3, r6
 8004e06:	50a3      	str	r3, [r4, r2]
 8004e08:	e7ab      	b.n	8004d62 <_malloc_r+0x22>
 8004e0a:	42a3      	cmp	r3, r4
 8004e0c:	6862      	ldr	r2, [r4, #4]
 8004e0e:	d1dd      	bne.n	8004dcc <_malloc_r+0x8c>
 8004e10:	f8c8 2000 	str.w	r2, [r8]
 8004e14:	e7ec      	b.n	8004df0 <_malloc_r+0xb0>
 8004e16:	4623      	mov	r3, r4
 8004e18:	6864      	ldr	r4, [r4, #4]
 8004e1a:	e7ac      	b.n	8004d76 <_malloc_r+0x36>
 8004e1c:	4634      	mov	r4, r6
 8004e1e:	6876      	ldr	r6, [r6, #4]
 8004e20:	e7b4      	b.n	8004d8c <_malloc_r+0x4c>
 8004e22:	4613      	mov	r3, r2
 8004e24:	e7cc      	b.n	8004dc0 <_malloc_r+0x80>
 8004e26:	230c      	movs	r3, #12
 8004e28:	603b      	str	r3, [r7, #0]
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f000 f80e 	bl	8004e4c <__malloc_unlock>
 8004e30:	e797      	b.n	8004d62 <_malloc_r+0x22>
 8004e32:	6025      	str	r5, [r4, #0]
 8004e34:	e7dc      	b.n	8004df0 <_malloc_r+0xb0>
 8004e36:	605b      	str	r3, [r3, #4]
 8004e38:	deff      	udf	#255	; 0xff
 8004e3a:	bf00      	nop
 8004e3c:	20000514 	.word	0x20000514

08004e40 <__malloc_lock>:
 8004e40:	4801      	ldr	r0, [pc, #4]	; (8004e48 <__malloc_lock+0x8>)
 8004e42:	f7ff bf0f 	b.w	8004c64 <__retarget_lock_acquire_recursive>
 8004e46:	bf00      	nop
 8004e48:	20000510 	.word	0x20000510

08004e4c <__malloc_unlock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__malloc_unlock+0x8>)
 8004e4e:	f7ff bf0a 	b.w	8004c66 <__retarget_lock_release_recursive>
 8004e52:	bf00      	nop
 8004e54:	20000510 	.word	0x20000510

08004e58 <__ssputs_r>:
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	688e      	ldr	r6, [r1, #8]
 8004e5e:	461f      	mov	r7, r3
 8004e60:	42be      	cmp	r6, r7
 8004e62:	680b      	ldr	r3, [r1, #0]
 8004e64:	4682      	mov	sl, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	4690      	mov	r8, r2
 8004e6a:	d82c      	bhi.n	8004ec6 <__ssputs_r+0x6e>
 8004e6c:	898a      	ldrh	r2, [r1, #12]
 8004e6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e72:	d026      	beq.n	8004ec2 <__ssputs_r+0x6a>
 8004e74:	6965      	ldr	r5, [r4, #20]
 8004e76:	6909      	ldr	r1, [r1, #16]
 8004e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e7c:	eba3 0901 	sub.w	r9, r3, r1
 8004e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e84:	1c7b      	adds	r3, r7, #1
 8004e86:	444b      	add	r3, r9
 8004e88:	106d      	asrs	r5, r5, #1
 8004e8a:	429d      	cmp	r5, r3
 8004e8c:	bf38      	it	cc
 8004e8e:	461d      	movcc	r5, r3
 8004e90:	0553      	lsls	r3, r2, #21
 8004e92:	d527      	bpl.n	8004ee4 <__ssputs_r+0x8c>
 8004e94:	4629      	mov	r1, r5
 8004e96:	f7ff ff53 	bl	8004d40 <_malloc_r>
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	b360      	cbz	r0, 8004ef8 <__ssputs_r+0xa0>
 8004e9e:	6921      	ldr	r1, [r4, #16]
 8004ea0:	464a      	mov	r2, r9
 8004ea2:	f000 faeb 	bl	800547c <memcpy>
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb0:	81a3      	strh	r3, [r4, #12]
 8004eb2:	6126      	str	r6, [r4, #16]
 8004eb4:	6165      	str	r5, [r4, #20]
 8004eb6:	444e      	add	r6, r9
 8004eb8:	eba5 0509 	sub.w	r5, r5, r9
 8004ebc:	6026      	str	r6, [r4, #0]
 8004ebe:	60a5      	str	r5, [r4, #8]
 8004ec0:	463e      	mov	r6, r7
 8004ec2:	42be      	cmp	r6, r7
 8004ec4:	d900      	bls.n	8004ec8 <__ssputs_r+0x70>
 8004ec6:	463e      	mov	r6, r7
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	4632      	mov	r2, r6
 8004ecc:	4641      	mov	r1, r8
 8004ece:	f000 faab 	bl	8005428 <memmove>
 8004ed2:	68a3      	ldr	r3, [r4, #8]
 8004ed4:	1b9b      	subs	r3, r3, r6
 8004ed6:	60a3      	str	r3, [r4, #8]
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	4433      	add	r3, r6
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee4:	462a      	mov	r2, r5
 8004ee6:	f000 fad7 	bl	8005498 <_realloc_r>
 8004eea:	4606      	mov	r6, r0
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d1e0      	bne.n	8004eb2 <__ssputs_r+0x5a>
 8004ef0:	6921      	ldr	r1, [r4, #16]
 8004ef2:	4650      	mov	r0, sl
 8004ef4:	f7ff feb8 	bl	8004c68 <_free_r>
 8004ef8:	230c      	movs	r3, #12
 8004efa:	f8ca 3000 	str.w	r3, [sl]
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0a:	e7e9      	b.n	8004ee0 <__ssputs_r+0x88>

08004f0c <_svfiprintf_r>:
 8004f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f10:	4698      	mov	r8, r3
 8004f12:	898b      	ldrh	r3, [r1, #12]
 8004f14:	061b      	lsls	r3, r3, #24
 8004f16:	b09d      	sub	sp, #116	; 0x74
 8004f18:	4607      	mov	r7, r0
 8004f1a:	460d      	mov	r5, r1
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	d50e      	bpl.n	8004f3e <_svfiprintf_r+0x32>
 8004f20:	690b      	ldr	r3, [r1, #16]
 8004f22:	b963      	cbnz	r3, 8004f3e <_svfiprintf_r+0x32>
 8004f24:	2140      	movs	r1, #64	; 0x40
 8004f26:	f7ff ff0b 	bl	8004d40 <_malloc_r>
 8004f2a:	6028      	str	r0, [r5, #0]
 8004f2c:	6128      	str	r0, [r5, #16]
 8004f2e:	b920      	cbnz	r0, 8004f3a <_svfiprintf_r+0x2e>
 8004f30:	230c      	movs	r3, #12
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	e0d0      	b.n	80050dc <_svfiprintf_r+0x1d0>
 8004f3a:	2340      	movs	r3, #64	; 0x40
 8004f3c:	616b      	str	r3, [r5, #20]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9309      	str	r3, [sp, #36]	; 0x24
 8004f42:	2320      	movs	r3, #32
 8004f44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f4c:	2330      	movs	r3, #48	; 0x30
 8004f4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80050f4 <_svfiprintf_r+0x1e8>
 8004f52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f56:	f04f 0901 	mov.w	r9, #1
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	469a      	mov	sl, r3
 8004f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f62:	b10a      	cbz	r2, 8004f68 <_svfiprintf_r+0x5c>
 8004f64:	2a25      	cmp	r2, #37	; 0x25
 8004f66:	d1f9      	bne.n	8004f5c <_svfiprintf_r+0x50>
 8004f68:	ebba 0b04 	subs.w	fp, sl, r4
 8004f6c:	d00b      	beq.n	8004f86 <_svfiprintf_r+0x7a>
 8004f6e:	465b      	mov	r3, fp
 8004f70:	4622      	mov	r2, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	4638      	mov	r0, r7
 8004f76:	f7ff ff6f 	bl	8004e58 <__ssputs_r>
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	f000 80a9 	beq.w	80050d2 <_svfiprintf_r+0x1c6>
 8004f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f82:	445a      	add	r2, fp
 8004f84:	9209      	str	r2, [sp, #36]	; 0x24
 8004f86:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80a1 	beq.w	80050d2 <_svfiprintf_r+0x1c6>
 8004f90:	2300      	movs	r3, #0
 8004f92:	f04f 32ff 	mov.w	r2, #4294967295
 8004f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f9a:	f10a 0a01 	add.w	sl, sl, #1
 8004f9e:	9304      	str	r3, [sp, #16]
 8004fa0:	9307      	str	r3, [sp, #28]
 8004fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8004fa8:	4654      	mov	r4, sl
 8004faa:	2205      	movs	r2, #5
 8004fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb0:	4850      	ldr	r0, [pc, #320]	; (80050f4 <_svfiprintf_r+0x1e8>)
 8004fb2:	f7fb f91d 	bl	80001f0 <memchr>
 8004fb6:	9a04      	ldr	r2, [sp, #16]
 8004fb8:	b9d8      	cbnz	r0, 8004ff2 <_svfiprintf_r+0xe6>
 8004fba:	06d0      	lsls	r0, r2, #27
 8004fbc:	bf44      	itt	mi
 8004fbe:	2320      	movmi	r3, #32
 8004fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc4:	0711      	lsls	r1, r2, #28
 8004fc6:	bf44      	itt	mi
 8004fc8:	232b      	movmi	r3, #43	; 0x2b
 8004fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fce:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd4:	d015      	beq.n	8005002 <_svfiprintf_r+0xf6>
 8004fd6:	9a07      	ldr	r2, [sp, #28]
 8004fd8:	4654      	mov	r4, sl
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f04f 0c0a 	mov.w	ip, #10
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe6:	3b30      	subs	r3, #48	; 0x30
 8004fe8:	2b09      	cmp	r3, #9
 8004fea:	d94d      	bls.n	8005088 <_svfiprintf_r+0x17c>
 8004fec:	b1b0      	cbz	r0, 800501c <_svfiprintf_r+0x110>
 8004fee:	9207      	str	r2, [sp, #28]
 8004ff0:	e014      	b.n	800501c <_svfiprintf_r+0x110>
 8004ff2:	eba0 0308 	sub.w	r3, r0, r8
 8004ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	46a2      	mov	sl, r4
 8005000:	e7d2      	b.n	8004fa8 <_svfiprintf_r+0x9c>
 8005002:	9b03      	ldr	r3, [sp, #12]
 8005004:	1d19      	adds	r1, r3, #4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	9103      	str	r1, [sp, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	bfbb      	ittet	lt
 800500e:	425b      	neglt	r3, r3
 8005010:	f042 0202 	orrlt.w	r2, r2, #2
 8005014:	9307      	strge	r3, [sp, #28]
 8005016:	9307      	strlt	r3, [sp, #28]
 8005018:	bfb8      	it	lt
 800501a:	9204      	strlt	r2, [sp, #16]
 800501c:	7823      	ldrb	r3, [r4, #0]
 800501e:	2b2e      	cmp	r3, #46	; 0x2e
 8005020:	d10c      	bne.n	800503c <_svfiprintf_r+0x130>
 8005022:	7863      	ldrb	r3, [r4, #1]
 8005024:	2b2a      	cmp	r3, #42	; 0x2a
 8005026:	d134      	bne.n	8005092 <_svfiprintf_r+0x186>
 8005028:	9b03      	ldr	r3, [sp, #12]
 800502a:	1d1a      	adds	r2, r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	9203      	str	r2, [sp, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	bfb8      	it	lt
 8005034:	f04f 33ff 	movlt.w	r3, #4294967295
 8005038:	3402      	adds	r4, #2
 800503a:	9305      	str	r3, [sp, #20]
 800503c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005104 <_svfiprintf_r+0x1f8>
 8005040:	7821      	ldrb	r1, [r4, #0]
 8005042:	2203      	movs	r2, #3
 8005044:	4650      	mov	r0, sl
 8005046:	f7fb f8d3 	bl	80001f0 <memchr>
 800504a:	b138      	cbz	r0, 800505c <_svfiprintf_r+0x150>
 800504c:	9b04      	ldr	r3, [sp, #16]
 800504e:	eba0 000a 	sub.w	r0, r0, sl
 8005052:	2240      	movs	r2, #64	; 0x40
 8005054:	4082      	lsls	r2, r0
 8005056:	4313      	orrs	r3, r2
 8005058:	3401      	adds	r4, #1
 800505a:	9304      	str	r3, [sp, #16]
 800505c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005060:	4825      	ldr	r0, [pc, #148]	; (80050f8 <_svfiprintf_r+0x1ec>)
 8005062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005066:	2206      	movs	r2, #6
 8005068:	f7fb f8c2 	bl	80001f0 <memchr>
 800506c:	2800      	cmp	r0, #0
 800506e:	d038      	beq.n	80050e2 <_svfiprintf_r+0x1d6>
 8005070:	4b22      	ldr	r3, [pc, #136]	; (80050fc <_svfiprintf_r+0x1f0>)
 8005072:	bb1b      	cbnz	r3, 80050bc <_svfiprintf_r+0x1b0>
 8005074:	9b03      	ldr	r3, [sp, #12]
 8005076:	3307      	adds	r3, #7
 8005078:	f023 0307 	bic.w	r3, r3, #7
 800507c:	3308      	adds	r3, #8
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005082:	4433      	add	r3, r6
 8005084:	9309      	str	r3, [sp, #36]	; 0x24
 8005086:	e768      	b.n	8004f5a <_svfiprintf_r+0x4e>
 8005088:	fb0c 3202 	mla	r2, ip, r2, r3
 800508c:	460c      	mov	r4, r1
 800508e:	2001      	movs	r0, #1
 8005090:	e7a6      	b.n	8004fe0 <_svfiprintf_r+0xd4>
 8005092:	2300      	movs	r3, #0
 8005094:	3401      	adds	r4, #1
 8005096:	9305      	str	r3, [sp, #20]
 8005098:	4619      	mov	r1, r3
 800509a:	f04f 0c0a 	mov.w	ip, #10
 800509e:	4620      	mov	r0, r4
 80050a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a4:	3a30      	subs	r2, #48	; 0x30
 80050a6:	2a09      	cmp	r2, #9
 80050a8:	d903      	bls.n	80050b2 <_svfiprintf_r+0x1a6>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0c6      	beq.n	800503c <_svfiprintf_r+0x130>
 80050ae:	9105      	str	r1, [sp, #20]
 80050b0:	e7c4      	b.n	800503c <_svfiprintf_r+0x130>
 80050b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050b6:	4604      	mov	r4, r0
 80050b8:	2301      	movs	r3, #1
 80050ba:	e7f0      	b.n	800509e <_svfiprintf_r+0x192>
 80050bc:	ab03      	add	r3, sp, #12
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	462a      	mov	r2, r5
 80050c2:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <_svfiprintf_r+0x1f4>)
 80050c4:	a904      	add	r1, sp, #16
 80050c6:	4638      	mov	r0, r7
 80050c8:	f3af 8000 	nop.w
 80050cc:	1c42      	adds	r2, r0, #1
 80050ce:	4606      	mov	r6, r0
 80050d0:	d1d6      	bne.n	8005080 <_svfiprintf_r+0x174>
 80050d2:	89ab      	ldrh	r3, [r5, #12]
 80050d4:	065b      	lsls	r3, r3, #25
 80050d6:	f53f af2d 	bmi.w	8004f34 <_svfiprintf_r+0x28>
 80050da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050dc:	b01d      	add	sp, #116	; 0x74
 80050de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e2:	ab03      	add	r3, sp, #12
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	462a      	mov	r2, r5
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <_svfiprintf_r+0x1f4>)
 80050ea:	a904      	add	r1, sp, #16
 80050ec:	4638      	mov	r0, r7
 80050ee:	f000 f879 	bl	80051e4 <_printf_i>
 80050f2:	e7eb      	b.n	80050cc <_svfiprintf_r+0x1c0>
 80050f4:	08005550 	.word	0x08005550
 80050f8:	0800555a 	.word	0x0800555a
 80050fc:	00000000 	.word	0x00000000
 8005100:	08004e59 	.word	0x08004e59
 8005104:	08005556 	.word	0x08005556

08005108 <_printf_common>:
 8005108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	4616      	mov	r6, r2
 800510e:	4699      	mov	r9, r3
 8005110:	688a      	ldr	r2, [r1, #8]
 8005112:	690b      	ldr	r3, [r1, #16]
 8005114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005118:	4293      	cmp	r3, r2
 800511a:	bfb8      	it	lt
 800511c:	4613      	movlt	r3, r2
 800511e:	6033      	str	r3, [r6, #0]
 8005120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005124:	4607      	mov	r7, r0
 8005126:	460c      	mov	r4, r1
 8005128:	b10a      	cbz	r2, 800512e <_printf_common+0x26>
 800512a:	3301      	adds	r3, #1
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	0699      	lsls	r1, r3, #26
 8005132:	bf42      	ittt	mi
 8005134:	6833      	ldrmi	r3, [r6, #0]
 8005136:	3302      	addmi	r3, #2
 8005138:	6033      	strmi	r3, [r6, #0]
 800513a:	6825      	ldr	r5, [r4, #0]
 800513c:	f015 0506 	ands.w	r5, r5, #6
 8005140:	d106      	bne.n	8005150 <_printf_common+0x48>
 8005142:	f104 0a19 	add.w	sl, r4, #25
 8005146:	68e3      	ldr	r3, [r4, #12]
 8005148:	6832      	ldr	r2, [r6, #0]
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	42ab      	cmp	r3, r5
 800514e:	dc26      	bgt.n	800519e <_printf_common+0x96>
 8005150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005154:	1e13      	subs	r3, r2, #0
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	bf18      	it	ne
 800515a:	2301      	movne	r3, #1
 800515c:	0692      	lsls	r2, r2, #26
 800515e:	d42b      	bmi.n	80051b8 <_printf_common+0xb0>
 8005160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005164:	4649      	mov	r1, r9
 8005166:	4638      	mov	r0, r7
 8005168:	47c0      	blx	r8
 800516a:	3001      	adds	r0, #1
 800516c:	d01e      	beq.n	80051ac <_printf_common+0xa4>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	6922      	ldr	r2, [r4, #16]
 8005172:	f003 0306 	and.w	r3, r3, #6
 8005176:	2b04      	cmp	r3, #4
 8005178:	bf02      	ittt	eq
 800517a:	68e5      	ldreq	r5, [r4, #12]
 800517c:	6833      	ldreq	r3, [r6, #0]
 800517e:	1aed      	subeq	r5, r5, r3
 8005180:	68a3      	ldr	r3, [r4, #8]
 8005182:	bf0c      	ite	eq
 8005184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005188:	2500      	movne	r5, #0
 800518a:	4293      	cmp	r3, r2
 800518c:	bfc4      	itt	gt
 800518e:	1a9b      	subgt	r3, r3, r2
 8005190:	18ed      	addgt	r5, r5, r3
 8005192:	2600      	movs	r6, #0
 8005194:	341a      	adds	r4, #26
 8005196:	42b5      	cmp	r5, r6
 8005198:	d11a      	bne.n	80051d0 <_printf_common+0xc8>
 800519a:	2000      	movs	r0, #0
 800519c:	e008      	b.n	80051b0 <_printf_common+0xa8>
 800519e:	2301      	movs	r3, #1
 80051a0:	4652      	mov	r2, sl
 80051a2:	4649      	mov	r1, r9
 80051a4:	4638      	mov	r0, r7
 80051a6:	47c0      	blx	r8
 80051a8:	3001      	adds	r0, #1
 80051aa:	d103      	bne.n	80051b4 <_printf_common+0xac>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b4:	3501      	adds	r5, #1
 80051b6:	e7c6      	b.n	8005146 <_printf_common+0x3e>
 80051b8:	18e1      	adds	r1, r4, r3
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	2030      	movs	r0, #48	; 0x30
 80051be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051c2:	4422      	add	r2, r4
 80051c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051cc:	3302      	adds	r3, #2
 80051ce:	e7c7      	b.n	8005160 <_printf_common+0x58>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4622      	mov	r2, r4
 80051d4:	4649      	mov	r1, r9
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c0      	blx	r8
 80051da:	3001      	adds	r0, #1
 80051dc:	d0e6      	beq.n	80051ac <_printf_common+0xa4>
 80051de:	3601      	adds	r6, #1
 80051e0:	e7d9      	b.n	8005196 <_printf_common+0x8e>
	...

080051e4 <_printf_i>:
 80051e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	7e0f      	ldrb	r7, [r1, #24]
 80051ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051ec:	2f78      	cmp	r7, #120	; 0x78
 80051ee:	4691      	mov	r9, r2
 80051f0:	4680      	mov	r8, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	469a      	mov	sl, r3
 80051f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051fa:	d807      	bhi.n	800520c <_printf_i+0x28>
 80051fc:	2f62      	cmp	r7, #98	; 0x62
 80051fe:	d80a      	bhi.n	8005216 <_printf_i+0x32>
 8005200:	2f00      	cmp	r7, #0
 8005202:	f000 80d4 	beq.w	80053ae <_printf_i+0x1ca>
 8005206:	2f58      	cmp	r7, #88	; 0x58
 8005208:	f000 80c0 	beq.w	800538c <_printf_i+0x1a8>
 800520c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005214:	e03a      	b.n	800528c <_printf_i+0xa8>
 8005216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800521a:	2b15      	cmp	r3, #21
 800521c:	d8f6      	bhi.n	800520c <_printf_i+0x28>
 800521e:	a101      	add	r1, pc, #4	; (adr r1, 8005224 <_printf_i+0x40>)
 8005220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005224:	0800527d 	.word	0x0800527d
 8005228:	08005291 	.word	0x08005291
 800522c:	0800520d 	.word	0x0800520d
 8005230:	0800520d 	.word	0x0800520d
 8005234:	0800520d 	.word	0x0800520d
 8005238:	0800520d 	.word	0x0800520d
 800523c:	08005291 	.word	0x08005291
 8005240:	0800520d 	.word	0x0800520d
 8005244:	0800520d 	.word	0x0800520d
 8005248:	0800520d 	.word	0x0800520d
 800524c:	0800520d 	.word	0x0800520d
 8005250:	08005395 	.word	0x08005395
 8005254:	080052bd 	.word	0x080052bd
 8005258:	0800534f 	.word	0x0800534f
 800525c:	0800520d 	.word	0x0800520d
 8005260:	0800520d 	.word	0x0800520d
 8005264:	080053b7 	.word	0x080053b7
 8005268:	0800520d 	.word	0x0800520d
 800526c:	080052bd 	.word	0x080052bd
 8005270:	0800520d 	.word	0x0800520d
 8005274:	0800520d 	.word	0x0800520d
 8005278:	08005357 	.word	0x08005357
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	602a      	str	r2, [r5, #0]
 8005284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800528c:	2301      	movs	r3, #1
 800528e:	e09f      	b.n	80053d0 <_printf_i+0x1ec>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	682b      	ldr	r3, [r5, #0]
 8005294:	0607      	lsls	r7, r0, #24
 8005296:	f103 0104 	add.w	r1, r3, #4
 800529a:	6029      	str	r1, [r5, #0]
 800529c:	d501      	bpl.n	80052a2 <_printf_i+0xbe>
 800529e:	681e      	ldr	r6, [r3, #0]
 80052a0:	e003      	b.n	80052aa <_printf_i+0xc6>
 80052a2:	0646      	lsls	r6, r0, #25
 80052a4:	d5fb      	bpl.n	800529e <_printf_i+0xba>
 80052a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052aa:	2e00      	cmp	r6, #0
 80052ac:	da03      	bge.n	80052b6 <_printf_i+0xd2>
 80052ae:	232d      	movs	r3, #45	; 0x2d
 80052b0:	4276      	negs	r6, r6
 80052b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b6:	485a      	ldr	r0, [pc, #360]	; (8005420 <_printf_i+0x23c>)
 80052b8:	230a      	movs	r3, #10
 80052ba:	e012      	b.n	80052e2 <_printf_i+0xfe>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	6820      	ldr	r0, [r4, #0]
 80052c0:	1d19      	adds	r1, r3, #4
 80052c2:	6029      	str	r1, [r5, #0]
 80052c4:	0605      	lsls	r5, r0, #24
 80052c6:	d501      	bpl.n	80052cc <_printf_i+0xe8>
 80052c8:	681e      	ldr	r6, [r3, #0]
 80052ca:	e002      	b.n	80052d2 <_printf_i+0xee>
 80052cc:	0641      	lsls	r1, r0, #25
 80052ce:	d5fb      	bpl.n	80052c8 <_printf_i+0xe4>
 80052d0:	881e      	ldrh	r6, [r3, #0]
 80052d2:	4853      	ldr	r0, [pc, #332]	; (8005420 <_printf_i+0x23c>)
 80052d4:	2f6f      	cmp	r7, #111	; 0x6f
 80052d6:	bf0c      	ite	eq
 80052d8:	2308      	moveq	r3, #8
 80052da:	230a      	movne	r3, #10
 80052dc:	2100      	movs	r1, #0
 80052de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052e2:	6865      	ldr	r5, [r4, #4]
 80052e4:	60a5      	str	r5, [r4, #8]
 80052e6:	2d00      	cmp	r5, #0
 80052e8:	bfa2      	ittt	ge
 80052ea:	6821      	ldrge	r1, [r4, #0]
 80052ec:	f021 0104 	bicge.w	r1, r1, #4
 80052f0:	6021      	strge	r1, [r4, #0]
 80052f2:	b90e      	cbnz	r6, 80052f8 <_printf_i+0x114>
 80052f4:	2d00      	cmp	r5, #0
 80052f6:	d04b      	beq.n	8005390 <_printf_i+0x1ac>
 80052f8:	4615      	mov	r5, r2
 80052fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80052fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005302:	5dc7      	ldrb	r7, [r0, r7]
 8005304:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005308:	4637      	mov	r7, r6
 800530a:	42bb      	cmp	r3, r7
 800530c:	460e      	mov	r6, r1
 800530e:	d9f4      	bls.n	80052fa <_printf_i+0x116>
 8005310:	2b08      	cmp	r3, #8
 8005312:	d10b      	bne.n	800532c <_printf_i+0x148>
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	07de      	lsls	r6, r3, #31
 8005318:	d508      	bpl.n	800532c <_printf_i+0x148>
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	6861      	ldr	r1, [r4, #4]
 800531e:	4299      	cmp	r1, r3
 8005320:	bfde      	ittt	le
 8005322:	2330      	movle	r3, #48	; 0x30
 8005324:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005328:	f105 35ff 	addle.w	r5, r5, #4294967295
 800532c:	1b52      	subs	r2, r2, r5
 800532e:	6122      	str	r2, [r4, #16]
 8005330:	f8cd a000 	str.w	sl, [sp]
 8005334:	464b      	mov	r3, r9
 8005336:	aa03      	add	r2, sp, #12
 8005338:	4621      	mov	r1, r4
 800533a:	4640      	mov	r0, r8
 800533c:	f7ff fee4 	bl	8005108 <_printf_common>
 8005340:	3001      	adds	r0, #1
 8005342:	d14a      	bne.n	80053da <_printf_i+0x1f6>
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
 8005348:	b004      	add	sp, #16
 800534a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	f043 0320 	orr.w	r3, r3, #32
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	4833      	ldr	r0, [pc, #204]	; (8005424 <_printf_i+0x240>)
 8005358:	2778      	movs	r7, #120	; 0x78
 800535a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	6829      	ldr	r1, [r5, #0]
 8005362:	061f      	lsls	r7, r3, #24
 8005364:	f851 6b04 	ldr.w	r6, [r1], #4
 8005368:	d402      	bmi.n	8005370 <_printf_i+0x18c>
 800536a:	065f      	lsls	r7, r3, #25
 800536c:	bf48      	it	mi
 800536e:	b2b6      	uxthmi	r6, r6
 8005370:	07df      	lsls	r7, r3, #31
 8005372:	bf48      	it	mi
 8005374:	f043 0320 	orrmi.w	r3, r3, #32
 8005378:	6029      	str	r1, [r5, #0]
 800537a:	bf48      	it	mi
 800537c:	6023      	strmi	r3, [r4, #0]
 800537e:	b91e      	cbnz	r6, 8005388 <_printf_i+0x1a4>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	f023 0320 	bic.w	r3, r3, #32
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	2310      	movs	r3, #16
 800538a:	e7a7      	b.n	80052dc <_printf_i+0xf8>
 800538c:	4824      	ldr	r0, [pc, #144]	; (8005420 <_printf_i+0x23c>)
 800538e:	e7e4      	b.n	800535a <_printf_i+0x176>
 8005390:	4615      	mov	r5, r2
 8005392:	e7bd      	b.n	8005310 <_printf_i+0x12c>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	6826      	ldr	r6, [r4, #0]
 8005398:	6961      	ldr	r1, [r4, #20]
 800539a:	1d18      	adds	r0, r3, #4
 800539c:	6028      	str	r0, [r5, #0]
 800539e:	0635      	lsls	r5, r6, #24
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0x1c4>
 80053a4:	6019      	str	r1, [r3, #0]
 80053a6:	e002      	b.n	80053ae <_printf_i+0x1ca>
 80053a8:	0670      	lsls	r0, r6, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0x1c0>
 80053ac:	8019      	strh	r1, [r3, #0]
 80053ae:	2300      	movs	r3, #0
 80053b0:	6123      	str	r3, [r4, #16]
 80053b2:	4615      	mov	r5, r2
 80053b4:	e7bc      	b.n	8005330 <_printf_i+0x14c>
 80053b6:	682b      	ldr	r3, [r5, #0]
 80053b8:	1d1a      	adds	r2, r3, #4
 80053ba:	602a      	str	r2, [r5, #0]
 80053bc:	681d      	ldr	r5, [r3, #0]
 80053be:	6862      	ldr	r2, [r4, #4]
 80053c0:	2100      	movs	r1, #0
 80053c2:	4628      	mov	r0, r5
 80053c4:	f7fa ff14 	bl	80001f0 <memchr>
 80053c8:	b108      	cbz	r0, 80053ce <_printf_i+0x1ea>
 80053ca:	1b40      	subs	r0, r0, r5
 80053cc:	6060      	str	r0, [r4, #4]
 80053ce:	6863      	ldr	r3, [r4, #4]
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	2300      	movs	r3, #0
 80053d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d8:	e7aa      	b.n	8005330 <_printf_i+0x14c>
 80053da:	6923      	ldr	r3, [r4, #16]
 80053dc:	462a      	mov	r2, r5
 80053de:	4649      	mov	r1, r9
 80053e0:	4640      	mov	r0, r8
 80053e2:	47d0      	blx	sl
 80053e4:	3001      	adds	r0, #1
 80053e6:	d0ad      	beq.n	8005344 <_printf_i+0x160>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	079b      	lsls	r3, r3, #30
 80053ec:	d413      	bmi.n	8005416 <_printf_i+0x232>
 80053ee:	68e0      	ldr	r0, [r4, #12]
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	4298      	cmp	r0, r3
 80053f4:	bfb8      	it	lt
 80053f6:	4618      	movlt	r0, r3
 80053f8:	e7a6      	b.n	8005348 <_printf_i+0x164>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4632      	mov	r2, r6
 80053fe:	4649      	mov	r1, r9
 8005400:	4640      	mov	r0, r8
 8005402:	47d0      	blx	sl
 8005404:	3001      	adds	r0, #1
 8005406:	d09d      	beq.n	8005344 <_printf_i+0x160>
 8005408:	3501      	adds	r5, #1
 800540a:	68e3      	ldr	r3, [r4, #12]
 800540c:	9903      	ldr	r1, [sp, #12]
 800540e:	1a5b      	subs	r3, r3, r1
 8005410:	42ab      	cmp	r3, r5
 8005412:	dcf2      	bgt.n	80053fa <_printf_i+0x216>
 8005414:	e7eb      	b.n	80053ee <_printf_i+0x20a>
 8005416:	2500      	movs	r5, #0
 8005418:	f104 0619 	add.w	r6, r4, #25
 800541c:	e7f5      	b.n	800540a <_printf_i+0x226>
 800541e:	bf00      	nop
 8005420:	08005561 	.word	0x08005561
 8005424:	08005572 	.word	0x08005572

08005428 <memmove>:
 8005428:	4288      	cmp	r0, r1
 800542a:	b510      	push	{r4, lr}
 800542c:	eb01 0402 	add.w	r4, r1, r2
 8005430:	d902      	bls.n	8005438 <memmove+0x10>
 8005432:	4284      	cmp	r4, r0
 8005434:	4623      	mov	r3, r4
 8005436:	d807      	bhi.n	8005448 <memmove+0x20>
 8005438:	1e43      	subs	r3, r0, #1
 800543a:	42a1      	cmp	r1, r4
 800543c:	d008      	beq.n	8005450 <memmove+0x28>
 800543e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005446:	e7f8      	b.n	800543a <memmove+0x12>
 8005448:	4402      	add	r2, r0
 800544a:	4601      	mov	r1, r0
 800544c:	428a      	cmp	r2, r1
 800544e:	d100      	bne.n	8005452 <memmove+0x2a>
 8005450:	bd10      	pop	{r4, pc}
 8005452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800545a:	e7f7      	b.n	800544c <memmove+0x24>

0800545c <_sbrk_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4d06      	ldr	r5, [pc, #24]	; (8005478 <_sbrk_r+0x1c>)
 8005460:	2300      	movs	r3, #0
 8005462:	4604      	mov	r4, r0
 8005464:	4608      	mov	r0, r1
 8005466:	602b      	str	r3, [r5, #0]
 8005468:	f7fb fed8 	bl	800121c <_sbrk>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_sbrk_r+0x1a>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	b103      	cbz	r3, 8005476 <_sbrk_r+0x1a>
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	2000050c 	.word	0x2000050c

0800547c <memcpy>:
 800547c:	440a      	add	r2, r1
 800547e:	4291      	cmp	r1, r2
 8005480:	f100 33ff 	add.w	r3, r0, #4294967295
 8005484:	d100      	bne.n	8005488 <memcpy+0xc>
 8005486:	4770      	bx	lr
 8005488:	b510      	push	{r4, lr}
 800548a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005492:	4291      	cmp	r1, r2
 8005494:	d1f9      	bne.n	800548a <memcpy+0xe>
 8005496:	bd10      	pop	{r4, pc}

08005498 <_realloc_r>:
 8005498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800549c:	4680      	mov	r8, r0
 800549e:	4614      	mov	r4, r2
 80054a0:	460e      	mov	r6, r1
 80054a2:	b921      	cbnz	r1, 80054ae <_realloc_r+0x16>
 80054a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a8:	4611      	mov	r1, r2
 80054aa:	f7ff bc49 	b.w	8004d40 <_malloc_r>
 80054ae:	b92a      	cbnz	r2, 80054bc <_realloc_r+0x24>
 80054b0:	f7ff fbda 	bl	8004c68 <_free_r>
 80054b4:	4625      	mov	r5, r4
 80054b6:	4628      	mov	r0, r5
 80054b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054bc:	f000 f81b 	bl	80054f6 <_malloc_usable_size_r>
 80054c0:	4284      	cmp	r4, r0
 80054c2:	4607      	mov	r7, r0
 80054c4:	d802      	bhi.n	80054cc <_realloc_r+0x34>
 80054c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054ca:	d812      	bhi.n	80054f2 <_realloc_r+0x5a>
 80054cc:	4621      	mov	r1, r4
 80054ce:	4640      	mov	r0, r8
 80054d0:	f7ff fc36 	bl	8004d40 <_malloc_r>
 80054d4:	4605      	mov	r5, r0
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d0ed      	beq.n	80054b6 <_realloc_r+0x1e>
 80054da:	42bc      	cmp	r4, r7
 80054dc:	4622      	mov	r2, r4
 80054de:	4631      	mov	r1, r6
 80054e0:	bf28      	it	cs
 80054e2:	463a      	movcs	r2, r7
 80054e4:	f7ff ffca 	bl	800547c <memcpy>
 80054e8:	4631      	mov	r1, r6
 80054ea:	4640      	mov	r0, r8
 80054ec:	f7ff fbbc 	bl	8004c68 <_free_r>
 80054f0:	e7e1      	b.n	80054b6 <_realloc_r+0x1e>
 80054f2:	4635      	mov	r5, r6
 80054f4:	e7df      	b.n	80054b6 <_realloc_r+0x1e>

080054f6 <_malloc_usable_size_r>:
 80054f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fa:	1f18      	subs	r0, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bfbc      	itt	lt
 8005500:	580b      	ldrlt	r3, [r1, r0]
 8005502:	18c0      	addlt	r0, r0, r3
 8005504:	4770      	bx	lr
	...

08005508 <_init>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	bf00      	nop
 800550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550e:	bc08      	pop	{r3}
 8005510:	469e      	mov	lr, r3
 8005512:	4770      	bx	lr

08005514 <_fini>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr
