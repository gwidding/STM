
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800a120  0800a120  0001a120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a564  0800a564  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a564  0800a564  0001a564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a56c  0800a56c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a56c  0800a56c  0001a56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a570  0800a570  0001a570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000ae0  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cbc  20000cbc  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b475  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034b2  00000000  00000000  0003b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017f8  00000000  00000000  0003eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012d6  00000000  00000000  00040370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029206  00000000  00000000  00041646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ceab  00000000  00000000  0006a84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000faf53  00000000  00000000  000876f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a8c  00000000  00000000  0018264c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0018a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a108 	.word	0x0800a108

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800a108 	.word	0x0800a108

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 8000ec4:	b5b0      	push	{r4, r5, r7, lr}
 8000ec6:	b098      	sub	sp, #96	; 0x60
 8000ec8:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <I2C_Scan+0xc0>)
 8000ecc:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eda:	6020      	str	r0, [r4, #0]
 8000edc:	3404      	adds	r4, #4
 8000ede:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000ee0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff f9d3 	bl	8000290 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	4824      	ldr	r0, [pc, #144]	; (8000f88 <I2C_Scan+0xc4>)
 8000ef8:	f005 fb69 	bl	80065ce <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000f02:	e02f      	b.n	8000f64 <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000f04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	2201      	movs	r2, #1
 8000f10:	481e      	ldr	r0, [pc, #120]	; (8000f8c <I2C_Scan+0xc8>)
 8000f12:	f002 fff1 	bl	8003ef8 <HAL_I2C_IsDeviceReady>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 8000f1c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d113      	bne.n	8000f4c <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8000f24:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f28:	1d38      	adds	r0, r7, #4
 8000f2a:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <I2C_Scan+0xcc>)
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	f006 ff5b 	bl	8007de8 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff f9ab 	bl	8000290 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	1d39      	adds	r1, r7, #4
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <I2C_Scan+0xc4>)
 8000f46:	f005 fb42 	bl	80065ce <HAL_UART_Transmit>
 8000f4a:	e006      	b.n	8000f5a <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	2201      	movs	r2, #1
 8000f52:	4910      	ldr	r1, [pc, #64]	; (8000f94 <I2C_Scan+0xd0>)
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <I2C_Scan+0xc4>)
 8000f56:	f005 fb3a 	bl	80065ce <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000f5a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f5e:	3301      	adds	r3, #1
 8000f60:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000f64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f68:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6a:	d9cb      	bls.n	8000f04 <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	2202      	movs	r2, #2
 8000f72:	4909      	ldr	r1, [pc, #36]	; (8000f98 <I2C_Scan+0xd4>)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <I2C_Scan+0xc4>)
 8000f76:	f005 fb2a 	bl	80065ce <HAL_UART_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3760      	adds	r7, #96	; 0x60
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bdb0      	pop	{r4, r5, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	0800a130 	.word	0x0800a130
 8000f88:	20000580 	.word	0x20000580
 8000f8c:	2000047c 	.word	0x2000047c
 8000f90:	0800a120 	.word	0x0800a120
 8000f94:	0800a128 	.word	0x0800a128
 8000f98:	0800a12c 	.word	0x0800a12c

08000f9c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	71bb      	strb	r3, [r7, #6]
 8000faa:	4613      	mov	r3, r2
 8000fac:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4822      	ldr	r0, [pc, #136]	; (8001044 <LCD_SendInternal+0xa8>)
 8000fba:	f002 ff9d 	bl	8003ef8 <HAL_I2C_IsDeviceReady>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d000      	beq.n	8000fca <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000fc8:	e7f1      	b.n	8000fae <LCD_SendInternal+0x12>
            break;
 8000fca:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	f023 030f 	bic.w	r3, r3, #15
 8000fd2:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000fda:	7bba      	ldrb	r2, [r7, #14]
 8000fdc:	797b      	ldrb	r3, [r7, #5]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000fea:	7bba      	ldrb	r2, [r7, #14]
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000ffa:	7b7a      	ldrb	r2, [r7, #13]
 8000ffc:	797b      	ldrb	r3, [r7, #5]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	f043 030c 	orr.w	r3, r3, #12
 8001006:	b2db      	uxtb	r3, r3
 8001008:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 800100a:	7b7a      	ldrb	r2, [r7, #13]
 800100c:	797b      	ldrb	r3, [r7, #5]
 800100e:	4313      	orrs	r3, r2
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	b2db      	uxtb	r3, r3
 8001018:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	b299      	uxth	r1, r3
 800101e:	f107 0208 	add.w	r2, r7, #8
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2304      	movs	r3, #4
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <LCD_SendInternal+0xa8>)
 800102c:	f002 fe66 	bl	8003cfc <HAL_I2C_Master_Transmit>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8001034:	2005      	movs	r0, #5
 8001036:	f001 fbff 	bl	8002838 <HAL_Delay>
    return res;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000047c 	.word	0x2000047c

08001048 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8001058:	79b9      	ldrb	r1, [r7, #6]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2200      	movs	r2, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff9c 	bl	8000f9c <LCD_SendInternal>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 800107c:	79b9      	ldrb	r1, [r7, #6]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2201      	movs	r2, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff8a 	bl	8000f9c <LCD_SendInternal>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2130      	movs	r1, #48	; 0x30
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffd2 	bl	8001048 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2102      	movs	r1, #2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffcd 	bl	8001048 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	210c      	movs	r1, #12
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ffc8 	bl	8001048 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ffc3 	bl	8001048 <LCD_SendCommand>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	6039      	str	r1, [r7, #0]
 80010d4:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80010d6:	e009      	b.n	80010ec <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffc3 	bl	800106c <LCD_SendData>
        str++;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	603b      	str	r3, [r7, #0]
    while(*str) {
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f1      	bne.n	80010d8 <LCD_SendString+0xe>
    }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <init>:

void init() {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    I2C_Scan();
 8001104:	f7ff fede 	bl	8000ec4 <I2C_Scan>
    LCD_Init(LCD_ADDR);
 8001108:	204e      	movs	r0, #78	; 0x4e
 800110a:	f7ff ffc1 	bl	8001090 <LCD_Init>

    // set address to 0x00
    LCD_SendCommand(LCD_ADDR, 0b10000000);
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	204e      	movs	r0, #78	; 0x4e
 8001112:	f7ff ff99 	bl	8001048 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8001116:	4907      	ldr	r1, [pc, #28]	; (8001134 <init+0x34>)
 8001118:	204e      	movs	r0, #78	; 0x4e
 800111a:	f7ff ffd6 	bl	80010ca <LCD_SendString>

    // set address to 0x40
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 800111e:	21c0      	movs	r1, #192	; 0xc0
 8001120:	204e      	movs	r0, #78	; 0x4e
 8001122:	f7ff ff91 	bl	8001048 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "  over I2C bus");
 8001126:	4904      	ldr	r1, [pc, #16]	; (8001138 <init+0x38>)
 8001128:	204e      	movs	r0, #78	; 0x4e
 800112a:	f7ff ffce 	bl	80010ca <LCD_SendString>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	0800a148 	.word	0x0800a148
 8001138:	0800a158 	.word	0x0800a158

0800113c <_write>:
static void MX_TIM2_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	b29a      	uxth	r2, r3
 800114c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <_write+0x28>)
 8001154:	f005 fa3b 	bl	80065ce <HAL_UART_Transmit>

	return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000580 	.word	0x20000580

08001168 <get_time>:
int display_flag = 0;

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
void get_time(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af02      	add	r7, sp, #8

	HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BIN);
 800116e:	2200      	movs	r2, #0
 8001170:	491a      	ldr	r1, [pc, #104]	; (80011dc <get_time+0x74>)
 8001172:	481b      	ldr	r0, [pc, #108]	; (80011e0 <get_time+0x78>)
 8001174:	f004 fb01 	bl	800577a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BIN);
 8001178:	2200      	movs	r2, #0
 800117a:	491a      	ldr	r1, [pc, #104]	; (80011e4 <get_time+0x7c>)
 800117c:	4818      	ldr	r0, [pc, #96]	; (80011e0 <get_time+0x78>)
 800117e:	f004 fbe4 	bl	800594a <HAL_RTC_GetDate>

	sprintf((char*)showTime, "%s %02d : %02d : %02d      ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <get_time+0x74>)
 8001184:	78db      	ldrb	r3, [r3, #3]
 8001186:	461a      	mov	r2, r3
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <get_time+0x80>)
 8001190:	441a      	add	r2, r3
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <get_time+0x74>)
 8001194:	f993 3000 	ldrsb.w	r3, [r3]
 8001198:	4618      	mov	r0, r3
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <get_time+0x74>)
 800119c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <get_time+0x74>)
 80011a4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	9100      	str	r1, [sp, #0]
 80011ac:	4603      	mov	r3, r0
 80011ae:	490f      	ldr	r1, [pc, #60]	; (80011ec <get_time+0x84>)
 80011b0:	480f      	ldr	r0, [pc, #60]	; (80011f0 <get_time+0x88>)
 80011b2:	f006 fe4d 	bl	8007e50 <siprintf>
	sprintf((char *)showDate, "%04d-%02d-%02d         ", 2000 + sDate.Year, sDate.Month, sDate.Date);
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <get_time+0x7c>)
 80011b8:	78db      	ldrb	r3, [r3, #3]
 80011ba:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <get_time+0x7c>)
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <get_time+0x7c>)
 80011c6:	789b      	ldrb	r3, [r3, #2]
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	460b      	mov	r3, r1
 80011cc:	4909      	ldr	r1, [pc, #36]	; (80011f4 <get_time+0x8c>)
 80011ce:	480a      	ldr	r0, [pc, #40]	; (80011f8 <get_time+0x90>)
 80011d0:	f006 fe3e 	bl	8007e50 <siprintf>
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000b14 	.word	0x20000b14
 80011e0:	200004d0 	.word	0x200004d0
 80011e4:	20000b28 	.word	0x20000b28
 80011e8:	20000000 	.word	0x20000000
 80011ec:	0800a168 	.word	0x0800a168
 80011f0:	20000ad0 	.word	0x20000ad0
 80011f4:	0800a184 	.word	0x0800a184
 80011f8:	20000af0 	.word	0x20000af0

080011fc <delay_us>:

float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void delay_us(uint16_t time) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);              // ???��머�?? 0?���??????????????? 초기?��
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <delay_us+0x30>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<time);   // ?��?��?�� ?��간까�??????????????? ??�???????????????
 800120e:	bf00      	nop
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <delay_us+0x30>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3f9      	bcc.n	8001210 <delay_us+0x14>
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200004f0 	.word	0x200004f0

08001230 <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f002 fa2a 	bl	80036b8 <HAL_GPIO_Init>
}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001290:	2301      	movs	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f002 fa0c 	bl	80036b8 <HAL_GPIO_Init>
}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <DHT11_Start>:
void DHT11_Start (void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_GPIO_Port, DHT11_Pin);  // set the pin as output
 80012ac:	2108      	movs	r1, #8
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <DHT11_Start+0x2c>)
 80012b0:	f7ff ffbe 	bl	8001230 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 80012b4:	2200      	movs	r2, #0
 80012b6:	2108      	movs	r1, #8
 80012b8:	4806      	ldr	r0, [pc, #24]	; (80012d4 <DHT11_Start+0x2c>)
 80012ba:	f002 fbc1 	bl	8003a40 <HAL_GPIO_WritePin>
	delay_us(18000);   // wait for 18ms
 80012be:	f244 6050 	movw	r0, #18000	; 0x4650
 80012c2:	f7ff ff9b 	bl	80011fc <delay_us>
	Set_Pin_Input(DHT11_GPIO_Port, DHT11_Pin);    // set as input
 80012c6:	2108      	movs	r1, #8
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <DHT11_Start+0x2c>)
 80012ca:	f7ff ffcf 	bl	800126c <Set_Pin_Input>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020000 	.word	0x40020000

080012d8 <DHT11_Check_Response>:
uint8_t DHT11_Check_Response (void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 80012e2:	2028      	movs	r0, #40	; 0x28
 80012e4:	f7ff ff8a 	bl	80011fc <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))
 80012e8:	2108      	movs	r1, #8
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <DHT11_Check_Response+0x58>)
 80012ec:	f002 fb90 	bl	8003a10 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10e      	bne.n	8001314 <DHT11_Check_Response+0x3c>
	{
		delay_us (80);
 80012f6:	2050      	movs	r0, #80	; 0x50
 80012f8:	f7ff ff80 	bl	80011fc <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin))) Response = 1;
 80012fc:	2108      	movs	r1, #8
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <DHT11_Check_Response+0x58>)
 8001300:	f002 fb86 	bl	8003a10 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <DHT11_Check_Response+0x38>
 800130a:	2301      	movs	r3, #1
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	e001      	b.n	8001314 <DHT11_Check_Response+0x3c>
		else Response = -1;
 8001310:	23ff      	movs	r3, #255	; 0xff
 8001312:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go low
 8001314:	bf00      	nop
 8001316:	2108      	movs	r1, #8
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <DHT11_Check_Response+0x58>)
 800131a:	f002 fb79 	bl	8003a10 <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f8      	bne.n	8001316 <DHT11_Check_Response+0x3e>

	return Response;
 8001324:	79fb      	ldrb	r3, [r7, #7]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40020000 	.word	0x40020000

08001334 <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800133a:	2300      	movs	r3, #0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	e037      	b.n	80013b0 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go high
 8001340:	bf00      	nop
 8001342:	2108      	movs	r1, #8
 8001344:	481e      	ldr	r0, [pc, #120]	; (80013c0 <DHT11_Read+0x8c>)
 8001346:	f002 fb63 	bl	8003a10 <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f8      	beq.n	8001342 <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 8001350:	2028      	movs	r0, #40	; 0x28
 8001352:	f7ff ff53 	bl	80011fc <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))   // if the pin is low
 8001356:	2108      	movs	r1, #8
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <DHT11_Read+0x8c>)
 800135a:	f002 fb59 	bl	8003a10 <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10e      	bne.n	8001382 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2201      	movs	r2, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	b25b      	sxtb	r3, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	b25a      	sxtb	r2, r3
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	4013      	ands	r3, r2
 800137c:	b25b      	sxtb	r3, r3
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	e00b      	b.n	800139a <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	f1c3 0307 	rsb	r3, r3, #7
 8001388:	2201      	movs	r2, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	b25a      	sxtb	r2, r3
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));  // wait for the pin to go low
 800139a:	bf00      	nop
 800139c:	2108      	movs	r1, #8
 800139e:	4808      	ldr	r0, [pc, #32]	; (80013c0 <DHT11_Read+0x8c>)
 80013a0:	f002 fb36 	bl	8003a10 <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f8      	bne.n	800139c <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	3301      	adds	r3, #1
 80013ae:	71bb      	strb	r3, [r7, #6]
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	d9c4      	bls.n	8001340 <DHT11_Read+0xc>
	}
	return i;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40020000 	.word	0x40020000

080013c4 <setModeCheck.0>:
  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start_IT(&htim2);

  init();

	void setModeCheck(int n) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	f8c7 c000 	str.w	ip, [r7]
		if (n == 1) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d110      	bne.n	80013f8 <setModeCheck.0+0x34>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2101      	movs	r1, #1
 80013da:	4820      	ldr	r0, [pc, #128]	; (800145c <setModeCheck.0+0x98>)
 80013dc:	f002 fb30 	bl	8003a40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	481d      	ldr	r0, [pc, #116]	; (800145c <setModeCheck.0+0x98>)
 80013e6:	f002 fb2b 	bl	8003a40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f0:	481a      	ldr	r0, [pc, #104]	; (800145c <setModeCheck.0+0x98>)
 80013f2:	f002 fb25 	bl	8003a40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
		}
		else {
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
		}
	}
 80013f6:	e02d      	b.n	8001454 <setModeCheck.0+0x90>
		else if (n == 2) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d110      	bne.n	8001420 <setModeCheck.0+0x5c>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2101      	movs	r1, #1
 8001402:	4816      	ldr	r0, [pc, #88]	; (800145c <setModeCheck.0+0x98>)
 8001404:	f002 fb1c 	bl	8003a40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 8001408:	2201      	movs	r2, #1
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <setModeCheck.0+0x98>)
 800140e:	f002 fb17 	bl	8003a40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <setModeCheck.0+0x98>)
 800141a:	f002 fb11 	bl	8003a40 <HAL_GPIO_WritePin>
	}
 800141e:	e019      	b.n	8001454 <setModeCheck.0+0x90>
		else if (n == 3) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d110      	bne.n	8001448 <setModeCheck.0+0x84>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <setModeCheck.0+0x98>)
 800142c:	f002 fb08 	bl	8003a40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <setModeCheck.0+0x98>)
 8001436:	f002 fb03 	bl	8003a40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <setModeCheck.0+0x98>)
 8001442:	f002 fafd 	bl	8003a40 <HAL_GPIO_WritePin>
	}
 8001446:	e005      	b.n	8001454 <setModeCheck.0+0x90>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <setModeCheck.0+0x98>)
 8001450:	f002 faf6 	bl	8003a40 <HAL_GPIO_WritePin>
	}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40020400 	.word	0x40020400

08001460 <main>:
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af02      	add	r7, sp, #8
int main(void)
 8001466:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Init();
 800146c:	f001 f972 	bl	8002754 <HAL_Init>
  SystemClock_Config();
 8001470:	f000 f9f0 	bl	8001854 <SystemClock_Config>
  MX_GPIO_Init();
 8001474:	f000 fcc4 	bl	8001e00 <MX_GPIO_Init>
  MX_ETH_Init();
 8001478:	f000 fae2 	bl	8001a40 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800147c:	f000 fc68 	bl	8001d50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001480:	f000 fc90 	bl	8001da4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001484:	f000 fa5e 	bl	8001944 <MX_ADC1_Init>
  MX_DAC_Init();
 8001488:	f000 fab0 	bl	80019ec <MX_DAC_Init>
  MX_RTC_Init();
 800148c:	f000 fb66 	bl	8001b5c <MX_RTC_Init>
  MX_TIM1_Init();
 8001490:	f000 fbc0 	bl	8001c14 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001494:	f000 fb22 	bl	8001adc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001498:	f000 fc0c 	bl	8001cb4 <MX_TIM2_Init>
  MX_NVIC_Init();
 800149c:	f000 fa46 	bl	800192c <MX_NVIC_Init>
  HAL_TIM_Base_Start(&htim1);
 80014a0:	48ab      	ldr	r0, [pc, #684]	; (8001750 <main+0x2f0>)
 80014a2:	f004 fbad 	bl	8005c00 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80014a6:	48ab      	ldr	r0, [pc, #684]	; (8001754 <main+0x2f4>)
 80014a8:	f004 fc12 	bl	8005cd0 <HAL_TIM_Base_Start_IT>
  init();
 80014ac:	f7ff fe28 	bl	8001100 <init>
//  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  printf("Hello World !!\r\n");
 80014b0:	48a9      	ldr	r0, [pc, #676]	; (8001758 <main+0x2f8>)
 80014b2:	f006 fc91 	bl	8007dd8 <puts>

  while(1)
  {
	  DHT11_Start();
 80014b6:	f7ff fef7 	bl	80012a8 <DHT11_Start>
	  Presence = DHT11_Check_Response();
 80014ba:	f7ff ff0d 	bl	80012d8 <DHT11_Check_Response>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4ba6      	ldr	r3, [pc, #664]	; (800175c <main+0x2fc>)
 80014c4:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 80014c6:	f7ff ff35 	bl	8001334 <DHT11_Read>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4ba4      	ldr	r3, [pc, #656]	; (8001760 <main+0x300>)
 80014d0:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read ();
 80014d2:	f7ff ff2f 	bl	8001334 <DHT11_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4ba2      	ldr	r3, [pc, #648]	; (8001764 <main+0x304>)
 80014dc:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 80014de:	f7ff ff29 	bl	8001334 <DHT11_Read>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4ba0      	ldr	r3, [pc, #640]	; (8001768 <main+0x308>)
 80014e8:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 80014ea:	f7ff ff23 	bl	8001334 <DHT11_Read>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b9e      	ldr	r3, [pc, #632]	; (800176c <main+0x30c>)
 80014f4:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 80014f6:	f7ff ff1d 	bl	8001334 <DHT11_Read>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b9c      	ldr	r3, [pc, #624]	; (8001770 <main+0x310>)
 8001500:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 8001502:	4b99      	ldr	r3, [pc, #612]	; (8001768 <main+0x308>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b9a      	ldr	r3, [pc, #616]	; (8001774 <main+0x314>)
 800150a:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 800150c:	4b94      	ldr	r3, [pc, #592]	; (8001760 <main+0x300>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b99      	ldr	r3, [pc, #612]	; (8001778 <main+0x318>)
 8001514:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 8001516:	4b97      	ldr	r3, [pc, #604]	; (8001774 <main+0x314>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001522:	4b96      	ldr	r3, [pc, #600]	; (800177c <main+0x31c>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 8001528:	4b93      	ldr	r3, [pc, #588]	; (8001778 <main+0x318>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001534:	4b92      	ldr	r3, [pc, #584]	; (8001780 <main+0x320>)
 8001536:	edc3 7a00 	vstr	s15, [r3]

	  char buf[30];
	  sprintf(buf, " %3.1f    %2.1f   ", Temperature, Humidity);
 800153a:	4b90      	ldr	r3, [pc, #576]	; (800177c <main+0x31c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f812 	bl	8000568 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b8d      	ldr	r3, [pc, #564]	; (8001780 <main+0x320>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f80b 	bl	8000568 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	1d38      	adds	r0, r7, #4
 8001558:	e9cd 2300 	strd	r2, r3, [sp]
 800155c:	4622      	mov	r2, r4
 800155e:	462b      	mov	r3, r5
 8001560:	4988      	ldr	r1, [pc, #544]	; (8001784 <main+0x324>)
 8001562:	f006 fc75 	bl	8007e50 <siprintf>

	  printf(buf);
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4618      	mov	r0, r3
 800156a:	f006 fbcf 	bl	8007d0c <iprintf>
	  printf("\r\n");
 800156e:	4886      	ldr	r0, [pc, #536]	; (8001788 <main+0x328>)
 8001570:	f006 fc32 	bl	8007dd8 <puts>
	  HAL_Delay(500);
 8001574:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001578:	f001 f95e 	bl	8002838 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001582:	4882      	ldr	r0, [pc, #520]	; (800178c <main+0x32c>)
 8001584:	f002 fa5c 	bl	8003a40 <HAL_GPIO_WritePin>
	  delay_us(10);
 8001588:	200a      	movs	r0, #10
 800158a:	f7ff fe37 	bl	80011fc <delay_us>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f244 0181 	movw	r1, #16513	; 0x4081
 8001594:	487d      	ldr	r0, [pc, #500]	; (800178c <main+0x32c>)
 8001596:	f002 fa53 	bl	8003a40 <HAL_GPIO_WritePin>
	  delay_us(10);
 800159a:	200a      	movs	r0, #10
 800159c:	f7ff fe2e 	bl	80011fc <delay_us>

	 get_time();
 80015a0:	f7ff fde2 	bl	8001168 <get_time>
	  setModeCheck(setmode);
 80015a4:	4b7a      	ldr	r3, [pc, #488]	; (8001790 <main+0x330>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015ac:	4694      	mov	ip, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff08 	bl	80013c4 <setModeCheck.0>


	  	if (HAL_GPIO_ReadPin(GPIOF, setBtn_Pin) == 0) {
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	4877      	ldr	r0, [pc, #476]	; (8001794 <main+0x334>)
 80015b8:	f002 fa2a 	bl	8003a10 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d104      	bne.n	80015cc <main+0x16c>
	  		current_tick_1 = HAL_GetTick();
 80015c2:	f001 f92d 	bl	8002820 <HAL_GetTick>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a73      	ldr	r2, [pc, #460]	; (8001798 <main+0x338>)
 80015ca:	6013      	str	r3, [r2, #0]
	  	}
	  	if (HAL_GPIO_ReadPin(GPIOF, upBtn_Pin) == 0) {
 80015cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d0:	4870      	ldr	r0, [pc, #448]	; (8001794 <main+0x334>)
 80015d2:	f002 fa1d 	bl	8003a10 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d104      	bne.n	80015e6 <main+0x186>
	  		current_tick_2 = HAL_GetTick();
 80015dc:	f001 f920 	bl	8002820 <HAL_GetTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a6e      	ldr	r2, [pc, #440]	; (800179c <main+0x33c>)
 80015e4:	6013      	str	r3, [r2, #0]
	  	}
	  	if (HAL_GPIO_ReadPin(GPIOF, downBtn_Pin) == 0) {
 80015e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ea:	486a      	ldr	r0, [pc, #424]	; (8001794 <main+0x334>)
 80015ec:	f002 fa10 	bl	8003a10 <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d104      	bne.n	8001600 <main+0x1a0>
	  		current_tick_3 = HAL_GetTick();
 80015f6:	f001 f913 	bl	8002820 <HAL_GetTick>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a68      	ldr	r2, [pc, #416]	; (80017a0 <main+0x340>)
 80015fe:	6013      	str	r3, [r2, #0]
	  	}

	  	if (HAL_GPIO_ReadPin(GPIOF, setBtn_Pin) == 0
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	4864      	ldr	r0, [pc, #400]	; (8001794 <main+0x334>)
 8001604:	f002 fa04 	bl	8003a10 <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <main+0x1ce>
	  			) {
	  		setmode++;
 800160e:	4b60      	ldr	r3, [pc, #384]	; (8001790 <main+0x330>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	4a5e      	ldr	r2, [pc, #376]	; (8001790 <main+0x330>)
 8001616:	6013      	str	r3, [r2, #0]
	  		if (setmode == 4)
 8001618:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <main+0x330>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d102      	bne.n	8001626 <main+0x1c6>
	  			setmode = 0;
 8001620:	4b5b      	ldr	r3, [pc, #364]	; (8001790 <main+0x330>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
	  		old_tick_1 = current_tick_1;
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <main+0x338>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5e      	ldr	r2, [pc, #376]	; (80017a4 <main+0x344>)
 800162c:	6013      	str	r3, [r2, #0]
	  	}

	  	if (HAL_GPIO_ReadPin(GPIOF, upBtn_Pin) == 0 && setmode > 0) {
 800162e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001632:	4858      	ldr	r0, [pc, #352]	; (8001794 <main+0x334>)
 8001634:	f002 f9ec 	bl	8003a10 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d14b      	bne.n	80016d6 <main+0x276>
 800163e:	4b54      	ldr	r3, [pc, #336]	; (8001790 <main+0x330>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	dd47      	ble.n	80016d6 <main+0x276>
	  		if (setmode == 1) sTime.Hours++;
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <main+0x330>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d108      	bne.n	8001660 <main+0x200>
 800164e:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <main+0x348>)
 8001650:	f993 3000 	ldrsb.w	r3, [r3]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3301      	adds	r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	b25a      	sxtb	r2, r3
 800165c:	4b52      	ldr	r3, [pc, #328]	; (80017a8 <main+0x348>)
 800165e:	701a      	strb	r2, [r3, #0]
	  		if (setmode == 2) sTime.Minutes++;
 8001660:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <main+0x330>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d108      	bne.n	800167a <main+0x21a>
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <main+0x348>)
 800166a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3301      	adds	r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b25a      	sxtb	r2, r3
 8001676:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <main+0x348>)
 8001678:	705a      	strb	r2, [r3, #1]
	  		if (setmode == 3) sTime.Seconds++;
 800167a:	4b45      	ldr	r3, [pc, #276]	; (8001790 <main+0x330>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d108      	bne.n	8001694 <main+0x234>
 8001682:	4b49      	ldr	r3, [pc, #292]	; (80017a8 <main+0x348>)
 8001684:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	3301      	adds	r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b25a      	sxtb	r2, r3
 8001690:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <main+0x348>)
 8001692:	709a      	strb	r2, [r3, #2]
	  		if (sTime.Hours > 12) sTime.Hours = 0;
 8001694:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <main+0x348>)
 8001696:	f993 3000 	ldrsb.w	r3, [r3]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	dd02      	ble.n	80016a4 <main+0x244>
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <main+0x348>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
	  		if (sTime.Minutes > 59) sTime.Minutes = 0;
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <main+0x348>)
 80016a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80016aa:	2b3b      	cmp	r3, #59	; 0x3b
 80016ac:	dd02      	ble.n	80016b4 <main+0x254>
 80016ae:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <main+0x348>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	705a      	strb	r2, [r3, #1]
	  		if (sTime.Seconds > 59) sTime.Seconds = 0;
 80016b4:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <main+0x348>)
 80016b6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80016ba:	2b3b      	cmp	r3, #59	; 0x3b
 80016bc:	dd02      	ble.n	80016c4 <main+0x264>
 80016be:	4b3a      	ldr	r3, [pc, #232]	; (80017a8 <main+0x348>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	709a      	strb	r2, [r3, #2]

	  		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80016c4:	2200      	movs	r2, #0
 80016c6:	4938      	ldr	r1, [pc, #224]	; (80017a8 <main+0x348>)
 80016c8:	4838      	ldr	r0, [pc, #224]	; (80017ac <main+0x34c>)
 80016ca:	f003 ffb3 	bl	8005634 <HAL_RTC_SetTime>
	  		old_tick_2 = current_tick_2;
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <main+0x33c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a37      	ldr	r2, [pc, #220]	; (80017b0 <main+0x350>)
 80016d4:	6013      	str	r3, [r2, #0]
	  	} if (HAL_GPIO_ReadPin(GPIOF, downBtn_Pin) == 0 && setmode > 0) {
 80016d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016da:	482e      	ldr	r0, [pc, #184]	; (8001794 <main+0x334>)
 80016dc:	f002 f998 	bl	8003a10 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d17f      	bne.n	80017e6 <main+0x386>
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <main+0x330>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	dd7b      	ble.n	80017e6 <main+0x386>
	  		if (setmode == 1) sTime.Hours--;
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <main+0x330>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <main+0x2a8>
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <main+0x348>)
 80016f8:	f993 3000 	ldrsb.w	r3, [r3]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	3b01      	subs	r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	b25a      	sxtb	r2, r3
 8001704:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <main+0x348>)
 8001706:	701a      	strb	r2, [r3, #0]
	  		if (setmode == 2) sTime.Minutes--;
 8001708:	4b21      	ldr	r3, [pc, #132]	; (8001790 <main+0x330>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d108      	bne.n	8001722 <main+0x2c2>
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <main+0x348>)
 8001712:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	b25a      	sxtb	r2, r3
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <main+0x348>)
 8001720:	705a      	strb	r2, [r3, #1]
	  		if (setmode == 3) sTime.Seconds--;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <main+0x330>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d108      	bne.n	800173c <main+0x2dc>
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <main+0x348>)
 800172c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	b25a      	sxtb	r2, r3
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <main+0x348>)
 800173a:	709a      	strb	r2, [r3, #2]
	  		if (sTime.Hours < 0) sTime.Hours = 12;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <main+0x348>)
 800173e:	f993 3000 	ldrsb.w	r3, [r3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	da36      	bge.n	80017b4 <main+0x354>
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <main+0x348>)
 8001748:	220c      	movs	r2, #12
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e032      	b.n	80017b4 <main+0x354>
 800174e:	bf00      	nop
 8001750:	200004f0 	.word	0x200004f0
 8001754:	20000538 	.word	0x20000538
 8001758:	0800a19c 	.word	0x0800a19c
 800175c:	20000b40 	.word	0x20000b40
 8001760:	20000b2c 	.word	0x20000b2c
 8001764:	20000b2d 	.word	0x20000b2d
 8001768:	20000b2e 	.word	0x20000b2e
 800176c:	20000b2f 	.word	0x20000b2f
 8001770:	20000b30 	.word	0x20000b30
 8001774:	20000b34 	.word	0x20000b34
 8001778:	20000b32 	.word	0x20000b32
 800177c:	20000b38 	.word	0x20000b38
 8001780:	20000b3c 	.word	0x20000b3c
 8001784:	0800a1ac 	.word	0x0800a1ac
 8001788:	0800a1c0 	.word	0x0800a1c0
 800178c:	40020400 	.word	0x40020400
 8001790:	20000b44 	.word	0x20000b44
 8001794:	40021400 	.word	0x40021400
 8001798:	20000b48 	.word	0x20000b48
 800179c:	20000b4c 	.word	0x20000b4c
 80017a0:	20000b50 	.word	0x20000b50
 80017a4:	20000b54 	.word	0x20000b54
 80017a8:	20000b14 	.word	0x20000b14
 80017ac:	200004d0 	.word	0x200004d0
 80017b0:	20000b58 	.word	0x20000b58
	  		if (sTime.Minutes < 0) sTime.Minutes = 59;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <main+0x3d4>)
 80017b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da02      	bge.n	80017c4 <main+0x364>
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <main+0x3d4>)
 80017c0:	223b      	movs	r2, #59	; 0x3b
 80017c2:	705a      	strb	r2, [r3, #1]
	  		if (sTime.Seconds < 0) sTime.Seconds = 59;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <main+0x3d4>)
 80017c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da02      	bge.n	80017d4 <main+0x374>
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <main+0x3d4>)
 80017d0:	223b      	movs	r2, #59	; 0x3b
 80017d2:	709a      	strb	r2, [r3, #2]
	  		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80017d4:	2200      	movs	r2, #0
 80017d6:	4917      	ldr	r1, [pc, #92]	; (8001834 <main+0x3d4>)
 80017d8:	4817      	ldr	r0, [pc, #92]	; (8001838 <main+0x3d8>)
 80017da:	f003 ff2b 	bl	8005634 <HAL_RTC_SetTime>
	  		old_tick_3 = current_tick_3;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <main+0x3dc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <main+0x3e0>)
 80017e4:	6013      	str	r3, [r2, #0]
	  	}



	  if (display_flag == 1) {
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <main+0x3e4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d110      	bne.n	8001810 <main+0x3b0>
		    LCD_SendCommand(LCD_ADDR, 0b10000000);
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	204e      	movs	r0, #78	; 0x4e
 80017f2:	f7ff fc29 	bl	8001048 <LCD_SendCommand>
		    LCD_SendString(LCD_ADDR, showDate);
 80017f6:	4914      	ldr	r1, [pc, #80]	; (8001848 <main+0x3e8>)
 80017f8:	204e      	movs	r0, #78	; 0x4e
 80017fa:	f7ff fc66 	bl	80010ca <LCD_SendString>
		    LCD_SendCommand(LCD_ADDR, 0b11000000);
 80017fe:	21c0      	movs	r1, #192	; 0xc0
 8001800:	204e      	movs	r0, #78	; 0x4e
 8001802:	f7ff fc21 	bl	8001048 <LCD_SendCommand>
		    LCD_SendString(LCD_ADDR, showTime);
 8001806:	4911      	ldr	r1, [pc, #68]	; (800184c <main+0x3ec>)
 8001808:	204e      	movs	r0, #78	; 0x4e
 800180a:	f7ff fc5e 	bl	80010ca <LCD_SendString>
 800180e:	e652      	b.n	80014b6 <main+0x56>
	  }
	  else {
		    LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	204e      	movs	r0, #78	; 0x4e
 8001814:	f7ff fc18 	bl	8001048 <LCD_SendCommand>
		    LCD_SendString(LCD_ADDR, "Temper   Humid       ");
 8001818:	490d      	ldr	r1, [pc, #52]	; (8001850 <main+0x3f0>)
 800181a:	204e      	movs	r0, #78	; 0x4e
 800181c:	f7ff fc55 	bl	80010ca <LCD_SendString>
		    LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001820:	21c0      	movs	r1, #192	; 0xc0
 8001822:	204e      	movs	r0, #78	; 0x4e
 8001824:	f7ff fc10 	bl	8001048 <LCD_SendCommand>
		    LCD_SendString(LCD_ADDR, buf);
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	204e      	movs	r0, #78	; 0x4e
 800182e:	f7ff fc4c 	bl	80010ca <LCD_SendString>
  {
 8001832:	e640      	b.n	80014b6 <main+0x56>
 8001834:	20000b14 	.word	0x20000b14
 8001838:	200004d0 	.word	0x200004d0
 800183c:	20000b50 	.word	0x20000b50
 8001840:	20000b5c 	.word	0x20000b5c
 8001844:	20000b10 	.word	0x20000b10
 8001848:	20000af0 	.word	0x20000af0
 800184c:	20000ad0 	.word	0x20000ad0
 8001850:	0800a1c4 	.word	0x0800a1c4

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	; 0x50
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	2230      	movs	r2, #48	; 0x30
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f006 fbec 	bl	8008040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	4b29      	ldr	r3, [pc, #164]	; (8001924 <SystemClock_Config+0xd0>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a28      	ldr	r2, [pc, #160]	; (8001924 <SystemClock_Config+0xd0>)
 8001882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <SystemClock_Config+0xd0>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <SystemClock_Config+0xd4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a22      	ldr	r2, [pc, #136]	; (8001928 <SystemClock_Config+0xd4>)
 800189e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <SystemClock_Config+0xd4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80018b0:	2305      	movs	r3, #5
 80018b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018ba:	2301      	movs	r3, #1
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018be:	2302      	movs	r3, #2
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c8:	2304      	movs	r3, #4
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018cc:	23a8      	movs	r3, #168	; 0xa8
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018d4:	2307      	movs	r3, #7
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	f107 0320 	add.w	r3, r7, #32
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 ffdb 	bl	8004898 <HAL_RCC_OscConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018e8:	f000 fb76 	bl	8001fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ec:	230f      	movs	r3, #15
 80018ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f0:	2302      	movs	r3, #2
 80018f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2105      	movs	r1, #5
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fa3c 	bl	8004d88 <HAL_RCC_ClockConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001916:	f000 fb5f 	bl	8001fd8 <Error_Handler>
  }
}
 800191a:	bf00      	nop
 800191c:	3750      	adds	r7, #80	; 0x50
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000

0800192c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	201c      	movs	r0, #28
 8001936:	f001 faf0 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193a:	201c      	movs	r0, #28
 800193c:	f001 fb09 	bl	8002f52 <HAL_NVIC_EnableIRQ>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800194a:	463b      	mov	r3, r7
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <MX_ADC1_Init+0x98>)
 8001958:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <MX_ADC1_Init+0x9c>)
 800195a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <MX_ADC1_Init+0x98>)
 800195e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001962:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_ADC1_Init+0x98>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MX_ADC1_Init+0x98>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_ADC1_Init+0x98>)
 8001972:	2200      	movs	r2, #0
 8001974:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <MX_ADC1_Init+0x98>)
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_ADC1_Init+0x98>)
 8001980:	2200      	movs	r2, #0
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_ADC1_Init+0x98>)
 8001986:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <MX_ADC1_Init+0xa0>)
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_ADC1_Init+0x98>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <MX_ADC1_Init+0x98>)
 8001992:	2201      	movs	r2, #1
 8001994:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_ADC1_Init+0x98>)
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_ADC1_Init+0x98>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <MX_ADC1_Init+0x98>)
 80019a6:	f000 ff6b 	bl	8002880 <HAL_ADC_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019b0:	f000 fb12 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_ADC1_Init+0xa4>)
 80019b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c0:	463b      	mov	r3, r7
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_ADC1_Init+0x98>)
 80019c6:	f000 ff9f 	bl	8002908 <HAL_ADC_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019d0:	f000 fb02 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000370 	.word	0x20000370
 80019e0:	40012000 	.word	0x40012000
 80019e4:	0f000001 	.word	0x0f000001
 80019e8:	10000012 	.word	0x10000012

080019ec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_DAC_Init+0x4c>)
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <MX_DAC_Init+0x50>)
 80019fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <MX_DAC_Init+0x4c>)
 8001a02:	f001 fac0 	bl	8002f86 <HAL_DAC_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001a0c:	f000 fae4 	bl	8001fd8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4806      	ldr	r0, [pc, #24]	; (8001a38 <MX_DAC_Init+0x4c>)
 8001a20:	f001 fad3 	bl	8002fca <HAL_DAC_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a2a:	f000 fad5 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200003b8 	.word	0x200003b8
 8001a3c:	40007400 	.word	0x40007400

08001a40 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_ETH_Init+0x84>)
 8001a46:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <MX_ETH_Init+0x88>)
 8001a48:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <MX_ETH_Init+0x8c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <MX_ETH_Init+0x8c>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <MX_ETH_Init+0x8c>)
 8001a58:	22e1      	movs	r2, #225	; 0xe1
 8001a5a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_ETH_Init+0x8c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_ETH_Init+0x8c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_ETH_Init+0x8c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_ETH_Init+0x84>)
 8001a70:	4a16      	ldr	r2, [pc, #88]	; (8001acc <MX_ETH_Init+0x8c>)
 8001a72:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_ETH_Init+0x84>)
 8001a76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a7a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_ETH_Init+0x84>)
 8001a7e:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <MX_ETH_Init+0x90>)
 8001a80:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_ETH_Init+0x84>)
 8001a84:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <MX_ETH_Init+0x94>)
 8001a86:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_ETH_Init+0x84>)
 8001a8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a8e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <MX_ETH_Init+0x84>)
 8001a92:	f001 fae9 	bl	8003068 <HAL_ETH_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001a9c:	f000 fa9c 	bl	8001fd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001aa0:	2238      	movs	r2, #56	; 0x38
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <MX_ETH_Init+0x98>)
 8001aa6:	f006 facb 	bl	8008040 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <MX_ETH_Init+0x98>)
 8001aac:	2221      	movs	r2, #33	; 0x21
 8001aae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_ETH_Init+0x98>)
 8001ab2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001ab6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <MX_ETH_Init+0x98>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200003cc 	.word	0x200003cc
 8001ac8:	40028000 	.word	0x40028000
 8001acc:	20000b60 	.word	0x20000b60
 8001ad0:	200002d0 	.word	0x200002d0
 8001ad4:	20000230 	.word	0x20000230
 8001ad8:	200001f8 	.word	0x200001f8

08001adc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <MX_I2C1_Init+0x78>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <MX_I2C1_Init+0x7c>)
 8001aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001b1a:	f001 ffab 	bl	8003a74 <HAL_I2C_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b24:	f000 fa58 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4809      	ldr	r0, [pc, #36]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001b2c:	f002 fd1b 	bl	8004566 <HAL_I2CEx_ConfigAnalogFilter>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b36:	f000 fa4f 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_I2C1_Init+0x74>)
 8001b3e:	f002 fd4e 	bl	80045de <HAL_I2CEx_ConfigDigitalFilter>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b48:	f000 fa46 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2000047c 	.word	0x2000047c
 8001b54:	40005400 	.word	0x40005400
 8001b58:	000186a0 	.word	0x000186a0

08001b5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b70:	2300      	movs	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001b76:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <MX_RTC_Init+0xb4>)
 8001b78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001b7c:	2240      	movs	r2, #64	; 0x40
 8001b7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001b82:	227f      	movs	r2, #127	; 0x7f
 8001b84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001b88:	22ff      	movs	r2, #255	; 0xff
 8001b8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b9e:	481b      	ldr	r0, [pc, #108]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001ba0:	f003 fcd2 	bl	8005548 <HAL_RTC_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001baa:	f000 fa15 	bl	8001fd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001bae:	2309      	movs	r3, #9
 8001bb0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480f      	ldr	r0, [pc, #60]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001bce:	f003 fd31 	bl	8005634 <HAL_RTC_SetTime>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001bd8:	f000 f9fe 	bl	8001fd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001be0:	2310      	movs	r3, #16
 8001be2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8001be4:	2331      	movs	r3, #49	; 0x31
 8001be6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001be8:	2323      	movs	r3, #35	; 0x23
 8001bea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	; (8001c0c <MX_RTC_Init+0xb0>)
 8001bf4:	f003 fe25 	bl	8005842 <HAL_RTC_SetDate>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001bfe:	f000 f9eb 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200004d0 	.word	0x200004d0
 8001c10:	40002800 	.word	0x40002800

08001c14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <MX_TIM1_Init+0x9c>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c38:	22a7      	movs	r2, #167	; 0xa7
 8001c3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c5c:	4813      	ldr	r0, [pc, #76]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c5e:	f003 ff80 	bl	8005b62 <HAL_TIM_Base_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c68:	f000 f9b6 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	4619      	mov	r1, r3
 8001c78:	480c      	ldr	r0, [pc, #48]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c7a:	f004 f9a1 	bl	8005fc0 <HAL_TIM_ConfigClockSource>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001c84:	f000 f9a8 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c90:	463b      	mov	r3, r7
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_TIM1_Init+0x98>)
 8001c96:	f004 fbbd 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ca0:	f000 f99a 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200004f0 	.word	0x200004f0
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	463b      	mov	r3, r7
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_TIM2_Init+0x98>)
 8001cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <MX_TIM2_Init+0x98>)
 8001cda:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001cde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_TIM2_Init+0x98>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <MX_TIM2_Init+0x98>)
 8001ce8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001cec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <MX_TIM2_Init+0x98>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <MX_TIM2_Init+0x98>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cfa:	4814      	ldr	r0, [pc, #80]	; (8001d4c <MX_TIM2_Init+0x98>)
 8001cfc:	f003 ff31 	bl	8005b62 <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d06:	f000 f967 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	4619      	mov	r1, r3
 8001d16:	480d      	ldr	r0, [pc, #52]	; (8001d4c <MX_TIM2_Init+0x98>)
 8001d18:	f004 f952 	bl	8005fc0 <HAL_TIM_ConfigClockSource>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d22:	f000 f959 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	; (8001d4c <MX_TIM2_Init+0x98>)
 8001d34:	f004 fb6e 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d3e:	f000 f94b 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000538 	.word	0x20000538

08001d50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_USART3_UART_Init+0x4c>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <MX_USART3_UART_Init+0x50>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <MX_USART3_UART_Init+0x4c>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_USART3_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_USART3_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <MX_USART3_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_USART3_UART_Init+0x4c>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <MX_USART3_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_USART3_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MX_USART3_UART_Init+0x4c>)
 8001d88:	f004 fbd4 	bl	8006534 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d92:	f000 f921 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000580 	.word	0x20000580
 8001da0:	40004800 	.word	0x40004800

08001da4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001db2:	2204      	movs	r2, #4
 8001db4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001db8:	2202      	movs	r2, #2
 8001dba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de8:	f002 fc38 	bl	800465c <HAL_PCD_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001df2:	f000 f8f1 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200005c4 	.word	0x200005c4

08001e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a5b      	ldr	r2, [pc, #364]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a54      	ldr	r2, [pc, #336]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e3c:	f043 0320 	orr.w	r3, r3, #32
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a4d      	ldr	r2, [pc, #308]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a46      	ldr	r2, [pc, #280]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a3f      	ldr	r2, [pc, #252]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a38      	ldr	r2, [pc, #224]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <MX_GPIO_Init+0x18c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8001eda:	2201      	movs	r2, #1
 8001edc:	2108      	movs	r1, #8
 8001ede:	482c      	ldr	r0, [pc, #176]	; (8001f90 <MX_GPIO_Init+0x190>)
 8001ee0:	f001 fdae 	bl	8003a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f244 0181 	movw	r1, #16513	; 0x4081
 8001eea:	482a      	ldr	r0, [pc, #168]	; (8001f94 <MX_GPIO_Init+0x194>)
 8001eec:	f001 fda8 	bl	8003a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2140      	movs	r1, #64	; 0x40
 8001ef4:	4828      	ldr	r0, [pc, #160]	; (8001f98 <MX_GPIO_Init+0x198>)
 8001ef6:	f001 fda3 	bl	8003a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : setBtn_Pin downBtn_Pin upBtn_Pin */
  GPIO_InitStruct.Pin = setBtn_Pin|downBtn_Pin|upBtn_Pin;
 8001efa:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4823      	ldr	r0, [pc, #140]	; (8001f9c <MX_GPIO_Init+0x19c>)
 8001f10:	f001 fbd2 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001f14:	2308      	movs	r3, #8
 8001f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4819      	ldr	r0, [pc, #100]	; (8001f90 <MX_GPIO_Init+0x190>)
 8001f2c:	f001 fbc4 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001f30:	f244 0381 	movw	r3, #16513	; 0x4081
 8001f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	4812      	ldr	r0, [pc, #72]	; (8001f94 <MX_GPIO_Init+0x194>)
 8001f4a:	f001 fbb5 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f4e:	2340      	movs	r3, #64	; 0x40
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <MX_GPIO_Init+0x198>)
 8001f66:	f001 fba7 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4806      	ldr	r0, [pc, #24]	; (8001f98 <MX_GPIO_Init+0x198>)
 8001f7e:	f001 fb9b 	bl	80036b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f82:	bf00      	nop
 8001f84:	3730      	adds	r7, #48	; 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40021400 	.word	0x40021400

08001fa0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	if (setmode == 0 ) {
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <HAL_TIM_PeriodElapsedCallback+0x24>
		display_flag = (display_flag == 0) ? 1 : 0;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001fc2:	601a      	str	r2, [r3, #0]
	}
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	20000b44 	.word	0x20000b44
 8001fd4:	20000b10 	.word	0x20000b10

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <Error_Handler+0x8>
	...

08001fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_MspInit+0x4c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_MspInit+0x4c>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_MspInit+0x4c>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_MspInit+0x4c>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_ADC_MspInit+0x3c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10d      	bne.n	8002062 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_ADC_MspInit+0x40>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_ADC_MspInit+0x40>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_ADC_MspInit+0x40>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40012000 	.word	0x40012000
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_DAC_MspInit+0x7c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d127      	bne.n	80020ea <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_DAC_MspInit+0x80>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_DAC_MspInit+0x80>)
 80020a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_DAC_MspInit+0x80>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_DAC_MspInit+0x80>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <HAL_DAC_MspInit+0x80>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_DAC_MspInit+0x80>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020d2:	2310      	movs	r3, #16
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d6:	2303      	movs	r3, #3
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <HAL_DAC_MspInit+0x84>)
 80020e6:	f001 fae7 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40007400 	.word	0x40007400
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000

08002100 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a55      	ldr	r2, [pc, #340]	; (8002274 <HAL_ETH_MspInit+0x174>)
 800211e:	4293      	cmp	r3, r2
 8002120:	f040 80a4 	bne.w	800226c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_ETH_MspInit+0x178>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_ETH_MspInit+0x178>)
 800212e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002132:	6313      	str	r3, [r2, #48]	; 0x30
 8002134:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_ETH_MspInit+0x178>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_ETH_MspInit+0x178>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_ETH_MspInit+0x178>)
 800214a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_ETH_MspInit+0x178>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	4b45      	ldr	r3, [pc, #276]	; (8002278 <HAL_ETH_MspInit+0x178>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4a44      	ldr	r2, [pc, #272]	; (8002278 <HAL_ETH_MspInit+0x178>)
 8002166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800216a:	6313      	str	r3, [r2, #48]	; 0x30
 800216c:	4b42      	ldr	r3, [pc, #264]	; (8002278 <HAL_ETH_MspInit+0x178>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <HAL_ETH_MspInit+0x178>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	4a3d      	ldr	r2, [pc, #244]	; (8002278 <HAL_ETH_MspInit+0x178>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6313      	str	r3, [r2, #48]	; 0x30
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_ETH_MspInit+0x178>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_ETH_MspInit+0x178>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	4a36      	ldr	r2, [pc, #216]	; (8002278 <HAL_ETH_MspInit+0x178>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6313      	str	r3, [r2, #48]	; 0x30
 80021a4:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_ETH_MspInit+0x178>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	4b30      	ldr	r3, [pc, #192]	; (8002278 <HAL_ETH_MspInit+0x178>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	4a2f      	ldr	r2, [pc, #188]	; (8002278 <HAL_ETH_MspInit+0x178>)
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	6313      	str	r3, [r2, #48]	; 0x30
 80021c0:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <HAL_ETH_MspInit+0x178>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_ETH_MspInit+0x178>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <HAL_ETH_MspInit+0x178>)
 80021d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021da:	6313      	str	r3, [r2, #48]	; 0x30
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_ETH_MspInit+0x178>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80021e8:	2332      	movs	r3, #50	; 0x32
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021f8:	230b      	movs	r3, #11
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	4619      	mov	r1, r3
 8002202:	481e      	ldr	r0, [pc, #120]	; (800227c <HAL_ETH_MspInit+0x17c>)
 8002204:	f001 fa58 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002208:	2386      	movs	r3, #134	; 0x86
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002218:	230b      	movs	r3, #11
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4817      	ldr	r0, [pc, #92]	; (8002280 <HAL_ETH_MspInit+0x180>)
 8002224:	f001 fa48 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800223a:	230b      	movs	r3, #11
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	480f      	ldr	r0, [pc, #60]	; (8002284 <HAL_ETH_MspInit+0x184>)
 8002246:	f001 fa37 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800224a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800225c:	230b      	movs	r3, #11
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4808      	ldr	r0, [pc, #32]	; (8002288 <HAL_ETH_MspInit+0x188>)
 8002268:	f001 fa26 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800226c:	bf00      	nop
 800226e:	3738      	adds	r7, #56	; 0x38
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40028000 	.word	0x40028000
 8002278:	40023800 	.word	0x40023800
 800227c:	40020800 	.word	0x40020800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020400 	.word	0x40020400
 8002288:	40021800 	.word	0x40021800

0800228c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_I2C_MspInit+0x84>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12c      	bne.n	8002308 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d0:	2312      	movs	r3, #18
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022dc:	2304      	movs	r3, #4
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	480c      	ldr	r0, [pc, #48]	; (8002318 <HAL_I2C_MspInit+0x8c>)
 80022e8:	f001 f9e6 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022fa:	6413      	str	r3, [r2, #64]	; 0x40
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40005400 	.word	0x40005400
 8002314:	40023800 	.word	0x40023800
 8002318:	40020400 	.word	0x40020400

0800231c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08e      	sub	sp, #56	; 0x38
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	2230      	movs	r2, #48	; 0x30
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f005 fe87 	bl	8008040 <memset>
  if(hrtc->Instance==RTC)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <HAL_RTC_MspInit+0x4c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d111      	bne.n	8002360 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800233c:	2320      	movs	r3, #32
 800233e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	4618      	mov	r0, r3
 800234c:	f002 ff3c 	bl	80051c8 <HAL_RCCEx_PeriphCLKConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002356:	f7ff fe3f 	bl	8001fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <HAL_RTC_MspInit+0x50>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002360:	bf00      	nop
 8002362:	3738      	adds	r7, #56	; 0x38
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40002800 	.word	0x40002800
 800236c:	42470e3c 	.word	0x42470e3c

08002370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <HAL_TIM_Base_MspInit+0x64>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10e      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_TIM_Base_MspInit+0x68>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_TIM_Base_MspInit+0x68>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_TIM_Base_MspInit+0x68>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800239e:	e012      	b.n	80023c6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d10d      	bne.n	80023c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_TIM_Base_MspInit+0x68>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_TIM_Base_MspInit+0x68>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_TIM_Base_MspInit+0x68>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40010000 	.word	0x40010000
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_UART_MspInit+0x84>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d12c      	bne.n	8002458 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_UART_MspInit+0x88>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_UART_MspInit+0x88>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_UART_MspInit+0x88>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_UART_MspInit+0x88>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <HAL_UART_MspInit+0x88>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_UART_MspInit+0x88>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002436:	f44f 7340 	mov.w	r3, #768	; 0x300
 800243a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002448:	2307      	movs	r3, #7
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <HAL_UART_MspInit+0x8c>)
 8002454:	f001 f930 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40004800 	.word	0x40004800
 8002464:	40023800 	.word	0x40023800
 8002468:	40020c00 	.word	0x40020c00

0800246c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800248c:	d13f      	bne.n	800250e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_PCD_MspInit+0xac>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a20      	ldr	r2, [pc, #128]	; (8002518 <HAL_PCD_MspInit+0xac>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_PCD_MspInit+0xac>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80024aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80024ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024bc:	230a      	movs	r3, #10
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	4815      	ldr	r0, [pc, #84]	; (800251c <HAL_PCD_MspInit+0xb0>)
 80024c8:	f001 f8f6 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	480e      	ldr	r0, [pc, #56]	; (800251c <HAL_PCD_MspInit+0xb0>)
 80024e2:	f001 f8e9 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_PCD_MspInit+0xac>)
 80024e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ea:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <HAL_PCD_MspInit+0xac>)
 80024ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f0:	6353      	str	r3, [r2, #52]	; 0x34
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <HAL_PCD_MspInit+0xac>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a07      	ldr	r2, [pc, #28]	; (8002518 <HAL_PCD_MspInit+0xac>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_PCD_MspInit+0xac>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	; 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <NMI_Handler+0x4>

08002526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <MemManage_Handler+0x4>

08002532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <BusFault_Handler+0x4>

08002538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <UsageFault_Handler+0x4>

0800253e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256c:	f000 f944 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <TIM2_IRQHandler+0x10>)
 800257a:	f003 fc19 	bl	8005db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000538 	.word	0x20000538

08002588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return 1;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_kill>:

int _kill(int pid, int sig)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025a2:	f005 fd9f 	bl	80080e4 <__errno>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2216      	movs	r2, #22
 80025aa:	601a      	str	r2, [r3, #0]
  return -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_exit>:

void _exit (int status)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ffe7 	bl	8002598 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ca:	e7fe      	b.n	80025ca <_exit+0x12>

080025cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e00a      	b.n	80025f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025de:	f3af 8000 	nop.w
 80025e2:	4601      	mov	r1, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	60ba      	str	r2, [r7, #8]
 80025ea:	b2ca      	uxtb	r2, r1
 80025ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	dbf0      	blt.n	80025de <_read+0x12>
  }

  return len;
 80025fc:	687b      	ldr	r3, [r7, #4]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800262e:	605a      	str	r2, [r3, #4]
  return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <_isatty>:

int _isatty(int file)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f005 fd20 	bl	80080e4 <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20030000 	.word	0x20030000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	20000b68 	.word	0x20000b68
 80026d8:	20000cc0 	.word	0x20000cc0

080026dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SystemInit+0x20>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <SystemInit+0x20>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002738 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002704:	480d      	ldr	r0, [pc, #52]	; (800273c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002706:	490e      	ldr	r1, [pc, #56]	; (8002740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002708:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800270c:	e002      	b.n	8002714 <LoopCopyDataInit>

0800270e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002712:	3304      	adds	r3, #4

08002714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002718:	d3f9      	bcc.n	800270e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800271c:	4c0b      	ldr	r4, [pc, #44]	; (800274c <LoopFillZerobss+0x26>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002720:	e001      	b.n	8002726 <LoopFillZerobss>

08002722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002724:	3204      	adds	r2, #4

08002726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002728:	d3fb      	bcc.n	8002722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800272a:	f7ff ffd7 	bl	80026dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800272e:	f005 fcdf 	bl	80080f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002732:	f7fe fe95 	bl	8001460 <main>
  bx  lr    
 8002736:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002738:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800273c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002740:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002744:	0800a574 	.word	0x0800a574
  ldr r2, =_sbss
 8002748:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800274c:	20000cbc 	.word	0x20000cbc

08002750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <ADC_IRQHandler>
	...

08002754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_Init+0x40>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_Init+0x40>)
 800275e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_Init+0x40>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_Init+0x40>)
 800276a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800276e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_Init+0x40>)
 8002776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 fbc1 	bl	8002f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002782:	2000      	movs	r0, #0
 8002784:	f000 f808 	bl	8002798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002788:	f7ff fc2c 	bl	8001fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00

08002798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_InitTick+0x54>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_InitTick+0x58>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fbd9 	bl	8002f6e <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f000 fba1 	bl	8002f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <HAL_InitTick+0x5c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000008 	.word	0x20000008
 80027f0:	20000010 	.word	0x20000010
 80027f4:	2000000c 	.word	0x2000000c

080027f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000010 	.word	0x20000010
 800281c:	20000b6c 	.word	0x20000b6c

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000b6c 	.word	0x20000b6c

08002838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff ffee 	bl	8002820 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d005      	beq.n	800285e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_Delay+0x44>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800285e:	bf00      	nop
 8002860:	f7ff ffde 	bl	8002820 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d8f7      	bhi.n	8002860 <HAL_Delay+0x28>
  {
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000010 	.word	0x20000010

08002880 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e033      	b.n	80028fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fbc8 	bl	8002034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028c6:	f023 0302 	bic.w	r3, r3, #2
 80028ca:	f043 0202 	orr.w	r2, r3, #2
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f94a 	bl	8002b6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
 80028ee:	e001      	b.n	80028f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x1c>
 8002920:	2302      	movs	r3, #2
 8002922:	e113      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x244>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b09      	cmp	r3, #9
 8002932:	d925      	bls.n	8002980 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68d9      	ldr	r1, [r3, #12]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	3b1e      	subs	r3, #30
 800294a:	2207      	movs	r2, #7
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43da      	mvns	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	400a      	ands	r2, r1
 8002958:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68d9      	ldr	r1, [r3, #12]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	4618      	mov	r0, r3
 800296c:	4603      	mov	r3, r0
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4403      	add	r3, r0
 8002972:	3b1e      	subs	r3, #30
 8002974:	409a      	lsls	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	e022      	b.n	80029c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6919      	ldr	r1, [r3, #16]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	2207      	movs	r2, #7
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	400a      	ands	r2, r1
 80029a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6919      	ldr	r1, [r3, #16]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	4618      	mov	r0, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4403      	add	r3, r0
 80029bc:	409a      	lsls	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d824      	bhi.n	8002a18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	3b05      	subs	r3, #5
 80029e0:	221f      	movs	r2, #31
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	400a      	ands	r2, r1
 80029ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	3b05      	subs	r3, #5
 8002a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34
 8002a16:	e04c      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	d824      	bhi.n	8002a6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b23      	subs	r3, #35	; 0x23
 8002a32:	221f      	movs	r2, #31
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	400a      	ands	r2, r1
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b23      	subs	r3, #35	; 0x23
 8002a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
 8002a68:	e023      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b41      	subs	r3, #65	; 0x41
 8002a7c:	221f      	movs	r2, #31
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	400a      	ands	r2, r1
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b41      	subs	r3, #65	; 0x41
 8002aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ab2:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <HAL_ADC_ConfigChannel+0x250>)
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_ADC_ConfigChannel+0x254>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10f      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1d8>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b12      	cmp	r3, #18
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_ADC_ConfigChannel+0x254>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d12b      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x23a>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_ADC_ConfigChannel+0x258>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d003      	beq.n	8002afc <HAL_ADC_ConfigChannel+0x1f4>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b11      	cmp	r3, #17
 8002afa:	d122      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_ADC_ConfigChannel+0x258>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d111      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_ADC_ConfigChannel+0x25c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_ADC_ConfigChannel+0x260>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	0c9a      	lsrs	r2, r3, #18
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b34:	e002      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f9      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40012300 	.word	0x40012300
 8002b5c:	40012000 	.word	0x40012000
 8002b60:	10000012 	.word	0x10000012
 8002b64:	20000008 	.word	0x20000008
 8002b68:	431bde83 	.word	0x431bde83

08002b6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b74:	4b79      	ldr	r3, [pc, #484]	; (8002d5c <ADC_Init+0x1f0>)
 8002b76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	021a      	lsls	r2, r3, #8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6899      	ldr	r1, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <ADC_Init+0x1f4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d022      	beq.n	8002c4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6899      	ldr	r1, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6899      	ldr	r1, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	e00f      	b.n	8002c6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0202 	bic.w	r2, r2, #2
 8002c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6899      	ldr	r1, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7e1b      	ldrb	r3, [r3, #24]
 8002c84:	005a      	lsls	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01b      	beq.n	8002cd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	035a      	lsls	r2, r3, #13
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	e007      	b.n	8002ce0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	051a      	lsls	r2, r3, #20
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d22:	025a      	lsls	r2, r3, #9
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6899      	ldr	r1, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	029a      	lsls	r2, r3, #10
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40012300 	.word	0x40012300
 8002d60:	0f000001 	.word	0x0f000001

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	; (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	; (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	; (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed0:	d301      	bcc.n	8002ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e00f      	b.n	8002ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <SysTick_Config+0x40>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ede:	210f      	movs	r1, #15
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	f7ff ff8e 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <SysTick_Config+0x40>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <SysTick_Config+0x40>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	e000e010 	.word	0xe000e010

08002f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff29 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2c:	f7ff ff3e 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7ff ff8e 	bl	8002e58 <NVIC_EncodePriority>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff5d 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff31 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ffa2 	bl	8002ec0 <SysTick_Config>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e014      	b.n	8002fc2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	791b      	ldrb	r3, [r3, #4]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d105      	bne.n	8002fae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff f865 	bl	8002078 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	795b      	ldrb	r3, [r3, #5]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DAC_ConfigChannel+0x18>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e03c      	b.n	800305c <HAL_DAC_ConfigChannel+0x92>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2202      	movs	r2, #2
 8002fec:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4013      	ands	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	22c0      	movs	r2, #192	; 0xc0
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43da      	mvns	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	400a      	ands	r2, r1
 800304c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e06c      	b.n	8003154 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2223      	movs	r2, #35	; 0x23
 8003088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff f837 	bl	8002100 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_ETH_Init+0xf4>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4a30      	ldr	r2, [pc, #192]	; (800315c <HAL_ETH_Init+0xf4>)
 800309c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a0:	6453      	str	r3, [r2, #68]	; 0x44
 80030a2:	4b2e      	ldr	r3, [pc, #184]	; (800315c <HAL_ETH_Init+0xf4>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80030ae:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <HAL_ETH_Init+0xf8>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a2b      	ldr	r2, [pc, #172]	; (8003160 <HAL_ETH_Init+0xf8>)
 80030b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_ETH_Init+0xf8>)
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4927      	ldr	r1, [pc, #156]	; (8003160 <HAL_ETH_Init+0xf8>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_ETH_Init+0xf8>)
 80030ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e4:	f7ff fb9c 	bl	8002820 <HAL_GetTick>
 80030e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80030ea:	e011      	b.n	8003110 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80030ec:	f7ff fb98 	bl	8002820 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030fa:	d909      	bls.n	8003110 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2204      	movs	r2, #4
 8003100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	22e0      	movs	r2, #224	; 0xe0
 8003108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e021      	b.n	8003154 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e4      	bne.n	80030ec <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f958 	bl	80033d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f9ff 	bl	800352c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa55 	bl	80035de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	461a      	mov	r2, r3
 800313a:	2100      	movs	r1, #0
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f9bd 	bl	80034bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2210      	movs	r2, #16
 800314e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	40013800 	.word	0x40013800

08003164 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <ETH_SetMACConfig+0x15c>)
 800317a:	4013      	ands	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	7c1b      	ldrb	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <ETH_SetMACConfig+0x28>
 8003186:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800318a:	e000      	b.n	800318e <ETH_SetMACConfig+0x2a>
 800318c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	7c5b      	ldrb	r3, [r3, #17]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <ETH_SetMACConfig+0x38>
 8003196:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800319a:	e000      	b.n	800319e <ETH_SetMACConfig+0x3a>
 800319c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800319e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	7fdb      	ldrb	r3, [r3, #31]
 80031aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80031ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	7f92      	ldrb	r2, [r2, #30]
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d102      	bne.n	80031c2 <ETH_SetMACConfig+0x5e>
 80031bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031c0:	e000      	b.n	80031c4 <ETH_SetMACConfig+0x60>
 80031c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80031c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	7f1b      	ldrb	r3, [r3, #28]
 80031ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	791b      	ldrb	r3, [r3, #4]
 80031d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80031da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	d102      	bne.n	80031ec <ETH_SetMACConfig+0x88>
 80031e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ea:	e000      	b.n	80031ee <ETH_SetMACConfig+0x8a>
 80031ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	7bdb      	ldrb	r3, [r3, #15]
 80031f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80031f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003204:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003206:	4313      	orrs	r3, r2
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800321e:	2001      	movs	r0, #1
 8003220:	f7ff fb0a 	bl	8002838 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	f64f 7341 	movw	r3, #65345	; 0xff41
 800323a:	4013      	ands	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800324a:	2a00      	cmp	r2, #0
 800324c:	d101      	bne.n	8003252 <ETH_SetMACConfig+0xee>
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	e000      	b.n	8003254 <ETH_SetMACConfig+0xf0>
 8003252:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003254:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800325a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003262:	2a01      	cmp	r2, #1
 8003264:	d101      	bne.n	800326a <ETH_SetMACConfig+0x106>
 8003266:	2208      	movs	r2, #8
 8003268:	e000      	b.n	800326c <ETH_SetMACConfig+0x108>
 800326a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800326c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003274:	2a01      	cmp	r2, #1
 8003276:	d101      	bne.n	800327c <ETH_SetMACConfig+0x118>
 8003278:	2204      	movs	r2, #4
 800327a:	e000      	b.n	800327e <ETH_SetMACConfig+0x11a>
 800327c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800327e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003286:	2a01      	cmp	r2, #1
 8003288:	d101      	bne.n	800328e <ETH_SetMACConfig+0x12a>
 800328a:	2202      	movs	r2, #2
 800328c:	e000      	b.n	8003290 <ETH_SetMACConfig+0x12c>
 800328e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003290:	4313      	orrs	r3, r2
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f7ff fac5 	bl	8002838 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	619a      	str	r2, [r3, #24]
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	ff20810f 	.word	0xff20810f

080032c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <ETH_SetDMAConfig+0x110>)
 80032de:	4013      	ands	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	7b1b      	ldrb	r3, [r3, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <ETH_SetDMAConfig+0x2c>
 80032ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032ee:	e000      	b.n	80032f2 <ETH_SetDMAConfig+0x2e>
 80032f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	7b5b      	ldrb	r3, [r3, #13]
 80032f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	7f52      	ldrb	r2, [r2, #29]
 80032fe:	2a00      	cmp	r2, #0
 8003300:	d102      	bne.n	8003308 <ETH_SetDMAConfig+0x44>
 8003302:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003306:	e000      	b.n	800330a <ETH_SetDMAConfig+0x46>
 8003308:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800330a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	7b9b      	ldrb	r3, [r3, #14]
 8003310:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003312:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003318:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	7f1b      	ldrb	r3, [r3, #28]
 800331e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003320:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	7f9b      	ldrb	r3, [r3, #30]
 8003326:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003328:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800332e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003336:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003338:	4313      	orrs	r3, r2
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003348:	461a      	mov	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800335a:	2001      	movs	r0, #1
 800335c:	f7ff fa6c 	bl	8002838 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003368:	461a      	mov	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	791b      	ldrb	r3, [r3, #4]
 8003372:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003378:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800337e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003384:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800338c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800338e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003396:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800339c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033b8:	2001      	movs	r0, #1
 80033ba:	f7ff fa3d 	bl	8002838 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	f8de3f23 	.word	0xf8de3f23

080033d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b0a6      	sub	sp, #152	; 0x98
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80033ec:	2300      	movs	r3, #0
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800340e:	2300      	movs	r3, #0
 8003410:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003414:	2300      	movs	r3, #0
 8003416:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003418:	2300      	movs	r3, #0
 800341a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800341e:	2300      	movs	r3, #0
 8003420:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003422:	2300      	movs	r3, #0
 8003424:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800343a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003440:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003444:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800344c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff fe86 	bl	8003164 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003458:	2301      	movs	r3, #1
 800345a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800345c:	2301      	movs	r3, #1
 800345e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003466:	2301      	movs	r3, #1
 8003468:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800346e:	2300      	movs	r3, #0
 8003470:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800347a:	2300      	movs	r3, #0
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003484:	2301      	movs	r3, #1
 8003486:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800348c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800348e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003492:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003498:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80034a8:	f107 0308 	add.w	r3, r7, #8
 80034ac:	4619      	mov	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ff08 	bl	80032c4 <ETH_SetDMAConfig>
}
 80034b4:	bf00      	nop
 80034b6:	3798      	adds	r7, #152	; 0x98
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3305      	adds	r3, #5
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	3204      	adds	r2, #4
 80034d4:	7812      	ldrb	r2, [r2, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <ETH_MACAddressConfig+0x68>)
 80034de:	4413      	add	r3, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3303      	adds	r3, #3
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	061a      	lsls	r2, r3, #24
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3302      	adds	r3, #2
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3301      	adds	r3, #1
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	4313      	orrs	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	7812      	ldrb	r2, [r2, #0]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <ETH_MACAddressConfig+0x6c>)
 800350e:	4413      	add	r3, r2
 8003510:	461a      	mov	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	6013      	str	r3, [r2, #0]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40028040 	.word	0x40028040
 8003528:	40028044 	.word	0x40028044

0800352c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e03e      	b.n	80035b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68d9      	ldr	r1, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2200      	movs	r2, #0
 8003562:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	3206      	adds	r2, #6
 800356c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d80c      	bhi.n	800359c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68d9      	ldr	r1, [r3, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	e004      	b.n	80035a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	461a      	mov	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3301      	adds	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d9bd      	bls.n	800353a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d0:	611a      	str	r2, [r3, #16]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e046      	b.n	800367a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6919      	ldr	r1, [r3, #16]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2200      	movs	r2, #0
 8003608:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2200      	movs	r2, #0
 8003614:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2200      	movs	r2, #0
 800361a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2200      	movs	r2, #0
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003628:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003630:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	3212      	adds	r2, #18
 8003646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d80c      	bhi.n	800366a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6919      	ldr	r1, [r3, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	e004      	b.n	8003674 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	461a      	mov	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3301      	adds	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d9b5      	bls.n	80035ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036aa:	60da      	str	r2, [r3, #12]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e177      	b.n	80039c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d4:	2201      	movs	r2, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	f040 8166 	bne.w	80039be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d005      	beq.n	800370a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003706:	2b02      	cmp	r3, #2
 8003708:	d130      	bne.n	800376c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	2203      	movs	r2, #3
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003740:	2201      	movs	r2, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 0201 	and.w	r2, r3, #1
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b03      	cmp	r3, #3
 8003776:	d017      	beq.n	80037a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d123      	bne.n	80037fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3208      	adds	r2, #8
 80037bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	220f      	movs	r2, #15
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	08da      	lsrs	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3208      	adds	r2, #8
 80037f6:	69b9      	ldr	r1, [r7, #24]
 80037f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0203 	and.w	r2, r3, #3
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80c0 	beq.w	80039be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b66      	ldr	r3, [pc, #408]	; (80039dc <HAL_GPIO_Init+0x324>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	4a65      	ldr	r2, [pc, #404]	; (80039dc <HAL_GPIO_Init+0x324>)
 8003848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800384c:	6453      	str	r3, [r2, #68]	; 0x44
 800384e:	4b63      	ldr	r3, [pc, #396]	; (80039dc <HAL_GPIO_Init+0x324>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385a:	4a61      	ldr	r2, [pc, #388]	; (80039e0 <HAL_GPIO_Init+0x328>)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	3302      	adds	r3, #2
 8003862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	220f      	movs	r2, #15
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_GPIO_Init+0x32c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d037      	beq.n	80038f6 <HAL_GPIO_Init+0x23e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a57      	ldr	r2, [pc, #348]	; (80039e8 <HAL_GPIO_Init+0x330>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_GPIO_Init+0x23a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a56      	ldr	r2, [pc, #344]	; (80039ec <HAL_GPIO_Init+0x334>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d02b      	beq.n	80038ee <HAL_GPIO_Init+0x236>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a55      	ldr	r2, [pc, #340]	; (80039f0 <HAL_GPIO_Init+0x338>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d025      	beq.n	80038ea <HAL_GPIO_Init+0x232>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a54      	ldr	r2, [pc, #336]	; (80039f4 <HAL_GPIO_Init+0x33c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01f      	beq.n	80038e6 <HAL_GPIO_Init+0x22e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a53      	ldr	r2, [pc, #332]	; (80039f8 <HAL_GPIO_Init+0x340>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d019      	beq.n	80038e2 <HAL_GPIO_Init+0x22a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_GPIO_Init+0x344>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0x226>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a51      	ldr	r2, [pc, #324]	; (8003a00 <HAL_GPIO_Init+0x348>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00d      	beq.n	80038da <HAL_GPIO_Init+0x222>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a50      	ldr	r2, [pc, #320]	; (8003a04 <HAL_GPIO_Init+0x34c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <HAL_GPIO_Init+0x21e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4f      	ldr	r2, [pc, #316]	; (8003a08 <HAL_GPIO_Init+0x350>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_GPIO_Init+0x21a>
 80038ce:	2309      	movs	r3, #9
 80038d0:	e012      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038d2:	230a      	movs	r3, #10
 80038d4:	e010      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038d6:	2308      	movs	r3, #8
 80038d8:	e00e      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038da:	2307      	movs	r3, #7
 80038dc:	e00c      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038de:	2306      	movs	r3, #6
 80038e0:	e00a      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038e2:	2305      	movs	r3, #5
 80038e4:	e008      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e006      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038ea:	2303      	movs	r3, #3
 80038ec:	e004      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e002      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038f6:	2300      	movs	r3, #0
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f002 0203 	and.w	r2, r2, #3
 80038fe:	0092      	lsls	r2, r2, #2
 8003900:	4093      	lsls	r3, r2
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003908:	4935      	ldr	r1, [pc, #212]	; (80039e0 <HAL_GPIO_Init+0x328>)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	3302      	adds	r3, #2
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003916:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <HAL_GPIO_Init+0x354>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800393a:	4a34      	ldr	r2, [pc, #208]	; (8003a0c <HAL_GPIO_Init+0x354>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003940:	4b32      	ldr	r3, [pc, #200]	; (8003a0c <HAL_GPIO_Init+0x354>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <HAL_GPIO_Init+0x354>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <HAL_GPIO_Init+0x354>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800398e:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <HAL_GPIO_Init+0x354>)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_GPIO_Init+0x354>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039b8:	4a14      	ldr	r2, [pc, #80]	; (8003a0c <HAL_GPIO_Init+0x354>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3301      	adds	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b0f      	cmp	r3, #15
 80039c8:	f67f ae84 	bls.w	80036d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3724      	adds	r7, #36	; 0x24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40013800 	.word	0x40013800
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40021400 	.word	0x40021400
 80039fc:	40021800 	.word	0x40021800
 8003a00:	40021c00 	.word	0x40021c00
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40022400 	.word	0x40022400
 8003a0c:	40013c00 	.word	0x40013c00

08003a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	887b      	ldrh	r3, [r7, #2]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
 8003a2c:	e001      	b.n	8003a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	807b      	strh	r3, [r7, #2]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a50:	787b      	ldrb	r3, [r7, #1]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a5c:	e003      	b.n	8003a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	041a      	lsls	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	619a      	str	r2, [r3, #24]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e12b      	b.n	8003cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fe fbf6 	bl	800228c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	; 0x24
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ad8:	f001 fb4e 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8003adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4a81      	ldr	r2, [pc, #516]	; (8003ce8 <HAL_I2C_Init+0x274>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d807      	bhi.n	8003af8 <HAL_I2C_Init+0x84>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a80      	ldr	r2, [pc, #512]	; (8003cec <HAL_I2C_Init+0x278>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	bf94      	ite	ls
 8003af0:	2301      	movls	r3, #1
 8003af2:	2300      	movhi	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e006      	b.n	8003b06 <HAL_I2C_Init+0x92>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a7d      	ldr	r2, [pc, #500]	; (8003cf0 <HAL_I2C_Init+0x27c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bf94      	ite	ls
 8003b00:	2301      	movls	r3, #1
 8003b02:	2300      	movhi	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e0e7      	b.n	8003cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a78      	ldr	r2, [pc, #480]	; (8003cf4 <HAL_I2C_Init+0x280>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0c9b      	lsrs	r3, r3, #18
 8003b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a6a      	ldr	r2, [pc, #424]	; (8003ce8 <HAL_I2C_Init+0x274>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d802      	bhi.n	8003b48 <HAL_I2C_Init+0xd4>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3301      	adds	r3, #1
 8003b46:	e009      	b.n	8003b5c <HAL_I2C_Init+0xe8>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	4a69      	ldr	r2, [pc, #420]	; (8003cf8 <HAL_I2C_Init+0x284>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	495c      	ldr	r1, [pc, #368]	; (8003ce8 <HAL_I2C_Init+0x274>)
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	d819      	bhi.n	8003bb0 <HAL_I2C_Init+0x13c>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1e59      	subs	r1, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8a:	1c59      	adds	r1, r3, #1
 8003b8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b90:	400b      	ands	r3, r1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_I2C_Init+0x138>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1e59      	subs	r1, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003baa:	e051      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003bac:	2304      	movs	r3, #4
 8003bae:	e04f      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d111      	bne.n	8003bdc <HAL_I2C_Init+0x168>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e58      	subs	r0, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	440b      	add	r3, r1
 8003bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e012      	b.n	8003c02 <HAL_I2C_Init+0x18e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e58      	subs	r0, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	0099      	lsls	r1, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Init+0x196>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e022      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10e      	bne.n	8003c30 <HAL_I2C_Init+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e58      	subs	r0, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	440b      	add	r3, r1
 8003c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c24:	3301      	adds	r3, #1
 8003c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2e:	e00f      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e58      	subs	r0, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	0099      	lsls	r1, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c46:	3301      	adds	r3, #1
 8003c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	6809      	ldr	r1, [r1, #0]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6911      	ldr	r1, [r2, #16]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68d2      	ldr	r2, [r2, #12]
 8003c8a:	4311      	orrs	r1, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	000186a0 	.word	0x000186a0
 8003cec:	001e847f 	.word	0x001e847f
 8003cf0:	003d08ff 	.word	0x003d08ff
 8003cf4:	431bde83 	.word	0x431bde83
 8003cf8:	10624dd3 	.word	0x10624dd3

08003cfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	461a      	mov	r2, r3
 8003d08:	460b      	mov	r3, r1
 8003d0a:	817b      	strh	r3, [r7, #10]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7fe fd86 	bl	8002820 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	f040 80e0 	bne.w	8003ee4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2319      	movs	r3, #25
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4970      	ldr	r1, [pc, #448]	; (8003ef0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fa92 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0d3      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_I2C_Master_Transmit+0x50>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0cc      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d007      	beq.n	8003d72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2221      	movs	r2, #33	; 0x21
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	893a      	ldrh	r2, [r7, #8]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a50      	ldr	r2, [pc, #320]	; (8003ef4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003db4:	8979      	ldrh	r1, [r7, #10]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f9ca 	bl	8004154 <I2C_MasterRequestWrite>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e08d      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003de0:	e066      	b.n	8003eb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	6a39      	ldr	r1, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fb0c 	bl	8004404 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d107      	bne.n	8003e0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e06b      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d11b      	bne.n	8003e84 <HAL_I2C_Master_Transmit+0x188>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d017      	beq.n	8003e84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	6a39      	ldr	r1, [r7, #32]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fafc 	bl	8004486 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d107      	bne.n	8003eac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e01a      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d194      	bne.n	8003de2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	00100002 	.word	0x00100002
 8003ef4:	ffff0000 	.word	0xffff0000

08003ef8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	460b      	mov	r3, r1
 8003f06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f08:	f7fe fc8a 	bl	8002820 <HAL_GetTick>
 8003f0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	f040 8111 	bne.w	8004142 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2319      	movs	r3, #25
 8003f26:	2201      	movs	r2, #1
 8003f28:	4988      	ldr	r1, [pc, #544]	; (800414c <HAL_I2C_IsDeviceReady+0x254>)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f994 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
 8003f38:	e104      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_I2C_IsDeviceReady+0x50>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e0fd      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x24c>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d007      	beq.n	8003f6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0201 	orr.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2224      	movs	r2, #36	; 0x24
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a70      	ldr	r2, [pc, #448]	; (8004150 <HAL_I2C_IsDeviceReady+0x258>)
 8003f90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f952 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc8:	d103      	bne.n	8003fd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e0b6      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fd6:	897b      	ldrh	r3, [r7, #10]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fe4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fe fc1b 	bl	8002820 <HAL_GetTick>
 8003fea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800401a:	e025      	b.n	8004068 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800401c:	f7fe fc00 	bl	8002820 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <HAL_I2C_IsDeviceReady+0x13a>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	22a0      	movs	r2, #160	; 0xa0
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2ba0      	cmp	r3, #160	; 0xa0
 8004072:	d005      	beq.n	8004080 <HAL_I2C_IsDeviceReady+0x188>
 8004074:	7dfb      	ldrb	r3, [r7, #23]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_I2C_IsDeviceReady+0x188>
 800407a:	7dbb      	ldrb	r3, [r7, #22]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0cd      	beq.n	800401c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d129      	bne.n	80040ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2319      	movs	r3, #25
 80040c2:	2201      	movs	r2, #1
 80040c4:	4921      	ldr	r1, [pc, #132]	; (800414c <HAL_I2C_IsDeviceReady+0x254>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f8c6 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e036      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e02c      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004102:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2319      	movs	r3, #25
 800410a:	2201      	movs	r2, #1
 800410c:	490f      	ldr	r1, [pc, #60]	; (800414c <HAL_I2C_IsDeviceReady+0x254>)
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f8a2 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e012      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	3301      	adds	r3, #1
 8004122:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	f4ff af32 	bcc.w	8003f92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	00100002 	.word	0x00100002
 8004150:	ffff0000 	.word	0xffff0000

08004154 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	460b      	mov	r3, r1
 8004162:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d006      	beq.n	800417e <I2C_MasterRequestWrite+0x2a>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d003      	beq.n	800417e <I2C_MasterRequestWrite+0x2a>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800417c:	d108      	bne.n	8004190 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e00b      	b.n	80041a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	2b12      	cmp	r3, #18
 8004196:	d107      	bne.n	80041a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f84f 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ce:	d103      	bne.n	80041d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e035      	b.n	8004248 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e4:	d108      	bne.n	80041f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f4:	611a      	str	r2, [r3, #16]
 80041f6:	e01b      	b.n	8004230 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041f8:	897b      	ldrh	r3, [r7, #10]
 80041fa:	11db      	asrs	r3, r3, #7
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f003 0306 	and.w	r3, r3, #6
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f063 030f 	orn	r3, r3, #15
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	490e      	ldr	r1, [pc, #56]	; (8004250 <I2C_MasterRequestWrite+0xfc>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f875 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e010      	b.n	8004248 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004226:	897b      	ldrh	r3, [r7, #10]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4907      	ldr	r1, [pc, #28]	; (8004254 <I2C_MasterRequestWrite+0x100>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f865 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	00010008 	.word	0x00010008
 8004254:	00010002 	.word	0x00010002

08004258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004268:	e025      	b.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d021      	beq.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fe fad5 	bl	8002820 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d116      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e023      	b.n	80042fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10d      	bne.n	80042dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	43da      	mvns	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	e00c      	b.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d0b6      	beq.n	800426a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004314:	e051      	b.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004324:	d123      	bne.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004334:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e046      	b.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d021      	beq.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fe fa53 	bl	8002820 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d116      	bne.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e020      	b.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10c      	bne.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e00b      	b.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d18d      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004410:	e02d      	b.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f878 	bl	8004508 <I2C_IsAcknowledgeFailed>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e02d      	b.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d021      	beq.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe f9f9 	bl	8002820 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e007      	b.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d1ca      	bne.n	8004412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004492:	e02d      	b.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f837 	bl	8004508 <I2C_IsAcknowledgeFailed>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e02d      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d021      	beq.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fe f9b8 	bl	8002820 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e007      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d1ca      	bne.n	8004494 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451e:	d11b      	bne.n	8004558 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004528:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b20      	cmp	r3, #32
 800457a:	d129      	bne.n	80045d0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2224      	movs	r2, #36	; 0x24
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0210 	bic.w	r2, r2, #16
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e000      	b.n	80045d2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d12a      	bne.n	800464e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2224      	movs	r2, #36	; 0x24
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004618:	89fb      	ldrh	r3, [r7, #14]
 800461a:	f023 030f 	bic.w	r3, r3, #15
 800461e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	b29a      	uxth	r2, r3
 8004624:	89fb      	ldrh	r3, [r7, #14]
 8004626:	4313      	orrs	r3, r2
 8004628:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	89fa      	ldrh	r2, [r7, #14]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800465c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800465e:	b08f      	sub	sp, #60	; 0x3c
 8004660:	af0a      	add	r7, sp, #40	; 0x28
 8004662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e10f      	b.n	800488e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fd feef 	bl	800246c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2203      	movs	r2, #3
 8004692:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f002 fb64 	bl	8006d7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	687e      	ldr	r6, [r7, #4]
 80046ba:	466d      	mov	r5, sp
 80046bc:	f106 0410 	add.w	r4, r6, #16
 80046c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80046d0:	1d33      	adds	r3, r6, #4
 80046d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046d4:	6838      	ldr	r0, [r7, #0]
 80046d6:	f002 faef 	bl	8006cb8 <USB_CoreInit>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0d0      	b.n	800488e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f002 fb52 	bl	8006d9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	e04a      	b.n	8004794 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046fe:	7bfa      	ldrb	r2, [r7, #15]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	333d      	adds	r3, #61	; 0x3d
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004712:	7bfa      	ldrb	r2, [r7, #15]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	333c      	adds	r3, #60	; 0x3c
 8004722:	7bfa      	ldrb	r2, [r7, #15]
 8004724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	b298      	uxth	r0, r3
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3344      	adds	r3, #68	; 0x44
 800473a:	4602      	mov	r2, r0
 800473c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800473e:	7bfa      	ldrb	r2, [r7, #15]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	3340      	adds	r3, #64	; 0x40
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	3348      	adds	r3, #72	; 0x48
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004766:	7bfa      	ldrb	r2, [r7, #15]
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	334c      	adds	r3, #76	; 0x4c
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800477a:	7bfa      	ldrb	r2, [r7, #15]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3354      	adds	r3, #84	; 0x54
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	3301      	adds	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d3af      	bcc.n	80046fe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	e044      	b.n	800482e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047a4:	7bfa      	ldrb	r2, [r7, #15]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80047cc:	7bfa      	ldrb	r2, [r7, #15]
 80047ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047fc:	7bfa      	ldrb	r2, [r7, #15]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	3301      	adds	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
 800482e:	7bfa      	ldrb	r2, [r7, #15]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d3b5      	bcc.n	80047a4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	603b      	str	r3, [r7, #0]
 800483e:	687e      	ldr	r6, [r7, #4]
 8004840:	466d      	mov	r5, sp
 8004842:	f106 0410 	add.w	r4, r6, #16
 8004846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800484a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800484c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800484e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004852:	e885 0003 	stmia.w	r5, {r0, r1}
 8004856:	1d33      	adds	r3, r6, #4
 8004858:	cb0e      	ldmia	r3, {r1, r2, r3}
 800485a:	6838      	ldr	r0, [r7, #0]
 800485c:	f002 faea 	bl	8006e34 <USB_DevInit>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e00d      	b.n	800488e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f002 fcb5 	bl	80071f6 <USB_DevDisconnect>

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e267      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d075      	beq.n	80049a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048b6:	4b88      	ldr	r3, [pc, #544]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d00c      	beq.n	80048dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c2:	4b85      	ldr	r3, [pc, #532]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d112      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ce:	4b82      	ldr	r3, [pc, #520]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048da:	d10b      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	4b7e      	ldr	r3, [pc, #504]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d05b      	beq.n	80049a0 <HAL_RCC_OscConfig+0x108>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d157      	bne.n	80049a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e242      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d106      	bne.n	800490c <HAL_RCC_OscConfig+0x74>
 80048fe:	4b76      	ldr	r3, [pc, #472]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a75      	ldr	r2, [pc, #468]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e01d      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x98>
 8004916:	4b70      	ldr	r3, [pc, #448]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6f      	ldr	r2, [pc, #444]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 800491c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b6d      	ldr	r3, [pc, #436]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a6c      	ldr	r2, [pc, #432]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 8004930:	4b69      	ldr	r3, [pc, #420]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a68      	ldr	r2, [pc, #416]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	4b66      	ldr	r3, [pc, #408]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a65      	ldr	r2, [pc, #404]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fd ff66 	bl	8002820 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004958:	f7fd ff62 	bl	8002820 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e207      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b5b      	ldr	r3, [pc, #364]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0xc0>
 8004976:	e014      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fd ff52 	bl	8002820 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004980:	f7fd ff4e 	bl	8002820 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1f3      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	4b51      	ldr	r3, [pc, #324]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0xe8>
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d063      	beq.n	8004a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ae:	4b4a      	ldr	r3, [pc, #296]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d11c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c6:	4b44      	ldr	r3, [pc, #272]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d116      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e1c7      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4937      	ldr	r1, [pc, #220]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fe:	e03a      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d020      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a08:	4b34      	ldr	r3, [pc, #208]	; (8004adc <HAL_RCC_OscConfig+0x244>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fd ff07 	bl	8002820 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a16:	f7fd ff03 	bl	8002820 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e1a8      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a34:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4925      	ldr	r1, [pc, #148]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]
 8004a48:	e015      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4a:	4b24      	ldr	r3, [pc, #144]	; (8004adc <HAL_RCC_OscConfig+0x244>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fee6 	bl	8002820 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fd fee2 	bl	8002820 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e187      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d036      	beq.n	8004af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_RCC_OscConfig+0x248>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fd fec6 	bl	8002820 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a98:	f7fd fec2 	bl	8002820 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e167      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x200>
 8004ab6:	e01b      	b.n	8004af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <HAL_RCC_OscConfig+0x248>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004abe:	f7fd feaf 	bl	8002820 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	e00e      	b.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac6:	f7fd feab 	bl	8002820 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d907      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e150      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	42470000 	.word	0x42470000
 8004ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae4:	4b88      	ldr	r3, [pc, #544]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ea      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8097 	beq.w	8004c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afe:	2300      	movs	r3, #0
 8004b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b02:	4b81      	ldr	r3, [pc, #516]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	4b7d      	ldr	r3, [pc, #500]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	4a7c      	ldr	r2, [pc, #496]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1e:	4b7a      	ldr	r3, [pc, #488]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2e:	4b77      	ldr	r3, [pc, #476]	; (8004d0c <HAL_RCC_OscConfig+0x474>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d118      	bne.n	8004b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b3a:	4b74      	ldr	r3, [pc, #464]	; (8004d0c <HAL_RCC_OscConfig+0x474>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a73      	ldr	r2, [pc, #460]	; (8004d0c <HAL_RCC_OscConfig+0x474>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b46:	f7fd fe6b 	bl	8002820 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4e:	f7fd fe67 	bl	8002820 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e10c      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b60:	4b6a      	ldr	r3, [pc, #424]	; (8004d0c <HAL_RCC_OscConfig+0x474>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d106      	bne.n	8004b82 <HAL_RCC_OscConfig+0x2ea>
 8004b74:	4b64      	ldr	r3, [pc, #400]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	4a63      	ldr	r2, [pc, #396]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b80:	e01c      	b.n	8004bbc <HAL_RCC_OscConfig+0x324>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x30c>
 8004b8a:	4b5f      	ldr	r3, [pc, #380]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	4a5e      	ldr	r2, [pc, #376]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b90:	f043 0304 	orr.w	r3, r3, #4
 8004b94:	6713      	str	r3, [r2, #112]	; 0x70
 8004b96:	4b5c      	ldr	r3, [pc, #368]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	4a5b      	ldr	r2, [pc, #364]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba2:	e00b      	b.n	8004bbc <HAL_RCC_OscConfig+0x324>
 8004ba4:	4b58      	ldr	r3, [pc, #352]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a57      	ldr	r2, [pc, #348]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004baa:	f023 0301 	bic.w	r3, r3, #1
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb0:	4b55      	ldr	r3, [pc, #340]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	4a54      	ldr	r2, [pc, #336]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004bb6:	f023 0304 	bic.w	r3, r3, #4
 8004bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d015      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fd fe2c 	bl	8002820 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bca:	e00a      	b.n	8004be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bcc:	f7fd fe28 	bl	8002820 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e0cb      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be2:	4b49      	ldr	r3, [pc, #292]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ee      	beq.n	8004bcc <HAL_RCC_OscConfig+0x334>
 8004bee:	e014      	b.n	8004c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf0:	f7fd fe16 	bl	8002820 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fd fe12 	bl	8002820 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e0b5      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0e:	4b3e      	ldr	r3, [pc, #248]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1ee      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d105      	bne.n	8004c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c20:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	4a38      	ldr	r2, [pc, #224]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80a1 	beq.w	8004d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c36:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d05c      	beq.n	8004cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d141      	bne.n	8004cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4a:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_RCC_OscConfig+0x478>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fd fde6 	bl	8002820 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fd fde2 	bl	8002820 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e087      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6a:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69da      	ldr	r2, [r3, #28]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	041b      	lsls	r3, r3, #16
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	061b      	lsls	r3, r3, #24
 8004c9a:	491b      	ldr	r1, [pc, #108]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <HAL_RCC_OscConfig+0x478>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fd fdbb 	bl	8002820 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fd fdb7 	bl	8002820 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e05c      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc0:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x416>
 8004ccc:	e054      	b.n	8004d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_RCC_OscConfig+0x478>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fda4 	bl	8002820 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd fda0 	bl	8002820 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e045      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x444>
 8004cfa:	e03d      	b.n	8004d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e038      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	40007000 	.word	0x40007000
 8004d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d14:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <HAL_RCC_OscConfig+0x4ec>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d028      	beq.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d121      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d11a      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d111      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800

08004d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0cc      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d9c:	4b68      	ldr	r3, [pc, #416]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d90c      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004daa:	4b65      	ldr	r3, [pc, #404]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db2:	4b63      	ldr	r3, [pc, #396]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0b8      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d020      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ddc:	4b59      	ldr	r3, [pc, #356]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a58      	ldr	r2, [pc, #352]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df4:	4b53      	ldr	r3, [pc, #332]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a52      	ldr	r2, [pc, #328]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e00:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	494d      	ldr	r1, [pc, #308]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d044      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d107      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	4b47      	ldr	r3, [pc, #284]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d119      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e07f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d107      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e46:	4b3f      	ldr	r3, [pc, #252]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e06f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e56:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e067      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e66:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 0203 	bic.w	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	4934      	ldr	r1, [pc, #208]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e78:	f7fd fcd2 	bl	8002820 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e80:	f7fd fcce 	bl	8002820 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e04f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 020c 	and.w	r2, r3, #12
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d1eb      	bne.n	8004e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d20c      	bcs.n	8004ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e032      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004edc:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4916      	ldr	r1, [pc, #88]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efa:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	490e      	ldr	r1, [pc, #56]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f0e:	f000 f821 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8004f12:	4602      	mov	r2, r0
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	490a      	ldr	r1, [pc, #40]	; (8004f48 <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	5ccb      	ldrb	r3, [r1, r3]
 8004f22:	fa22 f303 	lsr.w	r3, r2, r3
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fd fc32 	bl	8002798 <HAL_InitTick>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40023c00 	.word	0x40023c00
 8004f44:	40023800 	.word	0x40023800
 8004f48:	0800a1dc 	.word	0x0800a1dc
 8004f4c:	20000008 	.word	0x20000008
 8004f50:	2000000c 	.word	0x2000000c

08004f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f58:	b094      	sub	sp, #80	; 0x50
 8004f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f60:	2300      	movs	r3, #0
 8004f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f64:	2300      	movs	r3, #0
 8004f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f6c:	4b79      	ldr	r3, [pc, #484]	; (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d00d      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x40>
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	f200 80e1 	bhi.w	8005140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_RCC_GetSysClockFreq+0x34>
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d003      	beq.n	8004f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f86:	e0db      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f88:	4b73      	ldr	r3, [pc, #460]	; (8005158 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f8c:	e0db      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f8e:	4b73      	ldr	r3, [pc, #460]	; (800515c <HAL_RCC_GetSysClockFreq+0x208>)
 8004f90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f92:	e0d8      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f94:	4b6f      	ldr	r3, [pc, #444]	; (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f9e:	4b6d      	ldr	r3, [pc, #436]	; (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d063      	beq.n	8005072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004faa:	4b6a      	ldr	r3, [pc, #424]	; (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	099b      	lsrs	r3, r3, #6
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	462b      	mov	r3, r5
 8004fca:	f04f 0000 	mov.w	r0, #0
 8004fce:	f04f 0100 	mov.w	r1, #0
 8004fd2:	0159      	lsls	r1, r3, #5
 8004fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fd8:	0150      	lsls	r0, r2, #5
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4621      	mov	r1, r4
 8004fe0:	1a51      	subs	r1, r2, r1
 8004fe2:	6139      	str	r1, [r7, #16]
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	018b      	lsls	r3, r1, #6
 8004ffc:	4651      	mov	r1, sl
 8004ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005002:	4651      	mov	r1, sl
 8005004:	018a      	lsls	r2, r1, #6
 8005006:	4651      	mov	r1, sl
 8005008:	ebb2 0801 	subs.w	r8, r2, r1
 800500c:	4659      	mov	r1, fp
 800500e:	eb63 0901 	sbc.w	r9, r3, r1
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800501e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005026:	4690      	mov	r8, r2
 8005028:	4699      	mov	r9, r3
 800502a:	4623      	mov	r3, r4
 800502c:	eb18 0303 	adds.w	r3, r8, r3
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	462b      	mov	r3, r5
 8005034:	eb49 0303 	adc.w	r3, r9, r3
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005046:	4629      	mov	r1, r5
 8005048:	024b      	lsls	r3, r1, #9
 800504a:	4621      	mov	r1, r4
 800504c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005050:	4621      	mov	r1, r4
 8005052:	024a      	lsls	r2, r1, #9
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505a:	2200      	movs	r2, #0
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
 800505e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005064:	f7fb fdb0 	bl	8000bc8 <__aeabi_uldivmod>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4613      	mov	r3, r2
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005070:	e058      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005072:	4b38      	ldr	r3, [pc, #224]	; (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	2200      	movs	r2, #0
 800507a:	4618      	mov	r0, r3
 800507c:	4611      	mov	r1, r2
 800507e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	2300      	movs	r3, #0
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
 8005088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	f04f 0000 	mov.w	r0, #0
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	0159      	lsls	r1, r3, #5
 800509a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800509e:	0150      	lsls	r0, r2, #5
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4641      	mov	r1, r8
 80050a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050aa:	4649      	mov	r1, r9
 80050ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050c4:	ebb2 040a 	subs.w	r4, r2, sl
 80050c8:	eb63 050b 	sbc.w	r5, r3, fp
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	00eb      	lsls	r3, r5, #3
 80050d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050da:	00e2      	lsls	r2, r4, #3
 80050dc:	4614      	mov	r4, r2
 80050de:	461d      	mov	r5, r3
 80050e0:	4643      	mov	r3, r8
 80050e2:	18e3      	adds	r3, r4, r3
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	464b      	mov	r3, r9
 80050e8:	eb45 0303 	adc.w	r3, r5, r3
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050fa:	4629      	mov	r1, r5
 80050fc:	028b      	lsls	r3, r1, #10
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005104:	4621      	mov	r1, r4
 8005106:	028a      	lsls	r2, r1, #10
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510e:	2200      	movs	r2, #0
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	61fa      	str	r2, [r7, #28]
 8005114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005118:	f7fb fd56 	bl	8000bc8 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4613      	mov	r3, r2
 8005122:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	3301      	adds	r3, #1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetSysClockFreq+0x204>)
 8005142:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005148:	4618      	mov	r0, r3
 800514a:	3750      	adds	r7, #80	; 0x50
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	00f42400 	.word	0x00f42400
 800515c:	007a1200 	.word	0x007a1200

08005160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <HAL_RCC_GetHCLKFreq+0x14>)
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000008 	.word	0x20000008

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800517c:	f7ff fff0 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	0a9b      	lsrs	r3, r3, #10
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	; (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40023800 	.word	0x40023800
 800519c:	0800a1ec 	.word	0x0800a1ec

080051a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051a4:	f7ff ffdc 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0b5b      	lsrs	r3, r3, #13
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4903      	ldr	r1, [pc, #12]	; (80051c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40023800 	.word	0x40023800
 80051c4:	0800a1ec 	.word	0x0800a1ec

080051c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d075      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051fc:	4b91      	ldr	r3, [pc, #580]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005202:	f7fd fb0d 	bl	8002820 <HAL_GetTick>
 8005206:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005208:	e008      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800520a:	f7fd fb09 	bl	8002820 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e189      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800521c:	4b8a      	ldr	r3, [pc, #552]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f0      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d009      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	019a      	lsls	r2, r3, #6
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	071b      	lsls	r3, r3, #28
 8005240:	4981      	ldr	r1, [pc, #516]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01f      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005254:	4b7c      	ldr	r3, [pc, #496]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525a:	0f1b      	lsrs	r3, r3, #28
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	019a      	lsls	r2, r3, #6
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	061b      	lsls	r3, r3, #24
 800526e:	431a      	orrs	r2, r3
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	071b      	lsls	r3, r3, #28
 8005274:	4974      	ldr	r1, [pc, #464]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800527c:	4b72      	ldr	r3, [pc, #456]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800527e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005282:	f023 021f 	bic.w	r2, r3, #31
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	3b01      	subs	r3, #1
 800528c:	496e      	ldr	r1, [pc, #440]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	019a      	lsls	r2, r3, #6
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	061b      	lsls	r3, r3, #24
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	071b      	lsls	r3, r3, #28
 80052b4:	4964      	ldr	r1, [pc, #400]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052bc:	4b61      	ldr	r3, [pc, #388]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80052be:	2201      	movs	r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c2:	f7fd faad 	bl	8002820 <HAL_GetTick>
 80052c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052c8:	e008      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052ca:	f7fd faa9 	bl	8002820 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e129      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052dc:	4b5a      	ldr	r3, [pc, #360]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f0      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d105      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d079      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005300:	4b52      	ldr	r3, [pc, #328]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005306:	f7fd fa8b 	bl	8002820 <HAL_GetTick>
 800530a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800530e:	f7fd fa87 	bl	8002820 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e107      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005320:	4b49      	ldr	r3, [pc, #292]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800532c:	d0ef      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d020      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800533a:	4b43      	ldr	r3, [pc, #268]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	0f1b      	lsrs	r3, r3, #28
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	019a      	lsls	r2, r3, #6
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	431a      	orrs	r2, r3
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	071b      	lsls	r3, r3, #28
 800535a:	493b      	ldr	r1, [pc, #236]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005362:	4b39      	ldr	r3, [pc, #228]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005368:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	3b01      	subs	r3, #1
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	4934      	ldr	r1, [pc, #208]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01e      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005388:	4b2f      	ldr	r3, [pc, #188]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	0e1b      	lsrs	r3, r3, #24
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	019a      	lsls	r2, r3, #6
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	061b      	lsls	r3, r3, #24
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	071b      	lsls	r3, r3, #28
 80053a8:	4927      	ldr	r1, [pc, #156]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053b0:	4b25      	ldr	r3, [pc, #148]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	4922      	ldr	r1, [pc, #136]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053c6:	4b21      	ldr	r3, [pc, #132]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053cc:	f7fd fa28 	bl	8002820 <HAL_GetTick>
 80053d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053d4:	f7fd fa24 	bl	8002820 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e0a4      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053e6:	4b18      	ldr	r3, [pc, #96]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f2:	d1ef      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 808b 	beq.w	8005518 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	4a0f      	ldr	r2, [pc, #60]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005410:	6413      	str	r3, [r2, #64]	; 0x40
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005428:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800542a:	f7fd f9f9 	bl	8002820 <HAL_GetTick>
 800542e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005430:	e010      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005432:	f7fd f9f5 	bl	8002820 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d909      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e075      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005444:	42470068 	.word	0x42470068
 8005448:	40023800 	.word	0x40023800
 800544c:	42470070 	.word	0x42470070
 8005450:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005454:	4b38      	ldr	r3, [pc, #224]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0e8      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005460:	4b36      	ldr	r3, [pc, #216]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005468:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02f      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	429a      	cmp	r2, r3
 800547c:	d028      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800547e:	4b2f      	ldr	r3, [pc, #188]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005486:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800548e:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005494:	4a29      	ldr	r2, [pc, #164]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800549a:	4b28      	ldr	r3, [pc, #160]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d114      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054a6:	f7fd f9bb 	bl	8002820 <HAL_GetTick>
 80054aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fd f9b7 	bl	8002820 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e035      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c4:	4b1d      	ldr	r3, [pc, #116]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0ee      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054dc:	d10d      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80054de:	4b17      	ldr	r3, [pc, #92]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f2:	4912      	ldr	r1, [pc, #72]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	608b      	str	r3, [r1, #8]
 80054f8:	e005      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80054fa:	4b10      	ldr	r3, [pc, #64]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	4a0f      	ldr	r2, [pc, #60]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005500:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005504:	6093      	str	r3, [r2, #8]
 8005506:	4b0d      	ldr	r3, [pc, #52]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005512:	490a      	ldr	r1, [pc, #40]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005514:	4313      	orrs	r3, r2
 8005516:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800552c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40007000 	.word	0x40007000
 800553c:	40023800 	.word	0x40023800
 8005540:	42470e40 	.word	0x42470e40
 8005544:	424711e0 	.word	0x424711e0

08005548 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e066      	b.n	800562c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	7f5b      	ldrb	r3, [r3, #29]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc fed4 	bl	800231c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	22ca      	movs	r2, #202	; 0xca
 8005580:	625a      	str	r2, [r3, #36]	; 0x24
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2253      	movs	r2, #83	; 0x53
 8005588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa54 	bl	8005a38 <RTC_EnterInitMode>
 8005590:	4603      	mov	r3, r0
 8005592:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d12c      	bne.n	80055f4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6899      	ldr	r1, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68d2      	ldr	r2, [r2, #12]
 80055d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6919      	ldr	r1, [r3, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	041a      	lsls	r2, r3, #16
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa5b 	bl	8005aa6 <RTC_ExitInitMode>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d113      	bne.n	8005622 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	22ff      	movs	r2, #255	; 0xff
 8005628:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800562a:	7bfb      	ldrb	r3, [r7, #15]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	7f1b      	ldrb	r3, [r3, #28]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_RTC_SetTime+0x1c>
 800564c:	2302      	movs	r3, #2
 800564e:	e090      	b.n	8005772 <HAL_RTC_SetTime+0x13e>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2202      	movs	r2, #2
 800565a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d12c      	bne.n	80056bc <HAL_RTC_SetTime+0x88>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d102      	bne.n	8005676 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2200      	movs	r2, #0
 8005674:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f993 3000 	ldrsb.w	r3, [r3]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fa36 	bl	8005af0 <RTC_ByteToBcd2>
 8005684:	4603      	mov	r3, r0
 8005686:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fa2d 	bl	8005af0 <RTC_ByteToBcd2>
 8005696:	4603      	mov	r3, r0
 8005698:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800569a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fa23 	bl	8005af0 <RTC_ByteToBcd2>
 80056aa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	78db      	ldrb	r3, [r3, #3]
 80056b4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e01b      	b.n	80056f4 <HAL_RTC_SetTime+0xc0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <HAL_RTC_SetTime+0x9c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2200      	movs	r2, #0
 80056ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f993 3000 	ldrsb.w	r3, [r3]
 80056d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80056de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80056e0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	f992 2002 	ldrsb.w	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80056e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	78db      	ldrb	r3, [r3, #3]
 80056ee:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	22ca      	movs	r2, #202	; 0xca
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2253      	movs	r2, #83	; 0x53
 8005702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f997 	bl	8005a38 <RTC_EnterInitMode>
 800570a:	4603      	mov	r3, r0
 800570c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d120      	bne.n	8005756 <HAL_RTC_SetTime+0x122>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800571e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005722:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005732:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6899      	ldr	r1, [r3, #8]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	431a      	orrs	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f9aa 	bl	8005aa6 <RTC_ExitInitMode>
 8005752:	4603      	mov	r3, r0
 8005754:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	22ff      	movs	r2, #255	; 0xff
 8005768:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]

  return status;
 8005770:	7cfb      	ldrb	r3, [r7, #19]
}
 8005772:	4618      	mov	r0, r3
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd90      	pop	{r4, r7, pc}

0800577a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80057ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80057b0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	0c1b      	lsrs	r3, r3, #16
 80057b6:	b25b      	sxtb	r3, r3
 80057b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057bc:	b25a      	sxtb	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	0a1b      	lsrs	r3, r3, #8
 80057c6:	b25b      	sxtb	r3, r3
 80057c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057cc:	b25a      	sxtb	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	b25b      	sxtb	r3, r3
 80057d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057da:	b25a      	sxtb	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	0d9b      	lsrs	r3, r3, #22
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d120      	bne.n	8005838 <HAL_RTC_GetTime+0xbe>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f993 3000 	ldrsb.w	r3, [r3]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f993 	bl	8005b2a <RTC_Bcd2ToByte>
 8005804:	4603      	mov	r3, r0
 8005806:	b25a      	sxtb	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	4618      	mov	r0, r3
 8005816:	f000 f988 	bl	8005b2a <RTC_Bcd2ToByte>
 800581a:	4603      	mov	r3, r0
 800581c:	b25a      	sxtb	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f97d 	bl	8005b2a <RTC_Bcd2ToByte>
 8005830:	4603      	mov	r3, r0
 8005832:	b25a      	sxtb	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005842:	b590      	push	{r4, r7, lr}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	7f1b      	ldrb	r3, [r3, #28]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_RTC_SetDate+0x1c>
 800585a:	2302      	movs	r3, #2
 800585c:	e071      	b.n	8005942 <HAL_RTC_SetDate+0x100>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2202      	movs	r2, #2
 8005868:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10e      	bne.n	800588e <HAL_RTC_SetDate+0x4c>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	f023 0310 	bic.w	r3, r3, #16
 8005884:	b2db      	uxtb	r3, r3
 8005886:	330a      	adds	r3, #10
 8005888:	b2da      	uxtb	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11c      	bne.n	80058ce <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	78db      	ldrb	r3, [r3, #3]
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f929 	bl	8005af0 <RTC_ByteToBcd2>
 800589e:	4603      	mov	r3, r0
 80058a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f922 	bl	8005af0 <RTC_ByteToBcd2>
 80058ac:	4603      	mov	r3, r0
 80058ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	789b      	ldrb	r3, [r3, #2]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 f91a 	bl	8005af0 <RTC_ByteToBcd2>
 80058bc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058be:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e00e      	b.n	80058ec <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	78db      	ldrb	r3, [r3, #3]
 80058d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80058da:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80058e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	22ca      	movs	r2, #202	; 0xca
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2253      	movs	r2, #83	; 0x53
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f89b 	bl	8005a38 <RTC_EnterInitMode>
 8005902:	4603      	mov	r3, r0
 8005904:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005906:	7cfb      	ldrb	r3, [r7, #19]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10c      	bne.n	8005926 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005916:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800591a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f8c2 	bl	8005aa6 <RTC_ExitInitMode>
 8005922:	4603      	mov	r3, r0
 8005924:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005926:	7cfb      	ldrb	r3, [r7, #19]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	22ff      	movs	r2, #255	; 0xff
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]

  return status;
 8005940:	7cfb      	ldrb	r3, [r7, #19]
}
 8005942:	4618      	mov	r0, r3
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	bd90      	pop	{r4, r7, pc}

0800594a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b086      	sub	sp, #24
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005964:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005968:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	0c1b      	lsrs	r3, r3, #16
 800596e:	b2da      	uxtb	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	b2da      	uxtb	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800598c:	b2da      	uxtb	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	0b5b      	lsrs	r3, r3, #13
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d11a      	bne.n	80059de <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	78db      	ldrb	r3, [r3, #3]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 f8bc 	bl	8005b2a <RTC_Bcd2ToByte>
 80059b2:	4603      	mov	r3, r0
 80059b4:	461a      	mov	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f8b3 	bl	8005b2a <RTC_Bcd2ToByte>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	789b      	ldrb	r3, [r3, #2]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f8aa 	bl	8005b2a <RTC_Bcd2ToByte>
 80059d6:	4603      	mov	r3, r0
 80059d8:	461a      	mov	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a02:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a04:	f7fc ff0c 	bl	8002820 <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a0a:	e009      	b.n	8005a20 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a0c:	f7fc ff08 	bl	8002820 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a1a:	d901      	bls.n	8005a20 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e007      	b.n	8005a30 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0ee      	beq.n	8005a0c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d122      	bne.n	8005a9c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a66:	f7fc fedb 	bl	8002820 <HAL_GetTick>
 8005a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a6c:	e00c      	b.n	8005a88 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a6e:	f7fc fed7 	bl	8002820 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a7c:	d904      	bls.n	8005a88 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2204      	movs	r2, #4
 8005a82:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <RTC_EnterInitMode+0x64>
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d1e8      	bne.n	8005a6e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ac0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff ff89 	bl	80059e8 <HAL_RTC_WaitForSynchro>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2204      	movs	r2, #4
 8005ae0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005afe:	e005      	b.n	8005b0c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	3301      	adds	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	3b0a      	subs	r3, #10
 8005b0a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	2b09      	cmp	r3, #9
 8005b10:	d8f6      	bhi.n	8005b00 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	b2db      	uxtb	r3, r3
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	4603      	mov	r3, r0
 8005b32:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	091b      	lsrs	r3, r3, #4
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	0092      	lsls	r2, r2, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	4413      	add	r3, r2
 8005b54:	b2db      	uxtb	r3, r3
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e041      	b.n	8005bf8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fc fbf1 	bl	8002370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f000 fafd 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d001      	beq.n	8005c18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e046      	b.n	8005ca6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a23      	ldr	r2, [pc, #140]	; (8005cb4 <HAL_TIM_Base_Start+0xb4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d022      	beq.n	8005c70 <HAL_TIM_Base_Start+0x70>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c32:	d01d      	beq.n	8005c70 <HAL_TIM_Base_Start+0x70>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1f      	ldr	r2, [pc, #124]	; (8005cb8 <HAL_TIM_Base_Start+0xb8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <HAL_TIM_Base_Start+0x70>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1e      	ldr	r2, [pc, #120]	; (8005cbc <HAL_TIM_Base_Start+0xbc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <HAL_TIM_Base_Start+0x70>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <HAL_TIM_Base_Start+0xc0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <HAL_TIM_Base_Start+0x70>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <HAL_TIM_Base_Start+0xc4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_TIM_Base_Start+0x70>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <HAL_TIM_Base_Start+0xc8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_TIM_Base_Start+0x70>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <HAL_TIM_Base_Start+0xcc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d111      	bne.n	8005c94 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b06      	cmp	r3, #6
 8005c80:	d010      	beq.n	8005ca4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c92:	e007      	b.n	8005ca4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40010400 	.word	0x40010400
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40001800 	.word	0x40001800

08005cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d001      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e04e      	b.n	8005d86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a23      	ldr	r2, [pc, #140]	; (8005d94 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d022      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d12:	d01d      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d018      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <HAL_TIM_Base_Start_IT+0xcc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00e      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d009      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d004      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a18      	ldr	r2, [pc, #96]	; (8005dac <HAL_TIM_Base_Start_IT+0xdc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d111      	bne.n	8005d74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	d010      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d72:	e007      	b.n	8005d84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	40000800 	.word	0x40000800
 8005da0:	40000c00 	.word	0x40000c00
 8005da4:	40010400 	.word	0x40010400
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40001800 	.word	0x40001800

08005db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d122      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d11b      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0202 	mvn.w	r2, #2
 8005ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9b5 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005df8:	e005      	b.n	8005e06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f9a7 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f9b8 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d122      	bne.n	8005e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d11b      	bne.n	8005e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0204 	mvn.w	r2, #4
 8005e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f98b 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005e4c:	e005      	b.n	8005e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f97d 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f98e 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d122      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d11b      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0208 	mvn.w	r2, #8
 8005e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f961 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005ea0:	e005      	b.n	8005eae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f953 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f964 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d122      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d11b      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0210 	mvn.w	r2, #16
 8005ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2208      	movs	r2, #8
 8005ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f937 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f929 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f93a 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d10e      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d107      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0201 	mvn.w	r2, #1
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fc f836 	bl	8001fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b80      	cmp	r3, #128	; 0x80
 8005f40:	d10e      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4c:	2b80      	cmp	r3, #128	; 0x80
 8005f4e:	d107      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fae0 	bl	8006520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d10e      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	d107      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8ff 	bl	800618a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d10e      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d107      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0220 	mvn.w	r2, #32
 8005fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 faaa 	bl	800650c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIM_ConfigClockSource+0x1c>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e0b4      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x186>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006014:	d03e      	beq.n	8006094 <HAL_TIM_ConfigClockSource+0xd4>
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800601a:	f200 8087 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800601e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006022:	f000 8086 	beq.w	8006132 <HAL_TIM_ConfigClockSource+0x172>
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602a:	d87f      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800602c:	2b70      	cmp	r3, #112	; 0x70
 800602e:	d01a      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0xa6>
 8006030:	2b70      	cmp	r3, #112	; 0x70
 8006032:	d87b      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 8006034:	2b60      	cmp	r3, #96	; 0x60
 8006036:	d050      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x11a>
 8006038:	2b60      	cmp	r3, #96	; 0x60
 800603a:	d877      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800603c:	2b50      	cmp	r3, #80	; 0x50
 800603e:	d03c      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0xfa>
 8006040:	2b50      	cmp	r3, #80	; 0x50
 8006042:	d873      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d058      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x13a>
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d86f      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800604c:	2b30      	cmp	r3, #48	; 0x30
 800604e:	d064      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x15a>
 8006050:	2b30      	cmp	r3, #48	; 0x30
 8006052:	d86b      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 8006054:	2b20      	cmp	r3, #32
 8006056:	d060      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x15a>
 8006058:	2b20      	cmp	r3, #32
 800605a:	d867      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d05c      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x15a>
 8006060:	2b10      	cmp	r3, #16
 8006062:	d05a      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x15a>
 8006064:	e062      	b.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	6899      	ldr	r1, [r3, #8]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f000 f9ad 	bl	80063d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	609a      	str	r2, [r3, #8]
      break;
 8006092:	e04f      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6899      	ldr	r1, [r3, #8]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f000 f996 	bl	80063d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060b6:	609a      	str	r2, [r3, #8]
      break;
 80060b8:	e03c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f000 f90a 	bl	80062e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2150      	movs	r1, #80	; 0x50
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f963 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 80060d8:	e02c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6859      	ldr	r1, [r3, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f000 f929 	bl	800633e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2160      	movs	r1, #96	; 0x60
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f953 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 80060f8:	e01c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6859      	ldr	r1, [r3, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	461a      	mov	r2, r3
 8006108:	f000 f8ea 	bl	80062e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2140      	movs	r1, #64	; 0x40
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f943 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 8006118:	e00c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f000 f93a 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 800612a:	e003      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
      break;
 8006130:	e000      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a40      	ldr	r2, [pc, #256]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061be:	d00f      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a3d      	ldr	r2, [pc, #244]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00b      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a3c      	ldr	r2, [pc, #240]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d007      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3b      	ldr	r2, [pc, #236]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3a      	ldr	r2, [pc, #232]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d108      	bne.n	80061f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2f      	ldr	r2, [pc, #188]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d02b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006200:	d027      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d023      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2b      	ldr	r2, [pc, #172]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01f      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d017      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <TIM_Base_SetConfig+0x128>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a27      	ldr	r2, [pc, #156]	; (80062cc <TIM_Base_SetConfig+0x12c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00f      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a26      	ldr	r2, [pc, #152]	; (80062d0 <TIM_Base_SetConfig+0x130>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <TIM_Base_SetConfig+0x134>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d007      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <TIM_Base_SetConfig+0x138>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a23      	ldr	r2, [pc, #140]	; (80062dc <TIM_Base_SetConfig+0x13c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d108      	bne.n	8006264 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a0a      	ldr	r2, [pc, #40]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_Base_SetConfig+0xf8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a0c      	ldr	r2, [pc, #48]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d103      	bne.n	80062a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	615a      	str	r2, [r3, #20]
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40010400 	.word	0x40010400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800
 80062d4:	40001800 	.word	0x40001800
 80062d8:	40001c00 	.word	0x40001c00
 80062dc:	40002000 	.word	0x40002000

080062e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f023 0201 	bic.w	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800630a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 030a 	bic.w	r3, r3, #10
 800631c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800633e:	b480      	push	{r7}
 8006340:	b087      	sub	sp, #28
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0210 	bic.w	r2, r3, #16
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800637a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f043 0307 	orr.w	r3, r3, #7
 80063c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	021a      	lsls	r2, r3, #8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	bf00      	nop
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006428:	2302      	movs	r3, #2
 800642a:	e05a      	b.n	80064e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006478:	d01d      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a18      	ldr	r2, [pc, #96]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a15      	ldr	r2, [pc, #84]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d10c      	bne.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40010400 	.word	0x40010400
 8006504:	40014000 	.word	0x40014000
 8006508:	40001800 	.word	0x40001800

0800650c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e03f      	b.n	80065c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fb ff3e 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2224      	movs	r2, #36	; 0x24
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f929 	bl	80067d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800658c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800659c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b08a      	sub	sp, #40	; 0x28
 80065d2:	af02      	add	r7, sp, #8
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d17c      	bne.n	80066e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HAL_UART_Transmit+0x2c>
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e075      	b.n	80066ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_UART_Transmit+0x3e>
 8006608:	2302      	movs	r3, #2
 800660a:	e06e      	b.n	80066ea <HAL_UART_Transmit+0x11c>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2221      	movs	r2, #33	; 0x21
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006622:	f7fc f8fd 	bl	8002820 <HAL_GetTick>
 8006626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663c:	d108      	bne.n	8006650 <HAL_UART_Transmit+0x82>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e003      	b.n	8006658 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006654:	2300      	movs	r3, #0
 8006656:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006660:	e02a      	b.n	80066b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2200      	movs	r2, #0
 800666a:	2180      	movs	r1, #128	; 0x80
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f840 	bl	80066f2 <UART_WaitOnFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e036      	b.n	80066ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	3302      	adds	r3, #2
 8006696:	61bb      	str	r3, [r7, #24]
 8006698:	e007      	b.n	80066aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	3301      	adds	r3, #1
 80066a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1cf      	bne.n	8006662 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2140      	movs	r1, #64	; 0x40
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f810 	bl	80066f2 <UART_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e006      	b.n	80066ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e000      	b.n	80066ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066e8:	2302      	movs	r3, #2
  }
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b090      	sub	sp, #64	; 0x40
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	603b      	str	r3, [r7, #0]
 80066fe:	4613      	mov	r3, r2
 8006700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006702:	e050      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d04c      	beq.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800670c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <UART_WaitOnFlagUntilTimeout+0x30>
 8006712:	f7fc f885 	bl	8002820 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800671e:	429a      	cmp	r2, r3
 8006720:	d241      	bcs.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	330c      	adds	r3, #12
 8006728:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330c      	adds	r3, #12
 8006740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006742:	637a      	str	r2, [r7, #52]	; 0x34
 8006744:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e5      	bne.n	8006722 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3314      	adds	r3, #20
 800675c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	613b      	str	r3, [r7, #16]
   return(result);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	63bb      	str	r3, [r7, #56]	; 0x38
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3314      	adds	r3, #20
 8006774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006776:	623a      	str	r2, [r7, #32]
 8006778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	69f9      	ldr	r1, [r7, #28]
 800677c:	6a3a      	ldr	r2, [r7, #32]
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	61bb      	str	r3, [r7, #24]
   return(result);
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e5      	bne.n	8006756 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e00f      	b.n	80067c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4013      	ands	r3, r2
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	bf0c      	ite	eq
 80067b6:	2301      	moveq	r3, #1
 80067b8:	2300      	movne	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d09f      	beq.n	8006704 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3740      	adds	r7, #64	; 0x40
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d4:	b0c0      	sub	sp, #256	; 0x100
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ec:	68d9      	ldr	r1, [r3, #12]
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	ea40 0301 	orr.w	r3, r0, r1
 80067f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	431a      	orrs	r2, r3
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	431a      	orrs	r2, r3
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006828:	f021 010c 	bic.w	r1, r1, #12
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006836:	430b      	orrs	r3, r1
 8006838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800683a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684a:	6999      	ldr	r1, [r3, #24]
 800684c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	ea40 0301 	orr.w	r3, r0, r1
 8006856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b8f      	ldr	r3, [pc, #572]	; (8006a9c <UART_SetConfig+0x2cc>)
 8006860:	429a      	cmp	r2, r3
 8006862:	d005      	beq.n	8006870 <UART_SetConfig+0xa0>
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4b8d      	ldr	r3, [pc, #564]	; (8006aa0 <UART_SetConfig+0x2d0>)
 800686c:	429a      	cmp	r2, r3
 800686e:	d104      	bne.n	800687a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006870:	f7fe fc96 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8006874:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006878:	e003      	b.n	8006882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800687a:	f7fe fc7d 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 800687e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688c:	f040 810c 	bne.w	8006aa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006894:	2200      	movs	r2, #0
 8006896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800689a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800689e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068a2:	4622      	mov	r2, r4
 80068a4:	462b      	mov	r3, r5
 80068a6:	1891      	adds	r1, r2, r2
 80068a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80068aa:	415b      	adcs	r3, r3
 80068ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068b2:	4621      	mov	r1, r4
 80068b4:	eb12 0801 	adds.w	r8, r2, r1
 80068b8:	4629      	mov	r1, r5
 80068ba:	eb43 0901 	adc.w	r9, r3, r1
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068d2:	4690      	mov	r8, r2
 80068d4:	4699      	mov	r9, r3
 80068d6:	4623      	mov	r3, r4
 80068d8:	eb18 0303 	adds.w	r3, r8, r3
 80068dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068e0:	462b      	mov	r3, r5
 80068e2:	eb49 0303 	adc.w	r3, r9, r3
 80068e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068fe:	460b      	mov	r3, r1
 8006900:	18db      	adds	r3, r3, r3
 8006902:	653b      	str	r3, [r7, #80]	; 0x50
 8006904:	4613      	mov	r3, r2
 8006906:	eb42 0303 	adc.w	r3, r2, r3
 800690a:	657b      	str	r3, [r7, #84]	; 0x54
 800690c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006914:	f7fa f958 	bl	8000bc8 <__aeabi_uldivmod>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4b61      	ldr	r3, [pc, #388]	; (8006aa4 <UART_SetConfig+0x2d4>)
 800691e:	fba3 2302 	umull	r2, r3, r3, r2
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	011c      	lsls	r4, r3, #4
 8006926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800692a:	2200      	movs	r2, #0
 800692c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006930:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	1891      	adds	r1, r2, r2
 800693e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006940:	415b      	adcs	r3, r3
 8006942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006948:	4641      	mov	r1, r8
 800694a:	eb12 0a01 	adds.w	sl, r2, r1
 800694e:	4649      	mov	r1, r9
 8006950:	eb43 0b01 	adc.w	fp, r3, r1
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006968:	4692      	mov	sl, r2
 800696a:	469b      	mov	fp, r3
 800696c:	4643      	mov	r3, r8
 800696e:	eb1a 0303 	adds.w	r3, sl, r3
 8006972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006976:	464b      	mov	r3, r9
 8006978:	eb4b 0303 	adc.w	r3, fp, r3
 800697c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800698c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006994:	460b      	mov	r3, r1
 8006996:	18db      	adds	r3, r3, r3
 8006998:	643b      	str	r3, [r7, #64]	; 0x40
 800699a:	4613      	mov	r3, r2
 800699c:	eb42 0303 	adc.w	r3, r2, r3
 80069a0:	647b      	str	r3, [r7, #68]	; 0x44
 80069a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069aa:	f7fa f90d 	bl	8000bc8 <__aeabi_uldivmod>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4611      	mov	r1, r2
 80069b4:	4b3b      	ldr	r3, [pc, #236]	; (8006aa4 <UART_SetConfig+0x2d4>)
 80069b6:	fba3 2301 	umull	r2, r3, r3, r1
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2264      	movs	r2, #100	; 0x64
 80069be:	fb02 f303 	mul.w	r3, r2, r3
 80069c2:	1acb      	subs	r3, r1, r3
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069ca:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <UART_SetConfig+0x2d4>)
 80069cc:	fba3 2302 	umull	r2, r3, r3, r2
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069d8:	441c      	add	r4, r3
 80069da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	1891      	adds	r1, r2, r2
 80069f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80069f4:	415b      	adcs	r3, r3
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069fc:	4641      	mov	r1, r8
 80069fe:	1851      	adds	r1, r2, r1
 8006a00:	6339      	str	r1, [r7, #48]	; 0x30
 8006a02:	4649      	mov	r1, r9
 8006a04:	414b      	adcs	r3, r1
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a14:	4659      	mov	r1, fp
 8006a16:	00cb      	lsls	r3, r1, #3
 8006a18:	4651      	mov	r1, sl
 8006a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a1e:	4651      	mov	r1, sl
 8006a20:	00ca      	lsls	r2, r1, #3
 8006a22:	4610      	mov	r0, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	4642      	mov	r2, r8
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a30:	464b      	mov	r3, r9
 8006a32:	460a      	mov	r2, r1
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a50:	460b      	mov	r3, r1
 8006a52:	18db      	adds	r3, r3, r3
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a56:	4613      	mov	r3, r2
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a66:	f7fa f8af 	bl	8000bc8 <__aeabi_uldivmod>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <UART_SetConfig+0x2d4>)
 8006a70:	fba3 1302 	umull	r1, r3, r3, r2
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	2164      	movs	r1, #100	; 0x64
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	3332      	adds	r3, #50	; 0x32
 8006a82:	4a08      	ldr	r2, [pc, #32]	; (8006aa4 <UART_SetConfig+0x2d4>)
 8006a84:	fba2 2303 	umull	r2, r3, r2, r3
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	f003 0207 	and.w	r2, r3, #7
 8006a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4422      	add	r2, r4
 8006a96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a98:	e106      	b.n	8006ca8 <UART_SetConfig+0x4d8>
 8006a9a:	bf00      	nop
 8006a9c:	40011000 	.word	0x40011000
 8006aa0:	40011400 	.word	0x40011400
 8006aa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006aba:	4642      	mov	r2, r8
 8006abc:	464b      	mov	r3, r9
 8006abe:	1891      	adds	r1, r2, r2
 8006ac0:	6239      	str	r1, [r7, #32]
 8006ac2:	415b      	adcs	r3, r3
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aca:	4641      	mov	r1, r8
 8006acc:	1854      	adds	r4, r2, r1
 8006ace:	4649      	mov	r1, r9
 8006ad0:	eb43 0501 	adc.w	r5, r3, r1
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	00eb      	lsls	r3, r5, #3
 8006ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ae2:	00e2      	lsls	r2, r4, #3
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	461d      	mov	r5, r3
 8006ae8:	4643      	mov	r3, r8
 8006aea:	18e3      	adds	r3, r4, r3
 8006aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006af0:	464b      	mov	r3, r9
 8006af2:	eb45 0303 	adc.w	r3, r5, r3
 8006af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b16:	4629      	mov	r1, r5
 8006b18:	008b      	lsls	r3, r1, #2
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b20:	4621      	mov	r1, r4
 8006b22:	008a      	lsls	r2, r1, #2
 8006b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b28:	f7fa f84e 	bl	8000bc8 <__aeabi_uldivmod>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4b60      	ldr	r3, [pc, #384]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006b32:	fba3 2302 	umull	r2, r3, r3, r2
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	011c      	lsls	r4, r3, #4
 8006b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	464b      	mov	r3, r9
 8006b50:	1891      	adds	r1, r2, r2
 8006b52:	61b9      	str	r1, [r7, #24]
 8006b54:	415b      	adcs	r3, r3
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b5c:	4641      	mov	r1, r8
 8006b5e:	1851      	adds	r1, r2, r1
 8006b60:	6139      	str	r1, [r7, #16]
 8006b62:	4649      	mov	r1, r9
 8006b64:	414b      	adcs	r3, r1
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b74:	4659      	mov	r1, fp
 8006b76:	00cb      	lsls	r3, r1, #3
 8006b78:	4651      	mov	r1, sl
 8006b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b7e:	4651      	mov	r1, sl
 8006b80:	00ca      	lsls	r2, r1, #3
 8006b82:	4610      	mov	r0, r2
 8006b84:	4619      	mov	r1, r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	4642      	mov	r2, r8
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b90:	464b      	mov	r3, r9
 8006b92:	460a      	mov	r2, r1
 8006b94:	eb42 0303 	adc.w	r3, r2, r3
 8006b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ba6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	008b      	lsls	r3, r1, #2
 8006bb8:	4641      	mov	r1, r8
 8006bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	008a      	lsls	r2, r1, #2
 8006bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bc6:	f7f9 ffff 	bl	8000bc8 <__aeabi_uldivmod>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4b38      	ldr	r3, [pc, #224]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	2264      	movs	r2, #100	; 0x64
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	1acb      	subs	r3, r1, r3
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	3332      	adds	r3, #50	; 0x32
 8006be4:	4a33      	ldr	r2, [pc, #204]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bf0:	441c      	add	r4, r3
 8006bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	673b      	str	r3, [r7, #112]	; 0x70
 8006bfa:	677a      	str	r2, [r7, #116]	; 0x74
 8006bfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c00:	4642      	mov	r2, r8
 8006c02:	464b      	mov	r3, r9
 8006c04:	1891      	adds	r1, r2, r2
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	415b      	adcs	r3, r3
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c10:	4641      	mov	r1, r8
 8006c12:	1851      	adds	r1, r2, r1
 8006c14:	6039      	str	r1, [r7, #0]
 8006c16:	4649      	mov	r1, r9
 8006c18:	414b      	adcs	r3, r1
 8006c1a:	607b      	str	r3, [r7, #4]
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	f04f 0300 	mov.w	r3, #0
 8006c24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c28:	4659      	mov	r1, fp
 8006c2a:	00cb      	lsls	r3, r1, #3
 8006c2c:	4651      	mov	r1, sl
 8006c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c32:	4651      	mov	r1, sl
 8006c34:	00ca      	lsls	r2, r1, #3
 8006c36:	4610      	mov	r0, r2
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	189b      	adds	r3, r3, r2
 8006c40:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c42:	464b      	mov	r3, r9
 8006c44:	460a      	mov	r2, r1
 8006c46:	eb42 0303 	adc.w	r3, r2, r3
 8006c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	663b      	str	r3, [r7, #96]	; 0x60
 8006c56:	667a      	str	r2, [r7, #100]	; 0x64
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c64:	4649      	mov	r1, r9
 8006c66:	008b      	lsls	r3, r1, #2
 8006c68:	4641      	mov	r1, r8
 8006c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c6e:	4641      	mov	r1, r8
 8006c70:	008a      	lsls	r2, r1, #2
 8006c72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c76:	f7f9 ffa7 	bl	8000bc8 <__aeabi_uldivmod>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006c80:	fba3 1302 	umull	r1, r3, r3, r2
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	2164      	movs	r1, #100	; 0x64
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	3332      	adds	r3, #50	; 0x32
 8006c92:	4a08      	ldr	r2, [pc, #32]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006c94:	fba2 2303 	umull	r2, r3, r2, r3
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	f003 020f 	and.w	r2, r3, #15
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4422      	add	r2, r4
 8006ca6:	609a      	str	r2, [r3, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb4:	51eb851f 	.word	0x51eb851f

08006cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cb8:	b084      	sub	sp, #16
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	f107 001c 	add.w	r0, r7, #28
 8006cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d122      	bne.n	8006d16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d105      	bne.n	8006d0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 faa2 	bl	8007254 <USB_CoreReset>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	e01a      	b.n	8006d4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa96 	bl	8007254 <USB_CoreReset>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	639a      	str	r2, [r3, #56]	; 0x38
 8006d3e:	e005      	b.n	8006d4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10b      	bne.n	8006d6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f043 0206 	orr.w	r2, r3, #6
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d76:	b004      	add	sp, #16
 8006d78:	4770      	bx	lr

08006d7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 0201 	bic.w	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d115      	bne.n	8006dea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dca:	2001      	movs	r0, #1
 8006dcc:	f7fb fd34 	bl	8002838 <HAL_Delay>
      ms++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa2e 	bl	8007238 <USB_GetMode>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d01e      	beq.n	8006e20 <USB_SetCurrentMode+0x84>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b31      	cmp	r3, #49	; 0x31
 8006de6:	d9f0      	bls.n	8006dca <USB_SetCurrentMode+0x2e>
 8006de8:	e01a      	b.n	8006e20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d115      	bne.n	8006e1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	f7fb fd1b 	bl	8002838 <HAL_Delay>
      ms++;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa15 	bl	8007238 <USB_GetMode>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <USB_SetCurrentMode+0x84>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b31      	cmp	r3, #49	; 0x31
 8006e18:	d9f0      	bls.n	8006dfc <USB_SetCurrentMode+0x60>
 8006e1a:	e001      	b.n	8006e20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e005      	b.n	8006e2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b32      	cmp	r3, #50	; 0x32
 8006e24:	d101      	bne.n	8006e2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e34:	b084      	sub	sp, #16
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	e009      	b.n	8006e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	3340      	adds	r3, #64	; 0x40
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	2200      	movs	r2, #0
 8006e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	3301      	adds	r3, #1
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	2b0e      	cmp	r3, #14
 8006e6c:	d9f2      	bls.n	8006e54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d11c      	bne.n	8006eae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e82:	f043 0302 	orr.w	r3, r3, #2
 8006e86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
 8006eac:	e00b      	b.n	8006ec6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ecc:	461a      	mov	r2, r3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed8:	4619      	mov	r1, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	680b      	ldr	r3, [r1, #0]
 8006ee4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d10c      	bne.n	8006f06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f965 	bl	80071c4 <USB_SetDevSpeed>
 8006efa:	e008      	b.n	8006f0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006efc:	2101      	movs	r1, #1
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f960 	bl	80071c4 <USB_SetDevSpeed>
 8006f04:	e003      	b.n	8006f0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f06:	2103      	movs	r1, #3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f95b 	bl	80071c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f0e:	2110      	movs	r1, #16
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f8f3 	bl	80070fc <USB_FlushTxFifo>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f91f 	bl	8007164 <USB_FlushRxFifo>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	461a      	mov	r2, r3
 8006f38:	2300      	movs	r3, #0
 8006f3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f42:	461a      	mov	r2, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f54:	2300      	movs	r3, #0
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	e043      	b.n	8006fe2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f70:	d118      	bne.n	8006fa4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f84:	461a      	mov	r2, r3
 8006f86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	e013      	b.n	8006fb6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e008      	b.n	8006fb6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d3b7      	bcc.n	8006f5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fea:	2300      	movs	r3, #0
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	e043      	b.n	8007078 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007006:	d118      	bne.n	800703a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	461a      	mov	r2, r3
 800701c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e013      	b.n	800704c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007030:	461a      	mov	r2, r3
 8007032:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e008      	b.n	800704c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007046:	461a      	mov	r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	461a      	mov	r2, r3
 800705a:	2300      	movs	r3, #0
 800705c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706a:	461a      	mov	r2, r3
 800706c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007070:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3301      	adds	r3, #1
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	429a      	cmp	r2, r3
 800707e:	d3b7      	bcc.n	8006ff0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800708e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007092:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f043 0210 	orr.w	r2, r3, #16
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <USB_DevInit+0x2c4>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	f043 0208 	orr.w	r2, r3, #8
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d107      	bne.n	80070e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070e0:	f043 0304 	orr.w	r3, r3, #4
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f4:	b004      	add	sp, #16
 80070f6:	4770      	bx	lr
 80070f8:	803c3800 	.word	0x803c3800

080070fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a13      	ldr	r2, [pc, #76]	; (8007160 <USB_FlushTxFifo+0x64>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e01b      	b.n	8007154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	daf2      	bge.n	800710a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	019b      	lsls	r3, r3, #6
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4a08      	ldr	r2, [pc, #32]	; (8007160 <USB_FlushTxFifo+0x64>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e006      	b.n	8007154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b20      	cmp	r3, #32
 8007150:	d0f0      	beq.n	8007134 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	00030d40 	.word	0x00030d40

08007164 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4a11      	ldr	r2, [pc, #68]	; (80071c0 <USB_FlushRxFifo+0x5c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d901      	bls.n	8007182 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e018      	b.n	80071b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	daf2      	bge.n	8007170 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2210      	movs	r2, #16
 8007192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4a08      	ldr	r2, [pc, #32]	; (80071c0 <USB_FlushRxFifo+0x5c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d901      	bls.n	80071a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e006      	b.n	80071b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d0f0      	beq.n	8007194 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	00030d40 	.word	0x00030d40

080071c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e4:	4313      	orrs	r3, r2
 80071e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007224:	f043 0302 	orr.w	r3, r3, #2
 8007228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	f003 0301 	and.w	r3, r3, #1
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <USB_CoreReset+0x64>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d901      	bls.n	8007272 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e01b      	b.n	80072aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	daf2      	bge.n	8007260 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f043 0201 	orr.w	r2, r3, #1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3301      	adds	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <USB_CoreReset+0x64>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d901      	bls.n	800729c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e006      	b.n	80072aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d0f0      	beq.n	800728a <USB_CoreReset+0x36>

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	00030d40 	.word	0x00030d40

080072bc <__cvt>:
 80072bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	ec55 4b10 	vmov	r4, r5, d0
 80072c4:	2d00      	cmp	r5, #0
 80072c6:	460e      	mov	r6, r1
 80072c8:	4619      	mov	r1, r3
 80072ca:	462b      	mov	r3, r5
 80072cc:	bfbb      	ittet	lt
 80072ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072d2:	461d      	movlt	r5, r3
 80072d4:	2300      	movge	r3, #0
 80072d6:	232d      	movlt	r3, #45	; 0x2d
 80072d8:	700b      	strb	r3, [r1, #0]
 80072da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072e0:	4691      	mov	r9, r2
 80072e2:	f023 0820 	bic.w	r8, r3, #32
 80072e6:	bfbc      	itt	lt
 80072e8:	4622      	movlt	r2, r4
 80072ea:	4614      	movlt	r4, r2
 80072ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072f0:	d005      	beq.n	80072fe <__cvt+0x42>
 80072f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072f6:	d100      	bne.n	80072fa <__cvt+0x3e>
 80072f8:	3601      	adds	r6, #1
 80072fa:	2102      	movs	r1, #2
 80072fc:	e000      	b.n	8007300 <__cvt+0x44>
 80072fe:	2103      	movs	r1, #3
 8007300:	ab03      	add	r3, sp, #12
 8007302:	9301      	str	r3, [sp, #4]
 8007304:	ab02      	add	r3, sp, #8
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	ec45 4b10 	vmov	d0, r4, r5
 800730c:	4653      	mov	r3, sl
 800730e:	4632      	mov	r2, r6
 8007310:	f000 ff9e 	bl	8008250 <_dtoa_r>
 8007314:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007318:	4607      	mov	r7, r0
 800731a:	d102      	bne.n	8007322 <__cvt+0x66>
 800731c:	f019 0f01 	tst.w	r9, #1
 8007320:	d022      	beq.n	8007368 <__cvt+0xac>
 8007322:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007326:	eb07 0906 	add.w	r9, r7, r6
 800732a:	d110      	bne.n	800734e <__cvt+0x92>
 800732c:	783b      	ldrb	r3, [r7, #0]
 800732e:	2b30      	cmp	r3, #48	; 0x30
 8007330:	d10a      	bne.n	8007348 <__cvt+0x8c>
 8007332:	2200      	movs	r2, #0
 8007334:	2300      	movs	r3, #0
 8007336:	4620      	mov	r0, r4
 8007338:	4629      	mov	r1, r5
 800733a:	f7f9 fbd5 	bl	8000ae8 <__aeabi_dcmpeq>
 800733e:	b918      	cbnz	r0, 8007348 <__cvt+0x8c>
 8007340:	f1c6 0601 	rsb	r6, r6, #1
 8007344:	f8ca 6000 	str.w	r6, [sl]
 8007348:	f8da 3000 	ldr.w	r3, [sl]
 800734c:	4499      	add	r9, r3
 800734e:	2200      	movs	r2, #0
 8007350:	2300      	movs	r3, #0
 8007352:	4620      	mov	r0, r4
 8007354:	4629      	mov	r1, r5
 8007356:	f7f9 fbc7 	bl	8000ae8 <__aeabi_dcmpeq>
 800735a:	b108      	cbz	r0, 8007360 <__cvt+0xa4>
 800735c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007360:	2230      	movs	r2, #48	; 0x30
 8007362:	9b03      	ldr	r3, [sp, #12]
 8007364:	454b      	cmp	r3, r9
 8007366:	d307      	bcc.n	8007378 <__cvt+0xbc>
 8007368:	9b03      	ldr	r3, [sp, #12]
 800736a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800736c:	1bdb      	subs	r3, r3, r7
 800736e:	4638      	mov	r0, r7
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	b004      	add	sp, #16
 8007374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007378:	1c59      	adds	r1, r3, #1
 800737a:	9103      	str	r1, [sp, #12]
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e7f0      	b.n	8007362 <__cvt+0xa6>

08007380 <__exponent>:
 8007380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007382:	4603      	mov	r3, r0
 8007384:	2900      	cmp	r1, #0
 8007386:	bfb8      	it	lt
 8007388:	4249      	neglt	r1, r1
 800738a:	f803 2b02 	strb.w	r2, [r3], #2
 800738e:	bfb4      	ite	lt
 8007390:	222d      	movlt	r2, #45	; 0x2d
 8007392:	222b      	movge	r2, #43	; 0x2b
 8007394:	2909      	cmp	r1, #9
 8007396:	7042      	strb	r2, [r0, #1]
 8007398:	dd2a      	ble.n	80073f0 <__exponent+0x70>
 800739a:	f10d 0207 	add.w	r2, sp, #7
 800739e:	4617      	mov	r7, r2
 80073a0:	260a      	movs	r6, #10
 80073a2:	4694      	mov	ip, r2
 80073a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80073a8:	fb06 1415 	mls	r4, r6, r5, r1
 80073ac:	3430      	adds	r4, #48	; 0x30
 80073ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80073b2:	460c      	mov	r4, r1
 80073b4:	2c63      	cmp	r4, #99	; 0x63
 80073b6:	f102 32ff 	add.w	r2, r2, #4294967295
 80073ba:	4629      	mov	r1, r5
 80073bc:	dcf1      	bgt.n	80073a2 <__exponent+0x22>
 80073be:	3130      	adds	r1, #48	; 0x30
 80073c0:	f1ac 0402 	sub.w	r4, ip, #2
 80073c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80073c8:	1c41      	adds	r1, r0, #1
 80073ca:	4622      	mov	r2, r4
 80073cc:	42ba      	cmp	r2, r7
 80073ce:	d30a      	bcc.n	80073e6 <__exponent+0x66>
 80073d0:	f10d 0209 	add.w	r2, sp, #9
 80073d4:	eba2 020c 	sub.w	r2, r2, ip
 80073d8:	42bc      	cmp	r4, r7
 80073da:	bf88      	it	hi
 80073dc:	2200      	movhi	r2, #0
 80073de:	4413      	add	r3, r2
 80073e0:	1a18      	subs	r0, r3, r0
 80073e2:	b003      	add	sp, #12
 80073e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80073ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80073ee:	e7ed      	b.n	80073cc <__exponent+0x4c>
 80073f0:	2330      	movs	r3, #48	; 0x30
 80073f2:	3130      	adds	r1, #48	; 0x30
 80073f4:	7083      	strb	r3, [r0, #2]
 80073f6:	70c1      	strb	r1, [r0, #3]
 80073f8:	1d03      	adds	r3, r0, #4
 80073fa:	e7f1      	b.n	80073e0 <__exponent+0x60>

080073fc <_printf_float>:
 80073fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007400:	ed2d 8b02 	vpush	{d8}
 8007404:	b08d      	sub	sp, #52	; 0x34
 8007406:	460c      	mov	r4, r1
 8007408:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800740c:	4616      	mov	r6, r2
 800740e:	461f      	mov	r7, r3
 8007410:	4605      	mov	r5, r0
 8007412:	f000 fe1d 	bl	8008050 <_localeconv_r>
 8007416:	f8d0 a000 	ldr.w	sl, [r0]
 800741a:	4650      	mov	r0, sl
 800741c:	f7f8 ff38 	bl	8000290 <strlen>
 8007420:	2300      	movs	r3, #0
 8007422:	930a      	str	r3, [sp, #40]	; 0x28
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	9305      	str	r3, [sp, #20]
 8007428:	f8d8 3000 	ldr.w	r3, [r8]
 800742c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007430:	3307      	adds	r3, #7
 8007432:	f023 0307 	bic.w	r3, r3, #7
 8007436:	f103 0208 	add.w	r2, r3, #8
 800743a:	f8c8 2000 	str.w	r2, [r8]
 800743e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007442:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	f8cd 8018 	str.w	r8, [sp, #24]
 800744c:	ee08 0a10 	vmov	s16, r0
 8007450:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007454:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007458:	4b9e      	ldr	r3, [pc, #632]	; (80076d4 <_printf_float+0x2d8>)
 800745a:	f04f 32ff 	mov.w	r2, #4294967295
 800745e:	f7f9 fb75 	bl	8000b4c <__aeabi_dcmpun>
 8007462:	bb88      	cbnz	r0, 80074c8 <_printf_float+0xcc>
 8007464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007468:	4b9a      	ldr	r3, [pc, #616]	; (80076d4 <_printf_float+0x2d8>)
 800746a:	f04f 32ff 	mov.w	r2, #4294967295
 800746e:	f7f9 fb4f 	bl	8000b10 <__aeabi_dcmple>
 8007472:	bb48      	cbnz	r0, 80074c8 <_printf_float+0xcc>
 8007474:	2200      	movs	r2, #0
 8007476:	2300      	movs	r3, #0
 8007478:	4640      	mov	r0, r8
 800747a:	4649      	mov	r1, r9
 800747c:	f7f9 fb3e 	bl	8000afc <__aeabi_dcmplt>
 8007480:	b110      	cbz	r0, 8007488 <_printf_float+0x8c>
 8007482:	232d      	movs	r3, #45	; 0x2d
 8007484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007488:	4a93      	ldr	r2, [pc, #588]	; (80076d8 <_printf_float+0x2dc>)
 800748a:	4b94      	ldr	r3, [pc, #592]	; (80076dc <_printf_float+0x2e0>)
 800748c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007490:	bf94      	ite	ls
 8007492:	4690      	movls	r8, r2
 8007494:	4698      	movhi	r8, r3
 8007496:	2303      	movs	r3, #3
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	f023 0304 	bic.w	r3, r3, #4
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	f04f 0900 	mov.w	r9, #0
 80074a6:	9700      	str	r7, [sp, #0]
 80074a8:	4633      	mov	r3, r6
 80074aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80074ac:	4621      	mov	r1, r4
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 f9da 	bl	8007868 <_printf_common>
 80074b4:	3001      	adds	r0, #1
 80074b6:	f040 8090 	bne.w	80075da <_printf_float+0x1de>
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295
 80074be:	b00d      	add	sp, #52	; 0x34
 80074c0:	ecbd 8b02 	vpop	{d8}
 80074c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c8:	4642      	mov	r2, r8
 80074ca:	464b      	mov	r3, r9
 80074cc:	4640      	mov	r0, r8
 80074ce:	4649      	mov	r1, r9
 80074d0:	f7f9 fb3c 	bl	8000b4c <__aeabi_dcmpun>
 80074d4:	b140      	cbz	r0, 80074e8 <_printf_float+0xec>
 80074d6:	464b      	mov	r3, r9
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bfbc      	itt	lt
 80074dc:	232d      	movlt	r3, #45	; 0x2d
 80074de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074e2:	4a7f      	ldr	r2, [pc, #508]	; (80076e0 <_printf_float+0x2e4>)
 80074e4:	4b7f      	ldr	r3, [pc, #508]	; (80076e4 <_printf_float+0x2e8>)
 80074e6:	e7d1      	b.n	800748c <_printf_float+0x90>
 80074e8:	6863      	ldr	r3, [r4, #4]
 80074ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074ee:	9206      	str	r2, [sp, #24]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	d13f      	bne.n	8007574 <_printf_float+0x178>
 80074f4:	2306      	movs	r3, #6
 80074f6:	6063      	str	r3, [r4, #4]
 80074f8:	9b05      	ldr	r3, [sp, #20]
 80074fa:	6861      	ldr	r1, [r4, #4]
 80074fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007500:	2300      	movs	r3, #0
 8007502:	9303      	str	r3, [sp, #12]
 8007504:	ab0a      	add	r3, sp, #40	; 0x28
 8007506:	e9cd b301 	strd	fp, r3, [sp, #4]
 800750a:	ab09      	add	r3, sp, #36	; 0x24
 800750c:	ec49 8b10 	vmov	d0, r8, r9
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	6022      	str	r2, [r4, #0]
 8007514:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007518:	4628      	mov	r0, r5
 800751a:	f7ff fecf 	bl	80072bc <__cvt>
 800751e:	9b06      	ldr	r3, [sp, #24]
 8007520:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007522:	2b47      	cmp	r3, #71	; 0x47
 8007524:	4680      	mov	r8, r0
 8007526:	d108      	bne.n	800753a <_printf_float+0x13e>
 8007528:	1cc8      	adds	r0, r1, #3
 800752a:	db02      	blt.n	8007532 <_printf_float+0x136>
 800752c:	6863      	ldr	r3, [r4, #4]
 800752e:	4299      	cmp	r1, r3
 8007530:	dd41      	ble.n	80075b6 <_printf_float+0x1ba>
 8007532:	f1ab 0302 	sub.w	r3, fp, #2
 8007536:	fa5f fb83 	uxtb.w	fp, r3
 800753a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800753e:	d820      	bhi.n	8007582 <_printf_float+0x186>
 8007540:	3901      	subs	r1, #1
 8007542:	465a      	mov	r2, fp
 8007544:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007548:	9109      	str	r1, [sp, #36]	; 0x24
 800754a:	f7ff ff19 	bl	8007380 <__exponent>
 800754e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007550:	1813      	adds	r3, r2, r0
 8007552:	2a01      	cmp	r2, #1
 8007554:	4681      	mov	r9, r0
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	dc02      	bgt.n	8007560 <_printf_float+0x164>
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	07d2      	lsls	r2, r2, #31
 800755e:	d501      	bpl.n	8007564 <_printf_float+0x168>
 8007560:	3301      	adds	r3, #1
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007568:	2b00      	cmp	r3, #0
 800756a:	d09c      	beq.n	80074a6 <_printf_float+0xaa>
 800756c:	232d      	movs	r3, #45	; 0x2d
 800756e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007572:	e798      	b.n	80074a6 <_printf_float+0xaa>
 8007574:	9a06      	ldr	r2, [sp, #24]
 8007576:	2a47      	cmp	r2, #71	; 0x47
 8007578:	d1be      	bne.n	80074f8 <_printf_float+0xfc>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1bc      	bne.n	80074f8 <_printf_float+0xfc>
 800757e:	2301      	movs	r3, #1
 8007580:	e7b9      	b.n	80074f6 <_printf_float+0xfa>
 8007582:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007586:	d118      	bne.n	80075ba <_printf_float+0x1be>
 8007588:	2900      	cmp	r1, #0
 800758a:	6863      	ldr	r3, [r4, #4]
 800758c:	dd0b      	ble.n	80075a6 <_printf_float+0x1aa>
 800758e:	6121      	str	r1, [r4, #16]
 8007590:	b913      	cbnz	r3, 8007598 <_printf_float+0x19c>
 8007592:	6822      	ldr	r2, [r4, #0]
 8007594:	07d0      	lsls	r0, r2, #31
 8007596:	d502      	bpl.n	800759e <_printf_float+0x1a2>
 8007598:	3301      	adds	r3, #1
 800759a:	440b      	add	r3, r1
 800759c:	6123      	str	r3, [r4, #16]
 800759e:	65a1      	str	r1, [r4, #88]	; 0x58
 80075a0:	f04f 0900 	mov.w	r9, #0
 80075a4:	e7de      	b.n	8007564 <_printf_float+0x168>
 80075a6:	b913      	cbnz	r3, 80075ae <_printf_float+0x1b2>
 80075a8:	6822      	ldr	r2, [r4, #0]
 80075aa:	07d2      	lsls	r2, r2, #31
 80075ac:	d501      	bpl.n	80075b2 <_printf_float+0x1b6>
 80075ae:	3302      	adds	r3, #2
 80075b0:	e7f4      	b.n	800759c <_printf_float+0x1a0>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e7f2      	b.n	800759c <_printf_float+0x1a0>
 80075b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075bc:	4299      	cmp	r1, r3
 80075be:	db05      	blt.n	80075cc <_printf_float+0x1d0>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	6121      	str	r1, [r4, #16]
 80075c4:	07d8      	lsls	r0, r3, #31
 80075c6:	d5ea      	bpl.n	800759e <_printf_float+0x1a2>
 80075c8:	1c4b      	adds	r3, r1, #1
 80075ca:	e7e7      	b.n	800759c <_printf_float+0x1a0>
 80075cc:	2900      	cmp	r1, #0
 80075ce:	bfd4      	ite	le
 80075d0:	f1c1 0202 	rsble	r2, r1, #2
 80075d4:	2201      	movgt	r2, #1
 80075d6:	4413      	add	r3, r2
 80075d8:	e7e0      	b.n	800759c <_printf_float+0x1a0>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	055a      	lsls	r2, r3, #21
 80075de:	d407      	bmi.n	80075f0 <_printf_float+0x1f4>
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	4642      	mov	r2, r8
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	d12c      	bne.n	8007648 <_printf_float+0x24c>
 80075ee:	e764      	b.n	80074ba <_printf_float+0xbe>
 80075f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075f4:	f240 80e0 	bls.w	80077b8 <_printf_float+0x3bc>
 80075f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075fc:	2200      	movs	r2, #0
 80075fe:	2300      	movs	r3, #0
 8007600:	f7f9 fa72 	bl	8000ae8 <__aeabi_dcmpeq>
 8007604:	2800      	cmp	r0, #0
 8007606:	d034      	beq.n	8007672 <_printf_float+0x276>
 8007608:	4a37      	ldr	r2, [pc, #220]	; (80076e8 <_printf_float+0x2ec>)
 800760a:	2301      	movs	r3, #1
 800760c:	4631      	mov	r1, r6
 800760e:	4628      	mov	r0, r5
 8007610:	47b8      	blx	r7
 8007612:	3001      	adds	r0, #1
 8007614:	f43f af51 	beq.w	80074ba <_printf_float+0xbe>
 8007618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800761c:	429a      	cmp	r2, r3
 800761e:	db02      	blt.n	8007626 <_printf_float+0x22a>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	07d8      	lsls	r0, r3, #31
 8007624:	d510      	bpl.n	8007648 <_printf_float+0x24c>
 8007626:	ee18 3a10 	vmov	r3, s16
 800762a:	4652      	mov	r2, sl
 800762c:	4631      	mov	r1, r6
 800762e:	4628      	mov	r0, r5
 8007630:	47b8      	blx	r7
 8007632:	3001      	adds	r0, #1
 8007634:	f43f af41 	beq.w	80074ba <_printf_float+0xbe>
 8007638:	f04f 0800 	mov.w	r8, #0
 800763c:	f104 091a 	add.w	r9, r4, #26
 8007640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007642:	3b01      	subs	r3, #1
 8007644:	4543      	cmp	r3, r8
 8007646:	dc09      	bgt.n	800765c <_printf_float+0x260>
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	079b      	lsls	r3, r3, #30
 800764c:	f100 8107 	bmi.w	800785e <_printf_float+0x462>
 8007650:	68e0      	ldr	r0, [r4, #12]
 8007652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007654:	4298      	cmp	r0, r3
 8007656:	bfb8      	it	lt
 8007658:	4618      	movlt	r0, r3
 800765a:	e730      	b.n	80074be <_printf_float+0xc2>
 800765c:	2301      	movs	r3, #1
 800765e:	464a      	mov	r2, r9
 8007660:	4631      	mov	r1, r6
 8007662:	4628      	mov	r0, r5
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f af27 	beq.w	80074ba <_printf_float+0xbe>
 800766c:	f108 0801 	add.w	r8, r8, #1
 8007670:	e7e6      	b.n	8007640 <_printf_float+0x244>
 8007672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	dc39      	bgt.n	80076ec <_printf_float+0x2f0>
 8007678:	4a1b      	ldr	r2, [pc, #108]	; (80076e8 <_printf_float+0x2ec>)
 800767a:	2301      	movs	r3, #1
 800767c:	4631      	mov	r1, r6
 800767e:	4628      	mov	r0, r5
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f af19 	beq.w	80074ba <_printf_float+0xbe>
 8007688:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800768c:	4313      	orrs	r3, r2
 800768e:	d102      	bne.n	8007696 <_printf_float+0x29a>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	07d9      	lsls	r1, r3, #31
 8007694:	d5d8      	bpl.n	8007648 <_printf_float+0x24c>
 8007696:	ee18 3a10 	vmov	r3, s16
 800769a:	4652      	mov	r2, sl
 800769c:	4631      	mov	r1, r6
 800769e:	4628      	mov	r0, r5
 80076a0:	47b8      	blx	r7
 80076a2:	3001      	adds	r0, #1
 80076a4:	f43f af09 	beq.w	80074ba <_printf_float+0xbe>
 80076a8:	f04f 0900 	mov.w	r9, #0
 80076ac:	f104 0a1a 	add.w	sl, r4, #26
 80076b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b2:	425b      	negs	r3, r3
 80076b4:	454b      	cmp	r3, r9
 80076b6:	dc01      	bgt.n	80076bc <_printf_float+0x2c0>
 80076b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ba:	e792      	b.n	80075e2 <_printf_float+0x1e6>
 80076bc:	2301      	movs	r3, #1
 80076be:	4652      	mov	r2, sl
 80076c0:	4631      	mov	r1, r6
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b8      	blx	r7
 80076c6:	3001      	adds	r0, #1
 80076c8:	f43f aef7 	beq.w	80074ba <_printf_float+0xbe>
 80076cc:	f109 0901 	add.w	r9, r9, #1
 80076d0:	e7ee      	b.n	80076b0 <_printf_float+0x2b4>
 80076d2:	bf00      	nop
 80076d4:	7fefffff 	.word	0x7fefffff
 80076d8:	0800a1f4 	.word	0x0800a1f4
 80076dc:	0800a1f8 	.word	0x0800a1f8
 80076e0:	0800a1fc 	.word	0x0800a1fc
 80076e4:	0800a200 	.word	0x0800a200
 80076e8:	0800a204 	.word	0x0800a204
 80076ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076f0:	429a      	cmp	r2, r3
 80076f2:	bfa8      	it	ge
 80076f4:	461a      	movge	r2, r3
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	4691      	mov	r9, r2
 80076fa:	dc37      	bgt.n	800776c <_printf_float+0x370>
 80076fc:	f04f 0b00 	mov.w	fp, #0
 8007700:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007704:	f104 021a 	add.w	r2, r4, #26
 8007708:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800770a:	9305      	str	r3, [sp, #20]
 800770c:	eba3 0309 	sub.w	r3, r3, r9
 8007710:	455b      	cmp	r3, fp
 8007712:	dc33      	bgt.n	800777c <_printf_float+0x380>
 8007714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007718:	429a      	cmp	r2, r3
 800771a:	db3b      	blt.n	8007794 <_printf_float+0x398>
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	07da      	lsls	r2, r3, #31
 8007720:	d438      	bmi.n	8007794 <_printf_float+0x398>
 8007722:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007726:	eba2 0903 	sub.w	r9, r2, r3
 800772a:	9b05      	ldr	r3, [sp, #20]
 800772c:	1ad2      	subs	r2, r2, r3
 800772e:	4591      	cmp	r9, r2
 8007730:	bfa8      	it	ge
 8007732:	4691      	movge	r9, r2
 8007734:	f1b9 0f00 	cmp.w	r9, #0
 8007738:	dc35      	bgt.n	80077a6 <_printf_float+0x3aa>
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007742:	f104 0a1a 	add.w	sl, r4, #26
 8007746:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	eba3 0309 	sub.w	r3, r3, r9
 8007750:	4543      	cmp	r3, r8
 8007752:	f77f af79 	ble.w	8007648 <_printf_float+0x24c>
 8007756:	2301      	movs	r3, #1
 8007758:	4652      	mov	r2, sl
 800775a:	4631      	mov	r1, r6
 800775c:	4628      	mov	r0, r5
 800775e:	47b8      	blx	r7
 8007760:	3001      	adds	r0, #1
 8007762:	f43f aeaa 	beq.w	80074ba <_printf_float+0xbe>
 8007766:	f108 0801 	add.w	r8, r8, #1
 800776a:	e7ec      	b.n	8007746 <_printf_float+0x34a>
 800776c:	4613      	mov	r3, r2
 800776e:	4631      	mov	r1, r6
 8007770:	4642      	mov	r2, r8
 8007772:	4628      	mov	r0, r5
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	d1c0      	bne.n	80076fc <_printf_float+0x300>
 800777a:	e69e      	b.n	80074ba <_printf_float+0xbe>
 800777c:	2301      	movs	r3, #1
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	9205      	str	r2, [sp, #20]
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	f43f ae97 	beq.w	80074ba <_printf_float+0xbe>
 800778c:	9a05      	ldr	r2, [sp, #20]
 800778e:	f10b 0b01 	add.w	fp, fp, #1
 8007792:	e7b9      	b.n	8007708 <_printf_float+0x30c>
 8007794:	ee18 3a10 	vmov	r3, s16
 8007798:	4652      	mov	r2, sl
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	d1be      	bne.n	8007722 <_printf_float+0x326>
 80077a4:	e689      	b.n	80074ba <_printf_float+0xbe>
 80077a6:	9a05      	ldr	r2, [sp, #20]
 80077a8:	464b      	mov	r3, r9
 80077aa:	4442      	add	r2, r8
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	d1c1      	bne.n	800773a <_printf_float+0x33e>
 80077b6:	e680      	b.n	80074ba <_printf_float+0xbe>
 80077b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ba:	2a01      	cmp	r2, #1
 80077bc:	dc01      	bgt.n	80077c2 <_printf_float+0x3c6>
 80077be:	07db      	lsls	r3, r3, #31
 80077c0:	d53a      	bpl.n	8007838 <_printf_float+0x43c>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4642      	mov	r2, r8
 80077c6:	4631      	mov	r1, r6
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b8      	blx	r7
 80077cc:	3001      	adds	r0, #1
 80077ce:	f43f ae74 	beq.w	80074ba <_printf_float+0xbe>
 80077d2:	ee18 3a10 	vmov	r3, s16
 80077d6:	4652      	mov	r2, sl
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	f43f ae6b 	beq.w	80074ba <_printf_float+0xbe>
 80077e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077e8:	2200      	movs	r2, #0
 80077ea:	2300      	movs	r3, #0
 80077ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80077f0:	f7f9 f97a 	bl	8000ae8 <__aeabi_dcmpeq>
 80077f4:	b9d8      	cbnz	r0, 800782e <_printf_float+0x432>
 80077f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80077fa:	f108 0201 	add.w	r2, r8, #1
 80077fe:	4631      	mov	r1, r6
 8007800:	4628      	mov	r0, r5
 8007802:	47b8      	blx	r7
 8007804:	3001      	adds	r0, #1
 8007806:	d10e      	bne.n	8007826 <_printf_float+0x42a>
 8007808:	e657      	b.n	80074ba <_printf_float+0xbe>
 800780a:	2301      	movs	r3, #1
 800780c:	4652      	mov	r2, sl
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	f43f ae50 	beq.w	80074ba <_printf_float+0xbe>
 800781a:	f108 0801 	add.w	r8, r8, #1
 800781e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007820:	3b01      	subs	r3, #1
 8007822:	4543      	cmp	r3, r8
 8007824:	dcf1      	bgt.n	800780a <_printf_float+0x40e>
 8007826:	464b      	mov	r3, r9
 8007828:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800782c:	e6da      	b.n	80075e4 <_printf_float+0x1e8>
 800782e:	f04f 0800 	mov.w	r8, #0
 8007832:	f104 0a1a 	add.w	sl, r4, #26
 8007836:	e7f2      	b.n	800781e <_printf_float+0x422>
 8007838:	2301      	movs	r3, #1
 800783a:	4642      	mov	r2, r8
 800783c:	e7df      	b.n	80077fe <_printf_float+0x402>
 800783e:	2301      	movs	r3, #1
 8007840:	464a      	mov	r2, r9
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	f43f ae36 	beq.w	80074ba <_printf_float+0xbe>
 800784e:	f108 0801 	add.w	r8, r8, #1
 8007852:	68e3      	ldr	r3, [r4, #12]
 8007854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007856:	1a5b      	subs	r3, r3, r1
 8007858:	4543      	cmp	r3, r8
 800785a:	dcf0      	bgt.n	800783e <_printf_float+0x442>
 800785c:	e6f8      	b.n	8007650 <_printf_float+0x254>
 800785e:	f04f 0800 	mov.w	r8, #0
 8007862:	f104 0919 	add.w	r9, r4, #25
 8007866:	e7f4      	b.n	8007852 <_printf_float+0x456>

08007868 <_printf_common>:
 8007868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786c:	4616      	mov	r6, r2
 800786e:	4699      	mov	r9, r3
 8007870:	688a      	ldr	r2, [r1, #8]
 8007872:	690b      	ldr	r3, [r1, #16]
 8007874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007878:	4293      	cmp	r3, r2
 800787a:	bfb8      	it	lt
 800787c:	4613      	movlt	r3, r2
 800787e:	6033      	str	r3, [r6, #0]
 8007880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007884:	4607      	mov	r7, r0
 8007886:	460c      	mov	r4, r1
 8007888:	b10a      	cbz	r2, 800788e <_printf_common+0x26>
 800788a:	3301      	adds	r3, #1
 800788c:	6033      	str	r3, [r6, #0]
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	0699      	lsls	r1, r3, #26
 8007892:	bf42      	ittt	mi
 8007894:	6833      	ldrmi	r3, [r6, #0]
 8007896:	3302      	addmi	r3, #2
 8007898:	6033      	strmi	r3, [r6, #0]
 800789a:	6825      	ldr	r5, [r4, #0]
 800789c:	f015 0506 	ands.w	r5, r5, #6
 80078a0:	d106      	bne.n	80078b0 <_printf_common+0x48>
 80078a2:	f104 0a19 	add.w	sl, r4, #25
 80078a6:	68e3      	ldr	r3, [r4, #12]
 80078a8:	6832      	ldr	r2, [r6, #0]
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	42ab      	cmp	r3, r5
 80078ae:	dc26      	bgt.n	80078fe <_printf_common+0x96>
 80078b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078b4:	1e13      	subs	r3, r2, #0
 80078b6:	6822      	ldr	r2, [r4, #0]
 80078b8:	bf18      	it	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	0692      	lsls	r2, r2, #26
 80078be:	d42b      	bmi.n	8007918 <_printf_common+0xb0>
 80078c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078c4:	4649      	mov	r1, r9
 80078c6:	4638      	mov	r0, r7
 80078c8:	47c0      	blx	r8
 80078ca:	3001      	adds	r0, #1
 80078cc:	d01e      	beq.n	800790c <_printf_common+0xa4>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	6922      	ldr	r2, [r4, #16]
 80078d2:	f003 0306 	and.w	r3, r3, #6
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	bf02      	ittt	eq
 80078da:	68e5      	ldreq	r5, [r4, #12]
 80078dc:	6833      	ldreq	r3, [r6, #0]
 80078de:	1aed      	subeq	r5, r5, r3
 80078e0:	68a3      	ldr	r3, [r4, #8]
 80078e2:	bf0c      	ite	eq
 80078e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e8:	2500      	movne	r5, #0
 80078ea:	4293      	cmp	r3, r2
 80078ec:	bfc4      	itt	gt
 80078ee:	1a9b      	subgt	r3, r3, r2
 80078f0:	18ed      	addgt	r5, r5, r3
 80078f2:	2600      	movs	r6, #0
 80078f4:	341a      	adds	r4, #26
 80078f6:	42b5      	cmp	r5, r6
 80078f8:	d11a      	bne.n	8007930 <_printf_common+0xc8>
 80078fa:	2000      	movs	r0, #0
 80078fc:	e008      	b.n	8007910 <_printf_common+0xa8>
 80078fe:	2301      	movs	r3, #1
 8007900:	4652      	mov	r2, sl
 8007902:	4649      	mov	r1, r9
 8007904:	4638      	mov	r0, r7
 8007906:	47c0      	blx	r8
 8007908:	3001      	adds	r0, #1
 800790a:	d103      	bne.n	8007914 <_printf_common+0xac>
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007914:	3501      	adds	r5, #1
 8007916:	e7c6      	b.n	80078a6 <_printf_common+0x3e>
 8007918:	18e1      	adds	r1, r4, r3
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	2030      	movs	r0, #48	; 0x30
 800791e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007922:	4422      	add	r2, r4
 8007924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800792c:	3302      	adds	r3, #2
 800792e:	e7c7      	b.n	80078c0 <_printf_common+0x58>
 8007930:	2301      	movs	r3, #1
 8007932:	4622      	mov	r2, r4
 8007934:	4649      	mov	r1, r9
 8007936:	4638      	mov	r0, r7
 8007938:	47c0      	blx	r8
 800793a:	3001      	adds	r0, #1
 800793c:	d0e6      	beq.n	800790c <_printf_common+0xa4>
 800793e:	3601      	adds	r6, #1
 8007940:	e7d9      	b.n	80078f6 <_printf_common+0x8e>
	...

08007944 <_printf_i>:
 8007944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007948:	7e0f      	ldrb	r7, [r1, #24]
 800794a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800794c:	2f78      	cmp	r7, #120	; 0x78
 800794e:	4691      	mov	r9, r2
 8007950:	4680      	mov	r8, r0
 8007952:	460c      	mov	r4, r1
 8007954:	469a      	mov	sl, r3
 8007956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800795a:	d807      	bhi.n	800796c <_printf_i+0x28>
 800795c:	2f62      	cmp	r7, #98	; 0x62
 800795e:	d80a      	bhi.n	8007976 <_printf_i+0x32>
 8007960:	2f00      	cmp	r7, #0
 8007962:	f000 80d4 	beq.w	8007b0e <_printf_i+0x1ca>
 8007966:	2f58      	cmp	r7, #88	; 0x58
 8007968:	f000 80c0 	beq.w	8007aec <_printf_i+0x1a8>
 800796c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007974:	e03a      	b.n	80079ec <_printf_i+0xa8>
 8007976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800797a:	2b15      	cmp	r3, #21
 800797c:	d8f6      	bhi.n	800796c <_printf_i+0x28>
 800797e:	a101      	add	r1, pc, #4	; (adr r1, 8007984 <_printf_i+0x40>)
 8007980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007984:	080079dd 	.word	0x080079dd
 8007988:	080079f1 	.word	0x080079f1
 800798c:	0800796d 	.word	0x0800796d
 8007990:	0800796d 	.word	0x0800796d
 8007994:	0800796d 	.word	0x0800796d
 8007998:	0800796d 	.word	0x0800796d
 800799c:	080079f1 	.word	0x080079f1
 80079a0:	0800796d 	.word	0x0800796d
 80079a4:	0800796d 	.word	0x0800796d
 80079a8:	0800796d 	.word	0x0800796d
 80079ac:	0800796d 	.word	0x0800796d
 80079b0:	08007af5 	.word	0x08007af5
 80079b4:	08007a1d 	.word	0x08007a1d
 80079b8:	08007aaf 	.word	0x08007aaf
 80079bc:	0800796d 	.word	0x0800796d
 80079c0:	0800796d 	.word	0x0800796d
 80079c4:	08007b17 	.word	0x08007b17
 80079c8:	0800796d 	.word	0x0800796d
 80079cc:	08007a1d 	.word	0x08007a1d
 80079d0:	0800796d 	.word	0x0800796d
 80079d4:	0800796d 	.word	0x0800796d
 80079d8:	08007ab7 	.word	0x08007ab7
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	1d1a      	adds	r2, r3, #4
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	602a      	str	r2, [r5, #0]
 80079e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079ec:	2301      	movs	r3, #1
 80079ee:	e09f      	b.n	8007b30 <_printf_i+0x1ec>
 80079f0:	6820      	ldr	r0, [r4, #0]
 80079f2:	682b      	ldr	r3, [r5, #0]
 80079f4:	0607      	lsls	r7, r0, #24
 80079f6:	f103 0104 	add.w	r1, r3, #4
 80079fa:	6029      	str	r1, [r5, #0]
 80079fc:	d501      	bpl.n	8007a02 <_printf_i+0xbe>
 80079fe:	681e      	ldr	r6, [r3, #0]
 8007a00:	e003      	b.n	8007a0a <_printf_i+0xc6>
 8007a02:	0646      	lsls	r6, r0, #25
 8007a04:	d5fb      	bpl.n	80079fe <_printf_i+0xba>
 8007a06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	da03      	bge.n	8007a16 <_printf_i+0xd2>
 8007a0e:	232d      	movs	r3, #45	; 0x2d
 8007a10:	4276      	negs	r6, r6
 8007a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a16:	485a      	ldr	r0, [pc, #360]	; (8007b80 <_printf_i+0x23c>)
 8007a18:	230a      	movs	r3, #10
 8007a1a:	e012      	b.n	8007a42 <_printf_i+0xfe>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	1d19      	adds	r1, r3, #4
 8007a22:	6029      	str	r1, [r5, #0]
 8007a24:	0605      	lsls	r5, r0, #24
 8007a26:	d501      	bpl.n	8007a2c <_printf_i+0xe8>
 8007a28:	681e      	ldr	r6, [r3, #0]
 8007a2a:	e002      	b.n	8007a32 <_printf_i+0xee>
 8007a2c:	0641      	lsls	r1, r0, #25
 8007a2e:	d5fb      	bpl.n	8007a28 <_printf_i+0xe4>
 8007a30:	881e      	ldrh	r6, [r3, #0]
 8007a32:	4853      	ldr	r0, [pc, #332]	; (8007b80 <_printf_i+0x23c>)
 8007a34:	2f6f      	cmp	r7, #111	; 0x6f
 8007a36:	bf0c      	ite	eq
 8007a38:	2308      	moveq	r3, #8
 8007a3a:	230a      	movne	r3, #10
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a42:	6865      	ldr	r5, [r4, #4]
 8007a44:	60a5      	str	r5, [r4, #8]
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	bfa2      	ittt	ge
 8007a4a:	6821      	ldrge	r1, [r4, #0]
 8007a4c:	f021 0104 	bicge.w	r1, r1, #4
 8007a50:	6021      	strge	r1, [r4, #0]
 8007a52:	b90e      	cbnz	r6, 8007a58 <_printf_i+0x114>
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	d04b      	beq.n	8007af0 <_printf_i+0x1ac>
 8007a58:	4615      	mov	r5, r2
 8007a5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a5e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a62:	5dc7      	ldrb	r7, [r0, r7]
 8007a64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a68:	4637      	mov	r7, r6
 8007a6a:	42bb      	cmp	r3, r7
 8007a6c:	460e      	mov	r6, r1
 8007a6e:	d9f4      	bls.n	8007a5a <_printf_i+0x116>
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d10b      	bne.n	8007a8c <_printf_i+0x148>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	07de      	lsls	r6, r3, #31
 8007a78:	d508      	bpl.n	8007a8c <_printf_i+0x148>
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	4299      	cmp	r1, r3
 8007a80:	bfde      	ittt	le
 8007a82:	2330      	movle	r3, #48	; 0x30
 8007a84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a8c:	1b52      	subs	r2, r2, r5
 8007a8e:	6122      	str	r2, [r4, #16]
 8007a90:	f8cd a000 	str.w	sl, [sp]
 8007a94:	464b      	mov	r3, r9
 8007a96:	aa03      	add	r2, sp, #12
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	f7ff fee4 	bl	8007868 <_printf_common>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d14a      	bne.n	8007b3a <_printf_i+0x1f6>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	b004      	add	sp, #16
 8007aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f043 0320 	orr.w	r3, r3, #32
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	4833      	ldr	r0, [pc, #204]	; (8007b84 <_printf_i+0x240>)
 8007ab8:	2778      	movs	r7, #120	; 0x78
 8007aba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	6829      	ldr	r1, [r5, #0]
 8007ac2:	061f      	lsls	r7, r3, #24
 8007ac4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ac8:	d402      	bmi.n	8007ad0 <_printf_i+0x18c>
 8007aca:	065f      	lsls	r7, r3, #25
 8007acc:	bf48      	it	mi
 8007ace:	b2b6      	uxthmi	r6, r6
 8007ad0:	07df      	lsls	r7, r3, #31
 8007ad2:	bf48      	it	mi
 8007ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ad8:	6029      	str	r1, [r5, #0]
 8007ada:	bf48      	it	mi
 8007adc:	6023      	strmi	r3, [r4, #0]
 8007ade:	b91e      	cbnz	r6, 8007ae8 <_printf_i+0x1a4>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	f023 0320 	bic.w	r3, r3, #32
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	2310      	movs	r3, #16
 8007aea:	e7a7      	b.n	8007a3c <_printf_i+0xf8>
 8007aec:	4824      	ldr	r0, [pc, #144]	; (8007b80 <_printf_i+0x23c>)
 8007aee:	e7e4      	b.n	8007aba <_printf_i+0x176>
 8007af0:	4615      	mov	r5, r2
 8007af2:	e7bd      	b.n	8007a70 <_printf_i+0x12c>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	6826      	ldr	r6, [r4, #0]
 8007af8:	6961      	ldr	r1, [r4, #20]
 8007afa:	1d18      	adds	r0, r3, #4
 8007afc:	6028      	str	r0, [r5, #0]
 8007afe:	0635      	lsls	r5, r6, #24
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	d501      	bpl.n	8007b08 <_printf_i+0x1c4>
 8007b04:	6019      	str	r1, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <_printf_i+0x1ca>
 8007b08:	0670      	lsls	r0, r6, #25
 8007b0a:	d5fb      	bpl.n	8007b04 <_printf_i+0x1c0>
 8007b0c:	8019      	strh	r1, [r3, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	4615      	mov	r5, r2
 8007b14:	e7bc      	b.n	8007a90 <_printf_i+0x14c>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	681d      	ldr	r5, [r3, #0]
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	2100      	movs	r1, #0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7f8 fb64 	bl	80001f0 <memchr>
 8007b28:	b108      	cbz	r0, 8007b2e <_printf_i+0x1ea>
 8007b2a:	1b40      	subs	r0, r0, r5
 8007b2c:	6060      	str	r0, [r4, #4]
 8007b2e:	6863      	ldr	r3, [r4, #4]
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	2300      	movs	r3, #0
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b38:	e7aa      	b.n	8007a90 <_printf_i+0x14c>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	47d0      	blx	sl
 8007b44:	3001      	adds	r0, #1
 8007b46:	d0ad      	beq.n	8007aa4 <_printf_i+0x160>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	079b      	lsls	r3, r3, #30
 8007b4c:	d413      	bmi.n	8007b76 <_printf_i+0x232>
 8007b4e:	68e0      	ldr	r0, [r4, #12]
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	4298      	cmp	r0, r3
 8007b54:	bfb8      	it	lt
 8007b56:	4618      	movlt	r0, r3
 8007b58:	e7a6      	b.n	8007aa8 <_printf_i+0x164>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	47d0      	blx	sl
 8007b64:	3001      	adds	r0, #1
 8007b66:	d09d      	beq.n	8007aa4 <_printf_i+0x160>
 8007b68:	3501      	adds	r5, #1
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	9903      	ldr	r1, [sp, #12]
 8007b6e:	1a5b      	subs	r3, r3, r1
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dcf2      	bgt.n	8007b5a <_printf_i+0x216>
 8007b74:	e7eb      	b.n	8007b4e <_printf_i+0x20a>
 8007b76:	2500      	movs	r5, #0
 8007b78:	f104 0619 	add.w	r6, r4, #25
 8007b7c:	e7f5      	b.n	8007b6a <_printf_i+0x226>
 8007b7e:	bf00      	nop
 8007b80:	0800a206 	.word	0x0800a206
 8007b84:	0800a217 	.word	0x0800a217

08007b88 <std>:
 8007b88:	2300      	movs	r3, #0
 8007b8a:	b510      	push	{r4, lr}
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b96:	6083      	str	r3, [r0, #8]
 8007b98:	8181      	strh	r1, [r0, #12]
 8007b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b9c:	81c2      	strh	r2, [r0, #14]
 8007b9e:	6183      	str	r3, [r0, #24]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	305c      	adds	r0, #92	; 0x5c
 8007ba6:	f000 fa4b 	bl	8008040 <memset>
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <std+0x58>)
 8007bac:	6263      	str	r3, [r4, #36]	; 0x24
 8007bae:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <std+0x5c>)
 8007bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <std+0x60>)
 8007bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <std+0x64>)
 8007bb8:	6323      	str	r3, [r4, #48]	; 0x30
 8007bba:	4b0d      	ldr	r3, [pc, #52]	; (8007bf0 <std+0x68>)
 8007bbc:	6224      	str	r4, [r4, #32]
 8007bbe:	429c      	cmp	r4, r3
 8007bc0:	d006      	beq.n	8007bd0 <std+0x48>
 8007bc2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007bc6:	4294      	cmp	r4, r2
 8007bc8:	d002      	beq.n	8007bd0 <std+0x48>
 8007bca:	33d0      	adds	r3, #208	; 0xd0
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d105      	bne.n	8007bdc <std+0x54>
 8007bd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd8:	f000 baae 	b.w	8008138 <__retarget_lock_init_recursive>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	bf00      	nop
 8007be0:	08007e91 	.word	0x08007e91
 8007be4:	08007eb3 	.word	0x08007eb3
 8007be8:	08007eeb 	.word	0x08007eeb
 8007bec:	08007f0f 	.word	0x08007f0f
 8007bf0:	20000b70 	.word	0x20000b70

08007bf4 <stdio_exit_handler>:
 8007bf4:	4a02      	ldr	r2, [pc, #8]	; (8007c00 <stdio_exit_handler+0xc>)
 8007bf6:	4903      	ldr	r1, [pc, #12]	; (8007c04 <stdio_exit_handler+0x10>)
 8007bf8:	4803      	ldr	r0, [pc, #12]	; (8007c08 <stdio_exit_handler+0x14>)
 8007bfa:	f000 b869 	b.w	8007cd0 <_fwalk_sglue>
 8007bfe:	bf00      	nop
 8007c00:	20000014 	.word	0x20000014
 8007c04:	08009d71 	.word	0x08009d71
 8007c08:	20000020 	.word	0x20000020

08007c0c <cleanup_stdio>:
 8007c0c:	6841      	ldr	r1, [r0, #4]
 8007c0e:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <cleanup_stdio+0x34>)
 8007c10:	4299      	cmp	r1, r3
 8007c12:	b510      	push	{r4, lr}
 8007c14:	4604      	mov	r4, r0
 8007c16:	d001      	beq.n	8007c1c <cleanup_stdio+0x10>
 8007c18:	f002 f8aa 	bl	8009d70 <_fflush_r>
 8007c1c:	68a1      	ldr	r1, [r4, #8]
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <cleanup_stdio+0x38>)
 8007c20:	4299      	cmp	r1, r3
 8007c22:	d002      	beq.n	8007c2a <cleanup_stdio+0x1e>
 8007c24:	4620      	mov	r0, r4
 8007c26:	f002 f8a3 	bl	8009d70 <_fflush_r>
 8007c2a:	68e1      	ldr	r1, [r4, #12]
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <cleanup_stdio+0x3c>)
 8007c2e:	4299      	cmp	r1, r3
 8007c30:	d004      	beq.n	8007c3c <cleanup_stdio+0x30>
 8007c32:	4620      	mov	r0, r4
 8007c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c38:	f002 b89a 	b.w	8009d70 <_fflush_r>
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000b70 	.word	0x20000b70
 8007c44:	20000bd8 	.word	0x20000bd8
 8007c48:	20000c40 	.word	0x20000c40

08007c4c <global_stdio_init.part.0>:
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	4b0b      	ldr	r3, [pc, #44]	; (8007c7c <global_stdio_init.part.0+0x30>)
 8007c50:	4c0b      	ldr	r4, [pc, #44]	; (8007c80 <global_stdio_init.part.0+0x34>)
 8007c52:	4a0c      	ldr	r2, [pc, #48]	; (8007c84 <global_stdio_init.part.0+0x38>)
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	4620      	mov	r0, r4
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2104      	movs	r1, #4
 8007c5c:	f7ff ff94 	bl	8007b88 <std>
 8007c60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c64:	2201      	movs	r2, #1
 8007c66:	2109      	movs	r1, #9
 8007c68:	f7ff ff8e 	bl	8007b88 <std>
 8007c6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c70:	2202      	movs	r2, #2
 8007c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c76:	2112      	movs	r1, #18
 8007c78:	f7ff bf86 	b.w	8007b88 <std>
 8007c7c:	20000ca8 	.word	0x20000ca8
 8007c80:	20000b70 	.word	0x20000b70
 8007c84:	08007bf5 	.word	0x08007bf5

08007c88 <__sfp_lock_acquire>:
 8007c88:	4801      	ldr	r0, [pc, #4]	; (8007c90 <__sfp_lock_acquire+0x8>)
 8007c8a:	f000 ba56 	b.w	800813a <__retarget_lock_acquire_recursive>
 8007c8e:	bf00      	nop
 8007c90:	20000cb1 	.word	0x20000cb1

08007c94 <__sfp_lock_release>:
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <__sfp_lock_release+0x8>)
 8007c96:	f000 ba51 	b.w	800813c <__retarget_lock_release_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	20000cb1 	.word	0x20000cb1

08007ca0 <__sinit>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	f7ff fff0 	bl	8007c88 <__sfp_lock_acquire>
 8007ca8:	6a23      	ldr	r3, [r4, #32]
 8007caa:	b11b      	cbz	r3, 8007cb4 <__sinit+0x14>
 8007cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb0:	f7ff bff0 	b.w	8007c94 <__sfp_lock_release>
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <__sinit+0x28>)
 8007cb6:	6223      	str	r3, [r4, #32]
 8007cb8:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <__sinit+0x2c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1f5      	bne.n	8007cac <__sinit+0xc>
 8007cc0:	f7ff ffc4 	bl	8007c4c <global_stdio_init.part.0>
 8007cc4:	e7f2      	b.n	8007cac <__sinit+0xc>
 8007cc6:	bf00      	nop
 8007cc8:	08007c0d 	.word	0x08007c0d
 8007ccc:	20000ca8 	.word	0x20000ca8

08007cd0 <_fwalk_sglue>:
 8007cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	4688      	mov	r8, r1
 8007cd8:	4614      	mov	r4, r2
 8007cda:	2600      	movs	r6, #0
 8007cdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ce0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ce4:	d505      	bpl.n	8007cf2 <_fwalk_sglue+0x22>
 8007ce6:	6824      	ldr	r4, [r4, #0]
 8007ce8:	2c00      	cmp	r4, #0
 8007cea:	d1f7      	bne.n	8007cdc <_fwalk_sglue+0xc>
 8007cec:	4630      	mov	r0, r6
 8007cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf2:	89ab      	ldrh	r3, [r5, #12]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d907      	bls.n	8007d08 <_fwalk_sglue+0x38>
 8007cf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	d003      	beq.n	8007d08 <_fwalk_sglue+0x38>
 8007d00:	4629      	mov	r1, r5
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c0      	blx	r8
 8007d06:	4306      	orrs	r6, r0
 8007d08:	3568      	adds	r5, #104	; 0x68
 8007d0a:	e7e9      	b.n	8007ce0 <_fwalk_sglue+0x10>

08007d0c <iprintf>:
 8007d0c:	b40f      	push	{r0, r1, r2, r3}
 8007d0e:	b507      	push	{r0, r1, r2, lr}
 8007d10:	4906      	ldr	r1, [pc, #24]	; (8007d2c <iprintf+0x20>)
 8007d12:	ab04      	add	r3, sp, #16
 8007d14:	6808      	ldr	r0, [r1, #0]
 8007d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1a:	6881      	ldr	r1, [r0, #8]
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	f001 fe87 	bl	8009a30 <_vfiprintf_r>
 8007d22:	b003      	add	sp, #12
 8007d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d28:	b004      	add	sp, #16
 8007d2a:	4770      	bx	lr
 8007d2c:	2000006c 	.word	0x2000006c

08007d30 <_puts_r>:
 8007d30:	6a03      	ldr	r3, [r0, #32]
 8007d32:	b570      	push	{r4, r5, r6, lr}
 8007d34:	6884      	ldr	r4, [r0, #8]
 8007d36:	4605      	mov	r5, r0
 8007d38:	460e      	mov	r6, r1
 8007d3a:	b90b      	cbnz	r3, 8007d40 <_puts_r+0x10>
 8007d3c:	f7ff ffb0 	bl	8007ca0 <__sinit>
 8007d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d42:	07db      	lsls	r3, r3, #31
 8007d44:	d405      	bmi.n	8007d52 <_puts_r+0x22>
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	0598      	lsls	r0, r3, #22
 8007d4a:	d402      	bmi.n	8007d52 <_puts_r+0x22>
 8007d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d4e:	f000 f9f4 	bl	800813a <__retarget_lock_acquire_recursive>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	0719      	lsls	r1, r3, #28
 8007d56:	d513      	bpl.n	8007d80 <_puts_r+0x50>
 8007d58:	6923      	ldr	r3, [r4, #16]
 8007d5a:	b18b      	cbz	r3, 8007d80 <_puts_r+0x50>
 8007d5c:	3e01      	subs	r6, #1
 8007d5e:	68a3      	ldr	r3, [r4, #8]
 8007d60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d64:	3b01      	subs	r3, #1
 8007d66:	60a3      	str	r3, [r4, #8]
 8007d68:	b9e9      	cbnz	r1, 8007da6 <_puts_r+0x76>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	da2e      	bge.n	8007dcc <_puts_r+0x9c>
 8007d6e:	4622      	mov	r2, r4
 8007d70:	210a      	movs	r1, #10
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 f8cf 	bl	8007f16 <__swbuf_r>
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d007      	beq.n	8007d8c <_puts_r+0x5c>
 8007d7c:	250a      	movs	r5, #10
 8007d7e:	e007      	b.n	8007d90 <_puts_r+0x60>
 8007d80:	4621      	mov	r1, r4
 8007d82:	4628      	mov	r0, r5
 8007d84:	f000 f904 	bl	8007f90 <__swsetup_r>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d0e7      	beq.n	8007d5c <_puts_r+0x2c>
 8007d8c:	f04f 35ff 	mov.w	r5, #4294967295
 8007d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d92:	07da      	lsls	r2, r3, #31
 8007d94:	d405      	bmi.n	8007da2 <_puts_r+0x72>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	059b      	lsls	r3, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_puts_r+0x72>
 8007d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9e:	f000 f9cd 	bl	800813c <__retarget_lock_release_recursive>
 8007da2:	4628      	mov	r0, r5
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da04      	bge.n	8007db4 <_puts_r+0x84>
 8007daa:	69a2      	ldr	r2, [r4, #24]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	dc06      	bgt.n	8007dbe <_puts_r+0x8e>
 8007db0:	290a      	cmp	r1, #10
 8007db2:	d004      	beq.n	8007dbe <_puts_r+0x8e>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	6022      	str	r2, [r4, #0]
 8007dba:	7019      	strb	r1, [r3, #0]
 8007dbc:	e7cf      	b.n	8007d5e <_puts_r+0x2e>
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 f8a8 	bl	8007f16 <__swbuf_r>
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	d1c9      	bne.n	8007d5e <_puts_r+0x2e>
 8007dca:	e7df      	b.n	8007d8c <_puts_r+0x5c>
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	250a      	movs	r5, #10
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	6022      	str	r2, [r4, #0]
 8007dd4:	701d      	strb	r5, [r3, #0]
 8007dd6:	e7db      	b.n	8007d90 <_puts_r+0x60>

08007dd8 <puts>:
 8007dd8:	4b02      	ldr	r3, [pc, #8]	; (8007de4 <puts+0xc>)
 8007dda:	4601      	mov	r1, r0
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	f7ff bfa7 	b.w	8007d30 <_puts_r>
 8007de2:	bf00      	nop
 8007de4:	2000006c 	.word	0x2000006c

08007de8 <sniprintf>:
 8007de8:	b40c      	push	{r2, r3}
 8007dea:	b530      	push	{r4, r5, lr}
 8007dec:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <sniprintf+0x64>)
 8007dee:	1e0c      	subs	r4, r1, #0
 8007df0:	681d      	ldr	r5, [r3, #0]
 8007df2:	b09d      	sub	sp, #116	; 0x74
 8007df4:	da08      	bge.n	8007e08 <sniprintf+0x20>
 8007df6:	238b      	movs	r3, #139	; 0x8b
 8007df8:	602b      	str	r3, [r5, #0]
 8007dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfe:	b01d      	add	sp, #116	; 0x74
 8007e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e04:	b002      	add	sp, #8
 8007e06:	4770      	bx	lr
 8007e08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007e0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e10:	bf14      	ite	ne
 8007e12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e16:	4623      	moveq	r3, r4
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	9307      	str	r3, [sp, #28]
 8007e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e20:	9002      	str	r0, [sp, #8]
 8007e22:	9006      	str	r0, [sp, #24]
 8007e24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e2a:	ab21      	add	r3, sp, #132	; 0x84
 8007e2c:	a902      	add	r1, sp, #8
 8007e2e:	4628      	mov	r0, r5
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	f001 fcd5 	bl	80097e0 <_svfiprintf_r>
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	bfbc      	itt	lt
 8007e3a:	238b      	movlt	r3, #139	; 0x8b
 8007e3c:	602b      	strlt	r3, [r5, #0]
 8007e3e:	2c00      	cmp	r4, #0
 8007e40:	d0dd      	beq.n	8007dfe <sniprintf+0x16>
 8007e42:	9b02      	ldr	r3, [sp, #8]
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	e7d9      	b.n	8007dfe <sniprintf+0x16>
 8007e4a:	bf00      	nop
 8007e4c:	2000006c 	.word	0x2000006c

08007e50 <siprintf>:
 8007e50:	b40e      	push	{r1, r2, r3}
 8007e52:	b500      	push	{lr}
 8007e54:	b09c      	sub	sp, #112	; 0x70
 8007e56:	ab1d      	add	r3, sp, #116	; 0x74
 8007e58:	9002      	str	r0, [sp, #8]
 8007e5a:	9006      	str	r0, [sp, #24]
 8007e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e60:	4809      	ldr	r0, [pc, #36]	; (8007e88 <siprintf+0x38>)
 8007e62:	9107      	str	r1, [sp, #28]
 8007e64:	9104      	str	r1, [sp, #16]
 8007e66:	4909      	ldr	r1, [pc, #36]	; (8007e8c <siprintf+0x3c>)
 8007e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e6c:	9105      	str	r1, [sp, #20]
 8007e6e:	6800      	ldr	r0, [r0, #0]
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	a902      	add	r1, sp, #8
 8007e74:	f001 fcb4 	bl	80097e0 <_svfiprintf_r>
 8007e78:	9b02      	ldr	r3, [sp, #8]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	b01c      	add	sp, #112	; 0x70
 8007e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e84:	b003      	add	sp, #12
 8007e86:	4770      	bx	lr
 8007e88:	2000006c 	.word	0x2000006c
 8007e8c:	ffff0208 	.word	0xffff0208

08007e90 <__sread>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	460c      	mov	r4, r1
 8007e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e98:	f000 f900 	bl	800809c <_read_r>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	bfab      	itete	ge
 8007ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea4:	181b      	addge	r3, r3, r0
 8007ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eaa:	bfac      	ite	ge
 8007eac:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eae:	81a3      	strhlt	r3, [r4, #12]
 8007eb0:	bd10      	pop	{r4, pc}

08007eb2 <__swrite>:
 8007eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb6:	461f      	mov	r7, r3
 8007eb8:	898b      	ldrh	r3, [r1, #12]
 8007eba:	05db      	lsls	r3, r3, #23
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	4616      	mov	r6, r2
 8007ec2:	d505      	bpl.n	8007ed0 <__swrite+0x1e>
 8007ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec8:	2302      	movs	r3, #2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f000 f8d4 	bl	8008078 <_lseek_r>
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	4632      	mov	r2, r6
 8007ede:	463b      	mov	r3, r7
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee6:	f000 b8eb 	b.w	80080c0 <_write_r>

08007eea <__sseek>:
 8007eea:	b510      	push	{r4, lr}
 8007eec:	460c      	mov	r4, r1
 8007eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef2:	f000 f8c1 	bl	8008078 <_lseek_r>
 8007ef6:	1c43      	adds	r3, r0, #1
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	bf15      	itete	ne
 8007efc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f06:	81a3      	strheq	r3, [r4, #12]
 8007f08:	bf18      	it	ne
 8007f0a:	81a3      	strhne	r3, [r4, #12]
 8007f0c:	bd10      	pop	{r4, pc}

08007f0e <__sclose>:
 8007f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f12:	f000 b8a1 	b.w	8008058 <_close_r>

08007f16 <__swbuf_r>:
 8007f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f18:	460e      	mov	r6, r1
 8007f1a:	4614      	mov	r4, r2
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	b118      	cbz	r0, 8007f28 <__swbuf_r+0x12>
 8007f20:	6a03      	ldr	r3, [r0, #32]
 8007f22:	b90b      	cbnz	r3, 8007f28 <__swbuf_r+0x12>
 8007f24:	f7ff febc 	bl	8007ca0 <__sinit>
 8007f28:	69a3      	ldr	r3, [r4, #24]
 8007f2a:	60a3      	str	r3, [r4, #8]
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	071a      	lsls	r2, r3, #28
 8007f30:	d525      	bpl.n	8007f7e <__swbuf_r+0x68>
 8007f32:	6923      	ldr	r3, [r4, #16]
 8007f34:	b31b      	cbz	r3, 8007f7e <__swbuf_r+0x68>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	6922      	ldr	r2, [r4, #16]
 8007f3a:	1a98      	subs	r0, r3, r2
 8007f3c:	6963      	ldr	r3, [r4, #20]
 8007f3e:	b2f6      	uxtb	r6, r6
 8007f40:	4283      	cmp	r3, r0
 8007f42:	4637      	mov	r7, r6
 8007f44:	dc04      	bgt.n	8007f50 <__swbuf_r+0x3a>
 8007f46:	4621      	mov	r1, r4
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f001 ff11 	bl	8009d70 <_fflush_r>
 8007f4e:	b9e0      	cbnz	r0, 8007f8a <__swbuf_r+0x74>
 8007f50:	68a3      	ldr	r3, [r4, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	60a3      	str	r3, [r4, #8]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	6022      	str	r2, [r4, #0]
 8007f5c:	701e      	strb	r6, [r3, #0]
 8007f5e:	6962      	ldr	r2, [r4, #20]
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d004      	beq.n	8007f70 <__swbuf_r+0x5a>
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	07db      	lsls	r3, r3, #31
 8007f6a:	d506      	bpl.n	8007f7a <__swbuf_r+0x64>
 8007f6c:	2e0a      	cmp	r6, #10
 8007f6e:	d104      	bne.n	8007f7a <__swbuf_r+0x64>
 8007f70:	4621      	mov	r1, r4
 8007f72:	4628      	mov	r0, r5
 8007f74:	f001 fefc 	bl	8009d70 <_fflush_r>
 8007f78:	b938      	cbnz	r0, 8007f8a <__swbuf_r+0x74>
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 f805 	bl	8007f90 <__swsetup_r>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d0d5      	beq.n	8007f36 <__swbuf_r+0x20>
 8007f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8007f8e:	e7f4      	b.n	8007f7a <__swbuf_r+0x64>

08007f90 <__swsetup_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4b2a      	ldr	r3, [pc, #168]	; (800803c <__swsetup_r+0xac>)
 8007f94:	4605      	mov	r5, r0
 8007f96:	6818      	ldr	r0, [r3, #0]
 8007f98:	460c      	mov	r4, r1
 8007f9a:	b118      	cbz	r0, 8007fa4 <__swsetup_r+0x14>
 8007f9c:	6a03      	ldr	r3, [r0, #32]
 8007f9e:	b90b      	cbnz	r3, 8007fa4 <__swsetup_r+0x14>
 8007fa0:	f7ff fe7e 	bl	8007ca0 <__sinit>
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007faa:	0718      	lsls	r0, r3, #28
 8007fac:	d422      	bmi.n	8007ff4 <__swsetup_r+0x64>
 8007fae:	06d9      	lsls	r1, r3, #27
 8007fb0:	d407      	bmi.n	8007fc2 <__swsetup_r+0x32>
 8007fb2:	2309      	movs	r3, #9
 8007fb4:	602b      	str	r3, [r5, #0]
 8007fb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fba:	81a3      	strh	r3, [r4, #12]
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	e034      	b.n	800802c <__swsetup_r+0x9c>
 8007fc2:	0758      	lsls	r0, r3, #29
 8007fc4:	d512      	bpl.n	8007fec <__swsetup_r+0x5c>
 8007fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fc8:	b141      	cbz	r1, 8007fdc <__swsetup_r+0x4c>
 8007fca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fce:	4299      	cmp	r1, r3
 8007fd0:	d002      	beq.n	8007fd8 <__swsetup_r+0x48>
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 ff2e 	bl	8008e34 <_free_r>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	6363      	str	r3, [r4, #52]	; 0x34
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6063      	str	r3, [r4, #4]
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f043 0308 	orr.w	r3, r3, #8
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	b94b      	cbnz	r3, 800800c <__swsetup_r+0x7c>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008002:	d003      	beq.n	800800c <__swsetup_r+0x7c>
 8008004:	4621      	mov	r1, r4
 8008006:	4628      	mov	r0, r5
 8008008:	f001 ff00 	bl	8009e0c <__smakebuf_r>
 800800c:	89a0      	ldrh	r0, [r4, #12]
 800800e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008012:	f010 0301 	ands.w	r3, r0, #1
 8008016:	d00a      	beq.n	800802e <__swsetup_r+0x9e>
 8008018:	2300      	movs	r3, #0
 800801a:	60a3      	str	r3, [r4, #8]
 800801c:	6963      	ldr	r3, [r4, #20]
 800801e:	425b      	negs	r3, r3
 8008020:	61a3      	str	r3, [r4, #24]
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	b943      	cbnz	r3, 8008038 <__swsetup_r+0xa8>
 8008026:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800802a:	d1c4      	bne.n	8007fb6 <__swsetup_r+0x26>
 800802c:	bd38      	pop	{r3, r4, r5, pc}
 800802e:	0781      	lsls	r1, r0, #30
 8008030:	bf58      	it	pl
 8008032:	6963      	ldrpl	r3, [r4, #20]
 8008034:	60a3      	str	r3, [r4, #8]
 8008036:	e7f4      	b.n	8008022 <__swsetup_r+0x92>
 8008038:	2000      	movs	r0, #0
 800803a:	e7f7      	b.n	800802c <__swsetup_r+0x9c>
 800803c:	2000006c 	.word	0x2000006c

08008040 <memset>:
 8008040:	4402      	add	r2, r0
 8008042:	4603      	mov	r3, r0
 8008044:	4293      	cmp	r3, r2
 8008046:	d100      	bne.n	800804a <memset+0xa>
 8008048:	4770      	bx	lr
 800804a:	f803 1b01 	strb.w	r1, [r3], #1
 800804e:	e7f9      	b.n	8008044 <memset+0x4>

08008050 <_localeconv_r>:
 8008050:	4800      	ldr	r0, [pc, #0]	; (8008054 <_localeconv_r+0x4>)
 8008052:	4770      	bx	lr
 8008054:	20000160 	.word	0x20000160

08008058 <_close_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4d06      	ldr	r5, [pc, #24]	; (8008074 <_close_r+0x1c>)
 800805c:	2300      	movs	r3, #0
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	602b      	str	r3, [r5, #0]
 8008064:	f7fa facf 	bl	8002606 <_close>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_close_r+0x1a>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	b103      	cbz	r3, 8008072 <_close_r+0x1a>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	20000cac 	.word	0x20000cac

08008078 <_lseek_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d07      	ldr	r5, [pc, #28]	; (8008098 <_lseek_r+0x20>)
 800807c:	4604      	mov	r4, r0
 800807e:	4608      	mov	r0, r1
 8008080:	4611      	mov	r1, r2
 8008082:	2200      	movs	r2, #0
 8008084:	602a      	str	r2, [r5, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	f7fa fae4 	bl	8002654 <_lseek>
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	d102      	bne.n	8008096 <_lseek_r+0x1e>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	b103      	cbz	r3, 8008096 <_lseek_r+0x1e>
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	bd38      	pop	{r3, r4, r5, pc}
 8008098:	20000cac 	.word	0x20000cac

0800809c <_read_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d07      	ldr	r5, [pc, #28]	; (80080bc <_read_r+0x20>)
 80080a0:	4604      	mov	r4, r0
 80080a2:	4608      	mov	r0, r1
 80080a4:	4611      	mov	r1, r2
 80080a6:	2200      	movs	r2, #0
 80080a8:	602a      	str	r2, [r5, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f7fa fa8e 	bl	80025cc <_read>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_read_r+0x1e>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_read_r+0x1e>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	20000cac 	.word	0x20000cac

080080c0 <_write_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d07      	ldr	r5, [pc, #28]	; (80080e0 <_write_r+0x20>)
 80080c4:	4604      	mov	r4, r0
 80080c6:	4608      	mov	r0, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	602a      	str	r2, [r5, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f7f9 f834 	bl	800113c <_write>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_write_r+0x1e>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_write_r+0x1e>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	20000cac 	.word	0x20000cac

080080e4 <__errno>:
 80080e4:	4b01      	ldr	r3, [pc, #4]	; (80080ec <__errno+0x8>)
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	2000006c 	.word	0x2000006c

080080f0 <__libc_init_array>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	4d0d      	ldr	r5, [pc, #52]	; (8008128 <__libc_init_array+0x38>)
 80080f4:	4c0d      	ldr	r4, [pc, #52]	; (800812c <__libc_init_array+0x3c>)
 80080f6:	1b64      	subs	r4, r4, r5
 80080f8:	10a4      	asrs	r4, r4, #2
 80080fa:	2600      	movs	r6, #0
 80080fc:	42a6      	cmp	r6, r4
 80080fe:	d109      	bne.n	8008114 <__libc_init_array+0x24>
 8008100:	4d0b      	ldr	r5, [pc, #44]	; (8008130 <__libc_init_array+0x40>)
 8008102:	4c0c      	ldr	r4, [pc, #48]	; (8008134 <__libc_init_array+0x44>)
 8008104:	f002 f800 	bl	800a108 <_init>
 8008108:	1b64      	subs	r4, r4, r5
 800810a:	10a4      	asrs	r4, r4, #2
 800810c:	2600      	movs	r6, #0
 800810e:	42a6      	cmp	r6, r4
 8008110:	d105      	bne.n	800811e <__libc_init_array+0x2e>
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	f855 3b04 	ldr.w	r3, [r5], #4
 8008118:	4798      	blx	r3
 800811a:	3601      	adds	r6, #1
 800811c:	e7ee      	b.n	80080fc <__libc_init_array+0xc>
 800811e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008122:	4798      	blx	r3
 8008124:	3601      	adds	r6, #1
 8008126:	e7f2      	b.n	800810e <__libc_init_array+0x1e>
 8008128:	0800a56c 	.word	0x0800a56c
 800812c:	0800a56c 	.word	0x0800a56c
 8008130:	0800a56c 	.word	0x0800a56c
 8008134:	0800a570 	.word	0x0800a570

08008138 <__retarget_lock_init_recursive>:
 8008138:	4770      	bx	lr

0800813a <__retarget_lock_acquire_recursive>:
 800813a:	4770      	bx	lr

0800813c <__retarget_lock_release_recursive>:
 800813c:	4770      	bx	lr

0800813e <quorem>:
 800813e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008142:	6903      	ldr	r3, [r0, #16]
 8008144:	690c      	ldr	r4, [r1, #16]
 8008146:	42a3      	cmp	r3, r4
 8008148:	4607      	mov	r7, r0
 800814a:	db7e      	blt.n	800824a <quorem+0x10c>
 800814c:	3c01      	subs	r4, #1
 800814e:	f101 0814 	add.w	r8, r1, #20
 8008152:	f100 0514 	add.w	r5, r0, #20
 8008156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800815a:	9301      	str	r3, [sp, #4]
 800815c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008160:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008164:	3301      	adds	r3, #1
 8008166:	429a      	cmp	r2, r3
 8008168:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800816c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008170:	fbb2 f6f3 	udiv	r6, r2, r3
 8008174:	d331      	bcc.n	80081da <quorem+0x9c>
 8008176:	f04f 0e00 	mov.w	lr, #0
 800817a:	4640      	mov	r0, r8
 800817c:	46ac      	mov	ip, r5
 800817e:	46f2      	mov	sl, lr
 8008180:	f850 2b04 	ldr.w	r2, [r0], #4
 8008184:	b293      	uxth	r3, r2
 8008186:	fb06 e303 	mla	r3, r6, r3, lr
 800818a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800818e:	0c1a      	lsrs	r2, r3, #16
 8008190:	b29b      	uxth	r3, r3
 8008192:	ebaa 0303 	sub.w	r3, sl, r3
 8008196:	f8dc a000 	ldr.w	sl, [ip]
 800819a:	fa13 f38a 	uxtah	r3, r3, sl
 800819e:	fb06 220e 	mla	r2, r6, lr, r2
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	9b00      	ldr	r3, [sp, #0]
 80081a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081aa:	b292      	uxth	r2, r2
 80081ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80081b8:	4581      	cmp	r9, r0
 80081ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081be:	f84c 3b04 	str.w	r3, [ip], #4
 80081c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081c6:	d2db      	bcs.n	8008180 <quorem+0x42>
 80081c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80081cc:	b92b      	cbnz	r3, 80081da <quorem+0x9c>
 80081ce:	9b01      	ldr	r3, [sp, #4]
 80081d0:	3b04      	subs	r3, #4
 80081d2:	429d      	cmp	r5, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	d32c      	bcc.n	8008232 <quorem+0xf4>
 80081d8:	613c      	str	r4, [r7, #16]
 80081da:	4638      	mov	r0, r7
 80081dc:	f001 f9a6 	bl	800952c <__mcmp>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	db22      	blt.n	800822a <quorem+0xec>
 80081e4:	3601      	adds	r6, #1
 80081e6:	4629      	mov	r1, r5
 80081e8:	2000      	movs	r0, #0
 80081ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80081ee:	f8d1 c000 	ldr.w	ip, [r1]
 80081f2:	b293      	uxth	r3, r2
 80081f4:	1ac3      	subs	r3, r0, r3
 80081f6:	0c12      	lsrs	r2, r2, #16
 80081f8:	fa13 f38c 	uxtah	r3, r3, ip
 80081fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008204:	b29b      	uxth	r3, r3
 8008206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800820a:	45c1      	cmp	r9, r8
 800820c:	f841 3b04 	str.w	r3, [r1], #4
 8008210:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008214:	d2e9      	bcs.n	80081ea <quorem+0xac>
 8008216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800821a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800821e:	b922      	cbnz	r2, 800822a <quorem+0xec>
 8008220:	3b04      	subs	r3, #4
 8008222:	429d      	cmp	r5, r3
 8008224:	461a      	mov	r2, r3
 8008226:	d30a      	bcc.n	800823e <quorem+0x100>
 8008228:	613c      	str	r4, [r7, #16]
 800822a:	4630      	mov	r0, r6
 800822c:	b003      	add	sp, #12
 800822e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	3b04      	subs	r3, #4
 8008236:	2a00      	cmp	r2, #0
 8008238:	d1ce      	bne.n	80081d8 <quorem+0x9a>
 800823a:	3c01      	subs	r4, #1
 800823c:	e7c9      	b.n	80081d2 <quorem+0x94>
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	3b04      	subs	r3, #4
 8008242:	2a00      	cmp	r2, #0
 8008244:	d1f0      	bne.n	8008228 <quorem+0xea>
 8008246:	3c01      	subs	r4, #1
 8008248:	e7eb      	b.n	8008222 <quorem+0xe4>
 800824a:	2000      	movs	r0, #0
 800824c:	e7ee      	b.n	800822c <quorem+0xee>
	...

08008250 <_dtoa_r>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	ed2d 8b04 	vpush	{d8-d9}
 8008258:	69c5      	ldr	r5, [r0, #28]
 800825a:	b093      	sub	sp, #76	; 0x4c
 800825c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008260:	ec57 6b10 	vmov	r6, r7, d0
 8008264:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008268:	9107      	str	r1, [sp, #28]
 800826a:	4604      	mov	r4, r0
 800826c:	920a      	str	r2, [sp, #40]	; 0x28
 800826e:	930d      	str	r3, [sp, #52]	; 0x34
 8008270:	b975      	cbnz	r5, 8008290 <_dtoa_r+0x40>
 8008272:	2010      	movs	r0, #16
 8008274:	f000 fe2a 	bl	8008ecc <malloc>
 8008278:	4602      	mov	r2, r0
 800827a:	61e0      	str	r0, [r4, #28]
 800827c:	b920      	cbnz	r0, 8008288 <_dtoa_r+0x38>
 800827e:	4bae      	ldr	r3, [pc, #696]	; (8008538 <_dtoa_r+0x2e8>)
 8008280:	21ef      	movs	r1, #239	; 0xef
 8008282:	48ae      	ldr	r0, [pc, #696]	; (800853c <_dtoa_r+0x2ec>)
 8008284:	f001 fe58 	bl	8009f38 <__assert_func>
 8008288:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800828c:	6005      	str	r5, [r0, #0]
 800828e:	60c5      	str	r5, [r0, #12]
 8008290:	69e3      	ldr	r3, [r4, #28]
 8008292:	6819      	ldr	r1, [r3, #0]
 8008294:	b151      	cbz	r1, 80082ac <_dtoa_r+0x5c>
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	604a      	str	r2, [r1, #4]
 800829a:	2301      	movs	r3, #1
 800829c:	4093      	lsls	r3, r2
 800829e:	608b      	str	r3, [r1, #8]
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 ff07 	bl	80090b4 <_Bfree>
 80082a6:	69e3      	ldr	r3, [r4, #28]
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	1e3b      	subs	r3, r7, #0
 80082ae:	bfbb      	ittet	lt
 80082b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082b4:	9303      	strlt	r3, [sp, #12]
 80082b6:	2300      	movge	r3, #0
 80082b8:	2201      	movlt	r2, #1
 80082ba:	bfac      	ite	ge
 80082bc:	f8c8 3000 	strge.w	r3, [r8]
 80082c0:	f8c8 2000 	strlt.w	r2, [r8]
 80082c4:	4b9e      	ldr	r3, [pc, #632]	; (8008540 <_dtoa_r+0x2f0>)
 80082c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80082ca:	ea33 0308 	bics.w	r3, r3, r8
 80082ce:	d11b      	bne.n	8008308 <_dtoa_r+0xb8>
 80082d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80082dc:	4333      	orrs	r3, r6
 80082de:	f000 8593 	beq.w	8008e08 <_dtoa_r+0xbb8>
 80082e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e4:	b963      	cbnz	r3, 8008300 <_dtoa_r+0xb0>
 80082e6:	4b97      	ldr	r3, [pc, #604]	; (8008544 <_dtoa_r+0x2f4>)
 80082e8:	e027      	b.n	800833a <_dtoa_r+0xea>
 80082ea:	4b97      	ldr	r3, [pc, #604]	; (8008548 <_dtoa_r+0x2f8>)
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	3308      	adds	r3, #8
 80082f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	9800      	ldr	r0, [sp, #0]
 80082f6:	b013      	add	sp, #76	; 0x4c
 80082f8:	ecbd 8b04 	vpop	{d8-d9}
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008300:	4b90      	ldr	r3, [pc, #576]	; (8008544 <_dtoa_r+0x2f4>)
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	3303      	adds	r3, #3
 8008306:	e7f3      	b.n	80082f0 <_dtoa_r+0xa0>
 8008308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800830c:	2200      	movs	r2, #0
 800830e:	ec51 0b17 	vmov	r0, r1, d7
 8008312:	eeb0 8a47 	vmov.f32	s16, s14
 8008316:	eef0 8a67 	vmov.f32	s17, s15
 800831a:	2300      	movs	r3, #0
 800831c:	f7f8 fbe4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008320:	4681      	mov	r9, r0
 8008322:	b160      	cbz	r0, 800833e <_dtoa_r+0xee>
 8008324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008326:	2301      	movs	r3, #1
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 8568 	beq.w	8008e02 <_dtoa_r+0xbb2>
 8008332:	4b86      	ldr	r3, [pc, #536]	; (800854c <_dtoa_r+0x2fc>)
 8008334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	3b01      	subs	r3, #1
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	e7da      	b.n	80082f4 <_dtoa_r+0xa4>
 800833e:	aa10      	add	r2, sp, #64	; 0x40
 8008340:	a911      	add	r1, sp, #68	; 0x44
 8008342:	4620      	mov	r0, r4
 8008344:	eeb0 0a48 	vmov.f32	s0, s16
 8008348:	eef0 0a68 	vmov.f32	s1, s17
 800834c:	f001 f994 	bl	8009678 <__d2b>
 8008350:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008354:	4682      	mov	sl, r0
 8008356:	2d00      	cmp	r5, #0
 8008358:	d07f      	beq.n	800845a <_dtoa_r+0x20a>
 800835a:	ee18 3a90 	vmov	r3, s17
 800835e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008362:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008366:	ec51 0b18 	vmov	r0, r1, d8
 800836a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800836e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008372:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008376:	4619      	mov	r1, r3
 8008378:	2200      	movs	r2, #0
 800837a:	4b75      	ldr	r3, [pc, #468]	; (8008550 <_dtoa_r+0x300>)
 800837c:	f7f7 ff94 	bl	80002a8 <__aeabi_dsub>
 8008380:	a367      	add	r3, pc, #412	; (adr r3, 8008520 <_dtoa_r+0x2d0>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f7f8 f947 	bl	8000618 <__aeabi_dmul>
 800838a:	a367      	add	r3, pc, #412	; (adr r3, 8008528 <_dtoa_r+0x2d8>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 ff8c 	bl	80002ac <__adddf3>
 8008394:	4606      	mov	r6, r0
 8008396:	4628      	mov	r0, r5
 8008398:	460f      	mov	r7, r1
 800839a:	f7f8 f8d3 	bl	8000544 <__aeabi_i2d>
 800839e:	a364      	add	r3, pc, #400	; (adr r3, 8008530 <_dtoa_r+0x2e0>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f8 f938 	bl	8000618 <__aeabi_dmul>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4630      	mov	r0, r6
 80083ae:	4639      	mov	r1, r7
 80083b0:	f7f7 ff7c 	bl	80002ac <__adddf3>
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	f7f8 fbde 	bl	8000b78 <__aeabi_d2iz>
 80083bc:	2200      	movs	r2, #0
 80083be:	4683      	mov	fp, r0
 80083c0:	2300      	movs	r3, #0
 80083c2:	4630      	mov	r0, r6
 80083c4:	4639      	mov	r1, r7
 80083c6:	f7f8 fb99 	bl	8000afc <__aeabi_dcmplt>
 80083ca:	b148      	cbz	r0, 80083e0 <_dtoa_r+0x190>
 80083cc:	4658      	mov	r0, fp
 80083ce:	f7f8 f8b9 	bl	8000544 <__aeabi_i2d>
 80083d2:	4632      	mov	r2, r6
 80083d4:	463b      	mov	r3, r7
 80083d6:	f7f8 fb87 	bl	8000ae8 <__aeabi_dcmpeq>
 80083da:	b908      	cbnz	r0, 80083e0 <_dtoa_r+0x190>
 80083dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083e0:	f1bb 0f16 	cmp.w	fp, #22
 80083e4:	d857      	bhi.n	8008496 <_dtoa_r+0x246>
 80083e6:	4b5b      	ldr	r3, [pc, #364]	; (8008554 <_dtoa_r+0x304>)
 80083e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	ec51 0b18 	vmov	r0, r1, d8
 80083f4:	f7f8 fb82 	bl	8000afc <__aeabi_dcmplt>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d04e      	beq.n	800849a <_dtoa_r+0x24a>
 80083fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008400:	2300      	movs	r3, #0
 8008402:	930c      	str	r3, [sp, #48]	; 0x30
 8008404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008406:	1b5b      	subs	r3, r3, r5
 8008408:	1e5a      	subs	r2, r3, #1
 800840a:	bf45      	ittet	mi
 800840c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008410:	9305      	strmi	r3, [sp, #20]
 8008412:	2300      	movpl	r3, #0
 8008414:	2300      	movmi	r3, #0
 8008416:	9206      	str	r2, [sp, #24]
 8008418:	bf54      	ite	pl
 800841a:	9305      	strpl	r3, [sp, #20]
 800841c:	9306      	strmi	r3, [sp, #24]
 800841e:	f1bb 0f00 	cmp.w	fp, #0
 8008422:	db3c      	blt.n	800849e <_dtoa_r+0x24e>
 8008424:	9b06      	ldr	r3, [sp, #24]
 8008426:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800842a:	445b      	add	r3, fp
 800842c:	9306      	str	r3, [sp, #24]
 800842e:	2300      	movs	r3, #0
 8008430:	9308      	str	r3, [sp, #32]
 8008432:	9b07      	ldr	r3, [sp, #28]
 8008434:	2b09      	cmp	r3, #9
 8008436:	d868      	bhi.n	800850a <_dtoa_r+0x2ba>
 8008438:	2b05      	cmp	r3, #5
 800843a:	bfc4      	itt	gt
 800843c:	3b04      	subgt	r3, #4
 800843e:	9307      	strgt	r3, [sp, #28]
 8008440:	9b07      	ldr	r3, [sp, #28]
 8008442:	f1a3 0302 	sub.w	r3, r3, #2
 8008446:	bfcc      	ite	gt
 8008448:	2500      	movgt	r5, #0
 800844a:	2501      	movle	r5, #1
 800844c:	2b03      	cmp	r3, #3
 800844e:	f200 8085 	bhi.w	800855c <_dtoa_r+0x30c>
 8008452:	e8df f003 	tbb	[pc, r3]
 8008456:	3b2e      	.short	0x3b2e
 8008458:	5839      	.short	0x5839
 800845a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800845e:	441d      	add	r5, r3
 8008460:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008464:	2b20      	cmp	r3, #32
 8008466:	bfc1      	itttt	gt
 8008468:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800846c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008470:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008474:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008478:	bfd6      	itet	le
 800847a:	f1c3 0320 	rsble	r3, r3, #32
 800847e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008482:	fa06 f003 	lslle.w	r0, r6, r3
 8008486:	f7f8 f84d 	bl	8000524 <__aeabi_ui2d>
 800848a:	2201      	movs	r2, #1
 800848c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008490:	3d01      	subs	r5, #1
 8008492:	920e      	str	r2, [sp, #56]	; 0x38
 8008494:	e76f      	b.n	8008376 <_dtoa_r+0x126>
 8008496:	2301      	movs	r3, #1
 8008498:	e7b3      	b.n	8008402 <_dtoa_r+0x1b2>
 800849a:	900c      	str	r0, [sp, #48]	; 0x30
 800849c:	e7b2      	b.n	8008404 <_dtoa_r+0x1b4>
 800849e:	9b05      	ldr	r3, [sp, #20]
 80084a0:	eba3 030b 	sub.w	r3, r3, fp
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	f1cb 0300 	rsb	r3, fp, #0
 80084aa:	9308      	str	r3, [sp, #32]
 80084ac:	2300      	movs	r3, #0
 80084ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b0:	e7bf      	b.n	8008432 <_dtoa_r+0x1e2>
 80084b2:	2300      	movs	r3, #0
 80084b4:	9309      	str	r3, [sp, #36]	; 0x24
 80084b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dc52      	bgt.n	8008562 <_dtoa_r+0x312>
 80084bc:	2301      	movs	r3, #1
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	9304      	str	r3, [sp, #16]
 80084c2:	461a      	mov	r2, r3
 80084c4:	920a      	str	r2, [sp, #40]	; 0x28
 80084c6:	e00b      	b.n	80084e0 <_dtoa_r+0x290>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e7f3      	b.n	80084b4 <_dtoa_r+0x264>
 80084cc:	2300      	movs	r3, #0
 80084ce:	9309      	str	r3, [sp, #36]	; 0x24
 80084d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d2:	445b      	add	r3, fp
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	3301      	adds	r3, #1
 80084d8:	2b01      	cmp	r3, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	bfb8      	it	lt
 80084de:	2301      	movlt	r3, #1
 80084e0:	69e0      	ldr	r0, [r4, #28]
 80084e2:	2100      	movs	r1, #0
 80084e4:	2204      	movs	r2, #4
 80084e6:	f102 0614 	add.w	r6, r2, #20
 80084ea:	429e      	cmp	r6, r3
 80084ec:	d93d      	bls.n	800856a <_dtoa_r+0x31a>
 80084ee:	6041      	str	r1, [r0, #4]
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fd9f 	bl	8009034 <_Balloc>
 80084f6:	9000      	str	r0, [sp, #0]
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d139      	bne.n	8008570 <_dtoa_r+0x320>
 80084fc:	4b16      	ldr	r3, [pc, #88]	; (8008558 <_dtoa_r+0x308>)
 80084fe:	4602      	mov	r2, r0
 8008500:	f240 11af 	movw	r1, #431	; 0x1af
 8008504:	e6bd      	b.n	8008282 <_dtoa_r+0x32>
 8008506:	2301      	movs	r3, #1
 8008508:	e7e1      	b.n	80084ce <_dtoa_r+0x27e>
 800850a:	2501      	movs	r5, #1
 800850c:	2300      	movs	r3, #0
 800850e:	9307      	str	r3, [sp, #28]
 8008510:	9509      	str	r5, [sp, #36]	; 0x24
 8008512:	f04f 33ff 	mov.w	r3, #4294967295
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	2200      	movs	r2, #0
 800851c:	2312      	movs	r3, #18
 800851e:	e7d1      	b.n	80084c4 <_dtoa_r+0x274>
 8008520:	636f4361 	.word	0x636f4361
 8008524:	3fd287a7 	.word	0x3fd287a7
 8008528:	8b60c8b3 	.word	0x8b60c8b3
 800852c:	3fc68a28 	.word	0x3fc68a28
 8008530:	509f79fb 	.word	0x509f79fb
 8008534:	3fd34413 	.word	0x3fd34413
 8008538:	0800a235 	.word	0x0800a235
 800853c:	0800a24c 	.word	0x0800a24c
 8008540:	7ff00000 	.word	0x7ff00000
 8008544:	0800a231 	.word	0x0800a231
 8008548:	0800a228 	.word	0x0800a228
 800854c:	0800a205 	.word	0x0800a205
 8008550:	3ff80000 	.word	0x3ff80000
 8008554:	0800a338 	.word	0x0800a338
 8008558:	0800a2a4 	.word	0x0800a2a4
 800855c:	2301      	movs	r3, #1
 800855e:	9309      	str	r3, [sp, #36]	; 0x24
 8008560:	e7d7      	b.n	8008512 <_dtoa_r+0x2c2>
 8008562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	e7ba      	b.n	80084e0 <_dtoa_r+0x290>
 800856a:	3101      	adds	r1, #1
 800856c:	0052      	lsls	r2, r2, #1
 800856e:	e7ba      	b.n	80084e6 <_dtoa_r+0x296>
 8008570:	69e3      	ldr	r3, [r4, #28]
 8008572:	9a00      	ldr	r2, [sp, #0]
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	2b0e      	cmp	r3, #14
 800857a:	f200 80a8 	bhi.w	80086ce <_dtoa_r+0x47e>
 800857e:	2d00      	cmp	r5, #0
 8008580:	f000 80a5 	beq.w	80086ce <_dtoa_r+0x47e>
 8008584:	f1bb 0f00 	cmp.w	fp, #0
 8008588:	dd38      	ble.n	80085fc <_dtoa_r+0x3ac>
 800858a:	4bc0      	ldr	r3, [pc, #768]	; (800888c <_dtoa_r+0x63c>)
 800858c:	f00b 020f 	and.w	r2, fp, #15
 8008590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008594:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008598:	e9d3 6700 	ldrd	r6, r7, [r3]
 800859c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80085a0:	d019      	beq.n	80085d6 <_dtoa_r+0x386>
 80085a2:	4bbb      	ldr	r3, [pc, #748]	; (8008890 <_dtoa_r+0x640>)
 80085a4:	ec51 0b18 	vmov	r0, r1, d8
 80085a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085ac:	f7f8 f95e 	bl	800086c <__aeabi_ddiv>
 80085b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b4:	f008 080f 	and.w	r8, r8, #15
 80085b8:	2503      	movs	r5, #3
 80085ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008890 <_dtoa_r+0x640>
 80085be:	f1b8 0f00 	cmp.w	r8, #0
 80085c2:	d10a      	bne.n	80085da <_dtoa_r+0x38a>
 80085c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c8:	4632      	mov	r2, r6
 80085ca:	463b      	mov	r3, r7
 80085cc:	f7f8 f94e 	bl	800086c <__aeabi_ddiv>
 80085d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d4:	e02b      	b.n	800862e <_dtoa_r+0x3de>
 80085d6:	2502      	movs	r5, #2
 80085d8:	e7ef      	b.n	80085ba <_dtoa_r+0x36a>
 80085da:	f018 0f01 	tst.w	r8, #1
 80085de:	d008      	beq.n	80085f2 <_dtoa_r+0x3a2>
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80085e8:	f7f8 f816 	bl	8000618 <__aeabi_dmul>
 80085ec:	3501      	adds	r5, #1
 80085ee:	4606      	mov	r6, r0
 80085f0:	460f      	mov	r7, r1
 80085f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085f6:	f109 0908 	add.w	r9, r9, #8
 80085fa:	e7e0      	b.n	80085be <_dtoa_r+0x36e>
 80085fc:	f000 809f 	beq.w	800873e <_dtoa_r+0x4ee>
 8008600:	f1cb 0600 	rsb	r6, fp, #0
 8008604:	4ba1      	ldr	r3, [pc, #644]	; (800888c <_dtoa_r+0x63c>)
 8008606:	4fa2      	ldr	r7, [pc, #648]	; (8008890 <_dtoa_r+0x640>)
 8008608:	f006 020f 	and.w	r2, r6, #15
 800860c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	ec51 0b18 	vmov	r0, r1, d8
 8008618:	f7f7 fffe 	bl	8000618 <__aeabi_dmul>
 800861c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008620:	1136      	asrs	r6, r6, #4
 8008622:	2300      	movs	r3, #0
 8008624:	2502      	movs	r5, #2
 8008626:	2e00      	cmp	r6, #0
 8008628:	d17e      	bne.n	8008728 <_dtoa_r+0x4d8>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1d0      	bne.n	80085d0 <_dtoa_r+0x380>
 800862e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008630:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8084 	beq.w	8008742 <_dtoa_r+0x4f2>
 800863a:	4b96      	ldr	r3, [pc, #600]	; (8008894 <_dtoa_r+0x644>)
 800863c:	2200      	movs	r2, #0
 800863e:	4640      	mov	r0, r8
 8008640:	4649      	mov	r1, r9
 8008642:	f7f8 fa5b 	bl	8000afc <__aeabi_dcmplt>
 8008646:	2800      	cmp	r0, #0
 8008648:	d07b      	beq.n	8008742 <_dtoa_r+0x4f2>
 800864a:	9b04      	ldr	r3, [sp, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d078      	beq.n	8008742 <_dtoa_r+0x4f2>
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	dd39      	ble.n	80086ca <_dtoa_r+0x47a>
 8008656:	4b90      	ldr	r3, [pc, #576]	; (8008898 <_dtoa_r+0x648>)
 8008658:	2200      	movs	r2, #0
 800865a:	4640      	mov	r0, r8
 800865c:	4649      	mov	r1, r9
 800865e:	f7f7 ffdb 	bl	8000618 <__aeabi_dmul>
 8008662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008666:	9e01      	ldr	r6, [sp, #4]
 8008668:	f10b 37ff 	add.w	r7, fp, #4294967295
 800866c:	3501      	adds	r5, #1
 800866e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008672:	4628      	mov	r0, r5
 8008674:	f7f7 ff66 	bl	8000544 <__aeabi_i2d>
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	f7f7 ffcc 	bl	8000618 <__aeabi_dmul>
 8008680:	4b86      	ldr	r3, [pc, #536]	; (800889c <_dtoa_r+0x64c>)
 8008682:	2200      	movs	r2, #0
 8008684:	f7f7 fe12 	bl	80002ac <__adddf3>
 8008688:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800868c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	2e00      	cmp	r6, #0
 8008694:	d158      	bne.n	8008748 <_dtoa_r+0x4f8>
 8008696:	4b82      	ldr	r3, [pc, #520]	; (80088a0 <_dtoa_r+0x650>)
 8008698:	2200      	movs	r2, #0
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f7f7 fe03 	bl	80002a8 <__aeabi_dsub>
 80086a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086a6:	4680      	mov	r8, r0
 80086a8:	4689      	mov	r9, r1
 80086aa:	f7f8 fa45 	bl	8000b38 <__aeabi_dcmpgt>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	f040 8296 	bne.w	8008be0 <_dtoa_r+0x990>
 80086b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80086b8:	4640      	mov	r0, r8
 80086ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086be:	4649      	mov	r1, r9
 80086c0:	f7f8 fa1c 	bl	8000afc <__aeabi_dcmplt>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	f040 8289 	bne.w	8008bdc <_dtoa_r+0x98c>
 80086ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80086ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f2c0 814e 	blt.w	8008972 <_dtoa_r+0x722>
 80086d6:	f1bb 0f0e 	cmp.w	fp, #14
 80086da:	f300 814a 	bgt.w	8008972 <_dtoa_r+0x722>
 80086de:	4b6b      	ldr	r3, [pc, #428]	; (800888c <_dtoa_r+0x63c>)
 80086e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f280 80dc 	bge.w	80088a8 <_dtoa_r+0x658>
 80086f0:	9b04      	ldr	r3, [sp, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f300 80d8 	bgt.w	80088a8 <_dtoa_r+0x658>
 80086f8:	f040 826f 	bne.w	8008bda <_dtoa_r+0x98a>
 80086fc:	4b68      	ldr	r3, [pc, #416]	; (80088a0 <_dtoa_r+0x650>)
 80086fe:	2200      	movs	r2, #0
 8008700:	4640      	mov	r0, r8
 8008702:	4649      	mov	r1, r9
 8008704:	f7f7 ff88 	bl	8000618 <__aeabi_dmul>
 8008708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800870c:	f7f8 fa0a 	bl	8000b24 <__aeabi_dcmpge>
 8008710:	9e04      	ldr	r6, [sp, #16]
 8008712:	4637      	mov	r7, r6
 8008714:	2800      	cmp	r0, #0
 8008716:	f040 8245 	bne.w	8008ba4 <_dtoa_r+0x954>
 800871a:	9d00      	ldr	r5, [sp, #0]
 800871c:	2331      	movs	r3, #49	; 0x31
 800871e:	f805 3b01 	strb.w	r3, [r5], #1
 8008722:	f10b 0b01 	add.w	fp, fp, #1
 8008726:	e241      	b.n	8008bac <_dtoa_r+0x95c>
 8008728:	07f2      	lsls	r2, r6, #31
 800872a:	d505      	bpl.n	8008738 <_dtoa_r+0x4e8>
 800872c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008730:	f7f7 ff72 	bl	8000618 <__aeabi_dmul>
 8008734:	3501      	adds	r5, #1
 8008736:	2301      	movs	r3, #1
 8008738:	1076      	asrs	r6, r6, #1
 800873a:	3708      	adds	r7, #8
 800873c:	e773      	b.n	8008626 <_dtoa_r+0x3d6>
 800873e:	2502      	movs	r5, #2
 8008740:	e775      	b.n	800862e <_dtoa_r+0x3de>
 8008742:	9e04      	ldr	r6, [sp, #16]
 8008744:	465f      	mov	r7, fp
 8008746:	e792      	b.n	800866e <_dtoa_r+0x41e>
 8008748:	9900      	ldr	r1, [sp, #0]
 800874a:	4b50      	ldr	r3, [pc, #320]	; (800888c <_dtoa_r+0x63c>)
 800874c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008750:	4431      	add	r1, r6
 8008752:	9102      	str	r1, [sp, #8]
 8008754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008756:	eeb0 9a47 	vmov.f32	s18, s14
 800875a:	eef0 9a67 	vmov.f32	s19, s15
 800875e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008766:	2900      	cmp	r1, #0
 8008768:	d044      	beq.n	80087f4 <_dtoa_r+0x5a4>
 800876a:	494e      	ldr	r1, [pc, #312]	; (80088a4 <_dtoa_r+0x654>)
 800876c:	2000      	movs	r0, #0
 800876e:	f7f8 f87d 	bl	800086c <__aeabi_ddiv>
 8008772:	ec53 2b19 	vmov	r2, r3, d9
 8008776:	f7f7 fd97 	bl	80002a8 <__aeabi_dsub>
 800877a:	9d00      	ldr	r5, [sp, #0]
 800877c:	ec41 0b19 	vmov	d9, r0, r1
 8008780:	4649      	mov	r1, r9
 8008782:	4640      	mov	r0, r8
 8008784:	f7f8 f9f8 	bl	8000b78 <__aeabi_d2iz>
 8008788:	4606      	mov	r6, r0
 800878a:	f7f7 fedb 	bl	8000544 <__aeabi_i2d>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4640      	mov	r0, r8
 8008794:	4649      	mov	r1, r9
 8008796:	f7f7 fd87 	bl	80002a8 <__aeabi_dsub>
 800879a:	3630      	adds	r6, #48	; 0x30
 800879c:	f805 6b01 	strb.w	r6, [r5], #1
 80087a0:	ec53 2b19 	vmov	r2, r3, d9
 80087a4:	4680      	mov	r8, r0
 80087a6:	4689      	mov	r9, r1
 80087a8:	f7f8 f9a8 	bl	8000afc <__aeabi_dcmplt>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d164      	bne.n	800887a <_dtoa_r+0x62a>
 80087b0:	4642      	mov	r2, r8
 80087b2:	464b      	mov	r3, r9
 80087b4:	4937      	ldr	r1, [pc, #220]	; (8008894 <_dtoa_r+0x644>)
 80087b6:	2000      	movs	r0, #0
 80087b8:	f7f7 fd76 	bl	80002a8 <__aeabi_dsub>
 80087bc:	ec53 2b19 	vmov	r2, r3, d9
 80087c0:	f7f8 f99c 	bl	8000afc <__aeabi_dcmplt>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f040 80b6 	bne.w	8008936 <_dtoa_r+0x6e6>
 80087ca:	9b02      	ldr	r3, [sp, #8]
 80087cc:	429d      	cmp	r5, r3
 80087ce:	f43f af7c 	beq.w	80086ca <_dtoa_r+0x47a>
 80087d2:	4b31      	ldr	r3, [pc, #196]	; (8008898 <_dtoa_r+0x648>)
 80087d4:	ec51 0b19 	vmov	r0, r1, d9
 80087d8:	2200      	movs	r2, #0
 80087da:	f7f7 ff1d 	bl	8000618 <__aeabi_dmul>
 80087de:	4b2e      	ldr	r3, [pc, #184]	; (8008898 <_dtoa_r+0x648>)
 80087e0:	ec41 0b19 	vmov	d9, r0, r1
 80087e4:	2200      	movs	r2, #0
 80087e6:	4640      	mov	r0, r8
 80087e8:	4649      	mov	r1, r9
 80087ea:	f7f7 ff15 	bl	8000618 <__aeabi_dmul>
 80087ee:	4680      	mov	r8, r0
 80087f0:	4689      	mov	r9, r1
 80087f2:	e7c5      	b.n	8008780 <_dtoa_r+0x530>
 80087f4:	ec51 0b17 	vmov	r0, r1, d7
 80087f8:	f7f7 ff0e 	bl	8000618 <__aeabi_dmul>
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	9d00      	ldr	r5, [sp, #0]
 8008800:	930f      	str	r3, [sp, #60]	; 0x3c
 8008802:	ec41 0b19 	vmov	d9, r0, r1
 8008806:	4649      	mov	r1, r9
 8008808:	4640      	mov	r0, r8
 800880a:	f7f8 f9b5 	bl	8000b78 <__aeabi_d2iz>
 800880e:	4606      	mov	r6, r0
 8008810:	f7f7 fe98 	bl	8000544 <__aeabi_i2d>
 8008814:	3630      	adds	r6, #48	; 0x30
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	f7f7 fd43 	bl	80002a8 <__aeabi_dsub>
 8008822:	f805 6b01 	strb.w	r6, [r5], #1
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	429d      	cmp	r5, r3
 800882a:	4680      	mov	r8, r0
 800882c:	4689      	mov	r9, r1
 800882e:	f04f 0200 	mov.w	r2, #0
 8008832:	d124      	bne.n	800887e <_dtoa_r+0x62e>
 8008834:	4b1b      	ldr	r3, [pc, #108]	; (80088a4 <_dtoa_r+0x654>)
 8008836:	ec51 0b19 	vmov	r0, r1, d9
 800883a:	f7f7 fd37 	bl	80002ac <__adddf3>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	f7f8 f977 	bl	8000b38 <__aeabi_dcmpgt>
 800884a:	2800      	cmp	r0, #0
 800884c:	d173      	bne.n	8008936 <_dtoa_r+0x6e6>
 800884e:	ec53 2b19 	vmov	r2, r3, d9
 8008852:	4914      	ldr	r1, [pc, #80]	; (80088a4 <_dtoa_r+0x654>)
 8008854:	2000      	movs	r0, #0
 8008856:	f7f7 fd27 	bl	80002a8 <__aeabi_dsub>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4640      	mov	r0, r8
 8008860:	4649      	mov	r1, r9
 8008862:	f7f8 f94b 	bl	8000afc <__aeabi_dcmplt>
 8008866:	2800      	cmp	r0, #0
 8008868:	f43f af2f 	beq.w	80086ca <_dtoa_r+0x47a>
 800886c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800886e:	1e6b      	subs	r3, r5, #1
 8008870:	930f      	str	r3, [sp, #60]	; 0x3c
 8008872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008876:	2b30      	cmp	r3, #48	; 0x30
 8008878:	d0f8      	beq.n	800886c <_dtoa_r+0x61c>
 800887a:	46bb      	mov	fp, r7
 800887c:	e04a      	b.n	8008914 <_dtoa_r+0x6c4>
 800887e:	4b06      	ldr	r3, [pc, #24]	; (8008898 <_dtoa_r+0x648>)
 8008880:	f7f7 feca 	bl	8000618 <__aeabi_dmul>
 8008884:	4680      	mov	r8, r0
 8008886:	4689      	mov	r9, r1
 8008888:	e7bd      	b.n	8008806 <_dtoa_r+0x5b6>
 800888a:	bf00      	nop
 800888c:	0800a338 	.word	0x0800a338
 8008890:	0800a310 	.word	0x0800a310
 8008894:	3ff00000 	.word	0x3ff00000
 8008898:	40240000 	.word	0x40240000
 800889c:	401c0000 	.word	0x401c0000
 80088a0:	40140000 	.word	0x40140000
 80088a4:	3fe00000 	.word	0x3fe00000
 80088a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088ac:	9d00      	ldr	r5, [sp, #0]
 80088ae:	4642      	mov	r2, r8
 80088b0:	464b      	mov	r3, r9
 80088b2:	4630      	mov	r0, r6
 80088b4:	4639      	mov	r1, r7
 80088b6:	f7f7 ffd9 	bl	800086c <__aeabi_ddiv>
 80088ba:	f7f8 f95d 	bl	8000b78 <__aeabi_d2iz>
 80088be:	9001      	str	r0, [sp, #4]
 80088c0:	f7f7 fe40 	bl	8000544 <__aeabi_i2d>
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	f7f7 fea6 	bl	8000618 <__aeabi_dmul>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f7 fce8 	bl	80002a8 <__aeabi_dsub>
 80088d8:	9e01      	ldr	r6, [sp, #4]
 80088da:	9f04      	ldr	r7, [sp, #16]
 80088dc:	3630      	adds	r6, #48	; 0x30
 80088de:	f805 6b01 	strb.w	r6, [r5], #1
 80088e2:	9e00      	ldr	r6, [sp, #0]
 80088e4:	1bae      	subs	r6, r5, r6
 80088e6:	42b7      	cmp	r7, r6
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	d134      	bne.n	8008958 <_dtoa_r+0x708>
 80088ee:	f7f7 fcdd 	bl	80002ac <__adddf3>
 80088f2:	4642      	mov	r2, r8
 80088f4:	464b      	mov	r3, r9
 80088f6:	4606      	mov	r6, r0
 80088f8:	460f      	mov	r7, r1
 80088fa:	f7f8 f91d 	bl	8000b38 <__aeabi_dcmpgt>
 80088fe:	b9c8      	cbnz	r0, 8008934 <_dtoa_r+0x6e4>
 8008900:	4642      	mov	r2, r8
 8008902:	464b      	mov	r3, r9
 8008904:	4630      	mov	r0, r6
 8008906:	4639      	mov	r1, r7
 8008908:	f7f8 f8ee 	bl	8000ae8 <__aeabi_dcmpeq>
 800890c:	b110      	cbz	r0, 8008914 <_dtoa_r+0x6c4>
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	07db      	lsls	r3, r3, #31
 8008912:	d40f      	bmi.n	8008934 <_dtoa_r+0x6e4>
 8008914:	4651      	mov	r1, sl
 8008916:	4620      	mov	r0, r4
 8008918:	f000 fbcc 	bl	80090b4 <_Bfree>
 800891c:	2300      	movs	r3, #0
 800891e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008920:	702b      	strb	r3, [r5, #0]
 8008922:	f10b 0301 	add.w	r3, fp, #1
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800892a:	2b00      	cmp	r3, #0
 800892c:	f43f ace2 	beq.w	80082f4 <_dtoa_r+0xa4>
 8008930:	601d      	str	r5, [r3, #0]
 8008932:	e4df      	b.n	80082f4 <_dtoa_r+0xa4>
 8008934:	465f      	mov	r7, fp
 8008936:	462b      	mov	r3, r5
 8008938:	461d      	mov	r5, r3
 800893a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800893e:	2a39      	cmp	r2, #57	; 0x39
 8008940:	d106      	bne.n	8008950 <_dtoa_r+0x700>
 8008942:	9a00      	ldr	r2, [sp, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d1f7      	bne.n	8008938 <_dtoa_r+0x6e8>
 8008948:	9900      	ldr	r1, [sp, #0]
 800894a:	2230      	movs	r2, #48	; 0x30
 800894c:	3701      	adds	r7, #1
 800894e:	700a      	strb	r2, [r1, #0]
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	3201      	adds	r2, #1
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e790      	b.n	800887a <_dtoa_r+0x62a>
 8008958:	4ba3      	ldr	r3, [pc, #652]	; (8008be8 <_dtoa_r+0x998>)
 800895a:	2200      	movs	r2, #0
 800895c:	f7f7 fe5c 	bl	8000618 <__aeabi_dmul>
 8008960:	2200      	movs	r2, #0
 8008962:	2300      	movs	r3, #0
 8008964:	4606      	mov	r6, r0
 8008966:	460f      	mov	r7, r1
 8008968:	f7f8 f8be 	bl	8000ae8 <__aeabi_dcmpeq>
 800896c:	2800      	cmp	r0, #0
 800896e:	d09e      	beq.n	80088ae <_dtoa_r+0x65e>
 8008970:	e7d0      	b.n	8008914 <_dtoa_r+0x6c4>
 8008972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008974:	2a00      	cmp	r2, #0
 8008976:	f000 80ca 	beq.w	8008b0e <_dtoa_r+0x8be>
 800897a:	9a07      	ldr	r2, [sp, #28]
 800897c:	2a01      	cmp	r2, #1
 800897e:	f300 80ad 	bgt.w	8008adc <_dtoa_r+0x88c>
 8008982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008984:	2a00      	cmp	r2, #0
 8008986:	f000 80a5 	beq.w	8008ad4 <_dtoa_r+0x884>
 800898a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800898e:	9e08      	ldr	r6, [sp, #32]
 8008990:	9d05      	ldr	r5, [sp, #20]
 8008992:	9a05      	ldr	r2, [sp, #20]
 8008994:	441a      	add	r2, r3
 8008996:	9205      	str	r2, [sp, #20]
 8008998:	9a06      	ldr	r2, [sp, #24]
 800899a:	2101      	movs	r1, #1
 800899c:	441a      	add	r2, r3
 800899e:	4620      	mov	r0, r4
 80089a0:	9206      	str	r2, [sp, #24]
 80089a2:	f000 fc3d 	bl	8009220 <__i2b>
 80089a6:	4607      	mov	r7, r0
 80089a8:	b165      	cbz	r5, 80089c4 <_dtoa_r+0x774>
 80089aa:	9b06      	ldr	r3, [sp, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dd09      	ble.n	80089c4 <_dtoa_r+0x774>
 80089b0:	42ab      	cmp	r3, r5
 80089b2:	9a05      	ldr	r2, [sp, #20]
 80089b4:	bfa8      	it	ge
 80089b6:	462b      	movge	r3, r5
 80089b8:	1ad2      	subs	r2, r2, r3
 80089ba:	9205      	str	r2, [sp, #20]
 80089bc:	9a06      	ldr	r2, [sp, #24]
 80089be:	1aed      	subs	r5, r5, r3
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	9306      	str	r3, [sp, #24]
 80089c4:	9b08      	ldr	r3, [sp, #32]
 80089c6:	b1f3      	cbz	r3, 8008a06 <_dtoa_r+0x7b6>
 80089c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 80a3 	beq.w	8008b16 <_dtoa_r+0x8c6>
 80089d0:	2e00      	cmp	r6, #0
 80089d2:	dd10      	ble.n	80089f6 <_dtoa_r+0x7a6>
 80089d4:	4639      	mov	r1, r7
 80089d6:	4632      	mov	r2, r6
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fce1 	bl	80093a0 <__pow5mult>
 80089de:	4652      	mov	r2, sl
 80089e0:	4601      	mov	r1, r0
 80089e2:	4607      	mov	r7, r0
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fc31 	bl	800924c <__multiply>
 80089ea:	4651      	mov	r1, sl
 80089ec:	4680      	mov	r8, r0
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 fb60 	bl	80090b4 <_Bfree>
 80089f4:	46c2      	mov	sl, r8
 80089f6:	9b08      	ldr	r3, [sp, #32]
 80089f8:	1b9a      	subs	r2, r3, r6
 80089fa:	d004      	beq.n	8008a06 <_dtoa_r+0x7b6>
 80089fc:	4651      	mov	r1, sl
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 fcce 	bl	80093a0 <__pow5mult>
 8008a04:	4682      	mov	sl, r0
 8008a06:	2101      	movs	r1, #1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fc09 	bl	8009220 <__i2b>
 8008a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	4606      	mov	r6, r0
 8008a14:	f340 8081 	ble.w	8008b1a <_dtoa_r+0x8ca>
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 fcbf 	bl	80093a0 <__pow5mult>
 8008a22:	9b07      	ldr	r3, [sp, #28]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	4606      	mov	r6, r0
 8008a28:	dd7a      	ble.n	8008b20 <_dtoa_r+0x8d0>
 8008a2a:	f04f 0800 	mov.w	r8, #0
 8008a2e:	6933      	ldr	r3, [r6, #16]
 8008a30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a34:	6918      	ldr	r0, [r3, #16]
 8008a36:	f000 fba5 	bl	8009184 <__hi0bits>
 8008a3a:	f1c0 0020 	rsb	r0, r0, #32
 8008a3e:	9b06      	ldr	r3, [sp, #24]
 8008a40:	4418      	add	r0, r3
 8008a42:	f010 001f 	ands.w	r0, r0, #31
 8008a46:	f000 8094 	beq.w	8008b72 <_dtoa_r+0x922>
 8008a4a:	f1c0 0320 	rsb	r3, r0, #32
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	f340 8085 	ble.w	8008b5e <_dtoa_r+0x90e>
 8008a54:	9b05      	ldr	r3, [sp, #20]
 8008a56:	f1c0 001c 	rsb	r0, r0, #28
 8008a5a:	4403      	add	r3, r0
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	9b06      	ldr	r3, [sp, #24]
 8008a60:	4403      	add	r3, r0
 8008a62:	4405      	add	r5, r0
 8008a64:	9306      	str	r3, [sp, #24]
 8008a66:	9b05      	ldr	r3, [sp, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dd05      	ble.n	8008a78 <_dtoa_r+0x828>
 8008a6c:	4651      	mov	r1, sl
 8008a6e:	461a      	mov	r2, r3
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fcef 	bl	8009454 <__lshift>
 8008a76:	4682      	mov	sl, r0
 8008a78:	9b06      	ldr	r3, [sp, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	dd05      	ble.n	8008a8a <_dtoa_r+0x83a>
 8008a7e:	4631      	mov	r1, r6
 8008a80:	461a      	mov	r2, r3
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fce6 	bl	8009454 <__lshift>
 8008a88:	4606      	mov	r6, r0
 8008a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d072      	beq.n	8008b76 <_dtoa_r+0x926>
 8008a90:	4631      	mov	r1, r6
 8008a92:	4650      	mov	r0, sl
 8008a94:	f000 fd4a 	bl	800952c <__mcmp>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	da6c      	bge.n	8008b76 <_dtoa_r+0x926>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4651      	mov	r1, sl
 8008aa0:	220a      	movs	r2, #10
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 fb28 	bl	80090f8 <__multadd>
 8008aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008aae:	4682      	mov	sl, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 81b0 	beq.w	8008e16 <_dtoa_r+0xbc6>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	4639      	mov	r1, r7
 8008aba:	220a      	movs	r2, #10
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 fb1b 	bl	80090f8 <__multadd>
 8008ac2:	9b01      	ldr	r3, [sp, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	f300 8096 	bgt.w	8008bf8 <_dtoa_r+0x9a8>
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	dc59      	bgt.n	8008b86 <_dtoa_r+0x936>
 8008ad2:	e091      	b.n	8008bf8 <_dtoa_r+0x9a8>
 8008ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ada:	e758      	b.n	800898e <_dtoa_r+0x73e>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	1e5e      	subs	r6, r3, #1
 8008ae0:	9b08      	ldr	r3, [sp, #32]
 8008ae2:	42b3      	cmp	r3, r6
 8008ae4:	bfbf      	itttt	lt
 8008ae6:	9b08      	ldrlt	r3, [sp, #32]
 8008ae8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008aea:	9608      	strlt	r6, [sp, #32]
 8008aec:	1af3      	sublt	r3, r6, r3
 8008aee:	bfb4      	ite	lt
 8008af0:	18d2      	addlt	r2, r2, r3
 8008af2:	1b9e      	subge	r6, r3, r6
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	bfbc      	itt	lt
 8008af8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008afa:	2600      	movlt	r6, #0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	bfb7      	itett	lt
 8008b00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008b04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008b08:	1a9d      	sublt	r5, r3, r2
 8008b0a:	2300      	movlt	r3, #0
 8008b0c:	e741      	b.n	8008992 <_dtoa_r+0x742>
 8008b0e:	9e08      	ldr	r6, [sp, #32]
 8008b10:	9d05      	ldr	r5, [sp, #20]
 8008b12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b14:	e748      	b.n	80089a8 <_dtoa_r+0x758>
 8008b16:	9a08      	ldr	r2, [sp, #32]
 8008b18:	e770      	b.n	80089fc <_dtoa_r+0x7ac>
 8008b1a:	9b07      	ldr	r3, [sp, #28]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	dc19      	bgt.n	8008b54 <_dtoa_r+0x904>
 8008b20:	9b02      	ldr	r3, [sp, #8]
 8008b22:	b9bb      	cbnz	r3, 8008b54 <_dtoa_r+0x904>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b2a:	b99b      	cbnz	r3, 8008b54 <_dtoa_r+0x904>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b32:	0d1b      	lsrs	r3, r3, #20
 8008b34:	051b      	lsls	r3, r3, #20
 8008b36:	b183      	cbz	r3, 8008b5a <_dtoa_r+0x90a>
 8008b38:	9b05      	ldr	r3, [sp, #20]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	9b06      	ldr	r3, [sp, #24]
 8008b40:	3301      	adds	r3, #1
 8008b42:	9306      	str	r3, [sp, #24]
 8008b44:	f04f 0801 	mov.w	r8, #1
 8008b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f47f af6f 	bne.w	8008a2e <_dtoa_r+0x7de>
 8008b50:	2001      	movs	r0, #1
 8008b52:	e774      	b.n	8008a3e <_dtoa_r+0x7ee>
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	e7f6      	b.n	8008b48 <_dtoa_r+0x8f8>
 8008b5a:	4698      	mov	r8, r3
 8008b5c:	e7f4      	b.n	8008b48 <_dtoa_r+0x8f8>
 8008b5e:	d082      	beq.n	8008a66 <_dtoa_r+0x816>
 8008b60:	9a05      	ldr	r2, [sp, #20]
 8008b62:	331c      	adds	r3, #28
 8008b64:	441a      	add	r2, r3
 8008b66:	9205      	str	r2, [sp, #20]
 8008b68:	9a06      	ldr	r2, [sp, #24]
 8008b6a:	441a      	add	r2, r3
 8008b6c:	441d      	add	r5, r3
 8008b6e:	9206      	str	r2, [sp, #24]
 8008b70:	e779      	b.n	8008a66 <_dtoa_r+0x816>
 8008b72:	4603      	mov	r3, r0
 8008b74:	e7f4      	b.n	8008b60 <_dtoa_r+0x910>
 8008b76:	9b04      	ldr	r3, [sp, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	dc37      	bgt.n	8008bec <_dtoa_r+0x99c>
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	dd34      	ble.n	8008bec <_dtoa_r+0x99c>
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	9b01      	ldr	r3, [sp, #4]
 8008b88:	b963      	cbnz	r3, 8008ba4 <_dtoa_r+0x954>
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fab2 	bl	80090f8 <__multadd>
 8008b94:	4601      	mov	r1, r0
 8008b96:	4606      	mov	r6, r0
 8008b98:	4650      	mov	r0, sl
 8008b9a:	f000 fcc7 	bl	800952c <__mcmp>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f73f adbb 	bgt.w	800871a <_dtoa_r+0x4ca>
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba6:	9d00      	ldr	r5, [sp, #0]
 8008ba8:	ea6f 0b03 	mvn.w	fp, r3
 8008bac:	f04f 0800 	mov.w	r8, #0
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fa7e 	bl	80090b4 <_Bfree>
 8008bb8:	2f00      	cmp	r7, #0
 8008bba:	f43f aeab 	beq.w	8008914 <_dtoa_r+0x6c4>
 8008bbe:	f1b8 0f00 	cmp.w	r8, #0
 8008bc2:	d005      	beq.n	8008bd0 <_dtoa_r+0x980>
 8008bc4:	45b8      	cmp	r8, r7
 8008bc6:	d003      	beq.n	8008bd0 <_dtoa_r+0x980>
 8008bc8:	4641      	mov	r1, r8
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 fa72 	bl	80090b4 <_Bfree>
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fa6e 	bl	80090b4 <_Bfree>
 8008bd8:	e69c      	b.n	8008914 <_dtoa_r+0x6c4>
 8008bda:	2600      	movs	r6, #0
 8008bdc:	4637      	mov	r7, r6
 8008bde:	e7e1      	b.n	8008ba4 <_dtoa_r+0x954>
 8008be0:	46bb      	mov	fp, r7
 8008be2:	4637      	mov	r7, r6
 8008be4:	e599      	b.n	800871a <_dtoa_r+0x4ca>
 8008be6:	bf00      	nop
 8008be8:	40240000 	.word	0x40240000
 8008bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 80c8 	beq.w	8008d84 <_dtoa_r+0xb34>
 8008bf4:	9b04      	ldr	r3, [sp, #16]
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	2d00      	cmp	r5, #0
 8008bfa:	dd05      	ble.n	8008c08 <_dtoa_r+0x9b8>
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	462a      	mov	r2, r5
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 fc27 	bl	8009454 <__lshift>
 8008c06:	4607      	mov	r7, r0
 8008c08:	f1b8 0f00 	cmp.w	r8, #0
 8008c0c:	d05b      	beq.n	8008cc6 <_dtoa_r+0xa76>
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 fa0f 	bl	8009034 <_Balloc>
 8008c16:	4605      	mov	r5, r0
 8008c18:	b928      	cbnz	r0, 8008c26 <_dtoa_r+0x9d6>
 8008c1a:	4b83      	ldr	r3, [pc, #524]	; (8008e28 <_dtoa_r+0xbd8>)
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008c22:	f7ff bb2e 	b.w	8008282 <_dtoa_r+0x32>
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	3202      	adds	r2, #2
 8008c2a:	0092      	lsls	r2, r2, #2
 8008c2c:	f107 010c 	add.w	r1, r7, #12
 8008c30:	300c      	adds	r0, #12
 8008c32:	f001 f973 	bl	8009f1c <memcpy>
 8008c36:	2201      	movs	r2, #1
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fc0a 	bl	8009454 <__lshift>
 8008c40:	9b00      	ldr	r3, [sp, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	9308      	str	r3, [sp, #32]
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	46b8      	mov	r8, r7
 8008c56:	9306      	str	r3, [sp, #24]
 8008c58:	4607      	mov	r7, r0
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	4650      	mov	r0, sl
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	f7ff fa6b 	bl	800813e <quorem>
 8008c68:	4641      	mov	r1, r8
 8008c6a:	9002      	str	r0, [sp, #8]
 8008c6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c70:	4650      	mov	r0, sl
 8008c72:	f000 fc5b 	bl	800952c <__mcmp>
 8008c76:	463a      	mov	r2, r7
 8008c78:	9005      	str	r0, [sp, #20]
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 fc71 	bl	8009564 <__mdiff>
 8008c82:	68c2      	ldr	r2, [r0, #12]
 8008c84:	4605      	mov	r5, r0
 8008c86:	bb02      	cbnz	r2, 8008cca <_dtoa_r+0xa7a>
 8008c88:	4601      	mov	r1, r0
 8008c8a:	4650      	mov	r0, sl
 8008c8c:	f000 fc4e 	bl	800952c <__mcmp>
 8008c90:	4602      	mov	r2, r0
 8008c92:	4629      	mov	r1, r5
 8008c94:	4620      	mov	r0, r4
 8008c96:	9209      	str	r2, [sp, #36]	; 0x24
 8008c98:	f000 fa0c 	bl	80090b4 <_Bfree>
 8008c9c:	9b07      	ldr	r3, [sp, #28]
 8008c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ca0:	9d04      	ldr	r5, [sp, #16]
 8008ca2:	ea43 0102 	orr.w	r1, r3, r2
 8008ca6:	9b06      	ldr	r3, [sp, #24]
 8008ca8:	4319      	orrs	r1, r3
 8008caa:	d110      	bne.n	8008cce <_dtoa_r+0xa7e>
 8008cac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cb0:	d029      	beq.n	8008d06 <_dtoa_r+0xab6>
 8008cb2:	9b05      	ldr	r3, [sp, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dd02      	ble.n	8008cbe <_dtoa_r+0xa6e>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	f883 9000 	strb.w	r9, [r3]
 8008cc4:	e774      	b.n	8008bb0 <_dtoa_r+0x960>
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	e7ba      	b.n	8008c40 <_dtoa_r+0x9f0>
 8008cca:	2201      	movs	r2, #1
 8008ccc:	e7e1      	b.n	8008c92 <_dtoa_r+0xa42>
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db04      	blt.n	8008cde <_dtoa_r+0xa8e>
 8008cd4:	9907      	ldr	r1, [sp, #28]
 8008cd6:	430b      	orrs	r3, r1
 8008cd8:	9906      	ldr	r1, [sp, #24]
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	d120      	bne.n	8008d20 <_dtoa_r+0xad0>
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	dded      	ble.n	8008cbe <_dtoa_r+0xa6e>
 8008ce2:	4651      	mov	r1, sl
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 fbb4 	bl	8009454 <__lshift>
 8008cec:	4631      	mov	r1, r6
 8008cee:	4682      	mov	sl, r0
 8008cf0:	f000 fc1c 	bl	800952c <__mcmp>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	dc03      	bgt.n	8008d00 <_dtoa_r+0xab0>
 8008cf8:	d1e1      	bne.n	8008cbe <_dtoa_r+0xa6e>
 8008cfa:	f019 0f01 	tst.w	r9, #1
 8008cfe:	d0de      	beq.n	8008cbe <_dtoa_r+0xa6e>
 8008d00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d04:	d1d8      	bne.n	8008cb8 <_dtoa_r+0xa68>
 8008d06:	9a01      	ldr	r2, [sp, #4]
 8008d08:	2339      	movs	r3, #57	; 0x39
 8008d0a:	7013      	strb	r3, [r2, #0]
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	461d      	mov	r5, r3
 8008d10:	3b01      	subs	r3, #1
 8008d12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d16:	2a39      	cmp	r2, #57	; 0x39
 8008d18:	d06c      	beq.n	8008df4 <_dtoa_r+0xba4>
 8008d1a:	3201      	adds	r2, #1
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	e747      	b.n	8008bb0 <_dtoa_r+0x960>
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	dd07      	ble.n	8008d34 <_dtoa_r+0xae4>
 8008d24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d28:	d0ed      	beq.n	8008d06 <_dtoa_r+0xab6>
 8008d2a:	9a01      	ldr	r2, [sp, #4]
 8008d2c:	f109 0301 	add.w	r3, r9, #1
 8008d30:	7013      	strb	r3, [r2, #0]
 8008d32:	e73d      	b.n	8008bb0 <_dtoa_r+0x960>
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	9a08      	ldr	r2, [sp, #32]
 8008d38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d043      	beq.n	8008dc8 <_dtoa_r+0xb78>
 8008d40:	4651      	mov	r1, sl
 8008d42:	2300      	movs	r3, #0
 8008d44:	220a      	movs	r2, #10
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 f9d6 	bl	80090f8 <__multadd>
 8008d4c:	45b8      	cmp	r8, r7
 8008d4e:	4682      	mov	sl, r0
 8008d50:	f04f 0300 	mov.w	r3, #0
 8008d54:	f04f 020a 	mov.w	r2, #10
 8008d58:	4641      	mov	r1, r8
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	d107      	bne.n	8008d6e <_dtoa_r+0xb1e>
 8008d5e:	f000 f9cb 	bl	80090f8 <__multadd>
 8008d62:	4680      	mov	r8, r0
 8008d64:	4607      	mov	r7, r0
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	e775      	b.n	8008c5a <_dtoa_r+0xa0a>
 8008d6e:	f000 f9c3 	bl	80090f8 <__multadd>
 8008d72:	4639      	mov	r1, r7
 8008d74:	4680      	mov	r8, r0
 8008d76:	2300      	movs	r3, #0
 8008d78:	220a      	movs	r2, #10
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 f9bc 	bl	80090f8 <__multadd>
 8008d80:	4607      	mov	r7, r0
 8008d82:	e7f0      	b.n	8008d66 <_dtoa_r+0xb16>
 8008d84:	9b04      	ldr	r3, [sp, #16]
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	9d00      	ldr	r5, [sp, #0]
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4650      	mov	r0, sl
 8008d8e:	f7ff f9d6 	bl	800813e <quorem>
 8008d92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d96:	9b00      	ldr	r3, [sp, #0]
 8008d98:	f805 9b01 	strb.w	r9, [r5], #1
 8008d9c:	1aea      	subs	r2, r5, r3
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	4293      	cmp	r3, r2
 8008da2:	dd07      	ble.n	8008db4 <_dtoa_r+0xb64>
 8008da4:	4651      	mov	r1, sl
 8008da6:	2300      	movs	r3, #0
 8008da8:	220a      	movs	r2, #10
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f9a4 	bl	80090f8 <__multadd>
 8008db0:	4682      	mov	sl, r0
 8008db2:	e7ea      	b.n	8008d8a <_dtoa_r+0xb3a>
 8008db4:	9b01      	ldr	r3, [sp, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfc8      	it	gt
 8008dba:	461d      	movgt	r5, r3
 8008dbc:	9b00      	ldr	r3, [sp, #0]
 8008dbe:	bfd8      	it	le
 8008dc0:	2501      	movle	r5, #1
 8008dc2:	441d      	add	r5, r3
 8008dc4:	f04f 0800 	mov.w	r8, #0
 8008dc8:	4651      	mov	r1, sl
 8008dca:	2201      	movs	r2, #1
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fb41 	bl	8009454 <__lshift>
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	f000 fba9 	bl	800952c <__mcmp>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	dc96      	bgt.n	8008d0c <_dtoa_r+0xabc>
 8008dde:	d102      	bne.n	8008de6 <_dtoa_r+0xb96>
 8008de0:	f019 0f01 	tst.w	r9, #1
 8008de4:	d192      	bne.n	8008d0c <_dtoa_r+0xabc>
 8008de6:	462b      	mov	r3, r5
 8008de8:	461d      	mov	r5, r3
 8008dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dee:	2a30      	cmp	r2, #48	; 0x30
 8008df0:	d0fa      	beq.n	8008de8 <_dtoa_r+0xb98>
 8008df2:	e6dd      	b.n	8008bb0 <_dtoa_r+0x960>
 8008df4:	9a00      	ldr	r2, [sp, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d189      	bne.n	8008d0e <_dtoa_r+0xabe>
 8008dfa:	f10b 0b01 	add.w	fp, fp, #1
 8008dfe:	2331      	movs	r3, #49	; 0x31
 8008e00:	e796      	b.n	8008d30 <_dtoa_r+0xae0>
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <_dtoa_r+0xbdc>)
 8008e04:	f7ff ba99 	b.w	800833a <_dtoa_r+0xea>
 8008e08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f47f aa6d 	bne.w	80082ea <_dtoa_r+0x9a>
 8008e10:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <_dtoa_r+0xbe0>)
 8008e12:	f7ff ba92 	b.w	800833a <_dtoa_r+0xea>
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	dcb5      	bgt.n	8008d88 <_dtoa_r+0xb38>
 8008e1c:	9b07      	ldr	r3, [sp, #28]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	f73f aeb1 	bgt.w	8008b86 <_dtoa_r+0x936>
 8008e24:	e7b0      	b.n	8008d88 <_dtoa_r+0xb38>
 8008e26:	bf00      	nop
 8008e28:	0800a2a4 	.word	0x0800a2a4
 8008e2c:	0800a204 	.word	0x0800a204
 8008e30:	0800a228 	.word	0x0800a228

08008e34 <_free_r>:
 8008e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d044      	beq.n	8008ec4 <_free_r+0x90>
 8008e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e3e:	9001      	str	r0, [sp, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f1a1 0404 	sub.w	r4, r1, #4
 8008e46:	bfb8      	it	lt
 8008e48:	18e4      	addlt	r4, r4, r3
 8008e4a:	f000 f8e7 	bl	800901c <__malloc_lock>
 8008e4e:	4a1e      	ldr	r2, [pc, #120]	; (8008ec8 <_free_r+0x94>)
 8008e50:	9801      	ldr	r0, [sp, #4]
 8008e52:	6813      	ldr	r3, [r2, #0]
 8008e54:	b933      	cbnz	r3, 8008e64 <_free_r+0x30>
 8008e56:	6063      	str	r3, [r4, #4]
 8008e58:	6014      	str	r4, [r2, #0]
 8008e5a:	b003      	add	sp, #12
 8008e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e60:	f000 b8e2 	b.w	8009028 <__malloc_unlock>
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	d908      	bls.n	8008e7a <_free_r+0x46>
 8008e68:	6825      	ldr	r5, [r4, #0]
 8008e6a:	1961      	adds	r1, r4, r5
 8008e6c:	428b      	cmp	r3, r1
 8008e6e:	bf01      	itttt	eq
 8008e70:	6819      	ldreq	r1, [r3, #0]
 8008e72:	685b      	ldreq	r3, [r3, #4]
 8008e74:	1949      	addeq	r1, r1, r5
 8008e76:	6021      	streq	r1, [r4, #0]
 8008e78:	e7ed      	b.n	8008e56 <_free_r+0x22>
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	b10b      	cbz	r3, 8008e84 <_free_r+0x50>
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	d9fa      	bls.n	8008e7a <_free_r+0x46>
 8008e84:	6811      	ldr	r1, [r2, #0]
 8008e86:	1855      	adds	r5, r2, r1
 8008e88:	42a5      	cmp	r5, r4
 8008e8a:	d10b      	bne.n	8008ea4 <_free_r+0x70>
 8008e8c:	6824      	ldr	r4, [r4, #0]
 8008e8e:	4421      	add	r1, r4
 8008e90:	1854      	adds	r4, r2, r1
 8008e92:	42a3      	cmp	r3, r4
 8008e94:	6011      	str	r1, [r2, #0]
 8008e96:	d1e0      	bne.n	8008e5a <_free_r+0x26>
 8008e98:	681c      	ldr	r4, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	6053      	str	r3, [r2, #4]
 8008e9e:	440c      	add	r4, r1
 8008ea0:	6014      	str	r4, [r2, #0]
 8008ea2:	e7da      	b.n	8008e5a <_free_r+0x26>
 8008ea4:	d902      	bls.n	8008eac <_free_r+0x78>
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	6003      	str	r3, [r0, #0]
 8008eaa:	e7d6      	b.n	8008e5a <_free_r+0x26>
 8008eac:	6825      	ldr	r5, [r4, #0]
 8008eae:	1961      	adds	r1, r4, r5
 8008eb0:	428b      	cmp	r3, r1
 8008eb2:	bf04      	itt	eq
 8008eb4:	6819      	ldreq	r1, [r3, #0]
 8008eb6:	685b      	ldreq	r3, [r3, #4]
 8008eb8:	6063      	str	r3, [r4, #4]
 8008eba:	bf04      	itt	eq
 8008ebc:	1949      	addeq	r1, r1, r5
 8008ebe:	6021      	streq	r1, [r4, #0]
 8008ec0:	6054      	str	r4, [r2, #4]
 8008ec2:	e7ca      	b.n	8008e5a <_free_r+0x26>
 8008ec4:	b003      	add	sp, #12
 8008ec6:	bd30      	pop	{r4, r5, pc}
 8008ec8:	20000cb4 	.word	0x20000cb4

08008ecc <malloc>:
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <malloc+0xc>)
 8008ece:	4601      	mov	r1, r0
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f000 b823 	b.w	8008f1c <_malloc_r>
 8008ed6:	bf00      	nop
 8008ed8:	2000006c 	.word	0x2000006c

08008edc <sbrk_aligned>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	4e0e      	ldr	r6, [pc, #56]	; (8008f18 <sbrk_aligned+0x3c>)
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	6831      	ldr	r1, [r6, #0]
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	b911      	cbnz	r1, 8008eee <sbrk_aligned+0x12>
 8008ee8:	f001 f808 	bl	8009efc <_sbrk_r>
 8008eec:	6030      	str	r0, [r6, #0]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f001 f803 	bl	8009efc <_sbrk_r>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d00a      	beq.n	8008f10 <sbrk_aligned+0x34>
 8008efa:	1cc4      	adds	r4, r0, #3
 8008efc:	f024 0403 	bic.w	r4, r4, #3
 8008f00:	42a0      	cmp	r0, r4
 8008f02:	d007      	beq.n	8008f14 <sbrk_aligned+0x38>
 8008f04:	1a21      	subs	r1, r4, r0
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 fff8 	bl	8009efc <_sbrk_r>
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d101      	bne.n	8008f14 <sbrk_aligned+0x38>
 8008f10:	f04f 34ff 	mov.w	r4, #4294967295
 8008f14:	4620      	mov	r0, r4
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	20000cb8 	.word	0x20000cb8

08008f1c <_malloc_r>:
 8008f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f20:	1ccd      	adds	r5, r1, #3
 8008f22:	f025 0503 	bic.w	r5, r5, #3
 8008f26:	3508      	adds	r5, #8
 8008f28:	2d0c      	cmp	r5, #12
 8008f2a:	bf38      	it	cc
 8008f2c:	250c      	movcc	r5, #12
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	4607      	mov	r7, r0
 8008f32:	db01      	blt.n	8008f38 <_malloc_r+0x1c>
 8008f34:	42a9      	cmp	r1, r5
 8008f36:	d905      	bls.n	8008f44 <_malloc_r+0x28>
 8008f38:	230c      	movs	r3, #12
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	2600      	movs	r6, #0
 8008f3e:	4630      	mov	r0, r6
 8008f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009018 <_malloc_r+0xfc>
 8008f48:	f000 f868 	bl	800901c <__malloc_lock>
 8008f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f50:	461c      	mov	r4, r3
 8008f52:	bb5c      	cbnz	r4, 8008fac <_malloc_r+0x90>
 8008f54:	4629      	mov	r1, r5
 8008f56:	4638      	mov	r0, r7
 8008f58:	f7ff ffc0 	bl	8008edc <sbrk_aligned>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	4604      	mov	r4, r0
 8008f60:	d155      	bne.n	800900e <_malloc_r+0xf2>
 8008f62:	f8d8 4000 	ldr.w	r4, [r8]
 8008f66:	4626      	mov	r6, r4
 8008f68:	2e00      	cmp	r6, #0
 8008f6a:	d145      	bne.n	8008ff8 <_malloc_r+0xdc>
 8008f6c:	2c00      	cmp	r4, #0
 8008f6e:	d048      	beq.n	8009002 <_malloc_r+0xe6>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	4631      	mov	r1, r6
 8008f74:	4638      	mov	r0, r7
 8008f76:	eb04 0903 	add.w	r9, r4, r3
 8008f7a:	f000 ffbf 	bl	8009efc <_sbrk_r>
 8008f7e:	4581      	cmp	r9, r0
 8008f80:	d13f      	bne.n	8009002 <_malloc_r+0xe6>
 8008f82:	6821      	ldr	r1, [r4, #0]
 8008f84:	1a6d      	subs	r5, r5, r1
 8008f86:	4629      	mov	r1, r5
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff ffa7 	bl	8008edc <sbrk_aligned>
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d037      	beq.n	8009002 <_malloc_r+0xe6>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	442b      	add	r3, r5
 8008f96:	6023      	str	r3, [r4, #0]
 8008f98:	f8d8 3000 	ldr.w	r3, [r8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d038      	beq.n	8009012 <_malloc_r+0xf6>
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	42a2      	cmp	r2, r4
 8008fa4:	d12b      	bne.n	8008ffe <_malloc_r+0xe2>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	605a      	str	r2, [r3, #4]
 8008faa:	e00f      	b.n	8008fcc <_malloc_r+0xb0>
 8008fac:	6822      	ldr	r2, [r4, #0]
 8008fae:	1b52      	subs	r2, r2, r5
 8008fb0:	d41f      	bmi.n	8008ff2 <_malloc_r+0xd6>
 8008fb2:	2a0b      	cmp	r2, #11
 8008fb4:	d917      	bls.n	8008fe6 <_malloc_r+0xca>
 8008fb6:	1961      	adds	r1, r4, r5
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	6025      	str	r5, [r4, #0]
 8008fbc:	bf18      	it	ne
 8008fbe:	6059      	strne	r1, [r3, #4]
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	bf08      	it	eq
 8008fc4:	f8c8 1000 	streq.w	r1, [r8]
 8008fc8:	5162      	str	r2, [r4, r5]
 8008fca:	604b      	str	r3, [r1, #4]
 8008fcc:	4638      	mov	r0, r7
 8008fce:	f104 060b 	add.w	r6, r4, #11
 8008fd2:	f000 f829 	bl	8009028 <__malloc_unlock>
 8008fd6:	f026 0607 	bic.w	r6, r6, #7
 8008fda:	1d23      	adds	r3, r4, #4
 8008fdc:	1af2      	subs	r2, r6, r3
 8008fde:	d0ae      	beq.n	8008f3e <_malloc_r+0x22>
 8008fe0:	1b9b      	subs	r3, r3, r6
 8008fe2:	50a3      	str	r3, [r4, r2]
 8008fe4:	e7ab      	b.n	8008f3e <_malloc_r+0x22>
 8008fe6:	42a3      	cmp	r3, r4
 8008fe8:	6862      	ldr	r2, [r4, #4]
 8008fea:	d1dd      	bne.n	8008fa8 <_malloc_r+0x8c>
 8008fec:	f8c8 2000 	str.w	r2, [r8]
 8008ff0:	e7ec      	b.n	8008fcc <_malloc_r+0xb0>
 8008ff2:	4623      	mov	r3, r4
 8008ff4:	6864      	ldr	r4, [r4, #4]
 8008ff6:	e7ac      	b.n	8008f52 <_malloc_r+0x36>
 8008ff8:	4634      	mov	r4, r6
 8008ffa:	6876      	ldr	r6, [r6, #4]
 8008ffc:	e7b4      	b.n	8008f68 <_malloc_r+0x4c>
 8008ffe:	4613      	mov	r3, r2
 8009000:	e7cc      	b.n	8008f9c <_malloc_r+0x80>
 8009002:	230c      	movs	r3, #12
 8009004:	603b      	str	r3, [r7, #0]
 8009006:	4638      	mov	r0, r7
 8009008:	f000 f80e 	bl	8009028 <__malloc_unlock>
 800900c:	e797      	b.n	8008f3e <_malloc_r+0x22>
 800900e:	6025      	str	r5, [r4, #0]
 8009010:	e7dc      	b.n	8008fcc <_malloc_r+0xb0>
 8009012:	605b      	str	r3, [r3, #4]
 8009014:	deff      	udf	#255	; 0xff
 8009016:	bf00      	nop
 8009018:	20000cb4 	.word	0x20000cb4

0800901c <__malloc_lock>:
 800901c:	4801      	ldr	r0, [pc, #4]	; (8009024 <__malloc_lock+0x8>)
 800901e:	f7ff b88c 	b.w	800813a <__retarget_lock_acquire_recursive>
 8009022:	bf00      	nop
 8009024:	20000cb0 	.word	0x20000cb0

08009028 <__malloc_unlock>:
 8009028:	4801      	ldr	r0, [pc, #4]	; (8009030 <__malloc_unlock+0x8>)
 800902a:	f7ff b887 	b.w	800813c <__retarget_lock_release_recursive>
 800902e:	bf00      	nop
 8009030:	20000cb0 	.word	0x20000cb0

08009034 <_Balloc>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	69c6      	ldr	r6, [r0, #28]
 8009038:	4604      	mov	r4, r0
 800903a:	460d      	mov	r5, r1
 800903c:	b976      	cbnz	r6, 800905c <_Balloc+0x28>
 800903e:	2010      	movs	r0, #16
 8009040:	f7ff ff44 	bl	8008ecc <malloc>
 8009044:	4602      	mov	r2, r0
 8009046:	61e0      	str	r0, [r4, #28]
 8009048:	b920      	cbnz	r0, 8009054 <_Balloc+0x20>
 800904a:	4b18      	ldr	r3, [pc, #96]	; (80090ac <_Balloc+0x78>)
 800904c:	4818      	ldr	r0, [pc, #96]	; (80090b0 <_Balloc+0x7c>)
 800904e:	216b      	movs	r1, #107	; 0x6b
 8009050:	f000 ff72 	bl	8009f38 <__assert_func>
 8009054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009058:	6006      	str	r6, [r0, #0]
 800905a:	60c6      	str	r6, [r0, #12]
 800905c:	69e6      	ldr	r6, [r4, #28]
 800905e:	68f3      	ldr	r3, [r6, #12]
 8009060:	b183      	cbz	r3, 8009084 <_Balloc+0x50>
 8009062:	69e3      	ldr	r3, [r4, #28]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800906a:	b9b8      	cbnz	r0, 800909c <_Balloc+0x68>
 800906c:	2101      	movs	r1, #1
 800906e:	fa01 f605 	lsl.w	r6, r1, r5
 8009072:	1d72      	adds	r2, r6, #5
 8009074:	0092      	lsls	r2, r2, #2
 8009076:	4620      	mov	r0, r4
 8009078:	f000 ff7c 	bl	8009f74 <_calloc_r>
 800907c:	b160      	cbz	r0, 8009098 <_Balloc+0x64>
 800907e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009082:	e00e      	b.n	80090a2 <_Balloc+0x6e>
 8009084:	2221      	movs	r2, #33	; 0x21
 8009086:	2104      	movs	r1, #4
 8009088:	4620      	mov	r0, r4
 800908a:	f000 ff73 	bl	8009f74 <_calloc_r>
 800908e:	69e3      	ldr	r3, [r4, #28]
 8009090:	60f0      	str	r0, [r6, #12]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e4      	bne.n	8009062 <_Balloc+0x2e>
 8009098:	2000      	movs	r0, #0
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	6802      	ldr	r2, [r0, #0]
 800909e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090a2:	2300      	movs	r3, #0
 80090a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090a8:	e7f7      	b.n	800909a <_Balloc+0x66>
 80090aa:	bf00      	nop
 80090ac:	0800a235 	.word	0x0800a235
 80090b0:	0800a2b5 	.word	0x0800a2b5

080090b4 <_Bfree>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	69c6      	ldr	r6, [r0, #28]
 80090b8:	4605      	mov	r5, r0
 80090ba:	460c      	mov	r4, r1
 80090bc:	b976      	cbnz	r6, 80090dc <_Bfree+0x28>
 80090be:	2010      	movs	r0, #16
 80090c0:	f7ff ff04 	bl	8008ecc <malloc>
 80090c4:	4602      	mov	r2, r0
 80090c6:	61e8      	str	r0, [r5, #28]
 80090c8:	b920      	cbnz	r0, 80090d4 <_Bfree+0x20>
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <_Bfree+0x3c>)
 80090cc:	4809      	ldr	r0, [pc, #36]	; (80090f4 <_Bfree+0x40>)
 80090ce:	218f      	movs	r1, #143	; 0x8f
 80090d0:	f000 ff32 	bl	8009f38 <__assert_func>
 80090d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090d8:	6006      	str	r6, [r0, #0]
 80090da:	60c6      	str	r6, [r0, #12]
 80090dc:	b13c      	cbz	r4, 80090ee <_Bfree+0x3a>
 80090de:	69eb      	ldr	r3, [r5, #28]
 80090e0:	6862      	ldr	r2, [r4, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090e8:	6021      	str	r1, [r4, #0]
 80090ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	0800a235 	.word	0x0800a235
 80090f4:	0800a2b5 	.word	0x0800a2b5

080090f8 <__multadd>:
 80090f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fc:	690d      	ldr	r5, [r1, #16]
 80090fe:	4607      	mov	r7, r0
 8009100:	460c      	mov	r4, r1
 8009102:	461e      	mov	r6, r3
 8009104:	f101 0c14 	add.w	ip, r1, #20
 8009108:	2000      	movs	r0, #0
 800910a:	f8dc 3000 	ldr.w	r3, [ip]
 800910e:	b299      	uxth	r1, r3
 8009110:	fb02 6101 	mla	r1, r2, r1, r6
 8009114:	0c1e      	lsrs	r6, r3, #16
 8009116:	0c0b      	lsrs	r3, r1, #16
 8009118:	fb02 3306 	mla	r3, r2, r6, r3
 800911c:	b289      	uxth	r1, r1
 800911e:	3001      	adds	r0, #1
 8009120:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009124:	4285      	cmp	r5, r0
 8009126:	f84c 1b04 	str.w	r1, [ip], #4
 800912a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800912e:	dcec      	bgt.n	800910a <__multadd+0x12>
 8009130:	b30e      	cbz	r6, 8009176 <__multadd+0x7e>
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	42ab      	cmp	r3, r5
 8009136:	dc19      	bgt.n	800916c <__multadd+0x74>
 8009138:	6861      	ldr	r1, [r4, #4]
 800913a:	4638      	mov	r0, r7
 800913c:	3101      	adds	r1, #1
 800913e:	f7ff ff79 	bl	8009034 <_Balloc>
 8009142:	4680      	mov	r8, r0
 8009144:	b928      	cbnz	r0, 8009152 <__multadd+0x5a>
 8009146:	4602      	mov	r2, r0
 8009148:	4b0c      	ldr	r3, [pc, #48]	; (800917c <__multadd+0x84>)
 800914a:	480d      	ldr	r0, [pc, #52]	; (8009180 <__multadd+0x88>)
 800914c:	21ba      	movs	r1, #186	; 0xba
 800914e:	f000 fef3 	bl	8009f38 <__assert_func>
 8009152:	6922      	ldr	r2, [r4, #16]
 8009154:	3202      	adds	r2, #2
 8009156:	f104 010c 	add.w	r1, r4, #12
 800915a:	0092      	lsls	r2, r2, #2
 800915c:	300c      	adds	r0, #12
 800915e:	f000 fedd 	bl	8009f1c <memcpy>
 8009162:	4621      	mov	r1, r4
 8009164:	4638      	mov	r0, r7
 8009166:	f7ff ffa5 	bl	80090b4 <_Bfree>
 800916a:	4644      	mov	r4, r8
 800916c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009170:	3501      	adds	r5, #1
 8009172:	615e      	str	r6, [r3, #20]
 8009174:	6125      	str	r5, [r4, #16]
 8009176:	4620      	mov	r0, r4
 8009178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800917c:	0800a2a4 	.word	0x0800a2a4
 8009180:	0800a2b5 	.word	0x0800a2b5

08009184 <__hi0bits>:
 8009184:	0c03      	lsrs	r3, r0, #16
 8009186:	041b      	lsls	r3, r3, #16
 8009188:	b9d3      	cbnz	r3, 80091c0 <__hi0bits+0x3c>
 800918a:	0400      	lsls	r0, r0, #16
 800918c:	2310      	movs	r3, #16
 800918e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009192:	bf04      	itt	eq
 8009194:	0200      	lsleq	r0, r0, #8
 8009196:	3308      	addeq	r3, #8
 8009198:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800919c:	bf04      	itt	eq
 800919e:	0100      	lsleq	r0, r0, #4
 80091a0:	3304      	addeq	r3, #4
 80091a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091a6:	bf04      	itt	eq
 80091a8:	0080      	lsleq	r0, r0, #2
 80091aa:	3302      	addeq	r3, #2
 80091ac:	2800      	cmp	r0, #0
 80091ae:	db05      	blt.n	80091bc <__hi0bits+0x38>
 80091b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091b4:	f103 0301 	add.w	r3, r3, #1
 80091b8:	bf08      	it	eq
 80091ba:	2320      	moveq	r3, #32
 80091bc:	4618      	mov	r0, r3
 80091be:	4770      	bx	lr
 80091c0:	2300      	movs	r3, #0
 80091c2:	e7e4      	b.n	800918e <__hi0bits+0xa>

080091c4 <__lo0bits>:
 80091c4:	6803      	ldr	r3, [r0, #0]
 80091c6:	f013 0207 	ands.w	r2, r3, #7
 80091ca:	d00c      	beq.n	80091e6 <__lo0bits+0x22>
 80091cc:	07d9      	lsls	r1, r3, #31
 80091ce:	d422      	bmi.n	8009216 <__lo0bits+0x52>
 80091d0:	079a      	lsls	r2, r3, #30
 80091d2:	bf49      	itett	mi
 80091d4:	085b      	lsrmi	r3, r3, #1
 80091d6:	089b      	lsrpl	r3, r3, #2
 80091d8:	6003      	strmi	r3, [r0, #0]
 80091da:	2201      	movmi	r2, #1
 80091dc:	bf5c      	itt	pl
 80091de:	6003      	strpl	r3, [r0, #0]
 80091e0:	2202      	movpl	r2, #2
 80091e2:	4610      	mov	r0, r2
 80091e4:	4770      	bx	lr
 80091e6:	b299      	uxth	r1, r3
 80091e8:	b909      	cbnz	r1, 80091ee <__lo0bits+0x2a>
 80091ea:	0c1b      	lsrs	r3, r3, #16
 80091ec:	2210      	movs	r2, #16
 80091ee:	b2d9      	uxtb	r1, r3
 80091f0:	b909      	cbnz	r1, 80091f6 <__lo0bits+0x32>
 80091f2:	3208      	adds	r2, #8
 80091f4:	0a1b      	lsrs	r3, r3, #8
 80091f6:	0719      	lsls	r1, r3, #28
 80091f8:	bf04      	itt	eq
 80091fa:	091b      	lsreq	r3, r3, #4
 80091fc:	3204      	addeq	r2, #4
 80091fe:	0799      	lsls	r1, r3, #30
 8009200:	bf04      	itt	eq
 8009202:	089b      	lsreq	r3, r3, #2
 8009204:	3202      	addeq	r2, #2
 8009206:	07d9      	lsls	r1, r3, #31
 8009208:	d403      	bmi.n	8009212 <__lo0bits+0x4e>
 800920a:	085b      	lsrs	r3, r3, #1
 800920c:	f102 0201 	add.w	r2, r2, #1
 8009210:	d003      	beq.n	800921a <__lo0bits+0x56>
 8009212:	6003      	str	r3, [r0, #0]
 8009214:	e7e5      	b.n	80091e2 <__lo0bits+0x1e>
 8009216:	2200      	movs	r2, #0
 8009218:	e7e3      	b.n	80091e2 <__lo0bits+0x1e>
 800921a:	2220      	movs	r2, #32
 800921c:	e7e1      	b.n	80091e2 <__lo0bits+0x1e>
	...

08009220 <__i2b>:
 8009220:	b510      	push	{r4, lr}
 8009222:	460c      	mov	r4, r1
 8009224:	2101      	movs	r1, #1
 8009226:	f7ff ff05 	bl	8009034 <_Balloc>
 800922a:	4602      	mov	r2, r0
 800922c:	b928      	cbnz	r0, 800923a <__i2b+0x1a>
 800922e:	4b05      	ldr	r3, [pc, #20]	; (8009244 <__i2b+0x24>)
 8009230:	4805      	ldr	r0, [pc, #20]	; (8009248 <__i2b+0x28>)
 8009232:	f240 1145 	movw	r1, #325	; 0x145
 8009236:	f000 fe7f 	bl	8009f38 <__assert_func>
 800923a:	2301      	movs	r3, #1
 800923c:	6144      	str	r4, [r0, #20]
 800923e:	6103      	str	r3, [r0, #16]
 8009240:	bd10      	pop	{r4, pc}
 8009242:	bf00      	nop
 8009244:	0800a2a4 	.word	0x0800a2a4
 8009248:	0800a2b5 	.word	0x0800a2b5

0800924c <__multiply>:
 800924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009250:	4691      	mov	r9, r2
 8009252:	690a      	ldr	r2, [r1, #16]
 8009254:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009258:	429a      	cmp	r2, r3
 800925a:	bfb8      	it	lt
 800925c:	460b      	movlt	r3, r1
 800925e:	460c      	mov	r4, r1
 8009260:	bfbc      	itt	lt
 8009262:	464c      	movlt	r4, r9
 8009264:	4699      	movlt	r9, r3
 8009266:	6927      	ldr	r7, [r4, #16]
 8009268:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800926c:	68a3      	ldr	r3, [r4, #8]
 800926e:	6861      	ldr	r1, [r4, #4]
 8009270:	eb07 060a 	add.w	r6, r7, sl
 8009274:	42b3      	cmp	r3, r6
 8009276:	b085      	sub	sp, #20
 8009278:	bfb8      	it	lt
 800927a:	3101      	addlt	r1, #1
 800927c:	f7ff feda 	bl	8009034 <_Balloc>
 8009280:	b930      	cbnz	r0, 8009290 <__multiply+0x44>
 8009282:	4602      	mov	r2, r0
 8009284:	4b44      	ldr	r3, [pc, #272]	; (8009398 <__multiply+0x14c>)
 8009286:	4845      	ldr	r0, [pc, #276]	; (800939c <__multiply+0x150>)
 8009288:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800928c:	f000 fe54 	bl	8009f38 <__assert_func>
 8009290:	f100 0514 	add.w	r5, r0, #20
 8009294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009298:	462b      	mov	r3, r5
 800929a:	2200      	movs	r2, #0
 800929c:	4543      	cmp	r3, r8
 800929e:	d321      	bcc.n	80092e4 <__multiply+0x98>
 80092a0:	f104 0314 	add.w	r3, r4, #20
 80092a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092a8:	f109 0314 	add.w	r3, r9, #20
 80092ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092b0:	9202      	str	r2, [sp, #8]
 80092b2:	1b3a      	subs	r2, r7, r4
 80092b4:	3a15      	subs	r2, #21
 80092b6:	f022 0203 	bic.w	r2, r2, #3
 80092ba:	3204      	adds	r2, #4
 80092bc:	f104 0115 	add.w	r1, r4, #21
 80092c0:	428f      	cmp	r7, r1
 80092c2:	bf38      	it	cc
 80092c4:	2204      	movcc	r2, #4
 80092c6:	9201      	str	r2, [sp, #4]
 80092c8:	9a02      	ldr	r2, [sp, #8]
 80092ca:	9303      	str	r3, [sp, #12]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d80c      	bhi.n	80092ea <__multiply+0x9e>
 80092d0:	2e00      	cmp	r6, #0
 80092d2:	dd03      	ble.n	80092dc <__multiply+0x90>
 80092d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d05b      	beq.n	8009394 <__multiply+0x148>
 80092dc:	6106      	str	r6, [r0, #16]
 80092de:	b005      	add	sp, #20
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	f843 2b04 	str.w	r2, [r3], #4
 80092e8:	e7d8      	b.n	800929c <__multiply+0x50>
 80092ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80092ee:	f1ba 0f00 	cmp.w	sl, #0
 80092f2:	d024      	beq.n	800933e <__multiply+0xf2>
 80092f4:	f104 0e14 	add.w	lr, r4, #20
 80092f8:	46a9      	mov	r9, r5
 80092fa:	f04f 0c00 	mov.w	ip, #0
 80092fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009302:	f8d9 1000 	ldr.w	r1, [r9]
 8009306:	fa1f fb82 	uxth.w	fp, r2
 800930a:	b289      	uxth	r1, r1
 800930c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009310:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009314:	f8d9 2000 	ldr.w	r2, [r9]
 8009318:	4461      	add	r1, ip
 800931a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800931e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009322:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009326:	b289      	uxth	r1, r1
 8009328:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800932c:	4577      	cmp	r7, lr
 800932e:	f849 1b04 	str.w	r1, [r9], #4
 8009332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009336:	d8e2      	bhi.n	80092fe <__multiply+0xb2>
 8009338:	9a01      	ldr	r2, [sp, #4]
 800933a:	f845 c002 	str.w	ip, [r5, r2]
 800933e:	9a03      	ldr	r2, [sp, #12]
 8009340:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009344:	3304      	adds	r3, #4
 8009346:	f1b9 0f00 	cmp.w	r9, #0
 800934a:	d021      	beq.n	8009390 <__multiply+0x144>
 800934c:	6829      	ldr	r1, [r5, #0]
 800934e:	f104 0c14 	add.w	ip, r4, #20
 8009352:	46ae      	mov	lr, r5
 8009354:	f04f 0a00 	mov.w	sl, #0
 8009358:	f8bc b000 	ldrh.w	fp, [ip]
 800935c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009360:	fb09 220b 	mla	r2, r9, fp, r2
 8009364:	4452      	add	r2, sl
 8009366:	b289      	uxth	r1, r1
 8009368:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800936c:	f84e 1b04 	str.w	r1, [lr], #4
 8009370:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009374:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009378:	f8be 1000 	ldrh.w	r1, [lr]
 800937c:	fb09 110a 	mla	r1, r9, sl, r1
 8009380:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009384:	4567      	cmp	r7, ip
 8009386:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800938a:	d8e5      	bhi.n	8009358 <__multiply+0x10c>
 800938c:	9a01      	ldr	r2, [sp, #4]
 800938e:	50a9      	str	r1, [r5, r2]
 8009390:	3504      	adds	r5, #4
 8009392:	e799      	b.n	80092c8 <__multiply+0x7c>
 8009394:	3e01      	subs	r6, #1
 8009396:	e79b      	b.n	80092d0 <__multiply+0x84>
 8009398:	0800a2a4 	.word	0x0800a2a4
 800939c:	0800a2b5 	.word	0x0800a2b5

080093a0 <__pow5mult>:
 80093a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a4:	4615      	mov	r5, r2
 80093a6:	f012 0203 	ands.w	r2, r2, #3
 80093aa:	4606      	mov	r6, r0
 80093ac:	460f      	mov	r7, r1
 80093ae:	d007      	beq.n	80093c0 <__pow5mult+0x20>
 80093b0:	4c25      	ldr	r4, [pc, #148]	; (8009448 <__pow5mult+0xa8>)
 80093b2:	3a01      	subs	r2, #1
 80093b4:	2300      	movs	r3, #0
 80093b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093ba:	f7ff fe9d 	bl	80090f8 <__multadd>
 80093be:	4607      	mov	r7, r0
 80093c0:	10ad      	asrs	r5, r5, #2
 80093c2:	d03d      	beq.n	8009440 <__pow5mult+0xa0>
 80093c4:	69f4      	ldr	r4, [r6, #28]
 80093c6:	b97c      	cbnz	r4, 80093e8 <__pow5mult+0x48>
 80093c8:	2010      	movs	r0, #16
 80093ca:	f7ff fd7f 	bl	8008ecc <malloc>
 80093ce:	4602      	mov	r2, r0
 80093d0:	61f0      	str	r0, [r6, #28]
 80093d2:	b928      	cbnz	r0, 80093e0 <__pow5mult+0x40>
 80093d4:	4b1d      	ldr	r3, [pc, #116]	; (800944c <__pow5mult+0xac>)
 80093d6:	481e      	ldr	r0, [pc, #120]	; (8009450 <__pow5mult+0xb0>)
 80093d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80093dc:	f000 fdac 	bl	8009f38 <__assert_func>
 80093e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093e4:	6004      	str	r4, [r0, #0]
 80093e6:	60c4      	str	r4, [r0, #12]
 80093e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80093ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093f0:	b94c      	cbnz	r4, 8009406 <__pow5mult+0x66>
 80093f2:	f240 2171 	movw	r1, #625	; 0x271
 80093f6:	4630      	mov	r0, r6
 80093f8:	f7ff ff12 	bl	8009220 <__i2b>
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009402:	4604      	mov	r4, r0
 8009404:	6003      	str	r3, [r0, #0]
 8009406:	f04f 0900 	mov.w	r9, #0
 800940a:	07eb      	lsls	r3, r5, #31
 800940c:	d50a      	bpl.n	8009424 <__pow5mult+0x84>
 800940e:	4639      	mov	r1, r7
 8009410:	4622      	mov	r2, r4
 8009412:	4630      	mov	r0, r6
 8009414:	f7ff ff1a 	bl	800924c <__multiply>
 8009418:	4639      	mov	r1, r7
 800941a:	4680      	mov	r8, r0
 800941c:	4630      	mov	r0, r6
 800941e:	f7ff fe49 	bl	80090b4 <_Bfree>
 8009422:	4647      	mov	r7, r8
 8009424:	106d      	asrs	r5, r5, #1
 8009426:	d00b      	beq.n	8009440 <__pow5mult+0xa0>
 8009428:	6820      	ldr	r0, [r4, #0]
 800942a:	b938      	cbnz	r0, 800943c <__pow5mult+0x9c>
 800942c:	4622      	mov	r2, r4
 800942e:	4621      	mov	r1, r4
 8009430:	4630      	mov	r0, r6
 8009432:	f7ff ff0b 	bl	800924c <__multiply>
 8009436:	6020      	str	r0, [r4, #0]
 8009438:	f8c0 9000 	str.w	r9, [r0]
 800943c:	4604      	mov	r4, r0
 800943e:	e7e4      	b.n	800940a <__pow5mult+0x6a>
 8009440:	4638      	mov	r0, r7
 8009442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009446:	bf00      	nop
 8009448:	0800a400 	.word	0x0800a400
 800944c:	0800a235 	.word	0x0800a235
 8009450:	0800a2b5 	.word	0x0800a2b5

08009454 <__lshift>:
 8009454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009458:	460c      	mov	r4, r1
 800945a:	6849      	ldr	r1, [r1, #4]
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	4607      	mov	r7, r0
 8009466:	4691      	mov	r9, r2
 8009468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800946c:	f108 0601 	add.w	r6, r8, #1
 8009470:	42b3      	cmp	r3, r6
 8009472:	db0b      	blt.n	800948c <__lshift+0x38>
 8009474:	4638      	mov	r0, r7
 8009476:	f7ff fddd 	bl	8009034 <_Balloc>
 800947a:	4605      	mov	r5, r0
 800947c:	b948      	cbnz	r0, 8009492 <__lshift+0x3e>
 800947e:	4602      	mov	r2, r0
 8009480:	4b28      	ldr	r3, [pc, #160]	; (8009524 <__lshift+0xd0>)
 8009482:	4829      	ldr	r0, [pc, #164]	; (8009528 <__lshift+0xd4>)
 8009484:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009488:	f000 fd56 	bl	8009f38 <__assert_func>
 800948c:	3101      	adds	r1, #1
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	e7ee      	b.n	8009470 <__lshift+0x1c>
 8009492:	2300      	movs	r3, #0
 8009494:	f100 0114 	add.w	r1, r0, #20
 8009498:	f100 0210 	add.w	r2, r0, #16
 800949c:	4618      	mov	r0, r3
 800949e:	4553      	cmp	r3, sl
 80094a0:	db33      	blt.n	800950a <__lshift+0xb6>
 80094a2:	6920      	ldr	r0, [r4, #16]
 80094a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094a8:	f104 0314 	add.w	r3, r4, #20
 80094ac:	f019 091f 	ands.w	r9, r9, #31
 80094b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094b8:	d02b      	beq.n	8009512 <__lshift+0xbe>
 80094ba:	f1c9 0e20 	rsb	lr, r9, #32
 80094be:	468a      	mov	sl, r1
 80094c0:	2200      	movs	r2, #0
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	fa00 f009 	lsl.w	r0, r0, r9
 80094c8:	4310      	orrs	r0, r2
 80094ca:	f84a 0b04 	str.w	r0, [sl], #4
 80094ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d2:	459c      	cmp	ip, r3
 80094d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80094d8:	d8f3      	bhi.n	80094c2 <__lshift+0x6e>
 80094da:	ebac 0304 	sub.w	r3, ip, r4
 80094de:	3b15      	subs	r3, #21
 80094e0:	f023 0303 	bic.w	r3, r3, #3
 80094e4:	3304      	adds	r3, #4
 80094e6:	f104 0015 	add.w	r0, r4, #21
 80094ea:	4584      	cmp	ip, r0
 80094ec:	bf38      	it	cc
 80094ee:	2304      	movcc	r3, #4
 80094f0:	50ca      	str	r2, [r1, r3]
 80094f2:	b10a      	cbz	r2, 80094f8 <__lshift+0xa4>
 80094f4:	f108 0602 	add.w	r6, r8, #2
 80094f8:	3e01      	subs	r6, #1
 80094fa:	4638      	mov	r0, r7
 80094fc:	612e      	str	r6, [r5, #16]
 80094fe:	4621      	mov	r1, r4
 8009500:	f7ff fdd8 	bl	80090b4 <_Bfree>
 8009504:	4628      	mov	r0, r5
 8009506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950a:	f842 0f04 	str.w	r0, [r2, #4]!
 800950e:	3301      	adds	r3, #1
 8009510:	e7c5      	b.n	800949e <__lshift+0x4a>
 8009512:	3904      	subs	r1, #4
 8009514:	f853 2b04 	ldr.w	r2, [r3], #4
 8009518:	f841 2f04 	str.w	r2, [r1, #4]!
 800951c:	459c      	cmp	ip, r3
 800951e:	d8f9      	bhi.n	8009514 <__lshift+0xc0>
 8009520:	e7ea      	b.n	80094f8 <__lshift+0xa4>
 8009522:	bf00      	nop
 8009524:	0800a2a4 	.word	0x0800a2a4
 8009528:	0800a2b5 	.word	0x0800a2b5

0800952c <__mcmp>:
 800952c:	b530      	push	{r4, r5, lr}
 800952e:	6902      	ldr	r2, [r0, #16]
 8009530:	690c      	ldr	r4, [r1, #16]
 8009532:	1b12      	subs	r2, r2, r4
 8009534:	d10e      	bne.n	8009554 <__mcmp+0x28>
 8009536:	f100 0314 	add.w	r3, r0, #20
 800953a:	3114      	adds	r1, #20
 800953c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009540:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009544:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009548:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800954c:	42a5      	cmp	r5, r4
 800954e:	d003      	beq.n	8009558 <__mcmp+0x2c>
 8009550:	d305      	bcc.n	800955e <__mcmp+0x32>
 8009552:	2201      	movs	r2, #1
 8009554:	4610      	mov	r0, r2
 8009556:	bd30      	pop	{r4, r5, pc}
 8009558:	4283      	cmp	r3, r0
 800955a:	d3f3      	bcc.n	8009544 <__mcmp+0x18>
 800955c:	e7fa      	b.n	8009554 <__mcmp+0x28>
 800955e:	f04f 32ff 	mov.w	r2, #4294967295
 8009562:	e7f7      	b.n	8009554 <__mcmp+0x28>

08009564 <__mdiff>:
 8009564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	460c      	mov	r4, r1
 800956a:	4606      	mov	r6, r0
 800956c:	4611      	mov	r1, r2
 800956e:	4620      	mov	r0, r4
 8009570:	4690      	mov	r8, r2
 8009572:	f7ff ffdb 	bl	800952c <__mcmp>
 8009576:	1e05      	subs	r5, r0, #0
 8009578:	d110      	bne.n	800959c <__mdiff+0x38>
 800957a:	4629      	mov	r1, r5
 800957c:	4630      	mov	r0, r6
 800957e:	f7ff fd59 	bl	8009034 <_Balloc>
 8009582:	b930      	cbnz	r0, 8009592 <__mdiff+0x2e>
 8009584:	4b3a      	ldr	r3, [pc, #232]	; (8009670 <__mdiff+0x10c>)
 8009586:	4602      	mov	r2, r0
 8009588:	f240 2137 	movw	r1, #567	; 0x237
 800958c:	4839      	ldr	r0, [pc, #228]	; (8009674 <__mdiff+0x110>)
 800958e:	f000 fcd3 	bl	8009f38 <__assert_func>
 8009592:	2301      	movs	r3, #1
 8009594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959c:	bfa4      	itt	ge
 800959e:	4643      	movge	r3, r8
 80095a0:	46a0      	movge	r8, r4
 80095a2:	4630      	mov	r0, r6
 80095a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095a8:	bfa6      	itte	ge
 80095aa:	461c      	movge	r4, r3
 80095ac:	2500      	movge	r5, #0
 80095ae:	2501      	movlt	r5, #1
 80095b0:	f7ff fd40 	bl	8009034 <_Balloc>
 80095b4:	b920      	cbnz	r0, 80095c0 <__mdiff+0x5c>
 80095b6:	4b2e      	ldr	r3, [pc, #184]	; (8009670 <__mdiff+0x10c>)
 80095b8:	4602      	mov	r2, r0
 80095ba:	f240 2145 	movw	r1, #581	; 0x245
 80095be:	e7e5      	b.n	800958c <__mdiff+0x28>
 80095c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095c4:	6926      	ldr	r6, [r4, #16]
 80095c6:	60c5      	str	r5, [r0, #12]
 80095c8:	f104 0914 	add.w	r9, r4, #20
 80095cc:	f108 0514 	add.w	r5, r8, #20
 80095d0:	f100 0e14 	add.w	lr, r0, #20
 80095d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80095d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095dc:	f108 0210 	add.w	r2, r8, #16
 80095e0:	46f2      	mov	sl, lr
 80095e2:	2100      	movs	r1, #0
 80095e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80095e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095ec:	fa11 f88b 	uxtah	r8, r1, fp
 80095f0:	b299      	uxth	r1, r3
 80095f2:	0c1b      	lsrs	r3, r3, #16
 80095f4:	eba8 0801 	sub.w	r8, r8, r1
 80095f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009600:	fa1f f888 	uxth.w	r8, r8
 8009604:	1419      	asrs	r1, r3, #16
 8009606:	454e      	cmp	r6, r9
 8009608:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800960c:	f84a 3b04 	str.w	r3, [sl], #4
 8009610:	d8e8      	bhi.n	80095e4 <__mdiff+0x80>
 8009612:	1b33      	subs	r3, r6, r4
 8009614:	3b15      	subs	r3, #21
 8009616:	f023 0303 	bic.w	r3, r3, #3
 800961a:	3304      	adds	r3, #4
 800961c:	3415      	adds	r4, #21
 800961e:	42a6      	cmp	r6, r4
 8009620:	bf38      	it	cc
 8009622:	2304      	movcc	r3, #4
 8009624:	441d      	add	r5, r3
 8009626:	4473      	add	r3, lr
 8009628:	469e      	mov	lr, r3
 800962a:	462e      	mov	r6, r5
 800962c:	4566      	cmp	r6, ip
 800962e:	d30e      	bcc.n	800964e <__mdiff+0xea>
 8009630:	f10c 0203 	add.w	r2, ip, #3
 8009634:	1b52      	subs	r2, r2, r5
 8009636:	f022 0203 	bic.w	r2, r2, #3
 800963a:	3d03      	subs	r5, #3
 800963c:	45ac      	cmp	ip, r5
 800963e:	bf38      	it	cc
 8009640:	2200      	movcc	r2, #0
 8009642:	4413      	add	r3, r2
 8009644:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009648:	b17a      	cbz	r2, 800966a <__mdiff+0x106>
 800964a:	6107      	str	r7, [r0, #16]
 800964c:	e7a4      	b.n	8009598 <__mdiff+0x34>
 800964e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009652:	fa11 f288 	uxtah	r2, r1, r8
 8009656:	1414      	asrs	r4, r2, #16
 8009658:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800965c:	b292      	uxth	r2, r2
 800965e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009662:	f84e 2b04 	str.w	r2, [lr], #4
 8009666:	1421      	asrs	r1, r4, #16
 8009668:	e7e0      	b.n	800962c <__mdiff+0xc8>
 800966a:	3f01      	subs	r7, #1
 800966c:	e7ea      	b.n	8009644 <__mdiff+0xe0>
 800966e:	bf00      	nop
 8009670:	0800a2a4 	.word	0x0800a2a4
 8009674:	0800a2b5 	.word	0x0800a2b5

08009678 <__d2b>:
 8009678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800967c:	460f      	mov	r7, r1
 800967e:	2101      	movs	r1, #1
 8009680:	ec59 8b10 	vmov	r8, r9, d0
 8009684:	4616      	mov	r6, r2
 8009686:	f7ff fcd5 	bl	8009034 <_Balloc>
 800968a:	4604      	mov	r4, r0
 800968c:	b930      	cbnz	r0, 800969c <__d2b+0x24>
 800968e:	4602      	mov	r2, r0
 8009690:	4b24      	ldr	r3, [pc, #144]	; (8009724 <__d2b+0xac>)
 8009692:	4825      	ldr	r0, [pc, #148]	; (8009728 <__d2b+0xb0>)
 8009694:	f240 310f 	movw	r1, #783	; 0x30f
 8009698:	f000 fc4e 	bl	8009f38 <__assert_func>
 800969c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096a4:	bb2d      	cbnz	r5, 80096f2 <__d2b+0x7a>
 80096a6:	9301      	str	r3, [sp, #4]
 80096a8:	f1b8 0300 	subs.w	r3, r8, #0
 80096ac:	d026      	beq.n	80096fc <__d2b+0x84>
 80096ae:	4668      	mov	r0, sp
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	f7ff fd87 	bl	80091c4 <__lo0bits>
 80096b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096ba:	b1e8      	cbz	r0, 80096f8 <__d2b+0x80>
 80096bc:	f1c0 0320 	rsb	r3, r0, #32
 80096c0:	fa02 f303 	lsl.w	r3, r2, r3
 80096c4:	430b      	orrs	r3, r1
 80096c6:	40c2      	lsrs	r2, r0
 80096c8:	6163      	str	r3, [r4, #20]
 80096ca:	9201      	str	r2, [sp, #4]
 80096cc:	9b01      	ldr	r3, [sp, #4]
 80096ce:	61a3      	str	r3, [r4, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	bf14      	ite	ne
 80096d4:	2202      	movne	r2, #2
 80096d6:	2201      	moveq	r2, #1
 80096d8:	6122      	str	r2, [r4, #16]
 80096da:	b1bd      	cbz	r5, 800970c <__d2b+0x94>
 80096dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096e0:	4405      	add	r5, r0
 80096e2:	603d      	str	r5, [r7, #0]
 80096e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096e8:	6030      	str	r0, [r6, #0]
 80096ea:	4620      	mov	r0, r4
 80096ec:	b003      	add	sp, #12
 80096ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f6:	e7d6      	b.n	80096a6 <__d2b+0x2e>
 80096f8:	6161      	str	r1, [r4, #20]
 80096fa:	e7e7      	b.n	80096cc <__d2b+0x54>
 80096fc:	a801      	add	r0, sp, #4
 80096fe:	f7ff fd61 	bl	80091c4 <__lo0bits>
 8009702:	9b01      	ldr	r3, [sp, #4]
 8009704:	6163      	str	r3, [r4, #20]
 8009706:	3020      	adds	r0, #32
 8009708:	2201      	movs	r2, #1
 800970a:	e7e5      	b.n	80096d8 <__d2b+0x60>
 800970c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009710:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009714:	6038      	str	r0, [r7, #0]
 8009716:	6918      	ldr	r0, [r3, #16]
 8009718:	f7ff fd34 	bl	8009184 <__hi0bits>
 800971c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009720:	e7e2      	b.n	80096e8 <__d2b+0x70>
 8009722:	bf00      	nop
 8009724:	0800a2a4 	.word	0x0800a2a4
 8009728:	0800a2b5 	.word	0x0800a2b5

0800972c <__ssputs_r>:
 800972c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009730:	688e      	ldr	r6, [r1, #8]
 8009732:	461f      	mov	r7, r3
 8009734:	42be      	cmp	r6, r7
 8009736:	680b      	ldr	r3, [r1, #0]
 8009738:	4682      	mov	sl, r0
 800973a:	460c      	mov	r4, r1
 800973c:	4690      	mov	r8, r2
 800973e:	d82c      	bhi.n	800979a <__ssputs_r+0x6e>
 8009740:	898a      	ldrh	r2, [r1, #12]
 8009742:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009746:	d026      	beq.n	8009796 <__ssputs_r+0x6a>
 8009748:	6965      	ldr	r5, [r4, #20]
 800974a:	6909      	ldr	r1, [r1, #16]
 800974c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009750:	eba3 0901 	sub.w	r9, r3, r1
 8009754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009758:	1c7b      	adds	r3, r7, #1
 800975a:	444b      	add	r3, r9
 800975c:	106d      	asrs	r5, r5, #1
 800975e:	429d      	cmp	r5, r3
 8009760:	bf38      	it	cc
 8009762:	461d      	movcc	r5, r3
 8009764:	0553      	lsls	r3, r2, #21
 8009766:	d527      	bpl.n	80097b8 <__ssputs_r+0x8c>
 8009768:	4629      	mov	r1, r5
 800976a:	f7ff fbd7 	bl	8008f1c <_malloc_r>
 800976e:	4606      	mov	r6, r0
 8009770:	b360      	cbz	r0, 80097cc <__ssputs_r+0xa0>
 8009772:	6921      	ldr	r1, [r4, #16]
 8009774:	464a      	mov	r2, r9
 8009776:	f000 fbd1 	bl	8009f1c <memcpy>
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009784:	81a3      	strh	r3, [r4, #12]
 8009786:	6126      	str	r6, [r4, #16]
 8009788:	6165      	str	r5, [r4, #20]
 800978a:	444e      	add	r6, r9
 800978c:	eba5 0509 	sub.w	r5, r5, r9
 8009790:	6026      	str	r6, [r4, #0]
 8009792:	60a5      	str	r5, [r4, #8]
 8009794:	463e      	mov	r6, r7
 8009796:	42be      	cmp	r6, r7
 8009798:	d900      	bls.n	800979c <__ssputs_r+0x70>
 800979a:	463e      	mov	r6, r7
 800979c:	6820      	ldr	r0, [r4, #0]
 800979e:	4632      	mov	r2, r6
 80097a0:	4641      	mov	r1, r8
 80097a2:	f000 fb6f 	bl	8009e84 <memmove>
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	1b9b      	subs	r3, r3, r6
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	4433      	add	r3, r6
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	2000      	movs	r0, #0
 80097b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b8:	462a      	mov	r2, r5
 80097ba:	f000 fc03 	bl	8009fc4 <_realloc_r>
 80097be:	4606      	mov	r6, r0
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d1e0      	bne.n	8009786 <__ssputs_r+0x5a>
 80097c4:	6921      	ldr	r1, [r4, #16]
 80097c6:	4650      	mov	r0, sl
 80097c8:	f7ff fb34 	bl	8008e34 <_free_r>
 80097cc:	230c      	movs	r3, #12
 80097ce:	f8ca 3000 	str.w	r3, [sl]
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	f04f 30ff 	mov.w	r0, #4294967295
 80097de:	e7e9      	b.n	80097b4 <__ssputs_r+0x88>

080097e0 <_svfiprintf_r>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	4698      	mov	r8, r3
 80097e6:	898b      	ldrh	r3, [r1, #12]
 80097e8:	061b      	lsls	r3, r3, #24
 80097ea:	b09d      	sub	sp, #116	; 0x74
 80097ec:	4607      	mov	r7, r0
 80097ee:	460d      	mov	r5, r1
 80097f0:	4614      	mov	r4, r2
 80097f2:	d50e      	bpl.n	8009812 <_svfiprintf_r+0x32>
 80097f4:	690b      	ldr	r3, [r1, #16]
 80097f6:	b963      	cbnz	r3, 8009812 <_svfiprintf_r+0x32>
 80097f8:	2140      	movs	r1, #64	; 0x40
 80097fa:	f7ff fb8f 	bl	8008f1c <_malloc_r>
 80097fe:	6028      	str	r0, [r5, #0]
 8009800:	6128      	str	r0, [r5, #16]
 8009802:	b920      	cbnz	r0, 800980e <_svfiprintf_r+0x2e>
 8009804:	230c      	movs	r3, #12
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	f04f 30ff 	mov.w	r0, #4294967295
 800980c:	e0d0      	b.n	80099b0 <_svfiprintf_r+0x1d0>
 800980e:	2340      	movs	r3, #64	; 0x40
 8009810:	616b      	str	r3, [r5, #20]
 8009812:	2300      	movs	r3, #0
 8009814:	9309      	str	r3, [sp, #36]	; 0x24
 8009816:	2320      	movs	r3, #32
 8009818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800981c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009820:	2330      	movs	r3, #48	; 0x30
 8009822:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099c8 <_svfiprintf_r+0x1e8>
 8009826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800982a:	f04f 0901 	mov.w	r9, #1
 800982e:	4623      	mov	r3, r4
 8009830:	469a      	mov	sl, r3
 8009832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009836:	b10a      	cbz	r2, 800983c <_svfiprintf_r+0x5c>
 8009838:	2a25      	cmp	r2, #37	; 0x25
 800983a:	d1f9      	bne.n	8009830 <_svfiprintf_r+0x50>
 800983c:	ebba 0b04 	subs.w	fp, sl, r4
 8009840:	d00b      	beq.n	800985a <_svfiprintf_r+0x7a>
 8009842:	465b      	mov	r3, fp
 8009844:	4622      	mov	r2, r4
 8009846:	4629      	mov	r1, r5
 8009848:	4638      	mov	r0, r7
 800984a:	f7ff ff6f 	bl	800972c <__ssputs_r>
 800984e:	3001      	adds	r0, #1
 8009850:	f000 80a9 	beq.w	80099a6 <_svfiprintf_r+0x1c6>
 8009854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009856:	445a      	add	r2, fp
 8009858:	9209      	str	r2, [sp, #36]	; 0x24
 800985a:	f89a 3000 	ldrb.w	r3, [sl]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 80a1 	beq.w	80099a6 <_svfiprintf_r+0x1c6>
 8009864:	2300      	movs	r3, #0
 8009866:	f04f 32ff 	mov.w	r2, #4294967295
 800986a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800986e:	f10a 0a01 	add.w	sl, sl, #1
 8009872:	9304      	str	r3, [sp, #16]
 8009874:	9307      	str	r3, [sp, #28]
 8009876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800987a:	931a      	str	r3, [sp, #104]	; 0x68
 800987c:	4654      	mov	r4, sl
 800987e:	2205      	movs	r2, #5
 8009880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009884:	4850      	ldr	r0, [pc, #320]	; (80099c8 <_svfiprintf_r+0x1e8>)
 8009886:	f7f6 fcb3 	bl	80001f0 <memchr>
 800988a:	9a04      	ldr	r2, [sp, #16]
 800988c:	b9d8      	cbnz	r0, 80098c6 <_svfiprintf_r+0xe6>
 800988e:	06d0      	lsls	r0, r2, #27
 8009890:	bf44      	itt	mi
 8009892:	2320      	movmi	r3, #32
 8009894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009898:	0711      	lsls	r1, r2, #28
 800989a:	bf44      	itt	mi
 800989c:	232b      	movmi	r3, #43	; 0x2b
 800989e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a2:	f89a 3000 	ldrb.w	r3, [sl]
 80098a6:	2b2a      	cmp	r3, #42	; 0x2a
 80098a8:	d015      	beq.n	80098d6 <_svfiprintf_r+0xf6>
 80098aa:	9a07      	ldr	r2, [sp, #28]
 80098ac:	4654      	mov	r4, sl
 80098ae:	2000      	movs	r0, #0
 80098b0:	f04f 0c0a 	mov.w	ip, #10
 80098b4:	4621      	mov	r1, r4
 80098b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ba:	3b30      	subs	r3, #48	; 0x30
 80098bc:	2b09      	cmp	r3, #9
 80098be:	d94d      	bls.n	800995c <_svfiprintf_r+0x17c>
 80098c0:	b1b0      	cbz	r0, 80098f0 <_svfiprintf_r+0x110>
 80098c2:	9207      	str	r2, [sp, #28]
 80098c4:	e014      	b.n	80098f0 <_svfiprintf_r+0x110>
 80098c6:	eba0 0308 	sub.w	r3, r0, r8
 80098ca:	fa09 f303 	lsl.w	r3, r9, r3
 80098ce:	4313      	orrs	r3, r2
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	46a2      	mov	sl, r4
 80098d4:	e7d2      	b.n	800987c <_svfiprintf_r+0x9c>
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	1d19      	adds	r1, r3, #4
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	9103      	str	r1, [sp, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bfbb      	ittet	lt
 80098e2:	425b      	neglt	r3, r3
 80098e4:	f042 0202 	orrlt.w	r2, r2, #2
 80098e8:	9307      	strge	r3, [sp, #28]
 80098ea:	9307      	strlt	r3, [sp, #28]
 80098ec:	bfb8      	it	lt
 80098ee:	9204      	strlt	r2, [sp, #16]
 80098f0:	7823      	ldrb	r3, [r4, #0]
 80098f2:	2b2e      	cmp	r3, #46	; 0x2e
 80098f4:	d10c      	bne.n	8009910 <_svfiprintf_r+0x130>
 80098f6:	7863      	ldrb	r3, [r4, #1]
 80098f8:	2b2a      	cmp	r3, #42	; 0x2a
 80098fa:	d134      	bne.n	8009966 <_svfiprintf_r+0x186>
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	1d1a      	adds	r2, r3, #4
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	9203      	str	r2, [sp, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	bfb8      	it	lt
 8009908:	f04f 33ff 	movlt.w	r3, #4294967295
 800990c:	3402      	adds	r4, #2
 800990e:	9305      	str	r3, [sp, #20]
 8009910:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80099d8 <_svfiprintf_r+0x1f8>
 8009914:	7821      	ldrb	r1, [r4, #0]
 8009916:	2203      	movs	r2, #3
 8009918:	4650      	mov	r0, sl
 800991a:	f7f6 fc69 	bl	80001f0 <memchr>
 800991e:	b138      	cbz	r0, 8009930 <_svfiprintf_r+0x150>
 8009920:	9b04      	ldr	r3, [sp, #16]
 8009922:	eba0 000a 	sub.w	r0, r0, sl
 8009926:	2240      	movs	r2, #64	; 0x40
 8009928:	4082      	lsls	r2, r0
 800992a:	4313      	orrs	r3, r2
 800992c:	3401      	adds	r4, #1
 800992e:	9304      	str	r3, [sp, #16]
 8009930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009934:	4825      	ldr	r0, [pc, #148]	; (80099cc <_svfiprintf_r+0x1ec>)
 8009936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800993a:	2206      	movs	r2, #6
 800993c:	f7f6 fc58 	bl	80001f0 <memchr>
 8009940:	2800      	cmp	r0, #0
 8009942:	d038      	beq.n	80099b6 <_svfiprintf_r+0x1d6>
 8009944:	4b22      	ldr	r3, [pc, #136]	; (80099d0 <_svfiprintf_r+0x1f0>)
 8009946:	bb1b      	cbnz	r3, 8009990 <_svfiprintf_r+0x1b0>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	3307      	adds	r3, #7
 800994c:	f023 0307 	bic.w	r3, r3, #7
 8009950:	3308      	adds	r3, #8
 8009952:	9303      	str	r3, [sp, #12]
 8009954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009956:	4433      	add	r3, r6
 8009958:	9309      	str	r3, [sp, #36]	; 0x24
 800995a:	e768      	b.n	800982e <_svfiprintf_r+0x4e>
 800995c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009960:	460c      	mov	r4, r1
 8009962:	2001      	movs	r0, #1
 8009964:	e7a6      	b.n	80098b4 <_svfiprintf_r+0xd4>
 8009966:	2300      	movs	r3, #0
 8009968:	3401      	adds	r4, #1
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	4619      	mov	r1, r3
 800996e:	f04f 0c0a 	mov.w	ip, #10
 8009972:	4620      	mov	r0, r4
 8009974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009978:	3a30      	subs	r2, #48	; 0x30
 800997a:	2a09      	cmp	r2, #9
 800997c:	d903      	bls.n	8009986 <_svfiprintf_r+0x1a6>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0c6      	beq.n	8009910 <_svfiprintf_r+0x130>
 8009982:	9105      	str	r1, [sp, #20]
 8009984:	e7c4      	b.n	8009910 <_svfiprintf_r+0x130>
 8009986:	fb0c 2101 	mla	r1, ip, r1, r2
 800998a:	4604      	mov	r4, r0
 800998c:	2301      	movs	r3, #1
 800998e:	e7f0      	b.n	8009972 <_svfiprintf_r+0x192>
 8009990:	ab03      	add	r3, sp, #12
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	462a      	mov	r2, r5
 8009996:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <_svfiprintf_r+0x1f4>)
 8009998:	a904      	add	r1, sp, #16
 800999a:	4638      	mov	r0, r7
 800999c:	f7fd fd2e 	bl	80073fc <_printf_float>
 80099a0:	1c42      	adds	r2, r0, #1
 80099a2:	4606      	mov	r6, r0
 80099a4:	d1d6      	bne.n	8009954 <_svfiprintf_r+0x174>
 80099a6:	89ab      	ldrh	r3, [r5, #12]
 80099a8:	065b      	lsls	r3, r3, #25
 80099aa:	f53f af2d 	bmi.w	8009808 <_svfiprintf_r+0x28>
 80099ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099b0:	b01d      	add	sp, #116	; 0x74
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	ab03      	add	r3, sp, #12
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	462a      	mov	r2, r5
 80099bc:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <_svfiprintf_r+0x1f4>)
 80099be:	a904      	add	r1, sp, #16
 80099c0:	4638      	mov	r0, r7
 80099c2:	f7fd ffbf 	bl	8007944 <_printf_i>
 80099c6:	e7eb      	b.n	80099a0 <_svfiprintf_r+0x1c0>
 80099c8:	0800a40c 	.word	0x0800a40c
 80099cc:	0800a416 	.word	0x0800a416
 80099d0:	080073fd 	.word	0x080073fd
 80099d4:	0800972d 	.word	0x0800972d
 80099d8:	0800a412 	.word	0x0800a412

080099dc <__sfputc_r>:
 80099dc:	6893      	ldr	r3, [r2, #8]
 80099de:	3b01      	subs	r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	b410      	push	{r4}
 80099e4:	6093      	str	r3, [r2, #8]
 80099e6:	da08      	bge.n	80099fa <__sfputc_r+0x1e>
 80099e8:	6994      	ldr	r4, [r2, #24]
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	db01      	blt.n	80099f2 <__sfputc_r+0x16>
 80099ee:	290a      	cmp	r1, #10
 80099f0:	d103      	bne.n	80099fa <__sfputc_r+0x1e>
 80099f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f6:	f7fe ba8e 	b.w	8007f16 <__swbuf_r>
 80099fa:	6813      	ldr	r3, [r2, #0]
 80099fc:	1c58      	adds	r0, r3, #1
 80099fe:	6010      	str	r0, [r2, #0]
 8009a00:	7019      	strb	r1, [r3, #0]
 8009a02:	4608      	mov	r0, r1
 8009a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <__sfputs_r>:
 8009a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	460f      	mov	r7, r1
 8009a10:	4614      	mov	r4, r2
 8009a12:	18d5      	adds	r5, r2, r3
 8009a14:	42ac      	cmp	r4, r5
 8009a16:	d101      	bne.n	8009a1c <__sfputs_r+0x12>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e007      	b.n	8009a2c <__sfputs_r+0x22>
 8009a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a20:	463a      	mov	r2, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7ff ffda 	bl	80099dc <__sfputc_r>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d1f3      	bne.n	8009a14 <__sfputs_r+0xa>
 8009a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a30 <_vfiprintf_r>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	460d      	mov	r5, r1
 8009a36:	b09d      	sub	sp, #116	; 0x74
 8009a38:	4614      	mov	r4, r2
 8009a3a:	4698      	mov	r8, r3
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	b118      	cbz	r0, 8009a48 <_vfiprintf_r+0x18>
 8009a40:	6a03      	ldr	r3, [r0, #32]
 8009a42:	b90b      	cbnz	r3, 8009a48 <_vfiprintf_r+0x18>
 8009a44:	f7fe f92c 	bl	8007ca0 <__sinit>
 8009a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a4a:	07d9      	lsls	r1, r3, #31
 8009a4c:	d405      	bmi.n	8009a5a <_vfiprintf_r+0x2a>
 8009a4e:	89ab      	ldrh	r3, [r5, #12]
 8009a50:	059a      	lsls	r2, r3, #22
 8009a52:	d402      	bmi.n	8009a5a <_vfiprintf_r+0x2a>
 8009a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a56:	f7fe fb70 	bl	800813a <__retarget_lock_acquire_recursive>
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	071b      	lsls	r3, r3, #28
 8009a5e:	d501      	bpl.n	8009a64 <_vfiprintf_r+0x34>
 8009a60:	692b      	ldr	r3, [r5, #16]
 8009a62:	b99b      	cbnz	r3, 8009a8c <_vfiprintf_r+0x5c>
 8009a64:	4629      	mov	r1, r5
 8009a66:	4630      	mov	r0, r6
 8009a68:	f7fe fa92 	bl	8007f90 <__swsetup_r>
 8009a6c:	b170      	cbz	r0, 8009a8c <_vfiprintf_r+0x5c>
 8009a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a70:	07dc      	lsls	r4, r3, #31
 8009a72:	d504      	bpl.n	8009a7e <_vfiprintf_r+0x4e>
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	b01d      	add	sp, #116	; 0x74
 8009a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	0598      	lsls	r0, r3, #22
 8009a82:	d4f7      	bmi.n	8009a74 <_vfiprintf_r+0x44>
 8009a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a86:	f7fe fb59 	bl	800813c <__retarget_lock_release_recursive>
 8009a8a:	e7f3      	b.n	8009a74 <_vfiprintf_r+0x44>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a90:	2320      	movs	r3, #32
 8009a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a9a:	2330      	movs	r3, #48	; 0x30
 8009a9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c50 <_vfiprintf_r+0x220>
 8009aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa4:	f04f 0901 	mov.w	r9, #1
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	469a      	mov	sl, r3
 8009aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ab0:	b10a      	cbz	r2, 8009ab6 <_vfiprintf_r+0x86>
 8009ab2:	2a25      	cmp	r2, #37	; 0x25
 8009ab4:	d1f9      	bne.n	8009aaa <_vfiprintf_r+0x7a>
 8009ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aba:	d00b      	beq.n	8009ad4 <_vfiprintf_r+0xa4>
 8009abc:	465b      	mov	r3, fp
 8009abe:	4622      	mov	r2, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ffa1 	bl	8009a0a <__sfputs_r>
 8009ac8:	3001      	adds	r0, #1
 8009aca:	f000 80a9 	beq.w	8009c20 <_vfiprintf_r+0x1f0>
 8009ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad0:	445a      	add	r2, fp
 8009ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 80a1 	beq.w	8009c20 <_vfiprintf_r+0x1f0>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae8:	f10a 0a01 	add.w	sl, sl, #1
 8009aec:	9304      	str	r3, [sp, #16]
 8009aee:	9307      	str	r3, [sp, #28]
 8009af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af4:	931a      	str	r3, [sp, #104]	; 0x68
 8009af6:	4654      	mov	r4, sl
 8009af8:	2205      	movs	r2, #5
 8009afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afe:	4854      	ldr	r0, [pc, #336]	; (8009c50 <_vfiprintf_r+0x220>)
 8009b00:	f7f6 fb76 	bl	80001f0 <memchr>
 8009b04:	9a04      	ldr	r2, [sp, #16]
 8009b06:	b9d8      	cbnz	r0, 8009b40 <_vfiprintf_r+0x110>
 8009b08:	06d1      	lsls	r1, r2, #27
 8009b0a:	bf44      	itt	mi
 8009b0c:	2320      	movmi	r3, #32
 8009b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b12:	0713      	lsls	r3, r2, #28
 8009b14:	bf44      	itt	mi
 8009b16:	232b      	movmi	r3, #43	; 0x2b
 8009b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b20:	2b2a      	cmp	r3, #42	; 0x2a
 8009b22:	d015      	beq.n	8009b50 <_vfiprintf_r+0x120>
 8009b24:	9a07      	ldr	r2, [sp, #28]
 8009b26:	4654      	mov	r4, sl
 8009b28:	2000      	movs	r0, #0
 8009b2a:	f04f 0c0a 	mov.w	ip, #10
 8009b2e:	4621      	mov	r1, r4
 8009b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b34:	3b30      	subs	r3, #48	; 0x30
 8009b36:	2b09      	cmp	r3, #9
 8009b38:	d94d      	bls.n	8009bd6 <_vfiprintf_r+0x1a6>
 8009b3a:	b1b0      	cbz	r0, 8009b6a <_vfiprintf_r+0x13a>
 8009b3c:	9207      	str	r2, [sp, #28]
 8009b3e:	e014      	b.n	8009b6a <_vfiprintf_r+0x13a>
 8009b40:	eba0 0308 	sub.w	r3, r0, r8
 8009b44:	fa09 f303 	lsl.w	r3, r9, r3
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	9304      	str	r3, [sp, #16]
 8009b4c:	46a2      	mov	sl, r4
 8009b4e:	e7d2      	b.n	8009af6 <_vfiprintf_r+0xc6>
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	1d19      	adds	r1, r3, #4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	9103      	str	r1, [sp, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	bfbb      	ittet	lt
 8009b5c:	425b      	neglt	r3, r3
 8009b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b62:	9307      	strge	r3, [sp, #28]
 8009b64:	9307      	strlt	r3, [sp, #28]
 8009b66:	bfb8      	it	lt
 8009b68:	9204      	strlt	r2, [sp, #16]
 8009b6a:	7823      	ldrb	r3, [r4, #0]
 8009b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b6e:	d10c      	bne.n	8009b8a <_vfiprintf_r+0x15a>
 8009b70:	7863      	ldrb	r3, [r4, #1]
 8009b72:	2b2a      	cmp	r3, #42	; 0x2a
 8009b74:	d134      	bne.n	8009be0 <_vfiprintf_r+0x1b0>
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	1d1a      	adds	r2, r3, #4
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	9203      	str	r2, [sp, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	bfb8      	it	lt
 8009b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b86:	3402      	adds	r4, #2
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c60 <_vfiprintf_r+0x230>
 8009b8e:	7821      	ldrb	r1, [r4, #0]
 8009b90:	2203      	movs	r2, #3
 8009b92:	4650      	mov	r0, sl
 8009b94:	f7f6 fb2c 	bl	80001f0 <memchr>
 8009b98:	b138      	cbz	r0, 8009baa <_vfiprintf_r+0x17a>
 8009b9a:	9b04      	ldr	r3, [sp, #16]
 8009b9c:	eba0 000a 	sub.w	r0, r0, sl
 8009ba0:	2240      	movs	r2, #64	; 0x40
 8009ba2:	4082      	lsls	r2, r0
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	3401      	adds	r4, #1
 8009ba8:	9304      	str	r3, [sp, #16]
 8009baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bae:	4829      	ldr	r0, [pc, #164]	; (8009c54 <_vfiprintf_r+0x224>)
 8009bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bb4:	2206      	movs	r2, #6
 8009bb6:	f7f6 fb1b 	bl	80001f0 <memchr>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d03f      	beq.n	8009c3e <_vfiprintf_r+0x20e>
 8009bbe:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <_vfiprintf_r+0x228>)
 8009bc0:	bb1b      	cbnz	r3, 8009c0a <_vfiprintf_r+0x1da>
 8009bc2:	9b03      	ldr	r3, [sp, #12]
 8009bc4:	3307      	adds	r3, #7
 8009bc6:	f023 0307 	bic.w	r3, r3, #7
 8009bca:	3308      	adds	r3, #8
 8009bcc:	9303      	str	r3, [sp, #12]
 8009bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd0:	443b      	add	r3, r7
 8009bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd4:	e768      	b.n	8009aa8 <_vfiprintf_r+0x78>
 8009bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bda:	460c      	mov	r4, r1
 8009bdc:	2001      	movs	r0, #1
 8009bde:	e7a6      	b.n	8009b2e <_vfiprintf_r+0xfe>
 8009be0:	2300      	movs	r3, #0
 8009be2:	3401      	adds	r4, #1
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	4619      	mov	r1, r3
 8009be8:	f04f 0c0a 	mov.w	ip, #10
 8009bec:	4620      	mov	r0, r4
 8009bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf2:	3a30      	subs	r2, #48	; 0x30
 8009bf4:	2a09      	cmp	r2, #9
 8009bf6:	d903      	bls.n	8009c00 <_vfiprintf_r+0x1d0>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0c6      	beq.n	8009b8a <_vfiprintf_r+0x15a>
 8009bfc:	9105      	str	r1, [sp, #20]
 8009bfe:	e7c4      	b.n	8009b8a <_vfiprintf_r+0x15a>
 8009c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c04:	4604      	mov	r4, r0
 8009c06:	2301      	movs	r3, #1
 8009c08:	e7f0      	b.n	8009bec <_vfiprintf_r+0x1bc>
 8009c0a:	ab03      	add	r3, sp, #12
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	462a      	mov	r2, r5
 8009c10:	4b12      	ldr	r3, [pc, #72]	; (8009c5c <_vfiprintf_r+0x22c>)
 8009c12:	a904      	add	r1, sp, #16
 8009c14:	4630      	mov	r0, r6
 8009c16:	f7fd fbf1 	bl	80073fc <_printf_float>
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	1c78      	adds	r0, r7, #1
 8009c1e:	d1d6      	bne.n	8009bce <_vfiprintf_r+0x19e>
 8009c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c22:	07d9      	lsls	r1, r3, #31
 8009c24:	d405      	bmi.n	8009c32 <_vfiprintf_r+0x202>
 8009c26:	89ab      	ldrh	r3, [r5, #12]
 8009c28:	059a      	lsls	r2, r3, #22
 8009c2a:	d402      	bmi.n	8009c32 <_vfiprintf_r+0x202>
 8009c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c2e:	f7fe fa85 	bl	800813c <__retarget_lock_release_recursive>
 8009c32:	89ab      	ldrh	r3, [r5, #12]
 8009c34:	065b      	lsls	r3, r3, #25
 8009c36:	f53f af1d 	bmi.w	8009a74 <_vfiprintf_r+0x44>
 8009c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c3c:	e71c      	b.n	8009a78 <_vfiprintf_r+0x48>
 8009c3e:	ab03      	add	r3, sp, #12
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	462a      	mov	r2, r5
 8009c44:	4b05      	ldr	r3, [pc, #20]	; (8009c5c <_vfiprintf_r+0x22c>)
 8009c46:	a904      	add	r1, sp, #16
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f7fd fe7b 	bl	8007944 <_printf_i>
 8009c4e:	e7e4      	b.n	8009c1a <_vfiprintf_r+0x1ea>
 8009c50:	0800a40c 	.word	0x0800a40c
 8009c54:	0800a416 	.word	0x0800a416
 8009c58:	080073fd 	.word	0x080073fd
 8009c5c:	08009a0b 	.word	0x08009a0b
 8009c60:	0800a412 	.word	0x0800a412

08009c64 <__sflush_r>:
 8009c64:	898a      	ldrh	r2, [r1, #12]
 8009c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	0710      	lsls	r0, r2, #28
 8009c6e:	460c      	mov	r4, r1
 8009c70:	d458      	bmi.n	8009d24 <__sflush_r+0xc0>
 8009c72:	684b      	ldr	r3, [r1, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dc05      	bgt.n	8009c84 <__sflush_r+0x20>
 8009c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dc02      	bgt.n	8009c84 <__sflush_r+0x20>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c86:	2e00      	cmp	r6, #0
 8009c88:	d0f9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c90:	682f      	ldr	r7, [r5, #0]
 8009c92:	6a21      	ldr	r1, [r4, #32]
 8009c94:	602b      	str	r3, [r5, #0]
 8009c96:	d032      	beq.n	8009cfe <__sflush_r+0x9a>
 8009c98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	075a      	lsls	r2, r3, #29
 8009c9e:	d505      	bpl.n	8009cac <__sflush_r+0x48>
 8009ca0:	6863      	ldr	r3, [r4, #4]
 8009ca2:	1ac0      	subs	r0, r0, r3
 8009ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca6:	b10b      	cbz	r3, 8009cac <__sflush_r+0x48>
 8009ca8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009caa:	1ac0      	subs	r0, r0, r3
 8009cac:	2300      	movs	r3, #0
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cb2:	6a21      	ldr	r1, [r4, #32]
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	47b0      	blx	r6
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	d106      	bne.n	8009ccc <__sflush_r+0x68>
 8009cbe:	6829      	ldr	r1, [r5, #0]
 8009cc0:	291d      	cmp	r1, #29
 8009cc2:	d82b      	bhi.n	8009d1c <__sflush_r+0xb8>
 8009cc4:	4a29      	ldr	r2, [pc, #164]	; (8009d6c <__sflush_r+0x108>)
 8009cc6:	410a      	asrs	r2, r1
 8009cc8:	07d6      	lsls	r6, r2, #31
 8009cca:	d427      	bmi.n	8009d1c <__sflush_r+0xb8>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	6062      	str	r2, [r4, #4]
 8009cd0:	04d9      	lsls	r1, r3, #19
 8009cd2:	6922      	ldr	r2, [r4, #16]
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	d504      	bpl.n	8009ce2 <__sflush_r+0x7e>
 8009cd8:	1c42      	adds	r2, r0, #1
 8009cda:	d101      	bne.n	8009ce0 <__sflush_r+0x7c>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b903      	cbnz	r3, 8009ce2 <__sflush_r+0x7e>
 8009ce0:	6560      	str	r0, [r4, #84]	; 0x54
 8009ce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce4:	602f      	str	r7, [r5, #0]
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d0c9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009cea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	d002      	beq.n	8009cf8 <__sflush_r+0x94>
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f7ff f89e 	bl	8008e34 <_free_r>
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	6360      	str	r0, [r4, #52]	; 0x34
 8009cfc:	e7c0      	b.n	8009c80 <__sflush_r+0x1c>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b0      	blx	r6
 8009d04:	1c41      	adds	r1, r0, #1
 8009d06:	d1c8      	bne.n	8009c9a <__sflush_r+0x36>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0c5      	beq.n	8009c9a <__sflush_r+0x36>
 8009d0e:	2b1d      	cmp	r3, #29
 8009d10:	d001      	beq.n	8009d16 <__sflush_r+0xb2>
 8009d12:	2b16      	cmp	r3, #22
 8009d14:	d101      	bne.n	8009d1a <__sflush_r+0xb6>
 8009d16:	602f      	str	r7, [r5, #0]
 8009d18:	e7b1      	b.n	8009c7e <__sflush_r+0x1a>
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	e7ad      	b.n	8009c80 <__sflush_r+0x1c>
 8009d24:	690f      	ldr	r7, [r1, #16]
 8009d26:	2f00      	cmp	r7, #0
 8009d28:	d0a9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009d2a:	0793      	lsls	r3, r2, #30
 8009d2c:	680e      	ldr	r6, [r1, #0]
 8009d2e:	bf08      	it	eq
 8009d30:	694b      	ldreq	r3, [r1, #20]
 8009d32:	600f      	str	r7, [r1, #0]
 8009d34:	bf18      	it	ne
 8009d36:	2300      	movne	r3, #0
 8009d38:	eba6 0807 	sub.w	r8, r6, r7
 8009d3c:	608b      	str	r3, [r1, #8]
 8009d3e:	f1b8 0f00 	cmp.w	r8, #0
 8009d42:	dd9c      	ble.n	8009c7e <__sflush_r+0x1a>
 8009d44:	6a21      	ldr	r1, [r4, #32]
 8009d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d48:	4643      	mov	r3, r8
 8009d4a:	463a      	mov	r2, r7
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b0      	blx	r6
 8009d50:	2800      	cmp	r0, #0
 8009d52:	dc06      	bgt.n	8009d62 <__sflush_r+0xfe>
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	e78e      	b.n	8009c80 <__sflush_r+0x1c>
 8009d62:	4407      	add	r7, r0
 8009d64:	eba8 0800 	sub.w	r8, r8, r0
 8009d68:	e7e9      	b.n	8009d3e <__sflush_r+0xda>
 8009d6a:	bf00      	nop
 8009d6c:	dfbffffe 	.word	0xdfbffffe

08009d70 <_fflush_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	690b      	ldr	r3, [r1, #16]
 8009d74:	4605      	mov	r5, r0
 8009d76:	460c      	mov	r4, r1
 8009d78:	b913      	cbnz	r3, 8009d80 <_fflush_r+0x10>
 8009d7a:	2500      	movs	r5, #0
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	b118      	cbz	r0, 8009d8a <_fflush_r+0x1a>
 8009d82:	6a03      	ldr	r3, [r0, #32]
 8009d84:	b90b      	cbnz	r3, 8009d8a <_fflush_r+0x1a>
 8009d86:	f7fd ff8b 	bl	8007ca0 <__sinit>
 8009d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0f3      	beq.n	8009d7a <_fflush_r+0xa>
 8009d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d94:	07d0      	lsls	r0, r2, #31
 8009d96:	d404      	bmi.n	8009da2 <_fflush_r+0x32>
 8009d98:	0599      	lsls	r1, r3, #22
 8009d9a:	d402      	bmi.n	8009da2 <_fflush_r+0x32>
 8009d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d9e:	f7fe f9cc 	bl	800813a <__retarget_lock_acquire_recursive>
 8009da2:	4628      	mov	r0, r5
 8009da4:	4621      	mov	r1, r4
 8009da6:	f7ff ff5d 	bl	8009c64 <__sflush_r>
 8009daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dac:	07da      	lsls	r2, r3, #31
 8009dae:	4605      	mov	r5, r0
 8009db0:	d4e4      	bmi.n	8009d7c <_fflush_r+0xc>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	059b      	lsls	r3, r3, #22
 8009db6:	d4e1      	bmi.n	8009d7c <_fflush_r+0xc>
 8009db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dba:	f7fe f9bf 	bl	800813c <__retarget_lock_release_recursive>
 8009dbe:	e7dd      	b.n	8009d7c <_fflush_r+0xc>

08009dc0 <__swhatbuf_r>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc8:	2900      	cmp	r1, #0
 8009dca:	b096      	sub	sp, #88	; 0x58
 8009dcc:	4615      	mov	r5, r2
 8009dce:	461e      	mov	r6, r3
 8009dd0:	da0d      	bge.n	8009dee <__swhatbuf_r+0x2e>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009dd8:	f04f 0100 	mov.w	r1, #0
 8009ddc:	bf0c      	ite	eq
 8009dde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009de2:	2340      	movne	r3, #64	; 0x40
 8009de4:	2000      	movs	r0, #0
 8009de6:	6031      	str	r1, [r6, #0]
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	b016      	add	sp, #88	; 0x58
 8009dec:	bd70      	pop	{r4, r5, r6, pc}
 8009dee:	466a      	mov	r2, sp
 8009df0:	f000 f862 	bl	8009eb8 <_fstat_r>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	dbec      	blt.n	8009dd2 <__swhatbuf_r+0x12>
 8009df8:	9901      	ldr	r1, [sp, #4]
 8009dfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009dfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e02:	4259      	negs	r1, r3
 8009e04:	4159      	adcs	r1, r3
 8009e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e0a:	e7eb      	b.n	8009de4 <__swhatbuf_r+0x24>

08009e0c <__smakebuf_r>:
 8009e0c:	898b      	ldrh	r3, [r1, #12]
 8009e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e10:	079d      	lsls	r5, r3, #30
 8009e12:	4606      	mov	r6, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	d507      	bpl.n	8009e28 <__smakebuf_r+0x1c>
 8009e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	6123      	str	r3, [r4, #16]
 8009e20:	2301      	movs	r3, #1
 8009e22:	6163      	str	r3, [r4, #20]
 8009e24:	b002      	add	sp, #8
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	ab01      	add	r3, sp, #4
 8009e2a:	466a      	mov	r2, sp
 8009e2c:	f7ff ffc8 	bl	8009dc0 <__swhatbuf_r>
 8009e30:	9900      	ldr	r1, [sp, #0]
 8009e32:	4605      	mov	r5, r0
 8009e34:	4630      	mov	r0, r6
 8009e36:	f7ff f871 	bl	8008f1c <_malloc_r>
 8009e3a:	b948      	cbnz	r0, 8009e50 <__smakebuf_r+0x44>
 8009e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d4ef      	bmi.n	8009e24 <__smakebuf_r+0x18>
 8009e44:	f023 0303 	bic.w	r3, r3, #3
 8009e48:	f043 0302 	orr.w	r3, r3, #2
 8009e4c:	81a3      	strh	r3, [r4, #12]
 8009e4e:	e7e3      	b.n	8009e18 <__smakebuf_r+0xc>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	6020      	str	r0, [r4, #0]
 8009e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e58:	81a3      	strh	r3, [r4, #12]
 8009e5a:	9b00      	ldr	r3, [sp, #0]
 8009e5c:	6163      	str	r3, [r4, #20]
 8009e5e:	9b01      	ldr	r3, [sp, #4]
 8009e60:	6120      	str	r0, [r4, #16]
 8009e62:	b15b      	cbz	r3, 8009e7c <__smakebuf_r+0x70>
 8009e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f000 f837 	bl	8009edc <_isatty_r>
 8009e6e:	b128      	cbz	r0, 8009e7c <__smakebuf_r+0x70>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	f023 0303 	bic.w	r3, r3, #3
 8009e76:	f043 0301 	orr.w	r3, r3, #1
 8009e7a:	81a3      	strh	r3, [r4, #12]
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	431d      	orrs	r5, r3
 8009e80:	81a5      	strh	r5, [r4, #12]
 8009e82:	e7cf      	b.n	8009e24 <__smakebuf_r+0x18>

08009e84 <memmove>:
 8009e84:	4288      	cmp	r0, r1
 8009e86:	b510      	push	{r4, lr}
 8009e88:	eb01 0402 	add.w	r4, r1, r2
 8009e8c:	d902      	bls.n	8009e94 <memmove+0x10>
 8009e8e:	4284      	cmp	r4, r0
 8009e90:	4623      	mov	r3, r4
 8009e92:	d807      	bhi.n	8009ea4 <memmove+0x20>
 8009e94:	1e43      	subs	r3, r0, #1
 8009e96:	42a1      	cmp	r1, r4
 8009e98:	d008      	beq.n	8009eac <memmove+0x28>
 8009e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ea2:	e7f8      	b.n	8009e96 <memmove+0x12>
 8009ea4:	4402      	add	r2, r0
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	428a      	cmp	r2, r1
 8009eaa:	d100      	bne.n	8009eae <memmove+0x2a>
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eb6:	e7f7      	b.n	8009ea8 <memmove+0x24>

08009eb8 <_fstat_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d07      	ldr	r5, [pc, #28]	; (8009ed8 <_fstat_r+0x20>)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	602b      	str	r3, [r5, #0]
 8009ec6:	f7f8 fbaa 	bl	800261e <_fstat>
 8009eca:	1c43      	adds	r3, r0, #1
 8009ecc:	d102      	bne.n	8009ed4 <_fstat_r+0x1c>
 8009ece:	682b      	ldr	r3, [r5, #0]
 8009ed0:	b103      	cbz	r3, 8009ed4 <_fstat_r+0x1c>
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	bd38      	pop	{r3, r4, r5, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20000cac 	.word	0x20000cac

08009edc <_isatty_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d06      	ldr	r5, [pc, #24]	; (8009ef8 <_isatty_r+0x1c>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	602b      	str	r3, [r5, #0]
 8009ee8:	f7f8 fba9 	bl	800263e <_isatty>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_isatty_r+0x1a>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_isatty_r+0x1a>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	20000cac 	.word	0x20000cac

08009efc <_sbrk_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d06      	ldr	r5, [pc, #24]	; (8009f18 <_sbrk_r+0x1c>)
 8009f00:	2300      	movs	r3, #0
 8009f02:	4604      	mov	r4, r0
 8009f04:	4608      	mov	r0, r1
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	f7f8 fbb2 	bl	8002670 <_sbrk>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_sbrk_r+0x1a>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_sbrk_r+0x1a>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	20000cac 	.word	0x20000cac

08009f1c <memcpy>:
 8009f1c:	440a      	add	r2, r1
 8009f1e:	4291      	cmp	r1, r2
 8009f20:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f24:	d100      	bne.n	8009f28 <memcpy+0xc>
 8009f26:	4770      	bx	lr
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f32:	4291      	cmp	r1, r2
 8009f34:	d1f9      	bne.n	8009f2a <memcpy+0xe>
 8009f36:	bd10      	pop	{r4, pc}

08009f38 <__assert_func>:
 8009f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f3a:	4614      	mov	r4, r2
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <__assert_func+0x2c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4605      	mov	r5, r0
 8009f44:	68d8      	ldr	r0, [r3, #12]
 8009f46:	b14c      	cbz	r4, 8009f5c <__assert_func+0x24>
 8009f48:	4b07      	ldr	r3, [pc, #28]	; (8009f68 <__assert_func+0x30>)
 8009f4a:	9100      	str	r1, [sp, #0]
 8009f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f50:	4906      	ldr	r1, [pc, #24]	; (8009f6c <__assert_func+0x34>)
 8009f52:	462b      	mov	r3, r5
 8009f54:	f000 f872 	bl	800a03c <fiprintf>
 8009f58:	f000 f882 	bl	800a060 <abort>
 8009f5c:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <__assert_func+0x38>)
 8009f5e:	461c      	mov	r4, r3
 8009f60:	e7f3      	b.n	8009f4a <__assert_func+0x12>
 8009f62:	bf00      	nop
 8009f64:	2000006c 	.word	0x2000006c
 8009f68:	0800a427 	.word	0x0800a427
 8009f6c:	0800a434 	.word	0x0800a434
 8009f70:	0800a462 	.word	0x0800a462

08009f74 <_calloc_r>:
 8009f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f76:	fba1 2402 	umull	r2, r4, r1, r2
 8009f7a:	b94c      	cbnz	r4, 8009f90 <_calloc_r+0x1c>
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	9201      	str	r2, [sp, #4]
 8009f80:	f7fe ffcc 	bl	8008f1c <_malloc_r>
 8009f84:	9a01      	ldr	r2, [sp, #4]
 8009f86:	4605      	mov	r5, r0
 8009f88:	b930      	cbnz	r0, 8009f98 <_calloc_r+0x24>
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	b003      	add	sp, #12
 8009f8e:	bd30      	pop	{r4, r5, pc}
 8009f90:	220c      	movs	r2, #12
 8009f92:	6002      	str	r2, [r0, #0]
 8009f94:	2500      	movs	r5, #0
 8009f96:	e7f8      	b.n	8009f8a <_calloc_r+0x16>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	f7fe f851 	bl	8008040 <memset>
 8009f9e:	e7f4      	b.n	8009f8a <_calloc_r+0x16>

08009fa0 <__ascii_mbtowc>:
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	b901      	cbnz	r1, 8009fa6 <__ascii_mbtowc+0x6>
 8009fa4:	a901      	add	r1, sp, #4
 8009fa6:	b142      	cbz	r2, 8009fba <__ascii_mbtowc+0x1a>
 8009fa8:	b14b      	cbz	r3, 8009fbe <__ascii_mbtowc+0x1e>
 8009faa:	7813      	ldrb	r3, [r2, #0]
 8009fac:	600b      	str	r3, [r1, #0]
 8009fae:	7812      	ldrb	r2, [r2, #0]
 8009fb0:	1e10      	subs	r0, r2, #0
 8009fb2:	bf18      	it	ne
 8009fb4:	2001      	movne	r0, #1
 8009fb6:	b002      	add	sp, #8
 8009fb8:	4770      	bx	lr
 8009fba:	4610      	mov	r0, r2
 8009fbc:	e7fb      	b.n	8009fb6 <__ascii_mbtowc+0x16>
 8009fbe:	f06f 0001 	mvn.w	r0, #1
 8009fc2:	e7f8      	b.n	8009fb6 <__ascii_mbtowc+0x16>

08009fc4 <_realloc_r>:
 8009fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc8:	4680      	mov	r8, r0
 8009fca:	4614      	mov	r4, r2
 8009fcc:	460e      	mov	r6, r1
 8009fce:	b921      	cbnz	r1, 8009fda <_realloc_r+0x16>
 8009fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	f7fe bfa1 	b.w	8008f1c <_malloc_r>
 8009fda:	b92a      	cbnz	r2, 8009fe8 <_realloc_r+0x24>
 8009fdc:	f7fe ff2a 	bl	8008e34 <_free_r>
 8009fe0:	4625      	mov	r5, r4
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe8:	f000 f841 	bl	800a06e <_malloc_usable_size_r>
 8009fec:	4284      	cmp	r4, r0
 8009fee:	4607      	mov	r7, r0
 8009ff0:	d802      	bhi.n	8009ff8 <_realloc_r+0x34>
 8009ff2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ff6:	d812      	bhi.n	800a01e <_realloc_r+0x5a>
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	f7fe ff8e 	bl	8008f1c <_malloc_r>
 800a000:	4605      	mov	r5, r0
 800a002:	2800      	cmp	r0, #0
 800a004:	d0ed      	beq.n	8009fe2 <_realloc_r+0x1e>
 800a006:	42bc      	cmp	r4, r7
 800a008:	4622      	mov	r2, r4
 800a00a:	4631      	mov	r1, r6
 800a00c:	bf28      	it	cs
 800a00e:	463a      	movcs	r2, r7
 800a010:	f7ff ff84 	bl	8009f1c <memcpy>
 800a014:	4631      	mov	r1, r6
 800a016:	4640      	mov	r0, r8
 800a018:	f7fe ff0c 	bl	8008e34 <_free_r>
 800a01c:	e7e1      	b.n	8009fe2 <_realloc_r+0x1e>
 800a01e:	4635      	mov	r5, r6
 800a020:	e7df      	b.n	8009fe2 <_realloc_r+0x1e>

0800a022 <__ascii_wctomb>:
 800a022:	b149      	cbz	r1, 800a038 <__ascii_wctomb+0x16>
 800a024:	2aff      	cmp	r2, #255	; 0xff
 800a026:	bf85      	ittet	hi
 800a028:	238a      	movhi	r3, #138	; 0x8a
 800a02a:	6003      	strhi	r3, [r0, #0]
 800a02c:	700a      	strbls	r2, [r1, #0]
 800a02e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a032:	bf98      	it	ls
 800a034:	2001      	movls	r0, #1
 800a036:	4770      	bx	lr
 800a038:	4608      	mov	r0, r1
 800a03a:	4770      	bx	lr

0800a03c <fiprintf>:
 800a03c:	b40e      	push	{r1, r2, r3}
 800a03e:	b503      	push	{r0, r1, lr}
 800a040:	4601      	mov	r1, r0
 800a042:	ab03      	add	r3, sp, #12
 800a044:	4805      	ldr	r0, [pc, #20]	; (800a05c <fiprintf+0x20>)
 800a046:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	f7ff fcef 	bl	8009a30 <_vfiprintf_r>
 800a052:	b002      	add	sp, #8
 800a054:	f85d eb04 	ldr.w	lr, [sp], #4
 800a058:	b003      	add	sp, #12
 800a05a:	4770      	bx	lr
 800a05c:	2000006c 	.word	0x2000006c

0800a060 <abort>:
 800a060:	b508      	push	{r3, lr}
 800a062:	2006      	movs	r0, #6
 800a064:	f000 f834 	bl	800a0d0 <raise>
 800a068:	2001      	movs	r0, #1
 800a06a:	f7f8 faa5 	bl	80025b8 <_exit>

0800a06e <_malloc_usable_size_r>:
 800a06e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a072:	1f18      	subs	r0, r3, #4
 800a074:	2b00      	cmp	r3, #0
 800a076:	bfbc      	itt	lt
 800a078:	580b      	ldrlt	r3, [r1, r0]
 800a07a:	18c0      	addlt	r0, r0, r3
 800a07c:	4770      	bx	lr

0800a07e <_raise_r>:
 800a07e:	291f      	cmp	r1, #31
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4604      	mov	r4, r0
 800a084:	460d      	mov	r5, r1
 800a086:	d904      	bls.n	800a092 <_raise_r+0x14>
 800a088:	2316      	movs	r3, #22
 800a08a:	6003      	str	r3, [r0, #0]
 800a08c:	f04f 30ff 	mov.w	r0, #4294967295
 800a090:	bd38      	pop	{r3, r4, r5, pc}
 800a092:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a094:	b112      	cbz	r2, 800a09c <_raise_r+0x1e>
 800a096:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a09a:	b94b      	cbnz	r3, 800a0b0 <_raise_r+0x32>
 800a09c:	4620      	mov	r0, r4
 800a09e:	f000 f831 	bl	800a104 <_getpid_r>
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	4601      	mov	r1, r0
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ac:	f000 b818 	b.w	800a0e0 <_kill_r>
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d00a      	beq.n	800a0ca <_raise_r+0x4c>
 800a0b4:	1c59      	adds	r1, r3, #1
 800a0b6:	d103      	bne.n	800a0c0 <_raise_r+0x42>
 800a0b8:	2316      	movs	r3, #22
 800a0ba:	6003      	str	r3, [r0, #0]
 800a0bc:	2001      	movs	r0, #1
 800a0be:	e7e7      	b.n	800a090 <_raise_r+0x12>
 800a0c0:	2400      	movs	r4, #0
 800a0c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	4798      	blx	r3
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	e7e0      	b.n	800a090 <_raise_r+0x12>
	...

0800a0d0 <raise>:
 800a0d0:	4b02      	ldr	r3, [pc, #8]	; (800a0dc <raise+0xc>)
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	f7ff bfd2 	b.w	800a07e <_raise_r>
 800a0da:	bf00      	nop
 800a0dc:	2000006c 	.word	0x2000006c

0800a0e0 <_kill_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d07      	ldr	r5, [pc, #28]	; (800a100 <_kill_r+0x20>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	f7f8 fa53 	bl	8002598 <_kill>
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	d102      	bne.n	800a0fc <_kill_r+0x1c>
 800a0f6:	682b      	ldr	r3, [r5, #0]
 800a0f8:	b103      	cbz	r3, 800a0fc <_kill_r+0x1c>
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	bf00      	nop
 800a100:	20000cac 	.word	0x20000cac

0800a104 <_getpid_r>:
 800a104:	f7f8 ba40 	b.w	8002588 <_getpid>

0800a108 <_init>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	bf00      	nop
 800a10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10e:	bc08      	pop	{r3}
 800a110:	469e      	mov	lr, r3
 800a112:	4770      	bx	lr

0800a114 <_fini>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	bf00      	nop
 800a118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11a:	bc08      	pop	{r3}
 800a11c:	469e      	mov	lr, r3
 800a11e:	4770      	bx	lr
